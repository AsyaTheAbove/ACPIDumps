
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20210604
Copyright (c) 2000 - 2021 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000006B4  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000298  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x00006810  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 06)  TPM2  0x00000038  0x04  "ALASKA"  "A M I   "  0x00000001  "AMI "   0x00000000
 07)  VFCT  0x0000FE84  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  CDIT  0x00000029  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 09)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x00000002  "    "   0x01000013
 10)  IVRS  0x000000D0  0x02  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000000
 11)  DSDT  0x00007FB7  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20160930
 12)  SSDT  0x00001EC3  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  SSDT  0x0000124A  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 15)  SSDT  0x0000888F  0x02  "ALASKA"  "A M I   "  0x00000002  "MSFT"   0x04000000
 16)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 18)  SSDT  0x00000046  0x02  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01072009
 19)  SSDT  0x000000BF  0x01  "ALASKA"  "A M I   "  0x00001000  "INTL"   0x20160930
 20)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 21)  SSDT  0x00001466  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 22)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 23)  FACS  0x00000040  0x02
 24)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 24 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 86
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 10
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 11
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 00
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 00
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 00
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 00
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 00
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 00
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 00
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 00
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 00
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 00
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 01
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 86 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 10  // ................
    0030: 01 00 00 00 00 08 01 11 01 00 00 00 00 08 02 00  // ................
    0040: 00 00 00 00 00 08 03 00 00 00 00 00 00 08 04 00  // ................
    0050: 00 00 00 00 00 08 05 00 00 00 00 00 00 08 06 00  // ................
    0060: 00 00 00 00 00 08 07 00 00 00 00 00 00 08 08 00  // ................
    0070: 00 00 00 00 00 08 09 00 00 00 00 00 00 08 0A 00  // ................
    0080: 00 00 00 00 00 08 0B 00 00 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 00 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 01 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 8F
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000D895D018
[030h 0048   4]                Image OffsetX : 0000006B
[034h 0052   4]                Image OffsetY : 00000146

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 8F 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 D0 95 D8 00 00 00 00  // ................
    0030: 6B 00 00 00 46 01 00 00                          // k...F...


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 EF 41 4C 41 53 4B 41  // CDIT).....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000298
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 90
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 664 (0x298)

    0000: 43 52 41 54 98 02 00 00 01 90 41 4C 41 53 4B 41  // CRAT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 01 00 00 00 0A 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 28 00 00 0D 00 00 00 00 00 00 00 10 00 00 00  // .(..............
    0040: 02 00 28 00 28 00 00 00 00 00 40 00 40 01 00 00  // ..(.(.....@.@...
    0050: 01 0A 04 20 00 00 00 00 02 40 00 00 0B 00 00 00  // ... .....@......
    0060: 10 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0090: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00A0: 10 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 60 00 00 00 01 01 40 00 03 00 01 00  // ....`.....@.....
    00D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    00E0: 10 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 04 00 00 02 01 40 00 10 00 00 00  // ..........@.....
    0110: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0120: 11 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0150: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0160: 10 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0190: FF 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    01A0: 10 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 01 00 00 00 00 00 FF 18 00 00 FF 30  // ...............0
    01D0: 00 00 FF 18 00 00 00 00 03 40 00 00 AB 02 00 00  // .........@......
    01E0: 10 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 02 00 00 00 08 04 00 00 08 04 00 00  // ................
    0210: 08 04 00 00 00 00 00 00 03 40 00 00 AD 02 00 00  // .........@......
    0220: 10 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 04 02  // ................
    0250: 00 00 08 04 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0260: 11 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0290: FF 40 00 00 00 00 00 00                          // .@......


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I", 0x01072009)
{
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (GSA1.MPTS, MethodObj)    // 1 Arguments
    External (GSA1.MWAK, MethodObj)    // 1 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Name (IO1B, 0x0A00)
    Name (IO1L, 0x30)
    Name (IO2B, 0x0A30)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A40)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (HMIO, 0x0A45)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (RXST, Zero)
    Name (U3ST, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, Zero)
    Name (DTPT, Zero)
    Name (TTDP, One)
    Name (TPMB, 0xDBC33000)
    Name (TPBS, 0x4000)
    Name (TPMC, 0xDBC37000)
    Name (TPCS, 0x4000)
    Name (TPMM, 0xFE500010)
    Name (FTPM, 0xFE500010)
    Name (PPIM, 0xDC175F98)
    Name (PPIL, 0x1C)
    Name (AMDT, One)
    Name (TPMF, One)
    Name (PPIV, One)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.GNBD.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    Name (OSCF, Zero)
    Name (GGN2, One)
    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PEBS, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0x880FC), 
        RMBA,   32, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xC8), 
            ,   2, 
        SPRE,   1, 
        TPDE,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1800)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
            ,   9, 
        GESA,   1, 
        Offset (0x208), 
            ,   5, 
        E05C,   1, 
        Offset (0x209), 
        E08C,   1, 
        E09C,   1, 
        E10C,   1, 
        Offset (0x20B), 
            ,   5, 
        E1DC,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x377), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BE), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3F0), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F6), 
        GECD,   1, 
        Offset (0xD06), 
        G06M,   8, 
        G07M,   8, 
        Offset (0xD0B), 
        G0BM,   8, 
        Offset (0xD0E), 
        G0EM,   8, 
        Offset (0xD14), 
        G14M,   8, 
        Offset (0xD1C), 
        G1CM,   8, 
        Offset (0xD20), 
        G20M,   8, 
        Offset (0xD23), 
        G23M,   8, 
        Offset (0xD2D), 
        G2DM,   8, 
        Offset (0xD37), 
        G37M,   8, 
        Offset (0xD70), 
        G70M,   8, 
        Offset (0xD76), 
        G76M,   8, 
        Offset (0xDAF), 
        GAFM,   8, 
        GB0M,   8, 
        Offset (0xE80), 
            ,   2, 
        IMCS,   1, 
        Offset (0x1518), 
        Offset (0x151A), 
        GE10,   1, 
        Offset (0x1524), 
        Offset (0x1526), 
        GE22,   1, 
        Offset (0x1538), 
        Offset (0x153A), 
        G66I,   1, 
            ,   5, 
        G66O,   1, 
        G66E,   1, 
        Offset (0x1560), 
        Offset (0x1562), 
        G6FI,   1, 
            ,   5, 
        G6FO,   1, 
        G6FE,   1, 
        Offset (0x1604), 
        Offset (0x1606), 
        G50I,   1, 
            ,   5, 
        G50O,   1, 
        G50E,   1, 
        Offset (0x1608), 
        Offset (0x160A), 
        G51I,   1, 
            ,   5, 
        G51O,   1, 
        G51E,   1, 
        Offset (0x1610), 
        Offset (0x1612), 
        G57I,   1, 
            ,   5, 
        G57O,   1, 
        G57E,   1, 
        Offset (0x1618), 
        Offset (0x161A), 
        G59I,   1, 
            ,   5, 
        G59O,   1, 
        G59E,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
            RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80H = Arg0
        If (IMCS)
        {
            IBSE ()
        }

        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        CPMS ()
        CPMS ()
        PEWS = One
        If (IMCS)
        {
            IBWE ()
        }
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    OperationRegion (IMIO, SystemIO, 0x3E, 0x02)
    Field (IMIO, ByteAcc, NoLock, Preserve)
    {
        IMCX,   8, 
        IMCA,   8
    }

    IndexField (IMCX, IMCA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x80), 
        MSTI,   8, 
        MITS,   8, 
        MRG0,   8, 
        MRG1,   8, 
        MRG2,   8, 
        MRG3,   8
    }

    Method (WACK, 0, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 != 0xFA))
        {
            Local0 = MRG0 /* \MRG0 */
            Sleep (0x0A)
        }
    }

    Method (IBSE, 0, NotSerialized)
    {
        MRG0 = Zero
        MRG1 = 0xB5
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Zero
        MSTI = 0x80
        WACK ()
        Local0 = MRG2 /* \MRG2 */
        Local0 &= 0xFE
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Local0
        MSTI = 0x81
        WACK ()
        MRG0 = Zero
        MRG1 = One
        MRG2 = Zero
        MSTI = 0x98
        WACK ()
        MRG0 = Zero
        MRG1 = 0xB4
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
    }

    Method (IBWE, 0, NotSerialized)
    {
        MRG0 = Zero
        MRG1 = 0xB5
        MRG2 = Zero
        MSTI = 0x96
        WACK ()
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Zero
        MSTI = 0x80
        WACK ()
        Local0 = MRG2 /* \MRG2 */
        Local0 |= One
        MRG0 = Zero
        MRG1 = Zero
        MRG2 = Local0
        MSTI = 0x81
        WACK ()
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1A
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x22
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x32
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD00, Package (0x1B)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR00, Package (0x1B)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PG25, Package (0x00) {})
        Name (AG25, Package (0x00) {})
        Name (PG26, Package (0x00) {})
        Name (AG26, Package (0x00) {})
        Name (PG27, Package (0x00) {})
        Name (AG27, Package (0x00) {})
        Name (PG28, Package (0x00) {})
        Name (AG28, Package (0x00) {})
        Name (PG29, Package (0x00) {})
        Name (AG29, Package (0x00) {})
        Name (PG2A, Package (0x00) {})
        Name (AG2A, Package (0x00) {})
        Name (PG2D, Package (0x00) {})
        Name (AG2D, Package (0x00) {})
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x20000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
                Field (NAPC, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                Mutex (NAPM, 0x00)
                Method (NAPE, 0, NotSerialized)
                {
                    Acquire (NAPM, 0xFFFF)
                    NAPX = Zero
                    Local0 = NAPD /* \_SB_.PCI0.GNBD.NAPD */
                    Local0 &= 0xFFFFFFEF
                    NAPD = Local0
                    Release (NAPM)
                }

                Method (GINI, 0, NotSerialized)
                {
                    NAPE ()
                }

                OperationRegion (NBRV, PCI_Config, 0x08, One)
                Field (NBRV, ByteAcc, NoLock, Preserve)
                {
                    PREV,   8
                }

                OperationRegion (NBBR, PCI_Config, 0x1C, 0x08)
                Field (NBBR, DWordAcc, NoLock, Preserve)
                {
                    BR3L,   32, 
                    BR3H,   32
                }

                OperationRegion (NBBI, PCI_Config, 0x84, 0x04)
                Field (NBBI, DWordAcc, NoLock, Preserve)
                {
                    PARB,   32
                }

                OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
                Field (NBMS, DWordAcc, NoLock, Preserve)
                {
                    MIDX,   32, 
                    MIDR,   32
                }

                Mutex (NBMM, 0x00)
                Method (NBMR, 1, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    MIDX = Local0
                    Local0 = MIDR /* \_SB_.PCI0.GNBD.MIDR */
                    MIDX = 0x7F
                    Release (NBMM)
                    Return (Local0)
                }

                Method (NBMW, 2, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    Local0 |= 0x80
                    MIDX = Local0
                    MIDR = Arg1
                    MIDX = Local0 &= 0x7F
                    Release (NBMM)
                }

                OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
                Field (NBXP, DWordAcc, NoLock, Preserve)
                {
                    NBXI,   32, 
                    NBXD,   32
                }

                Mutex (NBXM, 0x00)
                Method (NBXR, 1, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    Local0 = NBXD /* \_SB_.PCI0.GNBD.NBXD */
                    NBXI = Zero
                    Release (NBXM)
                    Return (Local0)
                }

                Method (NBXW, 2, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    NBXD = Arg1
                    NBXI = Zero
                    Release (NBXM)
                }

                Method (GFXM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x08)
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (GPPM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x67)
                    Local0 &= 0xF0
                    Return (Local0)
                }

                Method (GPPX, 0, NotSerialized)
                {
                    Local0 = NBMR (0x2D)
                    Local0 >>= 0x07
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (XPTR, 2, NotSerialized)
                {
                    If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Local0 = GPPM ()
                        Local1 = GPPX ()
                        Local0 = One
                        If ((Arg0 < 0x04))
                        {
                            Local1 = (Arg0 + 0x02)
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x11)
                        }

                        Local0 <<= Local1
                        Local2 = NBMR (0x08)
                        If (Arg1)
                        {
                            Local2 &= ~Local0
                        }
                        Else
                        {
                            Local2 |= Local0
                        }

                        NBMW (0x08, Local2)
                        Return (Ones)
                    }
                }

                Name (PX3L, 0x80000000)
                Name (PX3H, 0x80000000)
                Name (PX3S, 0x10000000)
                Name (PX3K, 0xF0000000)
                Mutex (BR3X, 0x00)
                Method (BR3M, 0, NotSerialized)
                {
                    Local0 = PARB /* \_SB_.PCI0.GNBD.PARB */
                    Local0 >>= 0x10
                    Local0 &= 0x07
                    If (Local0)
                    {
                        Local1 = (One << Local0)
                        Local1 = (0x1000 - Local1)
                        Local1 <<= 0x14
                        PX3K = Local1
                        Local0 = (0x00100000 >> Local0)
                        PX3S = Local0
                    }

                    Acquire (BR3X, 0xFFFF)
                    Local0 = NBMR (Zero)
                    Local0 &= 0xFFFFFFF7
                    NBMW (Zero, Local0)
                    Local0 = BR3L /* \_SB_.PCI0.GNBD.BR3L */
                    Local0 &= PX3K /* \_SB_.PCI0.GNBD.PX3K */
                    PX3L = Local0
                    Local0 = BR3H /* \_SB_.PCI0.GNBD.BR3H */
                    Local0 &= 0xFF
                    PX3H = Local0
                    Local0 = NBMR (Zero)
                    Local0 |= 0x08
                    NBMW (Zero, Local0)
                    Release (BR3X)
                    Return (PX3L) /* \_SB_.PCI0.GNBD.PX3L */
                }

                Method (GPTS, 1, NotSerialized)
                {
                }

                Method (GWAK, 1, NotSerialized)
                {
                    If (PICM)
                    {
                        NAPE ()
                    }
                }

                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x90), 
                    TOM,    32, 
                    OI,     32, 
                    OD,     32, 
                    Offset (0xE0), 
                    LI,     32, 
                    LD,     32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x0000000020000000)
                    Name (UMAB, 0x00000001FF000000)
                    Name (UMAM, 0x000000021EFFFFFF)
                    Name (CRS, ResourceTemplate ()
                    {
                        QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                            0x0000000000000000, // Granularity
                            0x0000000000000000, // Range Minimum
                            0x0000000000000000, // Range Maximum
                            0x0000000000000000, // Translation Offset
                            0x0000000000000000, // Length
                            ,, _Y0F, AddressRangeMemory, TypeStatic)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((UMAS != 0x0001000000000000))
                        {
                            CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MIN, UMIN)  // _MIN: Minimum Base Address
                            CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._MAX, UMAX)  // _MAX: Maximum Base Address
                            CreateQWordField (CRS, \_SB.PCI0.GNBD.BROD._Y0F._LEN, ULEN)  // _LEN: Length
                            UMIN = UMAB /* \_SB_.PCI0.GNBD.BROD.UMAB */
                            ULEN = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                            UMAX = UMAM /* \_SB_.PCI0.GNBD.BROD.UMAM */
                        }

                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (AF7E, 0x80000001)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (DOSA, Zero)
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSA = Arg0
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                }

                Scope (\)
                {
                    Mutex (PXPX, 0x00)
                }

                Device (LCD)
                {
                    Name (_ADR, 0x0110)  // _ADR: Address
                    Name (BCLB, Package (0x34)
                    {
                        0x5A, 
                        0x3C, 
                        0x02, 
                        0x04, 
                        0x06, 
                        0x08, 
                        0x0A, 
                        0x0C, 
                        0x0E, 
                        0x10, 
                        0x12, 
                        0x14, 
                        0x16, 
                        0x18, 
                        0x1A, 
                        0x1C, 
                        0x1E, 
                        0x20, 
                        0x22, 
                        0x24, 
                        0x26, 
                        0x28, 
                        0x2A, 
                        0x2C, 
                        0x2E, 
                        0x30, 
                        0x32, 
                        0x34, 
                        0x36, 
                        0x38, 
                        0x3A, 
                        0x3C, 
                        0x3E, 
                        0x40, 
                        0x42, 
                        0x44, 
                        0x46, 
                        0x48, 
                        0x4A, 
                        0x4C, 
                        0x4E, 
                        0x50, 
                        0x52, 
                        0x54, 
                        0x56, 
                        0x58, 
                        0x5A, 
                        0x5C, 
                        0x5E, 
                        0x60, 
                        0x62, 
                        0x64
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (BCLB) /* \_SB_.PCI0.VGA_.LCD_.BCLB */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((AF7E == 0x80000001))
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                        }
                    }
                }

                Device (I2SC)
                {
                    Name (_HID, "I2SC1002")  // _HID: Hardware ID
                    Name (_CID, "AMD1234")  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (ACPM)
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                    }
                }
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
                Field (NAPC, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                OperationRegion (XPEX, SystemMemory, 0xF8011100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GPP0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }

                Device (D009)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (GPP1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (GPP2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00020005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (GPP4)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (NAPC, PCI_Config, 0xF8, 0x08)
                Field (NAPC, DWordAcc, NoLock, Preserve)
                {
                    NAPX,   32, 
                    NAPD,   32
                }

                OperationRegion (XPEX, SystemMemory, 0xF8011100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (BCLB, Package (0x34)
                        {
                            0x5A, 
                            0x3C, 
                            0x02, 
                            0x04, 
                            0x06, 
                            0x08, 
                            0x0A, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x12, 
                            0x14, 
                            0x16, 
                            0x18, 
                            0x1A, 
                            0x1C, 
                            0x1E, 
                            0x20, 
                            0x22, 
                            0x24, 
                            0x26, 
                            0x28, 
                            0x2A, 
                            0x2C, 
                            0x2E, 
                            0x30, 
                            0x32, 
                            0x34, 
                            0x36, 
                            0x38, 
                            0x3A, 
                            0x3C, 
                            0x3E, 
                            0x40, 
                            0x42, 
                            0x44, 
                            0x46, 
                            0x48, 
                            0x4A, 
                            0x4C, 
                            0x4E, 
                            0x50, 
                            0x52, 
                            0x54, 
                            0x56, 
                            0x58, 
                            0x5A, 
                            0x5C, 
                            0x5E, 
                            0x60, 
                            0x62, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (BCLB) /* \_SB_.PCI0.GFX0.VGA_.LCD_.BCLB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((^^^^VGA.AF7E == 0x80000001))
                            {
                                Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                                AFN7 (Local0)
                            }
                        }
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D037)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX1)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
            }

            Device (GFX2)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX3)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D013)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GFX4)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D015)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (AZAL)
            {
                Name (_ADR, 0x00090002)  // _ADR: Address
            }

            Device (D019)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IRQNoFlags (_Y1B)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1C)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1B._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            LDN = 0x06
                            ACTR = Zero
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        LDN = 0x06
                        ACTR = One
                        LDN = 0x05
                        ACTR = One
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)) {}
                        If ((PMFG & 0x10)) {}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (EHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (XHC0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                Name (B5EN, Zero)
                Name (BA_5, Zero)
                Name (SBAR, 0xF0B6F000)
                Name (OSVR, Zero)
                OperationRegion (SATX, PCI_Config, Zero, 0x44)
                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    VIDI,   32, 
                    Offset (0x0A), 
                    STCL,   16, 
                    Offset (0x24), 
                    BA05,   32, 
                    Offset (0x40), 
                    WTEN,   1, 
                    Offset (0x42), 
                    DIS0,   1, 
                    DIS1,   1, 
                    DIS2,   1, 
                    DIS3,   1, 
                    DIS4,   1, 
                    DIS5,   1
                }

                Field (SATX, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DISP,   6
                }

                Method (GBAA, 0, Serialized)
                {
                    BA_5 = BA05 /* \_SB_.PCI0.SATA.BA05 */
                    If (((BA_5 == Ones) || (STCL != 0x0101)))
                    {
                        B5EN = Zero
                        Return (SBAR) /* \_SB_.PCI0.SATA.SBAR */
                    }
                    Else
                    {
                        B5EN = One
                        Return (BA_5) /* \_SB_.PCI0.SATA.BA_5 */
                    }
                }

                OperationRegion (BAR5, SystemMemory, GBAA (), 0x1000)
                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    NOPT,   5, 
                    Offset (0x0C), 
                    PTI0,   1, 
                    PTI1,   1, 
                    PTI2,   1, 
                    PTI3,   1, 
                    PTI4,   1, 
                    PTI5,   1, 
                    PTI6,   1, 
                    PTI7,   1, 
                    Offset (0x118), 
                    CST0,   1, 
                    Offset (0x120), 
                        ,   7, 
                    BSY0,   1, 
                    Offset (0x128), 
                    DET0,   4, 
                    Offset (0x129), 
                    IPM0,   4, 
                    Offset (0x12C), 
                    DDI0,   4, 
                    Offset (0x198), 
                    CST1,   1, 
                    Offset (0x1A0), 
                        ,   7, 
                    BSY1,   1, 
                    Offset (0x1A8), 
                    DET1,   4, 
                    Offset (0x1A9), 
                    IPM1,   4, 
                    Offset (0x1AC), 
                    DDI1,   4, 
                    Offset (0x218), 
                    CST2,   1, 
                    Offset (0x220), 
                        ,   7, 
                    BSY2,   1, 
                    Offset (0x228), 
                    DET2,   4, 
                    Offset (0x229), 
                    IPM2,   4, 
                    Offset (0x22C), 
                    DDI2,   4, 
                    Offset (0x298), 
                    CST3,   1, 
                    Offset (0x2A0), 
                        ,   7, 
                    BSY3,   1, 
                    Offset (0x2A8), 
                    DET3,   4, 
                    Offset (0x2A9), 
                    IPM3,   4, 
                    Offset (0x2AC), 
                    DDI3,   4, 
                    Offset (0x318), 
                    CST4,   1, 
                    Offset (0x320), 
                        ,   7, 
                    BSY4,   1, 
                    Offset (0x328), 
                    DET4,   4, 
                    Offset (0x329), 
                    IPM4,   4, 
                    Offset (0x32C), 
                    DDI4,   4, 
                    Offset (0x398), 
                    CST5,   1, 
                    Offset (0x3A0), 
                        ,   7, 
                    BSY5,   1, 
                    Offset (0x3A8), 
                    DET5,   4, 
                    Offset (0x3A9), 
                    IPM5,   4, 
                    Offset (0x3AC), 
                    DDI5,   4
                }

                Field (BAR5, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    PTI,    6
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GBAA ()
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.PRID.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                        {
                            If (IPM2)
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET0 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY0 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET2 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (S12P, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY2 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SATA.SECD.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        GBAA ()
                        If ((((OSVR >= 0x0C) || (OSVR == Zero)) && B5EN))
                        {
                            If (IPM1)
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }

                            If (IPM3)
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET1 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY1 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            GBAA ()
                            If ((B5EN == Zero))
                            {
                                Return (Zero)
                            }

                            If ((DET3 == 0x03))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            GBAA ()
                            If ((((OSVR < 0x0C) && (OSVR != Zero)) && B5EN))
                            {
                                Local0 = 0x32
                                While (((BSY3 == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }
                            }
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (ENP, 2, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        DIS0 = ~Arg1
                    }
                    ElseIf ((Arg0 == One))
                    {
                        DIS1 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        DIS2 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        DIS3 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        DIS4 = ~Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        DIS5 = ~Arg1
                    }

                    WTEN = One
                    If ((Arg0 == Zero))
                    {
                        PTI0 = Arg1
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTI1 = Arg1
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTI2 = Arg1
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTI3 = Arg1
                    }
                    ElseIf ((Arg0 == 0x04))
                    {
                        PTI4 = Arg1
                    }
                    ElseIf ((Arg0 == 0x05))
                    {
                        PTI5 = Arg1
                    }

                    If ((DISP == 0x3F))
                    {
                        PTI0 = One
                    }
                    ElseIf ((DIS0 && ((DISP & 0x3E) ^ 0x3E)))
                    {
                        PTI0 = Zero
                    }

                    Local0 = PTI /* \_SB_.PCI0.SATA.PTI_ */
                    Local1 = Zero
                    While (Local0)
                    {
                        If ((Local0 & One))
                        {
                            Local1++
                        }

                        Local0 >>= One
                    }

                    NOPT = Local1--
                    WTEN = Zero
                }
            }

            Device (D023)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (APSP)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (PSPB, 0xFE500000)
                Name (_STA, 0x0F)  // _STA: Status
                Name (CRS, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y22)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (CRS, \_SB.PCI0.APSP._Y22._BAS, PBAS)  // _BAS: Base Address
                    CreateDWordField (CRS, \_SB.PCI0.APSP._Y22._LEN, PLEN)  // _LEN: Length
                    PBAS = PSPB /* \_SB_.PCI0.APSP.PSPB */
                    PLEN = 0x00100000
                    Return (CRS) /* \_SB_.PCI0.APSP.CRS_ */
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (D03B)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (D03C)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (D03D)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (D03E)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (D03F)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP1.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.XHC0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.MPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            FPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GNBD.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GNBD.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        FWAK ()
        MWAK (Arg0)
        \_SB.MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (IMCS)
            {
                IBWE ()
            }

            OSFL ()
            ^GNBD.GINI ()
            FINI ()
            If ((RVID <= 0x13)) {}
        }
    }

    OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00080000)
    Field (SMIC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x296), 
        STMR,   15, 
        TMRE,   1, 
            ,   29, 
        TMRS,   1, 
        Offset (0x36A), 
        SMIT,   8, 
        Offset (0x3DA), 
            ,   4, 
        RFCS,   2, 
        Offset (0x3DC), 
            ,   30, 
        SM30,   1, 
        Offset (0x3EE), 
        U3PS,   2, 
        Offset (0xE28), 
            ,   29, 
        SARP,   1, 
        U2RP,   1, 
        U3RP,   1, 
        Offset (0x1518), 
            ,   22, 
        G06D,   1, 
        G06E,   1, 
        Offset (0x152C), 
            ,   22, 
        G0BD,   1, 
        G0BE,   1, 
        Offset (0x1564), 
        Offset (0x1566), 
        G19S,   1, 
            ,   5, 
        G19D,   1, 
        G19E,   1, 
        Offset (0x1C00), 
        XH0E,   1, 
            ,   6, 
        U3PY,   1, 
            ,   7, 
        UD3P,   1, 
        U3PR,   1, 
            ,   11, 
        FWLM,   1, 
        FPLS,   1, 
        FPLC,   1, 
        Offset (0x1C04), 
        UA04,   16, 
            ,   15, 
        ROAM,   1, 
        UA08,   32, 
        Offset (0x1E4A), 
        I0TD,   2, 
            ,   1, 
        I0PD,   1, 
        Offset (0x1E4B), 
        I0DS,   3, 
        Offset (0x1E4C), 
        I1TD,   2, 
            ,   1, 
        I1PD,   1, 
        Offset (0x1E4D), 
        I1DS,   3, 
        Offset (0x1E4E), 
        I2TD,   2, 
            ,   1, 
        I2PD,   1, 
        Offset (0x1E4F), 
        I2DS,   3, 
        Offset (0x1E50), 
        I3TD,   2, 
            ,   1, 
        I3PD,   1, 
        Offset (0x1E51), 
        I3DS,   3, 
        Offset (0x1E56), 
        U0TD,   2, 
            ,   1, 
        U0PD,   1, 
        Offset (0x1E57), 
        U0DS,   3, 
        Offset (0x1E58), 
        U1TD,   2, 
            ,   1, 
        U1PD,   1, 
        Offset (0x1E59), 
        U1DS,   3, 
        Offset (0x1E5E), 
        SATD,   2, 
            ,   1, 
        SAPD,   1, 
        Offset (0x1E5F), 
        SADS,   3, 
        Offset (0x1E64), 
        U2TD,   2, 
            ,   1, 
        U2PD,   1, 
        Offset (0x1E65), 
        U2DS,   3, 
        Offset (0x1E6E), 
        U3TD,   2, 
            ,   1, 
        U3PD,   1, 
        Offset (0x1E6F), 
        U3DS,   3, 
        Offset (0x1E70), 
        SDTD,   2, 
            ,   1, 
        SDPD,   1, 
            ,   2, 
        SDRT,   1, 
        SDSC,   1, 
        SDDS,   3, 
        Offset (0x1E80), 
            ,   15, 
        RQ15,   1, 
            ,   2, 
        RQ18,   1, 
            ,   4, 
        RQ23,   1, 
        RQ24,   1, 
            ,   5, 
        RQTY,   1, 
        Offset (0x1E84), 
            ,   15, 
        SASR,   1, 
            ,   2, 
        U2SR,   1, 
            ,   4, 
        U3SR,   1, 
        SDSR,   1, 
        Offset (0x1E88), 
        SRSA,   32, 
        SRSD,   32, 
        Offset (0x1E94), 
        SRDY,   1, 
        Offset (0x1EA0), 
        PG1A,   1, 
        PG2,    1, 
            ,   1, 
        U3PG,   1, 
        Offset (0x1EA3), 
        PGA3,   8, 
        Offset (0x9C4A), 
            ,   1, 
        CCGE,   1, 
        Offset (0x9C5E), 
            ,   1, 
        HCGE,   1
    }

    Mutex (FDAS, 0x00)
    Method (FDDC, 2, Serialized)
    {
        Acquire (FDAS, 0xFFFF)
        If (PCEF)
        {
            Local0 = 0xD0
            If ((Arg1 == 0x03))
            {
                Local0 += 0x03
            }

            Local0 <<= 0x08
            Local0 += Arg0
            P80H = Local0
        }

        If ((Arg1 == Zero))
        {
            Switch (ToInteger (Arg0))
            {
                Case (Package (0x03)
                    {
                        0x05, 
                        0x0F, 
                        0x18
                    }

)
                {
                    PG1A = One
                }
                Case (Package (0x06)
                    {
                        0x06, 
                        0x07, 
                        0x08, 
                        0x0B, 
                        0x0C, 
                        0x12
                    }

)
                {
                    PG2 = One
                }
                Case (Package (0x0A)
                    {
                        0x05, 
                        0x0F, 
                        0x18, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x0B, 
                        0x0C, 
                        0x12, 
                        0x17
                    }

)
                {
                    SRDY = Zero
                }

            }

            Switch (ToInteger (Arg0))
            {
                Case (0x05)
                {
                    I0TD = Zero
                    I0PD = One
                    Local0 = I0DS /* \I0DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I0DS /* \I0DS */
                    }
                }
                Case (0x06)
                {
                    I1TD = Zero
                    I1PD = One
                    Local0 = I1DS /* \I1DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I1DS /* \I1DS */
                    }
                }
                Case (0x07)
                {
                    I2TD = Zero
                    I2PD = One
                    Local0 = I2DS /* \I2DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I2DS /* \I2DS */
                    }
                }
                Case (0x08)
                {
                    I3TD = Zero
                    I3PD = One
                    Local0 = I3DS /* \I3DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = I3DS /* \I3DS */
                    }
                }
                Case (0x0B)
                {
                    U0TD = Zero
                    U0PD = One
                    Local0 = U0DS /* \U0DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = U0DS /* \U0DS */
                    }
                }
                Case (0x0C)
                {
                    U1TD = Zero
                    U1PD = One
                    Local0 = U1DS /* \U1DS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = U1DS /* \U1DS */
                    }
                }
                Case (0x0F)
                {
                    STD0 ()
                }
                Case (0x12)
                {
                    U2D0 ()
                }
                Case (0x17)
                {
                    U3D0 ()
                }
                Case (0x18)
                {
                    SDD0 ()
                }

            }
        }
        Else
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x05)
                {
                    I0PD = Zero
                    Local0 = I0DS /* \I0DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I0DS /* \I0DS */
                    }

                    I0TD = 0x03
                }
                Case (0x06)
                {
                    I1PD = Zero
                    Local0 = I1DS /* \I1DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I1DS /* \I1DS */
                    }

                    I1TD = 0x03
                }
                Case (0x07)
                {
                    I2PD = Zero
                    Local0 = I2DS /* \I2DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I2DS /* \I2DS */
                    }

                    I2TD = 0x03
                }
                Case (0x08)
                {
                    I3PD = Zero
                    Local0 = I3DS /* \I3DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = I3DS /* \I3DS */
                    }

                    I3TD = 0x03
                }
                Case (0x0B)
                {
                    U0PD = Zero
                    Local0 = U0DS /* \U0DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = U0DS /* \U0DS */
                    }

                    U0TD = 0x03
                }
                Case (0x0C)
                {
                    U1PD = Zero
                    Local0 = U1DS /* \U1DS */
                    While ((Local0 != Zero))
                    {
                        Local0 = U1DS /* \U1DS */
                    }

                    U1TD = 0x03
                }
                Case (0x0F)
                {
                    STD3 ()
                }
                Case (0x12)
                {
                    U2D3 ()
                }
                Case (0x17)
                {
                    U3D3 ()
                }
                Case (0x18)
                {
                    SDD3 ()
                }

            }

            If ((I0TD == 0x03))
            {
                If ((SATD == 0x03))
                {
                    If ((SDTD == 0x03))
                    {
                        PG1A = Zero
                    }
                }
            }

            If ((I1TD == 0x03))
            {
                If ((I2TD == 0x03))
                {
                    If ((I3TD == 0x03))
                    {
                        If ((U0TD == 0x03))
                        {
                            If ((U1TD == 0x03))
                            {
                                If ((U2TD == 0x03))
                                {
                                    PG2 = Zero
                                }
                            }
                        }
                    }
                }
            }

            If ((PG1A == Zero))
            {
                If ((PG2 == Zero))
                {
                    If ((U3PG == Zero))
                    {
                        If ((S03D == One))
                        {
                            SRDY = One
                        }
                    }
                }
            }
        }

        Release (FDAS)
    }

    Method (FPTS, 1, Serialized)
    {
        SMIW = CAFS /* \CAFS */
        If ((SLTY != One))
        {
            If ((U_PS != 0x03))
            {
                DBG8 = 0x8C
                BreakPoint
            }

            If ((E_PS != 0x03))
            {
                DBG8 = 0x8D
                BreakPoint
            }

            If ((XHCD == Zero))
            {
                If ((XHCE == One))
                {
                    If ((U3TD != 0x03))
                    {
                        If ((U3ST != One))
                        {
                            FDDC (0x17, 0x03)
                        }
                    }
                }
            }

            If ((EHCD == Zero))
            {
                If ((U2TD != 0x03))
                {
                    If ((RXST != One))
                    {
                        FDDC (0x12, 0x03)
                    }
                }
            }

            If ((ST_D == One))
            {
                If ((SATD != Zero))
                {
                    FDDC (0x0F, Zero)
                }
            }
        }

        SLTY = Zero
    }

    Method (FWAK, 0, Serialized)
    {
        If ((XHCD == Zero))
        {
            If ((XHCE == One))
            {
                If ((U3TD == 0x03))
                {
                    FDDC (0x17, Zero)
                }
            }
        }

        If ((EHCD == Zero))
        {
            If ((U2TD == 0x03))
            {
                FDDC (0x12, Zero)
            }
        }

        If ((UT0E == Zero))
        {
            If ((U0TD != 0x03))
            {
                FDDC (0x0B, 0x03)
            }
        }

        If ((UT1E == Zero))
        {
            If ((U1TD != 0x03))
            {
                FDDC (0x0C, 0x03)
            }
        }

        If ((IC0E == Zero))
        {
            If ((I0TD != 0x03))
            {
                FDDC (0x05, 0x03)
            }
        }

        If ((IC1E == Zero))
        {
            If ((I1TD != 0x03))
            {
                FDDC (0x06, 0x03)
            }
        }

        If ((IC2E == Zero))
        {
            If ((I2TD != 0x03))
            {
                FDDC (0x07, 0x03)
            }
        }

        If ((IC3E == Zero))
        {
            If ((I3TD != 0x03))
            {
                FDDC (0x08, 0x03)
            }
        }
    }

    Method (PWGC, 2, Serialized)
    {
        Local0 = (PGA3 & 0xDF)
        If (Arg1)
        {
            Local0 |= Arg0
        }
        Else
        {
            Local1 = ~Arg0
            Local0 &= Local1
        }

        PGA3 = Local0
        If ((Arg0 == 0x20))
        {
            Local0 = PGA3 /* \PGA3 */
            Local0 &= Arg0
            While (!Local0)
            {
                Local0 = PGA3 /* \PGA3 */
                Local0 &= Arg0
            }
        }
    }

    Method (SDD3, 0, Serialized)
    {
        SDSP ()
        SDSC = Zero
        RQTY = Zero
        RQ24 = One
        Local0 = SDSR /* \SDSR */
        While (Local0)
        {
            Local0 = SDSR /* \SDSR */
        }

        SDPD = Zero
        Local0 = SDDS /* \SDDS */
        While ((Local0 != Zero))
        {
            Local0 = SDDS /* \SDDS */
        }

        SDTD = 0x03
        If ((ESPI == Zero))
        {
            LDQ0 = One
        }
    }

    Method (SDD0, 0, Serialized)
    {
        SDPD = One
        Local0 = SDDS /* \SDDS */
        While ((Local0 != 0x07))
        {
            Local0 = SDDS /* \SDDS */
        }

        SRAD (0x18, 0xC8)
        SDTD = Zero
        RQTY = One
        RQ24 = One
        Local0 = SDSR /* \SDSR */
        While (!Local0)
        {
            Local0 = SDSR /* \SDSR */
        }

        SD2C = SDID /* \SDID */
        SDRP ()
        LDQ0 = SNHG /* \SNHG */
        FC18 = SF18 /* \SF18 */
        If ((SDB3 == One))
        {
            Sleep (0xF0)
        }

        If ((SDB3 == 0x02))
        {
            Sleep (0x1E)
        }
    }

    Method (STD3, 0, Serialized)
    {
        ST_S ()
        Local0 = (SDS0 << 0x02)
        Local0 += 0xFED81500
        Local1 = (SDS1 << 0x02)
        Local1 += 0xFED81500
        OperationRegion (SDSA, SystemMemory, Local0, 0x04)
        Field (SDSA, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP0D,   1, 
            GP0E,   1
        }

        OperationRegion (SDSB, SystemMemory, Local1, 0x04)
        Field (SDSB, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP1D,   1, 
            GP1E,   1
        }

        RQTY = Zero
        RQ15 = One
        Local0 = SASR /* \SASR */
        While (Local0)
        {
            Local0 = SASR /* \SASR */
        }

        PWGC (0x10, One)
        SM30 = One
        If (SDS0)
        {
            GP0E = One
            GP0D = Zero
        }

        SAPD = Zero
        Local0 = SADS /* \SADS */
        While ((Local0 != Zero))
        {
            Local0 = SADS /* \SADS */
        }

        SATD = 0x03
        SARP = One
    }

    Method (STD0, 0, Serialized)
    {
        Local0 = (SDS0 << 0x02)
        Local0 += 0xFED81500
        Local1 = (SDS1 << 0x02)
        Local1 += 0xFED81500
        OperationRegion (SDSA, SystemMemory, Local0, 0x04)
        Field (SDSA, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP0D,   1, 
            GP0E,   1
        }

        OperationRegion (SDSB, SystemMemory, Local1, 0x04)
        Field (SDSB, ByteAcc, NoLock, Preserve)
        {
                ,   22, 
            GP1D,   1, 
            GP1E,   1
        }

        SARP = Zero
        SATD = Zero
        SAPD = One
        Local0 = SADS /* \SADS */
        While ((Local0 != 0x07))
        {
            Local0 = SADS /* \SADS */
        }

        Stall (0x78)
        PWGC (0x10, Zero)
        SM30 = Zero
        DSDN = Zero
        ST_R ()
        If ((RFCS == One))
        {
            ST84 = Zero
            Stall (0x78)
            ST84 = One
        }

        If (SDS0)
        {
            GP0E = One
            GP0D = One
        }

        RQTY = One
        RQ15 = One
        Local0 = SASR /* \SASR */
        While (!Local0)
        {
            Local0 = SASR /* \SASR */
        }

        ST44 = One
        If (CZFG)
        {
            DDIC = One
            Stall (0x64)
            DDIC = Zero
        }
    }

    Method (SU2P, 0, Serialized)
    {
        PWGC (0x40, Zero)
        U2RP = One
    }

    Method (U2D3, 0, Serialized)
    {
        If ((E_PS == 0x03))
        {
            RQTY = Zero
            RQ18 = One
            Local0 = U2SR /* \U2SR */
            While (Local0)
            {
                Local0 = U2SR /* \U2SR */
            }

            U2PD = Zero
            Local0 = U2DS /* \U2DS */
            While ((Local0 != Zero))
            {
                Local0 = U2DS /* \U2DS */
            }

            U2TD = 0x03
            If ((U3TD == 0x03))
            {
                SU2P ()
            }
        }
    }

    Method (U2D0, 0, Serialized)
    {
        PWGC (0x40, One)
        U2RP = Zero
        U2TD = Zero
        U2TD = Zero
        U2PD = One
        Local0 = U2DS /* \U2DS */
        While ((Local0 != 0x07))
        {
            Local0 = U2DS /* \U2DS */
        }

        RQTY = One
        RQ18 = One
        Local0 = U2SR /* \U2SR */
        While (!Local0)
        {
            Local0 = U2SR /* \U2SR */
        }

        EH2C = EHID /* \EHID */
        EHBA = EH10 /* \EH10 */
        EHME = One
        ESIM = SSIM /* \SSIM */
        EH54 = ES54 /* \ES54 */
        EH64 = ES64 /* \ES64 */
    }

    Method (LXFW, 3, Serialized)
    {
        FWLM = One
        ROAM = Arg0
        UA04 = Arg1
        UA08 = Arg2
        FPLS = One
        Local0 = FPLC /* \FPLC */
        While (!Local0)
        {
            Local0 = FPLC /* \FPLC */
        }

        FPLS = Zero
    }

    Method (X1_S, 0, Serialized)
    {
        RQTY = Zero
        RQ23 = One
        Local0 = U3SR /* \U3SR */
        While (Local0)
        {
            Local0 = U3SR /* \U3SR */
        }
    }

    Method (X1_R, 0, Serialized)
    {
        RQTY = One
        RQ23 = One
        Local0 = U3SR /* \U3SR */
        While (!Local0)
        {
            Local0 = U3SR /* \U3SR */
        }
    }

    Method (U33H, 0, Serialized)
    {
        PWGC (0x20, One)
        UD3P = One
        U3PD = Zero
        Local0 = U3DS /* \U3DS */
        While ((Local0 != Zero))
        {
            Local0 = U3DS /* \U3DS */
        }

        U3TD = 0x03
        U3RP = One
        If ((U2TD == 0x03))
        {
            SU2P ()
        }

        U3PG = Zero
        U3PS = One
    }

    Method (U3D3, 0, Serialized)
    {
        If ((U_PS == 0x03))
        {
            X0_S ()
            SMIW = 0x67
        }
    }

    Method (U30H, 0, Serialized)
    {
        U3PS = Zero
        U3PG = One
        U2RP = Zero
        U3RP = Zero
        PWGC (0x40, One)
        U3TD = Zero
        U3PD = One
        Local0 = U3DS /* \U3DS */
        While ((Local0 != 0x07))
        {
            Local0 = U3DS /* \U3DS */
        }

        Local0 = U3PY /* \U3PY */
        While ((Local0 != One))
        {
            Local0 = U3PY /* \U3PY */
        }

        U3PR = Zero
    }

    Method (U3D0, 0, Serialized)
    {
        SMIW = 0x66
        Local0 = AUSS /* \AUSS */
        If ((Local0 != One))
        {
            AUSS = One
        }

        Local0 = AUSS /* \AUSS */
        While ((Local0 != One))
        {
            Local0 = AUSS /* \AUSS */
        }

        LXFW (One, FW00, FW01)
        LXFW (Zero, FW02, FW03)
        X0_R ()
        U3PR = One
        UD3P = Zero
        U3TD = One
    }

    OperationRegion (SSMI, SystemIO, SMIT, 0x02)
    Field (SSMI, AnyAcc, NoLock, Preserve)
    {
        SMIW,   16
    }

    OperationRegion (ECMC, SystemIO, 0x72, 0x02)
    Field (ECMC, AnyAcc, NoLock, Preserve)
    {
        ECMI,   8, 
        ECMD,   8
    }

    IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        FRTB,   32, 
        Offset (0x50), 
        SLTY,   8
    }

    OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
    Field (FRTP, AnyAcc, NoLock, Preserve)
    {
        PEBA,   32, 
            ,   5, 
        IC0E,   1, 
        IC1E,   1, 
        IC2E,   1, 
        IC3E,   1, 
            ,   2, 
        UT0E,   1, 
        UT1E,   1, 
        GIOE,   1, 
            ,   1, 
        ST_E,   1, 
            ,   2, 
        EHCE,   1, 
            ,   4, 
        XHCE,   1, 
        SD_E,   1, 
            ,   2, 
        ESPI,   1, 
        Offset (0x08), 
        PCEF,   1, 
            ,   4, 
        IC0D,   1, 
        IC1D,   1, 
        IC2D,   1, 
        IC3D,   1, 
            ,   2, 
        UT0D,   1, 
        UT1D,   1, 
            ,   2, 
        ST_D,   1, 
            ,   2, 
        EHCD,   1, 
            ,   4, 
        XHCD,   1, 
        SD_D,   1, 
            ,   6, 
        S03D,   1, 
        FW00,   16, 
        FW01,   32, 
        FW02,   16, 
        FW03,   32, 
        SDS0,   8, 
        SDS1,   8, 
        CZFG,   1, 
        Offset (0x20), 
        SD10,   32, 
        EH10,   32, 
        XH10,   32, 
        STBA,   32
    }

    Method (FINI, 0, NotSerialized)
    {
        XHCE = XH0E /* \XH0E */
        If ((SDBA != 0xFFFFFFFF))
        {
            SD10 = SDBA /* \SDBA */
        }

        If ((EHBA != 0xFFFFFFFF))
        {
            EH10 = EHBA /* \EHBA */
        }

        SDID = SD2C /* \SD2C */
        EHID = EH2C /* \EH2C */
        XHID = XH2C /* \XH2C */
        STID = ST2C /* \ST2C */
        SNHG = LDQ0 /* \LDQ0 */
        SF18 = FC18 /* \FC18 */
        SSIM = ESIM /* \ESIM */
        ES54 = EH54 /* \EH54 */
        ES64 = EH64 /* \EH64 */
        If ((OSVR >= 0x0F)) {}
        Else
        {
            S03D = Zero
            XHCD = Zero
            EHCD = Zero
            ST_D = Zero
            SD_D = Zero
        }

        If ((OSVR == 0x03))
        {
            S03D = Zero
            XHCD = Zero
            EHCD = Zero
            ST_D = Zero
            SD_D = Zero
        }

        If ((UT0E == Zero))
        {
            If ((U0TD != 0x03))
            {
                FDDC (0x0B, 0x03)
            }
        }

        If ((UT1E == Zero))
        {
            If ((U1TD != 0x03))
            {
                FDDC (0x0C, 0x03)
            }
        }

        If ((IC0E == Zero))
        {
            If ((I0TD != 0x03))
            {
                FDDC (0x05, 0x03)
            }
        }

        If ((IC1E == Zero))
        {
            If ((I1TD != 0x03))
            {
                FDDC (0x06, 0x03)
            }
        }

        If ((IC2E == Zero))
        {
            If ((I2TD != 0x03))
            {
                FDDC (0x07, 0x03)
            }
        }

        If ((IC3E == Zero))
        {
            If ((I3TD != 0x03))
            {
                FDDC (0x08, 0x03)
            }
        }
    }

    OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
    Field (FCFG, DWordAcc, NoLock, Preserve)
    {
        Offset (0x80010), 
        XHBA,   32, 
        Offset (0x8002C), 
        XH2C,   32, 
        Offset (0x80048), 
        IDEX,   32, 
        DATA,   32, 
        Offset (0x80054), 
        U_PS,   2, 
        Offset (0x88010), 
        ST10,   32, 
        ST14,   32, 
        ST18,   32, 
        ST1C,   32, 
        ST20,   32, 
        ST24,   32, 
        Offset (0x8802C), 
        ST2C,   32, 
        Offset (0x88040), 
        ST40,   1, 
        Offset (0x88044), 
        ST44,   1, 
        Offset (0x8804C), 
            ,   2, 
        DDIC,   1, 
        Offset (0x88064), 
        S_PS,   2, 
        Offset (0x88084), 
            ,   1, 
        ST84,   1, 
            ,   28, 
        DSDN,   1, 
        Offset (0x8808C), 
        ST8C,   8, 
        Offset (0x90004), 
            ,   1, 
        EHME,   1, 
        Offset (0x90010), 
        EHBA,   32, 
        Offset (0x9002C), 
        EH2C,   32, 
        Offset (0x90054), 
        EH54,   8, 
        Offset (0x90064), 
        EH64,   8, 
        Offset (0x900C4), 
        E_PS,   2, 
        Offset (0xA3078), 
            ,   2, 
        LDQ0,   1, 
        Offset (0xA30CB), 
            ,   7, 
        AUSS,   1, 
        Offset (0xA7004), 
            ,   1, 
        SDME,   1, 
        Offset (0xA7010), 
        SDBA,   32, 
        Offset (0xA702C), 
        SD2C,   32, 
        Offset (0xA7094), 
        D_PS,   2, 
        Offset (0xA7095), 
        SDPE,   1, 
            ,   6, 
        PMES,   1, 
        Offset (0xA70B3), 
        SDB3,   8, 
        Offset (0xA70B5), 
        SETE,   1, 
        Offset (0xA70D0), 
            ,   17, 
        FC18,   1
    }

    OperationRegion (EHMC, SystemMemory, EH10, 0x0100)
    Field (EHMC, DWordAcc, NoLock, Preserve)
    {
        Offset (0xB0), 
            ,   5, 
        ESIM,   1
    }

    OperationRegion (SDMC, SystemMemory, SD10, 0x0100)
    Field (SDMC, AnyAcc, NoLock, Preserve)
    {
        Offset (0x24), 
            ,   6, 
        CDTC,   2, 
        Offset (0x27), 
        IRWE,   1, 
        ISWE,   1, 
        RMWE,   1
    }

    Method (SDFE, 0, Serialized)
    {
        CDTC = 0x02
        CDTC = 0x03
        CDTC = Zero
        SETE = One
        PMES = One
        SETE = Zero
    }

    Method (SDRE, 0, Serialized)
    {
        CDTC = 0x03
        CDTC = 0x02
        CDTC = Zero
        SETE = One
        PMES = One
        SETE = Zero
    }

    Method (SDSP, 0, Serialized)
    {
        SDME = One
        B600 = SDPE /* \SDPE */
        B601 = IRWE /* \IRWE */
        B602 = ISWE /* \ISWE */
        B603 = RMWE /* \RMWE */
        SDME = Zero
    }

    Method (SDRP, 0, Serialized)
    {
        If (SDFG)
        {
            If (G19S)
            {
                SDFE ()
            }
            Else
            {
                SDRE ()
            }

            SDFG = Zero
        }
    }

    Method (SRAD, 2, Serialized)
    {
        Local0 = (Arg0 << One)
        Local0 += 0xFED81E40
        OperationRegion (ADCR, SystemMemory, Local0, 0x02)
        Field (ADCR, ByteAcc, NoLock, Preserve)
        {
            ADTD,   2, 
            ADPS,   1, 
            ADPD,   1, 
            ADSO,   1, 
            ADSC,   1, 
            ADSR,   1, 
            ADIS,   1, 
            ADDS,   3
        }

        ADIS = One
        ADSR = Zero
        Stall (Arg1)
        ADSR = One
        ADIS = Zero
        Stall (Arg1)
    }

    Name (SVBF, Buffer (0x1000)
    {
         0x00                                             // .
    })
    CreateDWordField (SVBF, Zero, S000)
    CreateDWordField (SVBF, 0x04, S004)
    CreateDWordField (SVBF, 0x08, S008)
    CreateDWordField (SVBF, 0x0C, S00C)
    CreateDWordField (SVBF, 0x18, S018)
    CreateDWordField (SVBF, 0x1C, S01C)
    CreateDWordField (SVBF, 0x20, S020)
    CreateDWordField (SVBF, 0x30, S030)
    CreateDWordField (SVBF, 0x0118, S118)
    CreateDWordField (SVBF, 0x0158, S158)
    CreateDWordField (SVBF, 0x0198, S198)
    CreateDWordField (SVBF, 0x01D8, S1D8)
    CreateDWordField (SVBF, 0x0300, S300)
    CreateDWordField (SVBF, 0x0304, S304)
    CreateDWordField (SVBF, 0x0308, S308)
    CreateDWordField (SVBF, 0x030C, S30C)
    CreateDWordField (SVBF, 0x0310, S310)
    CreateDWordField (SVBF, 0x0428, S428)
    CreateDWordField (SVBF, 0x0438, S438)
    CreateDWordField (SVBF, 0x043C, S43C)
    CreateDWordField (SVBF, 0x0458, S458)
    CreateDWordField (SVBF, 0x0468, S468)
    CreateDWordField (SVBF, 0x046C, S46C)
    CreateDWordField (SVBF, 0x0470, S470)
    CreateDWordField (SVBF, 0x0480, S480)
    CreateDWordField (SVBF, 0x0484, S484)
    CreateDWordField (SVBF, 0x0488, S488)
    CreateDWordField (SVBF, 0x048C, S48C)
    CreateByteField (SVBF, 0x0600, B600)
    CreateByteField (SVBF, 0x0601, B601)
    CreateByteField (SVBF, 0x0602, B602)
    CreateByteField (SVBF, 0x0603, B603)
    CreateByteField (SVBF, 0x0700, SDFG)
    CreateByteField (SVBF, 0x0701, SNHG)
    CreateByteField (SVBF, 0x0702, SF18)
    CreateDWordField (SVBF, 0x0704, SDID)
    CreateDWordField (SVBF, 0x0730, EHID)
    CreateDWordField (SVBF, 0x0734, XHID)
    CreateDWordField (SVBF, 0x0738, STID)
    CreateByteField (SVBF, 0x0740, ES54)
    CreateByteField (SVBF, 0x0741, ES64)
    CreateDWordField (SVBF, 0x07B0, SSIM)
    CreateDWordField (SVBF, 0x0810, S810)
    CreateDWordField (SVBF, 0x0814, S814)
    CreateDWordField (SVBF, 0x0818, S818)
    CreateDWordField (SVBF, 0x081C, S81C)
    CreateDWordField (SVBF, 0x0820, S820)
    CreateDWordField (SVBF, 0x0824, S824)
    CreateDWordField (SVBF, 0x082C, S82C)
    CreateByteField (SVBF, 0x088C, S88C)
    Method (ST_S, 0, NotSerialized)
    {
        S810 = ST10 /* \ST10 */
        S814 = ST14 /* \ST14 */
        S818 = ST18 /* \ST18 */
        S81C = ST1C /* \ST1C */
        S820 = ST20 /* \ST20 */
        S824 = ST24 /* \ST24 */
        S88C = ST8C /* \ST8C */
    }

    Method (ST_R, 0, NotSerialized)
    {
        ST10 = S810 /* \S810 */
        ST14 = S814 /* \S814 */
        ST18 = S818 /* \S818 */
        ST1C = S81C /* \S81C */
        ST20 = S820 /* \S820 */
        ST24 = S824 /* \S824 */
        ST40 = One
        ST2C = STID /* \STID */
        ST40 = Zero
        ST8C = S88C /* \S88C */
    }

    Method (X0_S, 0, NotSerialized)
    {
        XHID = XH2C /* \XH2C */
        IDEX = Zero
        S000 = DATA /* \DATA */
        IDEX = 0x04
        S004 = DATA /* \DATA */
        IDEX = 0x08
        S008 = DATA /* \DATA */
        IDEX = 0x0C
        S00C = DATA /* \DATA */
        IDEX = 0x18
        S018 = DATA /* \DATA */
        IDEX = 0x1C
        S01C = DATA /* \DATA */
        IDEX = 0x20
        S020 = DATA /* \DATA */
        IDEX = 0x30
        S030 = DATA /* \DATA */
        IDEX = 0x0118
        S118 = DATA /* \DATA */
        IDEX = 0x0158
        S158 = DATA /* \DATA */
        IDEX = 0x0198
        S198 = DATA /* \DATA */
        IDEX = 0x01D8
        S1D8 = DATA /* \DATA */
        IDEX = 0x0300
        S300 = DATA /* \DATA */
        IDEX = 0x0304
        S304 = DATA /* \DATA */
        IDEX = 0x0308
        S308 = DATA /* \DATA */
        IDEX = 0x030C
        S30C = DATA /* \DATA */
        IDEX = 0x0310
        S310 = DATA /* \DATA */
        IDEX = 0x40000028
        S428 = DATA /* \DATA */
        IDEX = 0x40000038
        S438 = DATA /* \DATA */
        IDEX = 0x4000003C
        S43C = DATA /* \DATA */
        IDEX = 0x40000058
        S458 = DATA /* \DATA */
        IDEX = 0x40000068
        S468 = DATA /* \DATA */
        IDEX = 0x4000006C
        S46C = DATA /* \DATA */
        IDEX = 0x40000070
        S470 = DATA /* \DATA */
        IDEX = 0x40000080
        S480 = DATA /* \DATA */
        IDEX = 0x40000084
        S484 = DATA /* \DATA */
        IDEX = 0x40000088
        S488 = DATA /* \DATA */
        IDEX = 0x4000008C
        S48C = DATA /* \DATA */
    }

    Method (X0_R, 0, NotSerialized)
    {
        XH2C = XHID /* \XHID */
        IDEX = Zero
        DATA = S000 /* \S000 */
        IDEX = 0x04
        DATA = S004 /* \S004 */
        IDEX = 0x08
        DATA = S008 /* \S008 */
        IDEX = 0x0C
        DATA = S00C /* \S00C */
        IDEX = 0x18
        DATA = S018 /* \S018 */
        IDEX = 0x1C
        DATA = S01C /* \S01C */
        IDEX = 0x20
        DATA = S020 /* \S020 */
        IDEX = 0x30
        DATA = S030 /* \S030 */
        IDEX = 0x0118
        DATA = S118 /* \S118 */
        IDEX = 0x0158
        DATA = S158 /* \S158 */
        IDEX = 0x0198
        DATA = S198 /* \S198 */
        IDEX = 0x01D8
        DATA = S1D8 /* \S1D8 */
        IDEX = 0x0300
        DATA = S300 /* \S300 */
        IDEX = 0x0304
        DATA = S304 /* \S304 */
        IDEX = 0x0308
        DATA = S308 /* \S308 */
        IDEX = 0x030C
        DATA = S30C /* \S30C */
        IDEX = 0x0310
        DATA = S310 /* \S310 */
        IDEX = 0x40000028
        DATA = S428 /* \S428 */
        IDEX = 0x40000038
        DATA = S438 /* \S438 */
        IDEX = 0x4000003C
        DATA = S43C /* \S43C */
        IDEX = 0x40000058
        DATA = S458 /* \S458 */
        IDEX = 0x40000068
        DATA = S468 /* \S468 */
        IDEX = 0x4000006C
        DATA = S46C /* \S46C */
        IDEX = 0x40000070
        DATA = S470 /* \S470 */
        IDEX = 0x40000080
        DATA = S480 /* \S480 */
        IDEX = 0x40000084
        DATA = S484 /* \S484 */
        IDEX = 0x40000088
        DATA = S488 /* \S488 */
        IDEX = 0x4000008C
        DATA = S48C /* \S48C */
    }

    Scope (_SB)
    {
        Name (XHD0, Zero)
        Name (XHD3, Zero)
        PowerResource (P0U3, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (XHD0) /* \_SB_.XHD0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                XHD0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                XHD0 = Zero
            }
        }

        PowerResource (P3U3, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (XHD3) /* \_SB_.XHD3 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                XHD3 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                XHD3 = Zero
            }
        }

        Name (EHD0, Zero)
        Name (EHD3, Zero)
        PowerResource (P0U2, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (EHD0) /* \_SB_.EHD0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                EHD0 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                EHD0 = Zero
            }
        }

        PowerResource (P3U2, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (EHD3) /* \_SB_.EHD3 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                EHD3 = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                EHD3 = Zero
            }
        }

        Name (D0SD, Zero)
        Name (D3SD, Zero)
        PowerResource (P0SD, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0SD) /* \_SB_.D0SD */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0SD = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0SD = Zero
            }
        }

        PowerResource (P3SD, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3SD) /* \_SB_.D3SD */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3SD = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3SD = Zero
            }
        }

        Name (D0ST, One)
        Name (D3ST, One)
        PowerResource (P0ST, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0ST) /* \_SB_.D0ST */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0ST = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0ST = Zero
            }
        }

        PowerResource (P3ST, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3ST) /* \_SB_.D3ST */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3ST = One
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3ST = Zero
            }
        }
    }

    Scope (_SB.PCI0.XHC0)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U3
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U3
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((XHCD == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
        {
            Return (0x04)
        }

        Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
        {
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((XHCD == One))
            {
                If ((U3TD == 0x03))
                {
                    FDDC (0x17, Zero)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((XHCD == One))
            {
                If ((U3TD != 0x03))
                {
                    If ((U_PS == 0x03))
                    {
                        SMIW = CAFS /* \CAFS */
                        If ((SLTY != One))
                        {
                            DBG8 = 0x82
                            If ((U3ST != One))
                            {
                                FDDC (0x17, 0x03)
                            }
                        }

                        SLTY = Zero
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.EHC1)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0U2
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3U2
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((EHCD == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
        {
            Return (0x04)
        }

        Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
        {
            Return (0x04)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((EHCD == One))
            {
                If ((U2TD != Zero))
                {
                    FDDC (0x12, Zero)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((EHCD == One))
            {
                If ((E_PS == 0x03))
                {
                    If ((U2TD != 0x03))
                    {
                        SMIW = CAFS /* \CAFS */
                        If ((SLTY != One))
                        {
                            If ((RXST != One))
                            {
                                FDDC (0x12, 0x03)
                            }
                        }

                        SLTY = Zero
                    }
                }
            }
        }

        Method (RHRS, 0, NotSerialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, ExclusiveAndWake, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0036
                    }
            })
            Return (RBUF) /* \_SB_.PCI0.EHC1.RHRS.RBUF */
        }
    }

    Scope (_SB)
    {
        Method (SDRT, 0, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.SDIO)
    {
        OperationRegion (PCFG, PCI_Config, 0x2C, 0x04)
        Field (PCFG, DWordAcc, NoLock, Preserve)
        {
            SSID,   32
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0SD
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3SD
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((SD_D == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((SD_D == One))
            {
                If ((SDTD != Zero))
                {
                    FDDC (0x18, Zero)
                    If ((S03D == Zero))
                    {
                        SDRT ()
                    }
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((SD_D == One))
            {
                If ((D_PS == 0x03))
                {
                    If ((SDTD != 0x03))
                    {
                        FDDC (0x18, 0x03)
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.SATA)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0ST
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3ST
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((ST_D == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((ST_D == One))
            {
                If ((SATD != Zero))
                {
                    FDDC (0x0F, Zero)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((ST_D == One))
            {
                If ((SATD != 0x03))
                {
                    If ((S_PS == 0x03))
                    {
                        FDDC (0x0F, 0x03)
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (GPIO)
        {
            Name (_HID, "AMD0030")  // _HID: Hardware ID
            Name (_CID, "AMD0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000300,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (GIOE)
                {
                    If ((OSVR >= 0x0F))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (AAHB)
        {
            Name (_HID, "AAHB0000")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {7}
                Memory32Fixed (ReadWrite,
                    0xFEDC0000,         // Address Base
                    0x00002000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMD0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00002000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UTDB == One))
                {
                    Return (Zero)
                }
                ElseIf ((OSVR >= 0x0F))
                {
                    If ((UT0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT0D && UT0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT0D && UT0E))
                {
                    If ((U0TD == 0x03))
                    {
                        FDDC (0x0B, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT0D && UT0E))
                {
                    If ((U0TD != 0x03))
                    {
                        FDDC (0x0B, 0x03)
                    }
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMD0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00002000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((UTDB == 0x02))
                {
                    Return (Zero)
                }
                ElseIf ((OSVR >= 0x0F))
                {
                    If ((UT1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((UT1D && UT1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((UT1D && UT1E))
                {
                    If ((U1TD == 0x03))
                    {
                        FDDC (0x0C, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((UT1D && UT1E))
                {
                    If ((U1TD != 0x03))
                    {
                        FDDC (0x0C, 0x03)
                    }
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC0D && IC0E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC0D && IC0E))
                {
                    If ((I0TD == 0x03))
                    {
                        FDDC (0x05, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC0D && IC0E))
                {
                    If ((I0TD != 0x03))
                    {
                        FDDC (0x05, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC1D && IC1E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC1D && IC1E))
                {
                    If ((I1TD == 0x03))
                    {
                        FDDC (0x06, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC1D && IC1E))
                {
                    If ((I1TD != 0x03))
                    {
                        FDDC (0x06, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC2D && IC2E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC2D && IC2E))
                {
                    If ((I2TD == 0x03))
                    {
                        FDDC (0x07, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC2D && IC2E))
                {
                    If ((I2TD != 0x03))
                    {
                        FDDC (0x07, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMD0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSVR >= 0x0F))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((IC3D && IC3E))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((IC3D && IC3E))
                {
                    If ((I3TD == 0x03))
                    {
                        FDDC (0x08, Zero)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((IC3D && IC3E))
                {
                    If ((I3TD != 0x03))
                    {
                        FDDC (0x08, 0x03)
                    }
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y23)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y24)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y25)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y26)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y27,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y23._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y23._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y24._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y24._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y25._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y25._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y26._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y26._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y27._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y24._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y27._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y27._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    INTV = 0x07
                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB)
    {
        Method (MPTS, 1, NotSerialized)
        {
            \GSA1.MPTS (Arg0)
        }

        Method (MWAK, 1, NotSerialized)
        {
            \GSA1.MWAK (Arg0)
        }
    }

    Name (XUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XUP1, Package (0x04)
    {
        Zero, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XPLD, Buffer (0x10)
    {
        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
    })
    Name (NPLD, Zero)
    Name (WPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,  // ........
            /* 0008 */  0x25, 0x09, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
            /* 0010 */  0x2C, 0x01, 0xBE, 0x00                           // ,...
        }
    })
    Name (DPLD, Package (0x01)
    {
        Buffer (0x10)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0xB0, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        }
    })
    Name (BPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00,  // ....d.d.
            /* 0008 */  0x24, 0x41, 0x80, 0x01, 0x00, 0x00, 0x04, 0x00,  // $A......
            /* 0010 */  0x00, 0x03, 0xAB, 0x02                           // ....
        }
    })
    Name (CPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,  // ........
            /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Scope (_SB.PCI0.XHC0)
    {
        Method (RHRS, 0, NotSerialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                GpioInt (Level, ActiveHigh, Exclusive, PullNone, 0x0000,
                    "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x003A
                    }
            })
            Return (RBUF) /* \_SB_.PCI0.XHC0.RHRS.RBUF */
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB)
    {
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : F8
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DC262D80
[028h 0040   4]                 DSDT Address : DC1F9218
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000DC1F9218
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 F8 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 80 2D 26 DC 18 92 1F DC 00 01 09 00  // .....-&.........
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 18 92 1F DC  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 115875BC
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 BC 75 58 11 00 00 00 00  // FACS@....uX.....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 71
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 71 41 4C 41 53 4B 41  // FIDT.....qALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 38 41 30 36 42  // ....$FID.x.8A06B
    0030: 47 30 54 00 5C 29 17 40 24 DB 36 82 AE 12 84 BE  // G0T.\).@$.6.....
    0040: 97 26 6E D5 30 35 00 31 34 00 49 31 00 34 30 00  // .&n.05.14.I1.40.
    0050: E4 07 04 1C 10 20 32 FF FF 41 4C 41 53 4B 41 41  // ..... 2..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9E
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000DCFAD030

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000DCFAD050

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 9E 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 D0 FA DC  // ............0...
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 D0 FA DC  // ............P...
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 55
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B8
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 1
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6E

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 00
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 00
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B8
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 1
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FEB80000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 000077EF22294ADA
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A4
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 00
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 00
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 55 41 4C 41 53 4B 41  // IVRS.....UALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B8 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 00 A0 00 01  // H.......H.......
    0070: 48 00 00 00 00 01 00 01 11 B8 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 00 00 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 00 A0 00 01 48 00 00 00 00 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x00005AE8, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x000042B5, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000B54, 
                0x000034C8, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00002562, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000189C, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000EF8, 
                0x00000004, 
                0x00000004, 
                0x00000005, 
                0x00000005
            }
        })
        Name (XPSS, Package (0x06)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x00005AE8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x000042B5, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000B54, 
                0x000034C8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00002562, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x0000189C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000EF8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x06)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000DAC, 
                0x00005AE8, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x000042B5, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000B54, 
                0x000034C8, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x00002562, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000189C, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000EF8, 
                0x00000004, 
                0x00000004, 
                0x00000005, 
                0x00000005
            }
        })
        Name (XPSS, Package (0x06)
        {
            Package (0x08)
            {
                0x00000DAC, 
                0x00005AE8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x000042B5, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000B54, 
                0x000034C8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000960, 
                0x00002562, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x0000189C, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000EF8, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (GSA1.M009, MethodObj)    // 1 Arguments
    External (GSA1.M010, MethodObj)    // 2 Arguments
    External (GSA1.M011, MethodObj)    // 4 Arguments
    External (GSA1.M012, MethodObj)    // 5 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)

    Scope (\)
    {
        Device (GSA1)
        {
            Method (GIO2, 0, Serialized)
            {
            }

            Method (GIO0, 1, Serialized)
            {
                Return (M009 (Arg0))
            }

            Method (GIO1, 2, Serialized)
            {
                M010 (Arg0, Arg1)
            }

            Method (PIOD, 1, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, 0x80, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }

            Method (PIO0, 3, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.PIO0.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Method (PIO1, 4, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.PIO1.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                VARR = Local4
            }

            Method (PIO6, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.PIO6.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.PIO6.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.PIO6.VARR */
                    }

                }

                Return (Zero)
            }

            Method (PIO7, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Method (PFM8, 4, Serialized)
            {
                Local1 = Arg0
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                Return (Local4)
            }

            Method (PFM9, 3, Serialized)
            {
                Local1 = Arg0
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Name (GGGD, "AM4: X470/X570")
            Method (PFM0, 0, Serialized)
            {
            }

            Method (PFM1, 1, Serialized)
            {
                PFM0 ()
            }

            Method (PFM2, 1, Serialized)
            {
            }

            Name (PFMH, Package (0x04)
            {
                Buffer (0x03)
                {
                     0x02, 0xA0, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA2, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA4, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA6, 0x00                                 // ...
                }
            })
            Method (PFM7, 0, Serialized)
            {
                Return (RefOf (PFMH))
            }

            Mutex (MEMB, 0x00)
            Method (MEM8, 0, Serialized)
            {
            }

            Method (MEM9, 1, Serialized)
            {
                MEM8 ()
            }

            Method (MEMA, 1, Serialized)
            {
            }

            Method (MEM0, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.MEM0.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Method (MEM1, 4, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.MEM1.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                VARR = Local4
            }

            Method (MEM4, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.MEM4.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.MEM4.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.MEM4.VARR */
                    }

                }

                Return (Zero)
            }

            Method (MEM5, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Method (PCI0, 0, Serialized)
            {
            }

            Method (PCI1, 1, Serialized)
            {
                PCI0 ()
            }

            Method (PCI2, 1, Serialized)
            {
            }

            Method (PCI4, 0, Serialized)
            {
                Return (PCIB) /* \GSA1.PCIB */
            }

            Name (PCIB, 0xF8000000)
            Method (PCI9, 5, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                Return (MEM4 (Local0, Arg4))
            }

            Method (PCIA, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                MEM5 (Local0, Arg4, Arg5)
            }

            Method (PCIE, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, Zero))
            }

            Method (PCIF, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, Zero, Arg4)
            }

            Method (PCIG, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, One))
            }

            Method (PCIH, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, One, Arg4)
            }

            Method (PCI7, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x02))
            }

            Method (PCI8, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x02, Arg4)
            }

            Method (PCI5, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Return (MEM0 ((Local0 + Arg3), Arg4, Arg5))
            }

            Method (PCI6, 7, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                If ((MEM0 (Local0, Zero, 0x20) != Ones))
                {
                    MEM1 ((Local0 + Arg3), Arg4, Arg5, Arg6)
                }
            }

            Method (PCIC, 4, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                Local0 = VAR2 /* \GSA1.PCIC.VAR2 */
                Return (Local0)
            }

            Method (PCID, 5, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                VAR2 = Arg4
            }

            Method (SMBB, 0, Serialized)
            {
                Return (0x0B00)
            }

            Method (SMB8, 0, Serialized)
            {
            }

            Mutex (SMMB, 0x00)
            OperationRegion (SMBI, SystemIO, 0x0B00, 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCNT,   8, 
                HCMD,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8
            }

            Method (SMBG, 1, Serialized)
            {
                SMB8 ()
            }

            Method (SMBH, 1, Serialized)
            {
            }

            Method (KILL, 0, Serialized)
            {
                HCNT |= 0x02
                HSTS |= 0xFF
            }

            Method (CMPL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SRDY, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            HSTS = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMB0, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB1, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB2, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = Arg2
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB3, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB4, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = (Arg2 & 0xFF)
                DAT1 = ((Arg2 >> 0x08) & 0xFF)
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB5, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Ones)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Ones)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }
                }

                Return (Ones)
            }

            Method (SMB9, 4, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCNT = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SMBA, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100) {})
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \GSA1.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \GSA1.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \GSA1.SMBA.TBUF */
                }

                HSTS |= 0xFF
                Return (Zero)
            }

            Method (SMBF, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    SMB2 (0x6C, Zero, Zero)
                }
                Else
                {
                    SMB2 (0x6E, Zero, Zero)
                }
            }

            Method (SMBE, 2, Serialized)
            {
                Local0 = Zero
                While ((Local0 < 0x0200))
                {
                    If ((Local0 == Zero))
                    {
                        SMBF (Zero)
                    }

                    If ((Local0 == 0x0100))
                    {
                        SMBF (One)
                    }

                    Local1 = SMB3 (Arg0, (Local0 % 0x0100))
                    If ((Local1 == 0xFFFF))
                    {
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Arg1 [Local0] = Local1
                        Local0++
                    }
                }

                SMBF (Zero)
                Return (Zero)
            }

            Method (SMAB, 0, Serialized)
            {
                Return (0x0B20)
            }

            Method (SMA8, 0, Serialized)
            {
            }

            Mutex (SMME, 0x00)
            OperationRegion (SMG0, SystemIO, 0x0B20, 0x20)
            Field (SMG0, ByteAcc, NoLock, Preserve)
            {
                SMG1,   8, 
                Offset (0x02), 
                SMG2,   8, 
                SMG3,   8, 
                SMG4,   8, 
                SMG5,   8, 
                SMG6,   8, 
                SMG7,   8
            }

            Method (SMAG, 1, Serialized)
            {
                SMA8 ()
            }

            Method (SMAH, 1, Serialized)
            {
            }

            Method (SMAK, 0, Serialized)
            {
                SMG2 |= 0x02
                SMG1 |= 0xFF
            }

            Method (SMAL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SMAM, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((SMG1 & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMG1 = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMA0, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA1, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA2, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = Arg2
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA3, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA4, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = (Arg2 & 0xFF)
                SMG6 = ((Arg2 >> 0x08) & 0xFF)
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA5, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (Ones)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Ones)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (((SMG6 << 0x08) | SMG5))
                    }
                }

                Return (Ones)
            }

            Method (SMA9, 4, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = SizeOf (Arg2)
                Local1 = Zero
                SMG7 = DerefOf (Arg2 [Zero])
                SMG2 = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return (Zero)
                    }

                    SMG1 = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        SMG7 = DerefOf (Arg2 [Local1])
                    }
                }

                If (SMAL ())
                {
                    SMG1 |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SMAA, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100) {})
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x54
                Local0 = 0x0FA0
                While ((!(SMG1 & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    SMAK ()
                    Return (Zero)
                }

                TBUF [Zero] = SMG5 /* \GSA1.SMG5 */
                SMG1 = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return (Zero)
                    }

                    TBUF [Local1] = SMG7 /* \GSA1.SMG7 */
                    SMG1 = 0x80
                    Local1++
                }

                If (SMAL ())
                {
                    SMG1 |= 0xFF
                    Return (TBUF) /* \GSA1.SMAA.TBUF */
                }

                SMG1 |= 0xFF
                Return (Zero)
            }

            Method (SMM9, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMA, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM0, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB0 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (Zero)
            }

            Method (SMM1, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB1 (Arg1)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (0xFFFF)
            }

            Method (SMM2, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB2 (Arg1, Arg2, Arg3)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA2 (Arg1, Arg2, Arg3)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM3, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB3 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA3 (Arg1, Arg2)
                    Release (SMME)
                    Return (Local0)
                }

                Return (0xFFFF)
            }

            Method (SMM4, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB4 (Arg1, Arg2, Arg3)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA4 (Arg1, Arg2, Arg3)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM5, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB5 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA5 (Arg1, Arg2)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (SMM6, 5, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SMME, 0xFFFF)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM7, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SMME, 0xFFFF)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (SMM8, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMBE (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (XDP8, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = (((SMB3 (Arg0, 0xFD) | (SMB3 (Arg0, 0xFC) << 0x08
                    )) | (SMB3 (Arg0, 0x6E) << 0x10)) | (SMB3 (Arg0, 0x6F) << 
                    0x18))
                Release (SMMB)
                Return (Local0)
            }

            Method (XDPV, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x6E)
                Local1 = SMB3 (Arg0, 0x6F)
                Local2 = SMB3 (Arg0, 0xFC)
                Release (SMMB)
                If ((((Local0 == 0x52) && (Local1 == 0x49)) && (Local2 == 0x7C)))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (XDPU, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x74)
                Release (SMMB)
                Return (Local0)
            }

            Method (XDPE, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local3 = SMB5 (Arg0, (Local1 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPF, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = Arg2
                SMB4 (Arg0, (Local1 & 0xFF), Local5)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDP9, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                }
                Else
                {
                    Local0 = 0x08090082
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local5 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local5)
            }

            Method (XDPA, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }
                Else
                {
                    Local0 = 0x08090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), Zero)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), 0xA55A)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB4 (Arg0, (Local0 & 0xFF), Arg2)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), Zero)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), One)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPW, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local2 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                Return (Local2)
            }

            Method (XDPX, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), (Arg2 & One))
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPC, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local2 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local2)
            }

            Method (XDPB, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB2 (Arg0, (Local0 & 0xFF), Arg2)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPD, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x040800B0
                }
                Else
                {
                    Local0 = 0x080800B1
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local1 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local1)
            }

            Method (XDPM, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPN, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPJ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPK, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPO, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610008C
                }
                Else
                {
                    Local0 = 0x0A10008C
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPP, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610008C
                }
                Else
                {
                    Local0 = 0x0A10008C
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPY, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPZ, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPQ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPR, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPS, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4D)
                    Local1 = SMB3 (Arg0, 0x4A)
                    Local2 = SMB3 (Arg0, 0x4B)
                    Local4 = ((Local0 + (Local1 << 0x08)) + (Local2 << 0x10
                        ))
                    Release (SMMB)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4C)
                    Local4 = Local0
                    Release (SMMB)
                }

                Return (Local4)
            }

            Method (XDPT, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4D, (Arg2 & 0xFF))
                    SMB2 (Arg0, 0x4A, ((Arg2 >> 0x08) & 0xFF))
                    SMB2 (Arg0, 0x4B, ((Arg2 >> 0x10) & 0xFF))
                    Release (SMMB)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4C, (Arg2 & 0xFF))
                    Release (SMMB)
                }

                Return (Zero)
            }

            Method (IRCU, 1, Serialized)
            {
                Return (Ones)
            }

            Method (IRCE, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCF, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRC9, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCA, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCC, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCB, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCD, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCM, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCN, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCO, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCP, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCQ, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCR, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (IRCS, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Ones)
            }

            Method (IRCT, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero) {}
                Return (Zero)
            }

            Method (ISM0, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMD, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMF, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Local2 = PFM9 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF))
                Return (Local2)
            }

            Method (ISMG, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Local2 = PFM8 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF), Arg2)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), Local2)
                Return (Zero)
            }

            Method (ISM5, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM6, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                Local2 = 0x000800E7
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                SMM2 (0x02, Arg0, (Local2 & 0xFF), One)
                Return (Zero)
            }

            Method (ISME, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010008B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM4, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM3, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM2, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM1, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM7, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM8, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM9, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMA, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISMH, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMI, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISMJ, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMK, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISML, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000E6
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMM, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000E6
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISK0, 1, Serialized)
            {
                If (ISMD (Arg0))
                {
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ISK5, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM5 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK6, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM6 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK4, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM4 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK3, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM3 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK2, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM2 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK1, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM1 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK7, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM7 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK8, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISM8 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK9, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM9 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISKA, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero) {}
                ElseIf ((Local0 == Zero))
                {
                    ISMA (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (NCT0, 1, Serialized)
            {
                Return ((SMM3 (0x02, Arg0, 0x5D) | (SMM3 (0x02, Arg0, 0x5E) << 0x08
                    )))
            }

            Method (NCT1, 2, Serialized)
            {
                Return (SMM3 (0x02, Arg0, Arg1))
            }

            Method (NCT2, 3, Serialized)
            {
                Local1 = SMM2 (0x02, Arg0, Arg1, Arg2)
                Return (Local1)
            }

            Name (SIOG, 0x0A45)
            OperationRegion (SIO1, SystemIO, SIOG, 0x02)
            Field (SIO1, ByteAcc, Lock, WriteAsZeros)
            {
                SIO2,   8, 
                SIO3,   8
            }

            IndexField (SIO2, SIO3, ByteAcc, Lock, Preserve)
            {
                Offset (0x0B), 
                FTD1,   3, 
                FTD2,   3, 
                Offset (0x0D), 
                FTA1,   8, 
                FTA2,   8, 
                FTA3,   8, 
                Offset (0x13), 
                FAE1,   1, 
                FAE2,   1, 
                FAE3,   1, 
                REV1,   1, 
                FTE1,   1, 
                FTE2,   1, 
                FTE3,   1, 
                Offset (0x14), 
                FBE1,   1, 
                FBE2,   1, 
                FBE3,   1, 
                REV2,   4, 
                Offset (0x15), 
                FP10,   7, 
                FP17,   1, 
                FP20,   7, 
                FP27,   1, 
                FP30,   7, 
                FP37,   1, 
                FTB1,   8, 
                FTB2,   8, 
                FTB3,   8, 
                Offset (0x29), 
                FET1,   8, 
                FET2,   8, 
                FET3,   8, 
                FET4,   8, 
                FET5,   8, 
                FET6,   8, 
                Offset (0x44), 
                BEEP,   8, 
                Offset (0x4C), 
                FTA6,   8, 
                FTB6,   8, 
                Offset (0x5C), 
                FBEC,   3, 
                Offset (0x60), 
                FC10,   8, 
                FC11,   8, 
                FC12,   8, 
                FC13,   8, 
                FC14,   8, 
                FC15,   8, 
                FC16,   8, 
                FC17,   8, 
                FC20,   8, 
                FC21,   8, 
                FC22,   8, 
                FC23,   8, 
                FC24,   8, 
                FC25,   8, 
                FC26,   8, 
                FC27,   8, 
                FC30,   8, 
                FC31,   8, 
                FC32,   8, 
                FC33,   8, 
                FC34,   8, 
                FC35,   8, 
                FC36,   8, 
                FC37,   8, 
                FC40,   8, 
                FC41,   8, 
                FC42,   8, 
                FC43,   8, 
                FC44,   8, 
                FC45,   8, 
                FC46,   8, 
                FC47,   8, 
                FTA4,   8, 
                FTB4,   8, 
                FTA5,   8, 
                FTB5,   8, 
                Offset (0xA0), 
                FC50,   8, 
                FC51,   8, 
                FC52,   8, 
                FC53,   8, 
                FC54,   8, 
                FC55,   8, 
                FC56,   8, 
                FC57,   8, 
                FC60,   8, 
                FC61,   8, 
                FC62,   8, 
                FC63,   8, 
                FC64,   8, 
                FC65,   8, 
                FC66,   8, 
                FC67,   8
            }

            Method (SIOE, 0, NotSerialized)
            {
                Return (FBEC) /* \GSA1.FBEC */
            }

            Method (SIOF, 1, NotSerialized)
            {
                FBEC = Arg0
            }

            Method (SIOA, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = Zero
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = Zero
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = Zero
                    }

                }
            }

            Method (SIO9, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = One
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = One
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = One
                    }

                }
            }

            Method (SIOD, 1, Serialized)
            {
                Local1 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (((FBE1 == Zero) && (FAE1 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (One)
                    {
                        If (((FBE2 == Zero) && (FAE2 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (0x02)
                    {
                        If (((FBE3 == Zero) && (FAE3 == Zero)))
                        {
                            Local1 = One
                        }
                    }

                }

                Return (Local1)
            }

            Method (SIO0, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FET1) /* \GSA1.FET1 */
                    }
                    Case (One)
                    {
                        Return (FET2) /* \GSA1.FET2 */
                    }
                    Case (0x02)
                    {
                        Return (FET3) /* \GSA1.FET3 */
                    }
                    Case (0x03)
                    {
                        Return (FET4) /* \GSA1.FET4 */
                    }
                    Case (0x04)
                    {
                        Return (FET5) /* \GSA1.FET5 */
                    }
                    Case (0x05)
                    {
                        Return (FET6) /* \GSA1.FET6 */
                    }

                }
            }

            Method (SIO4, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (((FTB1 << 0x08) | FTA1))
                    }
                    Case (One)
                    {
                        Return (((FTB2 << 0x08) | FTA2))
                    }
                    Case (0x02)
                    {
                        Return (((FTB3 << 0x08) | FTA3))
                    }
                    Case (0x03)
                    {
                        Return (((FTB4 << 0x08) | FTA4))
                    }
                    Case (0x04)
                    {
                        Return (((FTB5 << 0x08) | FTA5))
                    }
                    Case (0x05)
                    {
                        Return (((FTB6 >> 0x08) | FTA6))
                    }

                }
            }

            Method (SIOC, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FP10 = Arg1
                    }
                    Case (One)
                    {
                        FP20 = Arg1
                    }
                    Case (0x02)
                    {
                        FP30 = Arg1
                    }

                }
            }

            Method (SIOB, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FP10) /* \GSA1.FP10 */
                    }
                    Case (One)
                    {
                        Return (FP20) /* \GSA1.FP20 */
                    }
                    Case (0x02)
                    {
                        Return (FP30) /* \GSA1.FP30 */
                    }

                }

                Return (Zero)
            }

            Method (SIO7, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC10) /* \GSA1.FC10 */
                    }
                    Case (One)
                    {
                        Return (FC20) /* \GSA1.FC20 */
                    }
                    Case (0x02)
                    {
                        Return (FC30) /* \GSA1.FC30 */
                    }
                    Case (0x03)
                    {
                        Return (FC40) /* \GSA1.FC40 */
                    }
                    Case (0x04)
                    {
                        Return (FC50) /* \GSA1.FC50 */
                    }
                    Case (0x05)
                    {
                        Return (FC60) /* \GSA1.FC60 */
                    }

                }

                Return (Zero)
            }

            Method (SIO5, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC11) /* \GSA1.FC11 */
                    }
                    Case (One)
                    {
                        Return (FC21) /* \GSA1.FC21 */
                    }
                    Case (0x02)
                    {
                        Return (FC31) /* \GSA1.FC31 */
                    }
                    Case (0x03)
                    {
                        Return (FC41) /* \GSA1.FC41 */
                    }
                    Case (0x04)
                    {
                        Return (FC51) /* \GSA1.FC51 */
                    }
                    Case (0x05)
                    {
                        Return (FC61) /* \GSA1.FC61 */
                    }

                }

                Return (Zero)
            }

            Method (SIO8, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC10 = Arg1
                    }
                    Case (One)
                    {
                        FC20 = Arg1
                    }
                    Case (0x02)
                    {
                        FC30 = Arg1
                    }
                    Case (0x03)
                    {
                        FC40 = Arg1
                    }
                    Case (0x04)
                    {
                        FC50 = Arg1
                    }
                    Case (0x05)
                    {
                        FC60 = Arg1
                    }

                }
            }

            Method (SIO6, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC11 = Arg1
                    }
                    Case (One)
                    {
                        FC21 = Arg1
                    }
                    Case (0x02)
                    {
                        FC31 = Arg1
                    }
                    Case (0x03)
                    {
                        FC41 = Arg1
                    }
                    Case (0x04)
                    {
                        FC51 = Arg1
                    }
                    Case (0x05)
                    {
                        FC61 = Arg1
                    }

                }
            }

            Scope (\_TZ)
            {
                ThermalZone (TZ10)
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        \GSA1.ZRC0 ()
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (\_OSI ("Windows 2001"))
                        {
                            Local0 = 0x04
                        }

                        If (\_OSI ("Windows 2001.1"))
                        {
                            Local0 = 0x05
                        }

                        If (\_OSI ("FreeBSD"))
                        {
                            Local0 = 0x06
                        }

                        If (\_OSI ("HP-UX"))
                        {
                            Local0 = 0x07
                        }

                        If (\_OSI ("OpenVMS"))
                        {
                            Local0 = 0x08
                        }

                        If (\_OSI ("Windows 2001 SP1"))
                        {
                            Local0 = 0x09
                        }

                        If (\_OSI ("Windows 2001 SP2"))
                        {
                            Local0 = 0x0A
                        }

                        If (\_OSI ("Windows 2001 SP3"))
                        {
                            Local0 = 0x0B
                        }

                        If (\_OSI ("Windows 2006"))
                        {
                            Local0 = 0x0C
                        }

                        If (\_OSI ("Windows 2006 SP1"))
                        {
                            Local0 = 0x0D
                        }

                        If (\_OSI ("Windows 2009"))
                        {
                            Local0 = 0x0E
                        }

                        If (\_OSI ("Windows 2012"))
                        {
                            Local0 = 0x0F
                        }

                        If (\_OSI ("Windows 2013"))
                        {
                            Local0 = 0x10
                        }

                        If (\_OSI ("Windows 2015"))
                        {
                            Local0 = 0x11
                        }

                        If (\_OSI ("Windows 2016"))
                        {
                            Local0 = 0x12
                        }

                        If (\_OSI ("Windows 2017"))
                        {
                            Local0 = 0x13
                        }

                        If (\_OSI ("Windows 2017.2"))
                        {
                            Local0 = 0x14
                        }

                        If (\_OSI ("Windows 2018"))
                        {
                            Local0 = 0x15
                        }

                        If (\_OSI ("Windows 2018.2"))
                        {
                            Local0 = 0x16
                        }

                        If ((Local0 <= 0x0E))
                        {
                            \GSA1.ZRD2 = One
                        }

                        Return (0x0B)
                    }

                    Name (TZD, Package (0x00) {})
                    Method (_TZD, 0, Serialized)  // _TZD: Thermal Zone Devices
                    {
                        Return (TZD) /* \_TZ_.TZ10.TZD_ */
                    }

                    Name (PSL, Package (0x00) {})
                    Method (_PSL, 0, Serialized)  // _PSL: Passive List
                    {
                        Return (PSL) /* \_TZ_.TZ10.PSL_ */
                    }

                    Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
                    {
                        Return (0x0B54)
                    }

                    Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
                    {
                        Return (0x0B72)
                    }

                    Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                    {
                        Return (0x0B7C)
                    }

                    Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                    {
                        Return (Zero)
                    }

                    Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                    {
                        Return (Zero)
                    }

                    Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                    {
                        Return (0x0A)
                    }

                    Method (_TZP, 0, Serialized)  // _TZP: Thermal Zone Polling
                    {
                        Return (0x0A)
                    }

                    Method (_TMP, 0, Serialized)  // _TMP: Temperature
                    {
                        \GSA1.ZRC3 ()
                        If ((\GSA1.ZRD1 == One))
                        {
                            Sleep (0x03E8)
                            Notify (\_TZ.TZ10, 0x81) // Thermal Trip Point Change
                        }

                        Return (0x0B54)
                    }

                    Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
                    {
                    }
                }
            }

            Name (ZRC8, Package (0x02)
            {
                Package (0x02)
                {
                    Zero, 
                    0x5F
                }, 

                Package (0x02)
                {
                    One, 
                    0x60
                }
            })
            Name (ZRCL, Buffer (0x0E)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x02, 0x00               // ......
            })
            Name (ZRCT, Zero)
            Name (ZRCF, Zero)
            Name (ZRCG, 0x1E)
            Method (ZRCQ, 0, NotSerialized)
            {
                ZRCU (Zero)
                Local0 = SIOE ()
                SIOF (Zero)
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        ZRCL [((Local6 * 0x07) + 0x02)] = ZRC1 (
                            Local1)
                        ZRC2 (Local1, 0x02)
                        If ((SIO4 (Local1) != 0xFFFF))
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = 0xFF
                        }
                        Else
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = Zero
                        }

                        If ((Local1 == 0x02))
                        {
                            ZRCL [((Local6 * 0x07) + 0x03)] = 0xFF
                        }
                    }

                    Local6++
                }

                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                        {
                            ZRC2 (Local1, 0x02)
                            SIOA (Local1)
                        }
                    }

                    Local6++
                }

                Sleep (0x1770)
                Local6 = Zero
                Local5 = SizeOf (ZRC8)
                While ((Local6 < Local5))
                {
                    Local7 = ZRCJ (Local6)
                    If ((ObjectType (Local7) == 0x04))
                    {
                        Local1 = DerefOf (Local7 [Zero])
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                        {
                            Local3 = SIO4 (Local1)
                            If (((Local3 == 0xFFFF) && (Local1 != 0x02)))
                            {
                                ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                                    ))
                                ZRCL [((Local6 * 0x07) + 0x04)] = 0x03
                            }
                            Else
                            {
                                ZRC2 (Local1, DerefOf (ZRCL [((Local6 * 0x07) + 0x02)]
                                    ))
                                ZRCL [((Local6 * 0x07) + 0x04)] = 0x04
                            }

                            SIO9 (Local1)
                        }
                    }

                    Local6++
                }

                SIOF (Local0)
                ZRCU (One)
            }

            Method (ZRCB, 1, Serialized)
            {
                ZRCU (Zero)
            }

            Method (ZRCP, 1, Serialized)
            {
                ZRC0 ()
            }

            Name (ZRD0, Zero)
            Method (ZRC0, 0, NotSerialized)
            {
                ZRCU (Zero)
                ZRCV ()
                ZRD0 = One
                ZRCU (One)
            }

            Method (ZRCU, 1, Serialized)
            {
                If (Arg0)
                {
                    ZRCT = One
                }
                Else
                {
                    ZRCT = Zero
                }
            }

            Method (ZRC9, 0, Serialized)
            {
                Return (0x15)
            }

            Method (ZRCW, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x05)]))
            }

            Method (ZRCX, 2, NotSerialized)
            {
                ZRCL [((Arg0 * 0x07) + 0x05)] = Arg1
            }

            Method (ZRCY, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x06)]))
            }

            Method (ZRCZ, 2, NotSerialized)
            {
                If (((ZRD1 == Zero) && (ZRD2 == One)))
                {
                    ZRD1 = One
                    Notify (\_TZ.TZ10, 0x81) // Thermal Trip Point Change
                }

                ZRCL [((Arg0 * 0x07) + 0x06)] = Arg1
                Sleep (0x03E8)
                If ((Arg1 == Zero))
                {
                    ZRCM (Arg0, One)
                }
            }

            Method (ZRC5, 1, NotSerialized)
            {
                Return (SIO4 (Arg0))
            }

            Method (ZRCD, 1, NotSerialized)
            {
                If (ZRCF)
                {
                    Return (ZRCG) /* \GSA1.ZRCG */
                }
                ElseIf ((Arg0 == 0x0A))
                {
                    Return (ZRCG) /* \GSA1.ZRCG */
                }
                Else
                {
                    Return (SIO0 (Arg0))
                }
            }

            Method (ZRCE, 1, NotSerialized)
            {
                ZRCG = Arg0
            }

            Method (ZRCJ, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ZRC8)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (ZRC8 [Local0]) [Zero]) == Arg0))
                    {
                        Return (DerefOf (ZRC8 [Local0]))
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (ZRCK, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (ZRC8)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (ZRC8 [Local0]) [Zero]) == Arg0))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (ZRCV, 0, NotSerialized)
            {
                If (((M085 == 0x0C) || (M085 == 0x0B)))
                {
                    DerefOf (ZRC8 [Zero]) [One] = 0x88
                    DerefOf (ZRC8 [One]) [One] = 0x87
                }
                Else
                {
                }
            }

            Method (ZRC1, 1, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local1 = DerefOf (Local7 [One])
                    If ((M011 ((M084 + 0x1502), (Local1 * 0x04), 0x07, 
                        One) == Zero))
                    {
                        Return (0x02)
                    }
                    ElseIf ((M011 ((M084 + 0x1502), (Local1 * 0x04), 
                        0x06, One) == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Ones)
            }

            Method (ZRC2, 2, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local1 = DerefOf (Local7 [One])
                    If ((Arg1 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, 0x02)
                    }
                    ElseIf ((Arg1 == One))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, 0x03)
                    }
                    Else
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, Zero)
                    }
                }
            }

            Method (ZRC7, 3, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    ZRCL [((Arg0 * 0x07) + Zero)] = Arg1
                    ZRCL [((Arg0 * 0x07) + One)] = Arg2
                }
            }

            Method (ZRCA, 1, NotSerialized)
            {
                Local7 = ZRCJ (Arg0)
                If ((ObjectType (Local7) == 0x04))
                {
                    Local0 = DerefOf (ZRCL [((Arg0 * 0x07) + Zero)]
                        )
                    Local1 = DerefOf (ZRCL [((Arg0 * 0x07) + One)]
                        )
                    Return ((Local0 | (Local1 << 0x08)))
                }

                Return (Ones)
            }

            Method (ZRCR, 1, NotSerialized)
            {
                Return (DerefOf (ZRCL [((Arg0 * 0x07) + 0x04)]))
            }

            Method (ZRCM, 2, NotSerialized)
            {
                Local7 = ZRCK (Arg0)
                If ((Local7 != Ones))
                {
                    If (Arg1)
                    {
                        If ((ZRCR (Arg0) == 0x04))
                        {
                            ZRC2 (Arg0, One)
                            SIO9 (Arg0)
                            Sleep (0x01F4)
                            ZRC2 (Arg0, DerefOf (ZRCL [((Arg0 * 0x07) + 0x02)]
                                ))
                        }
                        Else
                        {
                            ZRC2 (Arg0, One)
                            SIO9 (Arg0)
                            Sleep (0x01F4)
                            ZRC2 (Arg0, DerefOf (ZRCL [((Arg0 * 0x07) + 0x02)]
                                ))
                        }
                    }
                    Else
                    {
                        ZRC2 (Arg0, Zero)
                        SIOA (Arg0)
                    }
                }
            }

            Name (ZRD1, Zero)
            Name (ZRD2, Zero)
            Method (ZRC3, 0, NotSerialized)
            {
                If ((ZRCT == One))
                {
                    If ((ZRD0 == One))
                    {
                        ZRCU (Zero)
                        ZRCQ ()
                        ZRD0 = Zero
                        ZRCU (One)
                    }

                    Local6 = Zero
                    Local5 = SizeOf (ZRC8)
                    While ((Local6 < Local5))
                    {
                        If (DerefOf (ZRCL [((Local6 * 0x07) + 0x06)]))
                        {
                            Local0 = ZRCD (DerefOf (ZRCL [((Local6 * 0x07) + 0x05
                                )]))
                            Local7 = ZRCJ (Local6)
                            If ((ObjectType (Local7) == 0x04))
                            {
                                Local1 = DerefOf (Local7 [Zero])
                                If (DerefOf (ZRCL [((Local6 * 0x07) + 0x03)]))
                                {
                                    Local2 = DerefOf (ZRCL [((Local1 * 0x07) + One)]
                                        )
                                    Local3 = DerefOf (ZRCL [((Local1 * 0x07) + Zero)]
                                        )
                                    Local4 = SIO4 (Local1)
                                    If ((Local1 == 0x02))
                                    {
                                        If ((Local4 == 0xFFFF))
                                        {
                                            If (SIOD (Local1))
                                            {
                                                Local4 = 0xFFFF
                                            }
                                            Else
                                            {
                                                Local4 = 0x0BB8
                                            }
                                        }
                                    }

                                    If ((Local4 != 0xFFFF))
                                    {
                                        If ((Local0 <= Local3))
                                        {
                                            ZRCM (Local1, Zero)
                                        }
                                    }
                                    ElseIf ((Local0 >= Local2))
                                    {
                                        ZRCM (Local1, One)
                                    }
                                }
                            }
                        }

                        Local6++
                    }
                }
            }

            Name (DIC3, Package (0x04)
            {
                Buffer (0x04)
                {
                     0x09, 0x09, 0x01, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x04, 0x04, 0x02, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x01, 0x01, 0x02, 0x01                           // ....
                }, 

                Buffer (0x04)
                {
                     0x00, 0x01, 0x02, 0x01                           // ....
                }
            })
            Method (DIM0, 0, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Local1]) [Zero])
                    Local6 = DerefOf (DerefOf (Local7 [Local1]) [One])
                    Local4 = Zero
                    If ((SMM3 (Local5, Local6, Zero) != 0xFFFF))
                    {
                        Local4 = One
                        If ((SMM3 (Local5, ((Local6 & 0x0F) | 0x30), 
                            Zero) != 0xFFFF))
                        {
                            Local4 |= 0x04
                        }
                    }

                    DerefOf (DerefOf (Local2) [Local1]) [0x02] = Local4
                    Local1++
                }
            }

            Method (DIM6, 1, Serialized)
            {
                Return ("KingStone")
            }

            Method (DIMC, 0, Serialized)
            {
                Name (DIMG, Buffer (0x03) {})
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local4 = DerefOf (DerefOf (Local7 [Local1]) [0x02])
                    Local5 = (One << Local1)
                    If ((Local4 & One))
                    {
                        DIMG [Zero] = (DerefOf (DIMG [Zero]) | Local5
                            )
                    }

                    If ((Local4 & 0x02))
                    {
                        DIMG [One] = (DerefOf (DIMG [One]) | Local5
                            )
                    }

                    If ((Local4 & 0x04))
                    {
                        DIMG [0x02] = (DerefOf (DIMG [0x02]) | Local5
                            )
                    }

                    Local1++
                }

                Return (DIMG) /* \GSA1.DIMC.DIMG */
            }

            Method (DIMD, 1, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Arg0]) [Zero])
                    Local6 = ((DerefOf (DerefOf (Local7 [Arg0]) [One]) & 
                        0x0F) | 0x30)
                    Local4 = DerefOf (DerefOf (Local7 [Arg0]) [0x02])
                    If ((Local4 & 0x04))
                    {
                        Return ((SMM5 (Local5, Local6, 0x05) & 0x1FFF))
                    }
                }

                Return (Ones)
            }

            Method (DIM1, 1, Serialized)
            {
                Name (DATB, Buffer (0x0200) {})
                Name (DATC, Buffer (0x04) {})
                CreateWordField (DATC, Zero, DIM8)
                CreateWordField (DATC, 0x02, DIM9)
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local0 = SMM8 (DerefOf (DerefOf (Local7 [Arg0]) [Zero]), 
                        DerefOf (DerefOf (Local7 [Arg0]) [One]), DATB)
                    If ((Local0 == Zero))
                    {
                        DIM8 = Zero
                        DIM9 = 0x0200
                        Concatenate (DATC, DATB, Local1)
                        Return (Local1)
                    }
                }

                DIM8 = 0xFFFF
                DIM9 = Zero
                Concatenate (DATC, DATB, Local1)
                Return (Local1)
            }

            Name (EVT1, Zero)
            Method (EVT0, 0, Serialized)
            {
            }

            Method (EVT2, 1, Serialized)
            {
                EVT1 = Arg0
                Notify (\GSA1, 0xE2) // Hardware-Specific
            }

            Name (GGGA, Package (0x05)
            {
                "F51", 
                "A320M-S2H", 
                "A320MS2H", 
                "8A06BG0T", 
                0x01000000
            })
            Name (GGGB, "20191113")
            Name (GGGC, Zero)
            Method (GGG1, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG2, 0, Serialized)
            {
                Return (GGGD) /* \GSA1.GGGD */
            }

            Method (GGG3, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x03]))
            }

            Method (GGG4, 0, Serialized)
            {
                Return (DerefOf (GGGA [Zero]))
            }

            Method (GGG5, 0, Serialized)
            {
                Return (DerefOf (GGGA [One]))
            }

            Method (GGG6, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x04]))
            }

            Method (GGG7, 0, Serialized)
            {
                Return (GGG9 (Zero))
            }

            Method (GGG8, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG9, 1, Serialized)
            {
                Local0 = Zero
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = GGGC /* \GSA1.GGGC */
                    }
                    Case (0x04)
                    {
                        Local0 = 0x10020507
                    }

                }

                Return (Local0)
            }

            Name (GGGK, Package (0x16)
            {
                0x23A1, 
                0x1FBE, 
                0x1C48, 
                0x1AB1, 
                0x17C8, 
                0x1530, 
                0x12E0, 
                0x11D1, 
                0x0FDF, 
                0x0E24, 
                0x0D59, 
                0x0BE4, 
                0x0A98, 
                0x0970, 
                0x08E8, 
                0x07F0, 
                0x0712, 
                0x06AC, 
                0x05F2, 
                0x054C, 
                0x04B8, 
                0x0474
            })
            Method (GGGH, 3, Serialized)
            {
                Local0 = 0x11D1
                If ((Arg0 == 0x03))
                {
                    Local5 = SizeOf (GGGK)
                    Local0 = Zero
                    If (((Arg1 > Zero) && (Arg1 <= Local5)))
                    {
                        Local0 = DerefOf (GGGK [(Arg1 - One)])
                    }

                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = Arg1
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x04))
                {
                    Local0 = ((0x001234DE + (Arg1 >> One)) / Arg1)
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }
                ElseIf ((Arg0 == Zero))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }

                If (Local0)
                {
                    PIO7 (0x53, Zero, 0xB6)
                    PIO7 (0x52, Zero, (Local0 & 0xFF))
                    PIO7 (0x52, Zero, ((Local0 >> 0x08) & 0xFF))
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) | 0x03))
                    Sleep (Local1)
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) & 0xFC))
                }
                Else
                {
                    Sleep (Local1)
                }
            }

            Method (MPTS, 1, NotSerialized)
            {
            }

            Method (MWAK, 1, NotSerialized)
            {
                PFM1 (Arg0)
            }

            OperationRegion (GGGT, SystemMemory, 0xDC274698, 0x0100)
            Field (GGGT, DWordAcc, Lock, Preserve)
            {
                Offset (0x08), 
                PGRV,   8, 
                CCNT,   8, 
                E8CV,   8
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "GSADEV0")  // _UID: Unique ID
            Name (MARK, "Mark Tsai<mark@gigabyte.com><marktsai0316@gmail.com>")
            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                PFM0 ()
                GGGC = (GGGC | 0x10)
                GGGC = (GGGC | 0x20)
                GGGC = (GGGC | 0x40)
                GGGC = (GGGC | 0x80)
                GGGC = (GGGC | 0x0800)
                EVT0 ()
                DIM0 ()
                GGGC = (GGGC | 0x4000)
            }

            Method (_WDG, 0, Serialized)
            {
                Return (QWDG) /* \GSA1.QWDG */
            }

            Name (QWDG, Buffer (0x50)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x43, 0x43, 0x01, 0x00, 0xEF, 0xBE, 0xAD, 0xDE,  // CC......
                /* 0018 */  0x00, 0x10, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x41, 0x01, 0x01,  // )...AA..
                /* 0028 */  0xEF, 0xBE, 0xAD, 0xDE, 0x01, 0x20, 0x00, 0x00,  // ..... ..
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0x42, 0x42, 0x01, 0x02, 0xEF, 0xBE, 0xAD, 0xDE,  // BB......
                /* 0040 */  0x02, 0x40, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // .@......
                /* 0048 */  0x29, 0x10, 0x00, 0x00, 0xE2, 0x00, 0x01, 0x08   // ).......
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (WQCC, Buffer (0x2563)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x53, 0x25, 0x00, 0x00, 0x38, 0x87, 0x01, 0x00,  // S%..8...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDF, 0xBB, 0x01, 0x01, 0x08, 0x09, 0x42,  // .......B
                /* 0020 */  0x58, 0x07, 0x84, 0xC4, 0x39, 0xA0, 0x10, 0x81,  // X...9...
                /* 0028 */  0xE4, 0x13, 0x49, 0x0E, 0x0C, 0x4A, 0x02, 0x88,  // ..I..J..
                /* 0030 */  0xE4, 0x40, 0xC8, 0x05, 0x13, 0x13, 0x20, 0x02,  // .@.... .
                /* 0038 */  0x42, 0x5E, 0x05, 0xD8, 0x14, 0x60, 0x12, 0x44,  // B^...`.D
                /* 0040 */  0xFD, 0xFB, 0x43, 0x94, 0x06, 0x45, 0x09, 0x2C,  // ..C..E.,
                /* 0048 */  0x04, 0x42, 0x32, 0x05, 0xF8, 0x16, 0xE0, 0x58,  // .B2....X
                /* 0050 */  0x80, 0x61, 0x01, 0xB2, 0x05, 0x58, 0x86, 0x22,  // .a...X."
                /* 0058 */  0xA8, 0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00,  // ....+@..
                /* 0060 */  0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x84, 0x83,  // ...h....
                /* 0068 */  0x46, 0x89, 0x81, 0x90, 0x44, 0x58, 0x39, 0xC7,  // F...DX9.
                /* 0070 */  0x96, 0x72, 0x01, 0xA6, 0x05, 0x08, 0x17, 0x20,  // .r..... 
                /* 0078 */  0x1D, 0x43, 0x23, 0xA8, 0x1B, 0x4C, 0x52, 0x05,  // .C#..LR.
                /* 0080 */  0x88, 0x86, 0x11, 0x5A, 0x41, 0x70, 0x1A, 0xC4,  // ...ZAp..
                /* 0088 */  0x51, 0x44, 0x09, 0xC3, 0xF0, 0x8C, 0x19, 0x28,  // QD.....(
                /* 0090 */  0x5C, 0x90, 0x48, 0x86, 0x09, 0x7A, 0x02, 0x41,  // \.H..z.A
                /* 0098 */  0x4A, 0xC6, 0x90, 0x66, 0x2C, 0x02, 0x71, 0x06,  // J..f,.q.
                /* 00A0 */  0x1C, 0x2B, 0x46, 0xA8, 0x90, 0x98, 0x81, 0x04,  // .+F.....
                /* 00A8 */  0x3F, 0x81, 0xAE, 0x31, 0xE4, 0x19, 0x88, 0x58,  // ?..1...X
                /* 00B0 */  0x9F, 0x80, 0x40, 0xA2, 0x47, 0x09, 0x6E, 0x5C,  // ..@.G.n\
                /* 00B8 */  0xA3, 0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26,  // ..1..n`&
                /* 00C0 */  0x88, 0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40,  // .sx....@
                /* 00C8 */  0xFC, 0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x0C, 0x65,  // .......e
                /* 00D0 */  0x51, 0x80, 0x41, 0x0C, 0x29, 0x04, 0x11, 0x42,  // Q.A.)..B
                /* 00D8 */  0x8D, 0x02, 0x6C, 0x0D, 0x56, 0xC6, 0x20, 0x84,  // ..l.V. .
                /* 00E0 */  0x10, 0xC5, 0x08, 0x0C, 0x85, 0x61, 0x46, 0xB1,  // .....aF.
                /* 00E8 */  0xC3, 0x39, 0x0B, 0xA4, 0x36, 0x01, 0xCA, 0x40,  // .9..6..@
                /* 00F0 */  0x04, 0xCA, 0x10, 0x98, 0xFD, 0x41, 0x90, 0x40,  // .....A.@
                /* 00F8 */  0xE7, 0x01, 0xFD, 0x08, 0x2C, 0x09, 0x44, 0x46,  // ....,.DF
                /* 0100 */  0xB6, 0x94, 0x80, 0x1C, 0x06, 0x12, 0x1C, 0x8E,  // ........
                /* 0108 */  0x27, 0xD2, 0xFC, 0xCC, 0x34, 0x2A, 0x26, 0x01,  // '...4*&.
                /* 0110 */  0x50, 0x1A, 0x40, 0x24, 0x0A, 0x42, 0xBF, 0x03,  // P.@$.B..
                /* 0118 */  0x2A, 0x40, 0xCA, 0xC9, 0x80, 0xD8, 0x1E, 0x97,  // *@......
                /* 0120 */  0xE6, 0x74, 0x80, 0xA7, 0xEE, 0xBB, 0xC1, 0x99,  // .t......
                /* 0128 */  0xF9, 0xAC, 0xE0, 0x2D, 0xF8, 0xFF, 0x7F, 0x46,  // ...-...F
                /* 0130 */  0xE0, 0x63, 0xF0, 0x50, 0x0F, 0x21, 0xE0, 0x11,  // .c.P.!..
                /* 0138 */  0xB2, 0x43, 0x82, 0x01, 0xF1, 0xDE, 0x6F, 0x05,  // .C....o.
                /* 0140 */  0x64, 0x2E, 0x06, 0x64, 0x07, 0x85, 0xE7, 0x03,  // d..d....
                /* 0148 */  0xB0, 0x4C, 0xF2, 0x34, 0x8F, 0xA1, 0xE2, 0xA9,  // .L.4....
                /* 0150 */  0x21, 0x8E, 0x04, 0x7C, 0x2A, 0x27, 0xC5, 0x08,  // !..|*'..
                /* 0158 */  0x7C, 0x8C, 0xF0, 0xE8, 0xF8, 0x28, 0x7C, 0x76,  // |....(|v
                /* 0160 */  0x38, 0xED, 0x62, 0x8F, 0x10, 0x54, 0xD6, 0x31,  // 8.b..T.1
                /* 0168 */  0x02, 0x3D, 0xF7, 0x23, 0x0C, 0xF8, 0xD2, 0xD0,  // .=.#....
                /* 0170 */  0xAC, 0x00, 0xA1, 0xF7, 0x00, 0x11, 0xBC, 0x0E,  // ........
                /* 0178 */  0xF8, 0xC6, 0x60, 0x71, 0x30, 0x3A, 0x51, 0xE0,  // ..`q0:Q.
                /* 0180 */  0x87, 0x6E, 0xBF, 0x02, 0x10, 0x42, 0x9F, 0xDB,  // .n...B..
                /* 0188 */  0x49, 0x3C, 0x50, 0x44, 0x48, 0xD0, 0x23, 0x86,  // I<PDH.#.
                /* 0190 */  0x60, 0xCE, 0x2A, 0xD6, 0x01, 0x3C, 0x09, 0x24,  // `.*..<.$
                /* 0198 */  0x28, 0x70, 0x88, 0x68, 0x68, 0xAE, 0x13, 0x53,  // (p.hh..S
                /* 01A0 */  0x43, 0x39, 0x91, 0xB8, 0x41, 0xA3, 0x9C, 0xC0,  // C9..A...
                /* 01A8 */  0xB1, 0x78, 0x9C, 0xC7, 0xF7, 0xD8, 0xE0, 0x23,  // .x.....#
                /* 01B0 */  0xC6, 0x39, 0xBF, 0x05, 0x78, 0x70, 0x9C, 0xC0,  // .9..xp..
                /* 01B8 */  0x12, 0x1F, 0x1E, 0x3E, 0x7B, 0x50, 0x51, 0x30,  // ...>{PQ0
                /* 01C0 */  0xA8, 0xE3, 0x07, 0xE0, 0xE6, 0xFF, 0x7F, 0xFC,  // ........
                /* 01C8 */  0x00, 0x2C, 0x41, 0x3C, 0x7E, 0x80, 0x33, 0x96,  // .,A<~.3.
                /* 01D0 */  0x82, 0xF3, 0x00, 0x3B, 0x7E, 0x00, 0xDC, 0xF8,  // ...;~...
                /* 01D8 */  0xFF, 0x1F, 0x3F, 0xB8, 0x8C, 0x91, 0x1B, 0x96,  // ..?.....
                /* 01E0 */  0x8E, 0xDC, 0xC0, 0xBE, 0x4D, 0x9C, 0x89, 0x21,  // ....M..!
                /* 01E8 */  0x1E, 0x14, 0x4C, 0xE0, 0xD0, 0x10, 0xB2, 0x30,  // ..L....0
                /* 01F0 */  0x74, 0xD0, 0x7C, 0x07, 0x34, 0x74, 0x40, 0xC6,  // t.|.4t@.
                /* 01F8 */  0x09, 0x06, 0xB8, 0x61, 0x3C, 0xC1, 0x00, 0x93,  // ...a<...
                /* 0200 */  0xF0, 0x67, 0x04, 0x54, 0x5C, 0x18, 0x14, 0x81,  // .g.T\...
                /* 0208 */  0xA3, 0x1E, 0x07, 0xE8, 0xC8, 0x3C, 0x30, 0xF8,  // .....<0.
                /* 0210 */  0x07, 0x19, 0x36, 0x97, 0xDA, 0x27, 0xAD, 0x61,  // ..6..'.a
                /* 0218 */  0x9A, 0xC0, 0x23, 0x83, 0xF3, 0xFF, 0x1F, 0x19,  // ..#.....
                /* 0220 */  0xB8, 0xE6, 0x7E, 0x00, 0x98, 0xE3, 0x84, 0x07,  // ..~.....
                /* 0228 */  0xC0, 0xC1, 0x5B, 0xBD, 0x01, 0x10, 0xA5, 0x13,  // ..[.....
                /* 0230 */  0x42, 0x12, 0x84, 0x33, 0xD6, 0xDB, 0xCD, 0x19,  // B..3....
                /* 0238 */  0xBC, 0x1C, 0xF8, 0x28, 0x63, 0x8C, 0xF7, 0x83,  // ...(c...
                /* 0240 */  0xA3, 0xC2, 0x9E, 0x7F, 0x10, 0x47, 0x39, 0x94,  // .....G9.
                /* 0248 */  0xA8, 0xD3, 0x1C, 0x40, 0xA4, 0xCB, 0x0F, 0xEE,  // ...@....
                /* 0250 */  0xFC, 0x03, 0xEB, 0xFF, 0x7F, 0xFE, 0x81, 0x78,  // .......x
                /* 0258 */  0x9A, 0x03, 0xA8, 0x72, 0x0C, 0xC1, 0x1D, 0x5E,  // ...r...^
                /* 0260 */  0xC0, 0x71, 0x61, 0xC0, 0x1D, 0x4B, 0x80, 0x03,  // .qa..K..
                /* 0268 */  0x3C, 0x17, 0x78, 0xFC, 0x40, 0x49, 0x3A, 0x81,  // <.x.@I:.
                /* 0270 */  0x80, 0xE6, 0xFF, 0x7F, 0x02, 0x01, 0x58, 0x72,  // ......Xr
                /* 0278 */  0xA0, 0x03, 0x6B, 0xA8, 0x13, 0x08, 0x15, 0x74,  // ..k....t
                /* 0280 */  0x02, 0x81, 0xFE, 0xEC, 0xF0, 0x09, 0x04, 0xB8,  // ........
                /* 0288 */  0x8A, 0x1C, 0x31, 0xEA, 0xFF, 0x7F, 0x3E, 0x80,  // ..1...>.
                /* 0290 */  0x6B, 0x6D, 0x94, 0x9A, 0xE6, 0x1B, 0x08, 0xF6,  // km......
                /* 0298 */  0x00, 0x02, 0x8E, 0xF7, 0x9A, 0x0F, 0x20, 0xC0,  // ...... .
                /* 02A0 */  0x0C, 0xE4, 0xC8, 0xCE, 0xE8, 0xAC, 0xF9, 0x01,  // ........
                /* 02A8 */  0x04, 0xB8, 0x08, 0x7A, 0xE7, 0xF9, 0xF4, 0xC1,  // ...z....
                /* 02B0 */  0x61, 0x70, 0x07, 0x10, 0x40, 0xED, 0xFF, 0xFF,  // ap..@...
                /* 02B8 */  0x00, 0x02, 0x2C, 0x6F, 0x10, 0x0F, 0x20, 0xE0,  // ..,o.. .
                /* 02C0 */  0x0C, 0xF1, 0x8E, 0xD0, 0x8F, 0xC0, 0xC1, 0x21,  // .......!
                /* 02C8 */  0xA4, 0xE4, 0x5C, 0x09, 0x3D, 0xE6, 0xB9, 0x12,  // ..\.=...
                /* 02D0 */  0x54, 0x27, 0x10, 0xE0, 0x70, 0xD0, 0xC0, 0x1D,  // T'..p...
                /* 02D8 */  0x10, 0xE0, 0x12, 0xF8, 0x24, 0xED, 0x33, 0x07,  // ....$.3.
                /* 02E0 */  0x38, 0x4E, 0x57, 0x26, 0xF0, 0x60, 0xE1, 0x9C,  // 8NW&.`..
                /* 02E8 */  0x22, 0x9E, 0xFE, 0x7C, 0x17, 0x78, 0x2D, 0xF0,  // "..|.x-.
                /* 02F0 */  0x60, 0xC1, 0x77, 0x26, 0x85, 0xFB, 0xFF, 0x1F,  // `.w&....
                /* 02F8 */  0x2C, 0xE0, 0xE0, 0xE0, 0x03, 0x5C, 0x0E, 0x43,  // ,....\.C
                /* 0300 */  0xE4, 0xE0, 0x03, 0xC8, 0x9F, 0x7E, 0xF8, 0x77,  // .....~.w
                /* 0308 */  0x95, 0x08, 0xE7, 0xE5, 0x83, 0x00, 0x3B, 0xF8,  // ......;.
                /* 0310 */  0xC0, 0xFD, 0xFF, 0x1F, 0x7C, 0x00, 0x16, 0x3A,  // ....|..:
                /* 0318 */  0x3B, 0xF8, 0x00, 0xF1, 0xFF, 0xFF, 0xC1, 0x07,  // ;.......
                /* 0320 */  0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0x03, 0xDC, 0x2E,  // ........
                /* 0328 */  0x17, 0xBE, 0x5E, 0x3C, 0xA5, 0xBC, 0xF8, 0xC0,  // ..^<....
                /* 0330 */  0x3B, 0xF8, 0x40, 0x7C, 0xC4, 0xE8, 0xE0, 0x03,  // ;.@|....
                /* 0338 */  0x0C, 0xE7, 0xC5, 0x06, 0x80, 0x3F, 0xF8, 0x00,  // .....?..
                /* 0340 */  0xBE, 0xFF, 0xFF, 0x07, 0x1F, 0xC0, 0xD2, 0x70,  // .......p
                /* 0348 */  0x1F, 0x7C, 0x00, 0x5E, 0xFD, 0xFF, 0x0F, 0x3E,  // .|.^...>
                /* 0350 */  0x00, 0xF7, 0xEE, 0x28, 0x6C, 0x84, 0x0F, 0x3E,  // ...(l..>
                /* 0358 */  0x20, 0x5C, 0xB5, 0x0E, 0x3E, 0xC0, 0xE3, 0xFF,  //  \..>...
                /* 0360 */  0x7F, 0xF0, 0x81, 0x39, 0xAF, 0x97, 0x10, 0x76,  // ...9...v
                /* 0368 */  0xF0, 0x01, 0x26, 0x12, 0xD7, 0x48, 0x4F, 0x3D,  // ..&..HO=
                /* 0370 */  0x16, 0x05, 0x83, 0x3A, 0xF8, 0x00, 0x0C, 0x3A,  // ...:...:
                /* 0378 */  0xAB, 0x3E, 0xF8, 0x80, 0x33, 0xD6, 0x79, 0x40,  // .>..3.y@
                /* 0380 */  0xFF, 0xFF, 0x1F, 0x81, 0x25, 0x1D, 0x40, 0xA0,  // ....%.@.
                /* 0388 */  0x4B, 0x38, 0x80, 0x80, 0xEA, 0xDC, 0x03, 0x1C,  // K8......
                /* 0390 */  0x0E, 0x0A, 0x0F, 0x72, 0xE0, 0x39, 0x7F, 0xE0,  // ...r.9..
                /* 0398 */  0x8F, 0x04, 0xEC, 0x44, 0x0C, 0x92, 0xA5, 0xE9,  // ...D....
                /* 03A0 */  0x04, 0x02, 0x0C, 0x8F, 0x03, 0xAF, 0x05, 0x4F,  // .......O
                /* 03A8 */  0xC4, 0xC0, 0x46, 0xB2, 0xC3, 0x8B, 0x80, 0x09,  // ..F.....
                /* 03B0 */  0xC6, 0xE0, 0x90, 0xB8, 0x65, 0x52, 0x18, 0x1F,  // ....eR..
                /* 03B8 */  0x0C, 0x7C, 0x02, 0x81, 0x2B, 0x09, 0x0E, 0x35,  // .|..+..5
                /* 03C0 */  0x40, 0x9F, 0x02, 0xCE, 0xFE, 0x38, 0x8F, 0xFC,  // @....8..
                /* 03C8 */  0xFF, 0x7F, 0x20, 0xBE, 0x06, 0x3C, 0x8A, 0xC0,  // .. ..<..
                /* 03D0 */  0x38, 0x28, 0x78, 0x52, 0xA7, 0x64, 0xED, 0x07,  // 8(xR.d..
                /* 03D8 */  0x0A, 0x72, 0xB7, 0x30, 0x81, 0x4F, 0x0B, 0x0C,  // .r.0.O..
                /* 03E0 */  0x8D, 0x9F, 0x4B, 0xC0, 0x7A, 0x42, 0x78, 0x50,  // ..K.zBxP
                /* 03E8 */  0x00, 0xCB, 0x9C, 0x5F, 0x4A, 0x30, 0x27, 0x10,  // ..._J0'.
                /* 03F0 */  0x0C, 0x60, 0xBC, 0x57, 0x05, 0xA3, 0x1E, 0x95,  // .`.W....
                /* 03F8 */  0xAF, 0x0A, 0x3E, 0x89, 0x78, 0xFC, 0x61, 0x23,  // ..>.x.a#
                /* 0400 */  0x04, 0x39, 0xAF, 0x38, 0xEF, 0x21, 0x06, 0x0C,  // .9.8.!..
                /* 0408 */  0x1B, 0xDC, 0x04, 0x3E, 0x85, 0x80, 0xEF, 0x76,  // ...>...v
                /* 0410 */  0xF0, 0xE4, 0xE1, 0x23, 0xC2, 0x53, 0x08, 0x78,  // ...#.S.x
                /* 0418 */  0x0F, 0x39, 0x8E, 0x34, 0x1A, 0xD4, 0x59, 0xC1,  // .9.4..Y.
                /* 0420 */  0xE7, 0x02, 0x9F, 0x09, 0x9E, 0x61, 0x7C, 0xAD,  // .....a|.
                /* 0428 */  0x30, 0xC8, 0xB9, 0x1E, 0xDA, 0xF3, 0xC2, 0x03,  // 0.......
                /* 0430 */  0x81, 0x87, 0xCE, 0xB0, 0x1E, 0x2D, 0xD8, 0x09,  // .....-..
                /* 0438 */  0x01, 0x7F, 0x83, 0x09, 0xF8, 0x6A, 0xF0, 0xF8,  // .....j..
                /* 0440 */  0x01, 0xEB, 0x18, 0x82, 0x3F, 0x7E, 0xC1, 0x1F,  // ....?~..
                /* 0448 */  0x8F, 0x4F, 0x02, 0x3E, 0xB2, 0xF9, 0x3C, 0x44,  // .O.>..<D
                /* 0450 */  0x20, 0xF4, 0xFF, 0x1F, 0x04, 0x3F, 0xBA, 0xF1,  //  ....?..
                /* 0458 */  0x91, 0x9E, 0xD6, 0x0B, 0x81, 0xCF, 0x09, 0x87,  // ........
                /* 0460 */  0xC5, 0xCE, 0x1E, 0x3E, 0xB0, 0x81, 0x63, 0x3C,  // ...>..c<
                /* 0468 */  0xF0, 0x6F, 0x26, 0x4F, 0x19, 0xBE, 0x35, 0x78,  // .o&O..5x
                /* 0470 */  0xBE, 0x3E, 0x2D, 0xF8, 0x10, 0x02, 0xAE, 0x6B,  // .>-....k
                /* 0478 */  0x87, 0x87, 0x70, 0x12, 0xBE, 0x27, 0x60, 0x4E,  // ..p..'`N
                /* 0480 */  0x21, 0xC0, 0x40, 0x8C, 0xC0, 0xB7, 0xC1, 0xF3,  // !.@.....
                /* 0488 */  0x86, 0xC5, 0x2D, 0x54, 0x36, 0x0E, 0x3C, 0x74,  // ..-T6.<t
                /* 0490 */  0x4C, 0x16, 0x7B, 0x42, 0xD0, 0x78, 0xCE, 0xFD,  // L.{B.x..
                /* 0498 */  0xD4, 0x0E, 0xF0, 0xB5, 0xC2, 0xE7, 0x02, 0x8B,  // ........
                /* 04A0 */  0x84, 0xD2, 0x75, 0xC4, 0x10, 0x96, 0x77, 0x1E,  // ..u...w.
                /* 04A8 */  0x31, 0x84, 0x06, 0xE3, 0x93, 0x0C, 0x81, 0xA3,  // 1.......
                /* 04B0 */  0x20, 0x1E, 0xBB, 0xA3, 0x42, 0xC8, 0xC6, 0x31,  //  ...B..1
                /* 04B8 */  0x00, 0x35, 0x78, 0xDF, 0x7C, 0x38, 0x81, 0xA3,  // .5x.|8..
                /* 04C0 */  0x7D, 0x74, 0xD9, 0x59, 0x01, 0xC2, 0xC0, 0x1E,  // }t.Y....
                /* 04C8 */  0x2B, 0x8E, 0xC5, 0x87, 0x3F, 0xF0, 0x9D, 0x74,  // +...?..t
                /* 04D0 */  0xF0, 0x43, 0x7F, 0x0F, 0x30, 0x01, 0x3B, 0xD3,  // .C..0.;.
                /* 04D8 */  0xE1, 0x8E, 0x05, 0x70, 0xFE, 0xFF, 0x33, 0x78,  // ...p..3x
                /* 04E0 */  0x2D, 0xA8, 0x7A, 0x1C, 0xBA, 0x2D, 0x58, 0xDD,  // -.z..-X.
                /* 04E8 */  0x65, 0x00, 0x85, 0xF7, 0x84, 0x85, 0x3B, 0xF0,  // e.....;.
                /* 04F0 */  0x80, 0x05, 0xC8, 0x97, 0x01, 0x2B, 0x3D, 0x10,  // .....+=.
                /* 04F8 */  0xD0, 0x99, 0x84, 0x08, 0x13, 0xCD, 0xF0, 0x98,  // ........
                /* 0500 */  0xE3, 0x24, 0x1F, 0xA8, 0x47, 0xC7, 0x07, 0xEA,  // .$..G...
                /* 0508 */  0x63, 0x0C, 0x3B, 0x28, 0xE0, 0x0E, 0x51, 0x18,  // c.;(..Q.
                /* 0510 */  0x58, 0x0F, 0x9D, 0xC3, 0x1A, 0x2D, 0xEC, 0x11,  // X....-..
                /* 0518 */  0x3F, 0x43, 0xF8, 0xFE, 0xE1, 0x8B, 0x91, 0xAF,  // ?C......
                /* 0520 */  0x2D, 0x3E, 0x79, 0x80, 0xE5, 0x68, 0x09, 0x5C,  // ->y..h.\
                /* 0528 */  0xA4, 0x1D, 0x1F, 0x50, 0x07, 0x21, 0x4B, 0x3D,  // ...P.!K=
                /* 0530 */  0x3E, 0x20, 0x30, 0x0E, 0xD1, 0xE7, 0x81, 0xB3,  // > 0.....
                /* 0538 */  0x7C, 0x26, 0xF0, 0x59, 0xD6, 0xC7, 0x11, 0x9C,  // |&.Y....
                /* 0540 */  0xB0, 0x33, 0x04, 0xEA, 0x3C, 0xE6, 0x03, 0xA6,  // .3..<...
                /* 0548 */  0xCF, 0x10, 0xFC, 0x2C, 0x66, 0x30, 0x83, 0xF8,  // ...,f0..
                /* 0550 */  0x0C, 0xE1, 0x78, 0x47, 0x18, 0xF4, 0xE8, 0xAC,  // ..xG....
                /* 0558 */  0xF5, 0x20, 0x44, 0xCE, 0x0E, 0x47, 0xE7, 0x38,  // . D..G.8
                /* 0560 */  0x67, 0x08, 0xD0, 0xFF, 0xFF, 0xCF, 0x10, 0xE0,  // g.......
                /* 0568 */  0x3A, 0xC8, 0x80, 0xEF, 0xF4, 0x00, 0xBC, 0x87,  // :.......
                /* 0570 */  0xEF, 0xD3, 0x03, 0xE0, 0xED, 0x40, 0x75, 0x96,  // .....@u.
                /* 0578 */  0x47, 0xFC, 0x36, 0xE2, 0xDB, 0x03, 0xF6, 0xF4,  // G.6.....
                /* 0580 */  0x00, 0xBC, 0xFE, 0xFF, 0xA7, 0x07, 0x80, 0x07,  // ........
                /* 0588 */  0x90, 0x3E, 0x3D, 0x00, 0xEE, 0x0E, 0x0A, 0xEF,  // .>=.....
                /* 0590 */  0x7C, 0x3E, 0x3D, 0x80, 0xF1, 0xFF, 0x7F, 0x7A,  // |>=....z
                /* 0598 */  0x00, 0xB8, 0x33, 0x68, 0x9F, 0x1E, 0x00, 0x77,  // ..3h...w
                /* 05A0 */  0x37, 0x54, 0xFF, 0xFF, 0xCF, 0x6B, 0x4F, 0x0F,  // 7T...kO.
                /* 05A8 */  0x00, 0xDB, 0x60, 0xF9, 0xE9, 0x01, 0xF0, 0xF0,  // ..`.....
                /* 05B0 */  0xFF, 0x3F, 0x08, 0xE0, 0x84, 0x9D, 0x1E, 0x50,  // .?.....P
                /* 05B8 */  0x1C, 0x16, 0x7A, 0x7A, 0x80, 0x70, 0x28, 0x66,  // ..zz.p(f
                /* 05C0 */  0x83, 0x3C, 0xE2, 0xE0, 0xD5, 0x8F, 0x84, 0x1C,  // .<......
                /* 05C8 */  0x1E, 0xC0, 0xE7, 0xE4, 0xF0, 0x00, 0x68, 0x3A,  // ......h:
                /* 05D0 */  0xAF, 0x73, 0x67, 0x47, 0x65, 0x1D, 0x1E, 0x80,  // .sgGe...
                /* 05D8 */  0xFB, 0x31, 0xDD, 0x87, 0x07, 0xE0, 0xF6, 0xFF,  // .1......
                /* 05E0 */  0x3F, 0x3C, 0x80, 0xFB, 0xF8, 0x8B, 0x13, 0x75,  // ?<.....u
                /* 05E8 */  0xFC, 0x45, 0x1E, 0x1E, 0xD8, 0xB8, 0xA3, 0x84,  // .E......
                /* 05F0 */  0x0E, 0xF1, 0x22, 0x1B, 0xFB, 0xDC, 0xCE, 0xC4,  // ..".....
                /* 05F8 */  0x57, 0xEC, 0x83, 0x78, 0x1D, 0xF0, 0xF1, 0x01,  // W..x....
                /* 0600 */  0x60, 0x98, 0x87, 0xE3, 0x03, 0x68, 0xFE, 0xFF,  // `....h..
                /* 0608 */  0xE7, 0x2A, 0xC0, 0xC9, 0x8D, 0x9A, 0x5D, 0xF2,  // .*....].
                /* 0610 */  0x18, 0x56, 0x74, 0xCC, 0xB9, 0x0A, 0xE0, 0xD4,  // .Vt.....
                /* 0618 */  0xFF, 0xFF, 0xF4, 0x80, 0x03, 0xF7, 0xE9, 0x01,  // ........
                /* 0620 */  0xF0, 0x22, 0xEB, 0xF4, 0x80, 0x3A, 0x0B, 0x58,  // ."...:.X
                /* 0628 */  0xE6, 0x51, 0x41, 0x93, 0xAD, 0xF6, 0x94, 0xA0,  // .QA.....
                /* 0630 */  0xD3, 0x03, 0xBB, 0x3B, 0xE0, 0xCF, 0x0E, 0x00,  // ...;....
                /* 0638 */  0x4F, 0xFE, 0xFF, 0x67, 0x07, 0xF0, 0x9A, 0x38,  // O..g...8
                /* 0640 */  0x3B, 0x00, 0x6A, 0xF4, 0x2D, 0x50, 0x47, 0x3C,  // ;.j.-PG<
                /* 0648 */  0x9C, 0xDE, 0x97, 0x82, 0x0E, 0x32, 0x38, 0x91,  // .....28.
                /* 0650 */  0xB3, 0xD4, 0xC0, 0x03, 0x5B, 0x33, 0xB8, 0x8E,  // ....[3..
                /* 0658 */  0x00, 0x4C, 0x1F, 0xA4, 0x4E, 0x0D, 0x3E, 0x34,  // .L..N.>4
                /* 0660 */  0x58, 0x19, 0x85, 0x74, 0x1C, 0x1E, 0x50, 0xC9,  // X..t..P.
                /* 0668 */  0x8F, 0x10, 0x14, 0xC4, 0x80, 0x8E, 0x75, 0xA8,  // ......u.
                /* 0670 */  0x42, 0x9F, 0xCC, 0x3C, 0x84, 0x63, 0x74, 0x92,  // B..<.ct.
                /* 0678 */  0xAB, 0x03, 0x9D, 0x98, 0xE7, 0xC8, 0xF1, 0xD8,  // ........
                /* 0680 */  0xB8, 0x8C, 0x5A, 0xD5, 0x0C, 0x41, 0xA4, 0xE6,  // ..Z..A..
                /* 0688 */  0x48, 0x80, 0x9A, 0x80, 0x4F, 0x0E, 0x18, 0x5D,  // H...O..]
                /* 0690 */  0x17, 0x2A, 0x90, 0xE9, 0x3B, 0x38, 0x40, 0xFF,  // .*..;8@.
                /* 0698 */  0xFF, 0x1F, 0x1C, 0x60, 0xA3, 0xF3, 0x7B, 0x19,  // ...`..{.
                /* 06A0 */  0xE0, 0x68, 0x54, 0xBE, 0x97, 0x01, 0x9E, 0x54,  // .hT....T
                /* 06A8 */  0xDC, 0x3F, 0x00, 0x11, 0xFF, 0xFF, 0x1B, 0x2B,  // .?.....+
                /* 06B0 */  0x18, 0xE1, 0x2B, 0x9C, 0xB7, 0x80, 0xE3, 0x47,  // ..+....G
                /* 06B8 */  0x3A, 0x11, 0x76, 0x47, 0x04, 0x18, 0x36, 0x64,  // :.vG..6d
                /* 06C0 */  0x1F, 0x1E, 0x80, 0xD5, 0xFF, 0xFF, 0x2E, 0x04,  // ........
                /* 06C8 */  0xDC, 0x46, 0xFB, 0xF0, 0x00, 0xEF, 0x2E, 0x04,  // .F......
                /* 06D0 */  0x0C, 0xE6, 0xE3, 0xBB, 0x10, 0xC0, 0xA1, 0xFF,  // ........
                /* 06D8 */  0xFF, 0x5D, 0x08, 0x70, 0x3C, 0x72, 0xDF, 0x3F,  // .].p<r.?
                /* 06E0 */  0x00, 0x2F, 0xB1, 0xEE, 0x1F, 0xE8, 0x98, 0xF7,  // ./......
                /* 06E8 */  0x0F, 0x14, 0xEC, 0xE1, 0xD8, 0xF5, 0x35, 0x93,  // ......5.
                /* 06F0 */  0x9C, 0x40, 0x62, 0x44, 0x88, 0x14, 0x9A, 0xDC,  // .@bD....
                /* 06F8 */  0x3F, 0x28, 0x84, 0x03, 0xC1, 0x28, 0x0E, 0x84,  // ?(...(..
                /* 0700 */  0x0E, 0x0F, 0x3C, 0x00, 0x1C, 0x05, 0xF1, 0x91,  // ..<.....
                /* 0708 */  0xC1, 0x87, 0x07, 0x2B, 0x39, 0x3C, 0xA0, 0xA7,  // ...+9<..
                /* 0710 */  0x74, 0xDC, 0xBE, 0x92, 0xB0, 0xFF, 0xFF, 0xE1,  // t.......
                /* 0718 */  0x01, 0xDE, 0x09, 0x84, 0xDD, 0x85, 0x80, 0xB5,  // ........
                /* 0720 */  0x31, 0x01, 0xDA, 0x20, 0xC9, 0xF8, 0xE0, 0x68,  // 1.. ...h
                /* 0728 */  0x3F, 0x6B, 0x80, 0x62, 0x7C, 0xC0, 0xE7, 0xAC,  // ?k.b|...
                /* 0730 */  0x01, 0xAE, 0xF1, 0xF1, 0x80, 0xE3, 0x43, 0x43,  // ......CC
                /* 0738 */  0xFB, 0x34, 0x10, 0xF3, 0x70, 0x8E, 0x06, 0x33,  // .4..p..3
                /* 0740 */  0x40, 0xE0, 0x79, 0x7C, 0xF1, 0x00, 0xE1, 0xFD,  // @.y|....
                /* 0748 */  0xFF, 0x07, 0x08, 0xEF, 0x6C, 0x02, 0xBC, 0x6D,  // ....l..m
                /* 0750 */  0x9C, 0x4D, 0x00, 0x35, 0x72, 0xAE, 0x7D, 0xA8,  // .M.5r.}.
                /* 0758 */  0x51, 0x5B, 0xDE, 0xB5, 0x0F, 0x31, 0xE3, 0xE3,  // Q[...1..
                /* 0760 */  0x3D, 0x5C, 0x26, 0xEB, 0xCA, 0x87, 0x3A, 0x22,  // =\&...:"
                /* 0768 */  0x59, 0xCE, 0x19, 0x09, 0x45, 0x65, 0x30, 0x53,  // Y...Ee0S
                /* 0770 */  0xF8, 0x54, 0xE0, 0x70, 0x67, 0x24, 0xF4, 0x79,  // .T.pg$.y
                /* 0778 */  0x81, 0x8D, 0x8F, 0x9D, 0x1B, 0x80, 0xE7, 0xFF,  // ........
                /* 0780 */  0xFF, 0xC6, 0x07, 0xB8, 0xD2, 0x71, 0x6E, 0x00,  // .....qn.
                /* 0788 */  0xA4, 0xCD, 0xF1, 0x84, 0xBB, 0x3C, 0x37, 0x00,  // .....<7.
                /* 0790 */  0x62, 0xFE, 0xFF, 0xE7, 0x06, 0xC0, 0xA3, 0x8F,  // b.......
                /* 0798 */  0x73, 0x03, 0xA0, 0x46, 0xD0, 0xB9, 0x01, 0x2D,  // s..F...-
                /* 07A0 */  0xF0, 0xA4, 0xA0, 0x09, 0x36, 0x3F, 0x07, 0x02,  // ....6?..
                /* 07A8 */  0xFD, 0x34, 0xE4, 0x0B, 0x30, 0x18, 0xC7, 0xC3,  // .4..0...
                /* 07B0 */  0x4F, 0x8C, 0xE0, 0xFF, 0xFF, 0x1F, 0x1C, 0x80,  // O.......
                /* 07B8 */  0xDF, 0x40, 0x3D, 0x0A, 0x8F, 0xA1, 0xE7, 0x83,  // .@=.....
                /* 07C0 */  0x03, 0x90, 0x1F, 0xC4, 0x83, 0x03, 0x60, 0xEE,  // ......`.
                /* 07C8 */  0x1A, 0xE2, 0x83, 0x03, 0xF0, 0xFA, 0xFF, 0x1F,  // ........
                /* 07D0 */  0x1C, 0x00, 0x1E, 0x18, 0x3D, 0x38, 0x00, 0xEA,  // ....=8..
                /* 07D8 */  0xCE, 0x43, 0x0F, 0x0E, 0x60, 0xFE, 0xFF, 0x1F,  // .C..`...
                /* 07E0 */  0x1C, 0x00, 0x9E, 0x0C, 0xE0, 0xC1, 0x01, 0x30,  // .......0
                /* 07E8 */  0x23, 0xEB, 0xE0, 0x80, 0x3A, 0x0B, 0x58, 0xE6,  // #...:.X.
                /* 07F0 */  0x51, 0x41, 0x73, 0x3D, 0xC2, 0xA7, 0xE7, 0x13,  // QAs=....
                /* 07F8 */  0x8B, 0x19, 0xE3, 0x70, 0xA2, 0xC7, 0x3F, 0xE6,  // ...p..?.
                /* 0800 */  0xF3, 0x89, 0x70, 0x00, 0xCF, 0x0E, 0xD8, 0xFF,  // ..p.....
                /* 0808 */  0xFF, 0xD9, 0x01, 0x1C, 0x27, 0x62, 0xFC, 0x0C,  // ....'b..
                /* 0810 */  0x4E, 0xE2, 0x84, 0x42, 0x3C, 0xD3, 0xC1, 0x3D,  // N..B<..=
                /* 0818 */  0x3B, 0x00, 0xE7, 0x13, 0x2E, 0xE0, 0x01, 0xC2,  // ;.......
                /* 0820 */  0x67, 0x07, 0xC0, 0x4B, 0x92, 0xB7, 0x81, 0xCE,  // g..K....
                /* 0828 */  0x0E, 0x1C, 0xD6, 0xFF, 0xFF, 0x64, 0x8B, 0xD4,  // .....d..
                /* 0830 */  0xD9, 0x81, 0x61, 0x1C, 0x96, 0x67, 0x13, 0xE5,  // ..a..g..
                /* 0838 */  0x35, 0x86, 0x11, 0x4C, 0x03, 0xA7, 0x33, 0x83,  // 5..L..3.
                /* 0840 */  0x8F, 0x0C, 0xCE, 0x01, 0x23, 0xD5, 0x47, 0x79,  // ....#.Gy
                /* 0848 */  0x94, 0xCE, 0xA3, 0x3C, 0x05, 0xF1, 0x81, 0xC1,  // ...<....
                /* 0850 */  0xB1, 0x20, 0x64, 0xE4, 0x70, 0x89, 0x56, 0x7C,  // . d.p.V|
                /* 0858 */  0x29, 0xD0, 0x90, 0x12, 0x0C, 0x72, 0x72, 0xA0,  // )....rr.
                /* 0860 */  0x83, 0xF1, 0x10, 0xB9, 0x86, 0xC3, 0x25, 0x02,  // ......%.
                /* 0868 */  0xB6, 0xAA, 0x01, 0x82, 0x48, 0xCD, 0x85, 0x00,  // ....H...
                /* 0870 */  0x35, 0x01, 0xDF, 0x1B, 0x30, 0x23, 0xC6, 0x9D,  // 5...0#..
                /* 0878 */  0x1B, 0xE0, 0x8A, 0x83, 0x51, 0xAE, 0xB1, 0xA1,  // ....Q...
                /* 0880 */  0x55, 0x80, 0xE8, 0x30, 0xE0, 0x7B, 0x07, 0x9B,  // U..0.{..
                /* 0888 */  0x1B, 0xF0, 0x9B, 0xBD, 0xE7, 0x06, 0xFE, 0x0B,  // ........
                /* 0890 */  0x09, 0x66, 0x6E, 0xE0, 0xFF, 0xFF, 0xCF, 0x0D,  // .fn.....
                /* 0898 */  0xFE, 0x79, 0xC1, 0x73, 0x03, 0x97, 0xBE, 0xD3,  // .y.s....
                /* 08A0 */  0x08, 0xC8, 0xD1, 0xF9, 0xA5, 0x06, 0xFE, 0xA0,  // ........
                /* 08A8 */  0x71, 0x33, 0xF1, 0xCD, 0xC9, 0x93, 0xF6, 0x61,  // q3.....a
                /* 08B0 */  0x82, 0x11, 0x0C, 0x73, 0xAB, 0x01, 0x9A, 0x50,  // ...s...P
                /* 08B8 */  0x9E, 0x37, 0xB8, 0x2E, 0x35, 0xC0, 0xFB, 0x8E,  // .7..5...
                /* 08C0 */  0xE2, 0x4B, 0x0D, 0xAC, 0xFF, 0xFF, 0xA5, 0x06,  // .K......
                /* 08C8 */  0x30, 0x10, 0xE9, 0x52, 0x83, 0xE2, 0x70, 0xC4,  // 0..R..p.
                /* 08D0 */  0x4B, 0x0D, 0x62, 0xB6, 0xB1, 0x43, 0x87, 0x88,  // K.b..C..
                /* 08D8 */  0x5B, 0x3B, 0x86, 0x8E, 0x35, 0x18, 0x68, 0x5D,  // [;..5.h]
                /* 08E0 */  0x6B, 0x50, 0x61, 0x60, 0x14, 0xEF, 0xF0, 0x80,  // kPa`....
                /* 08E8 */  0x0A, 0x74, 0x78, 0xA0, 0x20, 0x1E, 0xB7, 0xAF,  // .tx. ...
                /* 08F0 */  0x35, 0x00, 0x3B, 0xFE, 0xFF, 0xD7, 0x1A, 0x70,  // 5.;....p
                /* 08F8 */  0x9F, 0x55, 0x80, 0x45, 0xD8, 0xF3, 0x01, 0xEA,  // .U.E....
                /* 0900 */  0x88, 0xE0, 0x19, 0x19, 0xC4, 0x03, 0xF3, 0x8D,  // ........
                /* 0908 */  0xDF, 0x83, 0xC6, 0xDD, 0xE7, 0xF0, 0x47, 0x15,  // ......G.
                /* 0910 */  0xE0, 0x79, 0xE3, 0x01, 0xDF, 0xC9, 0x06, 0x30,  // .y.....0
                /* 0918 */  0xF5, 0xFF, 0x3F, 0xD9, 0x00, 0x26, 0x34, 0x9F,  // ..?..&4.
                /* 0920 */  0x6C, 0x00, 0x35, 0x0A, 0x97, 0xA8, 0x8B, 0x28,  // l.5....(
                /* 0928 */  0x4E, 0xF1, 0xF3, 0x40, 0x27, 0x1B, 0x36, 0xC7,  // N..@'.6.
                /* 0930 */  0xB3, 0xE0, 0x07, 0x1B, 0x9C, 0x46, 0x40, 0x1D,  // .....F@.
                /* 0938 */  0x6C, 0xB8, 0x3A, 0x18, 0x69, 0x59, 0xB0, 0x4E,  // l.:.iY.N
                /* 0940 */  0x1A, 0x3C, 0xFD, 0xF5, 0x8F, 0x82, 0x78, 0xE0,  // .<....x.
                /* 0948 */  0x3E, 0xD8, 0x00, 0xFB, 0xFF, 0xFF, 0xC1, 0x06,  // >.......
                /* 0950 */  0x70, 0x7B, 0x0D, 0x80, 0x33, 0x97, 0x57, 0x88,  // p{..3.W.
                /* 0958 */  0x27, 0x07, 0x1F, 0xFF, 0x00, 0x1F, 0x37, 0x45,  // '.....7E
                /* 0960 */  0xE0, 0xFD, 0xFF, 0x9F, 0x1B, 0x3B, 0xB9, 0x80,  // .....;..
                /* 0968 */  0xEF, 0xA6, 0x08, 0xD8, 0x1E, 0x89, 0x2F, 0x40,  // ....../@
                /* 0970 */  0x80, 0xA3, 0x8B, 0xBF, 0x2F, 0x40, 0xE0, 0xFB,  // ..../@..
                /* 0978 */  0xFF, 0x5F, 0x80, 0x80, 0xA7, 0xC8, 0x0B, 0x10,  // ._......
                /* 0980 */  0x0A, 0xD6, 0xA2, 0x2F, 0x40, 0x88, 0x9B, 0xA2,  // .../@...
                /* 0988 */  0x67, 0xE3, 0x03, 0x10, 0x46, 0xE8, 0xFD, 0x07,  // g...F...
                /* 0990 */  0x25, 0x11, 0x46, 0xA2, 0x8F, 0xD3, 0x28, 0x99,  // %.F...(.
                /* 0998 */  0xF7, 0x1F, 0x0A, 0xE2, 0xE3, 0x34, 0xC0, 0xA1,  // .....4..
                /* 09A0 */  0xFF, 0xFF, 0xFD, 0x07, 0xB0, 0x78, 0xA5, 0x04,  // .....x..
                /* 09A8 */  0x4C, 0x5F, 0x8D, 0xC0, 0x77, 0x04, 0x82, 0xFF,  // L_..w...
                /* 09B0 */  0xFF, 0x3F, 0x02, 0x01, 0x9C, 0x80, 0x79, 0x04,  // .?....y.
                /* 09B8 */  0x02, 0x2C, 0x1D, 0x05, 0x7C, 0x04, 0xC2, 0x5C,  // .,..|..\
                /* 09C0 */  0x29, 0x31, 0x28, 0x81, 0xC3, 0x1C, 0x10, 0x93,  // )1(.....
                /* 09C8 */  0x79, 0x06, 0x42, 0x09, 0x84, 0x91, 0x98, 0x2B,  // y.B....+
                /* 09D0 */  0x25, 0x2A, 0x3E, 0x95, 0xFE, 0xFF, 0x70, 0x06,  // %*>...p.
                /* 09D8 */  0xF1, 0x95, 0x12, 0xE0, 0xFD, 0xFF, 0x7F, 0x6C,  // .......l
                /* 09E0 */  0x30, 0x82, 0x41, 0x48, 0xC9, 0x95, 0x12, 0x62,  // 0.AH...b
                /* 09E8 */  0x92, 0x2B, 0x25, 0x50, 0xD4, 0x35, 0x37, 0xD0,  // .+%P.57.
                /* 09F0 */  0x18, 0x13, 0xA0, 0xED, 0xBC, 0x04, 0x44, 0x24,  // ......D$
                /* 09F8 */  0x9D, 0x97, 0x50, 0x22, 0xCE, 0x4B, 0x14, 0xC4,  // ..P".K..
                /* 0A00 */  0xF3, 0x77, 0xC0, 0x49, 0xA3, 0x4F, 0x40, 0x70,  // .w.I.O@p
                /* 0A08 */  0xE2, 0x9C, 0x80, 0x80, 0xAA, 0xB0, 0x81, 0x83,  // ........
                /* 0A10 */  0xEC, 0x08, 0x04, 0xFB, 0xFF, 0x7F, 0x04, 0x02,  // ........
                /* 0A18 */  0x6E, 0x50, 0x8F, 0x40, 0x80, 0x19, 0xA1, 0x87,  // nP.@....
                /* 0A20 */  0x4A, 0xB4, 0xF0, 0x43, 0x25, 0x84, 0x1B, 0x10,  // J..C%...
                /* 0A28 */  0x46, 0xEC, 0x09, 0x08, 0x75, 0x08, 0xF2, 0xA1,  // F...u...
                /* 0A30 */  0x12, 0x70, 0xF9, 0xFF, 0x3F, 0x54, 0x02, 0xDC,  // .p..?T..
                /* 0A38 */  0x0C, 0x7C, 0xAA, 0x41, 0x45, 0x3C, 0xD5, 0x50,  // .|.AE<.P
                /* 0A40 */  0x10, 0x0F, 0xCC, 0xC7, 0x44, 0x9F, 0x6A, 0x70,  // ....D.jp
                /* 0A48 */  0x87, 0x4A, 0xFC, 0xA1, 0x06, 0x3C, 0xFF, 0xFF,  // .J...<..
                /* 0A50 */  0x43, 0x25, 0x70, 0x38, 0xD4, 0x80, 0xEF, 0x10,  // C%p8....
                /* 0A58 */  0x04, 0xF0, 0x46, 0xF5, 0x21, 0x08, 0x28, 0xFD,  // ..F.!.(.
                /* 0A60 */  0xFF, 0x0F, 0x41, 0xC0, 0x43, 0xF1, 0xB1, 0x12,  // ..A.C...
                /* 0A68 */  0x9D, 0xE0, 0x10, 0x84, 0x40, 0x38, 0xAF, 0xA0,  // ....@8..
                /* 0A70 */  0xB1, 0xBB, 0xBE, 0x58, 0xA2, 0x08, 0x6A, 0x3E,  // ...X..j>
                /* 0A78 */  0x05, 0xA1, 0xD4, 0xC2, 0x48, 0xD9, 0xB1, 0x12,  // ....H...
                /* 0A80 */  0xA5, 0x05, 0x46, 0x70, 0x06, 0xF1, 0xB1, 0x12,  // ..Fp....
                /* 0A88 */  0xE0, 0xD7, 0xFF, 0xFF, 0x14, 0x04, 0x98, 0x4A,  // .......J
                /* 0A90 */  0x09, 0x21, 0x1B, 0xC7, 0x4A, 0x88, 0x53, 0xF4,  // .!..J.S.
                /* 0A98 */  0xB1, 0x12, 0xF8, 0x89, 0x9C, 0x1B, 0xF4, 0x09,  // ........
                /* 0AA0 */  0xBC, 0x55, 0x3C, 0x99, 0x1C, 0xC6, 0x59, 0x1C,  // .U<...Y.
                /* 0AA8 */  0x44, 0x75, 0x02, 0x3C, 0x1E, 0x38, 0x74, 0x5E,  // Du.<.8t^
                /* 0AB0 */  0x79, 0x7A, 0x79, 0x64, 0x79, 0xE1, 0x38, 0xC4,  // yzydy.8.
                /* 0AB8 */  0x9A, 0x11, 0xA4, 0x4C, 0x80, 0xB5, 0xCB, 0x25,  // ...L...%
                /* 0AC0 */  0x20, 0xE4, 0xFF, 0x7F, 0x11, 0x02, 0xD8, 0x70,  //  ......p
                /* 0AC8 */  0xB2, 0x79, 0x11, 0x02, 0xCC, 0xC8, 0xBE, 0x08,  // .y......
                /* 0AD0 */  0xA1, 0x63, 0x5C, 0x84, 0xA0, 0x9C, 0x2F, 0x39,  // .c\.../9
                /* 0AD8 */  0x81, 0x2F, 0x99, 0xBE, 0x08, 0x71, 0xC9, 0xB7,  // ./...q..
                /* 0AE0 */  0x4B, 0x88, 0xFF, 0xFF, 0xDB, 0x25, 0xC0, 0xFF,  // K....%..
                /* 0AE8 */  0xFF, 0xFF, 0xED, 0x12, 0x18, 0x85, 0x3F, 0xD6,  // ......?.
                /* 0AF0 */  0xA0, 0xE2, 0x1E, 0x6B, 0x28, 0x88, 0x07, 0xE6,  // ...k(...
                /* 0AF8 */  0xA8, 0x27, 0x24, 0xF4, 0xED, 0x12, 0x1F, 0xED,  // .'$.....
                /* 0B00 */  0x76, 0x09, 0x54, 0xEF, 0x48, 0xC0, 0xE3, 0x2C,  // v.T.H..,
                /* 0B08 */  0x04, 0xD8, 0xFB, 0xFF, 0x9F, 0x85, 0x80, 0xF9,  // ........
                /* 0B10 */  0xE9, 0xE6, 0x59, 0x08, 0x30, 0x73, 0xA7, 0xF4,  // ..Y.0s..
                /* 0B18 */  0x59, 0x88, 0x4B, 0x81, 0x90, 0xD2, 0x2F, 0x88,  // Y.K.../.
                /* 0B20 */  0x06, 0x7C, 0x5E, 0x7D, 0x5E, 0x84, 0x10, 0x87,  // .|^}^...
                /* 0B28 */  0x0F, 0x5F, 0x3E, 0x74, 0x04, 0xA2, 0x57, 0x11,  // ._>t..W.
                /* 0B30 */  0x2B, 0xA3, 0x90, 0x92, 0xF3, 0x06, 0x2A, 0xFB,  // +.....*.
                /* 0B38 */  0xDD, 0x85, 0x82, 0x18, 0xD0, 0xC1, 0x8E, 0x0E,  // ........
                /* 0B40 */  0xE8, 0xE3, 0x8D, 0x87, 0xF3, 0x24, 0xEF, 0x0B,  // .....$..
                /* 0B48 */  0x83, 0x93, 0xDC, 0x84, 0x80, 0xA2, 0xAE, 0x6B,  // .......k
                /* 0B50 */  0x03, 0x94, 0xFF, 0xFF, 0xB5, 0x01, 0xE6, 0x9D,  // ........
                /* 0B58 */  0x05, 0x58, 0xC8, 0x99, 0x34, 0x6A, 0xCF, 0x9E,  // .X..4j..
                /* 0B60 */  0xB4, 0x29, 0x3C, 0x69, 0x87, 0x3B, 0xF7, 0xA0,  // .)<i.;..
                /* 0B68 */  0xEF, 0x2C, 0xF8, 0x30, 0xB7, 0x0F, 0xA0, 0x79,  // .,.0...y
                /* 0B70 */  0x4A, 0x02, 0xDF, 0xE5, 0x03, 0x78, 0x0F, 0xD1,  // J....x..
                /* 0B78 */  0x97, 0x0F, 0xE0, 0xF3, 0xFF, 0xBF, 0x7C, 0x00,  // ......|.
                /* 0B80 */  0x8F, 0xB8, 0x8F, 0x04, 0x5D, 0x3E, 0x70, 0xF1,  // ....]>p.
                /* 0B88 */  0x5F, 0x01, 0xBA, 0x7C, 0xB0, 0xDB, 0x32, 0x66,  // _..|..2f
                /* 0B90 */  0xFC, 0x0E, 0x7D, 0x62, 0xA0, 0xB7, 0x26, 0x1E,  // ..}b..&.
                /* 0B98 */  0xF6, 0xE0, 0x80, 0x8A, 0x07, 0x47, 0x41, 0x7C,  // .....GA|
                /* 0BA0 */  0xD2, 0x87, 0x77, 0xF9, 0xC0, 0xDC, 0x82, 0x60,  // ..w....`
                /* 0BA8 */  0x9E, 0x3E, 0xD8, 0xC1, 0x01, 0x98, 0x10, 0xF8,  // .>......
                /* 0BB0 */  0x16, 0x04, 0xBE, 0x73, 0x06, 0x78, 0xC7, 0x07,  // ...s.x..
                /* 0BB8 */  0x7C, 0xCE, 0x19, 0xF0, 0xFF, 0xFF, 0xE7, 0x0C,  // |.......
                /* 0BC0 */  0xC0, 0x03, 0xCA, 0x73, 0x06, 0x60, 0x46, 0xDB,  // ...s.`F.
                /* 0BC8 */  0x9D, 0x09, 0xAD, 0xF5, 0xCE, 0x04, 0xE1, 0xB6,  // ........
                /* 0BD0 */  0xC0, 0x14, 0xDE, 0x99, 0x50, 0xDA, 0xEE, 0x4C,  // ....P..L
                /* 0BD8 */  0x80, 0xA6, 0xFF, 0xFF, 0x9D, 0x09, 0xD8, 0x0A,  // ........
                /* 0BE0 */  0x9A, 0x34, 0x4A, 0xC2, 0x5D, 0x85, 0x82, 0x78,  // .4J.]..x
                /* 0BE8 */  0xD2, 0xBE, 0xAB, 0xC0, 0xB9, 0x7C, 0xE0, 0x4E,  // .....|.N
                /* 0BF0 */  0x80, 0xC0, 0x73, 0x54, 0x3E, 0x01, 0x02, 0x9E,  // ..sT>...
                /* 0BF8 */  0x46, 0xF9, 0xF6, 0x01, 0xFE, 0xFF, 0xFF, 0xED,  // F.......
                /* 0C00 */  0x03, 0x98, 0x45, 0xBE, 0x34, 0xA1, 0x60, 0x2D,  // ..E.4.`-
                /* 0C08 */  0xE1, 0xF6, 0x81, 0xB8, 0x34, 0x61, 0x0E, 0x00,  // ....4a..
                /* 0C10 */  0x3C, 0xF6, 0xAD, 0x09, 0x15, 0x98, 0x42, 0xD7,  // <.....B.
                /* 0C18 */  0x26, 0x1F, 0x1D, 0x78, 0x40, 0x38, 0x0A, 0xE2,  // &..x@8..
                /* 0C20 */  0x5B, 0x13, 0xE0, 0xEF, 0xA4, 0x01, 0xDE, 0x5B,  // [......[
                /* 0C28 */  0x13, 0x70, 0x1A, 0x1F, 0xFB, 0xFF, 0x9F, 0x34,  // .p.....4
                /* 0C30 */  0x00, 0x43, 0xC6, 0xAF, 0x4D, 0x80, 0x3C, 0x67,  // .C..M.<g
                /* 0C38 */  0x47, 0x67, 0x5D, 0x9B, 0x00, 0x37, 0xFF, 0xFF,  // Gg]..7..
                /* 0C40 */  0x6B, 0x13, 0xE0, 0xC9, 0xC9, 0xB5, 0x09, 0xD0,  // k.......
                /* 0C48 */  0x75, 0x5C, 0x60, 0xB7, 0x0F, 0x60, 0x3E, 0xCC,  // u\`..`>.
                /* 0C50 */  0xB7, 0x0F, 0xB0, 0xFC, 0xFF, 0xAF, 0x4D, 0x80,  // ......M.
                /* 0C58 */  0x97, 0x03, 0x00, 0xBF, 0x36, 0x01, 0xAE, 0x4F,  // ....6..O
                /* 0C60 */  0x1A, 0xE0, 0x1C, 0x1F, 0xF8, 0xFF, 0xFF, 0x27,  // .......'
                /* 0C68 */  0x0D, 0xC0, 0xDD, 0x38, 0x9F, 0x34, 0x00, 0x33,  // ...8.4.3
                /* 0C70 */  0x02, 0x4F, 0x1A, 0xA8, 0x43, 0x80, 0x05, 0x1F,  // .O..C...
                /* 0C78 */  0xBA, 0xC9, 0x15, 0xC0, 0x1E, 0x87, 0x48, 0x60,  // ......H`
                /* 0C80 */  0x82, 0x07, 0x8E, 0x72, 0x96, 0xC7, 0x69, 0xF0,  // ...r..i.
                /* 0C88 */  0x0A, 0xA7, 0xA4, 0x31, 0x04, 0x3A, 0xEF, 0x83,  // ...1.:..
                /* 0C90 */  0x8A, 0xF0, 0x7E, 0x62, 0x70, 0x9D, 0x37, 0x50,  // ..~bp.7P
                /* 0C98 */  0x92, 0x28, 0x74, 0xF2, 0x01, 0x4E, 0xFF, 0xFF,  // .(t..N..
                /* 0CA0 */  0x93, 0x0F, 0xF0, 0x39, 0x6F, 0x80, 0xEB, 0x00,  // ...9o...
                /* 0CA8 */  0x01, 0xFC, 0xC5, 0x1F, 0x20, 0x00, 0x35, 0x2A,  // .... .5*
                /* 0CB0 */  0x97, 0xA8, 0x6B, 0x1C, 0x4E, 0xF5, 0xFB, 0x40,  // ..k.N..@
                /* 0CB8 */  0x07, 0x08, 0x76, 0x8D, 0xE3, 0x77, 0x73, 0x5F,  // ..v..ws_
                /* 0CC0 */  0xE6, 0x04, 0xA6, 0x6B, 0x1C, 0x57, 0x09, 0x23,  // ...k.W.#
                /* 0CC8 */  0x55, 0xCB, 0xD5, 0xC9, 0x81, 0xEB, 0x80, 0x11,  // U.......
                /* 0CD0 */  0x9C, 0x41, 0x3C, 0x6C, 0xC7, 0x3A, 0xD5, 0xA3,  // .A<l.:..
                /* 0CD8 */  0xC7, 0xE4, 0xFF, 0xBF, 0xE2, 0x3B, 0x81, 0x8E,  // .....;..
                /* 0CE0 */  0x20, 0x0E, 0x72, 0x8C, 0x03, 0x8A, 0x47, 0x7A,  //  .r...Gz
                /* 0CE8 */  0x70, 0x65, 0x1B, 0x1B, 0xFA, 0x98, 0x64, 0xCD,  // pe....d.
                /* 0CF0 */  0x88, 0x02, 0x3C, 0x9A, 0x73, 0xC1, 0xCC, 0x0E,  // ..<.s...
                /* 0CF8 */  0xF8, 0xDD, 0xFF, 0xC1, 0x97, 0x6C, 0x76, 0x68,  // .....lvh
                /* 0D00 */  0x1D, 0x37, 0x12, 0x32, 0x9A, 0xDA, 0x21, 0x35,  // .7.2..!5
                /* 0D08 */  0x9B, 0x47, 0x06, 0x4F, 0x0E, 0xF8, 0x1D, 0x19,  // .G.O....
                /* 0D10 */  0x3C, 0x39, 0x70, 0xFD, 0xFF, 0xA3, 0x9D, 0xBE,  // <9p.....
                /* 0D18 */  0xD0, 0x93, 0xF3, 0x44, 0x5E, 0x05, 0x22, 0xBC,  // ...D^.".
                /* 0D20 */  0xD3, 0xF8, 0x32, 0x09, 0x1C, 0x91, 0x7C, 0x99,  // ..2...|.
                /* 0D28 */  0x04, 0xCE, 0x72, 0xEE, 0x40, 0xA8, 0xA7, 0x82,  // ..r.@...
                /* 0D30 */  0xCF, 0x0A, 0xA6, 0xF0, 0x05, 0xC0, 0xE1, 0x8E,  // ........
                /* 0D38 */  0x08, 0xE8, 0x3B, 0x10, 0x3E, 0xCC, 0x1D, 0x08,  // ..;.>...
                /* 0D40 */  0x68, 0x8E, 0xC4, 0x77, 0x04, 0x70, 0x5D, 0x81,  // h..w.p].
                /* 0D48 */  0xC0, 0xF8, 0xFF, 0xBF, 0x02, 0x01, 0x0B, 0xF3,  // ........
                /* 0D50 */  0x57, 0x20, 0x40, 0x8D, 0x90, 0x2B, 0x10, 0x5A,  // W @..+.Z
                /* 0D58 */  0xD8, 0x15, 0x08, 0x71, 0x97, 0xC4, 0x8C, 0xDF,  // ...q....
                /* 0D60 */  0x72, 0xAE, 0x40, 0x14, 0xC2, 0x42, 0x60, 0x24,  // r.@..B`$
                /* 0D68 */  0x03, 0x42, 0x07, 0x07, 0x1E, 0xFC, 0x0A, 0x44,  // .B.....D
                /* 0D70 */  0x41, 0x7C, 0xBD, 0xF0, 0xED, 0xC3, 0x57, 0x20,  // A|....W 
                /* 0D78 */  0x78, 0xE7, 0x06, 0x78, 0x37, 0x49, 0xE0, 0x74,  // x..x7I.t
                /* 0D80 */  0x6E, 0x00, 0x57, 0xC0, 0xD1, 0xA1, 0xC7, 0xEC,  // n.W.....
                /* 0D88 */  0x9B, 0xCA, 0xFF, 0xFF, 0x25, 0x08, 0x3F, 0x40,  // ....%.?@
                /* 0D90 */  0x60, 0x7A, 0x0E, 0x02, 0xDF, 0x45, 0xCF, 0x03,  // `z...E..
                /* 0D98 */  0xC4, 0x01, 0xFB, 0x1C, 0x84, 0x1D, 0x1F, 0x30,  // .......0
                /* 0DA0 */  0xBD, 0x09, 0x81, 0xEF, 0x3C, 0xE0, 0x9B, 0x10,  // ....<...
                /* 0DA8 */  0x0E, 0xD8, 0x37, 0x21, 0xEC, 0x45, 0x15, 0x98,  // ..7!.E..
                /* 0DB0 */  0x42, 0xF9, 0x62, 0x88, 0xF9, 0xFF, 0xDF, 0x6B,  // B.b....k
                /* 0DB8 */  0xC1, 0x72, 0xE8, 0x01, 0xEF, 0xF8, 0x80, 0xCF,  // .r......
                /* 0DC0 */  0xA1, 0x07, 0xF0, 0xA4, 0xFE, 0xD0, 0x03, 0xA8,  // ........
                /* 0DC8 */  0xD1, 0x79, 0xE8, 0x41, 0xFE, 0xFF, 0x09, 0xEA,  // .y.A....
                /* 0DD0 */  0xBE, 0x46, 0x42, 0xB8, 0x2D, 0x30, 0xB5, 0xD7,  // .FB.-0..
                /* 0DD8 */  0x48, 0x94, 0xCE, 0x6B, 0x24, 0x40, 0xEC, 0xFF,  // H..k$@..
                /* 0DE0 */  0xFF, 0x35, 0x12, 0xE0, 0xD4, 0xD1, 0x1C, 0xFE,  // .5......
                /* 0DE8 */  0xAC, 0x71, 0x47, 0x73, 0xE0, 0x3D, 0x12, 0xDF,  // .qGs.=..
                /* 0DF0 */  0x98, 0xFC, 0xFF, 0xBF, 0x31, 0x81, 0xEB, 0x0E,  // ....1...
                /* 0DF8 */  0x04, 0xBC, 0xDD, 0xDF, 0x81, 0x00, 0x35, 0x62,  // ......5b
                /* 0E00 */  0xEE, 0x40, 0x28, 0x58, 0x8B, 0xBB, 0x47, 0x42,  // .@(X..GB
                /* 0E08 */  0x39, 0x00, 0x70, 0x41, 0x17, 0x49, 0x94, 0x14,  // 9.pA.I..
                /* 0E10 */  0x18, 0xDD, 0x24, 0x7D, 0x74, 0xE0, 0xD1, 0x2F,  // ..$}t../
                /* 0E18 */  0x41, 0x14, 0xC4, 0x17, 0x49, 0xE0, 0xFA, 0xFF,  // A...I...
                /* 0E20 */  0xBF, 0x48, 0x02, 0xFC, 0xFF, 0xFF, 0x5F, 0x24,  // .H...._$
                /* 0E28 */  0x01, 0x0F, 0xC7, 0x1E, 0xF0, 0x5E, 0x24, 0x81,  // .....^$.
                /* 0E30 */  0xD3, 0xB1, 0x07, 0xF0, 0x24, 0xFF, 0xD8, 0x03,  // ....$...
                /* 0E38 */  0x14, 0xFE, 0xFF, 0x37, 0x49, 0x60, 0xEE, 0x4C,  // ...7I`.L
                /* 0E40 */  0x80, 0xB2, 0x9B, 0x24, 0x40, 0xC1, 0xFF, 0xFF,  // ...$@...
                /* 0E48 */  0x4D, 0x12, 0x60, 0xB6, 0x93, 0x3B, 0x10, 0x48,  // M.`..;.H
                /* 0E50 */  0xFE, 0xFF, 0x37, 0x49, 0xC0, 0xC4, 0xA1, 0x85,  // ..7I....
                /* 0E58 */  0xDD, 0x81, 0x80, 0xB9, 0xFD, 0x9B, 0x24, 0xA0,  // ......$.
                /* 0E60 */  0xEF, 0x00, 0xC0, 0x6F, 0x92, 0x60, 0xFB, 0xFF,  // ...o.`..
                /* 0E68 */  0xDF, 0x24, 0x01, 0xFE, 0xFF, 0xFF, 0x6F, 0x92,  // .$....o.
                /* 0E70 */  0x80, 0xF1, 0x63, 0x0F, 0x38, 0x6F, 0x92, 0xC0,  // ..c.8o..
                /* 0E78 */  0xFD, 0xD8, 0x03, 0xEC, 0xFE, 0xFF, 0xC7, 0x1E,  // ........
                /* 0E80 */  0x30, 0xE8, 0x3F, 0xF6, 0x00, 0x6A, 0xB2, 0xBD,  // 0.?..j..
                /* 0E88 */  0x70, 0x74, 0xEC, 0xE1, 0x67, 0x01, 0x67, 0x5D,  // pt..g.g]
                /* 0E90 */  0xA6, 0x6E, 0x92, 0x30, 0x14, 0x0E, 0x84, 0x9C,  // .n.0....
                /* 0E98 */  0x72, 0x9C, 0x0E, 0x50, 0x77, 0x49, 0x9E, 0x0B,  // r..PwI..
                /* 0EA0 */  0x46, 0x29, 0xCE, 0x3D, 0xA8, 0x8B, 0xA5, 0xE1,  // F).=....
                /* 0EA8 */  0x0C, 0x62, 0x0F, 0x77, 0x49, 0x40, 0xF4, 0xFF,  // .b.wI@..
                /* 0EB0 */  0xFF, 0x2E, 0x09, 0x30, 0x3C, 0xD8, 0x4D, 0x00,  // ...0<.M.
                /* 0EB8 */  0x7D, 0x1A, 0xF1, 0x64, 0x5E, 0x76, 0x3C, 0x9A,  // }..d^v<.
                /* 0EC0 */  0x18, 0xFF, 0xFF, 0x27, 0x01, 0x60, 0x38, 0x0E,  // ...'.`8.
                /* 0EC8 */  0x9F, 0x04, 0xC0, 0x35, 0x38, 0x38, 0x27, 0x97,  // ...588'.
                /* 0ED0 */  0x80, 0xAF, 0x0D, 0x8F, 0x35, 0x1E, 0x1C, 0x30,  // ....5..0
                /* 0ED8 */  0x3C, 0xF7, 0xF0, 0xC1, 0x81, 0xE7, 0x8E, 0x0A,  // <.......
                /* 0EE0 */  0xD8, 0xFB, 0xFF, 0xDF, 0xAE, 0xC0, 0x35, 0x72,  // ......5r
                /* 0EE8 */  0xDF, 0xAE, 0x00, 0x4F, 0xFE, 0x6F, 0x57, 0x80,  // ...O.oW.
                /* 0EF0 */  0x9A, 0x20, 0xB7, 0x2B, 0x14, 0x87, 0x83, 0xDD,  // . .+....
                /* 0EF8 */  0xAE, 0x10, 0x77, 0x54, 0xEC, 0xF1, 0x0A, 0x03,  // ..wT....
                /* 0F00 */  0xAD, 0xEB, 0x15, 0x85, 0x70, 0x04, 0x18, 0x05,  // ....p...
                /* 0F08 */  0x80, 0xD0, 0xE1, 0x81, 0x4B, 0x86, 0xA3, 0x20,  // ....K.. 
                /* 0F10 */  0x1E, 0x91, 0x6F, 0xA9, 0xE0, 0xFA, 0xFF, 0xDF,  // ..o.....
                /* 0F18 */  0x52, 0x01, 0xFE, 0xFF, 0xFF, 0x6F, 0xA9, 0x80,  // R....o..
                /* 0F20 */  0xC3, 0x70, 0x17, 0x2D, 0xE8, 0xC7, 0x01, 0xE0,  // .p.-....
                /* 0F28 */  0x79, 0xD5, 0x02, 0xDF, 0xF0, 0xE0, 0x5C, 0xB5,  // y.....\.
                /* 0F30 */  0x70, 0xC3, 0x03, 0x8E, 0xFF, 0x7F, 0x02, 0x5F,  // p......_
                /* 0F38 */  0xB6, 0xC0, 0x77, 0x03, 0x06, 0x3C, 0x1C, 0xAA,  // ..w..<..
                /* 0F40 */  0x00, 0x57, 0x01, 0x0E, 0x55, 0x80, 0x96, 0xFF,  // .W..U...
                /* 0F48 */  0x3F, 0x81, 0x95, 0x2D, 0x50, 0x87, 0x2A, 0x7E,  // ?..-P.*~
                /* 0F50 */  0x1C, 0xB2, 0xD2, 0x07, 0x8C, 0x86, 0x6B, 0x88,  // ......k.
                /* 0F58 */  0x37, 0x60, 0x7E, 0x5B, 0xF0, 0x55, 0x4F, 0x60,  // 7`~[.UO`
                /* 0F60 */  0xBA, 0xFF, 0x72, 0x65, 0x14, 0x52, 0x72, 0xBA,  // ..re.Rr.
                /* 0F68 */  0x43, 0x65, 0x3F, 0xFD, 0x50, 0x10, 0x03, 0xFA,  // Ce?.P...
                /* 0F70 */  0x86, 0xE8, 0x93, 0x03, 0x4E, 0x05, 0x88, 0xA6,  // ....N...
                /* 0F78 */  0x60, 0x84, 0x13, 0x7A, 0xF3, 0x04, 0x86, 0x04,  // `..z....
                /* 0F80 */  0xBE, 0x79, 0x82, 0xE7, 0xDA, 0xC0, 0x6E, 0x88,  // .y....n.
                /* 0F88 */  0xC0, 0x42, 0xCE, 0xA4, 0x51, 0x7B, 0xF6, 0xA4,  // .B..Q{..
                /* 0F90 */  0x4D, 0xE1, 0x49, 0xFB, 0xAE, 0x02, 0xE7, 0xF6,  // M.I.....
                /* 0F98 */  0x81, 0xBB, 0xAB, 0xC0, 0xBB, 0x21, 0x02, 0x9F,  // .....!..
                /* 0FA0 */  0x6B, 0x16, 0xF6, 0xFF, 0x7F, 0x57, 0x01, 0xC3,  // k....W..
                /* 0FA8 */  0xE5, 0x03, 0x78, 0x27, 0xB8, 0x7C, 0x00, 0x6A,  // ..x'.|.j
                /* 0FB0 */  0xE2, 0x3E, 0x12, 0x74, 0xF9, 0xC0, 0xC5, 0x7F,  // .>.t....
                /* 0FB8 */  0x05, 0xE8, 0xF2, 0xC1, 0x2E, 0x88, 0x98, 0xF1,  // ........
                /* 0FC0 */  0x3B, 0xF4, 0x89, 0x81, 0x42, 0x38, 0x2E, 0x85,  // ;...B8..
                /* 0FC8 */  0xC2, 0x1E, 0x1C, 0x50, 0xF1, 0xE0, 0x28, 0x88,  // ...P..(.
                /* 0FD0 */  0x07, 0xED, 0x5B, 0x10, 0x9C, 0xCB, 0x07, 0xE6,  // ..[.....
                /* 0FD8 */  0x16, 0x04, 0xBC, 0xFE, 0xFF, 0xD7, 0x43, 0x58,  // ......CX
                /* 0FE0 */  0xB7, 0x20, 0xF0, 0x9D, 0x33, 0xC0, 0x7B, 0x3B,  // . ..3.{;
                /* 0FE8 */  0x04, 0xFE, 0xE7, 0x0C, 0xE0, 0xDD, 0xE0, 0x9C,  // ........
                /* 0FF0 */  0x01, 0x88, 0xF8, 0xFF, 0x9F, 0x03, 0x60, 0x68,  // ......`h
                /* 0FF8 */  0xBB, 0x33, 0xA1, 0xB5, 0xDE, 0x99, 0x20, 0x1C,  // .3.... .
                /* 1000 */  0x07, 0x99, 0xC2, 0x3B, 0x13, 0x4A, 0xDB, 0x9D,  // ...;.J..
                /* 1008 */  0x09, 0x20, 0xC5, 0x29, 0x1D, 0xFE, 0x69, 0x14,  // . .)..i.
                /* 1010 */  0x77, 0x4A, 0x07, 0xDE, 0xFF, 0xFF, 0x51, 0xF9,  // wJ....Q.
                /* 1018 */  0x30, 0x0A, 0xBE, 0xDB, 0x07, 0xF0, 0x8E, 0x70,  // 0......p
                /* 1020 */  0xFB, 0x00, 0xD4, 0x44, 0xBE, 0x34, 0xA1, 0x60,  // ...D.4.`
                /* 1028 */  0x2D, 0xE1, 0xF6, 0x81, 0xB8, 0x34, 0x61, 0x0E,  // -....4a.
                /* 1030 */  0x00, 0x3C, 0xF6, 0xAD, 0x09, 0x15, 0x98, 0x42,  // .<.....B
                /* 1038 */  0xD7, 0x26, 0x1F, 0x1D, 0x78, 0x40, 0x38, 0x0A,  // .&..x@8.
                /* 1040 */  0xE2, 0x5B, 0x13, 0x70, 0xFC, 0xFF, 0xDF, 0x9A,  // .[.p....
                /* 1048 */  0x80, 0xDB, 0x49, 0x03, 0xBC, 0xB7, 0x26, 0xE0,  // ..I...&.
                /* 1050 */  0x74, 0xD2, 0x00, 0x3C, 0x55, 0x38, 0x69, 0x00,  // t..<U8i.
                /* 1058 */  0xDD, 0xFF, 0xFF, 0xB5, 0x09, 0xD8, 0x5C, 0x17,  // ......\.
                /* 1060 */  0xD8, 0xB5, 0x09, 0x60, 0xD0, 0x3D, 0x1C, 0x9C,  // ...`.=..
                /* 1068 */  0xD7, 0x26, 0xB0, 0xFE, 0xFF, 0x6F, 0x1F, 0xC0,  // .&...o..
                /* 1070 */  0xE2, 0x1E, 0x0E, 0xFC, 0x33, 0x5C, 0x9B, 0x00,  // ....3\..
                /* 1078 */  0x7D, 0x07, 0x00, 0x7E, 0x6D, 0x02, 0xC6, 0xFF,  // }..~m...
                /* 1080 */  0xFF, 0x6B, 0x13, 0x30, 0x3F, 0x69, 0x80, 0xF3,  // .k.0?i..
                /* 1088 */  0xDA, 0x04, 0xDC, 0x4F, 0x1A, 0xC0, 0xBF, 0xC3,  // ...O....
                /* 1090 */  0x49, 0x03, 0x48, 0xFD, 0xFF, 0x4F, 0x1A, 0xC0,  // I.H..O..
                /* 1098 */  0x22, 0xCF, 0xDB, 0x40, 0x27, 0x0D, 0x7E, 0x16,  // "..@'.~.
                /* 10A0 */  0x70, 0xBE, 0x45, 0xEA, 0xDA, 0x04, 0x43, 0xE1,  // p.E...C.
                /* 10A8 */  0x40, 0xC8, 0x08, 0x12, 0x4C, 0x04, 0xA8, 0x8B,  // @...L...
                /* 10B0 */  0x13, 0xCF, 0x02, 0x23, 0xE5, 0x24, 0x3A, 0x6A,  // ...#.$:j
                /* 10B8 */  0xF0, 0x5B, 0x94, 0xE1, 0x0C, 0xE2, 0x13, 0x83,  // .[......
                /* 10C0 */  0x2F, 0x4E, 0x80, 0xAF, 0xC1, 0xF9, 0xCC, 0x8D,  // /N......
                /* 10C8 */  0x9F, 0xCC, 0x6B, 0x86, 0x47, 0xF3, 0x60, 0xE4,  // ..k.G.`.
                /* 10D0 */  0x20, 0x93, 0x03, 0x7A, 0x27, 0x6E, 0xB0, 0xFD,  //  ..z'n..
                /* 10D8 */  0xFF, 0x07, 0x07, 0xEB, 0xCC, 0x10, 0xF0, 0x41,  // .......A
                /* 10E0 */  0xE0, 0x81, 0xC2, 0x83, 0x03, 0x86, 0x27, 0x06,  // ......'.
                /* 10E8 */  0x0F, 0x0E, 0x5C, 0x17, 0x32, 0xC0, 0x34, 0x94,  // ..\.2.4.
                /* 10F0 */  0xEF, 0x35, 0xC0, 0xEF, 0xFF, 0x7F, 0xAF, 0x01,  // .5......
                /* 10F8 */  0x1E, 0x21, 0xEE, 0x35, 0x80, 0x1A, 0xB9, 0xF7,  // .!.5....
                /* 1100 */  0x1A, 0x14, 0x87, 0xE5, 0xDF, 0x6B, 0x10, 0x17,  // .....k..
                /* 1108 */  0x32, 0xEC, 0xC1, 0x06, 0x03, 0xAD, 0x8B, 0x0D,  // 2.......
                /* 1110 */  0x85, 0xB0, 0x50, 0x18, 0xC9, 0x84, 0xD0, 0xE1,  // ..P.....
                /* 1118 */  0x81, 0x0B, 0x83, 0xA3, 0x20, 0x1E, 0xB9, 0xAF,  // .... ...
                /* 1120 */  0x64, 0x80, 0xBB, 0xFF, 0x7F, 0xB8, 0xBB, 0x0D,  // d.......
                /* 1128 */  0xF4, 0x30, 0x57, 0x32, 0xA0, 0x7A, 0x63, 0x01,  // .0W2.zc.
                /* 1130 */  0xD7, 0xF0, 0xE0, 0xDC, 0x6E, 0x70, 0xC3, 0x03,  // ....np..
                /* 1138 */  0x9E, 0xF7, 0x1B, 0xF0, 0x5D, 0xF7, 0x00, 0x0F,  // ....]...
                /* 1140 */  0xE7, 0x18, 0xFE, 0xFF, 0x3F, 0xC7, 0x00, 0x8E,  // ....?...
                /* 1148 */  0x4A, 0x9C, 0x63, 0x00, 0x35, 0xE2, 0xEE, 0xA9,  // J.c.5...
                /* 1150 */  0x28, 0x51, 0x10, 0x12, 0xFB, 0xC4, 0xD0, 0x11,  // (Q......
                /* 1158 */  0xE6, 0x64, 0xFB, 0x1C, 0xB0, 0xC0, 0x4F, 0xFB,  // .d....O.
                /* 1160 */  0xB0, 0x3D, 0xE2, 0xA3, 0x8E, 0x71, 0x66, 0x1E,  // .=...qf.
                /* 1168 */  0xD1, 0x39, 0xD7, 0x3E, 0x38, 0x7A, 0x20, 0xD0,  // .9.>8z .
                /* 1170 */  0x5D, 0x15, 0x25, 0x89, 0x42, 0xA7, 0x2A, 0xF0,  // ].%.B.*.
                /* 1178 */  0x4D, 0xE1, 0x2C, 0x4F, 0xF8, 0xCD, 0xE0, 0xF0,  // M.,O....
                /* 1180 */  0x7C, 0xAA, 0x02, 0xEF, 0xFF, 0xFF, 0x24, 0x03,  // |.....$.
                /* 1188 */  0x1C, 0x8F, 0x0F, 0xC0, 0x3B, 0xDF, 0xF1, 0x01,  // ....;...
                /* 1190 */  0x50, 0x23, 0xEA, 0xD6, 0x8C, 0x16, 0x79, 0x54,  // P#....yT
                /* 1198 */  0xD0, 0xE5, 0xC1, 0x2A, 0x05, 0x78, 0x1C, 0x22,  // ...*.x."
                /* 11A0 */  0x99, 0xEE, 0x4B, 0x8B, 0x3D, 0x8F, 0x83, 0x1C,  // ..K.=...
                /* 11A8 */  0x1D, 0xC0, 0xA7, 0xE4, 0xE8, 0x00, 0xAA, 0xFF,  // ........
                /* 11B0 */  0xFF, 0xD1, 0x01, 0x70, 0x60, 0x4C, 0x80, 0xB6,  // ...p`L..
                /* 11B8 */  0xA3, 0x03, 0x90, 0x8F, 0x7B, 0x74, 0x00, 0xD4,  // ....{t..
                /* 11C0 */  0x48, 0x3A, 0x3A, 0xA0, 0x25, 0x1E, 0x1D, 0xD0,  // H::.%...
                /* 11C8 */  0x22, 0xE7, 0xA1, 0x19, 0xB2, 0x61, 0xE8, 0xE8,  // "....a..
                /* 11D0 */  0x80, 0x3A, 0x39, 0x58, 0xCE, 0xD1, 0x01, 0x45,  // .:9X...E
                /* 11D8 */  0x65, 0x30, 0x53, 0xF8, 0xE8, 0xE0, 0x03, 0x18,  // e0S.....
                /* 11E0 */  0xFF, 0xFF, 0x1F, 0x1D, 0xE0, 0x1D, 0xC0, 0xE0,  // ........
                /* 11E8 */  0x1D, 0x1D, 0x80, 0xD3, 0x01, 0x0C, 0x5C, 0x27,  // ......\'
                /* 11F0 */  0x07, 0xE0, 0x5D, 0xF7, 0xE4, 0x00, 0xA8, 0x11,  // ..].....
                /* 11F8 */  0x74, 0x72, 0x40, 0x49, 0x19, 0xB9, 0x4F, 0x0A,  // tr@I..O.
                /* 1200 */  0x9A, 0xAD, 0x8F, 0x54, 0x31, 0x42, 0x9E, 0x4D,  // ...T1B.M
                /* 1208 */  0xC5, 0x23, 0x23, 0x07, 0x07, 0x58, 0xFF, 0xFF,  // .##..X..
                /* 1210 */  0x83, 0x03, 0xF0, 0x39, 0x65, 0x02, 0xA7, 0x83,  // ...9e...
                /* 1218 */  0x03, 0xE0, 0x28, 0xF3, 0x09, 0x06, 0xD0, 0x75,  // ..(....u
                /* 1220 */  0x70, 0x60, 0x27, 0x98, 0xFF, 0xFF, 0x21, 0x7A,  // p`'...!z
                /* 1228 */  0x8E, 0x87, 0xE8, 0x69, 0xF8, 0x04, 0x03, 0xB0,  // ...i....
                /* 1230 */  0xAB, 0xF3, 0xC9, 0x01, 0x50, 0xF2, 0xFF, 0x3F,  // ....P..?
                /* 1238 */  0x39, 0x80, 0xE1, 0x7A, 0xE9, 0x93, 0x03, 0x30,  // 9..z...0
                /* 1240 */  0x3E, 0xC2, 0x00, 0xDE, 0x43, 0x9F, 0x1C, 0x80,  // >...C...
                /* 1248 */  0xEE, 0xFF, 0xFF, 0x08, 0x03, 0x5C, 0xCE, 0x74,  // .....\.t
                /* 1250 */  0x00, 0xCF, 0x4A, 0x9F, 0x1C, 0x80, 0xCA, 0xFF,  // ..J.....
                /* 1258 */  0xFF, 0x98, 0x0B, 0xDC, 0x8E, 0x02, 0x3E, 0xE6,  // ......>.
                /* 1260 */  0xDA, 0xEA, 0x60, 0x35, 0xC6, 0xC7, 0x5C, 0x1C,  // ..`5..\.
                /* 1268 */  0xC4, 0x23, 0xC0, 0x09, 0x3C, 0x3A, 0x00, 0xFC,  // .#..<:..
                /* 1270 */  0x0A, 0x7E, 0x74, 0x00, 0xC5, 0xFF, 0xFF, 0xE8,  // .~t.....
                /* 1278 */  0x00, 0x18, 0x39, 0x4C, 0xB1, 0xA3, 0x03, 0x70,  // ..9L...p
                /* 1280 */  0x3E, 0x4D, 0x01, 0xCE, 0xFF, 0xFF, 0xF7, 0x04,  // >M......
                /* 1288 */  0x17, 0x3F, 0x4D, 0x01, 0xBA, 0x0E, 0x31, 0xB8,  // .?M...1.
                /* 1290 */  0xD3, 0x14, 0xC0, 0x9F, 0xFF, 0xFF, 0xC9, 0x01,  // ........
                /* 1298 */  0x3C, 0xC9, 0x4F, 0x0E, 0x80, 0x1A, 0x81, 0x0B,  // <.O.....
                /* 12A0 */  0xD4, 0xC9, 0x81, 0x73, 0x58, 0xF0, 0x43, 0x41,  // ...sX.CA
                /* 12A8 */  0x3A, 0x27, 0xAD, 0xE1, 0x3E, 0x39, 0x30, 0x94,  // :'..>90.
                /* 12B0 */  0x53, 0x8C, 0xED, 0xC1, 0x45, 0xAE, 0x19, 0x5C,  // S...E..\
                /* 12B8 */  0xD0, 0x04, 0x52, 0x87, 0x06, 0x9F, 0x19, 0x2C,  // ..R....,
                /* 12C0 */  0x8D, 0x42, 0x42, 0xCE, 0x0E, 0xA8, 0xE8, 0x27,  // .BB....'
                /* 12C8 */  0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3A, 0x3B, 0xA0,  // ..b@.:;.
                /* 12D0 */  0x55, 0x80, 0xE8, 0x1A, 0x70, 0x8C, 0x11, 0xCE,  // U...p...
                /* 12D8 */  0x29, 0xC1, 0x20, 0x57, 0x07, 0x3A, 0x33, 0x4F,  // ). W.:3O
                /* 12E0 */  0x92, 0x6B, 0xB8, 0xC3, 0x20, 0x70, 0xAB, 0x9A,  // .k.. p..
                /* 12E8 */  0x22, 0x88, 0xD4, 0x9C, 0x09, 0x50, 0x13, 0xF0,  // "....P..
                /* 12F0 */  0xC9, 0x01, 0x73, 0x71, 0x00, 0x97, 0xBE, 0x8B,  // ..sq....
                /* 12F8 */  0x03, 0xC8, 0xFE, 0xFF, 0x17, 0x07, 0x3C, 0x3A,  // ......<:
                /* 1300 */  0x3F, 0x80, 0x78, 0xD0, 0x5C, 0xC2, 0xF9, 0x83,  // ?.x.\...
                /* 1308 */  0x82, 0x78, 0xD0, 0x8E, 0x07, 0x21, 0x25, 0xE7,  // .x...!%.
                /* 1310 */  0x0F, 0xA8, 0x71, 0xCE, 0x1F, 0x40, 0x73, 0x54,  // ..q..@sT
                /* 1318 */  0x16, 0x36, 0x6D, 0xD0, 0x18, 0x13, 0xA0, 0xED,  // .6m.....
                /* 1320 */  0xB8, 0xC0, 0x0E, 0x20, 0x40, 0x3B, 0xFD, 0x01,  // ... @;..
                /* 1328 */  0x04, 0xD0, 0xF2, 0xFF, 0x27, 0xB0, 0x94, 0xB7,  // ....'...
                /* 1330 */  0x81, 0xCE, 0x64, 0x38, 0x11, 0x8B, 0xD4, 0x01,  // ..d8....
                /* 1338 */  0x04, 0xA7, 0x75, 0xBE, 0xD2, 0x08, 0x21, 0x98,  // ..u...!.
                /* 1340 */  0x9E, 0x21, 0x49, 0xEC, 0xF3, 0x07, 0x2A, 0x30,  // .!I...*0
                /* 1348 */  0x85, 0x02, 0x9E, 0x1D, 0x50, 0x91, 0xCE, 0x0E,  // ....P...
                /* 1350 */  0x14, 0xC4, 0xC3, 0xF6, 0xF9, 0x03, 0xB0, 0x15,  // ........
                /* 1358 */  0xEC, 0xD6, 0x04, 0xE5, 0xF6, 0xE2, 0xEB, 0xB6,  // ........
                /* 1360 */  0xC5, 0x0F, 0x0E, 0x28, 0x4E, 0xDF, 0x67, 0x15,  // ...(N.g.
                /* 1368 */  0x60, 0xFB, 0xFF, 0x3F, 0x2D, 0x90, 0xA3, 0x17,  // `..?-...
                /* 1370 */  0xE8, 0x0E, 0x0D, 0x8F, 0x5E, 0xC0, 0x78, 0x4C,  // ....^.xL
                /* 1378 */  0x3E, 0x7A, 0x01, 0xE7, 0xF0, 0x47, 0x15, 0xD0,  // >z...G..
                /* 1380 */  0xB5, 0x3F, 0xAA, 0x00, 0x5D, 0xB1, 0xE7, 0x00,  // .?..]...
                /* 1388 */  0xD0, 0x60, 0xBC, 0x6E, 0x45, 0x38, 0xAD, 0x50,  // .`.nE8.P
                /* 1390 */  0x67, 0x7E, 0x4A, 0x11, 0x63, 0x86, 0x39, 0xE6,  // g~J.c.9.
                /* 1398 */  0x58, 0xFF, 0xFF, 0x30, 0x21, 0xC2, 0x9E, 0x49,  // X..0!..I
                /* 13A0 */  0x98, 0xE6, 0xB1, 0x35, 0x32, 0xCF, 0xCF, 0xC7,  // ...52...
                /* 13A8 */  0x04, 0x9D, 0xC2, 0x50, 0xA7, 0x02, 0x87, 0x3B,  // ...P...;
                /* 13B0 */  0x85, 0x21, 0x0E, 0xA6, 0xEC, 0xD4, 0x82, 0x8F,  // .!......
                /* 13B8 */  0x73, 0x6A, 0xA1, 0x10, 0x0E, 0x02, 0xA3, 0x18,  // sj......
                /* 13C0 */  0x10, 0x3A, 0x45, 0x70, 0xE1, 0x70, 0x14, 0xC4,  // .:Ep.p..
                /* 13C8 */  0x67, 0x07, 0x9F, 0x22, 0xE0, 0x9C, 0x5A, 0x30,  // g.."..Z0
                /* 13D0 */  0x07, 0x53, 0xC0, 0xCC, 0xF0, 0xE0, 0xDC, 0x5B,  // .S.....[
                /* 13D8 */  0x70, 0xC3, 0x03, 0x9E, 0x37, 0x17, 0xF0, 0x9D,  // p...7...
                /* 13E0 */  0x50, 0xE0, 0xFE, 0xFF, 0x0F, 0xBD, 0xC0, 0xF5,  // P.......
                /* 13E8 */  0x84, 0x02, 0xBC, 0xCF, 0x66, 0xE0, 0x8B, 0x7F,  // ....f...
                /* 13F0 */  0x36, 0x03, 0xD4, 0xA8, 0x3B, 0x96, 0xA0, 0xD5,  // 6...;...
                /* 13F8 */  0xBE, 0x02, 0x34, 0xD9, 0x6A, 0x0F, 0x09, 0x3A,  // ..4.j..:
                /* 1400 */  0x9B, 0xF1, 0x53, 0x8A, 0xCF, 0xDF, 0x3E, 0x96,  // ..S...>.
                /* 1408 */  0x1C, 0x88, 0xF5, 0x9D, 0xCD, 0x50, 0xCA, 0x28,  // .....P.(
                /* 1410 */  0xA4, 0xE3, 0xAC, 0x84, 0x3A, 0xA5, 0xFA, 0xFF,  // ....:...
                /* 1418 */  0x0F, 0x67, 0x10, 0x03, 0x3A, 0xD6, 0xC0, 0x51,  // .g..:..Q
                /* 1420 */  0x90, 0x3E, 0x56, 0xB1, 0x21, 0x3A, 0xC9, 0xD1,  // .>V.!:..
                /* 1428 */  0x0C, 0x28, 0xEA, 0xBA, 0x36, 0x40, 0x1F, 0xC4,  // .(..6@..
                /* 1430 */  0x6B, 0x03, 0x73, 0x36, 0xC4, 0x37, 0x4D, 0x20,  // k.s6.7M 
                /* 1438 */  0x3A, 0x67, 0xDC, 0xED, 0x03, 0x7F, 0xD3, 0x04,  // :g......
                /* 1440 */  0x5C, 0x8C, 0x1B, 0x7B, 0xFD, 0x00, 0xD7, 0xFF,  // \..{....
                /* 1448 */  0xFF, 0xFA, 0x01, 0x6C, 0xC4, 0xAC, 0x4D, 0xD7,  // ...l..M.
                /* 1450 */  0x0F, 0xC0, 0x4B, 0xE4, 0x2B, 0x3C, 0xEA, 0x2C,  // ..K.+<.,
                /* 1458 */  0x60, 0x09, 0xD7, 0x0F, 0xC4, 0x25, 0x8B, 0x5F,  // `....%._
                /* 1460 */  0x3F, 0xB0, 0xA1, 0xEF, 0xF0, 0xA8, 0xB8, 0x14,  // ?.......
                /* 1468 */  0x0A, 0x7B, 0x76, 0x40, 0xC5, 0x83, 0xA3, 0x20,  // .{v@... 
                /* 1470 */  0x1E, 0xB6, 0x2F, 0x42, 0x3E, 0x3B, 0xE0, 0x0E,  // ../B>;..
                /* 1478 */  0x08, 0x6C, 0x88, 0xEC, 0xE8, 0x00, 0xEF, 0x8E,  // .l......
                /* 1480 */  0x05, 0x9C, 0x8E, 0x0E, 0xE0, 0x3B, 0x69, 0xFC,  // .....;i.
                /* 1488 */  0xFF, 0x9F, 0x34, 0xC0, 0x7A, 0xC9, 0x02, 0x4E,  // ..4.z..N
                /* 1490 */  0x27, 0x0D, 0xC0, 0x93, 0x99, 0x93, 0x06, 0xA0,  // '.......
                /* 1498 */  0x46, 0xD2, 0x49, 0x03, 0x05, 0x4B, 0xC6, 0xA6,  // F.I..K..
                /* 14A0 */  0x7B, 0x13, 0x4E, 0xE4, 0x3C, 0x74, 0xAC, 0xE0,  // {.N.<t..
                /* 14A8 */  0xB2, 0x4E, 0x18, 0xE4, 0xFF, 0x0F, 0xC1, 0x8E,  // .N......
                /* 14B0 */  0x3C, 0xBE, 0xB1, 0x82, 0xEF, 0xB2, 0x8E, 0xBB,  // <.......
                /* 14B8 */  0xB1, 0x02, 0xCF, 0xCB, 0x21, 0xF8, 0x4E, 0x0E,  // ....!.N.
                /* 14C0 */  0xC0, 0x5B, 0xCD, 0xC9, 0x01, 0x50, 0x13, 0xFE,  // .[...P..
                /* 14C8 */  0x02, 0x87, 0x02, 0xFF, 0xFF, 0x07, 0x16, 0x90,  // ........
                /* 14D0 */  0x4E, 0x0E, 0xEC, 0xDE, 0xE0, 0xFB, 0x0A, 0xE6,  // N.......
                /* 14D8 */  0x26, 0x72, 0x72, 0x27, 0xE2, 0xB9, 0xBD, 0xB4,  // &rr'....
                /* 14E0 */  0xE0, 0xEE, 0xEB, 0x30, 0x4E, 0x3C, 0x3E, 0x3E,  // ...0N<>>
                /* 14E8 */  0xF0, 0x40, 0xC7, 0x07, 0x0A, 0xE2, 0xA1, 0xFB,  // .@......
                /* 14F0 */  0x12, 0x07, 0xB8, 0xBA, 0xDA, 0xFB, 0x84, 0x04,  // ........
                /* 14F8 */  0x03, 0xF0, 0x7C, 0xCF, 0x0D, 0x18, 0x8E, 0xDE,  // ..|.....
                /* 1500 */  0x07, 0x3E, 0x60, 0xFD, 0xFF, 0x3F, 0xF0, 0xC1,  // .>`..?..
                /* 1508 */  0x76, 0x72, 0x5A, 0x81, 0x7A, 0xE0, 0x03, 0x9E,  // vrZ.z...
                /* 1510 */  0x63, 0xF2, 0xB9, 0x09, 0xFE, 0x69, 0x85, 0x9F,  // c....i..
                /* 1518 */  0x9B, 0x80, 0xBF, 0x9B, 0xE3, 0x0A, 0x20, 0xEC,  // ...... .
                /* 1520 */  0xFF, 0x7F, 0x5C, 0xF1, 0x51, 0x05, 0xC6, 0x0D,  // ..\.Q...
                /* 1528 */  0xE0, 0x99, 0x05, 0x7B, 0x5C, 0x01, 0x98, 0xFD,  // ...{\...
                /* 1530 */  0xFF, 0x3F, 0xAE, 0x00, 0x2C, 0x3A, 0xFF, 0xF9,  // .?..,:..
                /* 1538 */  0xF2, 0x0E, 0x58, 0xFB, 0xFF, 0xC3, 0xB6, 0x3A,  // ..X....:
                /* 1540 */  0x35, 0x1D, 0x36, 0xAC, 0x19, 0x5A, 0x04, 0xBE,  // 5.6..Z..
                /* 1548 */  0xBC, 0x03, 0xEC, 0x01, 0xE5, 0xD7, 0x0F, 0xE0,  // ........
                /* 1550 */  0x7E, 0x07, 0x06, 0xCB, 0x18, 0x8E, 0xC2, 0xFF,  // ~.......
                /* 1558 */  0xFF, 0x31, 0xBC, 0x6B, 0xBF, 0x7E, 0x00, 0x77,  // .1.k.~.w
                /* 1560 */  0x3B, 0xD7, 0x0F, 0x40, 0x4D, 0xF4, 0xEB, 0x07,  // ;..@M...
                /* 1568 */  0x4A, 0x14, 0x84, 0xA4, 0x5C, 0x3D, 0x41, 0x30,  // J...\=A0
                /* 1570 */  0xE6, 0xB7, 0x00, 0xDF, 0xBD, 0x00, 0x57, 0xFF,  // ......W.
                /* 1578 */  0xFF, 0xBB, 0x17, 0x38, 0xEF, 0x4D, 0xB8, 0xBB,  // ...8.M..
                /* 1580 */  0x17, 0xE0, 0xE3, 0xD2, 0x84, 0x3D, 0xAD, 0x00,  // .....=..
                /* 1588 */  0xA6, 0xEF, 0x5E, 0xE0, 0x38, 0xAD, 0xC0, 0xF9,  // ..^.8...
                /* 1590 */  0xFF, 0x9F, 0x56, 0x80, 0xB3, 0x9E, 0xD3, 0x0A,  // ..V.....
                /* 1598 */  0x20, 0xED, 0xA4, 0x82, 0xBD, 0x78, 0x02, 0x1E,  //  ....x..
                /* 15A0 */  0xFF, 0xFF, 0xA7, 0x15, 0xF0, 0x9C, 0x34, 0x70,  // ......4p
                /* 15A8 */  0x17, 0x4F, 0xC0, 0xC8, 0x31, 0x03, 0x77, 0xF1,  // .O..1.w.
                /* 15B0 */  0x04, 0xD8, 0xF2, 0xFF, 0x3F, 0xAD, 0x00, 0x4F,  // ....?..O
                /* 15B8 */  0x3F, 0xA7, 0x15, 0x40, 0x8D, 0xB6, 0xD3, 0x0A,  // ?..@....
                /* 15C0 */  0x0A, 0xD6, 0x5A, 0x2F, 0x9E, 0xE8, 0xEB, 0x0A,  // ..Z/....
                /* 15C8 */  0xBF, 0x77, 0x02, 0x4E, 0xFF, 0xFF, 0x57, 0x2F,  // .w.N..W/
                /* 15D0 */  0x60, 0x7F, 0x00, 0xC2, 0xDD, 0x3B, 0x01, 0x4E,  // `....;.N
                /* 15D8 */  0x1C, 0x02, 0x7C, 0xFB, 0x00, 0x76, 0xFF, 0xFF,  // ..|..v..
                /* 15E0 */  0xDB, 0x07, 0x98, 0x2F, 0x5A, 0xBE, 0x7D, 0xE0,  // .../Z.}.
                /* 15E8 */  0x5E, 0x0A, 0xBE, 0x7D, 0xB0, 0xD1, 0xBE, 0x7D,  // ^..}...}
                /* 15F0 */  0xE0, 0x43, 0x9F, 0x19, 0x28, 0x84, 0xE3, 0x52,  // .C..(..R
                /* 15F8 */  0x28, 0xEC, 0xD1, 0x01, 0x75, 0xF3, 0x32, 0x98,  // (...u.2.
                /* 1600 */  0x41, 0x3C, 0x6A, 0x87, 0xBB, 0x7D, 0xA0, 0xCF,  // A<j..}..
                /* 1608 */  0x07, 0x6C, 0x84, 0xEC, 0xE4, 0x00, 0xEF, 0xF8,  // .l......
                /* 1610 */  0xC1, 0x4E, 0x0E, 0xC0, 0x84, 0xC0, 0x27, 0x07,  // .N....'.
                /* 1618 */  0x30, 0x5C, 0x83, 0xB0, 0x07, 0x0D, 0xF0, 0x8E,  // 0\......
                /* 1620 */  0x0F, 0xF8, 0x1C, 0x34, 0xC0, 0xF6, 0xFF, 0x3F,  // ...4...?
                /* 1628 */  0x68, 0x00, 0x7B, 0x43, 0x07, 0x0D, 0x40, 0x4D,  // h.{C..@M
                /* 1630 */  0xD8, 0x83, 0x06, 0x6A, 0xD4, 0x0E, 0x3F, 0x36,  // ...j..?6
                /* 1638 */  0x1D, 0x34, 0xD8, 0x80, 0x23, 0xF8, 0x98, 0x01,  // .4..#...
                /* 1640 */  0x58, 0xFC, 0xFF, 0x1F, 0x33, 0x00, 0x56, 0x85,  // X...3.V.
                /* 1648 */  0xA6, 0xD4, 0x31, 0x03, 0xF0, 0x22, 0xE9, 0x78,  // ..1..".x
                /* 1650 */  0x84, 0xFC, 0xFF, 0xC3, 0xEA, 0x19, 0xA0, 0x5B,  // .......[
                /* 1658 */  0x46, 0x8D, 0xA3, 0xD6, 0x5D, 0x8F, 0x1D, 0x73,  // F...]..s
                /* 1660 */  0x7D, 0xAC, 0xE0, 0xB2, 0x0E, 0x1A, 0xA8, 0x33,  // }......3
                /* 1668 */  0x95, 0xE5, 0x1C, 0x34, 0x50, 0x54, 0x06, 0x33,  // ...4PT.3
                /* 1670 */  0x85, 0x0F, 0x6A, 0x3E, 0x68, 0xD8, 0xC8, 0xAD,  // ..j>h...
                /* 1678 */  0x13, 0x6A, 0x98, 0x83, 0x1A, 0xD0, 0x1C, 0x1E,  // .j......
                /* 1680 */  0xB9, 0x75, 0x82, 0x46, 0xDC, 0xC9, 0x01, 0xA8,  // .u.F....
                /* 1688 */  0x2B, 0x3A, 0xEF, 0x00, 0x12, 0xFE, 0xFF, 0xE7,  // +:......
                /* 1690 */  0x00, 0x58, 0x02, 0x6F, 0xDC, 0x68, 0xC1, 0x0F,  // .X.o.h..
                /* 1698 */  0x05, 0x9D, 0x1C, 0x70, 0x28, 0xA7, 0x13, 0xF6,  // ...p(...
                /* 16A0 */  0x95, 0xDB, 0xD0, 0xE1, 0x83, 0x18, 0x28, 0xC4,  // ......(.
                /* 16A8 */  0x5B, 0xC0, 0x41, 0x24, 0x28, 0xEE, 0xE2, 0x89,  // [.A$(...
                /* 16B0 */  0x92, 0x45, 0x21, 0x19, 0xA7, 0x07, 0x54, 0xF0,  // .E!...T.
                /* 16B8 */  0x33, 0x04, 0x05, 0x31, 0xA0, 0x53, 0x9D, 0x1E,  // 3..1.S..
                /* 16C0 */  0xD0, 0x27, 0x4E, 0x36, 0x4A, 0x07, 0xB9, 0x78,  // .'N6J..x
                /* 16C8 */  0x02, 0xC5, 0x9B, 0x03, 0xB8, 0x0E, 0x9E, 0xC0,  // ........
                /* 16D0 */  0xE2, 0x00, 0x02, 0xBE, 0x01, 0x1D, 0xE5, 0x21,  // .......!
                /* 16D8 */  0xF2, 0x03, 0x08, 0xB0, 0xFA, 0xFF, 0x1F, 0x85,  // ........
                /* 16E0 */  0x60, 0x1D, 0x40, 0x00, 0x47, 0x8E, 0x0E, 0x20,  // `.@.G.. 
                /* 16E8 */  0x80, 0x9A, 0xD0, 0x27, 0x21, 0xD4, 0x01, 0xC4,  // ...'!...
                /* 16F0 */  0x22, 0x0E, 0x20, 0x88, 0x73, 0x27, 0x3B, 0x80,  // ". .s';.
                /* 16F8 */  0xC0, 0x0D, 0x7C, 0x1A, 0x42, 0x45, 0xA5, 0x50,  // ..|.BE.P
                /* 1700 */  0xD0, 0xD3, 0x03, 0x2A, 0x1A, 0x1C, 0x05, 0xF1,  // ...*....
                /* 1708 */  0xC8, 0x1D, 0xED, 0xF4, 0x80, 0x3E, 0x8E, 0xB1,  // .....>..
                /* 1710 */  0x51, 0xB2, 0xC3, 0x03, 0xBC, 0x63, 0x19, 0xF6,  // Q....c..
                /* 1718 */  0xFF, 0x7F, 0x18, 0x02, 0xC6, 0x47, 0x0D, 0xF0,  // .....G..
                /* 1720 */  0x1E, 0xE2, 0x80, 0xD3, 0x51, 0x03, 0x70, 0x24,  // ....Q.p$
                /* 1728 */  0xE9, 0xA8, 0x01, 0xE4, 0xFE, 0xFF, 0x47, 0x0D,  // ......G.
                /* 1730 */  0xB0, 0xCB, 0x3B, 0x3A, 0xA1, 0x24, 0x41, 0x48,  // ..;:.$AH
                /* 1738 */  0xEE, 0xD1, 0x09, 0x0D, 0xF2, 0x02, 0x10, 0xFC,  // ........
                /* 1740 */  0x84, 0x3C, 0x32, 0xCF, 0xF9, 0xE0, 0x3C, 0x82,  // .<2...<.
                /* 1748 */  0x27, 0x27, 0x80, 0x4D, 0x27, 0x41, 0xB0, 0xFF,  // ''.M'A..
                /* 1750 */  0xFF, 0xCF, 0x1F, 0x80, 0x5D, 0x4B, 0xE7, 0x0F,  // ....]K..
                /* 1758 */  0x40, 0x8D, 0xB0, 0x93, 0x13, 0xEA, 0xFC, 0x61,  // @......a
                /* 1760 */  0xA1, 0x47, 0x52, 0xC4, 0xC9, 0x89, 0x9D, 0x84,  // .GR.....
                /* 1768 */  0xE3, 0x06, 0x7F, 0x6B, 0xF2, 0x41, 0xC1, 0xE7,  // ...k.A..
                /* 1770 */  0x0F, 0xCC, 0xA9, 0x14, 0xD8, 0xFC, 0xFF, 0x4F,  // .......O
                /* 1778 */  0x4E, 0x80, 0x95, 0xC3, 0x03, 0xF0, 0xD6, 0x74,  // N......t
                /* 1780 */  0x78, 0x00, 0xD4, 0x48, 0x3C, 0x95, 0xA2, 0x25,  // x..H<..%
                /* 1788 */  0x9F, 0x4A, 0x21, 0xCD, 0x38, 0x46, 0xFC, 0xF7,  // .J!.8F..
                /* 1790 */  0xED, 0x48, 0x3E, 0x3D, 0x60, 0xE4, 0x1D, 0x86,  // .H>=`...
                /* 1798 */  0x50, 0xC7, 0x09, 0x1F, 0x86, 0x30, 0xFF, 0xFF,  // P....0..
                /* 17A0 */  0xC3, 0x10, 0xC0, 0x80, 0x13, 0x88, 0xC7, 0xCC,  // ........
                /* 17A8 */  0x25, 0x1C, 0x40, 0x28, 0x88, 0xC7, 0xEC, 0xF3,  // %.@(....
                /* 17B0 */  0xBE, 0xC7, 0x8C, 0x9B, 0x89, 0xEF, 0x07, 0xBE,  // ........
                /* 17B8 */  0x05, 0xF8, 0x28, 0x08, 0xFF, 0x34, 0x04, 0x58,  // ..(..4.X
                /* 17C0 */  0xFA, 0xFF, 0x9F, 0x40, 0x80, 0x91, 0xA7, 0x13,  // ...@....
                /* 17C8 */  0x08, 0xA0, 0x26, 0xF6, 0xB1, 0x14, 0x2D, 0xE3,  // ..&...-.
                /* 17D0 */  0x58, 0x0A, 0xE9, 0x04, 0x02, 0x2B, 0xF2, 0x71,  // X....+.q
                /* 17D8 */  0x08, 0x15, 0x96, 0x42, 0xE7, 0x52, 0x1F, 0x1F,  // ...B.R..
                /* 17E0 */  0x78, 0x38, 0x38, 0x0A, 0xE2, 0x63, 0x29, 0x60,  // x88..c)`
                /* 17E8 */  0xEB, 0xFF, 0x7F, 0x78, 0xC0, 0x9C, 0x35, 0xC0,  // ...x..5.
                /* 17F0 */  0x7D, 0x2E, 0x05, 0xBC, 0x8B, 0x3A, 0x6B, 0x00,  // }....:k.
                /* 17F8 */  0x6A, 0x82, 0x1F, 0x9E, 0xD0, 0x42, 0x80, 0x74,  // j....B.t
                /* 1800 */  0x78, 0x82, 0xF1, 0xFF, 0x3F, 0x68, 0xF0, 0xA1,  // x...?h..
                /* 1808 */  0x87, 0x3F, 0x52, 0x5F, 0x6E, 0x7C, 0xC0, 0x66,  // .?R_n|.f
                /* 1810 */  0x87, 0x27, 0x1E, 0xF7, 0xF0, 0x04, 0xD0, 0x21,  // .'.....!
                /* 1818 */  0xE6, 0x98, 0x51, 0xC1, 0x8E, 0x2B, 0x14, 0xC4,  // ..Q..+..
                /* 1820 */  0xC7, 0x15, 0x78, 0x23, 0xAC, 0x19, 0x41, 0x47,  // ..x#..AG
                /* 1828 */  0x27, 0xC0, 0xCB, 0xFF, 0x7F, 0x74, 0xF0, 0xCE,  // '....t..
                /* 1830 */  0xE4, 0xB0, 0x47, 0x07, 0x7C, 0x8E, 0xCC, 0xE4,  // ..G.|...
                /* 1838 */  0xB0, 0x02, 0x28, 0x32, 0x75, 0x58, 0x01, 0xD4,  // ..(2uX..
                /* 1840 */  0xA4, 0x79, 0x1A, 0xE8, 0xB0, 0x82, 0x4B, 0x77,  // .y....Kw
                /* 1848 */  0x58, 0x41, 0x9C, 0xB3, 0xB0, 0x87, 0x15, 0xEC,  // XA......
                /* 1850 */  0xFF, 0xFF, 0xB0, 0xC2, 0x92, 0xC0, 0xEA, 0xB0,  // ........
                /* 1858 */  0xC2, 0x33, 0xC0, 0x48, 0x31, 0x89, 0x4E, 0x1A,  // .3.H1.N.
                /* 1860 */  0x5C, 0xE3, 0x99, 0x85, 0x82, 0xF8, 0xCC, 0xE0,  // \.......
                /* 1868 */  0xC3, 0x0A, 0x60, 0x2A, 0xD6, 0x9D, 0x04, 0xEA,  // ..`*....
                /* 1870 */  0xD8, 0x80, 0xDF, 0x8D, 0x04, 0x7C, 0xB7, 0x00,  // .....|..
                /* 1878 */  0x38, 0x13, 0x61, 0x53, 0x03, 0x76, 0xFF, 0xFF,  // 8.aS.v..
                /* 1880 */  0xF3, 0x08, 0x18, 0x6F, 0xA3, 0xC0, 0x12, 0x94,  // ...o....
                /* 1888 */  0xDF, 0xAE, 0xE1, 0xC4, 0xB9, 0xD5, 0x00, 0x4D,  // .......M
                /* 1890 */  0x28, 0x0B, 0x9B, 0x36, 0xF4, 0x51, 0x1C, 0xC3,  // (..6.Q..
                /* 1898 */  0x51, 0x78, 0x0C, 0x0F, 0x8F, 0x09, 0x7C, 0xAD,  // Qx....|.
                /* 18A0 */  0x01, 0xDE, 0xAA, 0xAE, 0x35, 0xA0, 0xFD, 0xFF,  // ....5...
                /* 18A8 */  0x5F, 0x6B, 0x80, 0x63, 0xD8, 0xDB, 0x28, 0x0A,  // _k.c..(.
                /* 18B0 */  0xD6, 0xE1, 0xAF, 0xFA, 0x88, 0x53, 0x0D, 0xF3,  // .....S..
                /* 18B8 */  0x09, 0x41, 0x8E, 0x25, 0x2C, 0xF0, 0x4D, 0x14,  // .A.%,.M.
                /* 18C0 */  0x75, 0x11, 0x75, 0xD0, 0xA3, 0x03, 0x2A, 0x1A,  // u.u...*.
                /* 18C8 */  0x1C, 0x05, 0xF1, 0x4D, 0x14, 0xF0, 0x16, 0x6E,  // ...M...n
                /* 18D0 */  0x74, 0xE8, 0x73, 0x80, 0x87, 0xFB, 0x64, 0x70,  // t.s...dp
                /* 18D8 */  0xC8, 0x0F, 0x10, 0xEC, 0x22, 0x0A, 0x7C, 0xFF,  // ....".|.
                /* 18E0 */  0xFF, 0x97, 0x31, 0xC0, 0x8F, 0xAB, 0x63, 0x06,  // ..1...c.
                /* 18E8 */  0xA0, 0x26, 0xC8, 0x45, 0x14, 0x75, 0x14, 0x70,  // .&.E.u.p
                /* 18F0 */  0xB0, 0xA3, 0x86, 0x80, 0x23, 0x1C, 0xED, 0x8B,  // ....#...
                /* 18F8 */  0x28, 0x1B, 0xF7, 0xE9, 0x84, 0x0E, 0x51, 0xF1,  // (.....Q.
                /* 1900 */  0xD8, 0x08, 0xC1, 0x28, 0x57, 0x30, 0x0A, 0xE1,  // ...(W0..
                /* 1908 */  0x10, 0x30, 0x8A, 0x70, 0x13, 0x43, 0x89, 0x86,  // .0.p.C..
                /* 1910 */  0xA3, 0x20, 0x3E, 0x30, 0xF8, 0x9C, 0x01, 0x67,  // . >0...g
                /* 1918 */  0x48, 0xE7, 0x70, 0x8A, 0xBE, 0x15, 0x02, 0x97,  // H.p.....
                /* 1920 */  0xFF, 0xFF, 0x39, 0x03, 0xB8, 0x8C, 0x0E, 0xCE,  // ..9.....
                /* 1928 */  0x11, 0xDC, 0x03, 0x7E, 0xDF, 0x04, 0xCC, 0x1C,  // ...~....
                /* 1930 */  0x4A, 0xE0, 0xDC, 0xB6, 0xF9, 0x85, 0x13, 0x70,  // J......p
                /* 1938 */  0xFC, 0xFF, 0x3F, 0x94, 0x80, 0x4F, 0xD6, 0xA1,  // ..?..O..
                /* 1940 */  0x04, 0x50, 0xA3, 0xF5, 0x50, 0x82, 0xD6, 0x7E,  // .P..P..~
                /* 1948 */  0x28, 0x41, 0x4F, 0xF7, 0x01, 0xC4, 0x40, 0x07,  // (AO...@.
                /* 1950 */  0x14, 0x26, 0xC4, 0x13, 0x95, 0x6E, 0xDA, 0x28,  // .&...n.(
                /* 1958 */  0x9D, 0x14, 0x52, 0x72, 0x96, 0x42, 0x65, 0x3F,  // ..Rr.Be?
                /* 1960 */  0x43, 0x50, 0x10, 0x03, 0x3A, 0xD8, 0xD1, 0x01,  // CP..:...
                /* 1968 */  0xCA, 0x70, 0x4F, 0xE7, 0x20, 0x4E, 0xA3, 0xF8,  // .pO. N..
                /* 1970 */  0xB3, 0x36, 0xA0, 0xEE, 0xFF, 0x7F, 0x33, 0x84,  // .6....3.
                /* 1978 */  0x2D, 0x6E, 0xD2, 0x28, 0x39, 0xF7, 0x31, 0x0A,  // -n.(9.1.
                /* 1980 */  0xE2, 0x49, 0x3B, 0x2A, 0x84, 0x6C, 0x4C, 0x1A,  // .I;*.lL.
                /* 1988 */  0x3D, 0xE7, 0xE7, 0x00, 0x7E, 0x67, 0x61, 0x97,  // =...~ga.
                /* 1990 */  0x15, 0xE0, 0x29, 0x72, 0xDA, 0xD0, 0x67, 0xF0,  // ..)r..g.
                /* 1998 */  0x44, 0x53, 0xF5, 0x38, 0x34, 0x8D, 0xA3, 0xA8,  // DS.84...
                /* 19A0 */  0xEE, 0xCE, 0xA0, 0x91, 0x9E, 0x6C, 0x63, 0xF3,  // .....lc.
                /* 19A8 */  0x95, 0xC2, 0x31, 0xE9, 0x38, 0x67, 0x6B, 0x38,  // ..1.8gk8
                /* 19B0 */  0xD2, 0x76, 0x0B, 0x01, 0xEA, 0xDA, 0x6E, 0x21,  // .v....n!
                /* 19B8 */  0x40, 0xFC, 0xFF, 0x7F, 0x3F, 0x04, 0xEB, 0xB8,  // @...?...
                /* 19C0 */  0x02, 0xC6, 0x3C, 0xE3, 0x87, 0x09, 0xCF, 0xF1,  // ..<.....
                /* 19C8 */  0x10, 0x3D, 0x0D, 0xDF, 0x0F, 0x81, 0xC1, 0x78,  // .=.....x
                /* 19D0 */  0x1E, 0x3E, 0xD8, 0xFD, 0x10, 0x70, 0x75, 0x2F,  // .>...pu/
                /* 19D8 */  0x38, 0x60, 0xCC, 0xFD, 0x10, 0x30, 0xF6, 0xFF,  // 8`...0..
                /* 19E0 */  0x3F, 0x66, 0x00, 0x3B, 0x81, 0xC7, 0x0C, 0x40,  // ?f.;...@
                /* 19E8 */  0x4D, 0xE0, 0x63, 0x06, 0x8A, 0x83, 0x00, 0xE9,  // M.c.....
                /* 19F0 */  0x98, 0xC1, 0xB0, 0x83, 0xBE, 0xDD, 0x1D, 0x86,  // ........
                /* 19F8 */  0x4F, 0xD3, 0x1E, 0xE7, 0x91, 0x60, 0x0E, 0x1A,  // O....`..
                /* 1A00 */  0x80, 0xD1, 0xFF, 0xFF, 0x41, 0x03, 0x0C, 0xD7,  // ....A...
                /* 1A08 */  0x71, 0xDC, 0x41, 0x03, 0xE0, 0x83, 0xC1, 0x83,  // q.A.....
                /* 1A10 */  0x06, 0xA0, 0x46, 0xDD, 0x9D, 0x0F, 0xC5, 0xE1,  // ..F.....
                /* 1A18 */  0xBB, 0x9E, 0x0F, 0x1A, 0x30, 0xFE, 0xFF, 0x43,  // ....0..C
                /* 1A20 */  0x3B, 0xE2, 0x23, 0xC2, 0xA8, 0xBB, 0xF4, 0xA1,  // ;.#.....
                /* 1A28 */  0x74, 0x51, 0x48, 0xC7, 0x41, 0x03, 0x95, 0xFC,  // tQH.A...
                /* 1A30 */  0x58, 0x40, 0x41, 0x0C, 0xE8, 0x58, 0x07, 0x0D,  // X@A..X..
                /* 1A38 */  0xA8, 0x77, 0x3E, 0xC0, 0xEA, 0x75, 0xCF, 0x73,  // .w>..u.s
                /* 1A40 */  0xE6, 0x5B, 0xF6, 0x9C, 0x4D, 0xE1, 0x39, 0xFB,  // .[..M.9.
                /* 1A48 */  0xFA, 0x01, 0xDE, 0x03, 0x2F, 0xF0, 0xFF, 0xFF,  // ..../...
                /* 1A50 */  0x5F, 0x3F, 0x80, 0xB7, 0xC2, 0xEB, 0x07, 0xA0,  // _?......
                /* 1A58 */  0x46, 0xDA, 0xF5, 0x03, 0x05, 0x6B, 0xA9, 0x0F,  // F....k..
                /* 1A60 */  0x05, 0x0D, 0x38, 0xF2, 0x1B, 0x2C, 0x3F, 0x7E,  // ..8..,?~
                /* 1A68 */  0x18, 0xE2, 0x0D, 0xE0, 0x00, 0x12, 0x94, 0x77,  // .......w
                /* 1A70 */  0xF9, 0x40, 0x09, 0xA3, 0x90, 0x90, 0x93, 0x03,  // .@......
                /* 1A78 */  0x2A, 0xFA, 0xA1, 0x80, 0x82, 0x18, 0xD0, 0xB9,  // *.......
                /* 1A80 */  0x4E, 0x0E, 0x68, 0x15, 0x97, 0x0F, 0x32, 0x9C,  // N.h...2.
                /* 1A88 */  0x23, 0x7A, 0x61, 0xF0, 0xE9, 0x03, 0x58, 0xFF,  // #za...X.
                /* 1A90 */  0xFF, 0x4F, 0x1F, 0x00, 0x57, 0x2D, 0x9E, 0x3E,  // .O..W-.>
                /* 1A98 */  0x80, 0xD2, 0xFF, 0xFF, 0xF4, 0x01, 0x3C, 0xE2,  // ......<.
                /* 1AA0 */  0xDE, 0x5C, 0xD1, 0xF1, 0xC7, 0xA6, 0xD3, 0x87,  // .\......
                /* 1AA8 */  0x27, 0xFB, 0xF4, 0x01, 0x23, 0xF2, 0x0D, 0x10,  // '...#...
                /* 1AB0 */  0x15, 0x96, 0x42, 0x57, 0x40, 0x9F, 0x1C, 0x78,  // ..BW@..x
                /* 1AB8 */  0x38, 0x38, 0x0A, 0xE2, 0x51, 0xFB, 0xE4, 0x00,  // 88..Q...
                /* 1AC0 */  0xE7, 0xF4, 0x81, 0xB9, 0x02, 0x02, 0x0C, 0xFA,  // ........
                /* 1AC8 */  0xFF, 0x9F, 0x33, 0x00, 0x0F, 0x1A, 0xCF, 0x19,  // ..3.....
                /* 1AD0 */  0x80, 0x1A, 0x41, 0xE7, 0x0C, 0x94, 0x94, 0x5B,  // ..A....[
                /* 1AD8 */  0x2E, 0x3D, 0x34, 0x61, 0xCE, 0xF3, 0xC7, 0x71,  // .=4a...q
                /* 1AE0 */  0x84, 0x4C, 0xD6, 0x31, 0x03, 0x25, 0x88, 0x42,  // .L.1.%.B
                /* 1AE8 */  0xE7, 0x1D, 0xC0, 0xD1, 0xFF, 0xFF, 0x98, 0x01,  // ........
                /* 1AF0 */  0xBE, 0x83, 0x03, 0xF0, 0xF6, 0x78, 0x70, 0x00,  // .....xp.
                /* 1AF8 */  0xD4, 0xC8, 0x3B, 0xBC, 0xA1, 0x8E, 0x02, 0x96,  // ..;.....
                /* 1B00 */  0x7B, 0x78, 0x43, 0xA2, 0xBC, 0xDB, 0xB0, 0xB9,  // {xC.....
                /* 1B08 */  0x05, 0xAE, 0x19, 0x46, 0x27, 0x00, 0x9D, 0xDE,  // ...F'...
                /* 1B10 */  0x50, 0xD2, 0x4E, 0x6F, 0x40, 0xFF, 0xFF, 0x7F,  // P.No@...
                /* 1B18 */  0x7A, 0x03, 0x9C, 0x9C, 0x3F, 0x3C, 0x68, 0x2E,  // z...?<h.
                /* 1B20 */  0xE1, 0xF8, 0x41, 0x41, 0x3C, 0x68, 0xC7, 0x03,  // ..AA<h..
                /* 1B28 */  0x45, 0x1D, 0x3F, 0xE0, 0xC4, 0x39, 0xBD, 0x01,  // E.?..9..
                /* 1B30 */  0x55, 0x61, 0xD3, 0x86, 0x3E, 0x8A, 0x63, 0x38,  // Ua..>.c8
                /* 1B38 */  0x0A, 0x8F, 0xE1, 0x5D, 0x38, 0x81, 0xCF, 0x1F,  // ...]8...
                /* 1B40 */  0xC0, 0x5B, 0xE4, 0xF9, 0x03, 0xEA, 0xFF, 0xFF,  // .[......
                /* 1B48 */  0xFC, 0x01, 0xFC, 0x65, 0x9D, 0x83, 0x50, 0x1C,  // ...e..P.
                /* 1B50 */  0x96, 0x79, 0x0E, 0x42, 0x9E, 0x3F, 0xF8, 0xC4,  // .y.B.?..
                /* 1B58 */  0x1F, 0x10, 0x3C, 0x33, 0x43, 0x93, 0xA3, 0x10,  // ..<3C...
                /* 1B60 */  0x40, 0xA5, 0xFF, 0xFF, 0xD9, 0x01, 0x6F, 0xF2,  // @.....o.
                /* 1B68 */  0xEC, 0x00, 0xA8, 0x09, 0x7B, 0x24, 0x43, 0x87,  // ....{$C.
                /* 1B70 */  0x3F, 0x49, 0x22, 0xC7, 0x78, 0x86, 0x1E, 0x86,  // ?I".x...
                /* 1B78 */  0x0F, 0x92, 0x00, 0x57, 0xFE, 0xFF, 0x07, 0x49,  // ...W...I
                /* 1B80 */  0xC0, 0xB3, 0xCA, 0x63, 0x06, 0xA0, 0x46, 0xD8,  // ...c..F.
                /* 1B88 */  0x01, 0x0E, 0x75, 0xCC, 0xB0, 0xD0, 0x03, 0x1C,  // ..u.....
                /* 1B90 */  0xF2, 0x98, 0x81, 0x39, 0xCB, 0x03, 0xA7, 0xFF,  // ...9....
                /* 1B98 */  0xFF, 0x59, 0x1E, 0xE0, 0xFF, 0xFF, 0xFF, 0xF0,  // .Y......
                /* 1BA0 */  0x01, 0xCF, 0xE5, 0xE1, 0x03, 0x50, 0x23, 0xE7,  // .....P#.
                /* 1BA8 */  0xC8, 0x84, 0x1A, 0xB5, 0xE5, 0x1D, 0x99, 0xA8,  // ........
                /* 1BB0 */  0xCF, 0x83, 0xA8, 0x10, 0x62, 0x04, 0xF5, 0xC9,  // ....b...
                /* 1BB8 */  0x0D, 0xFC, 0x27, 0x26, 0xC0, 0xD1, 0xB9, 0x01,  // ..'&....
                /* 1BC0 */  0x38, 0xFC, 0xFF, 0xCF, 0x0D, 0xE0, 0x3C, 0x19,  // 8.....<.
                /* 1BC8 */  0xFA, 0x6C, 0x0E, 0xB8, 0xBA, 0x34, 0x9C, 0x70,  // .l...4.p
                /* 1BD0 */  0x85, 0xC3, 0x15, 0xE4, 0xD9, 0x54, 0x3C, 0x32,  // .....T<2
                /* 1BD8 */  0x72, 0x82, 0x04, 0x96, 0x07, 0x07, 0xC0, 0xD1,  // r.......
                /* 1BE0 */  0xFF, 0xFF, 0xE0, 0x00, 0x9C, 0x7C, 0x1E, 0x1C,  // .....|..
                /* 1BE8 */  0x00, 0x35, 0x92, 0x0E, 0x0E, 0x28, 0x58, 0x72,  // .5...(Xr
                /* 1BF0 */  0x70, 0x40, 0xDC, 0xC5, 0x98, 0xC8, 0x79, 0x68,  // p@....yh
                /* 1BF8 */  0x86, 0xEC, 0x28, 0x0B, 0x58, 0xFE, 0xFF, 0x9F,  // ..(.X...
                /* 1C00 */  0x1C, 0x80, 0xB7, 0xD0, 0x93, 0x03, 0xA0, 0x26,  // .......&
                /* 1C08 */  0xDE, 0xD3, 0xC0, 0x67, 0x78, 0x8F, 0x4C, 0x81,  // ...gx.L.
                /* 1C10 */  0x60, 0x50, 0x07, 0x3D, 0x1F, 0x10, 0xF0, 0x03,  // `P.=....
                /* 1C18 */  0x3D, 0xCE, 0xC3, 0x3B, 0x12, 0x26, 0x09, 0x0E,  // =..;.&..
                /* 1C20 */  0x75, 0x06, 0xF0, 0x48, 0x9A, 0x3F, 0xCD, 0x90,  // u..H.?..
                /* 1C28 */  0x09, 0x7B, 0x2A, 0x21, 0x99, 0xB4, 0x21, 0xA1,  // .{*!..!.
                /* 1C30 */  0xCE, 0x8A, 0x64, 0x42, 0x9A, 0xCE, 0xAB, 0x43,  // ..dB...C
                /* 1C38 */  0xC4, 0x27, 0x45, 0xC3, 0x24, 0xF0, 0xE8, 0x19,  // .'E.$...
                /* 1C40 */  0x1A, 0x27, 0x18, 0x60, 0x7C, 0xA0, 0x39, 0x1D,  // .'.`|.9.
                /* 1C48 */  0x1C, 0xFF, 0xB9, 0x44, 0x8B, 0x70, 0xCE, 0xF1,  // ...D.p..
                /* 1C50 */  0x42, 0x19, 0x2E, 0xD0, 0xB3, 0x82, 0x4F, 0xF4,  // B.....O.
                /* 1C58 */  0x0C, 0x2B, 0xF8, 0x41, 0xBC, 0x06, 0x30, 0x98,  // .+.A..0.
                /* 1C60 */  0x40, 0x51, 0xFC, 0xFF, 0x1F, 0x8D, 0x21, 0x5F,  // @Q....!_
                /* 1C68 */  0x05, 0x18, 0x54, 0xAB, 0xB7, 0x05, 0x81, 0x1B,  // ..T.....
                /* 1C70 */  0xD6, 0x40, 0xC1, 0x0C, 0x71, 0x74, 0xD8, 0x61,  // .@..qt.a
                /* 1C78 */  0x1A, 0xD2, 0x03, 0x79, 0xCE, 0xF0, 0x3D, 0xC0,  // ...y..=.
                /* 1C80 */  0x04, 0x27, 0xFC, 0xCC, 0x50, 0xEE, 0x9D, 0x5F,  // .'..P.._
                /* 1C88 */  0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14, 0x81, 0x0B,  // .Q......
                /* 1C90 */  0x8D, 0x39, 0x14, 0x78, 0x12, 0x6F, 0x13, 0x3E,  // .9.x.o.>
                /* 1C98 */  0x1C, 0x30, 0xF7, 0x13, 0xD4, 0x05, 0xE2, 0x19,  // .0......
                /* 1CA0 */  0x22, 0xC6, 0x5B, 0x91, 0x11, 0x6A, 0x14, 0x60,  // ".[..j.`
                /* 1CA8 */  0x0B, 0x9D, 0x20, 0x18, 0x25, 0x08, 0x43, 0xE1,  // .. .%.C.
                /* 1CB0 */  0x98, 0x51, 0x3C, 0xCD, 0xB3, 0x08, 0x52, 0x9B,  // .Q<...R.
                /* 1CB8 */  0x00, 0x65, 0x20, 0x32, 0x86, 0x88, 0x40, 0x68,  // .e 2..@h
                /* 1CC0 */  0x7F, 0x10, 0x44, 0xC2, 0x63, 0x42, 0xE7, 0x02,  // ..D.cB..
                /* 1CC8 */  0x47, 0x1A, 0x0D, 0xEA, 0x88, 0xE1, 0xB3, 0x81,  // G.......
                /* 1CD0 */  0xCF, 0x05, 0xE7, 0x78, 0xD0, 0x87, 0x68, 0x90,  // ...x..h.
                /* 1CD8 */  0xA3, 0x3B, 0xB8, 0x3A, 0x0F, 0x05, 0x64, 0x78,  // .;.:..dx
                /* 1CE0 */  0xEC, 0x38, 0xE2, 0xB3, 0x85, 0x4F, 0x09, 0x78,  // .8...O.x
                /* 1CE8 */  0xD7, 0x80, 0xBA, 0x1E, 0x3C, 0x4E, 0x80, 0x65,  // ....<N.e
                /* 1CF0 */  0x44, 0xCF, 0x22, 0xB0, 0xC7, 0xE3, 0xA3, 0x81,  // D.".....
                /* 1CF8 */  0x4F, 0x01, 0x26, 0xB0, 0xFC, 0x41, 0xA0, 0x46,  // O.&..A.F
                /* 1D00 */  0x66, 0x68, 0x8F, 0xF4, 0xB4, 0xDE, 0x10, 0x7C,  // fh.....|
                /* 1D08 */  0x2E, 0x30, 0x81, 0xC5, 0x9E, 0x50, 0xE9, 0x78,  // .0...P.x
                /* 1D10 */  0xC0, 0x7F, 0xD6, 0x7A, 0x34, 0x88, 0xF0, 0x66,  // ...z4..f
                /* 1D18 */  0xE0, 0xF9, 0xFA, 0x6C, 0xC3, 0x9C, 0x9C, 0x6C,  // ...l...l
                /* 1D20 */  0xD0, 0xFF, 0xFF, 0xCB, 0x02, 0x86, 0x60, 0xE0,  // ......`.
                /* 1D28 */  0x13, 0x0A, 0x15, 0x75, 0x42, 0x41, 0x9D, 0x2C,  // ...uBA.,
                /* 1D30 */  0x7C, 0xA8, 0x60, 0x77, 0x83, 0x87, 0x06, 0x76,  // |.`w...v
                /* 1D38 */  0x40, 0x61, 0xA7, 0x1E, 0x72, 0x2A, 0x01, 0xFD,  // @a..r*..
                /* 1D40 */  0x79, 0x06, 0x77, 0xCC, 0x80, 0x7B, 0xAB, 0xC0,  // y.w..{..
                /* 1D48 */  0xCD, 0x88, 0x1F, 0x7F, 0xC9, 0x51, 0x07, 0x34,  // .....Q.4
                /* 1D50 */  0xCE, 0x8E, 0x0F, 0x3A, 0x06, 0xF0, 0xB3, 0x0E,  // ...:....
                /* 1D58 */  0xFC, 0x1B, 0x53, 0x8C, 0x30, 0x4F, 0x12, 0xB1,  // ..S.0O..
                /* 1D60 */  0x62, 0x1C, 0xCE, 0xB9, 0x9C, 0xC4, 0x7B, 0x53,  // b.....{S
                /* 1D68 */  0x95, 0x30, 0x82, 0xEC, 0xF2, 0xC6, 0x43, 0x0E,  // .0....C.
                /* 1D70 */  0x49, 0x1E, 0xD2, 0x79, 0x3C, 0x82, 0x70, 0x02,  // I..y<.p.
                /* 1D78 */  0x0F, 0x11, 0x3F, 0x0C, 0x7E, 0x96, 0x78, 0xF8,  // ..?.~.x.
                /* 1D80 */  0x61, 0x93, 0x78, 0xFF, 0xF1, 0x04, 0x8E, 0xCA,  // a.x.....
                /* 1D88 */  0xA7, 0x14, 0x23, 0x04, 0x7F, 0xF8, 0x38, 0xE7,  // ..#...8.
                /* 1D90 */  0xB7, 0x00, 0x13, 0xF8, 0x7A, 0xE4, 0x13, 0x2E,  // ....z...
                /* 1D98 */  0x62, 0x00, 0x28, 0xF0, 0x13, 0x3A, 0x45, 0x9F,  // b.(..:E.
                /* 1DA0 */  0x85, 0x4E, 0x0C, 0x77, 0x28, 0xE0, 0x23, 0xC2,  // .N.w(.#.
                /* 1DA8 */  0x0E, 0x80, 0x9F, 0x6F, 0xC0, 0xF7, 0xFF, 0x3F,  // ...o...?
                /* 1DB0 */  0xDF, 0x00, 0x4C, 0x3A, 0x3D, 0x3C, 0xDF, 0x00,  // ..L:=<..
                /* 1DB8 */  0xCE, 0xFE, 0xFF, 0xE7, 0x1B, 0x80, 0xD5, 0x13,  // ........
                /* 1DC0 */  0x08, 0xF6, 0x78, 0x73, 0x0E, 0xE7, 0xF3, 0xFC,  // ..xs....
                /* 1DC8 */  0xF2, 0x68, 0x11, 0x25, 0x44, 0x94, 0x38, 0x11,  // .h.%D.8.
                /* 1DD0 */  0xA2, 0x3C, 0x41, 0xC4, 0xF3, 0xF5, 0x05, 0xF3,  // .<A.....
                /* 1DD8 */  0xFF, 0x3F, 0xDF, 0x00, 0x2E, 0xA2, 0x1D, 0x6E,  // .?.....n
                /* 1DE0 */  0x50, 0x61, 0xCE, 0x37, 0x00, 0xCD, 0xFE, 0xFF,  // Pa.7....
                /* 1DE8 */  0xE7, 0x1B, 0x76, 0x92, 0x78, 0xBE, 0x01, 0x67,  // ..v.x..g
                /* 1DF0 */  0xFC, 0xA7, 0x8A, 0xCE, 0x37, 0x00, 0x7F, 0xFF,  // ....7...
                /* 1DF8 */  0xFF, 0xE7, 0x1B, 0xE0, 0x88, 0xF5, 0x7C, 0x03,  // ......|.
                /* 1E00 */  0xAE, 0x73, 0xC5, 0xD3, 0xCB, 0xA3, 0xCD, 0x9B,  // .s......
                /* 1E08 */  0x85, 0x01, 0xE3, 0x79, 0x18, 0x2F, 0x37, 0xD8,  // ...y./7.
                /* 1E10 */  0xC3, 0x20, 0xC0, 0xA6, 0xFF, 0xFF, 0xE9, 0x06,  // . ......
                /* 1E18 */  0x30, 0x77, 0x8F, 0x78, 0x18, 0x04, 0x38, 0xF4,  // 0w.x..8.
                /* 1E20 */  0xFF, 0x3F, 0x0C, 0x02, 0x2C, 0x3A, 0xDC, 0x04,  // .?..,:..
                /* 1E28 */  0x7B, 0x9A, 0xF1, 0xE5, 0xE1, 0x18, 0x02, 0xBE,  // {.......
                /* 1E30 */  0x0B, 0xC2, 0x3C, 0xDF, 0x00, 0x36, 0x14, 0xDA,  // ..<..6..
                /* 1E38 */  0xF4, 0xA9, 0xF1, 0xFF, 0x6F, 0xD4, 0xAA, 0x41,  // ....o..A
                /* 1E40 */  0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,  // ..e...S.
                /* 1E48 */  0x31, 0x63, 0x95, 0x9F, 0x06, 0x8A, 0xF4, 0x86,  // 1c......
                /* 1E50 */  0xD0, 0x21, 0xC1, 0x71, 0xDF, 0x09, 0x02, 0x71,  // .!.q...q
                /* 1E58 */  0xE8, 0xB7, 0x87, 0x40, 0x2C, 0xE6, 0x5D, 0x20,  // ...@,.] 
                /* 1E60 */  0x10, 0x8B, 0xD5, 0x01, 0xC2, 0x24, 0x1B, 0x01,  // .....$..
                /* 1E68 */  0x61, 0x52, 0x95, 0x80, 0x30, 0xF1, 0x6F, 0x07,  // aR..0.o.
                /* 1E70 */  0x81, 0x38, 0x82, 0x16, 0x10, 0x26, 0xDD, 0x0B,  // .8...&..
                /* 1E78 */  0x08, 0x0B, 0xB3, 0x52, 0x81, 0x38, 0x92, 0x1B,  // ...R.8..
                /* 1E80 */  0x10, 0x16, 0x65, 0x75, 0x02, 0x71, 0x38, 0x3B,  // ..eu.q8;
                /* 1E88 */  0x20, 0x2C, 0xFE, 0x73, 0x41, 0x20, 0x8E, 0xE9,  //  ,.sA ..
                /* 1E90 */  0x08, 0x84, 0x89, 0x7C, 0xF6, 0x08, 0xC4, 0x11,  // ...|....
                /* 1E98 */  0x2D, 0x41, 0xDC, 0x88, 0x8E, 0x12, 0x41, 0x04,  // -A....A.
                /* 1EA0 */  0x64, 0x21, 0x4F, 0x09, 0x01, 0x59, 0x16, 0x88,  // d!O..Y..
                /* 1EA8 */  0x80, 0x2C, 0x51, 0x15, 0x10, 0x13, 0x0C, 0xA2,  // .,Q.....
                /* 1EB0 */  0x01, 0x11, 0x59, 0x40, 0x2C, 0x0A, 0x88, 0x80,  // ..Y@,...
                /* 1EB8 */  0x1C, 0x4B, 0x17, 0x10, 0x0B, 0x09, 0xA2, 0x41,  // .K.....A
                /* 1EC0 */  0x92, 0x07, 0x83, 0x80, 0x1C, 0x1E, 0x44, 0x40,  // ......D@
                /* 1EC8 */  0x96, 0xF2, 0x54, 0x08, 0x44, 0x84, 0x81, 0x68,  // ..T.D..h
                /* 1ED0 */  0x38, 0xC4, 0x1A, 0x10, 0x93, 0x0C, 0xA2, 0x01,  // 8.......
                /* 1ED8 */  0x12, 0x6F, 0x40, 0x2C, 0x08, 0x88, 0x86, 0x48,  // .o@,...H
                /* 1EE0 */  0xBE, 0x36, 0x02, 0x72, 0x32, 0x10, 0x01, 0x39,  // .6.r2..9
                /* 1EE8 */  0x99, 0x3A, 0x20, 0x96, 0x13, 0x44, 0x40, 0x4E,  // .: ..D@N
                /* 1EF0 */  0x2C, 0x0F, 0x88, 0xE5, 0x07, 0x11, 0x90, 0x35,  // ,......5
                /* 1EF8 */  0xF8, 0x03, 0x62, 0x82, 0x40, 0x04, 0x64, 0x41,  // ..b.@.dA
                /* 1F00 */  0xCF, 0x05, 0x01, 0x59, 0x1E, 0x88, 0x80, 0x2C,  // ...Y...,
                /* 1F08 */  0xF4, 0xE5, 0x10, 0x88, 0xC8, 0x06, 0x11, 0x90,  // ........
                /* 1F10 */  0x65, 0xFC, 0x0E, 0x02, 0x11, 0x51, 0x20, 0x1A,  // e....Q .
                /* 1F18 */  0x34, 0x01, 0xA2, 0xA1, 0x81, 0x68, 0xE8, 0x47,  // 4....h.G
                /* 1F20 */  0x83, 0x80, 0x2C, 0xE1, 0xC1, 0x13, 0x88, 0x48,  // ..,....H
                /* 1F28 */  0x10, 0x39, 0x10, 0x0A, 0x22, 0x20, 0x4B, 0x7A,  // .9.." Kz
                /* 1F30 */  0xD9, 0x07, 0x22, 0x02, 0x41, 0x34, 0x70, 0xF2,  // ..".A4p.
                /* 1F38 */  0x62, 0x38, 0x70, 0x06, 0xA2, 0xC3, 0x01, 0x79,  // b8p....y
                /* 1F40 */  0x48, 0x04, 0x22, 0x01, 0x40, 0x04, 0xE4, 0x20,  // H.".@.. 
                /* 1F48 */  0xAF, 0x32, 0x01, 0xF9, 0xFF, 0x1F, 0x0B, 0x44,  // .2.....D
                /* 1F50 */  0x40, 0xCE, 0xF5, 0x7C, 0x38, 0x78, 0x06, 0x22,  // @..|8x."
                /* 1F58 */  0x20, 0xCB, 0xFD, 0x3F, 0x08, 0xC8, 0xDA, 0x41,  //  ..?...A
                /* 1F60 */  0x04, 0x64, 0x15, 0x7F, 0x8C, 0x40, 0x44, 0x12,  // .d...@D.
                /* 1F68 */  0x88, 0x80, 0xAC, 0xE9, 0x2F, 0x11, 0x88, 0x28,  // ..../..(
                /* 1F70 */  0x04, 0xD1, 0x01, 0x80, 0x3C, 0x25, 0x02, 0x11,  // ....<%..
                /* 1F78 */  0xC5, 0x20, 0x02, 0x72, 0x76, 0x20, 0x2A, 0xE4,  // . .rv *.
                /* 1F80 */  0x09, 0x22, 0x20, 0xEB, 0x78, 0x8A, 0x04, 0x22,  // ." .x.."
                /* 1F88 */  0xAA, 0x40, 0x04, 0xE4, 0x94, 0x40, 0x34, 0x33,  // .@...@43
                /* 1F90 */  0x10, 0x0D, 0xED, 0x16, 0x88, 0x29, 0x78, 0x6B,  // .....)xk
                /* 1F98 */  0x04, 0x22, 0x59, 0x40, 0x04, 0xE4, 0x60, 0x40,  // ."Y@..`@
                /* 1FA0 */  0x54, 0xA1, 0x5D, 0x20, 0x26, 0x17, 0x44, 0x40,  // T.] &.D@
                /* 1FA8 */  0x0E, 0x0E, 0x44, 0x55, 0xE8, 0x3D, 0x00, 0xD0,  // ..DU.=..
                /* 1FB0 */  0x0F, 0xC7, 0x03, 0x00, 0x03, 0xD1, 0xC0, 0xC8,  // ........
                /* 1FB8 */  0x6F, 0x45, 0x83, 0x26, 0x20, 0x02, 0x72, 0x54,  // oE.& .rT
                /* 1FC0 */  0x20, 0x9A, 0x1B, 0x88, 0x06, 0x78, 0xEC, 0x04,  //  ....x..
                /* 1FC8 */  0x22, 0x69, 0x40, 0x74, 0x50, 0x20, 0xAF, 0x31,  // "i@tP .1
                /* 1FD0 */  0x01, 0x39, 0x1A, 0x88, 0x8E, 0x19, 0xE4, 0x5B,  // .9.....[
                /* 1FD8 */  0x23, 0x20, 0x0B, 0x07, 0x11, 0x90, 0x95, 0x6B,  // # .....k
                /* 1FE0 */  0x06, 0x62, 0x31, 0x40, 0x74, 0x48, 0x20, 0x2F,  // .b1@tH /
                /* 1FE8 */  0x1E, 0x01, 0x59, 0x1D, 0x88, 0x0E, 0x07, 0x04,  // ..Y.....
                /* 1FF0 */  0x88, 0x66, 0x06, 0xA2, 0xEA, 0x45, 0x1F, 0x2A,  // .f...E.*
                /* 1FF8 */  0x28, 0x88, 0x06, 0x42, 0xFE, 0x27, 0x1A, 0x08,  // (..B.'..
                /* 2000 */  0x01, 0x11, 0x90, 0xB3, 0x3D, 0x9F, 0x02, 0x91,  // ....=...
                /* 2008 */  0xA0, 0x20, 0x3A, 0x18, 0x90, 0x17, 0x97, 0x80,  // . :.....
                /* 2010 */  0xAC, 0x1F, 0x44, 0x87, 0x0D, 0xF2, 0x3B, 0x39,  // ..D...;9
                /* 2018 */  0x78, 0x06, 0x22, 0x20, 0x8B, 0x7A, 0xE7, 0x08,  // x." .z..
                /* 2020 */  0xC8, 0x12, 0x41, 0x34, 0x78, 0x02, 0x44, 0x25,  // ..A4x.D%
                /* 2028 */  0x3C, 0x5C, 0x1E, 0x0C, 0x98, 0xF1, 0x83, 0x01,  // <\......
                /* 2030 */  0x05, 0xD1, 0x41, 0x84, 0x00, 0xD1, 0xA4, 0x40,  // ..A....@
                /* 2038 */  0x54, 0xF2, 0xDF, 0x4D, 0x03, 0x21, 0x20, 0x02,  // T..M.! .
                /* 2040 */  0xB2, 0x92, 0xF7, 0x4F, 0x20, 0xF2, 0xFF, 0x97,  // ...O ...
                /* 2048 */  0x05, 0x22, 0x20, 0xAB, 0xFC, 0xB6, 0x08, 0xC8,  // ." .....
                /* 2050 */  0x9A, 0x41, 0x04, 0x64, 0xD9, 0x6F, 0x38, 0x01,  // .A.d.o8.
                /* 2058 */  0x39, 0x03, 0x88, 0x80, 0xAC, 0xE6, 0x43, 0x13,  // 9.....C.
                /* 2060 */  0x88, 0x48, 0x03, 0x11, 0x90, 0x33, 0x02, 0xD1,  // .H...3..
                /* 2068 */  0xC0, 0x40, 0x34, 0xEF, 0x23, 0x2D, 0x10, 0x49,  // .@4.#-.I
                /* 2070 */  0x0F, 0xA2, 0x81, 0x92, 0x57, 0x97, 0x06, 0x44,  // ....W..D
                /* 2078 */  0x40, 0x04, 0xE4, 0xA4, 0x4F, 0xB4, 0x40, 0x24,  // @...O.@$
                /* 2080 */  0x36, 0x88, 0x80, 0x1C, 0xFB, 0x9D, 0x25, 0x20,  // 6.....% 
                /* 2088 */  0x8B, 0xF8, 0x95, 0xE9, 0x80, 0x40, 0xFC, 0x1F,  // .....@..
                /* 2090 */  0x10, 0x28, 0x88, 0x80, 0x1C, 0x12, 0x88, 0x46,  // .(.....F
                /* 2098 */  0x06, 0xA2, 0x81, 0x0B, 0x0C, 0x84, 0x82, 0x08,  // ........
                /* 20A0 */  0xC8, 0xE9, 0x13, 0x00, 0x31, 0x2D, 0x0D, 0x80,  // ....1-..
                /* 20A8 */  0x98, 0xA2, 0x0A, 0x40, 0x4C, 0x1F, 0x88, 0x06,  // ...@L...
                /* 20B0 */  0x45, 0x80, 0x68, 0x7A, 0x20, 0x9A, 0xBE, 0x03,  // E.hz ...
                /* 20B8 */  0x10, 0x93, 0x12, 0xE2, 0xC0, 0x42, 0x4B, 0x1C,  // .....BK.
                /* 20C0 */  0x58, 0x28, 0x88, 0x80, 0x2C, 0xAF, 0x05, 0x10,  // X(..,...
                /* 20C8 */  0x13, 0x0B, 0x22, 0x20, 0x87, 0x07, 0xA2, 0x52,  // .." ...R
                /* 20D0 */  0x62, 0x00, 0x31, 0x71, 0x39, 0x80, 0x98, 0x54,  // b.1q9..T
                /* 20D8 */  0x10, 0x01, 0x59, 0x69, 0x90, 0x03, 0x0A, 0x05,  // ..Yi....
                /* 20E0 */  0x11, 0x90, 0x45, 0x14, 0x01, 0x62, 0x8A, 0x40,  // ..E..b.@
                /* 20E8 */  0x04, 0xE4, 0x74, 0x40, 0x34, 0x2A, 0x10, 0x95,  // ..t@4*..
                /* 20F0 */  0x9D, 0xE4, 0x10, 0x40, 0x41, 0x04, 0xE4, 0x0C,  // ...@A...
                /* 20F8 */  0x4D, 0x80, 0x58, 0x22, 0x10, 0x01, 0x39, 0x51,  // M.X"..9Q
                /* 2100 */  0x15, 0x20, 0x96, 0x0F, 0x44, 0x40, 0x56, 0x9C,  // . ..D@V.
                /* 2108 */  0xE5, 0x70, 0x40, 0x41, 0x04, 0x64, 0x3D, 0x5D,  // .p@A.d=]
                /* 2110 */  0x0E, 0x13, 0x14, 0x44, 0x40, 0x4E, 0x0B, 0x44,  // ...D@N.D
                /* 2118 */  0xB3, 0x03, 0xD1, 0x2C, 0x61, 0x0E, 0x36, 0x14,  // ...,a.6.
                /* 2120 */  0x44, 0x07, 0x1E, 0x92, 0x06, 0x88, 0x65, 0x04,  // D.....e.
                /* 2128 */  0xD1, 0x20, 0x48, 0x1B, 0x20, 0x26, 0x1F, 0x44,  // . H. &.D
                /* 2130 */  0x03, 0x26, 0x71, 0x80, 0xD8, 0xFF, 0x5F, 0x17,  // .&q..._.
                /* 2138 */  0x88, 0x0E, 0x09, 0x04, 0x88, 0x06, 0x06, 0xA2,  // ........
                /* 2140 */  0x81, 0xEB, 0x00, 0xB1, 0xF8, 0x20, 0x3A, 0xCC,  // ..... :.
                /* 2148 */  0x90, 0x40, 0x87, 0x19, 0x0A, 0xA2, 0x83, 0x11,  // .@......
                /* 2150 */  0x01, 0xA2, 0x81, 0x81, 0x68, 0x80, 0x42, 0x40,  // ....h.B@
                /* 2158 */  0x2C, 0x0E, 0x88, 0x0E, 0x01, 0x24, 0xD1, 0x21,  // ,....$.!
                /* 2160 */  0x80, 0x82, 0xE8, 0x10, 0x40, 0x80, 0xA8, 0x94,  // ....@...
                /* 2168 */  0x46, 0x07, 0x0A, 0x5A, 0xE9, 0x40, 0x41, 0x41,  // F..Z.@AA
                /* 2170 */  0x74, 0x58, 0x20, 0x40, 0x34, 0x31, 0x10, 0x55,  // tX @41.U
                /* 2178 */  0x9F, 0xE9, 0x00, 0x42, 0x41, 0x04, 0x64, 0x59,  // ...BA.dY
                /* 2180 */  0x9D, 0x80, 0x98, 0x46, 0x10, 0x01, 0x59, 0x63,  // ...F..Yc
                /* 2188 */  0xA8, 0xC3, 0x0C, 0x05, 0x11, 0x90, 0x55, 0xA7,  // ......U.
                /* 2190 */  0x3A, 0x08, 0x50, 0x10, 0x01, 0x59, 0x55, 0x2B,  // :.P..YU+
                /* 2198 */  0x60, 0x0A, 0x22, 0x20, 0x67, 0x06, 0xA2, 0x0A,  // `." g...
                /* 21A0 */  0x62, 0x1D, 0x06, 0x28, 0x88, 0x0E, 0x03, 0x04,  // b..(....
                /* 21A8 */  0x88, 0xEA, 0xAD, 0x05, 0xC4, 0xD4, 0x83, 0x68,  // .......h
                /* 21B0 */  0x90, 0xA4, 0xD7, 0xC1, 0x85, 0x82, 0x08, 0xC8,  // ........
                /* 21B8 */  0xDA, 0x82, 0x01, 0x31, 0xA1, 0x20, 0x3A, 0x90,  // ...1. :.
                /* 21C0 */  0x10, 0x20, 0xAA, 0xA0, 0x18, 0x10, 0x4B, 0x03,  // . ....K.
                /* 21C8 */  0xA2, 0x83, 0x0A, 0x01, 0xA2, 0x32, 0x93, 0x1D,  // .....2..
                /* 21D0 */  0x42, 0x28, 0x88, 0x8E, 0x5A, 0x04, 0x88, 0x6A,  // B(..Z..j
                /* 21D8 */  0x69, 0x76, 0x20, 0xA0, 0xD1, 0x0E, 0x14, 0x14,  // iv .....
                /* 21E0 */  0x44, 0x40, 0x16, 0x98, 0xED, 0xA0, 0x43, 0x41,  // D@....CA
                /* 21E8 */  0x74, 0x08, 0x24, 0xDD, 0x80, 0x98, 0x1C, 0x10,  // t.$.....
                /* 21F0 */  0x01, 0x39, 0x1E, 0x10, 0x0D, 0x0B, 0x44, 0xC5,  // .9....D.
                /* 21F8 */  0x87, 0x1B, 0x38, 0x05, 0x11, 0x90, 0xA5, 0x95,  // ..8.....
                /* 2200 */  0x1B, 0x18, 0x05, 0xD1, 0x41, 0x84, 0x00, 0x51,  // ....A..Q
                /* 2208 */  0x11, 0xE9, 0x0E, 0x64, 0x14, 0x44, 0x40, 0x0E,  // ...d.D@.
                /* 2210 */  0x08, 0x44, 0x03, 0xC6, 0x03, 0x62, 0xFF, 0xFF,  // .D...b..
                /* 2218 */  0xB4, 0x20, 0x3A, 0x44, 0x90, 0x7A, 0x87, 0x08,  // . :D.z..
                /* 2220 */  0x0A, 0xA2, 0xC3, 0x07, 0xE9, 0x37, 0x38, 0x1A,  // .....78.
                /* 2228 */  0xF0, 0x90, 0x42, 0x41, 0x74, 0x48, 0x21, 0x40,  // ..BAtH!@
                /* 2230 */  0x34, 0x67, 0xC2, 0x83, 0x15, 0x05, 0xD1, 0xA0,  // 4g......
                /* 2238 */  0x49, 0xC3, 0x43, 0x0D, 0x8D, 0x78, 0xC0, 0xA1,  // I.C..x..
                /* 2240 */  0x19, 0x0F, 0x0A, 0x14, 0x44, 0x07, 0x1F, 0x02,  // ....D...
                /* 2248 */  0x44, 0x43, 0x03, 0xD1, 0xD0, 0x21, 0x0F, 0x00,  // DC...!..
                /* 2250 */  0xB4, 0x24, 0x10, 0x53, 0x90, 0x12, 0x88, 0xE9,  // .$.S....
                /* 2258 */  0x01, 0xD1, 0x01, 0x81, 0xC4, 0x3C, 0x20, 0x50,  // .....< P
                /* 2260 */  0x10, 0x1D, 0x10, 0x08, 0x10, 0x55, 0x50, 0xF3,  // .....UP.
                /* 2268 */  0xB0, 0x43, 0x7B, 0x1E, 0x76, 0x28, 0x88, 0x06,  // .C{.v(..
                /* 2270 */  0x4E, 0x80, 0x68, 0x56, 0x20, 0x2A, 0x3B, 0xE8,  // N.hV *;.
                /* 2278 */  0xA1, 0x81, 0x82, 0xE8, 0x58, 0x47, 0x8A, 0x02,  // ....XG..
                /* 2280 */  0xB1, 0x40, 0x20, 0x02, 0x72, 0xB4, 0xA6, 0x07,  // .@ .r...
                /* 2288 */  0x22, 0x0A, 0x22, 0x20, 0x0B, 0x8F, 0x7A, 0x50,  // "." ..zP
                /* 2290 */  0xA2, 0x20, 0x3A, 0x0C, 0x91, 0xAA, 0x87, 0x21,  // . :....!
                /* 2298 */  0x0A, 0xA2, 0x43, 0x07, 0x01, 0xA2, 0xF1, 0x81,  // ..C.....
                /* 22A0 */  0xA8, 0x98, 0xB0, 0x87, 0x1E, 0x0A, 0xA2, 0x03,  // ........
                /* 22A8 */  0x02, 0x49, 0x7B, 0x40, 0xA0, 0x20, 0x02, 0xB2,  // .I{@. ..
                /* 22B0 */  0xE8, 0xB8, 0x40, 0x2C, 0x02, 0x88, 0x80, 0x1C,  // ..@,....
                /* 22B8 */  0x22, 0x2F, 0x10, 0x8B, 0x04, 0xA2, 0x83, 0x09,  // "/......
                /* 22C0 */  0x79, 0x80, 0xEA, 0x30, 0x46, 0x40, 0x04, 0xE4,  // y..0F@..
                /* 22C8 */  0xA0, 0x89, 0x0F, 0x3E, 0x14, 0x44, 0x40, 0x8E,  // ...>.D@.
                /* 22D0 */  0x1E, 0xF9, 0x00, 0x46, 0x2B, 0x1F, 0x67, 0x69,  // ...F+.gi
                /* 22D8 */  0x67, 0x20, 0x26, 0x0E, 0x44, 0x07, 0x35, 0x52,  // g &.D.5R
                /* 22E0 */  0xFA, 0xA0, 0x46, 0x41, 0x34, 0x18, 0xD2, 0x7A,  // ..FA4..z
                /* 22E8 */  0x30, 0x14, 0x44, 0x40, 0x8E, 0x51, 0x1B, 0x88,  // 0.D@.Q..
                /* 22F0 */  0x65, 0x02, 0xD1, 0x81, 0x81, 0xE4, 0x3E, 0x30,  // e.....>0
                /* 22F8 */  0x50, 0x10, 0x1D, 0x46, 0x48, 0x70, 0x20, 0xF6,  // P..FHp .
                /* 2300 */  0xFF, 0x4F, 0x0C, 0xA2, 0x43, 0x04, 0x29, 0x0E,  // .O..C.).
                /* 2308 */  0xC4, 0x92, 0x80, 0xE8, 0xE0, 0x46, 0x92, 0x1F,  // .....F..
                /* 2310 */  0xDC, 0x28, 0x88, 0x80, 0x1C, 0x39, 0x3A, 0x10,  // .(...9:.
                /* 2318 */  0x13, 0x50, 0x1D, 0x88, 0xC5, 0x01, 0x11, 0x90,  // .P......
                /* 2320 */  0xC3, 0x01, 0x51, 0xA9, 0xD9, 0x0F, 0x5F, 0x14,  // ..Q..._.
                /* 2328 */  0x44, 0x87, 0x00, 0x12, 0x1E, 0x88, 0xA5, 0x00,  // D.......
                /* 2330 */  0x11, 0x90, 0x53, 0x94, 0x1F, 0x14, 0x05, 0xD1,  // ..S.....
                /* 2338 */  0x01, 0x90, 0xB4, 0x3F, 0x00, 0x52, 0x10, 0x01,  // ...?.R..
                /* 2340 */  0x59, 0x77, 0x7C, 0x60, 0x0A, 0xA2, 0x43, 0x0E,  // Yw|`..C.
                /* 2348 */  0xC9, 0x7F, 0xC8, 0xA1, 0x20, 0x02, 0xF2, 0x4F,  // .... ..O
                /* 2350 */  0xE2, 0xBB, 0x32, 0x90, 0xFF, 0x00, 0x41, 0x0E,  // ..2...A.
                /* 2358 */  0x84, 0x18, 0x00, 0x62, 0x29, 0x40, 0x34, 0x10,  // ...b)@4.
                /* 2360 */  0xA2, 0x00, 0x88, 0x65, 0x02, 0xD1, 0x81, 0x88,  // ...e....
                /* 2368 */  0x48, 0x00, 0x62, 0x51, 0x41, 0x34, 0x70, 0x62,  // H.bQA4pb
                /* 2370 */  0x01, 0x88, 0x25, 0x00, 0x11, 0x90, 0x13, 0x68,  // ..%....h
                /* 2378 */  0x00, 0x62, 0x79, 0x40, 0x74, 0x68, 0x21, 0x22,  // .by@th!"
                /* 2380 */  0x80, 0x58, 0x3C, 0x10, 0x1D, 0x22, 0x88, 0x09,  // .X<.."..
                /* 2388 */  0x20, 0x16, 0x16, 0x44, 0x87, 0x0B, 0xE2, 0x02,  //  ..D....
                /* 2390 */  0x88, 0x29, 0x90, 0x01, 0xC4, 0xB2, 0x80, 0xE8,  // .)......
                /* 2398 */  0x60, 0x47, 0x80, 0x68, 0x30, 0x1B, 0x40, 0x2C,  // `G.h0.@,
                /* 23A0 */  0x26, 0x88, 0x0E, 0x93, 0xC4, 0x07, 0x10, 0xCB,  // &.......
                /* 23A8 */  0x0E, 0xA2, 0x81, 0x11, 0x21, 0x40, 0x2C, 0x12,  // ....!@,.
                /* 23B0 */  0x88, 0x0E, 0x05, 0xC4, 0x08, 0x10, 0x0B, 0x08,  // ........
                /* 23B8 */  0xA2, 0x43, 0x09, 0x71, 0x02, 0xC4, 0xD2, 0x82,  // .C.q....
                /* 23C0 */  0xE8, 0x50, 0x42, 0xA4, 0x0C, 0x80, 0x82, 0x08,  // .PB.....
                /* 23C8 */  0xC8, 0xF9, 0xB5, 0x00, 0x31, 0x35, 0x5E, 0x06,  // ....15^.
                /* 23D0 */  0x4A, 0x41, 0x74, 0xD8, 0x20, 0x40, 0x34, 0xAB,  // JAt. @4.
                /* 23D8 */  0x19, 0x20, 0x96, 0x1C, 0x44, 0x40, 0x4E, 0xA2,  // . ..D@N.
                /* 23E0 */  0x06, 0x88, 0xE5, 0x02, 0x11, 0x30, 0x91, 0x03,  // .....0..
                /* 23E8 */  0x4C, 0x41, 0x74, 0xB8, 0x24, 0x7A, 0x80, 0xD8,  // LAt.$z..
                /* 23F0 */  0xFF, 0x3F, 0x3E, 0x88, 0x0E, 0x2B, 0xC4, 0x0F,  // .?>..+..
                /* 23F8 */  0x10, 0xD3, 0x22, 0x08, 0x88, 0xA9, 0x52, 0x04,  // .."...R.
                /* 2400 */  0xC4, 0x34, 0x82, 0x08, 0x98, 0x00, 0xD1, 0xFC,  // .4......
                /* 2408 */  0x40, 0x54, 0x83, 0x25, 0x20, 0x26, 0x08, 0x44,  // @T.% &.D
                /* 2410 */  0x07, 0x2B, 0xA2, 0x09, 0x88, 0xA9, 0x03, 0x11,  // .+......
                /* 2418 */  0x90, 0x75, 0x8A, 0x02, 0x62, 0xAA, 0x41, 0x04,  // .u..b.A.
                /* 2420 */  0x64, 0xED, 0xAA, 0x80, 0x58, 0x10, 0x10, 0x0D,  // d...X...
                /* 2428 */  0x8C, 0xB8, 0x1A, 0x18, 0x05, 0xD1, 0x41, 0x81,  // ......A.
                /* 2430 */  0xD8, 0x02, 0x62, 0x79, 0x41, 0x04, 0x64, 0xFD,  // ..byA.d.
                /* 2438 */  0xBA, 0x80, 0x58, 0x1A, 0x10, 0x01, 0x39, 0x93,  // ..X...9.
                /* 2440 */  0xB0, 0xC1, 0x53, 0x10, 0x0D, 0x92, 0x18, 0x1B,  // ..S.....
                /* 2448 */  0x24, 0x05, 0xD1, 0x01, 0x82, 0x28, 0x3B, 0x34,  // $....(;4
                /* 2450 */  0x50, 0x10, 0x1D, 0x0C, 0x88, 0xB4, 0x83, 0x01,  // P.......
                /* 2458 */  0x05, 0xD1, 0x01, 0x92, 0x58, 0x03, 0x62, 0x72,  // ....X.br
                /* 2460 */  0x41, 0x74, 0xF0, 0x21, 0x40, 0x54, 0x83, 0x36,  // At.!@T.6
                /* 2468 */  0x20, 0x26, 0xC1, 0xDB, 0x20, 0x29, 0x88, 0x0E,  //  &.. )..
                /* 2470 */  0x2C, 0xC4, 0x1C, 0x10, 0x93, 0x08, 0xA2, 0x03,  // ,.......
                /* 2478 */  0x0B, 0x01, 0xA2, 0xF1, 0x81, 0xA8, 0x04, 0x79,  // .......y
                /* 2480 */  0xC0, 0x14, 0x44, 0x87, 0x41, 0x02, 0x44, 0xA3,  // ..D.A.D.
                /* 2488 */  0x02, 0x51, 0xE1, 0xF6, 0x80, 0x58, 0x0C, 0x10,  // .Q...X..
                /* 2490 */  0x0D, 0x96, 0xF8, 0x03, 0x62, 0xB1, 0x40, 0x04,  // ....b.@.
                /* 2498 */  0xE4, 0x54, 0x02, 0x81, 0x58, 0x46, 0x10, 0x1D,  // .T..XF..
                /* 24A0 */  0x74, 0x88, 0xC2, 0x83, 0x04, 0x75, 0x08, 0xC4,  // t....u..
                /* 24A8 */  0xF2, 0x80, 0x08, 0xC8, 0xE9, 0x80, 0x68, 0x46,  // ......hF
                /* 24B0 */  0x8B, 0x40, 0x2C, 0x31, 0x88, 0x06, 0x4E, 0x34,  // .@,1..N4
                /* 24B8 */  0x0E, 0x9C, 0x82, 0x08, 0xC8, 0x81, 0x44, 0x02,  // ......D.
                /* 24C0 */  0x53, 0x10, 0x0D, 0x8A, 0x98, 0x1C, 0x14, 0x05,  // S.......
                /* 24C8 */  0xD1, 0x81, 0x93, 0xB8, 0x04, 0x62, 0xB9, 0x41,  // .....b.A
                /* 24D0 */  0x34, 0x60, 0x22, 0x13, 0x88, 0xFD, 0xFF, 0x45,  // 4`"....E
                /* 24D8 */  0xD8, 0x04, 0x62, 0x42, 0x7C, 0x02, 0x31, 0x59,  // ..bB|.1Y
                /* 24E0 */  0x20, 0x3A, 0xB8, 0x10, 0x20, 0x1A, 0x19, 0x88,  //  :.. ...
                /* 24E8 */  0x86, 0x36, 0x0A, 0xC4, 0x24, 0x28, 0x05, 0x62,  // .6..$(.b
                /* 24F0 */  0x22, 0xA4, 0x02, 0x31, 0x45, 0x20, 0x3A, 0x74,  // "..1E :t
                /* 24F8 */  0x12, 0xAB, 0x40, 0x4C, 0x1E, 0x88, 0x0E, 0xBA,  // ..@L....
                /* 2500 */  0xC4, 0x2B, 0x10, 0x93, 0x0D, 0xA2, 0x41, 0x13,  // .+....A.
                /* 2508 */  0xB3, 0x83, 0xA6, 0x20, 0x3A, 0x08, 0x10, 0xB5,  // ... :...
                /* 2510 */  0x07, 0x01, 0x0A, 0xA2, 0x03, 0x10, 0x91, 0x0B,  // ........
                /* 2518 */  0xC4, 0xD4, 0x82, 0xE8, 0x28, 0x4D, 0xEC, 0x02,  // ....(M..
                /* 2520 */  0x31, 0xE9, 0x20, 0x3A, 0x14, 0x13, 0xBF, 0x07,  // 1. :....
                /* 2528 */  0x08, 0x0A, 0xA2, 0x23, 0x34, 0x31, 0x7C, 0x50,  // ...#41|P
                /* 2530 */  0xA0, 0x20, 0x1A, 0x2C, 0x71, 0x3C, 0x58, 0x0A,  // . .,q<X.
                /* 2538 */  0xA2, 0x41, 0x10, 0xCF, 0x47, 0x14, 0x0A, 0xC2,  // .A..G...
                /* 2540 */  0x45, 0x83, 0xB0, 0xF8, 0xAE, 0x41, 0x98, 0x78,  // E....A.x
                /* 2548 */  0xD9, 0x20, 0xD4, 0xF6, 0x00, 0xE8, 0x23, 0xE6,  // . ....#.
                /* 2550 */  0x11, 0x8C, 0x19, 0x07, 0xA1, 0xCA, 0x41, 0x98,  // ......A.
                /* 2558 */  0x6C, 0xEB, 0x03, 0xA6, 0x20, 0x5C, 0x3B, 0x08,  // l... \;.
                /* 2560 */  0xFB, 0xFF, 0x03                                 // ...
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (Zero) {}
                ElseIf ((Arg0 == 0xE2))
                {
                    Return (EVT1) /* \GSA1.EVT1 */
                }

                Return (Zero)
            }

            Name (SAA0, Buffer (0x10)
            {
                /* 0000 */  0xF0, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00   // ........
            })
            Name (CCAA, Zero)
            Name (CCAB, Zero)
            Name (CCAC, Zero)
            Name (ECD0, Zero)
            Name (ECD1, Zero)
            Name (ECD2, Zero)
            Method (WCAA, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCAA == Zero)) {}
                }
                ElseIf ((CCAA != Zero)) {}
                CCAA = Arg0
            }

            Method (WED0, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD0 == Zero)) {}
                }
                ElseIf ((ECD0 != Zero)) {}
                ECD0 = Arg0
            }

            Method (WED1, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD1 == Zero)) {}
                }
                ElseIf ((ECD1 != Zero)) {}
                ECD1 = Arg0
            }

            Method (WED2, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD2 == Zero)) {}
                }
                ElseIf ((ECD2 != Zero)) {}
                ECD2 = Arg0
            }

            Method (GETA, 1, NotSerialized)
            {
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WQAA, 1, NotSerialized)
            {
                Return (GETA (Arg0))
            }

            Method (SETA, 2, NotSerialized)
            {
                SAA0 = Arg1
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (SETA (Arg0, Arg1))
            }

            Method (WMBB, 3, Serialized)
            {
                If (Zero) {}
                ElseIf ((Arg1 == One))
                {
                    Return (GGG1 ())
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Return (GGG2 ())
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Return (GGG3 ())
                }
                ElseIf ((Arg1 == 0x04))
                {
                    Return (GGG4 ())
                }
                ElseIf ((Arg1 == 0x05))
                {
                    Return (GGG5 ())
                }
                ElseIf ((Arg1 == 0x06))
                {
                    Return (GGG6 ())
                }
                ElseIf ((Arg1 == 0x07))
                {
                    Return (GGG7 ())
                }
                ElseIf ((Arg1 == 0x08))
                {
                    Return (GGG8 ())
                }
                ElseIf ((Arg1 == 0x0A))
                {
                    Return (GGG9 (Arg2))
                }
                ElseIf ((Arg1 == 0x0D))
                {
                    CreateWordField (Arg2, Zero, GGGI)
                    CreateWordField (Arg2, 0x02, GGGJ)
                    CreateWordField (Arg2, 0x04, GGGK)
                    GGGH (GGGI, GGGJ, GGGK)
                }
                ElseIf ((Arg1 == 0x0E))
                {
                    \GSA1.MPTS (ToInteger (Arg2))
                }
                ElseIf ((Arg1 == 0x0F))
                {
                    \GSA1.MWAK (ToInteger (Arg2))
                }
                ElseIf (((Arg1 >= 0x64) && (Arg1 <= 0x6C)))
                {
                    CreateByteField (Arg2, Zero, SMDP)
                    CreateByteField (Arg2, One, SMDK)
                    CreateByteField (Arg2, 0x02, SMDL)
                    CreateByteField (Arg2, 0x03, SMDM)
                    CreateWordField (Arg2, 0x04, SMDN)
                    CreateByteField (Arg2, 0x03, SMDO)
                    If ((Arg1 == 0x64))
                    {
                        Local0 = SMBB ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x65))
                    {
                        Local0 = SMM0 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x66))
                    {
                        Local0 = SMM1 (SMDP, SMDK)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x67))
                    {
                        Local0 = SMM2 (SMDP, SMDK, SMDL, SMDM)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x68))
                    {
                        Local0 = SMM3 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x69))
                    {
                        Local0 = SMM4 (SMDP, SMDK, SMDL, SMDN)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6A))
                    {
                        Local0 = SMM5 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                }
                ElseIf (((Arg1 >= 0x6E) && (Arg1 <= 0x75)))
                {
                    CreateWordField (Arg2, Zero, PID0)
                    CreateByteField (Arg2, 0x02, PID1)
                    CreateWordField (Arg2, 0x02, PID2)
                    CreateDWordField (Arg2, 0x02, PID3)
                    If ((Arg1 == 0x6E))
                    {
                        Local0 = PIO6 (PID0, Zero)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6F))
                    {
                        PIO7 (PID0, Zero, PID1)
                    }
                    ElseIf ((Arg1 == 0x70))
                    {
                        Local0 = PIO6 (PID0, One)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x71))
                    {
                        PIO7 (PID0, One, PID2)
                    }
                    ElseIf ((Arg1 == 0x72))
                    {
                        Local0 = PIO6 (PID0, 0x02)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x73))
                    {
                        PIO7 (PID0, 0x02, PID3)
                    }
                }
                ElseIf ((Arg1 == 0x76)) {}
                ElseIf ((Arg1 == 0x77)) {}
                ElseIf (((Arg1 >= 0x78) && (Arg1 <= 0x80)))
                {
                    CreateByteField (Arg2, Zero, PCE0)
                    CreateByteField (Arg2, One, PCE1)
                    CreateByteField (Arg2, 0x02, PCE2)
                    CreateWordField (Arg2, 0x04, PCE3)
                    CreateByteField (Arg2, 0x06, PCE6)
                    CreateWordField (Arg2, 0x06, PCE4)
                    CreateDWordField (Arg2, 0x06, PCE5)
                    If ((Arg1 == 0x78))
                    {
                        Local0 = PCI4 ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x79))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, Zero))
                    }
                    ElseIf ((Arg1 == 0x7A))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, Zero, PCE6)
                    }
                    ElseIf ((Arg1 == 0x7B))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, One))
                    }
                    ElseIf ((Arg1 == 0x7C))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, One, PCE4)
                    }
                    ElseIf ((Arg1 == 0x7D))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, 0x02))
                    }
                    ElseIf ((Arg1 == 0x7E))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, 0x02, PCE5)
                    }

                    CreateByteField (Arg2, 0x06, PCE7)
                    CreateByteField (Arg2, 0x07, PCE8)
                    CreateDWordField (Arg2, 0x08, PCE9)
                    If ((Arg1 == 0x7F))
                    {
                        Return (PCI5 (PCE0, PCE1, PCE2, PCE3, PCE7, PCE8))
                    }
                    ElseIf ((Arg1 == 0x80))
                    {
                        PCI6 (PCE0, PCE1, PCE2, PCE3, PCE7, PCE8, PCE9)
                    }
                }
                ElseIf (((Arg1 >= 0x82) && (Arg1 <= 0x89)))
                {
                    CreateDWordField (Arg2, Zero, MED0)
                    CreateByteField (Arg2, 0x04, MED1)
                    CreateWordField (Arg2, 0x04, MED2)
                    CreateDWordField (Arg2, 0x04, MED3)
                    CreateByteField (Arg2, 0x04, MED4)
                    CreateByteField (Arg2, 0x05, MED5)
                    CreateDWordField (Arg2, 0x06, MED6)
                    If ((Arg1 == 0x82))
                    {
                        Return (MEM4 (MED0, Zero))
                    }
                    ElseIf ((Arg1 == 0x83))
                    {
                        MEM5 (MED0, Zero, MED1)
                    }
                    ElseIf ((Arg1 == 0x84))
                    {
                        Return (MEM4 (MED0, One))
                    }
                    ElseIf ((Arg1 == 0x85))
                    {
                        MEM5 (MED0, One, MED2)
                    }
                    ElseIf ((Arg1 == 0x86))
                    {
                        Return (MEM4 (MED0, 0x02))
                    }
                    ElseIf ((Arg1 == 0x87))
                    {
                        MEM5 (MED0, 0x02, MED3)
                    }
                    ElseIf ((Arg1 == 0x88))
                    {
                        Return (MEM0 (MED0, MED4, MED5))
                    }
                    ElseIf ((Arg1 == 0x89))
                    {
                        MEM1 (MED0, MED4, MED5, MED6)
                    }
                }
                ElseIf ((Arg1 == 0xBE))
                {
                    EVT2 (Arg2)
                }
                ElseIf ((Arg1 == 0x0122))
                {
                    Return (ZRC9 ())
                }
                ElseIf ((Arg1 == 0x0123))
                {
                    Return (ZRCY (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0124))
                {
                    ZRCZ (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x0125))
                {
                    Return (ZRCD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0126))
                {
                    ZRCE (DerefOf (Arg2 [Zero]))
                }
                ElseIf ((Arg1 == 0x0127))
                {
                    Return (ZRCW (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0128))
                {
                    ZRCX (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x0129))
                {
                    Return (ZRCA (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x012A))
                {
                    ZRC7 (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]), DerefOf (
                        Arg2 [0x02]))
                    Return (ToHexString (ZRCL, Local1))
                }
                ElseIf ((Arg1 == 0x012B))
                {
                    ZRCM (DerefOf (Arg2 [Zero]), DerefOf (Arg2 [One]))
                }
                ElseIf ((Arg1 == 0x012C))
                {
                    Return (DIMC ())
                }
                ElseIf ((Arg1 == 0x0130))
                {
                    Return (DIMD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0136))
                {
                    Return (DIM1 (DerefOf (Arg2 [Zero])))
                }
            }

            Method (WMBC, 3, NotSerialized)
            {
            }
        }
    }

    Scope (\_SB)
    {
    }

    Scope (\)
    {
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xDC263018, 0x000100CD)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                        One)
                }
                Else
                {
                    Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                        One)
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            Local2 = M038 (Local1)
        }
        ElseIf ((Local0 == 0x02))
        {
            Local2 = M038 ((Local1 + 0x08))
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
                Else
                {
                    M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                    0x04), Zero, One))
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = One
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IPTS (Arg0)
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }

        If ((M280 != Zero))
        {
            \_SB.M284 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IWAK (Arg0)
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.VGA_, DeviceObj)
    External (_SB_.PCI0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)

    Scope (\_SB.PCI0.VGA)
    {
        Name (M207, Buffer (0xFF) {})
        Name (M208, Buffer (0x03) {})
        Name (M204, One)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                ATC0 ()
            }

            If ((Arg0 == One))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            Return (M207) /* \_SB_.PCI0.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = 0x6F
            M207 = \_SB.ALIB (Zero, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, One, M203)
            M157 = 0x0A
            M161 = One
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & One)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = One
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, Zero, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = One
            M197 = 0x03
            M206 = One
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = One
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, Zero, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, Zero, One)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == Zero))
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == Zero))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN0))
            {
                \_SB.PCI0.VGA.AFN0 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN0))
            {
                \_SB.PCI0.GFX0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN1))
            {
                \_SB.PCI0.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN1))
            {
                \_SB.PCI0.GFX0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN2))
            {
                \_SB.PCI0.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN2))
            {
                \_SB.PCI0.GFX0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN3))
            {
                \_SB.PCI0.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN3))
            {
                \_SB.PCI0.GFX0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN4))
            {
                \_SB.PCI0.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN4))
            {
                \_SB.PCI0.GFX0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN5))
            {
                \_SB.PCI0.VGA.AFN5 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN5))
            {
                \_SB.PCI0.GFX0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN6))
            {
                \_SB.PCI0.VGA.AFN6 ()
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN6))
            {
                \_SB.PCI0.GFX0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFN7))
            {
                \_SB.PCI0.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN7))
            {
                \_SB.PCI0.GFX0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFN8))
        {
            \_SB.PCI0.GFX0.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == Zero))
        {
            If (CondRefOf (\_SB.PCI0.VGA.AFNC))
            {
                \_SB.PCI0.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == One))
        {
            If (CondRefOf (\_SB.PCI0.GFX0.VGA.AFNC))
            {
                \_SB.PCI0.GFX0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GFX0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I", 0x00000002)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0200)
        {
            /* 0000 */  0x00, 0x6C, 0x6C, 0x6C, 0x00, 0x02, 0x00, 0x00,  // .lll....
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x01, 0x03,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x07, 0x01,  // ........
            /* 0040 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A011)
                CreateWordField (Arg1, 0x02, A012)
                CreateDWordField (Arg1, 0x04, A013)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A014)
                A014 = A011 /* \_SB_.ALIB.A011 */
                CreateWordField (Local0, 0x02, A015)
                A015 = A012 /* \_SB_.ALIB.A012 */
                CreateDWordField (Local0, 0x04, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                A016 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A016 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A017 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Return (A018 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A086 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A087 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A014)
            CreateByteField (Local7, 0x02, A026)
            CreateByteField (Local7, 0x03, A088)
            A014 = 0x04
            A026 = 0x00
            A088 = Local1
            Return (Local7)
        }

        Method (A086, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A078 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A078 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A078 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A078 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A078 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A078 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A078 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A078 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A078 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A078 (Arg1))
            }
        }

        Method (A087, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A079 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A079 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A079 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A079 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A079 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A079 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A079 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A079 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A079 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A079 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A017, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A008 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A014)
            A014 = 0x03
            CreateByteField (Local7, 0x02, A026)
            A026 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A026 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A026 = 0x01
                Return (Local7)
            }

            A027 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A028 ()
            A026 = 0x02
            Return (Local7)
        }

        Method (A009, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A028 ()
        }

        Method (A003, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A007, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A019, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A029 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A028 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A030, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A027, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A031 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A032 (Local0)
                        A033 (Local0, Local1)
                    }
                    Else
                    {
                        A033 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A034, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A035 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A036, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A037 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A028, 0, NotSerialized)
        {
            A036 ()
            A034 ()
            If ((AP02 != AP01))
            {
                A010 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                \_SB.A038 (AP02)
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A035 (Local0)
                Local2 = A039 (Local0)
                If ((Local1 != Local2))
                {
                    A040 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A040 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                \_SB.A038 (AP02)
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                \_SB.A038 (AP02)
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A040, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A041 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A041 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A041 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 (Arg1))
            }
        }

        Method (A039, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A042 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A042 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A042 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 ())
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A043 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A043 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A043 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 ())
            }
        }

        Method (A037, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A045 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A045 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A045 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A045 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A045 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A045 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A045 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A045 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A045 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A045 ())
            }
        }

        Method (A033, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A046 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A046 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A046 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A046 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A046 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A046 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A046 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A046 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A046 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A046 (Arg1))
            }
        }

        Method (A031, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A047 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A047 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A047 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A047 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A047 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A047 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A047 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A047 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A047 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A047 (Arg1))
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A048 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A048 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A048 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A048 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A048 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR1.ABR5.A048 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR1.ABR6.A048 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR1.ABR7.A048 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A048 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A048 ())
            }
        }

        OperationRegion (A109, SystemMemory, (AGRB + 0x000C4000), 0x1000)
        Field (A109, ByteAcc, NoLock, Preserve)
        {
            Offset (0x124), 
                ,   22, 
            A110,   1, 
            A111,   4
        }

        OperationRegion (A112, SystemMemory, (AGRB + 0x000C5000), 0x1000)
        Field (A112, ByteAcc, NoLock, Preserve)
        {
            Offset (0x170), 
                ,   14, 
            A113,   1
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0x60), 
            A094,   32, 
            Offset (0x7C), 
            A095,   1, 
            Offset (0xB8), 
            A096,   32, 
            Offset (0xC8), 
            A097,   32
        }

        BankField (A093, A096, 0x13000000, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A093, A096, 0x13000010, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A093, A096, 0x13000020, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A093, A096, 0x13000024, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        BankField (A093, A096, 0x13000028, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A093, A096, 0x1300002C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A093, A096, 0x13000030, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A093, A096, 0x13000034, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A105,   32
        }

        BankField (A093, A096, 0xC0014000, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A106,   1
        }

        OperationRegion (A107, SystemMemory, (AGRB + 0x8000), 0x1000)
        Field (A107, DWordAcc, NoLock, Preserve)
        {
            A108,   32
        }

        OperationRegion (A114, SystemMemory, AGRB, 0x1000)
        Field (A114, ByteAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            A115,   32
        }

        BankField (A114, A115, 0x01110004, DWordAcc, NoLock, Preserve)
        {
            Offset (0xE4), 
                ,   12, 
            A116,   1
        }

        BankField (A114, A115, 0x01318070, DWordAcc, NoLock, Preserve)
        {
            Offset (0xE4), 
            A117,   1
        }

        BankField (A114, A115, 0x01410129, DWordAcc, NoLock, Preserve)
        {
            Offset (0xE4), 
            A118,   16
        }

        Method (A038, 1, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (\_SB.ADAT [0x01])
            }

            If ((Arg0 == 0x02))
            {
                Local0 = DerefOf (\_SB.ADAT [0x02])
            }

            If ((Arg0 == 0x03))
            {
                Local0 = DerefOf (\_SB.ADAT [0x03])
            }

            If ((Local0 > 0xF7))
            {
                Local0 = 0xF7
            }

            Local2 = (0x0271 * ((Local1 = (0xF7 - Local0)) + 0x01))
            Divide (Local2 *= 0x04, 0x64, Local3, Local4)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A119)
            CreateDWordField (Local7, 0x04, A120)
            CreateDWordField (Local7, 0x08, A121)
            CreateDWordField (Local7, 0x0C, A122)
            CreateDWordField (Local7, 0x10, A123)
            CreateDWordField (Local7, 0x14, A124)
            A119 = Local4
            A125 (0x3A, Local7)
        }

        Method (A126, 3, NotSerialized)
        {
        }

        Method (A082, 3, NotSerialized)
        {
            If (((Arg1 >= 0x08) && (Arg2 >= 0x08)))
            {
                If ((Arg0 == 0x01))
                {
                    A117 = 0x01
                }
                Else
                {
                    If ((Arg1 > Arg2))
                    {
                        Local1 = (Arg1 - Arg2)
                        Local2 = (Arg2 - 0x08)
                    }
                    Else
                    {
                        Local1 = (Arg2 - Arg1)
                        Local2 = (Arg1 - 0x08)
                    }

                    Local1++
                    Local1 = (0x01 << Local1)
                    Local1--
                    Local1 <<= Local2
                    Local0 = (A118 & ~Local1)
                    If ((Local0 == 0x00))
                    {
                        A116 = 0x00
                    }
                    Else
                    {
                        A116 = 0x01
                    }
                }
            }
        }

        Method (A084, 3, NotSerialized)
        {
            If (((Arg1 >= 0x08) && (Arg2 >= 0x08)))
            {
                If ((Arg0 == 0x01))
                {
                    A116 = 0x01
                }
                ElseIf (((A118 & 0xFF) == 0x00))
                {
                    A117 = 0x00
                }
            }
        }

        Method (A125, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A127)
            CreateDWordField (Arg1, 0x04, A128)
            CreateDWordField (Arg1, 0x08, A129)
            CreateDWordField (Arg1, 0x0C, A130)
            CreateDWordField (Arg1, 0x10, A131)
            CreateDWordField (Arg1, 0x14, A132)
            A099 = 0x00
            While ((A099 != 0x00)) {}
            A100 = A127 /* \_SB_.A125.A127 */
            A101 = A128 /* \_SB_.A125.A128 */
            A102 = A129 /* \_SB_.A125.A129 */
            A103 = A130 /* \_SB_.A125.A130 */
            A104 = A131 /* \_SB_.A125.A131 */
            A105 = A132 /* \_SB_.A125.A132 */
            A098 = Arg0
            While ((A099 == 0x00)) {}
        }

        Method (A051, 1, NotSerialized)
        {
        }

        Method (A005, 1, NotSerialized)
        {
            Local0 = A113 /* \_SB_.A113 */
            If ((Arg0 == 0x00))
            {
                A113 = 0x01
            }
            Else
            {
                A113 = 0x00
            }

            Return (Local0)
        }

        Method (A004, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A119)
                CreateDWordField (Local7, 0x04, A120)
                CreateDWordField (Local7, 0x08, A121)
                CreateDWordField (Local7, 0x0C, A122)
                CreateDWordField (Local7, 0x10, A123)
                CreateDWordField (Local7, 0x14, A124)
                A119 = 0x0801
                A125 (0x60, Local7)
            }
        }

        Method (A006, 1, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A119)
            CreateDWordField (Local7, 0x04, A120)
            CreateDWordField (Local7, 0x08, A121)
            CreateDWordField (Local7, 0x0C, A122)
            CreateDWordField (Local7, 0x10, A123)
            CreateDWordField (Local7, 0x14, A124)
            If (((A106 == 0x01) || (A095 == 0x01)))
            {
                If ((Arg0 == 0x00))
                {
                    A125 (0x86, Local7)
                }
            }
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A133)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A119)
            CreateDWordField (Local7, 0x04, A120)
            CreateDWordField (Local7, 0x08, A121)
            CreateDWordField (Local7, 0x0C, A122)
            CreateDWordField (Local7, 0x10, A123)
            CreateDWordField (Local7, 0x14, A124)
            Local0 = 0x02
            While ((Local0 < A133))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A119 = 0x00
                A120 = 0x00
                A121 = 0x00
                A122 = 0x00
                A123 = 0x00
                A124 = 0x00
                If ((Local1 == 0x00))
                {
                    A119 = Local2
                    A125 (0x69, Local7)
                }

                If ((Local1 == 0x01))
                {
                    A121 = Local2
                    A125 (0x6C, Local7)
                }

                If ((Local1 == 0x02))
                {
                    A119 = Local2
                    A125 (0x6C, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A119 = Local2
                    A125 (0x7C, Local7)
                }

                If ((Local1 == 0x04))
                {
                    Local3 = DerefOf (Arg0 [Local0])
                    Local0++
                    Local3 |= (DerefOf (Arg0 [Local0]) << 0x08)
                    Local0++
                    Local3 |= (DerefOf (Arg0 [Local0]) << 0x10)
                    Local0++
                    Local3 |= (DerefOf (Arg0 [Local0]) << 0x18)
                    Local0++
                    A119 = Local2
                    A120 = Local3
                    A125 (0x6A, Local7)
                }
            }
        }

        OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            A089,   8, 
            A090,   8
        }

        IndexField (A089, A090, ByteAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            A091,   32
        }

        OperationRegion (ACFG, SystemIO, A091, 0x08)
        Field (ACFG, DWordAcc, NoLock, Preserve)
        {
            A092,   32
        }

        BankField (ACFG, A092, 0x80000068, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            A059,   2
        }

        Name (ABSM, 0x00)
        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                ABSM = A059 /* \_SB_.A059 */
                A059 = 0x00
            }
            Else
            {
                A059 = ABSM /* \_SB_.ABSM */
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Name (WRBS, 0x0150)
            Name (CORE, 0x0140)
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR0.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR0.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR0.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR0.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR0.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR0.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR0.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR0.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR0.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR1.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR1.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR1.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR1.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR1.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR1.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR1.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR1.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR1.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR2.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR2.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR2.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR2.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR2.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR2.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR2.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR2.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR2.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR3.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR3.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR3.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR3.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR3.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR3.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR3.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR3.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR3.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR0.ABR4.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR0.ABR4.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR0.ABR4.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR0.ABR4.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR0.ABR4.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR0.ABR4.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR0.ABR4.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR0.ABR4.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR0.ABR4.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Name (WRBS, 0x0151)
            Name (CORE, 0x0141)
            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR5.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR5.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR5.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR5.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR5.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR5.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR5.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR5.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR5.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR5.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR5.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR5.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR5.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR6.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR6.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR6.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR6.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR6.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR6.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR6.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR6.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR6.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR6.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR6.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR6.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR6.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR7.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR7.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR7.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR7.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR7.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR7.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR7.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR7.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR7.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR7.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR7.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR7.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR7.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR8.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR8.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR8.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR8.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR8.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR8.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR8.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR8.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR8.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A072, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A072, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A063,   8, 
                    A064,   8, 
                    Offset (0x68), 
                    A059,   2, 
                        ,   2, 
                    A054,   1, 
                    A060,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A061,   1, 
                    Offset (0x88), 
                    A071,   4, 
                        ,   1, 
                    A068,   1, 
                    Offset (0xE0), 
                    A073,   32
                }

                BankField (A072, A073, 0xA1, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   12, 
                    A055,   1
                }

                BankField (A072, A073, 0xA2, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                        ,   13, 
                    A070,   1
                }

                BankField (A072, A073, 0xA4, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A066,   1, 
                    A067,   1, 
                        ,   11, 
                    A062,   2, 
                        ,   14, 
                    A069,   1
                }

                BankField (A072, A073, 0xA5, DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A053,   6
                }

                OperationRegion (A074, SystemMemory, AGRB, 0x1000)
                Field (A074, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xE0), 
                    A075,   32
                }

                BankField (A074, A075, ((^WRBS << 0x10) | (0x0800 + (0x0100 * DerefOf (
                    \_SB.ADAT [(AB12 + 0x0B)])))), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A076,   1
                }

                BankField (A074, A075, ((^CORE << 0x10) | 0x0129), DWordAcc, NoLock, Preserve)
                {
                    Offset (0xE4), 
                    A077,   16
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A049, 0, NotSerialized)
                {
                    Local0 = A030 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A044, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A050, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A043, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A050 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A049 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A042, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A045, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A041, 1, NotSerialized)
                {
                    AB02 = Arg0
                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x01)
                    }

                    A052 (Arg0)
                    If (((A053 >= 0x10) && (A054 == 0x00)))
                    {
                        If ((AB10 != 0x00))
                        {
                            A055 = 0x00
                        }
                        Else
                        {
                            A055 = 0x01
                        }

                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x00)
                        }
                        Else
                        {
                            A057 (0x00)
                        }

                        Name (A058, 0x00)
                        A058 = A059 /* \_SB_.AWR1.ABR9.A059 */
                        A059 = 0x00
                        Local0 = 0x01
                        While (Local0)
                        {
                            A060 = 0x01
                            While ((A060 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            While ((A061 == 0x01))
                            {
                                Sleep (0x01)
                            }

                            If ((Arg0 == 0x01))
                            {
                                If ((A062 == 0x00))
                                {
                                    Break
                                }
                            }
                            Else
                            {
                                Break
                            }
                        }

                        A059 = A058 /* \_SB_.AWR1.ABR9.A041.A058 */
                        If ((AB03 == 0x01))
                        {
                            \_SB.A056 (0x01)
                        }
                        Else
                        {
                            A057 (0x01)
                        }
                    }

                    If ((AB03 == 0x01))
                    {
                        \_SB.A051 (0x00)
                    }
                }

                Method (A046, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A047, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A063) && (Local0 <= A064)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A048, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A052, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02))
                    {
                        A066 = 0x01
                        A067 = 0x00
                    }

                    If ((Arg0 >= 0x03))
                    {
                        A066 = 0x01
                        A067 = 0x01
                    }

                    If ((Arg0 == 0x01))
                    {
                        A068 = 0x01
                        A066 = 0x00
                        A067 = 0x00
                        A069 = 0x00
                        If ((AB04 == 0x01))
                        {
                            A070 = 0x01
                        }
                    }
                    Else
                    {
                        A068 = 0x00
                        A069 = 0x01
                        A070 = 0x00
                    }

                    A071 = Arg0
                }

                Method (A085, 2, NotSerialized)
                {
                    If ((A080 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A080 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A080 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A057, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A080 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A080 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A085 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A080 (Local0, (Local1 + 0x10))
                                A081 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A081 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A081, 3, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A080, 2, Serialized)
                {
                    Local0 = (AGRB + (A063 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A080.ADRR */
                }

                Method (A078, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A065 (Arg0))
                }

                Method (A079, 1, NotSerialized)
                {
                    Name (A058, 0x00)
                    A058 = A059 /* \_SB_.AWR1.ABR9.A059 */
                    If ((Arg0 == 0x01))
                    {
                        A054 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A057 (0x00)
                        Local0 = A080 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A081 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A080 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A081 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A054 = 0x01
                        Local0 = 0x05
                    }

                    A059 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            If ((AB0E > 0x01))
                            {
                                AB05 = AB0E /* \_SB_.AWR1.ABR9.AB0E */
                                A028 ()
                            }

                            \_SB.A082 (0x01, AB06, AB07)
                            A083 (0x01)
                            \_SB.A084 (0x01, AB06, AB07)
                            A076 = 0x00
                            Local0 = 0x03
                        }

                        If ((Local0 == 0x03))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x3C))
                            {
                                If ((A053 > 0x04))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x04
                            }
                            Else
                            {
                                Local0 = 0x05
                            }
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x00
                            Local2 = 0x00
                            While ((Local1 < 0x50))
                            {
                                If (((A053 >= 0x10) && (A053 <= 0x13)))
                                {
                                    Local2 = 0x01
                                    Break
                                }

                                Sleep (0x01)
                                Local1++
                            }

                            If ((Local2 == 0x01))
                            {
                                Local0 = 0x07
                            }
                            ElseIf ((AB04 == 0x01))
                            {
                                Local0 = 0x05
                            }
                            Else
                            {
                                Local0 = 0x06
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            AB04 = 0x01
                            AB05 = 0x01
                            A052 (0x01)
                            If (CondRefOf (\_SB.ALIC, Local6))
                            {
                                Local1 = ((AB0C << 0x03) | AB0D) /* \_SB_.AWR1.ABR9.AB0D */
                                \_SB.ALIC (Local1, 0x00)
                                Sleep (0x02)
                                \_SB.ALIC (Local1, 0x01)
                                Local0 = 0x03
                                Continue
                            }

                            Local0 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            A080 (0x00, 0x00)
                            A076 = 0x01
                            \_SB.A082 (0x00, AB06, AB07)
                            A083 (0x00)
                            \_SB.A084 (0x00, AB06, AB07)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x07))
                        {
                            Local2 = 0x01
                            Local0 = 0x08
                        }
                    }

                    If ((AB04 == 0x00))
                    {
                        AB05 = 0x00
                    }

                    If (((AB0E > 0x01) || (AP05 == 0x01)))
                    {
                        If ((DerefOf (\_SB.ADAT [0x00]) > 0x01))
                        {
                            If ((Arg0 != 0x00))
                            {
                                A028 ()
                            }
                        }
                    }

                    A059 = A058 /* \_SB_.AWR1.ABR9.A079.A058 */
                    If ((A058 != 0x00))
                    {
                        A057 (0x01)
                    }

                    Return (Local2)
                }

                Method (A083, 1, NotSerialized)
                {
                    If ((AB06 > AB07))
                    {
                        Local0 = (AB06 - AB07) /* \_SB_.AWR1.ABR9.AB07 */
                    }
                    Else
                    {
                        Local0 = (AB07 - AB06) /* \_SB_.AWR1.ABR9.AB06 */
                    }

                    Local0++
                    Local0 = (0x01 << Local0)
                    Local0--
                    Local0 <<= AB08 /* \_SB_.AWR1.ABR9.AB08 */
                    If ((Arg0 == 0x01))
                    {
                        A077 |= Local0
                    }
                    Else
                    {
                        Local1 = (A077 & ~Local0)
                        If ((Local1 == 0x00))
                        {
                            A077 &= ~Local0
                        }
                    }
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                A003 (Arg0)
                A004 (0x00)
                A002 = A005 (0x00)
                A006 (0x00)
            }
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                A007 (Arg0)
                If ((A002 == 0x00))
                {
                    A005 (0x01)
                }
            }
        }

        Method (A008, 0, NotSerialized)
        {
            A009 ()
        }

        Method (A010, 2, NotSerialized)
        {
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06) {}
        Processor (C001, 0x01, 0x00000810, 0x06) {}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.VGA_, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 3 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + One), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (Zero, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x86)
                M112 (Local0, Zero)
                M111 (Local0, One)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, One)
                M000 (0x87)
                HPOK = Zero
                Sleep (0x14)
                M201 = One
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    M023 (Zero, M091, M090)
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (Zero, M091, M090)
                        If (Local5)
                        {
                            M026 (Zero, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = Zero
                            If ((M025 (Zero, M091, M090) == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), One)
                                M111 (M049 (M133, 0x18), One)
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x88)
                    Local1 = M019 (M095, M094, M093, Zero)
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (Zero, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, Zero)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = Zero
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != Zero))
                {
                    Local0 = M019 (Zero, M091, M090, 0x54)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, Zero, 0x10)
                    M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x89)
            }
            Else
            {
                M000 (0x8A)
                M201 = Zero
                \_SB.ALIB (0x06, Local7)
                M000 (0x8B)
                M111 (M049 (M133, 0x17), Zero)
                M111 (M049 (M133, 0x18), Zero)
                M112 (Local0, Zero)
                Sleep (0x0A)
                M111 (Local0, Zero)
                M023 (Zero, M091, M090)
                Local1 = M019 (M095, M094, M093, Zero)
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (Zero, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, Zero)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (Zero, M091, M090, 0x54)
                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, Zero)
                If (((HPOK == One) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + One), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049 (M133, 0x17), One)
            }
            Else
            {
                M111 (M049 (M133, 0x17), Zero)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049 (M133, 0x18), One)
            }
            Else
            {
                M111 (M049 (M133, 0x18), Zero)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, 0x08, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M187 = M049 (M133, 0xBF)
            Local1 = Zero
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, Zero, 0x10)
            If (Local0)
            {
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (Zero, Arg0, Zero)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 85
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FE500010
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

/**** ACPI subtable terminates early - may be older version (dump table) */

Raw Table Data: Length 56 (0x38)

    0000: 54 50 4D 32 38 00 00 00 04 85 41 4C 41 53 4B 41  // TPM28.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 49 20  // A M I.......AMI 
    0020: 00 00 00 00 00 00 00 00 10 00 50 FE 00 00 00 00  // ..........P.....
    0030: 02 00 00 00 00 00 00 00                          // ........


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 BF 41 4C 41 53 4B 41  // UEFIB.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 02 00 00 00 20 20 20 20  // A M I.......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 00 17 DC 00 00  // ...26...........
    0040: 00 00                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000FE84
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A8
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 65156 (0xFE84)

    0000: 56 46 43 54 84 FE 00 00 01 A8 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 00  // A M I.......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 01 00 00 00 00 00 00 00 02 10 74 98 00 00 00 00  // ..........t.....
    0060: 01 00 00 00 00 FE 00 00 55 AA 7F E9 29 02 00 00  // ........U...)...
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: CC 01 00 00 00 00 49 42 4D 0A B8 9F 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 21 02 00 00 00 00 00 00  // 20......!.......
    00B0: A8 01 00 00 00 00 00 00 30 35 2F 32 33 2F 31 39  // ........05/23/19
    00C0: 2C 30 34 3A 32 30 3A 30 31 00 00 00 E9 42 03 00  // ,04:20:01....B..
    00D0: E9 51 03 00 00 00 80 00 00 00 00 00 00 00 00 00  // .Q..............
    00E0: 00 00 00 00 00 00 00 00 31 30 39 2D 43 39 35 30  // ........109-C950
    00F0: 31 30 2D 30 30 36 00 43 41 52 52 49 5A 4F 00 50  // 10-006.CARRIZO.P
    0100: 43 49 5F 45 58 50 52 45 53 53 00 44 44 52 34 00  // CI_EXPRESS.DDR4.
    0110: 0D 0A 42 52 49 53 54 4F 4C 20 41 4D 34 20 47 65  // ..BRISTOL AM4 Ge
    0120: 6E 65 72 69 63 20 56 42 49 4F 53 20 20 20 20 20  // neric VBIOS     
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0150: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 0D 0A  //               ..
    0160: 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39 38 38 2D  // ... ...(C) 1988-
    0170: 32 30 31 30 2C 20 41 64 76 61 6E 63 65 64 20 4D  // 2010, Advanced M
    0180: 69 63 72 6F 20 44 65 76 69 63 65 73 2C 20 49 6E  // icro Devices, In
    0190: 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D  // c..ATOMBIOSBK-AM
    01A0: 44 20 56 45 52 30 31 35 2E 30 34 38 2E 30 30 30  // D VER015.048.000
    01B0: 2E 30 37 33 2E 30 30 30 30 30 30 00 42 72 69 73  // .073.000000.Bris
    01C0: 74 6F 6C 41 4D 34 47 65 00 31 37 38 36 35 39 38  // tolAM4Ge.1786598
    01D0: 6F 00 34 36 32 33 33 31 20 20 00 20 20 20 20 20  // o.462331  .     
    01E0: 20 20 20 00 41 4D 44 5F 43 41 52 52 49 5A 4F 5F  //    .AMD_CARRIZO_
    01F0: 42 52 49 53 54 4F 4C 5F 41 4D 34 5F 47 45 4E 45  // BRISTOL_AM4_GENE
    0200: 52 49 43 5C 63 6F 6E 66 69 67 2E 68 00 00 00 90  // RIC\config.h....
    0210: 24 00 01 01 41 54 4F 4D 00 C0 4D 03 54 01 F1 01  // $...ATOM..M.T...
    0220: A8 00 80 03 00 00 00 00 02 10 02 10 CC 01 80 A4  // ................
    0230: 26 A5 A0 00 50 43 49 52 02 10 74 98 00 00 18 00  // &...PCIR..t.....
    0240: 00 00 00 03 7F 00 30 0F 00 80 00 00 41 4D 44 20  // ......0.....AMD 
    0250: 41 54 4F 4D 42 49 4F 53 00 9E 44 8B A9 00 00 00  // ATOMBIOS..D.....
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 00 00 00 00 56 1E 0E 1F E8 B0 32  // .........V.....2
    0290: 81 4D 50 00 20 1F 5E 1E 06 66 50 66 51 66 52 66  // .MP. .^..fPfQfRf
    02A0: 53 66 55 66 56 66 57 0E 1F A3 BC 01 8C 0E B0 01  // SfUfVfW.........
    02B0: B2 20 E8 C0 39 0B C0 75 14 A2 02 00 66 5F 66 5E  // . ..9..u....f_f^
    02C0: 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB E8 C5 3A  // f]f[fZfYfX.....:
    02D0: E8 A1 38 32 D2 89 16 BE 01 A1 BC 01 66 C1 C0 10  // ..82........f...
    02E0: A1 B0 01 E8 F5 04 E8 24 05 E8 D0 04 E8 99 06 E8  // .......$........
    02F0: 69 03 E8 4B 32 F7 45 50 00 20 75 13 E8 F9 2F 0B  // i..K2.EP. u.../.
    0300: C0 74 0C E8 49 00 E8 69 64 E8 C5 04 E8 C8 64 E8  // .t..I..id.....d.
    0310: B9 00 B4 80 E8 92 38 8A C7 66 C1 E0 10 8A E3 B0  // ......8..f......
    0320: 14 66 50 BB 08 10 E8 0B 3A A8 01 66 58 74 02 B0  // .fP.....:..fXt..
    0330: 20 66 A3 B8 9F E8 52 04 E8 DC 04 E8 7A 3A 66 5F  //  f....R.....z:f_
    0340: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB 2E  // f^f]f[fZfYfX....
    0350: 8B 1E B0 01 83 3E 5F 03 00 75 04 89 1E 5D 03 1E  // .....>_..u...]..
    0360: 2E 8E 1E 55 03 9C FA 66 C7 06 08 01 65 F0 00 F0  // ...U...f....e...
    0370: C7 06 40 00 80 03 89 1E 42 00 C7 06 B4 01 80 03  // ..@.....B.......
    0380: 89 1E B6 01 C7 06 7C 00 A8 6C 89 1E 7E 00 C7 06  // ......|..l..~...
    0390: 0C 01 BB 70 89 1E 0E 01 C7 06 A8 04 D0 66 89 1E  // ...p.........f..
    03A0: AA 04 2E 8E 1E 5D 03 8B C3 A3 D2 66 A3 E2 66 A3  // .....].....f..f.
    03B0: F4 66 9D 1F C3 50 4D 49 44 80 03 96 53 00 00 00  // .f...PMID...S...
    03C0: A0 00 B0 00 B8 00 C0 00 00 00 00 BB 00 10 E8 63  // ...............c
    03D0: 39 66 C1 E8 10 A3 D2 01 BB 0B 10 E8 56 39 8D 3E  // 9f..........V9.>
    03E0: A8 01 66 89 45 18 C3 00 E8 AA 39 E8 58 02 75 1B  // ..f.E.....9.X.u.
    03F0: 2E 3A 26 CA 01 75 05 E8 47 00 EB 11 80 FC 4F 75  // .:&..u..G.....Ou
    0400: 05 E8 F0 4E EB 07 E8 63 56 EB 02 B4 01 E8 A8 39  // ...N...cV......9
    0410: CF E8 81 39 E8 2F 02 75 05 E8 25 00 EB 02 B4 01  // ...9./.u..%.....
    0420: E8 95 39 CB E8 6E 39 E8 1C 02 75 0F 80 FC 4F 75  // ..9..n9...u...Ou
    0430: 05 E8 C0 4E EB 07 E8 33 56 EB 02 B4 01 E8 78 39  // ...N...3V.....x9
    0440: CB 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66  // ...fPfQfRfSfUfVf
    0450: 57 0E 1F 3C 04 75 23 BB 0B 10 E8 D7 38 8D 36 A6  // W..<.u#.....8.6.
    0460: 00 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04  // ..<..0.....^..F.
    0470: 66 C1 E8 10 89 46 00 E9 AA 01 3C 05 75 18 E8 53  // f....F....<.u..S
    0480: 03 E8 F0 36 8B EC 89 56 10 89 46 00 66 C1 E8 10  // ...6...V..F.f...
    0490: 89 46 04 E9 8E 01 3C 06 75 39 E8 45 03 66 D1 E0  // .F....<.u9.E.f..
    04A0: 8B EC 89 46 14 BB 02 10 E8 89 38 88 46 18 E8 35  // ...F......8.F..5
    04B0: 03 66 0B C0 0F 84 64 01 66 89 46 0C BB 06 10 E8  // .f....d.f.F.....
    04C0: 72 38 33 C0 66 89 46 00 2E 8B 16 D2 01 89 56 10  // r83.f.F.......V.
    04D0: E9 51 01 3C 0B 75 24 0A DB 75 11 B9 80 00 BB 02  // .Q.<.u$..u......
    04E0: 00 8B EC 89 5E 0C 89 4E 14 E9 38 01 8A C7 E8 4B  // ....^..N..8....K
    04F0: 01 E8 CA 11 0F 84 24 01 E9 29 01 3C 17 75 27 E8  // ......$..).<.u'.
    0500: D7 07 74 06 E8 26 10 E8 20 1C E8 10 09 E8 A1 11  // ..t..&.. .......
    0510: 33 C9 50 24 03 0A C8 58 66 C1 E8 10 0A E8 8B EC  // 3.P$...Xf.......
    0520: 89 4E 14 E9 FE 00 3C 18 75 6D 0A FF 75 18 E8 D4  // .N....<.um..u...
    0530: 06 8B EC 89 46 0C 66 C1 E8 10 89 46 14 E8 2A 0A  // ....F.f....F..*.
    0540: 89 4E 10 E9 DE 00 80 FF 0F 74 0E 23 C9 0F 84 CB  // .N.......t.#....
    0550: 00 E8 2C 07 E8 82 07 75 2D BB 00 1C E8 FC 37 66  // ..,....u-.....7f
    0560: 0B C0 0F 84 B6 00 E8 B4 08 0B C9 0F 84 AD 00 BE  // ................
    0570: 00 1C E8 B8 02 0F 84 A3 00 BE 00 1C B0 40 E8 54  // .............@.T
    0580: 03 E8 81 06 EB 09 E8 B0 07 E8 02 1C E8 9C 07 8B  // ................
    0590: EC 89 46 0C E9 8D 00 3C 19 75 09 E8 64 07 E8 F4  // ..F....<.u..d...
    05A0: 1B E9 80 00 3C 82 75 2C 80 FB 01 75 0D 8B EC BE  // ....<.u,...u....
    05B0: 0B 06 89 76 00 8C 4E 10 EB 6A 80 FB 05 75 15 0A  // ...v..N..j...u..
    05C0: FF 75 0A E8 B8 04 8B EC 89 46 14 EB 57 E8 74 04  // .u.......F..W.t.
    05D0: 74 42 EB 50 3C 8E 75 12 80 FF 01 74 08 80 FF 02  // tB.P<.u....t....
    05E0: 75 32 80 C1 02 E8 FC 04 EB 3A 3C 8F 75 26 80 FF  // u2.......:<.u&..
    05F0: 05 75 05 E8 87 07 EB 2C 80 FF 07 75 0A E8 8B 07  // .u.....,...u....
    0600: 8B EC 88 5E 0C EB 1D 80 FF 85 75 08 E8 6E 07 E8  // ...^......u..n..
    0610: 6E 1B EB 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46  // n......F.......F
    0620: 19 01 EB 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66  // ....2....f.f_f^f
    0630: 5D 66 5B 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8  // ]f[fZfYfX...Q...
    0640: 01 00 D3 E0 59 C3 50 32 C0 53 BB 15 10 E8 E4 36  // ....Y.P2.S.....6
    0650: 5B 3C FF 74 04 24 03 0A C0 58 C3 E8 8F 08 F7 C1  // [<.t.$...X......
    0660: 02 00 74 0E 06 0E 07 8D 3E 0B 06 B8 02 00 E8 2C  // ..t.....>......,
    0670: 07 07 C3 00 00 00 00 07 00 08 08 08 00 00 00 00  // ................
    0680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0690: 00 00 00 80 FB 01 75 04 E8 16 00 C3 80 FB 02 75  // ......u........u
    06A0: 04 E8 5F 00 C3 80 FB 1B 75 04 E8 61 00 C3 0C 01  // .._.....u..a....
    06B0: C3 56 51 8A C1 BE F5 06 E8 8E 00 8A F8 B8 08 4E  // .VQ............N
    06C0: B3 01 B1 01 E8 12 06 75 02 32 C9 CD 15 59 3D 00  // .......u.2...Y=.
    06D0: 4E 75 2C 33 C0 33 D2 F6 C3 01 74 02 0C 02 F6 C3  // Nu,3.3....t.....
    06E0: 02 74 02 0C 01 F6 C3 40 74 03 80 CA 01 81 E3 88  // .t.....@t.......
    06F0: 00 0B C3 8B D9 23 D8 74 06 8B C8 24 00 5E C3 0C  // .....#.t...$.^..
    0700: 01 5E C3 B8 08 4E B3 02 CD 15 3D 00 4E C3 06 57  // .^...N....=.N..W
    0710: 56 57 66 33 DB 8B DF 66 33 C9 0E 59 66 C1 E1 04  // VWf3...f3..Yf...
    0720: 66 03 CB BB 1B 00 B8 08 4E CD 15 5E 3D 00 4E 75  // f.......N..^=.Nu
    0730: 14 B9 20 00 66 26 8B 05 66 89 04 83 C6 04 83 C7  // .. .f&..f.......
    0740: 04 E2 F1 33 C0 5E 5F 07 C3 51 B9 08 00 D0 E8 73  // ...3.^_..Q.....s
    0750: 03 2E 0A 2C 46 FE C9 75 F4 8A C5 59 C3 02 01 04  // ...,F..u...Y....
    0760: 08 20 10 40 80 00 50 51 B0 B6 E6 43 B0 33 E6 42  // . .@..PQ...C.3.B
    0770: B0 05 E6 42 E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8  // ...B.a.....a....
    0780: 00 E8 A6 2F E6 61 59 58 C3 00 1E 56 0E 1F 80 3E  // .../.aYX...V...>
    0790: 02 00 80 76 05 C6 06 02 00 80 8A 0E 02 00 C1 E1  // ...v............
    07A0: 09 FC C6 06 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB  // ....!..3.2......
    07B0: F6 D4 FE C4 88 26 21 00 5E 1F C3 00 E8 07 2E 75  // .....&!.^......u
    07C0: 03 E8 3C 30 E8 97 2E E8 14 2E E8 3D 2B E8 5D 0D  // ..<0.......=+.].
    07D0: C3 B0 01 C3 BB 01 00 E8 9A 29 C3 BB 01 00 E8 9D  // .........)......
    07E0: 29 C3 E8 D3 2F C3 53 BB 04 00 E8 9B 29 24 06 3C  // ).../.S.....)$.<
    07F0: 04 75 10 BB 05 00 E8 8F 29 66 0B C0 74 05 66 33  // .u......)f..t.f3
    0800: C0 EB 08 BB 04 00 E8 7F 29 33 C0 5B C3 E8 80 2F  // ........)3.[.../
    0810: BB 0A 00 E8 68 29 C3 BB 0A 00 E8 57 29 66 8B C8  // ....h).....W)f..
    0820: E8 6D 2F BB 0A 00 66 2B C1 E8 52 29 C3 E8 29 00  // .m/...f+..R)..).
    0830: 0B C9 74 22 E8 62 07 E8 7C 18 66 51 66 8B C8 BB  // ..t".b..|.fQf...
    0840: 07 00 E8 2F 29 66 25 00 FE 00 00 66 0B C1 E8 2D  // .../)f%....f...-
    0850: 29 66 59 0C 01 C3 32 C0 C3 E8 0F 04 0B C9 75 49  // )fY...2.......uI
    0860: E8 07 07 E8 02 19 75 12 8B D1 8B CB E8 89 2A 23  // ......u.......*#
    0870: C2 74 07 E8 8B 2A 33 D2 EB 2C E8 ED 06 57 E8 F6  // .t...*3..,...W..
    0880: 2C 8B 45 30 5F 0B C0 75 09 33 D2 E8 6A 2A 8B C8  // ,.E0_..u.3..j*..
    0890: EB 0B 33 D2 23 C8 75 05 E8 5D 2A 8B C8 EB 07 33  // ..3.#.u..]*....3
    08A0: D2 E8 54 2A 8B C8 E8 D7 03 0B D1 E8 BC 06 23 CA  // ..T*..........#.
    08B0: 66 C1 E6 10 33 F6 E8 1B 0C 74 15 E8 52 0D 85 C1  // f...3....t..R...
    08C0: 74 F4 51 E8 BB 13 59 75 ED E8 44 0D 33 C8 EB E6  // t.Q...Yu..D.3...
    08D0: 66 C1 EE 10 C3 A8 10 75 5A E8 EC 17 66 C1 E6 10  // f......uZ...f...
    08E0: 33 F6 E8 EF 0B 74 24 E8 BF 0B 74 0B E8 66 0D 24  // 3....t$...t..f.$
    08F0: 03 3C 03 75 ED EB 0A E8 5B 0D A8 01 74 E4 E8 E1  // .<.u....[...t...
    0900: 07 E8 43 19 B5 00 E8 53 0D EB D7 E8 84 01 32 C9  // ..C....S......2.
    0910: 33 F6 E8 03 0C E8 AC 18 E8 7C 2D FE C1 38 C1 72  // 3........|-..8.r
    0920: F1 66 C1 EE 10 E8 99 17 A8 20 75 57 A8 40 75 03  // .f....... uW.@u.
    0930: E8 E5 1E E8 80 17 0A C0 75 19 32 C9 33 F6 E8 D7  // ........u.2.3...
    0940: 0B 0B F6 74 05 B5 01 E8 83 1F E8 4A 2D FE C1 38  // ...t.......J-..8
    0950: C1 72 EB 33 F6 E8 71 0B 74 26 E8 D8 0C E8 96 27  // .r.3..q.t&.....'
    0960: 75 14 E8 26 04 0A DB 74 0D E8 76 07 E8 D8 18 B5  // u..&...t..v.....
    0970: 00 E8 E8 0C EB DF E8 B0 18 B5 01 E8 DE 0C EB D5  // ................
    0980: E8 1C 01 C3 E8 71 29 C3 E8 9F 17 33 C9 33 D2 E8  // .....q)....3.3..
    0990: EE 02 66 33 D2 66 33 C0 E8 F9 0C E8 5D 00 B1 FF  // ..f3.f3.....]...
    09A0: E8 A1 00 33 F6 E8 2C 0B 74 10 E8 88 0C E8 42 27  // ...3..,.t.....B'
    09B0: 74 03 E8 0A 19 E8 37 19 EB EB E8 A0 17 74 02 B3  // t.....7......t..
    09C0: 01 E8 8A 02 32 C9 E8 39 03 E8 03 2C E8 29 29 0B  // ....2..9...,.)).
    09D0: C0 C3 E8 58 0B E8 52 17 66 33 C0 66 BA 00 F0 00  // ...X..R.f3.f....
    09E0: F0 E8 30 02 51 B1 01 E8 09 03 59 33 F6 E8 E4 0A  // ..0.Q.....Y3....
    09F0: 74 05 E8 CA 18 EB F6 E8 2E 1E C3 B8 02 00 E8 B5  // t...............
    0A00: 0A 74 40 B1 07 E8 CF 24 E8 E7 0C A8 04 75 12 E8  // .t@....$.....u..
    0A10: A2 30 83 3D 00 75 0A E8 DE 28 83 E0 FD E8 E1 28  // .0.=.u...(.....(
    0A20: C3 66 BA FF FF FB FF 66 B8 00 00 04 00 E8 64 0C  // .f.....f......d.
    0A30: E8 E5 0E E8 E5 2F 8A C8 BB 04 00 E8 36 27 8A E1  // ...../......6'..
    0A40: E8 3B 27 C3 E8 4B 27 74 34 38 E1 76 04 8A CC EB  // .;'..K't48.v....
    0A50: 06 38 C1 73 02 8A C8 BB 02 00 E8 17 27 8A E1 E8  // .8.s........'...
    0A60: 1C 27 BB 02 00 E8 0C 27 66 C1 E8 18 A8 20 75 08  // .'.....'f.... u.
    0A70: B1 04 E8 62 24 0C 01 C3 E8 21 17 0C 01 C3 51 E8  // ...b$....!....Q.
    0A80: 10 27 74 0C 8A CC BB 02 00 E8 E8 26 8A C4 8A E1  // .'t........&....
    0A90: 59 C3 33 F6 E8 32 0A 74 05 E8 0A 17 EB F6 C3 33  // Y.3..2.t.......3
    0AA0: F6 E8 25 0A 74 05 E8 0C 17 EB F6 C3 E8 F4 2C 75  // ..%.t.........,u
    0AB0: 1B 80 F9 01 75 17 33 F6 E8 0E 0A 74 0C 51 E8 68  // ....u.3....t.Q.h
    0AC0: 17 B5 01 E8 96 0B 59 EB EF E8 D3 FF C3 E8 C2 FF  // ......Y.........
    0AD0: 33 F6 E8 F4 09 74 0C 51 E8 E4 17 B5 00 E8 7C 0B  // 3....t.Q......|.
    0AE0: 59 EB EF C3 B8 02 00 E8 CC 09 74 03 E8 E8 23 C3  // Y.........t...#.
    0AF0: E8 B2 1D 8B C8 66 C1 E8 10 8B D0 C3 8A C3 24 80  // .....f........$.
    0B00: E8 C5 15 32 C9 B5 10 E8 54 1D E8 8A 2B FE C1 38  // ...2....T...+..8
    0B10: C1 72 F2 C3 E8 3E 15 3B C1 7C 3A 8B C1 E8 7E 15  // .r...>.;.|:...~.
    0B20: E8 7A 1F 8B C8 51 E8 AE 15 E8 72 15 59 E8 6D 1F  // .z...Q....r.Y.m.
    0B30: 3B C8 72 02 8B C1 8D 5C 04 E8 A2 31 32 C9 B5 0F  // ;.r....\...12...
    0B40: E8 1B 1D E8 51 2B FE C1 38 C1 72 F2 8D 5C 04 E8  // ....Q+..8.r..\..
    0B50: 09 32 0B C0 C3 33 C0 C3 52 E8 9C 00 8A C2 8B D1  // .2...3..R.......
    0B60: 66 C1 E2 10 8A D0 32 C0 B9 00 02 E8 0E 1F 66 C1  // f.....2.......f.
    0B70: EA 10 8B CA 5A E8 80 00 E8 E0 31 66 C1 E8 02 0A  // ....Z.....1f....
    0B80: F6 75 04 66 C1 E8 02 67 26 88 07 66 C1 E8 0A 67  // .u.f...g&..f...g
    0B90: 26 88 47 01 66 C1 E8 0A 67 26 88 47 02 66 83 C7  // &.G.f...g&.G.f..
    0BA0: 04 83 C3 04 E2 D2 C3 51 E8 4D 00 53 67 26 8A 47  // .......Q.M.Sg&.G
    0BB0: 02 66 C1 E0 0A 67 26 8A 47 01 66 C1 E0 0A 67 26  // .f...g&.G.f...g&
    0BC0: 8A 07 66 C1 E0 02 0A F6 75 04 66 C1 E0 02 E8 F5  // ..f.....u.f.....
    0BD0: 30 66 83 C7 04 83 C3 04 E2 D2 5B 59 8A C2 8B D1  // 0f........[Y....
    0BE0: 66 C1 E2 10 8A D0 B9 00 03 53 E8 8F 1E 5B E8 A6  // f........S...[..
    0BF0: 2A FE C1 38 C1 72 F2 C3 BB 00 18 33 C0 8A C2 C1  // *..8.r.....3....
    0C00: E0 02 03 D8 C3 53 BB 03 00 E8 68 25 66 25 FF 0F  // .....S....h%f%..
    0C10: FF 0F 5B C3 53 66 50 66 51 66 8B C8 BB 03 00 E8  // ..[.SfPfQf......
    0C20: 52 25 66 23 C2 66 0B C1 E8 53 25 66 59 66 58 5B  // R%f#.f...S%fYfX[
    0C30: C3 53 66 50 BB 06 00 E8 3A 25 8A DC 66 58 8A C3  // .SfP....:%..fX..
    0C40: 80 E3 20 D0 EB 24 10 C0 E8 04 0A C3 5B C3 B8 2C  // .. ..$......[..,
    0C50: 06 F6 C3 01 75 03 B8 0C 06 E8 48 00 B8 2D 06 F6  // ....u.....H..-..
    0C60: C3 10 75 03 B8 0D 06 E8 3A 00 C3 BB 05 00 E8 03  // ..u.....:.......
    0C70: 25 66 25 FF 0F 15 01 8B C8 66 C1 E8 10 8B D0 C3  // %f%......f......
    0C80: E8 75 26 23 C8 81 E2 15 01 23 D1 66 C1 E2 10 8B  // .u&#.....#.f....
    0C90: D1 BB 05 00 E8 DD 24 66 25 00 F0 EA FE 66 0B C2  // ......$f%....f..
    0CA0: E8 DB 24 C3 66 50 53 51 66 52 66 33 D2 33 DB 8A  // ..$.fPSQfRf3.3..
    0CB0: DC 8A E8 8A C8 80 E1 1F 66 BA 01 00 00 00 66 D3  // ........f.....f.
    0CC0: E2 E8 B0 24 66 0B C2 F6 C5 20 75 03 66 33 C2 E8  // ...$f.... u.f3..
    0CD0: AC 24 66 5A 59 5B 66 58 C3 66 50 53 BB 06 00 E8  // .$fZY[fX.fPS....
    0CE0: 92 24 A8 10 75 09 BB F0 16 E8 6F 30 3D 5A A5 5B  // .$..u.....o0=Z.[
    0CF0: 66 58 C3 B8 04 06 80 F1 01 C0 E1 05 0A C1 E8 A3  // fX..............
    0D00: FF C3 53 66 50 BB F8 16 E8 50 30 8A C1 E8 B6 2F  // ..SfP....P0..../
    0D10: 66 58 5B C3 53 BB F8 16 E8 40 30 83 E0 01 5B C3  // fX[.S....@0...[.
    0D20: 66 50 E8 E0 FE A9 EA 0E 66 58 C3 BB 06 00 E8 43  // fP......fX.....C
    0D30: 24 66 C1 E8 10 25 FF 0F C3 BB 06 00 E8 35 24 66  // $f...%.......5$f
    0D40: 25 FF FF 00 F0 66 C1 E2 10 66 0B C2 E8 2F 24 C3  // %....f...f.../$.
    0D50: 53 66 50 BB 07 00 E8 1B 24 F6 C4 01 66 58 B0 06  // SfP.....$...fX..
    0D60: 74 02 B0 08 5B C3 53 BB 07 00 E8 07 24 80 E4 FE  // t...[.S.....$...
    0D70: 80 FD 06 74 03 80 CC 01 E8 03 24 5B C3 53 B8 06  // ...t......$[.S..
    0D80: 06 C0 E3 05 0A C3 E8 1B FF 5B C3 66 50 BB 06 00  // .........[.fP...
    0D90: E8 E1 23 24 40 C0 E8 06 8A D8 66 58 C3 57 66 50  // ..#$@.....fX.WfP
    0DA0: 66 33 C0 B9 08 00 FC F3 66 AB 66 58 5F E8 BA 01  // f3......f.fX_...
    0DB0: 0B C0 75 09 E8 33 07 74 3C 85 C1 74 F7 E8 F6 06  // ..u..3.t<..t....
    0DC0: 8D 9C 6A 01 E8 94 2F 26 89 05 8D 9C 6E 01 E8 8A  // ..j.../&....n...
    0DD0: 2F 26 89 45 02 8D 9C B5 02 E8 7F 2F 02 C0 04 04  // /&.E......./....
    0DE0: 26 88 45 06 26 88 45 07 26 88 45 08 B0 07 26 88  // &.E.&.E.&.E...&.
    0DF0: 45 04 0A C0 C3 32 C0 C3 B3 81 E8 F5 2C 75 04 83  // E....2......,u..
    0E00: C8 01 C3 33 C0 C3 66 50 53 51 52 56 57 E8 C9 FE  // ...3..fPSQRVW...
    0E10: 74 03 E8 18 07 5F 5E 5A 59 5B 66 58 C3 33 C9 E8  // t...._^ZY[fX.3..
    0E20: 81 29 0F 85 B5 00 66 BA FC FC 0C FF 66 33 C0 E8  // .)....f.....f3..
    0E30: 62 08 33 F6 E8 9D 06 0F 84 83 00 E8 D2 07 A9 C8  // b.3.............
    0E40: 0E 74 5B E8 AC 08 A8 04 74 38 B8 11 00 E8 01 07  // .t[.....t8......
    0E50: 74 2B 8D 5C 28 E8 C2 09 3C 02 74 21 3C 01 74 11  // t+.\(...<.t!<.t.
    0E60: 56 8B F7 E8 D4 14 E8 A7 07 E8 81 00 5E 85 C1 74  // V...........^..t
    0E70: 0C E8 68 00 56 8B F7 E8 BD 00 5E EB B7 E8 B7 00  // ..h.V.....^.....
    0E80: EB B2 A8 08 75 F7 A8 10 75 F3 B8 11 00 E8 C1 06  // ....u...u.......
    0E90: 74 A2 E8 47 00 56 8B F7 E8 9F 14 5E EB 96 A9 11  // t..G.V.....^....
    0EA0: 00 74 91 B8 C8 0E E8 A8 06 75 89 E8 44 08 A8 02  // .t.......u..D...
    0EB0: 74 06 E8 82 00 E9 7C FF E8 7F 14 E9 76 FF E8 2C  // t.....|.....v..,
    0EC0: 00 75 03 E8 A4 00 33 F6 E8 09 06 74 0E E8 40 07  // .u....3....t..@.
    0ED0: 85 C1 74 F4 51 E8 55 09 59 EB ED C3 8D 5D 28 66  // ..t.Q.U.Y....](f
    0EE0: C1 E3 10 8D 5C 28 B9 49 00 E8 02 28 C3 66 50 53  // ....\(.I...(.fPS
    0EF0: 52 56 33 C9 33 D2 8D 36 C6 0E E8 B4 07 A8 03 74  // RV3.3..6.......t
    0F00: 03 83 CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74 15 66  // ....f........t.f
    0F10: A9 01 00 00 00 74 07 BB 01 00 D3 E3 0B D3 66 D1  // .....t........f.
    0F20: E8 46 EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3 03 07  // .F......^Z[fX...
    0F30: 01 05 06 09 0A 0B FF 66 50 53 51 E8 D2 06 0F BC  // .......fPSQ.....
    0F40: D8 81 C3 F6 0E 8A 0F 66 B8 01 00 00 00 66 D3 E0  // .......f.....f..
    0F50: 66 BA FF FF FF FF E8 3B 07 59 5B 66 58 C3 01 12  // f......;.Y[fX...
    0F60: 0B 10 09 13 14 11 0C 15 16 17 50 53 52 E8 7D FF  // ..........PSR.}.
    0F70: 75 13 B9 08 00 E8 80 23 23 C8 75 19 33 C0 E8 69  // u......##.u.3..i
    0F80: 05 8B C8 EB 10 83 F9 02 74 0B E8 FE FD 80 FB 01  // ........t.......
    0F90: 75 03 83 E1 FD 5A 5B 58 C3 56 83 EC 04 8B EC 66  // u....Z[X.V.....f
    0FA0: 33 C0 66 89 46 00 66 BA 00 F0 00 F0 E8 65 FC 66  // 3.f.F.f......e.f
    0FB0: C1 E6 10 E8 34 05 0B C0 74 1E 85 C1 74 F5 55 E8  // ....4...t...t.U.
    0FC0: 56 00 5D 74 04 33 C8 EB EA E8 B9 06 66 3B 56 00  // V.]t.3......f;V.
    0FD0: 76 E1 66 89 56 00 EB DB E8 2A FC 74 07 66 8B 46  // v.f.V....*.t.f.F
    0FE0: 00 E8 05 00 83 C4 04 5E C3 33 F6 66 50 E8 D9 04  // .......^.3.fP...
    0FF0: 66 58 8D 9C D8 02 E8 CD 2C 66 8B D0 E8 06 FC E8  // fX......,f......
    1000: CD 1A 8D 9C 1C 03 E8 52 2D 38 D0 74 0A 8A C2 E8  // .......R-8.t....
    1010: B4 2C B0 02 E8 5D 06 C3 50 51 E8 99 04 32 C0 E8  // .,...]..PQ...2..
    1020: 52 06 E8 0E 04 E8 BA 00 8D 9C 40 03 E8 2C 2D 38  // R.........@..,-8
    1030: E8 74 0A 8A C5 E8 8E 2C B0 02 E8 37 06 E8 3B 01  // .t.....,...7..;.
    1040: 75 7F E8 96 01 75 7A E8 B7 00 74 75 E8 02 01 74  // u....uz...tu...t
    1050: 70 8D 9C 4C 01 E8 03 2D 8B C8 8B D3 8D 9C 00 03  // p..L...-........
    1060: E8 F8 2C 3B C1 74 05 B0 02 E8 08 06 E8 B8 0B 8D  // ..,;.t..........
    1070: 9C 00 03 E8 36 1A 8D 9C D8 02 E8 49 2C 66 C1 CE  // ....6......I,f..
    1080: 10 8B FE 66 C1 CE 10 E8 80 01 E8 CB 01 E8 89 05  // ...f............
    1090: 8A E9 8D 9C DC 02 32 C9 E8 6F 2C E8 72 05 66 25  // ......2..o,.r.f%
    10A0: FF 0F 00 00 E8 EE 04 80 F9 01 75 04 66 C1 E0 10  // ..........u.f...
    10B0: 59 58 66 BA FF FF FF FF 66 33 D0 E8 56 FB 33 D2  // YXf.....f3..V.3.
    10C0: C3 E8 05 00 0C 01 59 58 C3 8D 9C 4C 03 E8 8B 2C  // ......YX...L...,
    10D0: 8A C4 E8 F1 2B 8D 9C D4 02 E8 7F 2C 8A C4 E8 E5  // ....+......,....
    10E0: 2B C3 53 66 50 8D 9C 4C 03 E8 6F 2C 8A E0 E8 D5  // +.SfP..L..o,....
    10F0: 2B 8D 9C D4 02 E8 63 2C 8A E0 E8 C9 2B 66 58 5B  // +.....c,....+fX[
    1100: C3 56 83 EC 06 8B EC E8 AB 04 89 56 00 E8 9D 1C  // .V.........V....
    1110: 89 5E 02 E8 1F 05 89 56 04 33 F6 E8 AB 03 74 27  // .^.....V.3....t'
    1120: E8 92 04 3B 56 00 74 1B E8 0A 05 E8 D5 1F 74 08  // ...;V.t.......t.
    1130: 8B 56 04 E8 CD 1F 75 E3 E8 7A 04 E8 6F 1C 3B 5E  // .V....u..z..o.;^
    1140: 02 75 D8 33 DB EB 03 80 CB 01 83 C4 06 0A DB 5E  // .u.3...........^
    1150: C3 E8 61 04 E8 1C 04 8A DD E8 A1 1C 8B C1 80 FD  // ..a.............
    1160: FF 74 0A E8 2F 04 80 F9 00 74 02 8A C4 8A E8 8D  // .t../....t......
    1170: 9C 3C 03 32 C9 E8 92 2B 0B DB C3 83 EC 08 8B EC  // .<.2...+........
    1180: E8 32 04 E8 ED 03 E8 93 1B 56 8A 6E 00 E8 36 00  // .2.......V.n..6.
    1190: 0B F6 5E 74 14 F6 46 01 01 75 0E 83 C5 02 FE C9  // ..^t..F..u......
    11A0: 0A C9 75 E5 80 CB 01 EB 17 8D 9C 4C 03 E8 AB 2B  // ..u........L...+
    11B0: 38 C5 74 0A 8A C5 E8 0D 2B B0 02 E8 B6 04 32 DB  // 8.t.....+.....2.
    11C0: 83 C4 08 0A DB C3 51 33 F6 E8 FD 02 0B F6 74 07  // ......Q3......t.
    11D0: E8 46 04 38 E9 75 F2 0B F6 59 C3 33 C9 56 E8 37  // .F.8.u...Y.3.V.7
    11E0: 03 0B F6 5E 74 0C FE C1 E8 AC 24 38 C1 75 EE 0C  // ...^t.....$8.u..
    11F0: 01 C3 8D 9C D4 02 E8 62 2B 38 C8 74 0A 8A C1 E8  // .......b+8.t....
    1200: C4 2A B0 02 E8 6D 04 32 C0 C3 E8 0A 00 8D 9C D0  // .*...m.2........
    1210: 02 32 C9 E8 F4 2A C3 B5 00 8D 1D E8 3D 2B 66 8B  // .2...*......=+f.
    1220: D0 8D 9C 02 03 E8 33 2B 0B C0 74 2B 51 8B C8 8D  // ......3+..t+Q...
    1230: 9C 06 03 E8 25 2B 66 C1 E0 10 8B C1 59 66 3B C2  // ....%+f.....Yf;.
    1240: 75 04 B5 00 EB 11 B5 02 E8 EA 03 E8 A8 1E 75 07  // u.............u.
    1250: E8 DE F9 75 02 B5 01 C3 E8 96 03 8D 9C 40 03 B1  // ...u.........@..
    1260: 03 E8 A6 2A E8 39 07 8D 9C 40 03 B1 02 E8 9A 2A  // ...*.9...@.....*
    1270: E8 00 03 80 FD 00 75 1D E8 94 00 66 81 FA F0 D2  // ......u....f....
    1280: 00 00 75 06 66 BA 78 69 00 00 E8 B5 00 E8 EE 00  // ..u.f.xi........
    1290: E8 D4 03 EB 38 E8 AA 03 E8 CC 03 66 52 E8 20 03  // ....8......fR. .
    12A0: 0B D2 74 07 E8 40 1B 66 5A EB 22 E8 87 03 E8 75  // ..t..@.fZ."....u
    12B0: 1E 66 5A 51 E8 BC 02 80 FD 02 59 75 10 B5 04 66  // .fZQ......Yu...f
    12C0: 81 FA 74 40 00 00 76 05 B5 08 66 D1 EA 8D 9C 54  // ..t@..v...f....T
    12D0: 03 66 8B C2 E8 EF 29 8D 9C 40 03 E8 7D 2A 8A E5  // .f....)..@..}*..
    12E0: E8 E3 29 E8 1D 01 8D 9C 48 03 32 C9 E8 1B 2A E8  // ..).....H.2...*.
    12F0: C3 02 E8 7E 02 E8 F2 1A 8D 9C 58 03 32 C9 E8 09  // ...~......X.2...
    1300: 2A E8 B1 02 E8 6C 02 8D 9C 60 03 E8 53 1A C3 53  // *....l...`..S..S
    1310: 8D 9C 29 01 E8 44 2A 66 33 D2 0A C0 75 05 BA 48  // ..)..D*f3...u..H
    1320: 3F 5B C3 8A D0 66 B8 8C 0A 00 00 F7 E2 66 8B F8  // ?[...f.......f..
    1330: E8 82 02 B3 00 E8 63 19 66 3B D7 76 03 66 8B D7  // ......c.f;.v.f..
    1340: 5B C3 B7 01 53 8D 9C 42 03 E8 0F 2A 8A C8 5B 66  // [...S..B...*..[f
    1350: 52 E8 83 00 E8 EB 02 66 3B D1 66 5A 76 09 D0 E7  // R......f;.fZv...
    1360: E8 07 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A 01 E8  // ...8.r....S..*..
    1370: E9 29 24 0F 8A E8 0A ED 75 02 B5 01 5B C3 51 83  // .)$.....u...[.Q.
    1380: EC 08 8B EC 66 C7 46 00 48 3F 78 69 66 C7 46 04  // ....f.F.H?xif.F.
    1390: F0 D2 00 00 E8 29 02 0B D2 74 03 E8 68 1A 8A FD  // .....)...t..h...
    13A0: 53 8D 9C 42 03 E8 B3 29 8A C8 5B E8 61 FF 66 33  // S..B...)..[.a.f3
    13B0: C0 8B 46 00 66 3B C2 73 19 66 8B D0 E8 18 00 E8  // ..F.f;.s.f......
    13C0: 80 02 66 3B D1 72 05 83 C5 02 EB D4 66 33 D2 8B  // ..f;.r......f3..
    13D0: 56 00 83 C4 08 59 C3 66 52 52 32 ED 83 C1 02 B8  // V....Y.fRR2.....
    13E0: 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 33 C0 8B C2  // ....f3...ZQf3...
    13F0: 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8  // ..f..f...Yf..f..
    1400: 66 5A C3 E8 BA 01 0B D2 74 0B E8 16 00 0A ED 75  // fZ......t......u
    1410: 11 E8 EA 18 C3 B5 00 E8 1B 02 E8 D5 1C 75 03 E8  // .............u..
    1420: 01 00 C3 B5 00 8D 9C 31 01 E8 2F 29 A8 01 74 02  // .......1../)..t.
    1430: B5 01 C3 53 E8 89 01 66 C1 E2 10 E8 77 01 8D 9C  // ...S...f....w...
    1440: B8 02 E8 16 29 8A E8 E8 83 18 8A EB 5B C3 57 53  // ....).......[.WS
    1450: 53 E8 DF FF E8 5E 01 5B E8 61 19 74 49 80 FD 00  // S....^.[.a.tI...
    1460: 75 24 53 E8 A9 FE E8 37 05 8A CD E8 FC FE 8A FD  // u$S....7........
    1470: E8 64 FF 5B E8 E4 28 66 25 FF FF 00 00 66 3B C8  // .d.[..(f%....f;.
    1480: 73 21 32 DB EB 20 80 FD 02 75 18 53 E8 A6 01 E8  // s!2.. ...u.S....
    1490: 71 1C 5B 74 0E 8D 1D E8 C1 28 3D 74 40 76 04 32  // q.[t.....(=t@v.2
    14A0: DB EB 03 80 CB 01 5B 5F C3 53 E8 63 01 8B D8 E8  // ......[_.S.c....
    14B0: 53 F7 85 C3 5B C3 53 8B F0 E8 3C 1E 23 F0 74 07  // S...[.S...<.#.t.
    14C0: 8B C6 E8 DD 1C 8B F3 5B C3 E8 08 00 74 05 E8 D8  // .......[....t...
    14D0: FF 74 F6 C3 33 C0 0B F6 74 03 E8 33 01 33 F6 E8  // .t..3...t..3.3..
    14E0: 08 00 74 03 E8 CF FF 0B F6 C3 57 53 E8 7C 20 0B  // ..t.......WS.| .
    14F0: C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB  // .t......;.u.....
    1500: FF 74 0E 83 C7 02 E8 EF 1D 85 D8 74 EF 8B C3 EB  // .t.........t....
    1510: 02 33 C0 0B C0 5B 5F C3 51 33 F6 8A E9 E8 A9 FF  // .3...[_.Q3......
    1520: 74 07 E8 70 00 38 E9 75 F4 0B F6 59 C3 33 C0 E8  // t..p.8.u...Y.3..
    1530: B8 FF 74 13 E8 7F FF 8B DE B9 FB 00 E8 6A 21 83  // ..t..........j!.
    1540: C6 08 E8 36 1D EB E8 BB F0 16 B8 5A A5 E8 8E 27  // ...6.......Z...'
    1550: C3 56 51 E8 DF 00 8B CA 8B FE 33 F6 E8 75 FF 74  // .VQ.......3..u.t
    1560: 0B 3B FE 74 F7 E8 CD 00 3B D1 75 F0 8B FE 0B FF  // .;.t....;.u.....
    1570: 59 5E C3 53 66 50 8D 9C 40 03 E8 DE 27 8A E8 66  // Y^.SfP..@...'..f
    1580: 58 5B C3 8D 9C 69 03 E8 D1 27 C3 8D 9C 64 03 E8  // X[...i...'...d..
    1590: C9 27 0B C0 C3 53 66 50 8D 9C D4 02 E8 BC 27 8A  // .'...SfP......'.
    15A0: C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8 AC 27 8A  // .fX[.SfP......'.
    15B0: C8 66 58 5B C3 53 8D 5C 14 E8 9F 27 8B D0 5B C3  // .fX[.S.\...'..[.
    15C0: 53 66 50 8D 5C 16 E8 92 27 8B D0 66 58 5B C3 53  // SfP.\...'..fX[.S
    15D0: 66 50 8D 9C 50 03 E8 82 27 66 8B D0 66 58 5B C3  // fP..P...'f..fX[.
    15E0: 53 66 50 8D 9C 54 03 E8 71 27 66 8B D0 66 58 5B  // SfP..T..q'f..fX[
    15F0: C3 53 66 50 8D 5C 10 E8 61 27 8B C8 66 58 5B C3  // .SfP.\..a'..fX[.
    1600: 66 50 53 8D 9C 41 03 E8 51 27 5B 8A D8 66 58 C3  // fPS..A..Q'[..fX.
    1610: 53 8D 5C 08 E8 44 27 5B C3 53 50 8D 9C 4C 03 E8  // S.\..D'[.SP..L..
    1620: 39 27 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 2B 27  // 9'..X[.SP..M..+'
    1630: 8A C8 58 5B C3 53 50 8D 5C 0C E8 1E 27 8B D0 58  // ..X[.SP.\...'..X
    1640: 5B C3 53 66 50 8D 9C 00 03 E8 0F 27 66 33 D2 8B  // [.SfP......'f3..
    1650: D0 66 58 5B C3 8D 5C 04 E8 00 27 C3 51 8D 5C 04  // .fX[..\...'.Q.\.
    1660: 32 C9 E8 A5 26 59 C3 8D 9C 50 03 E8 ED 26 8B C2  // 2...&Y...P...&..
    1670: E8 53 26 C3 53 51 8A E8 E8 DA FF 24 FD 0A E8 E8  // .S&.SQ.....$....
    1680: DA FF 59 5B C3 66 50 8D 9C D8 02 E8 CD 26 66 8B  // ..Y[.fP......&f.
    1690: D0 66 58 C3 53 66 50 66 51 66 8B C8 BB 00 00 E8  // .fX.SfPfQf......
    16A0: D2 1A 66 23 C2 66 0B C1 E8 D3 1A 66 59 66 58 5B  // ..f#.f.....fYfX[
    16B0: C3 BB 00 00 E8 BD 1A 66 25 03 03 FF 00 C3 57 0B  // .......f%.....W.
    16C0: C0 75 10 33 F6 E8 0C FE 74 26 E8 25 00 A8 04 74  // .u.3....t&.%...t
    16D0: F4 EB 13 8B C8 E8 20 1C 23 C1 74 14 E8 D7 FD E8  // ...... .#.t.....
    16E0: 10 00 A8 04 74 0A 5F 8D 5C 28 E8 8B 05 0B F6 C3  // ....t._.\(......
    16F0: 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF E8 00 1A 74  // _......tr.9....t
    1700: 30 0A ED 74 10 8A CD B5 02 E8 68 1F B1 02 8D 9C  // 0..t......h.....
    1710: 48 01 E8 F5 25 E8 92 02 A8 04 74 15 8D 5C 28 E8  // H...%.....t..\(.
    1720: A1 00 74 0D E8 0E FF E8 CC 19 74 3F 80 FD 02 74  // ..t.......t?...t
    1730: 3A 8D 5C 28 E8 83 00 E8 14 0C 33 C9 50 8D 9C 28  // :.\(......3.P..(
    1740: 01 E8 17 26 66 0B C0 74 03 B9 00 08 58 0A C0 75  // ...&f..t....X..u
    1750: 13 8D 5C 28 E8 8A 00 75 0B 80 CD 02 E8 64 00 74  // ..\(...u.....d.t
    1760: 03 80 CD 04 8D 9C 48 01 E8 9F 25 E8 C7 FE E8 85  // ......H...%.....
    1770: 19 75 43 E8 C0 22 0B FF 74 3C 66 2E 81 3D 00 FF  // .uC.."..t<f..=..
    1780: FF FF 74 0F 06 0E 07 8D 5C 28 E8 EB 04 07 E8 DD  // ..t.....\(......
    1790: 09 75 23 8D 5C 28 56 8B F7 B9 20 00 53 E8 67 1F  // .u#.\(V... .S.g.
    17A0: 5B 5E E8 1E 00 74 0F 33 C9 8D 9C 48 01 E8 72 25  // [^...t.3...H..r%
    17B0: 80 CD 06 E8 54 25 E8 F1 01 C3 51 B9 49 00 E8 E8  // ....T%....Q.I...
    17C0: 1E 59 C3 51 E8 1A 00 75 14 E8 AF 01 3C 01 75 0D  // .Y.Q...u....<.u.
    17D0: B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9 59  // . ..'.u......3.Y
    17E0: C3 53 E8 76 25 66 3D 00 FF FF FF 75 0E 83 C3 04  // .S.v%f=....u....
    17F0: E8 68 25 66 3D FF FF FF 00 75 00 5B C3 50 52 32  // .h%f=....u.[.PR2
    1800: D2 E8 57 25 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4  // ..W%....f.......
    1810: 83 C3 04 E2 EC 0A D2 5A 58 C3 53 83 C3 14 E8 3A  // .......ZX.S....:
    1820: 25 A8 80 74 04 B0 02 EB 02 B0 01 5B C3 8D 9C 4C  // %..t.......[...L
    1830: 01 E8 1F 01 E8 73 01 B5 13 A8 08 75 0C E8 F5 FD  // .....s.....u....
    1840: 8A EA 80 FD 13 75 02 B5 03 8D 9C B8 02 66 33 C0  // .....u.......f3.
    1850: 8A C5 E8 71 24 E8 B8 FD A9 11 00 74 37 B5 01 E8  // ...q$......t7...
    1860: 22 01 E8 45 01 A8 04 75 17 55 BD 00 00 B8 61 40  // "..E...u.U....a@
    1870: E8 F0 02 B8 45 40 E8 EA 02 5D B5 02 E8 8A 00 C3  // ....E@...]......
    1880: E8 2F 01 B5 02 8D 5C 28 E8 DD 00 75 02 B5 01 E8  // ./....\(...u....
    1890: 77 00 EB 67 A9 C8 0E 74 3E E8 0E 01 A8 08 74 08  // w..g...t>.....t.
    18A0: 8D 5C 28 E8 B4 00 74 B5 B5 02 E8 D7 00 E8 FA 00  // .\(...t.........
    18B0: A8 04 74 0B 8D 5C 28 E8 F8 00 E8 F8 02 EB 0A 8D  // ..t..\(.........
    18C0: 9C 68 01 B8 3C 55 E8 7A 05 E8 D4 00 80 FD 00 75  // .h..<U.z.......u
    18D0: 37 B5 02 E8 C0 00 C3 A9 22 00 74 2C B5 04 E8 A3  // 7.......".t,....
    18E0: 00 8D 9C 68 01 56 E8 CB 21 8B F7 E8 58 03 5E E8  // ...h.V..!...X.^.
    18F0: 73 21 E8 A1 00 8D 5C 28 E8 99 21 8D 9C 68 01 E8  // s!....\(..!..h..
    1900: 4F 03 66 8B D1 E8 E9 07 C3 8D 9C B4 02 B1 02 E8  // O.f.............
    1910: F8 23 B5 02 E8 7F 00 C3 8D 9C 4C 01 E8 34 00 E8  // .#........L..4..
    1920: 88 00 A8 04 74 23 8D 5C 28 E8 86 00 E8 85 21 8D  // ....t#.\(.....!.
    1930: 9C 68 01 06 0E 07 B9 07 00 E8 D7 1D 07 E8 60 00  // .h............`.
    1940: E8 F2 FC 8D 5C 28 E8 76 21 8D 5C 28 E8 25 21 E8  // ....\(.v!.\(.%!.
    1950: DB FE C3 B9 61 00 E8 50 1D C3 53 81 C3 05 01 E8  // ....a..P..S.....
    1960: F9 23 24 06 3C 02 5B C3 E8 10 00 3D 01 04 75 0A  // .#$.<.[....=..u.
    1970: 53 83 C3 18 E8 E4 23 5B A8 01 C3 53 83 C3 12 E8  // S.....#[...S....
    1980: D9 23 5B C3 8D 9C B4 02 32 C9 E8 7D 23 C3 8D 9C  // .#[.....2..}#...
    1990: B4 02 E8 C6 23 C3 8D 9C B4 02 B1 01 E8 6B 23 C3  // ....#........k#.
    19A0: 8D 9C B4 02 B1 01 E8 79 23 C3 8D 9C 48 01 E8 AA  // .......y#...H...
    19B0: 23 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B D9  // #.UWQ.........+.
    19C0: D1 E3 8D 58 4E E8 93 23 E8 98 01 E2 EE 8D 5C 4B  // ...XN..#......\K
    19D0: E8 88 23 B9 04 00 8B D0 BF D7 19 85 55 06 74 17  // ..#.........U.t.
    19E0: 66 8B 05 8D 9A F4 01 E8 DC 22 8B 45 04 8D 9A F8  // f........".E....
    19F0: 01 E8 EA 22 83 C5 08 83 C7 08 E2 DF 8D 7C 5E B9  // ...".........|^.
    1A00: 04 00 33 ED 8B DF E8 52 23 0B C0 74 09 E8 12 01  // ..3....R#..t....
    1A10: E8 4C 00 83 C5 1C 83 C7 12 E2 E9 32 ED E8 76 FF  // .L.........2..v.
    1A20: 8D 5C 28 E8 55 FF 3D 01 04 75 10 83 C3 14 E8 2A  // .\(.U.=..u.....*
    1A30: 23 24 70 C0 E8 04 8A E8 E8 5B FF 59 5F 5D C3 20  // #$p......[.Y_]. 
    1A40: 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00 08 00  // .X.<.......<....
    1A50: 05 00 04 4B 00 00 01 80 02 E0 01 3C 00 20 00 51  // ...K.......<. .Q
    1A60: 8D 1D E8 F6 22 8D 9A 68 01 E8 72 22 8D 5D 02 E8  // ...."..h..r".]..
    1A70: E9 22 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 DC 22 8D  // ."..j.....]...".
    1A80: 9A 6E 01 E8 7C 00 8D 5D 08 E8 CF 22 8B C8 8A DC  // .n..|..]..."....
    1A90: 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC  // f...............
    1AA0: C0 E5 06 8A FC C0 E7 04 80 E7 03 80 E4 0F C0 E4  // ................
    1AB0: 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3  // .....?..........
    1AC0: 8D 9A 74 01 E8 17 22 8D 9A 72 01 8B C1 E8 0E 22  // ..t..."..r....."
    1AD0: 8D 9A 76 01 33 C0 8A C6 E8 03 22 8D 9A 78 01 33  // ..v.3....."..x.3
    1AE0: C0 8A C2 E8 F8 21 8D 5D 0C E8 6F 22 8D 9A 7A 01  // .....!.]..o"..z.
    1AF0: E8 0F 00 8D 5D 0F E8 62 22 8D 9A 7E 01 E8 DE 21  // ....]..b"..~...!
    1B00: 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A  // Y.....f.........
    1B10: E8 C0 ED 04 8B C1 E8 C5 21 83 C3 02 8B C2 E8 BD  // ........!.......
    1B20: 21 C3 8D 5D 11 E8 33 22 8A E0 BA 06 02 C0 E8 07  // !..]..3"........
    1B30: 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03  // t.........$.<.u.
    1B40: 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80  // ..@<.u.......t..
    1B50: E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A 80 01 E8  // ....t...........
    1B60: 7C 21 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C  // |!.<.t=.....$?.<
    1B70: 8D 9A F8 01 E8 67 21 0F B6 C2 83 C0 1F C1 E0 03  // .....g!.........
    1B80: 8D 9A F4 01 E8 57 21 0F B6 DE C1 EB 06 C1 E3 02  // .....W!.........
    1B90: 2E F7 A7 3F 1B 2E F7 B7 3D 1B 8D 9A F6 01 E8 3D  // ...?....=......=
    1BA0: 21 83 C5 08 C3 01 00 01 00 04 00 03 00 05 00 04  // !...............
    1BB0: 00 10 00 09 00 57 8D 9C 68 01 8B FB 8B DF E8 90  // .....W..h.......
    1BC0: 00 0B C9 74 44 8D 5D 18 E8 90 21 A8 80 74 0D 8B  // ...tD.]...!..t..
    1BD0: DF 56 8D 36 A3 1B E8 6D 00 5E EB 28 66 8B D1 E8  // .V.6...m.^.(f...
    1BE0: 0F 05 8D 9C A6 00 E8 72 21 3C 01 75 17 66 81 F9  // .......r!<.u.f..
    1BF0: 80 07 38 04 74 09 66 81 F9 00 05 D0 02 75 05 B5  // ..8.t.f......u..
    1C00: 03 E8 80 FD 83 C7 1C EB B3 5F C3 8C 0A D0 02 8A  // ........._......
    1C10: 00 E0 01 2D 00 10 00 3E 00 09 00 06 00 00 00 00  // ...-...>........
    1C20: 00 00 00 06 00 00 00 50 53 51 B9 07 00 53 8B DA  // .......PSQ...S..
    1C30: E8 28 21 83 F8 00 5B 74 09 66 C1 E3 10 8B DA E8  // .(!...[t.f......
    1C40: AC 1A 59 5B 58 C3 51 53 B9 07 00 E8 B9 1A 5B 59  // ..Y[X.QS......[Y
    1C50: C3 66 50 53 83 C3 06 E8 01 21 5B 8B C8 66 C1 E1  // .fPS.....![..f..
    1C60: 10 53 83 C3 02 E8 F3 20 8B C8 5B 66 58 C3 8D 9C  // .S..... ..[fX...
    1C70: 48 01 32 C9 E8 93 20 C3 57 B9 20 00 E8 94 1A 5F  // H.2... .W. ...._
    1C80: C3 E8 0A FD 3C 01 75 71 8D 9C B6 02 E8 CC 20 A8  // ....<.uq...... .
    1C90: 02 0F 84 89 00 66 C1 CE 10 E8 1A 04 66 C1 CE 10  // .....f......f...
    1CA0: 0A C0 75 26 8D 9C 4C 01 66 B8 C4 09 00 00 E8 15  // ..u&..L.f.......
    1CB0: 20 8D 9C 4C 01 E8 96 F7 0F 85 88 00 8D 9C 4C 01  //  ..L..........L.
    1CC0: B8 3C 6A E8 7D 01 0C 01 EB 7A 8D 9C 68 01 B0 00  // .<j.}....z..h...
    1CD0: E8 36 01 75 07 B0 00 E8 DF 00 74 68 8D 9C 68 01  // .6.u......th..h.
    1CE0: B0 01 E8 24 01 75 52 B0 01 E8 B0 00 75 56 B0 00  // ...$.uR.....uV..
    1CF0: E8 A9 00 EB 4F 0B F6 EB 4B 3C 04 74 21 3C 03 74  // ....O...K<.t!<.t
    1D00: 1D 66 C1 CE 10 E8 AE 03 66 C1 CE 10 0A C0 74 07  // .f......f.....t.
    1D10: B0 01 E8 A4 00 75 2D B0 00 E8 9D 00 75 26 8D BC  // .....u-.....u&..
    1D20: 68 01 8D 1D E8 34 20 0B C0 74 19 8B DF B0 00 E8  // h....4 ..t......
    1D30: D7 00 75 05 83 C7 1C EB E9 8B D3 8D 9C 4C 01 E8  // ..u..........L..
    1D40: E5 FE 0B F6 C3 57 53 51 E8 47 18 3B 55 02 75 18  // .....WSQ.G.;U.u.
    1D50: 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A  // f.....f...;].u..
    1D60: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB  // .t.:E.t......3..
    1D70: 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 13 18 3A  // .....Y[_.QfR...:
    1D80: 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C  // e.u...t.:E.t....
    1D90: E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 51 E8 F2 17  // ..3.....fZY.Q...
    1DA0: 56 8D 9C 4C 01 8B F7 E8 9C FE 5E E8 5B 00 75 07  // V..L......^.[.u.
    1DB0: 83 C7 1C E2 EB 33 FF 59 C3 8D BC F4 01 8A C8 8D  // .....3.Y........
    1DC0: 1D E8 97 1F 0B C0 74 40 66 50 E8 C1 FB 3C 01 66  // ......t@fP...<.f
    1DD0: 58 74 05 3D 40 06 73 2B 66 8B D0 8D 5D 04 E8 7A  // Xt.=@.s+f...]..z
    1DE0: 1F E8 61 FF 74 1D 8D 9C 4C 01 56 8B F2 E8 56 FE  // ..a.t...L.V...V.
    1DF0: 5E 53 8D 9C 62 01 33 C0 E8 E3 1E 5B 8A C1 E8 08  // ^S..b.3....[....
    1E00: 00 75 05 83 C7 08 EB B7 C3 66 51 50 53 66 C1 CE  // .u.......fQPSf..
    1E10: 10 8B DE 66 C1 CE 10 E8 41 1F 5B 66 8B D0 E8 30  // ...f....A.[f...0
    1E20: FE 58 3C 01 75 0A 66 3B CA 75 13 E8 20 F6 75 10  // .X<.u.f;.u.. .u.
    1E30: 3B CA 72 0A 66 3B CA 72 05 E8 12 F6 75 02 32 C0  // ;.r.f;.r....u.2.
    1E40: 66 59 C3 56 57 E8 31 FF 8B F7 E8 F9 FD 5F 5E C3  // fY.VW.1......_^.
    1E50: 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8 48  // fPSfQRWVQ......H
    1E60: 18 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 56 1E  // .Y.\...f......V.
    1E70: F6 C2 03 75 24 8B C1 24 7F BF 33 1F 80 3D FF 0F  // ...u$..$..3..=..
    1E80: 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05 02  // ...:.u.f.E.f....
    1E90: 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B C1  // ............t%..
    1EA0: E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0 75  // .p.....3.......u
    1EB0: 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8 05  // ..\.f%....f.....
    1EC0: 1E EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0  // ................
    1ED0: C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25 80  // .......pr*..us%.
    1EE0: EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8 72  // .p..2.P.0...X8.r
    1EF0: 05 33 C0 E9 9C 00 E8 28 02 E8 5F 1E 0B C0 0F 84  // .3.....(.._.....
    1F00: 90 00 EB 1B 32 C0 E8 70 FE 0F 84 85 00 8D 5C 16  // ....2..p......\.
    1F10: 8B 05 E8 C9 1D 8B 45 06 66 C1 E0 10 8B 45 02 50  // ......E.f....E.P
    1F20: E8 7A 0B 66 C1 E1 10 8B C8 58 8D 1C E8 97 1D 66  // .z.f.....X.....f
    1F30: 50 8D 5C 04 66 8B C1 E8 8C 1D 66 58 66 C1 E8 10  // P.\.f.....fXf...
    1F40: 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06 E8  // f......f..fP.\..
    1F50: 09 1E 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C  // ....fXf..f...@.\
    1F60: 14 E8 7A 1D BF 93 1F 83 F9 01 74 11 BF 9B 1F 81  // ..z.......t.....
    1F70: F9 01 01 74 08 BF A3 1F 83 F9 02 75 15 8D 5C 0C  // ...t.......u..\.
    1F80: 66 8B 05 E8 40 1D 8D 5C 10 66 8B 45 04 E8 36 1D  // f...@..\.f.E..6.
    1F90: 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90 01  // ..^_ZfY[fX..@...
    1FA0: 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01 04  // .@..............
    1FB0: 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07 D0  // @....@..........
    1FC0: 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80 02  // .^..@...........
    1FD0: 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02 E0  // ^....^..........
    1FE0: 01 13 80 02 90 01 23 20 04 90 01 32 20 04 B0 02  // ......# ...2 ...
    1FF0: 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05 05  // 3 ...b..........
    2000: 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08 08  // ................
    2010: 00 00 00 56 E8 10 1A 80 E4 01 3B 04 74 09 83 C6  // ...V......;.t...
    2020: 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53  // ...3....D...^.WS
    2030: 50 E8 F3 19 83 E9 0A E8 E0 00 83 F8 05 76 03 B8  // P............v..
    2040: 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF  // ................
    2050: AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77 00  // .X[_.fSQfR.A..w.
    2060: 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3  // f...f...f.....f.
    2070: E8 66 33 D2 66 F7 F3 E8 23 0A 66 5A 59 66 5B C3  // .f3.f...#.fZYf[.
    2080: 53 66 50 BB 07 00 E8 EB 10 0A C0 66 58 5B C3 53  // SfP........fX[.S
    2090: 66 50 BB 07 00 E8 DC 10 A8 01 66 58 5B C3 53 66  // fP........fX[.Sf
    20A0: 50 8D 5C 06 E8 B4 1C 8A C8 66 58 5B C3 51 B9 08  // P.\......fX[.Q..
    20B0: 00 E8 3A 16 59 C3 53 8D 5C 08 E8 9E 1C 24 03 5B  // ..:.Y.S.\....$.[
    20C0: C3 8D 5C 09 E8 94 1C C3 51 53 B1 01 8A E8 8D 5C  // ..\.....QS.....\
    20D0: 08 E8 36 1C 5B 59 C3 53 8D 1C E8 7E 1C 5B C3 53  // ..6.[Y.S...~.[.S
    20E0: 8D 5C 04 E8 75 1C 5B C3 53 8D 5C 16 E8 6C 1C 5B  // .\..u.[.S.\..l.[
    20F0: C3 53 66 52 33 C0 E8 4C FC 66 5A 75 1B E8 34 00  // .SfR3..L.fZu..4.
    2100: 74 16 E8 15 00 40 83 F8 05 73 0D E8 B8 1B 48 E8  // t....@...s....H.
    2110: 0F 00 66 8B C2 E8 AE 1B 5B C3 BB 00 1E E8 3B 1C  // ..f.....[.....;.
    2120: C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32 00  // ..............2.
    2130: E8 76 15 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08  // .v..Q.....t.....
    2140: 1E E8 17 1C 66 3B C2 74 07 83 C3 08 E2 F3 0B DB  // ....f;.t........
    2150: 59 C3 B3 01 E8 9B 19 75 03 E8 37 E5 C3 B3 02 E8  // Y......u..7.....
    2160: 90 19 75 03 E8 2C E5 C3 B3 89 E8 26 E5 C3 B3 1B  // ..u..,.....&....
    2170: E8 20 E5 C3 E8 2D EB 51 B9 0B 01 E8 F6 14 59 C3  // . ...-.Q......Y.
    2180: B8 22 06 E8 EE FF C3 B8 3F 06 E8 E7 FF C3 B8 20  // ."......?...... 
    2190: 06 E8 E0 FF C3 B8 2E 06 E8 D9 FF C3 B8 3E 06 E8  // .............>..
    21A0: D2 FF C3 00 C3 00 BB 20 DF E8 03 3E E8 E6 F3 B5  // ....... ...>....
    21B0: 01 E8 45 07 C3 BB 00 DF E8 F4 3D E8 D7 F3 B5 00  // ..E.......=.....
    21C0: E8 36 07 C3 80 F9 00 75 17 E8 B9 F4 E8 7C 19 0B  // .6.....u.....|..
    21D0: C0 74 03 E8 53 19 E8 C4 14 8A C8 B5 02 E8 0A 09  // .t..S...........
    21E0: 0B F6 74 29 E8 AE F3 B5 01 E8 21 07 56 33 F6 B5  // ..t)......!.V3..
    21F0: 00 E8 6A 06 5E B5 01 E8 1F F4 E8 ED 08 E8 B5 09  // ..j.^...........
    2200: E8 92 F3 8D 9C 00 03 E8 0A 07 E8 53 07 66 C1 CE  // ...........S.f..
    2210: 10 B5 01 E8 48 06 E8 A8 FE A8 40 75 07 32 C0 B5  // ....H.....@u.2..
    2220: 01 E8 58 08 66 C1 CE 10 C3 E8 69 F3 B5 01 E8 A3  // ..X.f.....i.....
    2230: 06 B5 00 E8 D7 06 E8 3A 07 B1 0F E8 F3 0B B1 10  // .......:........
    2240: E8 EE 0B E8 26 00 C3 E8 75 00 E8 58 F3 B5 00 E8  // ....&...u..X....
    2250: 82 06 B5 00 E8 B6 06 E8 CD F3 E8 40 14 38 C1 74  // ...........@.8.t
    2260: 0A 80 F9 08 74 05 B5 03 E8 7F 08 C3 53 66 50 BB  // ....t.......SfP.
    2270: 02 00 E8 FF 0E 66 A9 00 00 01 00 66 58 5B 75 3E  // .....f.....fX[u>
    2280: E8 3D F3 0B D2 74 0C E8 CB F3 3C 01 74 05 B1 0F  // .=...t....<.t...
    2290: E8 D8 0B B1 0C E8 75 00 B1 01 E8 3A 0C E8 D3 F2  // ......u....:....
    22A0: 80 FD 00 75 0D E8 FA 01 B1 0D E8 84 0B B1 03 E8  // ...u............
    22B0: 5B 00 E8 0B F3 0B D2 74 05 B1 01 E8 AD 0B C3 E8  // [......t........
    22C0: FE F2 0B D2 74 05 B1 00 E8 A0 0B B1 02 E8 3D 00  // ....t.........=.
    22D0: E8 82 F3 A8 01 74 0D E8 99 F2 80 FD 00 75 05 B0  // .....t.......u..
    22E0: 02 E8 26 04 B1 00 E8 EE 0B B1 0D E8 1F 00 C3 B1  // ..&.............
    22F0: 07 E8 E3 0B E8 C9 F2 0B D2 75 0C E8 37 F3 E8 F1  // .........u..7...
    2300: 0D 75 09 E8 E4 0C C3 B1 07 E8 5F 0B C3 E8 25 F3  // .u........_...%.
    2310: E8 DF 0D 75 24 51 E8 BE 0B 59 80 F9 0C 75 1A 33  // ...u$Q...Y...u.3
    2320: D2 56 83 C6 08 E8 08 0E 5E 0A C0 75 0C B9 0A 00  // .V......^..u....
    2330: E8 F7 13 42 83 FA 1E 75 E8 C3 E8 83 F2 0B D2 74  // ...B...u.......t
    2340: 06 B1 12 E8 25 0B C3 E8 6B F2 E8 C4 0A C3 56 83  // ....%...k.....V.
    2350: C6 08 E8 7C 0D 5E E8 67 F2 0B D2 74 03 E8 AD 09  // ...|.^.g...t....
    2360: 80 FD 01 0F 84 D1 00 80 FD 02 0F 85 F2 00 B1 0C  // ................
    2370: E8 9A FF 56 83 C6 08 E8 B6 0D 5E 0A C0 0F 84 DF  // ...V......^.....
    2380: 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C 35 01 E8 CA  // ............5...
    2390: 19 A8 01 74 03 E8 7F 03 E8 25 F2 0B D2 74 05 B1  // ...t.....%...t..
    23A0: 14 E8 C7 0A 66 33 C9 E8 47 F2 66 BA 50 01 40 50  // ....f3..G.f.P.@P
    23B0: 66 C1 C9 10 8A C1 66 C1 C9 10 E8 6D 0C 0F 85 9F  // f.....f....m....
    23C0: 00 66 BA 50 01 50 4F 52 E8 F5 F1 80 FA 22 5A 74  // .f.P.POR....."Zt
    23D0: 0D 8D 9C 2D 01 E8 83 19 24 06 3C 02 75 02 B6 02  // ...-....$.<.u...
    23E0: 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8 3A 0C  // .\(f.....f....:.
    23F0: 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1 C9 10  // un..2.f.....f...
    2400: 66 BA 50 01 10 30 33 DB E8 1F 0C 75 53 66 C1 C9  // f.P..03....uSf..
    2410: 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10 75 0F  // ...f.....tE...u.
    2420: 8D 5C 28 E8 35 19 66 0B C0 0F 85 7D FF EB 31 3D  // .\(.5.f....}..1=
    2430: 80 00 0F 82 74 FF EB 25 E8 B6 F1 8A E9 B1 A0 BA  // ....t..%........
    2440: 00 80 BF 32 00 8D 5C 28 E8 B4 0B 80 FF 01 74 0D  // ...2..\(......t.
    2450: B1 A2 8D 5C 28 E8 A7 0B 80 FF 01 75 03 B0 00 C3  // ...\(......u....
    2460: B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75 21 E8  // ....+.t......u!.
    2470: 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01 E8 A9  // ..u.f....C..0...
    2480: 0B 66 BA 20 00 90 41 8D 9C 34 01 E8 9C 0B 33 DB  // .f. ..A..4....3.
    2490: C3 E8 5D F1 66 BA 00 00 90 47 8D 9C 28 01 E8 89  // ..].f....G..(...
    24A0: 0B C3 E8 B0 F1 3C 01 75 0E E8 ED 02 80 FD 01 75  // .....<.u.......u
    24B0: 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00 E8 E8  // ................
    24C0: 11 B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9 19 01  // ....D.t.........
    24D0: B1 08 E8 5C 09 E8 66 02 B1 09 E8 54 09 E8 AC 01  // ...\..f....T....
    24E0: 8D 9C B8 03 66 33 C0 E8 DC 17 E8 47 01 B9 90 01  // ....f3.....G....
    24F0: E8 2C 12 B0 01 E8 F7 01 B5 02 E8 D5 02 E8 5B 01  // .,............[.
    2500: E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8 E7 00  // ...........3....
    2510: F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6 C5 04  // ...u............
    2520: 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7 03 E8  // t...............
    2530: CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84 A9 00  // .....8.u..3.....
    2540: E8 54 01 FE C1 E8 B8 F0 38 D9 75 C1 8D 9C AC 03  // .T......8.u.....
    2550: E8 08 18 3C 03 74 05 E8 DA 00 EB A1 8D 9C B0 03  // ...<.t..........
    2560: 66 33 C0 E8 60 17 8D 9C 2A 01 E8 EE 17 A8 40 74  // f3..`...*.....@t
    2570: 0C B1 13 E8 BB 08 B0 03 E8 74 01 EB 0A B1 0A E8  // .........t......
    2580: AF 08 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC 00 E8  // .....h....F.....
    2590: 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58 00 80  // X..8....8.3..X..
    25A0: FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23 02 59  // ..u..s.u'Q...#.Y
    25B0: F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65 00 8A  // ...u....$..-.e..
    25C0: D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00 74 19  // .....].8.u....t.
    25D0: FE C1 E8 2B F0 38 D9 75 C3 8D 9C AC 03 E8 7B 17  // ...+.8.u......{.
    25E0: 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01 B1 0B  // <.u..M..........
    25F0: E8 3E 08 E8 A3 01 C3 8D 9C C0 03 E8 0F 00 8A E8  // .>..............
    2600: C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 4A  // .S.......[...Q.J
    2610: 17 C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 3A  // ......$.Y......:
    2620: 17 A8 01 C3 8D 9C B8 03 E8 F7 16 C3 8D 9C B8 03  // ................
    2630: E8 D7 16 C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A  // ....3.3....8.v..
    2640: D5 FE C1 E8 BA EF 38 D9 72 EE 33 C9 8A EA 8D 9C  // ......8.r.3.....
    2650: 5C 03 E8 B5 16 B1 0B E8 7D 08 C3 E8 93 EF 8D 9C  // \.......}.......
    2660: B8 03 E8 F6 16 66 BA 03 01 80 83 E8 BC 09 C3 51  // .....f.........Q
    2670: 53 8D 9C B0 03 E8 AA 16 FE C5 E8 8D 16 80 FD 06  // S...............
    2680: 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33 C0 8D  // r....W.3.[Y.f3..
    2690: 9C B0 03 E8 30 16 C3 32 ED E8 65 FF 80 E3 0C C0  // ....0..2..e.....
    26A0: EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03  // ....*.........r.
    26B0: 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80  // .. .K....8.r....
    26C0: FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 21 EF  // ..u.......`...!.
    26D0: 8D 9C C0 03 66 BA 02 02 90 45 E8 4D 09 C3 E8 10  // ....f....E.M....
    26E0: EF 66 BA 00 01 90 42 8D 9C B4 03 E8 3C 09 C3 E8  // .f....B.....<...
    26F0: FF EE 66 BA 02 01 80 50 E8 2F 09 C3 E8 E1 EE 8B  // ..f....P./......
    2700: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 E4 EE 66 BA 00  // .f3..........f..
    2710: 06 80 50 E8 14 09 C3 E8 D7 EE 66 BA 11 01 80 50  // ..P.......f....P
    2720: B0 04 E8 05 09 C3 E8 C8 EE 66 BA 00 06 90 40 8D  // .........f....@.
    2730: 9C C8 03 E8 F4 08 8D 9C C8 03 E8 1E 16 C3 E8 BB  // ................
    2740: FF E8 BC EE 8A E3 80 CC 80 50 E8 A4 EE 58 66 BA  // .........P...Xf.
    2750: 00 01 80 61 E8 D3 08 33 C9 E8 2F EE 0B C0 74 02  // ...a...3../...t.
    2760: B5 10 8D 9C BC 03 E8 A1 15 8A C5 E8 83 EE 66 BA  // ..............f.
    2770: 07 01 80 50 E8 B3 08 E8 BB EE E8 79 09 75 19 8D  // ...P.......y.u..
    2780: 9C 48 03 E8 D5 15 0A C0 74 0E E8 64 EE 66 BA 0A  // .H......t..d.f..
    2790: 01 80 50 B0 01 E8 92 08 C3 E8 42 FF E8 2E FF E8  // ..P.......B.....
    27A0: 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8 47 FE  // ..<.u..q.t.3..G.
    27B0: 80 FD 07 75 0D FE C1 E8 46 EE 38 D9 75 EF B5 01  // ...u....F.8.u...
    27C0: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 39  // ...............9
    27D0: 15 C3 51 8D 9C AC 03 32 C9 E8 2E 15 59 C3 51 8D  // ..Q....2....Y.Q.
    27E0: 9C AC 03 B1 01 E8 22 15 59 C3 8D 9C 32 01 E8 6A  // ......".Y...2..j
    27F0: 15 24 07 75 15 B9 64 00 8D 9C AC 03 E8 5C 15 3C  // .$.u..d......\.<
    2800: 02 74 03 B9 90 01 E8 16 0F C3 32 E4 B1 04 33 D2  // .t........2...3.
    2810: F6 E1 8B C8 E8 13 0F C3 51 8D 5C 14 E8 3C 15 66  // ........Q.\..<.f
    2820: C1 E0 10 E8 96 01 59 C3 33 C9 E8 6A 0E 38 C1 73  // ......Y.3..j.8.s
    2830: 05 B5 00 E8 A5 00 B5 00 E8 99 00 FE C1 E8 5A 0E  // ..............Z.
    2840: 38 C1 72 E6 32 C9 8A E9 E8 52 0E 38 C1 74 05 B5  // 8.r.2....R.8.t..
    2850: 03 E8 96 02 FE C1 E8 3B 0E 38 C1 72 E9 C3 83 EC  // .......;.8.r....
    2860: 0C 8B EC 0B F6 74 29 E8 6D F8 66 C1 C8 10 80 FD  // .....t).m.f.....
    2870: 10 75 06 8D 5C 18 E8 E2 14 66 89 46 00 8D 5C 04  // .u..\....f.F..\.
    2880: E8 D8 14 66 89 46 04 8D 5C 08 E8 CE 14 88 46 0A  // ...f.F..\.....F.
    2890: 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 04  // .N...f......+...
    28A0: 0D 83 C4 0C C3 33 DB 83 EC 08 8B EC 89 5E 00 8C  // .....3.......^..
    28B0: D0 66 C1 E0 10 8B C4 BB 01 00 E8 E8 0C 8B EC 8B  // .f..............
    28C0: 4E 00 8B 56 02 66 8B 46 04 83 C4 08 C3 BB 25 00  // N..V.f.F......%.
    28D0: E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00 E8 01  // .....#..........
    28E0: 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10  // ........N...f...
    28F0: 8B C4 E8 B0 0C 83 C4 04 C3 BB 22 00 E8 E3 FF 80  // ..........".....
    2900: FD 01 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB 2C 00  // ..t...........,.
    2910: E8 CF FF C3 E8 44 14 66 A9 00 00 FF FF 74 40 83  // .....D.f.....t@.
    2920: EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 2C 14 66  // ....UQ.......,.f
    2930: 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 1A  // .F..............
    2940: 14 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0  // .f...f.F.Y].N...
    2950: 66 C1 E0 10 8B C4 BB 31 00 E8 49 0C 83 C4 18 C3  // f......1..I.....
    2960: E8 32 EC 8D 9C D0 02 E8 F1 13 8A E8 BB 21 00 E8  // .2...........!..
    2970: 70 FF C3 8D 9C 3C 03 E8 E1 13 8A F8 E8 F4 EB 8A  // p....<..........
    2980: DD 53 8D 9C 42 03 E8 D2 13 8A E8 5B E8 06 EC E8  // .S..B......[....
    2990: A3 EC E8 61 07 75 02 B3 01 83 EC 04 8B EC 88 4E  // ...a.u.........N
    29A0: 00 88 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10  // ..~..^..n...f...
    29B0: 8B C4 BB 2A 00 E8 ED 0B 83 C4 04 C3 83 EC 10 8B  // ...*............
    29C0: EC 66 8B C8 66 33 C0 66 89 46 04 BB 00 17 E8 F5  // .f..f3.f.F......
    29D0: 12 66 B8 00 80 20 50 66 89 46 0C 66 33 C0 66 89  // .f... Pf.F.f3.f.
    29E0: 46 08 56 E8 9A 0B 66 8B 44 04 66 50 66 C1 E8 16  // F.V...f.D.fPf...
    29F0: 88 46 08 66 58 66 C1 E0 0A 66 05 00 17 00 00 66  // .F.fXf...f.....f
    2A00: 89 46 00 5E 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8  // .F.^..f......5..
    2A10: 93 0B 8B EC 66 B8 00 80 00 00 66 2B C8 66 89 46  // ....f.....f+.f.F
    2A20: 04 66 05 00 00 20 40 66 89 46 0C 66 33 C0 66 89  // .f... @f.F.f3.f.
    2A30: 46 08 66 89 46 00 8C D0 66 C1 E0 10 8B C4 BB 35  // F.f.F...f......5
    2A40: 00 E8 61 0B 8B EC 66 8B 46 0C 66 25 FF FF 1F 00  // ..a...f.F.f%....
    2A50: 66 01 46 04 66 3B C8 76 1F 66 2B C8 66 8B 46 04  // f.F.f;.v.f+.f.F.
    2A60: 66 3D 00 FF 01 00 76 06 66 B8 00 FF 01 00 66 3B  // f=....v.f.....f;
    2A70: C8 73 AE 66 8B C1 EB A9 83 C4 10 C3 83 EC 08 8B  // .s.f............
    2A80: EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0  // ..N.f.V..^...f..
    2A90: 10 8B C4 BB 2D 00 E8 0C 0B 83 C4 08 C3 3D C0 7F  // ....-........=..
    2AA0: 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 AB 12  // v.......?$..Q...
    2AB0: 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 9E 12 03 C1 66  // f3.............f
    2AC0: 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 83  // %....Y=.'s...'..
    2AD0: F8 02 75 13 66 81 FA 40 9C 00 00 77 0A E8 41 10  // ..u.f..@...w..A.
    2AE0: A8 10 74 03 B2 40 C3 32 D2 C3 66 33 FF 66 33 DB  // ..t..@.2..f3.f3.
    2AF0: 66 33 C0 8A C1 66 BA 00 00 00 FF 80 FD 03 0F 84  // f3...f..........
    2B00: 87 00 80 FD 02 75 14 8D 9C 1C 03 E8 4D 12 66 C1  // .....u......M.f.
    2B10: E0 18 8A C1 E8 6E EB 33 DB EB 6E E8 98 00 53 8D  // .....n.3..n...S.
    2B20: 9C E4 02 66 8B C7 E8 9D 11 5B E8 F3 00 66 8B C3  // ...f.....[...f..
    2B30: 66 53 8D 9C E8 02 E8 8D 11 8D 9C EC 02 66 8B C7  // fS...........f..
    2B40: E8 83 11 66 5B 51 53 33 D2 80 F9 08 73 08 E8 3A  // ...f[QS3....s..:
    2B50: 01 74 03 80 CE 10 8D 9C 02 03 E8 FE 11 0B C0 75  // .t.............u
    2B60: 03 80 CE 03 E8 0C EA 8A D5 66 C1 E2 10 E8 45 EA  // .........f....E.
    2B70: 8A F2 8A D1 66 8B C2 E8 C8 EA 66 C1 E2 08 E8 14  // ....f.....f.....
    2B80: EA 8A D1 66 C1 CA 08 5B 59 83 EC 14 8B EC 66 89  // ...f...[Y.....f.
    2B90: 46 08 66 89 5E 04 66 89 7E 0C 66 89 56 00 BB 0C  // F.f.^.f.~.f.V...
    2BA0: 00 8C D0 66 C1 E0 10 8B C4 E8 F9 09 8B EC 8A 5E  // ...f...........^
    2BB0: 0B 83 C4 14 C3 C3 83 EC 08 8B EC 51 E8 B4 E9 88  // ...........Q....
    2BC0: 6E 03 E8 0A EA 89 56 00 E8 EA E9 88 56 02 E8 EF  // n.....V.....V...
    2BD0: E9 88 56 05 80 FD 10 75 05 E8 D7 03 EB 26 33 D2  // ..V....u.....&3.
    2BE0: E8 A8 E9 74 03 80 CA 10 E8 15 EA 80 FB 04 76 03  // ...t..........v.
    2BF0: 80 CA 40 8D 9C 58 03 E8 61 11 A8 02 74 03 80 CA  // ..@..X..a...t...
    2C00: 20 88 56 04 59 8C D0 66 C1 E0 10 8B C4 BB 11 00  //  .V.Y..f........
    2C10: E8 92 09 8B EC 66 8B 7E 00 8B 5E 04 83 C4 08 C3  // .....f.~..^.....
    2C20: 66 50 66 51 52 8A CF 0A FF 75 0B E8 90 0A 66 33  // fPfQR....u....f3
    2C30: D2 66 F7 F7 8A C8 8A EB 0A ED 75 03 E8 86 0A 51  // .f........u....Q
    2C40: 66 33 C0 8A C5 32 ED F7 E1 59 66 C1 E1 10 8A EF  // f3...2...Yf.....
    2C50: 66 F7 E7 66 BB E8 03 00 00 66 F7 E3 66 BB 30 00  // f..f.....f..f.0.
    2C60: 00 00 66 33 D2 66 F7 F3 66 33 D2 66 BB A0 86 01  // ..f3.f..f3.f....
    2C70: 00 66 F7 F3 66 8B D9 8B D8 66 B8 0A 00 00 00 66  // .f..f....f.....f
    2C80: F7 E2 66 8B F8 5A 66 59 66 58 C3 E8 F5 E8 A8 02  // ..f..ZfYfX......
    2C90: C3 66 50 E8 ED E8 A8 01 66 58 C3 53 51 66 50 B9  // .fP.....fX.SQfP.
    2CA0: A0 8C 80 FB 00 75 1C B9 90 7E E8 86 08 83 E3 03  // .....u...~......
    2CB0: 80 FB 03 75 0E E8 B2 09 66 3D 50 C3 00 00 72 03  // ...u....f=P...r.
    2CC0: B9 F0 D2 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3  // ...f3...fXY[.fR.
    2CD0: 10 80 FA 14 74 25 B3 0F 80 FA 15 74 1E B3 00 66  // ....t%.....t...f
    2CE0: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    2CF0: 74 09 B3 01 80 FD 0E 74 02 B3 02 66 5A C3 B5 11  // t......t...fZ...
    2D00: 80 FA 23 74 07 80 FA 22 74 02 B5 00 C3 B5 02 80  // ..#t..."t.......
    2D10: FA 23 74 07 80 FA 22 74 02 B3 01 C3 32 C9 B3 04  // .#t..."t....2...
    2D20: 80 FD 00 75 0F B3 02 E8 76 09 74 08 C7 46 00 0A  // ...u....v.t..F..
    2D30: 01 B1 01 C3 57 55 E8 7D 02 74 23 53 8B 5D 02 E8  // ....WU.}.t#S.]..
    2D40: 47 08 03 FB 5B 80 3D FF 74 14 84 5D 01 74 0A 8B  // G...[.=.t..].t..
    2D50: 05 89 46 00 83 C5 02 FE C1 83 C7 02 EB E7 5D 5F  // ..F...........]_
    2D60: C3 57 56 8B F3 8D 5C 04 66 33 C0 E8 58 0F 80 FD  // .WV...\.f3..X...
    2D70: 00 75 04 B0 07 EB 07 80 FD 01 75 23 B0 06 E8 47  // .u........u#...G
    2D80: 09 33 DB 0B FF 74 23 8D 5C 04 66 8B 45 04 E8 35  // .3...t#.\.f.E..5
    2D90: 0F 83 C3 04 66 8B 45 08 E8 2B 0F 8B DE EB 0B 66  // ....f.E..+.....f
    2DA0: 33 C0 8D 5C 08 E8 1E 0F 8B DE 5E 5F C3 8B DA B7  // 3..\......^_....
    2DB0: 22 80 FE 21 74 02 B7 21 C3 0C 01 C3 E8 9C 0F 66  // "..!t..!.......f
    2DC0: C1 E8 10 0B C0 74 1A 53 83 C3 06 E8 8D 0F 5B 3D  // .....t.S......[=
    2DD0: E0 01 72 0D 53 83 C3 18 E8 80 0F 5B A9 10 00 74  // ..r.S......[...t
    2DE0: 03 32 C0 C3 0C 01 C3 B5 0C C3 32 ED BB 02 00 E8  // .2........2.....
    2DF0: 82 03 66 C1 E8 18 A8 10 74 02 B5 02 C3 57 E8 B5  // ..f.....t....W..
    2E00: 01 8B 4D 06 5F C3 80 FA 22 75 05 C7 46 00 78 69  // ..M._..."u..F.xi
    2E10: C3 80 FA 15 75 1A 83 EC 0C 8B EC C6 46 02 00 8C  // ....u.......F...
    2E20: D0 66 C1 E0 10 8B C4 BB 15 00 E8 78 07 83 C4 0C  // .f.........x....
    2E30: C3 E8 99 01 80 FD FF 74 31 C0 E5 04 83 EC 08 8B  // .......t1.......
    2E40: EC 88 4E 03 88 6E 02 E8 53 00 80 F9 10 75 0A 8D  // ..N..n..S....u..
    2E50: 9C 48 03 E8 05 0F 88 46 04 8C D0 66 C1 E0 10 8B  // .H.....F...f....
    2E60: C4 BB 04 00 E8 3E 07 83 C4 08 C3 83 EC 10 8B EC  // .....>..........
    2E70: 88 4E 03 E8 4A E7 81 E2 00 07 FE CE C0 E6 04 88  // .N..J...........
    2E80: 76 02 E8 18 00 E8 BA E7 89 56 00 8C D0 66 C1 E0  // v........V...f..
    2E90: 10 8B C4 BB 32 00 E8 0C 07 83 C4 10 C3 32 ED E8  // ....2........2..
    2EA0: 3E E7 81 FA 48 3F 74 1A B5 01 81 FA 78 69 74 12  // >...H?t.....xit.
    2EB0: B5 02 81 FA F0 D2 74 0A B5 03 81 FA 90 7E 74 02  // ......t......~t.
    2EC0: 32 ED 08 6E 02 8D 9C 40 03 E8 8F 0E 66 89 46 04  // 2..n...@....f.F.
    2ED0: E8 FC E6 89 56 00 C3 80 F9 04 74 34 E8 D6 E6 80  // ....V.....t4....
    2EE0: FA 15 75 07 B5 01 BB 18 00 EB 0B 80 FA 14 75 20  // ..u...........u 
    2EF0: E8 C0 00 BB 08 00 83 EC 08 8B EC 88 6E 02 88 4E  // ............n..N
    2F00: 03 8C D0 66 C1 E0 10 8B C4 E8 99 06 83 C4 08 C3  // ...f............
    2F10: 83 EC 0C 8B EC 80 F9 04 75 0A 88 4E 03 32 C0 88  // ........u..N.2..
    2F20: 46 02 EB 7D 32 C0 80 EE 21 80 FA 1E 74 15 B0 02  // F..}2...!...t...
    2F30: 80 FA 20 74 0E B0 04 80 FA 21 74 07 B0 06 80 FA  // .. t.....!t.....
    2F40: 25 75 6C 02 C6 88 46 02 88 4E 03 E8 E7 E6 88 56  // %ul...F..N.....V
    2F50: 05 8D 9C 5C 03 E8 03 0E 88 46 09 E8 93 E6 C0 E5  // ...\.....F......
    2F60: 04 8D 9C 58 03 E8 F3 0D 24 02 0A E8 E8 AA E6 80  // ...X....$.......
    2F70: F9 02 77 07 C0 E1 02 0A E9 EB 03 80 CD 0C 88 6E  // ..w............n
    2F80: 07 E8 4B E6 89 56 00 E8 76 E6 88 5E 04 E8 E3 E5  // ..K..V..v..^....
    2F90: 88 6E 06 51 E8 36 00 8A CD B0 01 D2 E0 59 88 46  // .n.Q.6.......Y.F
    2FA0: 08 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 F6 05 83  // ...f......L.....
    2FB0: C4 0C C3 32 ED C3 E8 D0 05 03 7D 04 83 3D FF 74  // ...2......}..=.t
    2FC0: 0B 3B 15 74 05 83 C7 0A EB F2 0B FF C3 8D 9C 3C  // .;.t...........<
    2FD0: 03 E8 87 0D 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E  // ....2.<.t.<.r.<.
    2FE0: 77 05 2C 08 8A E8 C3 B5 FF C3 83 EC 08 8C D0 66  // w.,............f
    2FF0: C1 E0 10 8B C4 BB 4B 00 E8 AA 05 83 C4 08 C3 83  // ......K.........
    3000: EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06  // .....~..^..V..N.
    3010: 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 87 05 8B EC  // ..f......6......
    3020: 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2  // .^..~.....V3.f..
    3030: 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58  // ....u.P3.....2.X
    3040: 53 BB 04 3E E8 7F 0C 66 8B C2 BB 00 3E E8 76 0C  // S..>...f....>.v.
    3050: 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1  // [f......u.3...f.
    3060: E2 10 BA 00 3E 83 EC 08 8B EC 66 89 56 00 88 4E  // ....>.....f.V..N
    3070: 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00  // ......F..F...F..
    3080: 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 17 05 8B EC  // ..f......N......
    3090: 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90  // .^..~......t2Q..
    30A0: 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6  // ... t....u......
    30B0: 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 5E  // ..t....<.t.....^
    30C0: 06 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E  // .Y.........v...^
    30D0: C3 8D 5C 04 E8 84 0C 8B D0 B5 02 E8 14 00 74 11  // ..\...........t.
    30E0: B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5  // .....u..a....u..
    30F0: 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80  // .........t......
    3100: FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74  // ......t........t
    3110: 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04  // ........u.......
    3120: 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3  // u..........t....
    3130: 8D 5C 09 E8 25 0C 8A C8 0A C9 75 03 32 C0 C3 B5  // .\..%.....u.2...
    3140: 02 E8 30 05 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 0A  // ..0...$.....\...
    3150: 0C 8A D0 B6 01 83 EC 08 8B EC 89 56 02 8C D0 66  // ...........V...f
    3160: C1 E0 10 8B C4 BB 4F 00 E8 3A 04 8B EC 8A 56 04  // ......O..:....V.
    3170: 83 C4 08 C3 53 81 C3 C9 05 E8 B8 0B 5B C3 53 81  // ....S.......[.S.
    3180: C3 C9 05 E8 09 0B 5B C3 53 81 C3 00 10 E8 A4 0B  // ......[.S.......
    3190: 5B C3 57 E8 AA 03 8A 45 2D B4 FF F7 45 50 20 00  // [.W....E-...EP .
    31A0: 5F C3 50 56 0F BC D8 8D 36 49 31 E8 11 06 5E 58  // _.PV....6I1...^X
    31B0: C3 00 20 00 24 00 00 00 28 00 2C 00 30 00 34 00  // .. .$...(.,.0.4.
    31C0: 38 00 00 00 3C 00 40 00 44 53 56 51 8B F7 B3 00  // 8...<.@.DSVQ....
    31D0: E8 30 00 0B F6 74 16 49 0B C9 75 04 33 FF EB 0D  // .0...t.I..u.3...
    31E0: 8B DF 03 7D 02 3B F3 74 04 E2 F5 33 FF 0B FF 59  // ...}.;.t...3...Y
    31F0: 5E 5B C3 0E 00 00 00 0A 00 06 00 08 00 0C 00 0E  // ^[..............
    3200: 00 10 00 56 8D 36 8B 31 E8 B4 05 E8 3B 03 03 DE  // ...V.6.1....;...
    3210: 8B 3F 0B FF 74 0B 03 FE 33 C9 8A 0D 83 C7 04 0B  // .?..t...3.......
    3220: FF 5E C3 51 56 53 C1 EB 0C E8 D7 FF 5B 75 04 33  // .^.QVS......[u.3
    3230: FF EB 0B 3B 1D 74 07 83 C7 08 E2 F7 33 FF 0B FF  // ...;.t......3...
    3240: 5E 59 C3 57 E8 DC FF 75 04 33 DB 5F C3 E8 02 00  // ^Y.W...u.3._....
    3250: 5F C3 52 51 8B 5D 04 0B DB 74 1B 56 E8 EA 02 03  // _.RQ.]...t.V....
    3260: DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74 06  // .^3..O..?.t.:.t.
    3270: 03 D9 EB F0 33 DB 0B DB 59 5A C3 50 8D 1C E8 45  // ....3...YZ.P...E
    3280: 0A 8B D8 E8 72 00 23 C3 74 6C 33 FF E8 3A FF 0B  // ....r.#.tl3..:..
    3290: FF 74 63 39 05 75 F5 66 33 C0 8B 45 08 8B 4D 02  // .tc9.u.f3..E..M.
    32A0: 83 F9 0A 74 18 8B 4D 0A 8B D1 81 E2 00 70 80 FE  // ...t..M......p..
    32B0: 20 75 0A 66 C1 C8 10 8B C1 66 C1 C8 10 8D 5C 0C  //  u.f.....f....\.
    32C0: E8 03 0A 66 33 C0 8B 45 04 8D 5C 04 E8 F7 09 33  // ...f3..E..\....3
    32D0: C9 8B D8 50 B0 01 E8 6A FF 58 74 0F 8A 4F 02 8B  // ...P...j.Xt..O..
    32E0: D8 B0 02 E8 5D FF 74 03 8A 6F 02 8D 5C 08 66 33  // ....].t..o..\.f3
    32F0: C0 8B C1 E8 D0 09 58 C3 56 E8 4D 02 8B 44 04 5E  // ......X.V.M..D.^
    3300: C3 56 E8 44 02 89 44 04 5E C3 E8 6A 02 8B F7 03  // .V.D..D.^..j....
    3310: 74 56 BB 00 30 B9 23 00 E8 EC 03 E8 01 00 C3 33  // tV..0.#........3
    3320: FF 33 F6 33 C9 8B FE E8 9F FE 0F 84 AA 00 8B F7  // .3.3............
    3330: 8B 54 04 80 FA 15 74 04 0B 0C EB E9 8B DA E8 E2  // .T....t.........
    3340: FE E8 E1 00 0B C8 89 04 0B C0 75 10 89 44 04 89  // ..........u..D..
    3350: 05 83 7C 02 0A 74 36 89 44 0A EB 31 E8 0F 01 89  // ..|..t6.D..1....
    3360: 44 04 89 05 83 7C 02 0A 74 06 E8 C9 00 89 44 0A  // D....|..t.....D.
    3370: F7 04 11 00 74 11 8B 44 04 E8 A2 00 75 09 33 C0  // ....t..D....u.3.
    3380: 89 05 E8 BD 00 EB 06 E8 B8 00 E8 62 01 8B 5C 08  // ...........b..\.
    3390: B8 00 11 66 C1 E0 10 8B 44 04 E8 6F 00 E8 6A 01  // ...f....D..o..j.
    33A0: 8B 5C 08 E8 39 00 E8 63 00 74 12 8B D8 8B 44 08  // .\..9..c.t....D.
    33B0: 66 C1 E0 10 8B 44 04 E8 50 01 E8 32 01 8B 5C 04  // f....D..P..2..\.
    33C0: 0B DB 0F 84 5F FF 8B 44 08 E8 40 00 66 C1 E0 10  // ...._..D..@.f...
    33D0: 33 C0 E8 35 01 E9 4D FF E8 6E 01 89 4C 04 C3 51  // 3..5..M..n..L..Q
    33E0: 53 E8 CF 00 83 C3 0C E8 71 09 8B C8 5B B0 14 E8  // S.......q...[...
    33F0: 51 FE 74 16 F6 C1 01 74 04 83 67 02 FD 83 4F 02  // Q.t....t..g...O.
    3400: 04 F6 C1 0C 75 04 83 67 02 FB 59 C3 53 83 7C 02  // ....u..g..Y.S.|.
    3410: 0A 74 09 8B 5C 0A 0B DB 74 02 8B C3 5B C3 3C 01  // .t..\...t...[.<.
    3420: 74 02 3C 02 C3 53 E8 8A 00 E8 2F 09 5B C3 E8 F4  // t.<..S..../.[...
    3430: FF 66 C1 E8 10 C3 53 E8 79 00 83 C3 08 E8 1B 09  // .f....S.y.......
    3440: 5B C3 57 B0 04 E8 0A FE C6 47 02 01 8B 05 E8 CD  // [.W......G......
    3450: FF 75 0D F7 04 11 00 74 07 C6 47 02 02 83 C3 08  // .u.....t..G.....
    3460: 8B 04 89 47 08 E8 C6 FF 66 89 47 04 5F C3 53 57  // ...G....f.G._.SW
    3470: 52 E8 3F 00 83 C3 04 E8 E1 08 8B D0 E8 84 FC 75  // R.?............u
    3480: 14 8B 5C 08 8B D3 E8 24 F9 E8 97 FD 75 07 8B D0  // ..\....$....u...
    3490: E8 82 FC 8B C2 5A 5F 5B C3 E8 D2 FF 66 C1 E8 10  // .....Z_[....f...
    34A0: B4 11 E8 25 00 C3 E8 C5 FF 66 C1 E8 18 B4 10 E8  // ...%.....f......
    34B0: 18 00 C3 51 52 33 C9 8A CE 80 E1 07 49 B8 10 00  // ...QR3......I...
    34C0: F7 E1 BB 14 30 03 D8 5A 59 C3 57 53 51 3C FF 75  // ....0..ZY.WSQ<.u
    34D0: 04 33 C0 EB 16 33 C9 8A C8 8A C4 BB 03 71 E8 42  // .3...3.......q.B
    34E0: FD E8 6E FD 83 C3 02 03 D9 8A 07 59 5B 5F C3 B0  // ..n........Y[_..
    34F0: 01 E8 5E FD 74 13 E8 A0 FF 88 47 02 B0 02 E8 51  // ..^.t.....G....Q
    3500: FD 74 06 E8 A0 FF 88 47 02 C3 E8 16 FD 74 23 56  // .t.....G.....t#V
    3510: 8B 5D 02 E8 33 00 03 DE 5E 0B C0 74 07 C6 47 03  // .]..3...^..t..G.
    3520: 01 89 47 04 66 C1 E8 10 0B C0 74 06 C6 07 01 89  // ..G.f.....t.....
    3530: 47 01 C3 8B DA B0 14 E8 09 FD 74 03 8B 5F 02 C3  // G.........t.._..
    3540: BF C8 01 8B 3D 8B 7D 0C C3 BE C8 01 8B 34 8B 74  // ....=.}......4.t
    3550: 30 C3 1E 0E 1F BF C8 01 8B 3D 8B 7D 0E 83 C7 04  // 0........=.}....
    3560: 1F C3 BE C8 01 8B 34 8B 74 10 C3 BF C8 01 8B 3D  // ......4.t......=
    3570: 8B 7D 26 83 C7 04 C3 BF C8 01 8B 3D 8B 7D 40 C3  // .}&........=.}@.
    3580: BE C8 01 8B 34 8B 74 1A C3 BF C8 01 8B 3D 8B 7D  // ....4.t......=.}
    3590: 3A C3 BF C8 01 8B 3D 8B 7D 0A 83 C7 04 B9 08 00  // :.....=.}.......
    35A0: C3 E8 01 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0  // ...........F.f3.
    35B0: C6 46 04 00 89 46 02 06 52 8A D3 8B C5 E8 69 1A  // .F...F..R.....i.
    35C0: 5A 07 83 C4 06 C3 E8 77 FF F7 45 50 01 00 C3 E8  // Z......w..EP....
    35D0: 6E FF 83 4D 50 01 C3 E8 66 FF 88 45 58 C3 66 53  // n..MP...f..EX.fS
    35E0: 83 EC 28 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66  // ..(..f.^.f.N...f
    35F0: C1 E0 10 8B C4 BB 00 00 E8 AA FF 83 C4 28 66 5B  // .............(f[
    3600: E8 40 00 83 EC 14 8B EC C6 46 01 07 8C D0 66 C1  // .@.......F....f.
    3610: E0 10 8B C4 BB 0D 00 E8 8B FF 83 C4 14 33 C9 B5  // .............3..
    3620: 00 E8 B7 F2 B5 00 E8 AB F2 FE C1 E8 69 00 38 C1  // ............i.8.
    3630: 72 ED E8 93 01 BB 04 00 E8 39 FB 66 C1 E8 10 E8  // r........9.f....
    3640: 95 FF C3 83 EC 0C 8B EC 66 89 5E 00 8C D0 66 C1  // ........f.^...f.
    3650: E0 10 8B C4 BB 0A 00 E8 4B FF 83 C4 0C C3 E8 DF  // ........K.......
    3660: FE 66 8B 5D 08 66 8B 4D 0C C3 57 E8 D2 FE 66 8B  // .f.].f.M..W...f.
    3670: 45 28 5F C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // E(_.......N...f.
    3680: E0 10 8B C4 BB 38 00 E8 1B FF 8B EC 8A 6E 02 83  // .....8.......n..
    3690: C4 04 C3 C3 B0 03 C3 B0 02 C3 B0 03 C3 B0 08 C3  // ................
    36A0: E8 9D FE 8B 45 56 0B C0 C3 53 66 50 66 33 C0 E8  // ....EV...SfPf3..
    36B0: 14 06 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 66 B8  // .......fX[.2..f.
    36C0: C0 D4 01 00 C3 B5 02 C3 53 BF C8 01 8B 3D 8B 7D  // ........S....=.}
    36D0: 38 0B FF 74 15 8B 1D 03 DF 83 C7 04 3A 45 08 74  // 8..t........:E.t
    36E0: 09 83 C7 0C 3B FB 72 F4 33 FF 0B FF 5B C3 FC E8  // ....;.r.3...[...
    36F0: 69 06 66 C1 CB 10 E8 CD 05 66 C1 CB 10 66 81 C3  // i.f......f...f..
    3700: 04 00 04 00 E2 E9 C3 FC 66 AD E8 B9 05 83 C3 04  // ........f.......
    3710: E2 F6 C3 FC E8 44 06 66 AB 83 C3 04 E2 F6 C3 66  // .....D.f.......f
    3720: 50 B8 64 00 E8 10 00 66 58 C3 66 50 B8 50 C3 D1  // P.d....fX.fP.P..
    3730: E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 35 04 66  // ....fX.R.....5.f
    3740: 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2  // S..f.....f......
    3750: 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00  // .f...f3.f.f.....
    3760: B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66  // ..f...f.3.f..s.f
    3770: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
    3780: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
    3790: BB 42 EC E8 9E 05 66 33 D2 66 BB 64 00 00 00 66  // .B....f3.f.d...f
    37A0: F7 F3 C3 66 50 53 BB 07 00 E8 C8 F9 25 00 02 35  // ...fPS......%..5
    37B0: 00 02 0B C0 5B 66 58 C3 BB 0A 15 E8 76 05 C3 32  // ....[fX.....v..2
    37C0: FF D1 E3 03 F3 8B 1C C3 E8 ED FF 66 3D 00 08 00  // ...........f=...
    37D0: 00 76 06 BB 0C 15 E8 5B 05 66 C1 E0 0A 66 83 E8  // .v.....[.f...f..
    37E0: 20 E8 9C FD 66 89 44 04 C7 44 08 20 00 C3 56 1E  //  ...f.D..D. ..V.
    37F0: 0E 1F E8 8B FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3  // .....f.D.f....^.
    3800: E8 C5 FF BB 00 7C 06 E8 6D FD 0E 07 BB 00 7C E8  // .....|..m.....|.
    3810: 49 05 66 3B 05 75 19 B9 80 00 FC E8 F5 FE BB 00  // I.f;.u..........
    3820: 7E BF C8 01 8B 3D 8B 7D 22 B9 80 00 FC E8 E3 FE  // ~....=.}".......
    3830: E8 0D FD 8B F7 E8 3F FD 66 8B 45 08 66 0B C0 74  // ......?.f.E.f..t
    3840: 04 66 89 44 14 66 8B 45 04 66 0B C0 74 04 66 89  // .f.D.f.E.f..t.f.
    3850: 44 08 66 8B 45 0C 66 89 44 0C 8B DF 81 C3 CE 00  // D.f.E.f.D.......
    3860: B9 08 00 66 8B 47 02 66 0B C0 75 07 83 EB 06 E2  // ...f.G.f..u.....
    3870: F2 EB 04 66 89 44 28 57 03 7D 56 8A 85 86 00 5F  // ...f.D(W.}V...._
    3880: 88 44 3C B8 DF FF 21 44 50 8B 45 40 0B C0 74 14  // .D<...!DP.E@..t.
    3890: 83 4C 50 20 80 BD 3F 01 00 74 09 50 8A 85 3F 01  // .LP ..?..t.P..?.
    38A0: 88 44 2D 58 E8 BB FC 0B F6 74 03 89 44 32 E8 B1  // .D-X.....t..D2..
    38B0: FC 0B F6 74 70 8B 45 58 0B C0 74 08 89 44 22 B0  // ...tp.EX..t..D".
    38C0: 02 08 44 30 8B 85 34 01 0B C0 74 03 89 44 40 F6  // ..D0..4...t..D@.
    38D0: 85 36 01 08 74 24 80 64 28 FD F6 85 36 01 01 74  // .6..t$.d(...6..t
    38E0: 04 80 4C 28 02 80 64 28 8F F6 85 36 01 04 75 06  // ..L(..d(...6..u.
    38F0: 80 4C 28 10 EB 04 80 4C 28 20 F6 45 34 01 75 05  // .L(....L( .E4.u.
    3900: C7 44 20 00 00 57 03 7D 56 8A 85 87 00 88 44 42  // .D ..W.}V.....DB
    3910: 5F B9 07 00 8D 9D 38 01 8A 07 0A C0 74 03 88 44  // _.....8.....t..D
    3920: 34 43 46 E2 F3 57 8B 9D 10 01 0B DB 74 1C B0 09  // 4CF..W......t...
    3930: E8 95 FD 74 05 89 5D 04 EB 10 B0 07 E8 89 FD 89  // ...t..].........
    3940: 5D 04 B0 0B E8 81 FD 89 5D 04 5F 8D 9D 18 01 B0  // ].......]._.....
    3950: 05 E8 A3 00 8D 9D 1C 01 B0 04 E8 9A 00 8D 9D 14  // ................
    3960: 01 B0 06 E8 91 00 BB 04 71 B0 09 E8 D5 F8 74 0C  // ........q.....t.
    3970: 57 03 7D 56 8A 85 85 00 88 47 04 5F 80 7D 03 07  // W.}V.....G._.}..
    3980: 72 22 8A 45 5C 0A C0 74 1B B9 28 00 8D 36 A8 00  // r".E\..t..(..6..
    3990: 83 C6 02 8D 5D 5C 8A 07 0A C0 75 02 B0 20 88 04  // ....]\....u.. ..
    39A0: 43 46 E2 F2 80 7D 5A 04 75 0A 56 8D 36 A6 00 B0  // CF...}Z.u.V.6...
    39B0: 34 88 04 5E 07 C3 8B DF 81 C3 D4 00 B9 05 00 3A  // 4..^...........:
    39C0: 47 04 74 08 83 C3 08 E2 F6 33 C0 C3 66 33 C0 8A  // G.t......3..f3..
    39D0: 47 06 66 33 D2 66 BB 71 02 00 00 66 F7 E3 66 BA  // G.f3.f.q...f..f.
    39E0: 78 5D 02 00 66 2B D0 66 8B C2 66 33 D2 66 BB 64  // x]..f+.f..f3.f.d
    39F0: 00 00 00 66 F7 F3 C3 57 E8 CD FC 74 13 8B 07 0B  // ...f...W...t....
    3A00: C0 74 0D 89 45 04 8B 47 02 0B C0 74 03 89 45 06  // .t..E..G...t..E.
    3A10: 5F C3 57 E8 2A FB 8B 45 52 5F C3 56 E8 43 FB 8B  // _.W.*..ER_.V.C..
    3A20: 4C 22 8A 44 29 5E C3 BE C8 01 8B 34 8B 74 1E 83  // L".D)^.....4.t..
    3A30: C6 04 B9 1C 00 C3 E8 3E FB F6 45 34 01 75 03 33  // .......>..E4.u.3
    3A40: FF C3 56 53 33 FF E8 19 FB 8B 5C 20 0B DB 74 12  // ..VS3.....\ ..t.
    3A50: 03 F3 80 3C 04 75 0B 80 7C 01 80 72 05 8B FE 83  // ...<.u..|..r....
    3A60: C7 02 5B 5E C3 56 E8 F9 FA 8A 6C 28 80 E5 70 C0  // ..[^.V....l(..p.
    3A70: ED 04 5E C3 56 E8 EA FA 53 81 C3 09 01 E8 DB 02  // ..^.V...S.......
    3A80: 8A E8 5B 53 81 C3 00 01 E8 D0 02 5B 8A C5 66 89  // ..[S.......[..f.
    3A90: 44 3C 5E C3 56 E8 CA FA 66 8B 44 3C 53 81 C3 00  // D<^.V...f.D<S...
    3AA0: 01 E8 22 02 5B 53 81 C3 08 01 B1 01 8A E8 E8 59  // ..".[S.........Y
    3AB0: 02 5B 5E C3 56 E8 AA FA 8B FE 83 C7 04 5E C3 56  // .[^.V........^.V
    3AC0: E8 9F FA 8A 44 28 80 FD 00 74 0E 24 8F C0 E5 04  // ....D(...t.$....
    3AD0: 0A C5 80 FD 20 75 02 0C 02 24 FE 81 7C 04 34 21  // .... u...$..|.4!
    3AE0: 76 02 0C 01 88 44 28 E8 08 F6 75 04 80 4C 30 01  // v....D(...u..L0.
    3AF0: 5E C3 57 E8 81 FA 8A 45 34 5F 80 FB 02 75 07 A8  // ^.W....E4_...u..
    3B00: 04 75 1B 0C 01 C3 80 FB 01 75 07 A8 02 75 0F 0C  // .u.......u...u..
    3B10: 01 C3 80 FB 81 75 07 A8 08 75 03 0C 01 C3 32 C0  // .....u...u....2.
    3B20: C3 E8 53 FA 66 8B 45 38 C3 83 EC 0C 8B EC 66 C1  // ..S.f.E8......f.
    3B30: C0 10 B8 01 00 66 89 46 00 8C D0 66 C1 E0 10 8B  // .....f.F...f....
    3B40: C4 BB 43 00 E8 5E FA 83 C4 0C C3 66 57 53 51 E8  // ..C..^.....fWSQ.
    3B50: 25 FA 8B DF 81 C3 A4 00 B9 08 00 66 8B 47 02 66  // %..........f.G.f
    3B60: 3B C2 73 09 83 C3 06 E2 F2 33 C0 EB 02 8B 07 59  // ;.s......3.....Y
    3B70: 5B 66 5F C3 66 50 8C C8 3D 00 C0 75 10 BA C3 03  // [f_.fP..=..u....
    3B80: EC 8A F0 0A F6 74 06 B2 4C 66 ED EB 17 53 2E 8B  // .....t..Lf...S..
    3B90: 1E BC 01 B2 20 E8 DD 00 A8 01 75 05 B2 14 E8 D4  // .... .....u.....
    3BA0: 00 8A F4 5B 32 D2 66 58 C3 2E 8B 1E BC 01 C3 0B  // ...[2.fX........
    3BB0: C9 75 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B  // .u.Kt.C;.w.....+
    3BC0: D2 F7 F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72  // ..........+..;.r
    3BD0: 1A 75 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8  // .u.;.w.+...+.+..
    3BE0: 01 00 C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B  // ...+.+.....UV+..
    3BF0: EE 03 DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8  // .....r.E;.r.w.;.
    3C00: 76 EF F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1  // v....Mx ....+...
    3C10: F5 72 F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1  // .r...Mx.........
    3C20: 73 F1 EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2  // s.............3.
    3C30: 5E 5D C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74  // ^]..P...t......t
    3C40: 04 F7 E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80  // .....X.....RfP..
    3C50: 8A C7 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66  // ..f.......$....f
    3C60: EF 66 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC  // .fXZ.R...f.Z.R..
    3C70: 0C 66 EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF  // .f.Z..1.........
    3C80: 9D C3 E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52  // ...$...........R
    3C90: 66 53 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3  // fSfP...fXf[Z.f..
    3CA0: 10 66 C1 EB 0E E8 CC FE E8 4C 01 C3 66 50 66 C1  // .f.......L..fPf.
    3CB0: E3 10 66 C1 EB 10 E8 35 FB 66 03 D8 66 81 CB 00  // ..f....5.f..f...
    3CC0: 00 00 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3  // ...fX.RfS...f[Z.
    3CD0: 66 50 E8 9F FE E8 D4 FF E8 1C 01 66 58 C3 52 51  // fP.........fX.RQ
    3CE0: 66 53 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8  // fSfP............
    3CF0: 82 FE E8 B7 FF E8 E6 00 66 D3 C8 58 50 66 D3 C0  // ........f..XPf..
    3D00: E8 F4 00 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03  // ...fXf[YZ.fPQ...
    3D10: E8 48 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66  // .H.f....f.....Yf
    3D20: 58 C3 66 50 51 C0 E1 03 E8 30 00 66 D3 C8 59 8A  // X.fPQ....0.f..Y.
    3D30: E8 66 58 C3 E8 54 00 C3 E8 39 FE 66 C1 E3 10 66  // .fX..T...9.f...f
    3D40: C1 EB 0E E8 98 00 C3 52 66 53 E8 04 00 66 5B 5A  // .......RfS...f[Z
    3D50: C3 E8 20 FE E8 55 FF E8 84 00 C3 51 66 52 8A EB  // .. ..U.....QfR..
    3D60: 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80 F9  // ................
    3D70: 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04 66  // .t.f...........f
    3D80: 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8 A7  // .f.....fZY.RfS..
    3D90: FF 66 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C  // .f[Z.fPURfP...V.
    3DA0: 89 56 08 E8 CE FD 33 C0 B2 18 EF B2 00 66 ED 66  // .V....3......f.f
    3DB0: 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 B3  // .F.fXZ].fPUR....
    3DC0: FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66  // ...f.F.f..V..V.f
    3DD0: 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 81  // .F.f.F.Z]fXfX.f.
    3DE0: FB FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00  // .....w.....f....
    3DF0: 66 EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04  // f...f..f......w.
    3E00: 8A D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF  // ....f...f.f...f.
    3E10: C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B EC 53 51  // ...........U..SQ
    3E20: 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC  // ..&.\.&.L..(..f.
    3E30: 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14  // Y[].SQ..&.\$3...
    3E40: 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26  // .Y[.U..SQ..&.\.&
    3E50: 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E  // .L...RVW.......N
    3E60: FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20  // .....&.|&.E.2.. 
    3E70: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    3E80: 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7  // .M.2............
    3E90: D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26  // ...&!D.&!|.....&
    3EA0: 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66  // .|&.M.2.. .+...f
    3EB0: C7 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2  // .F........n..^..
    3EC0: F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1  // ..M.2....V......
    3ED0: D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06  // ...#F.#V..M.2...
    3EE0: D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F  // ......&.D.&.T.._
    3EF0: 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F  // ^Z.U..SQRWP..&..
    3F00: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    3F10: E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46  // .........M..N..F
    3F20: F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26  // .....N.........&
    3F30: 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53  // .G.&....f._Z...S
    3F40: 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01  // QRW......&.w&.L.
    3F50: 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06  // 2.. .+..........
    3F60: D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B  // ......&..&.M.2..
    3F70: C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    3F80: 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E  // .&!W._...SV.....
    3F90: C2 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A  // .&.w&.<.ts.<.uX.
    3FA0: 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75  // D.2.&....uL&;G.u
    3FB0: 46 8A 04 6B F0 03 8A 84 78 A2 26 01 47 26 8C D0  // F..k....x.&.G&..
    3FC0: 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B  // ..&.w&.<.t...2.k
    3FD0: F0 03 8B C3 FF 94 76 A2 26 8B 77 26 8A 04 32 E4  // ......v.&.w&..2.
    3FE0: EB D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47  // ...D.&)G&&.G&&.G
    3FF0: 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B  // .&.w...&.w&..2.k
    4000: F0 03 8A 84 78 A2 26 01 47 26 E9 80 FF 33 C0 33  // ....x.&.G&...3.3
    4010: F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26  // ...^[.SQRV...w5&
    4020: 8B 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26  // .T.&.W.&.G.....&
    4030: 8B 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E  // .G 3.&.G.&.T....
    4040: C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75  // .&.G/.....&..4.u
    4050: 22 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26  // "&.w.&.w.u.&.g.&
    4060: D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 E4 11  // .W.&.g.&.W......
    4070: E9 E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47  // ...&.G42.....&.G
    4080: 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B  // .&.W.........SV.
    4090: D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37  // ..w5&.D.2....&.7
    40A0: 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04  // &.4..&.G.&._.&..
    40B0: 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77  // &.\.^[.SRV.....w
    40C0: 35 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02  // 5..&.T...@s!&.w.
    40D0: 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26  // 2....&.t...&.W.&
    40E0: 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41  // .G.&..&.D......A
    40F0: 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89  // u.&.G.&.W.&.G.&.
    4100: 57 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57  // W..h..@u.&.G.&.W
    4110: 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A  // .&.G.&.W..Q..Bu.
    4120: 26 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26  // &.G.&.G".B..Cu.&
    4130: 8A 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B  // .G.&.G3.3..Fu.&.
    4140: 57 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C  // W.&.G.&.W.&.G...
    4150: 80 FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80  // ..Gu.&.G.&.G$...
    4160: FA 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3  // .Hu.&.G.&.G ^Z[.
    4170: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47  // SV...w5&.D.2.&.G
    4180: 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B  // .&.G...^[.SV..&.
    4190: 77 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7  // w.&.t...2.&.G.&.
    41A0: 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53  // G...&._.&.G.^[.S
    41B0: 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77  // V..&.w.&.t..4&.w
    41C0: 14 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02  // .&.G...&._.&.G..
    41D0: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    41E0: 04 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02  // ..t.&.G.&.w.&._.
    41F0: 26 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF  // &.G..^[.SRV...p.
    4200: 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA  // ..&.G.&.W.......
    4210: D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 96 10 E9  // ..&.G.&.T.......
    4220: 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53  // J.S..&._.&.G.[.S
    4230: 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B  // ..&._.&.G..[.SV.
    4240: D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14  // ..k...&.W 3.&.W.
    4250: 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4  // &.D.....&.G.2...
    4260: 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47  // .=..u.2.3.^[.&.G
    4270: 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00  // .2....=..t.&..4.
    4280: 75 08 8B C3 E8 9A 0F 5E 5B C3 26 8A 47 34 32 E4  // u......^[.&.G42.
    4290: 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E  // &.G.&.G........^
    42A0: 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26  // [.S.....&.G....&
    42B0: 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3  // ..&....&..&.W.[.
    42C0: C6 42 BB 42 D1 42 20 43 D7 42 EF 42 09 43 14 43  // .B.B.B C.B.B.C.C
    42D0: 1A 43 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83  // .CSQV.........&.
    42E0: 7F 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02  // ...u"&...@s.&.w.
    42F0: 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07  // &._....&.D...&..
    4300: 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83  // &.W..{.&.w.&.G..
    4310: C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF  // .....uq...wl....
    4320: A4 58 42 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B  // .XB&.G.&.W..T.&.
    4330: 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26  // G.&.W..I.&.G".K&
    4340: 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2  // .O32....3.......
    4350: E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00  // .....+.&.O32....
    4360: 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11  // 3...............
    4370: 05 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24  // .&.G.&.W....&.G$
    4380: EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53  // ..&.G ..3.3....S
    4390: 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A  // V.......&.G.&.W.
    43A0: D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16  // ........&.G.&.T.
    43B0: 8B C3 E8 81 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B  // .....^[.3.3..SV.
    43C0: D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54  // ....&.w.&.w"...T
    43D0: 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26  // .^[.S..&.G+....&
    43E0: 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B  // .G.&.W.[.S..&.G+
    43F0: 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2  // ......S..&.G+...
    4400: FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03  // ...S....5&._....
    4410: 80 E3 07 32 FF 03 DB FF 97 06 A2 5B C3 53 52 56  // ...2.......[.SRV
    4420: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    4430: 22 A2 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4  // ".&.G.&.W.&.G-2.
    4440: 8B F0 03 F0 8B C3 FF 94 3A A2 26 89 47 04 26 89  // ........:.&.G.&.
    4450: 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED  // W....SQV..&.O+2.
    4460: 8B F1 8A 8C 6A A2 E3 0A 26 D1 6F 06 26 D1 5F 04  // ....j...&.o.&._.
    4470: E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 4A  // ..&.O+2........J
    4480: A2 8B B4 4C A2 26 21 4F 04 26 21 77 06 26 8A 4F  // ...L.&!O.&!w.&.O
    4490: 2A 32 ED 8B F1 8A 8C 72 A2 E3 0A 26 D1 67 04 26  // *2.....r...&.g.&
    44A0: D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F  // .W...&.O.&.w.&.O
    44B0: 14 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C  // .&.w....SQRVW...
    44C0: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // ...&.G+2......&.
    44D0: 47 2A 8B F8 8A 8D 72 A2 32 ED 8B 84 4A A2 8B 94  // G*....r.2...J...
    44E0: 4C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // L.............&!
    44F0: 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C  // G.&!W.&.G*2.....
    4500: 72 A2 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // r.2...&.o.&._...
    4510: 26 8A 47 2B 8B F0 C1 E6 02 8B 84 4A A2 8B 94 4C  // &.G+.......J...L
    4520: A2 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    4530: F0 8A 8C 72 A2 32 ED E3 0A 26 D1 67 08 26 D1 57  // ...r.2...&.g.&.W
    4540: 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26  // ...&.G.&.W.&.G.&
    4550: 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A  // .W._^ZY[.SQV..&.
    4560: 4F 2B 32 ED 8B F1 8A 8C 6A A2 E3 0A 26 D1 6F 06  // O+2.....j...&.o.
    4570: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    4580: 02 8B 8C 4A A2 8B B4 4C A2 26 21 4F 04 26 21 77  // ...J...L.&!O.&!w
    4590: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 72 A2 E3 0A 26  // .&.O*2.....r...&
    45A0: D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    45B0: F1 C1 E6 02 8B 8C 4A A2 8B B4 4C A2 26 21 4F 08  // ......J...L.&!O.
    45C0: 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0  // &!w....QRW......
    45D0: 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03  // &..+.t.&.G,2....
    45E0: F0 8B C3 FF 94 22 A2 26 89 47 08 26 89 57 0A EB  // .....".&.G.&.W..
    45F0: 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 2E  // .&.G,2..........
    4600: A2 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 3A  // .&.G-2.........:
    4610: A2 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F  // .&.G.&.W.....&..
    4620: 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26  // +.tJ&.G+2......&
    4630: 8A 47 2A 8B F8 8A 8D 72 A2 32 ED 8B 84 4A A2 8B  // .G*....r.2...J..
    4640: 94 4C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26  // .L.............&
    4650: 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04  // !G.&!W......&.G.
    4660: 26 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B  // &.W.&.G.&.W...&.
    4670: 57 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    4680: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 16 A2 5F 5A  // G,2..........._Z
    4690: 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B  // Y.SQRVW..&.G*2..
    46A0: F0 8A 8C 72 A2 32 ED E3 0A 26 D1 67 04 26 D1 57  // ...r.2...&.g.&.W
    46B0: 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .......&.G+2....
    46C0: E6 02 26 8A 47 2A 8B F8 8A 8D 72 A2 32 ED 8B 84  // ..&.G*....r.2...
    46D0: 4A A2 8B 94 4C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // J...L...........
    46E0: F7 D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B  // ..&.G.&.W.&.G.&.
    46F0: 57 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC  // W.&!G.&!W..V.U..
    4700: 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // QRP..&.G,2......
    4710: C3 FF 94 22 A2 26 89 47 08 26 89 57 0A 26 8A 47  // ...".&.G.&.W.&.G
    4720: 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57  // +.F......&.G.&.W
    4730: 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 3A  // .&.O-2.........:
    4740: A2 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46  // .&.G.&.W....D..F
    4750: FA 32 E4 8B F0 8A 8C 6A A2 E3 0A 26 D1 6F 16 26  // .2.....j...&.o.&
    4760: D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02  // ._...&.W+2......
    4770: 8B 84 4A A2 8B 94 4C A2 26 21 47 14 26 21 57 16  // ..J...L.&!G.&!W.
    4780: 26 8A 47 2A 32 E4 8B F0 8A 8C 72 A2 32 ED E3 0A  // &.G*2.....r.2...
    4790: 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B  // &.g.&.W...&.G.&.
    47A0: 57 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4  // W.&.G.&.W.&.G,2.
    47B0: 8B F0 03 F0 8B C3 FF 94 16 A2 8D 66 FC 5A 59 5D  // ...........f.ZY]
    47C0: C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A  // .Q...V.&.O+2....
    47D0: 8C 6A A2 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B  // .j...&.o.&._....
    47E0: C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3  // ....&.O,2.......
    47F0: FF 94 16 A2 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC  // ....Y...."....U.
    4800: 26 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A  // &.G.&.w.&.G.&.w.
    4810: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 16 A2  // &.G,2...........
    4820: C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47  // .SV........(.&.G
    4830: 04 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47  // .&.w.&1G.&1w.&.G
    4840: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 16 A2 5E 5B C3  // ,2...........^[.
    4850: 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F  // SQV..........&.O
    4860: 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8  // ...&.g.&.W......
    4870: 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94  // F.&.O,2.........
    4880: 16 A2 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3  // ..^Y[.SQV.......
    4890: E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    48A0: 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB  // .....R...r......
    48B0: 8B F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11  // ..&.G.&.W.&.G.&.
    48C0: 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03  // T......&.G,2....
    48D0: F0 8B C3 FF 94 16 A2 5A C3 52 8B D8 E8 3E FB 8B  // .......Z.R...>..
    48E0: C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29  // ..q...&.G.&.W.&)
    48F0: 47 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B  // G.&.T...QR......
    4900: C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ..U.&.D.&.T.&.\.
    4910: 26 8B 4C 06 E8 1C F3 26 89 44 0C 26 89 54 0E 5A  // &.L....&.D.&.T.Z
    4920: 59 C3 51 52 57 8B F0 E8 F3 FA 8B C6 E8 2A FC 26  // Y.QRW........*.&
    4930: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    4940: 6D F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26 8B  // m.&.D.&.T.....&.
    4950: 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 4E  // D.&.T.&.\.&.L..N
    4960: F2 26 89 5C 10 26 89 4C 12 E9 22 FD 51 52 8B D8  // .&.\.&.L..".QR..
    4970: E8 AA FA 8B C3 E8 E1 FB 8C D1 8E C1 26 8B 47 08  // ............&.G.
    4980: 26 8B 57 0A 26 3B 57 06 75 0E 26 3B 47 04 75 08  // &.W.&;W.u.&;G.u.
    4990: 26 C6 47 30 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B  // &.G0.ZY...&.G.&;
    49A0: 47 06 72 08 75 0A 26 3B 57 04 73 04 33 C0 EB 03  // G.r.u.&;W.s.3...
    49B0: B8 02 00 26 88 47 30 5A 59 C3 51 52 57 8B D8 26  // ...&.G0ZY.QRW..&
    49C0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 22 A2 26  // .G,2.........".&
    49D0: 89 47 08 26 89 57 0A 8C D0 8E C0 26 8A 47 2B 32  // .G.&.W.....&.G+2
    49E0: E4 8B F0 C1 E6 02 8B F8 8A 8D 6A A2 32 ED 8B 84  // ..........j.2...
    49F0: 4A A2 8B 94 4C A2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // J...L...........
    4A00: F7 D2 26 21 47 08 26 21 57 0A E9 71 FC 55 8B EC  // ..&!G.&!W..q.U..
    4A10: 51 52 57 83 EC 06 8B D8 26 8A 47 2B 32 E4 8B F0  // QRW.....&.G+2...
    4A20: C1 E6 02 8B F8 8A 8D 6A A2 32 ED 8B 84 4A A2 89  // .......j.2...J..
    4A30: 46 F4 8B 84 4C A2 89 46 F6 E3 08 D1 66 F4 D1 56  // F...L..F....f..V
    4A40: F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C  // ....~..F..F.&.G,
    4A50: 32 E4 8B F0 03 F0 8B C3 FF 94 22 A2 26 89 47 08  // 2.........".&.G.
    4A60: 26 89 57 0A 8B C3 E8 6B F9 26 89 47 04 26 89 57  // &.W....k.&.G.&.W
    4A70: 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47 08 26 23  // ......V...&#G.&#
    4A80: 57 0A 26 89 47 14 26 89 57 16 26 21 7F 08 8B 46  // W.&.G.&.W.&!...F
    4A90: F6 26 21 47 0A 8C D1 8D 77 35 8E C1 26 80 3C 19  // .&!G....w5..&.<.
    4AA0: 73 12 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A  // s.&.O...&.g.&.W.
    4AB0: E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1  // ....&.O...&.o.&.
    4AC0: 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26 21 47 0A 26  // _...&!...F.&!G.&
    4AD0: 8B 57 14 26 8B 47 16 26 09 57 08 26 09 47 0A 26  // .W.&.G.&.W.&.G.&
    4AE0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 16 A2 8D  // .G,2............
    4AF0: 66 FA 5F E9 C7 FC 52 8B D8 E8 21 F9 8B C3 E8 58  // f._...R...!....X
    4B00: FA 26 8B 47 08 26 8B 57 0A 26 85 57 06 75 06 26  // .&.G.&.W.&.W.u.&
    4B10: 85 47 04 74 05 B8 03 00 EB 03 B8 01 00 26 88 47  // .G.t.........&.G
    4B20: 30 5A C3 53 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B  // 0Z.SQRV..&.O-2..
    4B30: F1 03 F1 FF 94 3A A2 26 89 47 04 26 89 57 06 26  // .....:.&.G.&.W.&
    4B40: 8A 47 2B 32 E4 8B F0 8A 8C 6A A2 E3 0A 26 D1 6F  // .G+2.....j...&.o
    4B50: 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02  // .&._...&.G+.....
    4B60: 8B 84 4A A2 8B 94 4C A2 26 21 47 04 26 21 57 06  // ..J...L.&!G.&!W.
    4B70: E9 E1 F9 52 8B D8 E8 AA FF 26 8B 47 04 26 8B 57  // ...R.....&.G.&.W
    4B80: 06 26 89 47 18 26 89 57 1A 5A C3 51 52 8B D8 E8  // .&.G.&.W.Z.QR...
    4B90: 91 FF 8C D0 8E C0 26 8B 77 02 26 8B 74 02 81 3C  // ......&.w.&.t..<
    4BA0: 5A 5A 74 5B 26 8B 77 02 26 8B 74 02 80 3C 63 75  // ZZt[&.w.&.t..<cu
    4BB0: E1 26 8B 77 02 26 FF 44 02 8B C3 E8 45 F8 26 89  // .&.w.&.D....E.&.
    4BC0: 47 08 26 89 57 0A 8B C3 E8 1E F8 26 89 47 14 26  // G.&.W......&.G.&
    4BD0: 89 57 16 8C D1 8E C1 26 8B 57 04 26 8B 47 06 26  // .W.....&.W.&.G.&
    4BE0: 3B 47 0A 75 AD 26 3B 57 08 75 A7 26 8B 77 02 26  // ;G.u.&;W.u.&.w.&
    4BF0: 8B 04 26 03 47 14 8B DE 26 89 47 02 5A 59 C3 26  // ..&.G...&.G.ZY.&
    4C00: 8B 5F 02 26 83 47 02 02 5A 59 C3 52 57 8B D8 8C  // ._.&.G..ZY.RW...
    4C10: D0 8E C0 26 8B 77 02 26 8B 74 02 8A 54 01 84 D2  // ...&.w.&.t..T...
    4C20: 75 08 26 C7 47 22 00 00 EB 2F 80 FA FF 75 14 26  // u.&.G".../...u.&
    4C30: 8B 77 02 26 8B 3F 26 8B 34 26 2B 75 02 26 89 77  // .w.&.?&.4&+u.&.w
    4C40: 22 EB 16 26 8B 07 E8 C7 03 8B F0 8A C2 32 E4 03  // "..&.........2..
    4C50: C0 03 F0 8B 04 26 89 47 22 26 8B 5F 02 26 83 47  // .....&.G"&._.&.G
    4C60: 02 02 5F 5A C3 8B D8 26 80 67 2F F9 26 8B 77 02  // .._Z...&.g/.&.w.
    4C70: 26 8B 74 02 8A 44 01 26 88 47 34 26 8B 5F 02 26  // &.t..D.&.G4&._.&
    4C80: 83 47 02 03 C3 8B D8 26 8B 77 02 26 8B 74 02 8B  // .G.....&.w.&.t..
    4C90: 74 01 26 89 77 20 EB E3 53 8B D8 26 8A 47 2C 32  // t.&.w ..S..&.G,2
    4CA0: E4 24 03 26 80 67 2F F9 C1 E0 09 26 09 47 2E E9  // .$.&.g/....&.G..
    4CB0: 73 F5 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // s...&.w.&.t..D.2
    4CC0: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 24 05  // .&.G.&.G......$.
    4CD0: 26 8B 5F 02 26 83 47 02 02 C3 8B D8 26 8B 77 02  // &._.&.G.....&.w.
    4CE0: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    4CF0: 06 00 00 8B C3 E8 EC 04 EB D6 53 56 8B D8 26 8B  // ..........SV..&.
    4D00: 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26  // w.&.t..D.2.&.G.&
    4D10: C7 47 06 00 00 8B C3 E8 EA 04 E9 AA F4 53 56 8B  // .G...........SV.
    4D20: D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89  // .&.w.&.t..D.2.&.
    4D30: 47 04 26 C7 47 06 00 00 8B C3 E8 D4 04 E9 87 F4  // G.&.G...........
    4D40: 53 56 8B D8 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F  // SV..&.w...&._.._
    4D50: 01 83 C3 03 26 01 5C 02 5E 5B C3 51 52 8B D8 26  // ....&.\.^[.QR..&
    4D60: 8B 77 02 26 83 44 02 02 26 8B 07 E8 84 02 8B C8  // .w.&.D..&.......
    4D70: 26 8B 77 28 8A 44 01 32 E4 03 C0 8B F1 03 F0 83  // &.w(.D.2........
    4D80: 3C 00 74 4F 26 8B 77 28 8A 54 01 32 F6 8B C3 E8  // <.tO&.w(.T.2....
    4D90: 94 02 26 88 47 31 26 8B 77 02 26 8B 34 8B 44 04  // ..&.G1&.w.&.4.D.
    4DA0: C1 E8 08 32 E4 24 7F C1 E8 02 32 E4 24 1F 26 80  // ...2.$....2.$.&.
    4DB0: 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37 26 8B 47  // g/....&.G.&.7&.G
    4DC0: 2E C1 E8 0B C1 E0 02 26 01 04 26 C6 47 32 01 26  // .......&..&.G2.&
    4DD0: 89 4F 28 5A 59 C3 53 8B D8 26 C6 47 32 82 5B C3  // .O(ZY.S..&.G2.[.
    4DE0: 57 8B D8 8C D6 8E C6 26 80 7F 2C 05 74 0A 26 8A  // W......&..,.t.&.
    4DF0: 47 2C 26 3A 47 30 75 1E 26 8B 77 02 26 8B 74 02  // G,&:G0u.&.w.&.t.
    4E00: 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02  // &...&.=.t...&._.
    4E10: 26 89 77 02 5F C3 26 8B 5F 02 26 83 47 02 03 5F  // &.w._.&._.&.G.._
    4E20: C3 53 56 57 8B D8 8C D6 8E C6 26 80 7F 30 01 74  // .SVW......&..0.t
    4E30: 0A 26 8A 47 30 26 3A 47 2C 75 20 26 8B 77 02 26  // .&.G0&:G,u &.w.&
    4E40: 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26  // .t.&...&.=.t...&
    4E50: 8B 5F 02 26 89 77 02 5F 5E 5B C3 26 8B 5F 02 26  // ._.&.w._^[.&._.&
    4E60: 83 47 02 03 EB F1 53 56 57 8B D8 8C D0 8E C0 26  // .G....SVW......&
    4E70: 80 7F 30 01 74 E5 EB C3 55 8B EC 53 51 52 57 50  // ..0.t...U..SQRWP
    4E80: 8B D8 8C D1 8E C1 26 8B 77 02 26 8B 74 02 8A 04  // ......&.w.&.t...
    4E90: 3C 80 0F 86 D0 00 26 8B 3F 26 8B 77 28 26 8B 55  // <.....&.?&.w(&.U
    4EA0: 02 8B 74 01 03 F2 89 76 F6 26 C6 47 3D 00 26 8B  // ..t....v.&.G=.&.
    4EB0: 77 28 F6 44 02 80 74 16 8B 76 F6 8A 24 26 88 67  // w(.D..t..v..$&.g
    4EC0: 35 02 C0 0C 01 FF 46 F6 26 FE 47 3D EB 04 80 46  // 5.....F.&.G=...F
    4ED0: F7 80 26 8B 77 02 26 83 44 02 03 3C 80 74 49 A8  // ..&.w.&.D..<.tI.
    4EE0: 80 74 17 26 8A 67 3D 8A D4 32 F6 FE C4 26 88 67  // .t.&.g=..2...&.g
    4EF0: 3D 8B F3 03 F2 8B 7E F6 EB 21 26 8B 77 02 26 8B  // =.....~..!&.w.&.
    4F00: 7C 02 8D 55 01 26 89 54 02 26 8A 57 3D 8A CA 32  // |..U.&.T.&.W=..2
    4F10: ED FE C2 26 88 57 3D 8B F3 03 F1 8A 25 26 88 64  // ...&.W=.....%&.d
    4F20: 35 02 C0 FF 46 F6 EB B3 26 8A 47 35 8A D0 32 F6  // 5...F...&.G5..2.
    4F30: 8B F2 C1 E6 02 8A A4 97 A2 26 88 67 3D 8D 77 35  // .........&.g=.w5
    4F40: 26 8A 64 01 80 E4 07 26 88 67 2D 8D 77 35 26 8A  // &.d....&.g-.w5&.
    4F50: 64 01 C0 EC 03 80 E4 07 26 88 67 2B 8D 77 35 26  // d.......&.g+.w5&
    4F60: 8A 64 01 E9 6B 00 26 C6 47 3D 00 8C D7 8E C7 26  // .d..k.&.G=.....&
    4F70: 80 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6  // ..=.s &.w.&.W=2.
    4F80: 26 8B 74 02 03 F2 8B FB 03 FA 8A 24 26 88 65 35  // &.t........$&.e5
    4F90: 26 FE 47 3D EB D5 26 8B 77 02 8A D0 32 F6 8B FA  // &.G=..&.w...2...
    4FA0: C1 E7 02 8A 95 97 A2 26 01 54 02 26 8B 77 28 8A  // .......&.T.&.w(.
    4FB0: 64 01 80 E4 07 26 88 67 2D 26 8B 77 28 8A 64 01  // d....&.g-&.w(.d.
    4FC0: C0 EC 03 80 E4 07 26 88 67 2B 26 8B 77 28 8A 64  // ......&.g+&.w(.d
    4FD0: 01 C0 EC 06 26 88 67 2A 8A D0 32 F6 8B F2 C1 E6  // ....&.g*..2.....
    4FE0: 02 8A A4 96 A2 26 88 67 2C 8D 66 F8 5F 5A 59 5B  // .....&.g,.f._ZY[
    4FF0: 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03  // ].SV..&.w....tH.
    5000: F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3  // ....t........^[.
    5010: 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B  // SV..&.w....tH...
    5020: D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51  // ..t .......U..SQ
    5030: 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89  // VW..@...F.......
    5040: 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46  // F.&.E.._....^..F
    5050: DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8  // ........F.2..F..
    5060: C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00  // ....2....^....?.
    5070: 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7  // ..e..F..f...F...
    5080: 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00  // F...f.F......F..
    5090: 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9  // ..F....<......V.
    50A0: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75  // ..2....^....?.tu
    50B0: 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83  // &.E......G.2....
    50C0: C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0  // ..2.......t...3.
    50D0: 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0  // P.......F...tA..
    50E0: 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8  // .&.G...2....^...
    50F0: 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26  // &.E....^.&...^.&
    5100: 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26  // .....&.G..^..v.&
    5110: 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6  // .w..^..^..F.....
    5120: 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8  // F.....F...F.2...
    5130: 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F  // ......f..F.2....
    5140: 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E  // ......^...&._..^
    5150: E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA  // ..^.&._..?[uJ.F.
    5160: 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B  // ..^.&._..^..^.&.
    5170: 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE  // ..G.2......2....
    5180: 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B  // ...^..^...t.&...
    5190: 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B  // G....2.$........
    51A0: 5E B8 26 29 07 EB 91 8D 46 B8 E8 CB FC 8A D0 8D  // ^.&)....F.......
    51B0: 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF  // F......2.....F..
    51C0: 97 94 A2 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E  // ....r..~.......~
    51D0: EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E  // ..t..F...2..f._^
    51E0: E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 2E  // ....SQ..&.O.2...
    51F0: E5 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 29  // .Y[.SQ..&.O.2..)
    5200: E5 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B  // .Y[.S..&.G.2...[
    5210: C3 53 51 8B D8 26 8A 4F 04 32 ED E8 86 CF 59 5B  // .SQ..&.O.2....Y[
    5220: C3 53 57 8B D8 26 8B 5F 14 E8 0C EB 8B D0 66 C1  // .SW..&._......f.
    5230: E8 10 92 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B  // ..._[.SW..&.G.&.
    5240: 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8  // W.....f.........
    5250: FF EA EB D8 53 52 57 8B D8 26 8B 47 08 26 8B 57  // ....SRW..&.G.&.W
    5260: 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14 E8 2E EA 5F  // ..f.....&._...._
    5270: 5A 5B C3 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92  // Z[.SR..&.G.&.W..
    5280: 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F 01 E8 0D EA  // f.....&._&._....
    5290: 5A 5B C3 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8  // Z[.SRV..&.\&._..
    52A0: 96 EA 8B D0 66 C1 E8 10 92 26 89 44 1C 26 89 54  // ....f....&.D.&.T
    52B0: 1E 5E 5A 5B C3 53 51 52 57 8B D8 26 8B 47 08 26  // .^Z[.SQRW..&.G.&
    52C0: 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14  // .W..f.......&.G.
    52D0: 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3  // &.W.....f.......
    52E0: 02 8B C1 E8 EA E9 5F 5A 59 5B C3 8B D0 66 C1 E8  // ......_ZY[...f..
    52F0: 10 92 C3 00 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    5300: 66 56 66 57 0E 1F 0A C0 75 06 E8 37 01 E9 D8 00  // fVfW....u..7....
    5310: 3C 01 75 06 E8 67 01 E9 CE 00 3C 02 75 06 E8 9B  // <.u..g....<.u...
    5320: 02 E9 C4 00 3C 03 75 0B E8 EB 03 8B EC 89 5E 0C  // ....<.u.......^.
    5330: E9 B5 00 3C 04 75 0B E8 FA 03 8B EC 89 5E 0C E9  // ...<.u.......^..
    5340: A6 00 3C 05 75 0B E8 25 05 8B EC 89 56 10 E9 97  // ..<.u..%....V...
    5350: 00 3C 06 75 11 E8 A2 04 8B EC 89 5E 0C 89 4E 14  // .<.u.......^..N.
    5360: 89 56 10 E9 82 00 3C 07 75 10 E8 94 05 8B EC 88  // .V....<.u.......
    5370: 7E 0D 89 4E 14 89 56 10 EB 6E 3C 08 75 0A E8 D7  // ~..N..V..n<.u...
    5380: 04 8B EC 88 7E 0D EB 60 3C 09 75 05 E8 D0 05 EB  // ....~..`<.u.....
    5390: 57 3C 0A 75 10 E8 18 06 8B EC 89 4E 14 89 7E 00  // W<.u.......N..~.
    53A0: 8C 46 1C EB 43 3C 0B 75 0B E8 12 06 8B EC 66 89  // .F..C<.u......f.
    53B0: 4E 14 EB 34 3C 10 75 0A E8 11 06 8B EC 89 5E 0C  // N..4<.u.......^.
    53C0: EB 26 3C 11 75 0D E8 45 06 8B EC 89 5E 0C 89 4E  // .&<.u..E....^..N
    53D0: 14 EB 15 3C 15 75 0F E8 70 06 8B EC 89 5E 0C EB  // ...<.u..p....^..
    53E0: 07 B8 4F 01 EB 02 32 C0 8B EC 89 46 18 66 5F 66  // ..O...2....F.f_f
    53F0: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 50 1E  // ^f]f[fZfYfX...P.
    5400: 2E 8E 1E 5D 03 8C D8 A3 D2 66 A3 E2 66 A3 F4 66  // ...].....f..f..f
    5410: 2E 8E 1E 55 03 A3 AA 04 1F 58 CB 00 30 31 2E 30  // ...U.....X..01.0
    5420: 30 00 56 45 53 41 00 03 E4 01 00 00 01 00 00 00  // 0.VESA..........
    5430: 00 00 00 00 00 03 30 0F FF 00 00 00 8F 00 00 00  // ......0.........
    5440: B4 53 00 00 B9 3F 00 8B DF 83 C7 04 FC 66 33 C0  // .S...?.......f3.
    5450: F3 66 AB 8B FB BE BA 53 B9 22 00 F3 A4 06 1F 8C  // .f.....S."......
    5460: 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7  // O..G..O..O..O ..
    5470: 22 89 7F 0E 0E 1F E8 B5 CB B0 4F 32 E4 C3 56 51  // ".........O2..VQ
    5480: 57 B9 10 00 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F  // W...f3..f._Y....
    5490: C7 05 BB 00 C6 45 02 07 C7 45 04 40 00 C7 45 06  // .....E...E.@..E.
    54A0: 40 00 C6 45 1B 04 C6 45 18 01 C6 45 1A 01 C6 45  // @..E...E...E...E
    54B0: 1E 01 66 C7 45 3E 00 46 C3 23 8E DB E8 27 B3 66  // ..f.E>.F.#...'.f
    54C0: 0B C0 0F 84 EE 00 06 1F 66 89 45 28 8C C8 66 C1  // ........f.E(..f.
    54D0: E0 10 B8 63 58 66 89 45 0C 81 F9 FF 81 0F 84 CF  // ...cXf.E........
    54E0: 00 80 E5 03 B2 01 53 8E DB BE 80 1C E8 61 C9 5B  // ......S......a.[
    54F0: 06 1F 0F 84 BE 00 53 E8 DD CB 66 89 45 12 C7 45  // ......S...f.E..E
    5500: 16 08 10 8D 5C 0C E8 52 E8 66 89 45 1F 66 89 45  // ....\..R.f.E.f.E
    5510: 36 8D 5C 10 E8 44 E8 66 89 45 23 66 89 45 3A 8D  // 6.\..D.f.E#f.E:.
    5520: 5C 08 E8 36 E8 0A C0 75 04 5B E9 87 00 E8 A7 CB  // \..6...u.[......
    5530: 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74 08 77 0A  // f...=X.t.=^.t.w.
    5540: C6 45 17 08 EB 04 C6 45 17 0E E8 51 CB 80 F9 00  // .E.....E...Q....
    5550: 74 04 C6 45 1B 06 2E A1 57 03 89 45 08 8D 5C 04  // t..E....W..E..\.
    5560: E8 F8 E7 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89  // ...f..f......E..
    5570: 45 32 B0 08 D2 E0 88 45 19 8D 5C 14 E8 DC E7 5B  // E2.....E..\....[
    5580: 3D 00 03 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B  // =..w/S.....3...[
    5590: FE C8 88 45 1D 88 45 35 88 45 34 8E DB 57 53 BE  // ...E..E5.E4..WS.
    55A0: 80 1C E8 B4 B2 5B 5F 0B C9 75 05 06 1F 83 25 FE  // .....[_..u....%.
    55B0: 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3 81 FB FF 81  // 2......O..^.....
    55C0: 0F 84 83 00 0A FF 75 04 8B C3 EB 21 F6 C7 08 75  // ......u....!...u
    55D0: 7C 8B CB B2 01 BE 20 1C E8 75 C8 74 70 E8 D6 CA  // |..... ..u.tp...
    55E0: 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8 B5 04  // ..u.f...........
    55F0: EB 55 E8 E4 B6 74 05 E8 D8 B3 EB 19 E8 F9 B7 A9  // .U...t..........
    5600: 01 00 74 11 E8 E6 B8 F7 C1 02 00 74 08 E8 7B B7  // ..t........t..{.
    5610: 80 FB 01 75 03 E8 05 B8 BE 20 1C E8 0F B2 74 2D  // ...u..... ....t-
    5620: E8 A5 00 E8 2C 00 66 BB 20 1C 00 1C E8 7E CA BE  // ....,.f. ....~..
    5630: 00 1C E8 81 CA 66 C1 E8 10 8B D8 32 C0 F6 C7 80  // .....f.....2....
    5640: 74 02 B0 40 E8 8E B2 B0 4F 32 E4 EB 04 B0 4F B4  // t..@....O2....O.
    5650: 03 C3 56 06 33 C0 8E C0 BE 20 1C E8 79 CA 8B C8  // ..V.3.... ..y...
    5660: 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA  // f........&..J...
    5670: 04 FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6  // ...&....&..Q..&.
    5680: 06 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00  // .P..&..I.b&..L..
    5690: A0 26 C6 06 85 04 10 26 C7 06 0C 01 BB 70 8C C8  // .&.....&.....p..
    56A0: 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00  // &....^..........
    56B0: 40 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B  // @...............
    56C0: 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF  // ................
    56D0: B9 04 00 B4 01 BE 3F 56 AC 86 E0 EF 8A E0 FE C4  // ......?V........
    56E0: E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE 43  // ............2..C
    56F0: 56 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC  // V....B.J........
    5700: B9 14 00 BA C0 03 32 E4 BE 4C 56 8A C4 EE AC EE  // ......2..LV.....
    5710: FE C4 E2 F7 C3 00 BE 00 1C E8 9A C9 66 C1 E8 10  // ............f...
    5720: 8B D8 E8 6A C9 75 05 E8 56 C9 75 04 B8 4F 00 C3  // ...j.u..V.u..O..
    5730: B8 4F 03 C3 83 E1 0F 0F 84 BB 00 0A D2 75 0C B8  // .O...........u..
    5740: 00 1C E8 27 03 83 C3 11 E9 A6 00 80 FA 01 75 33  // ...'..........u3
    5750: 8B FB BB C9 05 B9 08 00 FC E8 D8 E5 66 AB 43 E2  // ............f.C.
    5760: F8 66 C1 E7 10 66 C1 EF 10 B9 00 01 BA 00 01 0E  // .f...f..........
    5770: 1F E8 E4 B3 06 1F B8 01 1C B9 07 00 8B DF E8 EB  // ................
    5780: 02 EB 6E 80 FA 02 75 6E 8B F3 06 1F FC BB C9 05  // ..n...un........
    5790: B9 08 00 66 AD E8 F7 E4 43 E2 F8 06 56 0E 1F BB  // ...f....C...V...
    57A0: D0 05 E8 8F E5 8A D0 80 E2 03 66 C1 E8 10 8B C8  // ..........f.....
    57B0: BE 00 1C E8 9A C6 BB CE 05 E8 78 E5 8B C8 66 C1  // ..........x...f.
    57C0: E8 10 8B D0 B0 18 B7 01 E8 76 AC 5B 07 53 81 C3  // .........v.[.S..
    57D0: 00 04 B8 02 1C B9 07 00 E8 91 02 5E 8B FE 66 C1  // ...........^..f.
    57E0: E7 10 66 C1 EF 10 B9 00 01 BA 00 01 0E 1F E8 B6  // ..f.............
    57F0: B3 B0 4F 32 E4 C3 32 C0 C3 00 E8 92 C8 74 53 BE  // ..O2..2......tS.
    5800: 00 1C 80 FB 00 74 18 80 FB 01 75 05 E8 D0 C8 EB  // .....t....u.....
    5810: 1D 80 FB 02 75 10 8B C1 E8 83 C8 D3 E8 8B C8 E8  // ....u...........
    5820: F2 B2 74 2E EB 08 80 FB 03 75 24 E8 27 C8 E8 6D  // ..t......u$.'..m
    5830: C8 8B D8 D3 E3 50 33 C0 BA 00 03 3B DA 77 05 BA  // .....P3....;.w..
    5840: FF FF EB 04 F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32  // ........X...O..2
    5850: C0 C3 B0 4F B4 03 C3 00 0A DB 75 07 8A EF E8 05  // ...O......u.....
    5860: B5 EB 05 E8 EA B4 8A F8 B0 4F 32 E4 C3 00 E8 1E  // .........O2.....
    5870: C8 74 2C BE 00 1C E8 3D C8 66 C1 E8 10 F6 C4 40  // .t,....=.f.....@
    5880: 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80 FF 01 75 14  // u...u.........u.
    5890: BB 13 00 E8 9E E4 D1 E8 8B D0 B0 4F 32 E4 C3 B0  // ...........O2...
    58A0: 4F B4 03 C3 32 C0 C3 52 53 66 50 81 E2 FF 02 D1  // O...2..RSfP.....
    58B0: E2 8B C2 40 66 C1 E0 10 8B C2 BB 13 00 E8 CF E3  // ...@f...........
    58C0: BB 12 00 E8 C9 E3 66 58 5B 5A C3 9C 1E 06 66 50  // ......fX[Z....fP
    58D0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F E8 B4  // fQfRfSfUfVfW....
    58E0: E4 E8 8A FF E8 D1 E4 8B EC 89 56 10 89 46 18 66  // ..........V..F.f
    58F0: 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F 9D  // _f^f]f[fZfYfX...
    5900: CB E8 8B C7 74 54 F6 C3 7F 75 38 53 BE 00 1C E8  // ....tT...u8S....
    5910: CD C7 F7 E2 66 C1 E2 10 8B D0 66 81 E1 FF FF 00  // ....f.....f.....
    5920: 00 66 03 D1 E8 77 C7 80 E2 FC 66 D3 E2 66 81 E2  // .f...w....f..f..
    5930: FF FF FF 02 8D 5C 18 66 8B C2 E8 89 E3 5B E8 BB  // .....\.f.....[..
    5940: B1 EB 0F 80 FB 82 74 C3 80 FB 01 75 0A E8 A0 B1  // ......t....u....
    5950: 32 FF B0 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3 E8  // 2..O2..2...O....
    5960: 2D C7 74 47 80 FF 20 74 08 66 C1 E7 10 66 C1 EF  // -.tG.. t.f...f..
    5970: 10 81 F9 00 01 77 31 0A DB 74 05 80 FB 80 75 10  // .....w1..t....u.
    5980: 32 F6 E8 CB B3 3C 06 74 02 B6 01 E8 19 B2 EB 13  // 2....<.t........
    5990: 80 FB 01 75 13 32 F6 E8 B6 B3 3C 06 74 02 B6 01  // ...u.2....<.t...
    59A0: E8 B5 B1 B0 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3  // ....O2..2...O...
    59B0: 0E 07 BF B0 9F 2E 8B 0E AE 9F B8 4F 00 C3 0A DB  // ...........O....
    59C0: 75 02 EB 03 32 C0 C3 B0 4F B4 03 C3 0A DB 75 06  // u...2...O.....u.
    59D0: B7 04 B3 10 EB 2F 80 FB 01 75 1D 53 32 C9 0A FF  // ...../...u.S2...
    59E0: 74 02 B1 01 E8 1B B3 B1 01 0A FF 74 02 B1 00 E8  // t..........t....
    59F0: 14 B4 E8 B7 B0 5B EB 0D 80 FB 02 75 0D E8 14 B3  // .....[.....u....
    5A00: 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 80 FB  // ......O2...O....
    5A10: 01 75 09 33 C0 E8 85 B3 74 2B EB 24 80 FB 07 75  // .u.3....t+.$...u
    5A20: 24 0A FF 75 0E B0 82 E8 17 AA 0A C9 74 12 B9 03  // $..u........t...
    5A30: 03 EB 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8 01 AA  // .......t........
    5A40: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A DB 75  // .O2...O........u
    5A50: 05 BB 02 01 EB 0C 33 C0 53 E8 AA B3 E8 5F BC 5B  // ......3.S...._.[
    5A60: 74 05 B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72  // t..O2...O......r
    5A70: 03 CD 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55  // ..B...fPfQfRfSfU
    5A80: 66 56 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E  // fVfW..P.......X.
    5A90: FF 94 4E 5A 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ..NZf_f^f]f[fZfY
    5AA0: 66 58 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58  // fX.....P.......X
    5AB0: 2E FF 94 4E 5A C3 88 5A DF 95 F8 95 15 96 96 5B  // ...NZ..Z.......[
    5AC0: 18 8D 4A 8D BD 8D 40 8E CE 8F D2 8F DB 92 AC 93  // ..J...@.........
    5AD0: 2F 94 96 94 31 96 93 96 3C 99 AF 5D BC 9D 3C 5A  // /...1...<..]..<Z
    5AE0: 3C 5A 3C 5A 3C 5A 3C 5A 3C 5A 8C 9E 56 82 AA 83  // <Z<Z<Z<Z<Z..V...
    5AF0: 2E 8E 1E 55 03 80 26 87 04 F3 50 8A E0 80 E4 7F  // ...U..&...P.....
    5B00: E8 DF 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1  // ...;.u.X........
    5B10: 30 26 F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49  // 0&.G..t.... ..uI
    5B20: B5 09 EB 06 A8 01 74 41 B5 0B 53 E8 EA 43 0A FF  // ......tA..S..C..
    5B30: 5B 75 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80  // [u..&........+X.
    5B40: 0E 87 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63  // .....&.........c
    5B50: 04 C7 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01  // ................
    5B60: A8 68 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E  // .h.....B..&.....
    5B70: 10 04 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE 40 1C  // ..XSP..3......@.
    5B80: E8 CD C2 E8 53 B1 74 05 E8 47 AE EB 19 E8 68 B2  // ....S.t..G....h.
    5B90: A9 01 00 74 11 E8 55 B3 F7 C1 02 00 74 08 E8 EA  // ...t..U.....t...
    5BA0: B1 80 FB 01 75 03 E8 74 B2 BE 40 1C E8 7E AC 58  // ....u..t..@..~.X
    5BB0: 5B 0F 84 53 FF 2E 8E 1E 55 03 0E 07 E8 3F 2B 0E  // [..S....U....?+.
    5BC0: 1F 53 66 BB 40 1C 00 1C E8 E2 C4 BE 00 1C B0 20  // .Sf.@.......... 
    5BD0: E8 02 AD 5B 2E 8E 1E 55 03 0E 07 E8 48 30 E8 24  // ...[...U....H0.$
    5BE0: 00 E8 54 3F E8 D1 01 E8 8E 01 E8 E2 40 0E 1F BE  // ..T?........@...
    5BF0: 00 1C B0 10 E8 DE AC E8 23 30 E8 1B 30 C3 8B EC  // ........#0..0...
    5C00: C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52  // .F..../........R
    5C10: 00 E8 CF 0B C3 53 83 C3 0A 8B 16 63 04 B9 19 00  // .....S.....c....
    5C20: B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B  // ..0.2.&.'.C....[
    5C30: 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04  // ...2...S........
    5C40: 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE  // ...&.'<.u... .C.
    5C50: C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00  // ...[&.G.........
    5C60: 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01  // .......#...&.G..
    5C70: 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9  // u........t......
    5C80: 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A  // .........t....&.
    5C90: 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32  // ..F.....S......2
    5CA0: E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A  // ........&...C...
    5CB0: C4 EE 32 C0 EE 1E 06 E8 75 2F 0B ED 74 09 1F 1E  // ..2.....u/..t...
    5CC0: B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9  // .....F...[.S..7.
    5CD0: 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7  // ..2....&.'.C....
    5CE0: 5B C3 BB 90 5F 0E 07 8B D3 0A E4 7D 01 C3 E8 01  // [..._......}....
    5CF0: 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75  // ..3.....<J.....u
    5D00: 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06  //  ...$.<.~$<.t <.
    5D10: 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 C0 04  // t.<.t..@........
    5D20: C3 B0 40 D0 EC F6 E4 03 D8 81 C3 C0 05 C3 B0 40  // ..@............@
    5D30: F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75  // ........u......u
    5D40: 05 81 C3 C0 01 C3 81 C3 40 06 C3 BF EF 5C BE 10  // ........@....\..
    5D50: 5D 33 C9 E8 4E 00 C3 04 00 01 05 40 01 06 80 01  // ]3..N......@....
    5D60: 0D 40 03 0E 80 03 0F 40 04 10 80 04 11 80 06 12  // .@.....@........
    5D70: C0 06 13 00 07 62 00 02 53 8A 1E 49 04 80 FB 07  // .....b..S..I....
    5D80: 7F 10 32 FF D1 E3 2E 8B 87 2C 5D A2 65 04 88 26  // ..2......,].e..&
    5D90: 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30  // f.[.,0(0-0)0*0.0
    5DA0: 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3  // .?)0.8%u...].3..
    5DB0: 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E 55 03 F6  // ...;.u.......U..
    5DC0: 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04  // ....uI.>L..tB.I.
    5DD0: B9 00 20 2E 8B 3E 5B 03 26 F6 47 33 01 75 0E 26  // .. ..>[.&.G3.u.&
    5DE0: F6 47 09 01 75 1B 2E 8B 3E 59 03 EB 14 3C 06 7E  // .G..u...>Y...<.~
    5DF0: 0B 2E 8B 3E 57 03 26 8A 67 37 B5 40 66 33 C0 EB  // ...>W.&.g7.@f3..
    5E00: 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80  // .f. . ...f3..f..
    5E10: 26 87 04 7F 07 1F C3 2E 8E 1E 55 03 80 FB 10 75  // &.........U....u
    5E20: 03 E9 9D 01 80 FB 20 75 03 E9 BE 01 80 FB 32 75  // ...... u......2u
    5E30: 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 16  // ......u.........
    5E40: 01 FE C8 0F 85 16 01 EC 24 FD B2 C2 EE E9 07 01  // ........$.......
    5E50: 80 FB 35 75 4B 3C 80 75 08 80 0E 89 04 40 E9 F6  // ..5uK<.u.....@..
    5E60: 00 F6 06 89 04 40 0F 84 F3 00 0A C0 0F 84 ED 00  // .....@..........
    5E70: FE C8 75 06 E8 FB 08 E9 DD 00 F6 06 89 04 40 0F  // ..u...........@.
    5E80: 84 DA 00 FE C8 75 0C E8 7B 23 32 C0 BA C3 03 EE  // .....u..{#2.....
    5E90: E9 C4 00 FE C8 0F 85 C4 00 E8 BD 23 B0 01 EB EC  // ...........#....
    5EA0: 80 FB 30 74 03 E9 96 00 50 E8 6C 40 8A EF BA CC  // ..0t....P.l@....
    5EB0: 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12  // ....X..u0.....u.
    5EC0: 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9  // ..u....$0<0u....
    5ED0: 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89  // .....$0<0u....&.
    5EE0: 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89  // .o......6<.uA.&.
    5EF0: 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30  // .o.....u......$0
    5F00: 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10  // <0t.....t.......
    5F10: 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A  // .$0<0u.....t....
    5F20: 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02  // .............)<.
    5F30: 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB  // u+.&..o.........
    5F40: 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08  // 1u...t.<.u......
    5F50: EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB  // ...&......F.....
    5F60: 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD  // 3u.<.t.<.u..&...
    5F70: EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00  // ...........4u.<.
    5F80: 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87  // u..&.....<.u....
    5F90: 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74  // .......6u&. .<.t
    5FA0: 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C  // ....<.t.........
    5FB0: FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3  // .......B."......
    5FC0: C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0  // ...........u....
    5FD0: 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89  // ........%.......
    5FE0: 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00  // ^..N..F.........
    5FF0: 43 87 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00  // C.......(.......
    6000: 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00  // .c-'(.+.........
    6010: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    6020: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    6030: 00 00 00 00 10 0E 00 FF 28 18 08 00 08 09 03 00  // ........(.......
    6040: 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00  // .c-'(.+.........
    6050: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    6060: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    6070: 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00  // ........P.......
    6080: 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00  // .c_OP.U.........
    6090: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    60A0: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    60B0: 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00  // ........P.......
    60C0: 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00  // .c_OP.U.........
    60D0: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    60E0: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    60F0: 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00  // ........(...@...
    6100: 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00  // .c-'(.+.........
    6110: 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02  // ................
    6120: 04 06 07 10 11 12 13 14 15 16 17 01 00 03 00 00  // ................
    6130: 00 00 00 00 30 0F 00 FF 28 18 08 00 40 09 03 00  // ....0...(...@...
    6140: 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00  // .c-'(.+.........
    6150: 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02  // ................
    6160: 04 06 07 10 11 12 13 14 15 16 17 01 00 03 00 00  // ................
    6170: 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00  // ....0...P...@...
    6180: 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00  // .c_OP.T.........
    6190: 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17  // .....(..........
    61A0: 17 17 17 17 17 17 17 17 17 17 17 01 00 01 00 00  // ................
    61B0: 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00  // ........P.......
    61C0: 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    61D0: 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08  // ....](.c........
    61E0: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    61F0: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    6200: 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    6210: 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04  // .....P..........
    6220: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10  // ................
    6230: 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28  // ....@..........(
    6240: 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18  // ..-2 $8?........
    6250: 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15  // . $(-28?........
    6260: 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10  // ..%/83.*%')*,#..
    6270: 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34  // #%'*,+*))-27;974
    6280: 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33  // 234551,'/0234433
    6290: 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31  // 258:=<:98899:741
    62A0: 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13  // ................
    62B0: 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13  // ................
    62C0: 12 14 16 18 1A 19 18 17 16 17 17 17 18 15 14 11  // ................
    62D0: 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19  // ................
    62E0: 19 19 19 19 1A 18 17 16 02 03 04 05 07 06 06 05  // ................
    62F0: 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04  // ................
    6300: 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D  // ................
    6310: 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D  // ................
    6320: 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C  // ................
    6330: 00 00 00 00 00 00 00 00 28 18 08 00 20 09 0F 00  // ........(... ...
    6340: 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00  // .c-'(.+.........
    6350: 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04  // ................
    6360: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    6370: 00 00 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00  // ........P...@...
    6380: 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00  // .c_OP.T.........
    6390: 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04  // .....(..........
    63A0: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    63B0: 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28  // ..............%(
    63C0: 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36  // ... ..(,..%*..26
    63D0: 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30  // ..',. 49...$..,0
    63E0: 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D  // ..!&...3..+0.$8=
    63F0: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    6400: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    6410: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    6420: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    6430: 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00  // ..-2 $8?P.......
    6440: 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    6450: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18  // ....](.c........
    6460: 18 00 00 00 08 00 00 00 18 00 00 0B 00 05 00 00  // ................
    6470: 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00  // ........P.......
    6480: 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    6490: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04  // ....](.c........
    64A0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    64B0: 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00  // ........(.......
    64C0: 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00  // ..-'(.+....M....
    64D0: 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04  // ....]..c........
    64E0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    64F0: 00 00 00 00 10 0E 00 FF 28 18 0E 00 08 09 03 00  // ........(.......
    6500: 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00  // ..-'(.+....M....
    6510: 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04  // ....]..c........
    6520: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    6530: 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00  // ........P.......
    6540: 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    6550: 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04  // ....](.c........
    6560: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    6570: 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00  // ........P.......
    6580: 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    6590: 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04  // ....](.c........
    65A0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    65B0: 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00  // ........(.......
    65C0: 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00  // .g-'(.+....O....
    65D0: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    65E0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    65F0: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    6600: 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .g_OP.U....O....
    6610: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    6620: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    6630: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    6640: 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .f_OP.U....O....
    6650: 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08  // .....(..........
    6660: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    6670: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    6680: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    6690: 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F  // .....(......????
    66A0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00  // ???????????.....
    66B0: 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    66C0: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    66D0: 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04  // .....(..........
    66E0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    66F0: 00 00 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00  // ........(... ...
    6700: 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00  // .c_OP.T....A....
    6710: 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04  // .....(@.........
    6720: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00  // ...........A....
    6730: 00 00 00 00 40 05 0F FF 90 5F 00 C0 00 00 00 00  // ....@...._......
    6740: 00 00 00 00 00 00 00 00 F0 66 00 C0 00 00 00 00  // .........f......
    6750: 00 00 00 00 00 00 00 00 1A 00 8A 9F 00 C0 00 00  // ................
    6760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6770: 00 00 1E E8 10 00 2E 8E 1E 55 03 E8 FA 37 E8 D1  // .........U...7..
    6780: 37 E8 80 1A 1F C3 2E 8E 1E 55 03 C7 06 87 04 60  // 7........U.....`
    6790: F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04  // ...........$....
    67A0: B4 01 E8 36 1F A0 89 04 80 26 10 04 CF 80 0E 10  // ...6.....&......
    67B0: 04 20 C7 06 63 04 D4 03 0E 1F E8 3B A6 A9 01 00  // . ..c......;....
    67C0: 74 11 E8 28 A7 F7 C1 02 00 74 08 E8 BD A5 80 FB  // t..(.....t......
    67D0: 01 75 03 E8 47 A6 C3 1E 2E 8E 1E 55 03 0E 07 EB  // .u..G......U....
    67E0: 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC  // ........t..S....
    67F0: B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE 5C  // ........>c..u/.\
    6800: 68 B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03  // h.@.3...........
    6810: 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E  // ........B...E...
    6820: 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47  // .E....J......&.G
    6830: 2B F6 06 89 04 06 74 31 B9 F8 00 BF D0 61 3C 08  // +.....t1.....a<.
    6840: 74 11 B9 40 00 BF 50 63 3C 38 74 07 3C 3F 74 03  // t..@..Pc<8t.<?t.
    6850: BF 90 63 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE  // ..c3.........B..
    6860: EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74  // ...J....I<.t%<8t
    6870: 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 D4 CC B9 08  // .<?t*...3.Q.....
    6880: 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA  // .....t.....g.Y..
    6890: EB 20 E8 BD CC B9 00 01 33 DB E8 57 00 EB 13 B9  // . ......3..W....
    68A0: 40 00 33 DB 51 E8 28 00 8A C3 E8 70 30 FE C3 59  // @.3.Q.(....p0..Y
    68B0: E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F  // ..[..*.*.*.*.?.?
    68C0: 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F  // .?.?.*.?.*.?.*.?
    68D0: 8B FB C1 EF 02 83 E7 0F 2E 8A B5 4C 68 8B FB D1  // ...........Lh...
    68E0: EF 83 E7 0F 2E 8A AD 4C 68 8B FB 83 E7 0F 2E 8A  // .......Lh.......
    68F0: 8D 4C 68 C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E  // .Lh.........B.G.
    6900: 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3  // ...G....G..J....
    6910: 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E  // ........~......~
    6920: 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00  // |.....|.....|8..
    6930: 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00  // .8|.|8...8....8.
    6940: 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00  // 8|..l.8...<~<...
    6950: FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00  // ..........<ff<..
    6960: FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78  // ...........6x..x
    6970: 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60  // ~..~.~.......p.`
    6980: 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00  // >>66.f...<f.f<..
    6990: 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00  // ...........>....
    69A0: 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00  // .<~.~<..fffff.f.
    69B0: 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78  // ..{;....<f8ll8.x
    69C0: 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E  // .........<~.~<.~
    69D0: 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00  // .<~.........~<..
    69E0: 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00  // .........0p.p0..
    69F0: 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    6A00: 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00  // ..8||.....||8...
    6A10: 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00  // .........<<.....
    6A20: 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00  // lll.....ll.l.ll.
    6A30: 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00  // .~.|........0`..
    6A40: 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00 00 00  // 8l8v..v...0.....
    6A50: 18 30 60 60 60 30 18 00 60 30 18 18 18 30 60 00  // .0```0..`0...0`.
    6A60: 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00  // ..|.|......~....
    6A70: 00 00 00 00 18 18 30 00 00 00 00 FE 00 00 00 00  // ......0.........
    6A80: 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00  // .....88....0`...
    6A90: 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00  // |.....|..x....~.
    6AA0: 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00  // |...0f..|..<..|.
    6AB0: 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00  // ..<l..........|.
    6AC0: 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00  // |.....|.........
    6AD0: 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00  // |..|..|.|..~..|.
    6AE0: 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30  // ...............0
    6AF0: 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00  // ..0`0...........
    6B00: 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00  // `0...0`.|.......
    6B10: 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00  // |.....~.8l......
    6B20: FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00  // .ff|ff..<f...f<.
    6B30: F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00  // .lfffl..........
    6B40: FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00  // .b`|``..|.....|.
    6B50: C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00  // ........<.....<.
    6B60: 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00  // <.....p.........
    6B70: F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00  // .````b..........
    6B80: C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    6B90: FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06  // .ff|``..|.....|.
    6BA0: FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    6BB0: 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00  // ~Z....<.......|.
    6BC0: C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00  // ....l8..........
    6BD0: C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00  // .l888l..fff<..<.
    6BE0: FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00  // ....0b..|`````|.
    6BF0: C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00  // .`0.....|.....|.
    6C00: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF  // .8l.............
    6C10: 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00  // 00........x.|.~.
    6C20: E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00  // .`|fff....|...|.
    6C30: 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00  // ..|...~...|...|.
    6C40: 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C  // .60.00x...v..~.|
    6C50: E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00  // .`|fff....8...<.
    6C60: 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00  // .......x.`flxl..
    6C70: 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00  // ..........l.....
    6C80: 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00  // ...ffff...|...|.
    6C90: 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E  // ...ff|`...v..|..
    6CA0: 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00  // ...f``....|.|.|.
    6CB0: 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00  // 00.006........v.
    6CC0: 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00  // ....l8........l.
    6CD0: 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C  // ...l8l.......v.|
    6CE0: 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00  // ....0d.....p....
    6CF0: 18 18 18 00 18 18 18 00 70 18 18 0E 18 18 70 00  // ........p.....p.
    6D00: 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00  // v.........88ll..
    6D10: 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00  // <f.f<..x......v.
    6D20: 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00  // ..|...|.|.x.|.~.
    6D30: C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00  // ..x.|.~...x.|.~.
    6D40: 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38  // 88x.|.~...|.|.l8
    6D50: 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00  // |.|...|...|...|.
    6D60: E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00  // ..|...|.f.8...<.
    6D70: 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00  // |.8...<...8...<.
    6D80: C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00  // .8l.....88.|....
    6D90: 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00  // ..........l.~.n.
    6DA0: 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00  // ~.......|..|..|.
    6DB0: 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00  // ...|..|....|..|.
    6DC0: 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00  // |.....v.......v.
    6DD0: 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00  // ..<...<..8l..l8.
    6DE0: C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00  // ......|...~..~..
    6DF0: 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00  // 8l`.f.l..f<~.<..
    6E00: 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C  // >c8.c>...>a<.|..
    6E10: 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00  // ..x.|.~...8...<.
    6E20: 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00  // ...|..|.......v.
    6E30: 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00  // ....ff..........
    6E40: 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C  // >.>`gc=.>.v..~.|
    6E50: 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00  // ...0`f<....|``..
    6E60: 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E  // ...|.......0|6.>
    6E70: C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00  // ...0l<~.....<<..
    6E80: 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00  // .6l.l6....l6l...
    6E90: 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA  // ".".".".U.U.U.U.
    6EA0: DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18  // .w.w.w.w........
    6EB0: 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    6EC0: 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36  // 6666.666.....666
    6ED0: 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36  // ........66...666
    6EE0: 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36  // 66666666.....666
    6EF0: 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00  // 66......6666....
    6F00: 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18  // ................
    6F10: 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00  // ................
    6F20: 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18  // ................
    6F30: 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18  // ................
    6F40: 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36  // ........66667666
    6F50: 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36  // 6670?.....?07666
    6F60: 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36  // 66...........666
    6F70: 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00  // 66707666........
    6F80: 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00  // 66...666........
    6F90: 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18  // 6666............
    6FA0: 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00  // .....6666666?...
    6FB0: 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    6FC0: 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36  // ....?6666666.666
    6FD0: 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00  // ................
    6FE0: 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF  // ................
    6FF0: 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7000: 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00  // ................
    7010: 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00  // ..f...f..x......
    7020: 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00  // ..b```....lllll.
    7030: FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00  // ..`0`....~....p.
    7040: 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00  // .ffff|...v....8.
    7050: FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00  // .8l.l8..8l...l8.
    7060: 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00  // 8l..ll..>`8f..x.
    7070: 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00  // ..~..~...|...|..
    7080: 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00  // 8`...`8.|.......
    7090: 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00  // ..........~...~.
    70A0: 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00  // 0...0.~...0...~.
    70B0: 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78 30 00  // .............x0.
    70C0: 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00  // ....~....v..v...
    70D0: 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00 00 00  // |..|............
    70E0: 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00  // .............8..
    70F0: D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00  // .lll....p.0.....
    7100: 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00  // ..||||..........
    7110: 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    7120: 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7130: 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00  // .....~........~.
    7140: 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00  // .....|........|.
    7150: 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00  // ......l.....|8..
    7160: 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00  // .......8|.|8....
    7170: 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00  // .......88.l.l.8.
    7180: 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00  // ......8||...l.8.
    7190: 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00  // .........<<<....
    71A0: 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF  // ................
    71B0: FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00  // ........<fff<...
    71C0: 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF  // ................
    71D0: FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00  // ........6x....x.
    71E0: 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00  // .....<fff<.~....
    71F0: 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00  // ............x.p.
    7200: 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C  // .....>6>66v.f...
    7210: 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00  // .......~<ff<~...
    7220: 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00  // ................
    7230: 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00  // ........>~.~>...
    7240: 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00  // ......<~....~<..
    7250: 00 00 00 00 00 66 66 66 66 66 66 66 00 66 66 00  // .....fffffff.ff.
    7260: 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00  // ..........{.....
    7270: 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6  // .....|..`|..|...
    7280: 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE FE 00  // |...............
    7290: 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00  // ......<~...~<.~.
    72A0: 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00  // ......<~........
    72B0: 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00  // ............~<..
    72C0: 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00  // ................
    72D0: 00 00 00 00 00 00 00 00 30 70 FE 70 30 00 00 00  // ........0p.p0...
    72E0: 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00  // ................
    72F0: 00 00 00 00 00 00 00 00 24 66 FF 66 24 00 00 00  // ........$f.f$...
    7300: 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00  // .......888||....
    7310: 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00  // ........|||88...
    7320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7330: 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00  // ......<<<<......
    7340: 00 00 00 00 36 36 36 36 14 00 00 00 00 00 00 00  // ....6666........
    7350: 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00  // .....lll.ll.lll.
    7360: 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18  // .......|..x<..|.
    7370: 18 00 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00  // ........bf..0f..
    7380: 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00  // .....8l80v~...v.
    7390: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    73A0: 00 00 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00  // .......000000...
    73B0: 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00  // .....0........0.
    73C0: 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00  // ........l8.8l...
    73D0: 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 00  // ..........~.....
    73E0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18  // ................
    73F0: 00 00 00 00 00 00 00 00 00 00 FE 00 00 00 00 00  // ................
    7400: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00  // ................
    7410: 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00  // ...........0`...
    7420: 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00  // .....|........|.
    7430: 00 00 00 00 00 18 78 18 18 18 18 18 18 18 7E 00  // ......x.......~.
    7440: 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00  // .....|.....0`...
    7450: 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00  // .....|...<....|.
    7460: 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00  // .......<l.......
    7470: 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00  // ..............|.
    7480: 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00  // .....|........|.
    7490: 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00  // ..........00000.
    74A0: 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00  // .....|...|....|.
    74B0: 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00  // .....|....~...|.
    74C0: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00  // ................
    74D0: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18  // ................
    74E0: 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00  // ........0`.`0...
    74F0: 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00  // ................
    7500: 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00  // ......`0.....0`.
    7510: 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00  // .....|..........
    7520: 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00  // .....|........~.
    7530: 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00  // .....8l.........
    7540: 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00  // ......fff|ffff..
    7550: 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00  // .....<f......f<.
    7560: 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00  // ......lffffffl..
    7570: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00  // ......f`d|d``f..
    7580: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00  // ......f`d|d```..
    7590: 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00  // .....|........|.
    75A0: 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00  // ................
    75B0: 00 00 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00  // .....<........<.
    75C0: 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00  // .....<........p.
    75D0: 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00  // ................
    75E0: 00 00 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00  // ......``````bf..
    75F0: 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00  // ................
    7600: 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00  // ................
    7610: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // .....|........|.
    7620: 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00  // ......ffff|```..
    7630: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06  // .....|........|.
    7640: 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00  // ......fff|xlff..
    7650: 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00  // .....|...p....|.
    7660: 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00  // .....~Z.......<.
    7670: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    7680: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    7690: 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00  // ................
    76A0: 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00  // ........l88l....
    76B0: 00 00 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00  // .....fffff<...<.
    76C0: 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00  // ..........0`....
    76D0: 00 00 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00  // .....|````````|.
    76E0: 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00  // .........`0.....
    76F0: 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00  // .....|........|.
    7700: 00 00 00 00 10 38 6C C6 00 00 00 00 00 00 00 00  // .....8l.........
    7710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7720: FF 00 00 00 18 18 18 0C 00 00 00 00 00 00 00 00  // ................
    7730: 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    7740: 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00  // ......``|fffff..
    7750: 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00  // ........|.....|.
    7760: 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00  // ........|.....~.
    7770: 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    7780: 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00  // ......600.0000x.
    7790: 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6  // ........v....v..
    77A0: 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00  // |.....``|fffff..
    77B0: 00 00 00 00 00 18 18 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    77C0: 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC  // ................
    77D0: 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00  // x.....``fflxlf..
    77E0: 00 00 00 00 00 18 18 18 18 18 18 18 18 18 1C 00  // ................
    77F0: 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00  // ........l.......
    7800: 00 00 00 00 00 00 00 00 DC 66 66 66 66 66 66 00  // .........ffffff.
    7810: 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    7820: 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60  // .........ffff|``
    7830: F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C  // ........v....|..
    7840: 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00  // .........f````..
    7850: 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    7860: 00 00 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00  // .....000.00006..
    7870: 00 00 00 00 00 00 00 00 CC CC CC CC CC CC 76 00  // ..............v.
    7880: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    7890: 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00  // ..............l.
    78A0: 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00  // ..........l8l...
    78B0: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6  // .............v..
    78C0: 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00  // |...........0b..
    78D0: 00 00 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00  // .........p......
    78E0: 00 00 00 00 00 18 18 18 18 00 18 18 18 18 18 00  // ................
    78F0: 00 00 00 00 00 70 18 18 18 0E 18 18 18 18 70 00  // .....p........p.
    7900: 00 00 00 00 00 76 DC 00 00 00 00 00 00 00 00 00  // .....v..........
    7910: 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00  // .........88ll...
    7920: 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC  // .....<f....f<...
    7930: 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00  // 8.............v.
    7940: 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00  // ......0.|.....|.
    7950: 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00  // ....0x..x.|...v.
    7960: 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    7970: 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00  // ....`0..x.|...v.
    7980: 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00  // ....8l8.x.|...v.
    7990: 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C  // .......|....|..l
    79A0: 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00  // 8...0x..|.....|.
    79B0: 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    79C0: 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00  // ....0...|.....|.
    79D0: 00 00 00 00 00 66 00 00 38 18 18 18 18 18 3C 00  // .....f..8.....<.
    79E0: 00 00 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00  // .....<f.8.....<.
    79F0: 00 00 00 00 00 00 00 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    7A00: 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00  // ......8l........
    7A10: 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00  // ...8l8.8l.......
    7A20: 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00  // .....0..``|```..
    7A30: 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00  // .......f......v.
    7A40: 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00  // .....~..........
    7A50: 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00  // ....0x..|.....|.
    7A60: 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    7A70: 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00  // ....0...|.....|.
    7A80: 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00  // ....0x........v.
    7A90: 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00  // ....`0........v.
    7AA0: 00 00 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00  // ......<.......<.
    7AB0: 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00  // ......|.......|.
    7AC0: 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    7AD0: 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00  // .......|....|...
    7AE0: 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00  // ....8l``.```f.l.
    7AF0: 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00  // ....ffff<.~.<...
    7B00: 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C  // .....>cc0..cc>..
    7B10: 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C  // ........>c8.c>..
    7B20: 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00  // ......0.x.|...v.
    7B30: 00 00 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00  // ......0.8.....<.
    7B40: 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00  // ......0.|.....|.
    7B50: 00 00 00 00 18 30 60 00 CC CC CC CC CC DC 76 00  // .....0`.......v.
    7B60: 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00  // .....v...fffff..
    7B70: 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00  // ....v...........
    7B80: 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00  // ....!...3``gc3..
    7B90: 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00  // ....B<.;fff>.f<.
    7BA0: 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00  // .....00.000`..|.
    7BB0: 00 00 00 00 00 00 00 00 00 00 7E 60 60 60 00 00  // ..........~```..
    7BC0: 00 00 00 00 00 00 00 00 00 00 7E 06 06 06 00 00  // ..........~.....
    7BD0: 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18  // ....``bfl.0`.6..
    7BE0: 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06  // >...``bfl.6n.6~.
    7BF0: 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00  // ..........<<<<..
    7C00: 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00  // ........6l.l6...
    7C10: 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00  // .........l6l....
    7C20: 00 00 00 11 44 11 44 11 44 11 44 11 44 11 44 11  // ....D.D.D.D.D.D.
    7C30: 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.U.U.U.U.U.U.
    7C40: 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.w.w.w.w.w.w.
    7C50: 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18 18  // w.w.............
    7C60: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    7C70: 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18  // ................
    7C80: 18 18 18 36 36 36 36 36 36 36 F6 36 36 36 36 36  // ...6666666.66666
    7C90: 36 36 36 00 00 00 00 00 00 00 FE 36 36 36 36 36  // 666........66666
    7CA0: 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18  // 666.............
    7CB0: 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36  // ...66666...66666
    7CC0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    7CD0: 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36  // 666........66666
    7CE0: 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00  // 66666666........
    7CF0: 00 00 00 36 36 36 36 36 36 36 FE 00 00 00 00 00  // ...6666666......
    7D00: 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00  // ................
    7D10: 00 00 00 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    7D20: 18 18 18 18 18 18 18 18 18 18 1F 00 00 00 00 00  // ................
    7D30: 00 00 00 18 18 18 18 18 18 18 FF 00 00 00 00 00  // ................
    7D40: 00 00 00 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    7D50: 18 18 18 18 18 18 18 18 18 18 1F 18 18 18 18 18  // ................
    7D60: 18 18 18 00 00 00 00 00 00 00 FF 00 00 00 00 00  // ................
    7D70: 00 00 00 18 18 18 18 18 18 18 FF 18 18 18 18 18  // ................
    7D80: 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18  // ................
    7D90: 18 18 18 36 36 36 36 36 36 36 37 36 36 36 36 36  // ...6666666766666
    7DA0: 36 36 36 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6666666670?.....
    7DB0: 00 00 00 00 00 00 00 00 3F 30 37 36 36 36 36 36  // ........?0766666
    7DC0: 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // 66666666........
    7DD0: 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    7DE0: 36 36 36 36 36 36 36 36 37 30 37 36 36 36 36 36  // 6666666670766666
    7DF0: 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00  // 666.............
    7E00: 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36  // ...66666...66666
    7E10: 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00  // 666.............
    7E20: 00 00 00 36 36 36 36 36 36 36 FF 00 00 00 00 00  // ...6666666......
    7E30: 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18  // ................
    7E40: 18 18 18 00 00 00 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    7E50: 36 36 36 36 36 36 36 36 36 36 3F 00 00 00 00 00  // 6666666666?.....
    7E60: 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00  // ................
    7E70: 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18  // ................
    7E80: 18 18 18 00 00 00 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    7E90: 36 36 36 36 36 36 36 36 36 36 FF 36 36 36 36 36  // 6666666666.66666
    7EA0: 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18  // 666.............
    7EB0: 18 18 18 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7EC0: 00 00 00 00 00 00 00 00 00 00 1F 18 18 18 18 18  // ................
    7ED0: 18 18 18 FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    7EE0: FF FF FF 00 00 00 00 00 00 00 00 FF FF FF FF FF  // ................
    7EF0: FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7F00: F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    7F10: 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    7F20: 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00  // .......v......v.
    7F30: 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00  // .....x..........
    7F40: 00 00 00 00 00 FE 66 62 60 60 60 60 60 60 60 00  // ......fb```````.
    7F50: 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00  // .........llllll.
    7F60: 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00  // .......b0..0b...
    7F70: 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00  // ........~.....p.
    7F80: 00 00 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80  // .......fffff|`..
    7F90: 00 00 00 00 00 00 00 00 76 DC 18 18 18 18 18 00  // ........v.......
    7FA0: 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00  // ......88l..l88..
    7FB0: 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00  // ......8l.....l8.
    7FC0: 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00  // .....8l....lll..
    7FD0: 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00  // .....>``<f....x.
    7FE0: 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00  // ........~...~...
    7FF0: 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00  // .......|....|`..
    8000: 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00  // .......0``|``0..
    8010: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00  // .....|..........
    8020: 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00  // ................
    8030: 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00  // .........~....~.
    8040: 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00  // .....0.....0..~.
    8050: 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00  // .......0`0....~.
    8060: 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18  // ................
    8070: 18 18 18 18 18 18 18 18 18 18 18 18 18 58 78 30  // .............Xx0
    8080: 00 00 00 00 00 00 00 18 18 00 7E 00 18 18 00 00  // ..........~.....
    8090: 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00  // .........v..v...
    80A0: 00 00 00 00 00 78 CC CC 78 00 00 00 00 00 00 00  // .....x..x.......
    80B0: 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00  // ................
    80C0: 00 00 00 00 00 00 00 00 00 00 00 18 00 00 00 00  // ................
    80D0: 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18  // .............x8.
    80E0: 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00  // ......lllll.....
    80F0: 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00  // .....p..0`......
    8100: 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00  // ........~~~~~~..
    8110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8120: 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    8130: 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0  // ..../........0`.
    8140: 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3  // .....0..~.......
    8150: C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB  // .~....M.........
    8160: C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18 18 18  // .......T........
    8170: 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3  // ...<....V.......
    8180: C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3  // ..f<.....W......
    8190: DB DB DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3  // .....f....X.....
    81A0: 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3  // f<<f.......Y....
    81B0: C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00  // ..f<...<....\...
    81C0: 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00  // ..`0.........m..
    81D0: 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00  // ...f..........v.
    81E0: 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77  // ........f<.....w
    81F0: 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00  // ...........f....
    8200: 00 00 BB 70 C3 8B FA A0 10 04 24 30 AA B9 1E 00  // ...p......$0....
    8210: BE 49 04 F3 A4 B1 07 BE 84 04 F3 A4 B1 04 BE A8  // .I..............
    8220: 04 F3 A4 9C FA B1 04 BE 14 00 F3 A4 B1 04 BE 74  // ...............t
    8230: 00 F3 A4 B1 04 BE 7C 00 F3 A4 B1 04 BE 0C 01 F3  // ......|.........
    8240: A4 C4 3E 08 01 89 3E B4 01 8C 06 B6 01 C7 06 08  // ..>...>.........
    8250: 01 04 5A 8C 0E 0A 01 9D C3 8B F2 8C C2 8E DA 33  // ..Z............3
    8260: D2 8E C2 26 8A 26 10 04 80 E4 CF AC 0A C4 26 A2  // ...&.&........&.
    8270: 10 04 B9 1E 00 BF 49 04 F3 A4 B1 07 BF 84 04 F3  // ......I.........
    8280: A4 B1 04 BF A8 04 F3 A4 9C FA B1 04 BF 14 00 F3  // ................
    8290: A4 B1 04 BF 74 00 F3 A4 B1 04 BF 7C 00 F3 A4 B1  // ....t......|....
    82A0: 04 BF 0C 01 F3 A4 06 1F B1 04 BE B4 01 BF 08 01  // ................
    82B0: F3 A4 C7 06 B4 01 04 5A 8C 0E B6 01 9D C3 0B DB  // .......Z........
    82C0: 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 7A  // t..F.W2..@..._.z
    82D0: 9F 26 89 1D 26 8C 4D 02 2E 8E 1E 55 03 57 BE 49  // .&..&.M....U.W.I
    82E0: 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2  // ..........&..FG.
    82F0: F7 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26 89  // ._.....&.E"...&.
    8300: 45 23 57 E8 12 1C 5F 26 88 5D 25 26 88 7D 26 8A  // E#W..._&.]%&.}&.
    8310: 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1  // .I....t......2..
    8320: E3 2E 8A 87 52 9F 32 E4 0A C0 74 01 40 26 89 45  // ....R.2...t.@&.E
    8330: 27 2E 8A 87 53 9F 26 88 45 29 A1 85 04 8A 16 84  // '...S.&.E)......
    8340: 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E  // .......=..~...=^
    8350: 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E  // .~...=..~...=..~
    8360: 00 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04  // .&.U*.&....$....
    8370: 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A  // .............$..
    8380: E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02  // .......0.B.$....
    8390: 0A C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8 77  // ....&.E-..&.E1.w
    83A0: 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74  // ...2.........;.t
    83B0: 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5  // 4&.w.....t....&.
    83C0: 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C  // w.....t....&.w..
    83D0: D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1  // ...t....&.w.....
    83E0: 74 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4 03  // t......&.U2.....
    83F0: E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2  // ................
    8400: 04 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A  // ..%....&.E+...F.
    8410: 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B EC  // ....t...t6..tV..
    8420: C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60  // .F.... ....t...`
    8430: F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03 03  // ...t...:...t....
    8440: 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3  // ..?......F..F...
    8450: 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02  // .... ...t.......
    8460: 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6  // t.......t.......
    8470: 46 1A 1C C3 F6 C1 01 74 06 E8 16 15 E8 25 01 F6  // F......t.....%..
    8480: C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB  // ..t.......t.....
    8490: DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04  // ....B....J....k.
    84A0: BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC  // ......2.......B.
    84B0: AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26  // ...J........ ..&
    84C0: 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0  // ....GF...&.%.G..
    84D0: E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2  // ........&..G....
    84E0: F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8  // ....QW..+.&.....
    84F0: 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26 88  // ...&.D.&.TA...&.
    8500: 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44 04  // D....&.D....&.D.
    8510: B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70  // ...&...........p
    8520: FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4  // .&........&.TA2.
    8530: B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE  // ....[.&.D..._...
    8540: 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83  // 2.....I.&.D.._Y.
    8550: C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51 57  // .`......+.&.G.QW
    8560: 2E 8E 1E 55 03 A0 10 04 24 30 AA BE 49 04 B9 1E  // ...U....$0..I...
    8570: 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3  // ................
    8580: A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE  // .........t......
    8590: 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83  // |............_Y.
    85A0: C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE  // .:....&.?....Q..
    85B0: 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8  // ................
    85C0: 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF  // ..G..&.D........
    85D0: 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0  // &...&.TA......2.
    85E0: E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE  // ...&.D.....&.D..
    85F0: EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2  // ...2..... ...2..
    8600: CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B  // ....&.D..Y....&.
    8610: 7F 02 03 FB 06 51 2E 8E 1E 55 03 26 8A 05 80 26  // .....Q...U.&...&
    8620: 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E  // .......G.I......
    8630: FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E  // ...............~
    8640: FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E  // .......v..t....n
    8650: FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E  // ..|....f.......^
    8660: FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8  // .Y.......+.&.G..
    8670: A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC  // .....4.B.&......
    8680: 26 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9  // &.E.PJJ.&.E.....
    8690: 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D  // ..B2..BB....XJ..
    86A0: C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34  // ...&.w....l....4
    86B0: EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42 42  // .&......&.D..VBB
    86C0: 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2  // ...2..B...&...F.
    86D0: F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24  // .^..&.D........$
    86E0: FE 0A C4 B2 C2 EE C3 E8 A8 12 B2 C0 86 C4 EE EB  // ................
    86F0: 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A  // ........... ..P.
    8700: E0 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F 8A  // .....&....&..$..
    8710: E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13  // .<.~.&.G3.u.<#t.
    8720: 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75  // <2t.<3t...&.G..u
    8730: 02 B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02 26  // ....&I.........&
    8740: F6 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16 63  // .G..t....&.....c
    8750: 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF  // ...N.....b......
    8760: 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4  // P.....3....&..2.
    8770: A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85  // .J.&.G....&.G...
    8780: 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60  // .&.G..L.&.G....`
    8790: 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75  // .X.R2.3.......)u
    87A0: 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E  // .2.3.....Z...`..
    87B0: 1E 55 03 2E 83 0E 5F 03 00 75 6E 80 3E 00 05 01  // .U...._..un.>...
    87C0: 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B  // tg.......b.2....
    87D0: FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04  // ...P..>b.P2.....
    87E0: 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29  // 2.AQ..J.2......)
    87F0: 75 3D 51 52 89 95 50 04 B4 08 E8 6F D2 0A C0 75  // u=QR..P....o...u
    8800: 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE  // .. 3.2.....)u.Z.
    8810: C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00  // .Y....Y...w.2...
    8820: 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59  // .X..P....a...ZYY
    8830: B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06  // ....R*.8.}.2....
    8840: 57 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA  // W.Z.............
    8850: C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A  // .........m...2..
    8860: E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57  // .........Ku.2..W
    8870: 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8  // ..S..b...u...t..
    8880: 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3  // 5.[..+.......2..
    8890: 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04  // ..2.+...t**..&..
    88A0: 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E  // ..R... .......Z.
    88B0: 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F  // ............Hu..
    88C0: E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC  // ..............B.
    88D0: 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D  // $....J....B...J.
    88E0: C3 1E 2E 8E 1E 55 03 8B 16 63 04 80 C2 06 1F C3  // .....U...c......
    88F0: 1E 2E 8E 1E 55 03 8B 16 63 04 1F C3 50 BA CC 03  // ....U...c...P...
    8900: EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2  // .....u...X......
    8910: 06 C3 1E 2E 8E 1E 55 03 80 3E 49 04 03 74 13 80  // ......U..>I..t..
    8920: 3E 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E 49  // >I..t..>I..t..>I
    8930: 04 00 1F C3 50 2E 8E 06 59 03 A0 10 04 24 30 3C  // ....P...Y....$0<
    8940: 30 74 05 2E 8E 06 5B 03 58 0B C0 74 03 E8 E1 01  // 0t....[.X..t....
    8950: 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04  // ..N.....+.2...J.
    8960: 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02  // ..............u.
    8970: 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3  // ..8.~...........
    8980: FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06  // ...:.J.t........
    8990: 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7  // ..@.............
    89A0: DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED  // .+.......S..*.2.
    89B0: 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5  // 2.+.+...........
    89C0: 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE  // ....u.X. .......
    89D0: CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3  // .u..S..*.t......
    89E0: A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E  // .X...... .......
    89F0: 00 2E 8E 1E 5B 03 8A C3 22 DF D3 E3 A8 80 74 03  // ....[...".....t.
    8A00: 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC  // 0.....4"........
    8A10: E8 0C 00 2E 8E 1E 5B 03 8A 04 D2 E8 22 C7 C3 B0  // ......[....."...
    8A20: 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02  // (.....t.........
    8A30: 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03  // ................
    8A40: C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8  // ................
    8A50: 2E 8E 06 5B 03 8B C1 E8 86 00 75 02 8A DE 03 F0  // ...[......u.....
    8A60: E8 24 00 C3 FC 8A D8 2E 8E 06 5B 03 8A C1 8A E6  // .$........[.....
    8A70: E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0  // .m.u............
    8A80: 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA  // .+.......*..,Q..
    8A90: 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9  // VW..........+.+.
    8AA0: 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4  // ... ... ........
    8AB0: 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57  // _^....Y........W
    8AC0: D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20  // ..........+.... 
    8AD0: D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3  // ........_....u..
    8AE0: E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51  // .......+.8.v.2.Q
    8AF0: B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04  // ......Y2..P..>I.
    8B00: 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6  // .t............P.
    8B10: E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04  // ....RS..2.....P.
    8B20: E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A  // ...P...L...[..[Z
    8B30: C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A  // .R...J...2.....Z
    8B40: C3 8B E8 83 E5 0F 2E 8A A6 F1 8A 8B E8 C1 ED 04  // ................
    8B50: 83 E5 0F 2E 8A 86 F1 8A C3 00 03 0C 0F 30 33 3C  // .............03<
    8B60: 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00  // ?........&......
    8B70: 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88  // ....t........u..
    8B80: 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE  // V.E...c.........
    8B90: C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32  // ...R.....&J....2
    8BA0: F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04  // ...Z.S..2.....P.
    8BB0: D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6  // .....[.R..2.R...
    8BC0: 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06  // &...&J.Z....t...
    8BD0: 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4  // L...u.Z.R...J...
    8BE0: 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E  // 2.......N.......
    8BF0: E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03  // ...Z....&J......
    8C00: 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8  // ....t...2..&L...
    8C10: 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF  // ................
    8C20: B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4  // ... .......2....
    8C30: 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8  // >..&.}......S...
    8C40: 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8  // ................
    8C50: 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76  // .U......<.t....v
    8C60: FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0  // .<Ut.2.[........
    8C70: 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06  // .......[....6...
    8C80: 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6  // ...t%..*.....R2.
    8C90: C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA  // .......+.Q....+.
    8CA0: 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6  // +.Y..Z..........
    8CB0: F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1  // ........2.......
    8CC0: E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E  // ...+.....+.Nu...
    8CD0: 8E 1E 55 03 89 0E 60 04 8A C5 24 60 A8 20 74 06  // ..U...`...$`. t.
    8CE0: B9 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00 80  // ................
    8CF0: 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04  // >I..t....t......
    8D00: 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD  // .t..B..6......8.
    8D10: 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1  // ~...td.......\8.
    8D20: 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB  // tX.....|........
    8D30: 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA  // I...~D..*...u.8.
    8D40: 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A  // t8..8.t2....8.~.
    8D50: 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A  // ...~.........}..
    8D60: D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A  // ...8.t.........*
    8D70: EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3  // ................
    8D80: 2E 8E 1E 55 03 A2 62 04 32 E4 8B F0 F7 26 4C 04  // ...U..b.2....&L.
    8D90: A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77  // .N....z.t..>I..w
    8DA0: 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27  // ............P..'
    8DB0: FE C3 2E 8E 1E 55 03 8A 26 49 04 E8 C2 92 74 07  // .....U..&I....t.
    8DC0: C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74  // ..P.....H.t....t
    8DD0: 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03  // .w..w.........|.
    8DE0: 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A  // t...N..........J
    8DF0: 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA  // .R.&........Z...
    8E00: C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B  // ..0......g....R.
    8E10: 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0  // .J.....&........
    8E20: 5A E8 55 FE C3 2E 8E 1E 55 03 8A 26 49 04 E8 E1  // Z.U.....U..&I...
    8E30: FA 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8  // .t....t.w@......
    8E40: 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6  // S...............
    8E50: FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85  // .....+>J....R.&.
    8E60: 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A  // ..&J......+.Z..J
    8E70: 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74  // .............|.t
    8E80: C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9  // ................
    8E90: 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B  // R..J..&....+...+
    8EA0: F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E 55 03 2E 8E 06  // .Z.........U....
    8EB0: 5B 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E  // [..].t..>I..|...
    8EC0: 06 59 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07  // .Y.t.....I...&..
    8ED0: 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08  // ...F...P........
    8EE0: 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00 26  // .+....>I..u....&
    8EF0: 8A 04 88 46 00 45 26 8A 84 00 20 88 46 00 45 83  // ...F.E&... .F.E.
    8F00: C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00  // .P..............
    8F10: E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0  // .V.... .O.......
    8F20: EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26  // ..+..>..2....u.&
    8F30: 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6  // .}..u...........
    8F40: 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB  // .t.GVW.._^t#....
    8F50: F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E  // ...t.G..u...t...
    8F60: 1E 55 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B  // .U..>|.......2..
    8F70: E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05  // ......F...>I..|.
    8F80: 75 02 EB 5A C3 2E 8E 06 57 03 E8 18 FC 8B F0 8B  // u..Z....W.......
    8F90: 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03  // ...+............
    8FA0: 80 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A  // .>I..r.....`u...
    8FB0: F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05  // ....u...........
    8FC0: 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36  // ..Q..&.....F.E.6
    8FD0: 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E  // J...X....2..D...
    8FE0: 06 57 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7  // .W..P...2.R..2..
    8FF0: 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04  // &J..&..Z........
    9000: 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03  // +...S.>J.O......
    9010: B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC  // ...2.&......t...
    9020: 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00  // .F...f.E..Ku.[..
    9030: 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E  // .2....3.........
    9040: 55 03 2E 8E 06 5B 03 8A 26 49 04 E8 C4 F8 74 0F  // U....[..&I....t.
    9050: 2E 8E 06 59 03 80 FC 07 74 05 7C 3D E9 0B 02 8A  // ...Y....t.|=....
    9060: E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0  // .....2.....P....
    9070: 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B  // J...2.........t.
    9080: D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75  // ...L.....u.....u
    9090: 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 5B 03 A1  // .....G...P...[..
    90A0: 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8  // P.......P..&J...
    90B0: 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C  // X..t.$..6|....6.
    90C0: 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1  // ...2.........ti.
    90D0: E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5  // ....U...........
    90E0: 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC  // P.....u'..U.#...
    90F0: E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75  // .N.#.&......N..u
    9100: E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC  // ......>.X.r.....
    9110: E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31  // ...#.&1...%.#.&1
    9120: 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E  // .. ..P..u......>
    9130: 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80  // .X.I......P.....
    9140: 74 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50 FE  // t..&0..&0.. ..P.
    9150: CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA  // ........?.X. ...
    9160: C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1  // ....&......O....
    9170: 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0  // .....?.X........
    9180: 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6  // 8.r.2...........
    9190: E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66  // ...2...f...Q...f
    91A0: 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A  // ...J...du..h...Z
    91B0: 75 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52 F7  // u..`.....u....R.
    91C0: E2 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1  // .f...f...P.f..f.
    91D0: CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10  // ....f.......f...
    91E0: 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03  // Z..J....P.P.....
    91F0: F0 2E 8E 06 57 03 58 57 51 50 9C FC 8B CD E8 3B  // ....W.XWQP.....;
    9200: 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88  // ..........s...&.
    9210: 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F  // .fG..u.f.....XY_
    9220: 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03  // .....8.r.Q2...I.
    9230: FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0  // ......Y+.....R3.
    9240: 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 31 8E 74  // ..f.....f....1.t
    9250: 16 38 E0 74 12 0F B6 D0 E8 4C C6 8A E0 66 C1 C7  // .8.t.....L...f..
    9260: 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F  // ...f...Z.....|..
    9270: 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC  // .....b..........
    9280: 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1  // .u.......PS..2..
    9290: E3 8B 97 50 04 5B 2E 8E 06 57 03 E8 07 F9 8B F8  // ...P.[...W......
    92A0: 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85  // ....X2.R.6J.V.&.
    92B0: 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03  // ..6.....u..|..u.
    92C0: B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4  // ..F.........um..
    92D0: B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B  // ....ZXPRJ..WQQW.
    92E0: CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A  // .2......_G..8.v.
    92F0: 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA  // 2...I..G..Y..Y_.
    9300: C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26  // .......[KZQW...&
    9310: 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A  // .%....._G+.B;.v.
    9320: 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03  // 3...I..G..Y.....
    9330: B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18  // ................
    9340: EF EB BC 2E 8E 1E 55 03 80 3E 63 04 B4 74 0B BA  // ......U..>c..t..
    9350: CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF  // .....u..B.......
    9360: 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66 04  // u.......&f...&f.
    9370: E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91  // .-...f... ......
    9380: F5 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2  // .t..f.$....t.. .
    9390: 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3  // f.$......S...~..
    93A0: 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8  // SP..............
    93B0: 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26  // `.t......,...t.&
    93C0: 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58  // .........t.&.].X
    93D0: 5B C3 8A E0 1E 2E 8E 1E 55 03 80 3E 49 04 33 1F  // [.......U..>I.3.
    93E0: 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA  // ...........0....
    93F0: E8 9F 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE  // ................
    9400: 0B ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0  // ..t.G&..........
    9410: 20 EE 9D C3 2E 8E 1E 55 03 8A 26 49 04 E8 F2 F4  //  ......U..&I....
    9420: 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13  // t....w.t........
    9430: 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF  // |.tL............
    9440: 2E 8E 1E 57 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF  // ...W....u.......
    9450: 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2  // .%.......%...%..
    9460: CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3  // ................
    9470: EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1  // ..%...%.........
    9480: 50 2E 8E 06 57 03 A1 4A 04 C1 E0 03 F7 E2 03 C1  // P...W..J........
    9490: 8B F8 58 26 88 05 C3 2E 8E 1E 55 03 8A 26 49 04  // ..X&......U..&I.
    94A0: E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B  // .o.t....w.t.._..
    94B0: EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7  // ..F.....|.t)..5.
    94C0: 8A CC 2E 8E 1E 57 03 BA CE 03 32 FF B8 04 03 EF  // .....W....2.....
    94D0: D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B  // ....".t......}..
    94E0: EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B  // ..~...J.........
    94F0: F8 2E 8E 1E 57 03 8A 05 8B EC 88 46 1A C3 2E 8E  // ....W......F....
    9500: 1E 55 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04  // .U..>b.....2..P.
    9510: 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 5B  // ......I.<.vJ...[
    9520: 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3  // ....u3..J.......
    9530: 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1  // ........N.......
    9540: E9 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E  // .A..8.sY....c...
    9550: 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 59 03 80 F9  // ............Y...
    9560: 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D  // .t....u.2...<.u.
    9570: 3A 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3  // :6..u...........
    9580: 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75  // u.........L..<.u
    9590: 04 E8 D2 71 C3 3C 08 75 83 0A D2 74 DE FE CA EB  // ...q.<.u...t....
    95A0: DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03  // .2.2.+.:6..t....
    95B0: CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1  // .......c........
    95C0: FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04  // ...+.+.&.e.P.>N.
    95D0: 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3  // ................
    95E0: A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 7B  // ...X. .........{
    95F0: C4 FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2  // ...:.J.t....2.2.
    9600: 89 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E  // ..:6..t.........
    9610: 06 5B 03 E8 FC F2 74 0E 2E 8E 06 59 03 80 F9 07  // .[....t....Y....
    9620: 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F  // t.2............O
    9630: 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04  // ..J...3..6....J.
    9640: FE CA B0 01 E9 70 F7 2E 8E 1E 55 03 F6 06 87 04  // .....p....U.....
    9650: 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3  // .t..B..v....F...
    9660: 2E 8E 1E 55 03 8A DF 32 FF D1 E3 89 97 50 04 D0  // ...U...2.....P..
    9670: EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E  // .8.b.u....\.....
    9680: 55 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04  // U...2.....P...`.
    9690: 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E 55 03 A0 87  // ...N..V.....U...
    96A0: 04 24 80 0A 06 49 04 8A 26 4A 04 F6 06 87 04 08  // .$...I..&J......
    96B0: 75 2D E8 5D F2 74 07 80 3E 49 04 07 7F 21 51 8A  // u-.].t..>I...!Q.
    96C0: CC 8A 2E 84 04 BE 8A 96 81 FE 93 96 74 10 2E 3B  // ............t..;
    96D0: 0C 74 05 83 C6 03 EB F0 24 80 2E 0A 44 02 59 8A  // .t......$...D.Y.
    96E0: 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56  // >b....F..^..N..V
    96F0: 12 C3 84 18 23 84 2B 33 84 2A 32 2E 8E 1E 55 03  // ....#.+3.*2...U.
    9700: 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08  // <...PR......ZXt.
    9710: 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C  // .>c..t...>c..u.<
    9720: 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 C6 96 FE 96  // .s.2............
    9730: 1E 97 30 97 65 97 AF 96 AF 96 AF 96 8A 97 A2 97  // ..0.e...........
    9740: A6 97 AF 96 AF 96 AF 96 AF 96 AF 96 AF 96 D4 97  // ................
    9750: AF 96 D8 97 F3 97 AF 96 32 98 AF 96 40 98 5B 98  // ........2...@.[.
    9760: 62 98 6E 98 92 98 80 3E 49 04 13 74 15 E8 BF F4  // b.n....>I..t....
    9770: 8B C3 86 E0 E8 70 EF 0B ED 74 07 8A C7 32 FF 26  // .....p...t...2.&
    9780: 88 01 E8 93 F4 C3 E8 A6 F4 8A C7 E8 44 FC 0B ED  // ............D...
    9790: 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06  // t.&.}....>I..t..
    97A0: E8 8C F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B  // ......t.........
    97B0: F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE  // ....2...........
    97C0: AC EE 9D FE C4 E2 F4 AC E8 07 FC EB B5 80 FB 01  // ................
    97D0: 77 B0 E8 43 F4 B2 C0 B0 30 E8 FB F0 24 F7 80 26  // w..C....0...$..&
    97E0: 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE  // e.....t.....e. .
    97F0: EB 90 E8 9D 01 8A C3 B2 C0 E8 DB F0 8B C8 EE B0  // ................
    9800: 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA  //  ....N..x.......
    9810: E8 05 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42  // ......2........B
    9820: EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11  // .&....J..G......
    9830: EE 42 EC 9D 26 88 05 E8 E3 F3 EB 5A E8 CE 00 C3  // .B..&......Z....
    9840: 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02  // ..Q..&.5&.m.&.M.
    9850: E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8  // ......CY.....u..
    9860: B6 F3 B2 C0 B0 30 E8 6E F0 24 7F F6 C7 01 74 02  // .....0.n.$....t.
    9870: 0C 80 B4 30 E8 70 EE EB 1D FE CB 75 1C E8 98 F3  // ...0.p.....u....
    9880: B2 C0 B0 30 E8 50 F0 EE A8 80 75 03 C0 E7 02 B4  // ...0.P....u.....
    9890: 34 8A C7 E8 51 EE E8 7F F3 C3 8A C3 E8 D1 00 8B  // 4...Q...........
    98A0: EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00  // ..N..v....Q.....
    98B0: 26 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43 59  // &.5&.m.&.M....CY
    98C0: E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4  // ..............2.
    98D0: 8B EC 89 46 0E C3 E8 3F F3 B2 C0 B0 34 E8 F7 EF  // ...F...?....4...
    98E0: 8A F8 EE B0 30 E8 EF EF B3 01 A8 80 75 05 B3 00  // ....0.......u...
    98F0: C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00  // ......^...Q...s.
    9900: E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89  // .*....R.CY......
    9910: 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89  // ..t.......9.....
    9920: 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E  // ..t..........P..
    9930: F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59  // ..P.;..P....Y..Y
    9940: 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A  // ...d....2|......
    9950: E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03  // ...X.R.9.ZS.....
    9960: 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3  // ...B..........[.
    9970: E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB  // ...S......BB....
    9980: 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D  // ................
    9990: 5B C3 50 51 E8 81 F2 B9 FF 7F EC A8 08 75 02 E2  // [.PQ.........u..
    99A0: F9 59 58 C3 2E 8E 1E 55 03 8B F8 24 0F 81 E7 F0  // .YX....U...$....
    99B0: 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 56 99 5E 99  // ............V.^.
    99C0: 73 99 11 9A 6D 9A 3C 03 74 08 3C 04 7F 03 E8 CF  // s...m.<.t.<.....
    99D0: 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50  // ...........<.w.P
    99E0: 53 50 52 8B 16 63 04 B0 07 E8 EB EE 8A E0 D0 EC  // SPR..c..........
    99F0: 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8 D8 EE 40  // ....@t.........@
    9A00: A3 85 04 B0 09 E8 CF EE A8 80 74 04 D1 2E 85 04  // ..........t.....
    9A10: A1 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01  // .....=..s....=..
    9A20: 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01  // s....=|.s..^.=J.
    9A30: 73 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04 FF  // s........ZX.....
    9A40: E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C  // .].[X..2...t...<
    9A50: 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81  // .t...<.t........
    9A60: E9 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04  // ......~.........
    9A70: 53 E8 5B F2 5B E8 8D 02 C3 0A C0 74 11 FE C8 74  // S.[.[......t...t
    9A80: 1A FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E  // ...t8..t<..t@...
    9A90: 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74  // |...~..........t
    9AA0: 07 32 FF 2E 8A 97 51 9A 89 0E 85 04 88 16 84 04  // .2....Q.........
    9AB0: 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 42 03  // ............*.B.
    9AC0: B9 0E 00 EB D6 BD A8 68 B9 08 00 EB CA BD BB 70  // .......h.......p
    9AD0: B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84  // .......u........
    9AE0: 04 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06 C4  // ....w5...w...u..
    9AF0: 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B  // .|..&..... ...u.
    9B00: 8C CD 8E C5 2E 8B 2E 9A 81 EB 10 0E 07 8A DF 32  // ...............2
    9B10: FF 80 EB 02 D1 E3 2E 8B AF C4 9A 8B C5 8B EC 89  // ................
    9B20: 4E 16 89 56 12 89 46 0A 8C 46 1E C3 BB 70 A8 68  // N..V..F..F...p.h
    9B30: A8 6C A8 70 BB 70 BB 80 53 06 8A 26 49 04 E8 A1  // .l.p.p..S..&I...
    9B40: C1 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD BB  // .&.G.&.g3...t"..
    9B50: 70 3C 10 7D 0E E8 AA 02 8C 06 0E 01 3C 0E 7D 07  // p<.}........<.}.
    9B60: BD A8 68 8C 0E 0E 01 89 2E 0C 01 E8 18 01 EB 2D  // ..h............-
    9B70: B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02  // ..<.}...<.t.....
    9B80: 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03  // <.t......&.G..t.
    9B90: 80 E4 7F 86 C4 32 DB E8 06 00 E8 02 02 07 5B C3  // .....2........[.
    9BA0: 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF  // ................
    9BB0: B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50  // ...............P
    9BC0: 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75  // $...t"..3....<.u
    9BD0: 07 B7 10 BD BB 70 EB 10 FE C8 75 07 B7 0E E8 21  // .....p....u....!
    9BE0: 02 EB 05 B7 08 BD A8 68 E8 35 00 58 A8 80 74 08  // .......h.5.X..t.
    9BF0: E8 2D 71 75 03 E8 76 01 BA C4 03 B8 02 03 EF B8  // .-qu..v.........
    9C00: 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2  // ...........u....
    9C10: CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3  // .P.X....2.......
    9C20: FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10  // ...u.....u.&.~..
    9C30: 75 03 80 CD 80 1E 06 1F 2E 8E 06 57 03 8B FA C1  // u..........W....
    9C40: E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02  // ...@S.....[...t.
    9C50: 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB  // . .........(2...
    9C60: 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20  // 2.Q...t.F...... 
    9C70: 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46  // t.. .+...Y...t.F
    9C80: FE C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8  // ..u....&I.P.W.>.
    9C90: 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07  // .&.}.....t0.....
    9CA0: 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD  // &..<.t$8.t.G....
    9CB0: 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04 26  // &.......&.E....&
    9CC0: C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26  // .}..>......_.X.&
    9CD0: F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C  // .G3.t......&._..
    9CE0: C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47  // ...t....&..<.t.G
    9CF0: 38 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B  // 8.I.u.&..2......
    9D00: D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80  // .......c..&.....
    9D10: E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0  // .......t....B.$.
    9D20: 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A  // ...J...B.$......
    9D30: C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07  // ..........>...u.
    9D40: A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0  // ............t...
    9D50: 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84  // H......c...J..&.
    9D60: 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 1E 32  // ...........L...2
    9D70: FF 8A DC BE BB 80 80 FB 10 74 0A BE A8 70 80 FB  // .........t...p..
    9D80: 0E 74 02 1F C3 0E 1F 8B 3C 0B FF 74 10 81 E7 FF  // .t......<..t....
    9D90: 00 46 C1 E7 05 03 FA 8B CB F3 A4 EB EA 1F C3 8A  // .F..............
    9DA0: 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5  // &I.P.W.>..&.}...
    9DB0: 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E  // ..tJ.....&..<.t>
    9DC0: 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01  // 8.t.G....&.=&.].
    9DD0: 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02  // &.M.&.U.&.E.<.t.
    9DE0: FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58  // ..P......&.....X
    9DF0: A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 A2 FD 5F 07  // ...&.}...2...._.
    9E00: 58 C3 50 53 51 52 2E A1 5F 03 0B C0 74 09 2E 8B  // X.PSQR.._...t...
    9E10: 2E 9A 81 0E 07 EB 08 B8 30 11 B7 02 E8 4D BC 5A  // ........0....M.Z
    9E20: 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 55  // Y[X.<.|....S...U
    9E30: 03 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B  // ...2.......P..5[
    9E40: 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F  // ..V..QS&.F.E<...
    9E50: 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 05  // u.2..@<.t2<.u...
    9E60: 69 EB 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7  // i.b<.u...tZ...'.
    9E70: C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8  // ...t.&.^.E......
    9E80: EA BB FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36  // ....:.J.r.2...:6
    9E90: 84 04 73 06 FE C6 89 15 EB 2B 50 E8 74 EA 75 08  // ..s......+P.t.u.
    9EA0: B8 00 08 E8 C6 BB EB 09 80 3E 49 04 07 74 F1 32  // .........>I..t.2
    9EB0: E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E  // ..>b.S..U.%.][.>
    9EC0: 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02  // b.X..[Y..Z....u.
    9ED0: 89 15 8B 05 3A 3E 62 04 75 03 E8 FB EC C3 E9 64  // ....:>b.u......d
    9EE0: FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06  // .3..6....J......
    9EF0: E8 79 BB C3 2E 8E 1E 55 03 0A C0 75 0D E8 18 00  // .y.....U...u....
    9F00: 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41  // ...^..F...<.u..A
    9F10: 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF 8A 9F 2E 3A  // ....F..........:
    9F20: 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D  // .r.....2.......]
    9F30: 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04  // ...t...u........
    9F40: 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74  // $0<0t....u.....t
    9F50: E9 C3 BF 8A 9F 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D  // ........2.....;.
    9F60: 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8  // t....;.t......8.
    9F70: 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02  // ~...............
    9F80: 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00  // t..........t....
    9F90: BA B4 03 E8 A6 EC 74 21 B7 01 E8 53 E9 80 FA D4  // ......t!...S....
    9FA0: 74 17 86 FB C3 BA D4 03 E8 91 EC 74 0C B7 02 E8  // t..........t....
    9FB0: 3E E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08  // >....t..........
    9FC0: 0F 08 03 01 03 01 01 01 00 08 01 01 01 01 01 01  // ................
    9FD0: 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01  // ................
    9FE0: FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00  // ................
    9FF0: 3F 00 10 01 08 00 00 00 00 01 00 02 02 01 00 04  // ?...............
    A000: 04 01 00 05 02 05 00 06 01 06 05 06 00 08 01 08  // ................
    A010: 00 07 02 07 06 07 55 02 34 00 90 00 D2 00 00 00  // ......U.4.......
    A020: 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF  // ...._W..PfR.....
    A030: 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA  // .........f....f.
    A040: FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03  // ...2.f..fZX.f.O.
    A050: 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF  // fRfVSWP..uD.....
    A060: 66 33 F6 66 BB D0 05 E8 00 01 00 00 C1 E8 10 F6  // f3.f............
    A070: C4 40 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66  // .@u+f....f..f..f
    A080: 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 E8 00 00 00  // @...f..f........
    A090: 66 BB 12 00 E8 DF 00 00 00 66 58 32 E4 66 50 58  // f........fX2.fPX
    A0A0: 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 52 51 53 57  // _[f^fZ..f.O.RQSW
    A0B0: 66 56 50 8A FB 80 E3 7F 0A DB 75 26 E8 67 FF FF  // fVP.......u&.g..
    A0C0: FF C1 E2 10 66 8B D1 C1 E2 02 66 BE 00 00 E8 C7  // ....f.....f.....
    A0D0: 00 00 00 66 BE 00 02 E8 BE 00 00 00 66 58 32 E4  // ...f........fX2.
    A0E0: 66 50 58 66 5E 5F 5B 59 5A C3 66 B8 4F 03 66 51  // fPXf^_[YZ.f.O.fQ
    A0F0: 57 56 53 52 50 8A FB 80 E3 7F 0A DB 75 39 8A DA  // WVSRP.......u9..
    A100: 57 5A E8 21 FF FF FF 66 33 F6 66 53 66 BB D0 05  // WZ.!...f3.fSf...
    A110: E8 57 00 00 00 80 E4 01 66 5B 80 E7 FE 0A FC 66  // .W......f[.....f
    A120: BE 00 00 E8 DE 00 00 00 66 BE 00 02 E8 D5 00 00  // ........f.......
    A130: 00 66 58 32 E4 66 50 58 5A 5B 5E 5F 66 59 C3 90  // .fX2.fPXZ[^_fY..
    A140: 53 50 51 F6 C7 80 74 20 66 BB 9C 1B E8 1B 00 00  // SPQ...t f.......
    A150: 00 A8 01 74 13 66 B9 FF FF 66 BB A3 1B E8 0A 00  // ...t.f...f......
    A160: 00 00 A8 01 75 02 E2 F1 59 58 5B C3 66 52 E8 11  // ....u...YX[.fR..
    A170: 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF  // ....fZ..fR......
    A180: 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6  // fZ..f..P3.f..f..
    A190: C1 E0 02 EF 66 83 C2 04 58 C3 52 E8 A0 FF FF FF  // ....f...X.R.....
    A1A0: 81 E2 FF FF FF 02 66 BB 04 1A E8 BD FF FF FF 25  // ......f........%
    A1B0: 00 00 00 FD 03 C2 66 25 00 F0 E8 B9 FF FF FF 66  // ......f%.......f
    A1C0: BB 05 1A E8 B0 FF FF FF 66 81 E2 FF 0F 66 BB 01  // ........f....f..
    A1D0: 1A E8 96 FF FF FF 24 03 8A C8 66 D3 EA 66 BB 06  // ......$...f..f..
    A1E0: 1A E8 86 FF FF FF 66 03 C2 66 BB 0D 1A E8 86 FF  // ......f..f......
    A1F0: FF FF 66 8B C2 24 FC C1 E0 10 66 BB 5C 1B E8 75  // ..f..$....f.\..u
    A200: FF FF FF 5A C3 90 52 66 53 66 51 E8 30 FF FF FF  // ...Z..RfSfQ.0...
    A210: 33 C0 8A C3 66 53 66 BB 79 1A E8 59 FF FF FF 66  // 3...fSf.y..Y...f
    A220: 5B 66 49 66 81 E1 FF 00 66 41 32 C0 66 53 66 BB  // [fIf....fA2.fSf.
    A230: 78 1A E8 41 FF FF FF 66 5B 26 8A 42 02 C1 E0 0A  // x..A...f[&.B....
    A240: 26 8A 42 01 C1 E0 0A 26 8A 02 C1 E0 02 F6 C7 01  // &.B....&........
    A250: 75 03 C1 E0 02 66 53 66 BB 7C 1A E8 18 FF FF FF  // u....fSf.|......
    A260: 66 5B 83 C2 04 E2 D2 66 59 66 5B 5A C3 00 8E 43  // f[.....fYf[Z...C
    A270: 81 43 81 43 81 43 6C 43 6C 43 6C 43 6C 43 AE 3F  // .C.C.ClClClClC.?
    A280: 25 40 4F 40 90 41 8F 41 8F 41 D5 41 3A 42 6A 42  // %@O@.A.A.A.A:BjB
    A290: 27 43 50 43 50 43 C7 41 BA 41 BA 41 BA 41 BA 41  // 'CPCPC.A.A.A.A.A
    A2A0: BA 41 D5 41 3A 42 6A 42 27 43 55 43 9B 43 50 43  // .A.A:BjB'CUC.CPC
    A2B0: 50 43 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // PC..............
    A2C0: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A2D0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 B2 3D  // ...............=
    A2E0: 01 B2 3D 02 2B 52 03 0B 52 03 D7 3E 03 8B 3E 03  // ..=.+R..R..>..>.
    A2F0: B3 3D 04 CC 3D 04 DC 3D 04 B2 3D 03 00 00 00 00  // .=..=..=..=.....
    A300: 5F 45 00 02 5F 45 01 02 5F 45 02 02 5F 45 03 02  // _E.._E.._E.._E..
    A310: 5F 45 04 02 5F 45 05 02 59 47 00 02 59 47 01 02  // _E.._E..YG..YG..
    A320: 59 47 02 02 59 47 03 02 59 47 04 02 59 47 05 02  // YG..YG..YG..YG..
    A330: 8E 47 00 02 8E 47 01 02 8E 47 02 02 8E 47 03 02  // .G...G...G...G..
    A340: 8E 47 04 02 8E 47 05 02 A5 49 00 02 A5 49 01 02  // .G...G...I...I..
    A350: A5 49 02 02 A5 49 03 02 A5 49 04 02 A5 49 05 02  // .I...I...I...I..
    A360: A5 49 00 02 A5 49 01 02 A5 49 02 02 A5 49 03 02  // .I...I...I...I..
    A370: A5 49 04 02 A5 49 05 02 90 48 00 02 90 48 01 02  // .I...I...H...H..
    A380: 90 48 02 02 90 48 03 02 90 48 04 02 90 48 05 02  // .H...H...H...H..
    A390: BA 48 00 02 BA 48 01 02 BA 48 02 02 BA 48 03 02  // .H...H...H...H..
    A3A0: BA 48 04 02 BA 48 05 02 3D 48 00 02 3D 48 01 02  // .H...H..=H..=H..
    A3B0: 3D 48 02 02 3D 48 03 02 3D 48 04 02 3D 48 05 02  // =H..=H..=H..=H..
    A3C0: 71 48 00 02 71 48 01 02 71 48 02 02 71 48 03 02  // qH..qH..qH..qH..
    A3D0: 71 48 04 02 71 48 05 02 FD 4B 00 00 30 4C 01 00  // qH..qH...K..0L..
    A3E0: 30 4C 02 00 1D 4C 00 00 0B 4B 00 02 04 49 00 02  // 0L...L...K...I..
    A3F0: 04 49 01 02 04 49 02 02 04 49 03 02 04 49 04 02  // .I...I...I...I..
    A400: 04 49 05 02 23 4B 00 02 78 4D 05 00 78 4D 01 00  // .I..#K..xM..xM..
    A410: 78 4D 00 00 78 4D 02 00 B9 4D 00 00 B9 4D 02 00  // xM..xM...M...M..
    A420: FE 4D 00 00 8E 4A 00 02 8E 4A 01 02 8E 4A 02 02  // .M...J...J...J..
    A430: 8E 4A 03 02 8E 4A 04 02 8E 4A 05 02 4A 4C 00 00  // .J...J...J..JL..
    A440: 72 4C 00 00 F3 4C 00 00 6E 4D 00 00 52 49 00 02  // rL...L..nM..RI..
    A450: 52 49 01 02 52 49 02 02 52 49 03 02 52 49 04 02  // RI..RI..RI..RI..
    A460: 52 49 05 02 6D 4D 00 01 6D 4D 00 01 95 46 00 02  // RI..mM..mM...F..
    A470: 95 46 01 02 95 46 02 02 95 46 03 02 95 46 04 02  // .F...F...F...F..
    A480: 95 46 05 02 92 4C 00 00 6E 4D 00 00 6E 4D 00 00  // .F...L..nM..nM..
    A490: 6E 4D 00 00 A3 4B 00 00 B9 47 00 02 B9 47 01 02  // nM...K...G...G..
    A4A0: B9 47 02 02 B9 47 03 02 B9 47 04 02 B9 47 05 02  // .G...G...G...G..
    A4B0: E8 47 00 02 E8 47 01 02 E8 47 02 02 E8 47 03 02  // .G...G...G...G..
    A4C0: E8 47 04 02 E8 47 05 02 1E 48 00 02 1E 48 01 02  // .G...G...H...H..
    A4D0: 1E 48 02 02 1E 48 03 02 1E 48 04 02 1E 48 05 02  // .H...H...H...H..
    A4E0: B5 4C 00 00 D8 4C 00 00 A6 00 01 01 48 BE 5A BE  // .L...L......H.Z.
    A4F0: B2 BE 00 00 AE E9 E8 BE 00 00 00 00 00 00 1A BF  // ................
    A500: 1A C0 00 00 5C C0 B0 C5 00 00 00 00 00 00 38 E9  // ....\.........8.
    A510: 00 00 16 C8 5E C8 00 00 00 00 00 00 00 00 00 00  // ....^...........
    A520: 00 00 00 00 00 F4 00 00 00 00 00 00 00 00 EC C8  // ................
    A530: 64 C9 D8 C9 16 CA 36 CB 00 00 00 00 62 CB 00 00  // d.....6.....b...
    A540: 7C CB 5A CC 0A CE 54 CE 00 00 00 00 EA CE 78 CF  // |.Z...T.......x.
    A550: CC D0 38 F4 00 00 12 F6 A6 E4 00 00 C8 E6 00 00  // ..8.............
    A560: 00 00 00 00 32 E7 00 00 00 00 00 00 00 00 06 E8  // ....2...........
    A570: 00 00 7A E9 00 00 0A F6 00 00 FE C7 00 00 7A E8  // ..z...........z.
    A580: 00 00 EC F6 24 EB 00 00 58 F1 A4 F3 00 00 4A 00  // ....$...X.....J.
    A590: 01 01 00 00 00 00 00 00 70 A5 54 A6 C0 A6 C4 A9  // ........p.T.....
    A5A0: AA B1 00 00 00 00 96 AA EC AA F8 AC 14 AD 00 00  // ................
    A5B0: 88 AD 00 00 92 B1 00 00 00 00 00 00 00 00 88 AF  // ................
    A5C0: EA B0 00 00 00 00 18 B1 58 B1 00 00 00 00 F8 AA  // ........X.......
    A5D0: 00 00 00 00 00 00 00 00 E4 00 01 02 4E 0C 80 02  // ............N...
    A5E0: C0 00 90 01 2D 00 20 00 40 00 01 00 03 00 00 00  // ....-. .@.......
    A5F0: 00 00 00 00 02 00 E6 55 D6 09 80 02 A0 00 E0 01  // .......U........
    A600: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    A610: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    A620: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    A630: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    A640: 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05  // ..........U<0*..
    A650: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    A660: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    A670: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    A680: 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    A690: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    A6A0: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    A6B0: 03 00 00 00 00 00 00 00 00 00 EC 3C 6C 00 02 02  // ...........<l...
    A6C0: 49 00 30 0F 20 4E 00 00 68 A0 01 00 00 00 00 00  // I.0. N..h.......
    A6D0: 40 7E 05 00 00 00 00 00 00 00 00 00 C0 D4 01 00  // @~..............
    A6E0: 00 00 00 00 E2 4A 01 00 00 00 00 00 58 02 B0 04  // .....J......X...
    A6F0: 00 00 00 00 60 EA 00 00 00 00 00 00 00 00 00 00  // ....`...........
    A700: 00 00 00 00 40 9C A3 02 88 13 00 00 3F 40 C0 12  // ....@.......?@..
    A710: 10 27 10 27 00 00 00 00 00 00 00 00 00 00 00 00  // .'.'............
    A720: 00 00 00 00 00 00 00 00 04 03 02 01 00 00 00 00  // ................
    A730: 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15  // .*.*..***..*.**.
    A740: 00 2A 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F  // .***.....?.?..??
    A750: 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F 00 00 00 05  // ?..?.???.???....
    A760: 05 05 08 08 08 0B 0B 0B 0E 0E 0E 11 11 11 14 14  // ................
    A770: 14 18 18 18 1C 1C 1C 20 20 20 24 24 24 28 28 28  // .......   $$$(((
    A780: 2D 2D 2D 32 32 32 38 38 38 3F 3F 3F 00 00 3F 10  // ---222888???..?.
    A790: 00 3F 1F 00 3F 2F 00 3F 3F 00 3F 3F 00 2F 3F 00  // .?..?/.??.??./?.
    A7A0: 1F 3F 00 10 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00  // .?..?..?..?..?/.
    A7B0: 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F 00 00  // ??./?..?..?..?..
    A7C0: 3F 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F  // ?..?..?/.??./?..
    A7D0: 3F 00 10 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F 3F  // ?..?..?'.?/.?7.?
    A7E0: 3F 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F  // ?.??.7?./?.'?..?
    A7F0: 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F 3F  // '.?/.?7.??.7?./?
    A800: 1F 27 3F 1F 1F 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37  // .'?..?..?'.?/.?7
    A810: 1F 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 2D 2D 3F 31  // .??.7?./?.'?--?1
    A820: 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3F 3F 2D 3A 3F 2D  // -?6-?:-??-??-:?-
    A830: 36 3F 2D 31 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D  // 6?-1?--?1-?6-?:-
    A840: 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F 2D 2D  // ??-:?-6?-1?--?--
    A850: 3F 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36  // ?1-?6-?:-??-:?-6
    A860: 3F 2D 31 3F 00 00 1C 07 00 1C 0E 00 1C 15 00 1C  // ?-1?............
    A870: 1C 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C  // ................
    A880: 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E 1C  // ................
    A890: 00 07 1C 00 00 1C 00 00 1C 07 00 1C 0E 00 1C 15  // ................
    A8A0: 00 1C 1C 00 15 1C 00 0E 1C 00 07 1C 0E 0E 1C 11  // ................
    A8B0: 0E 1C 15 0E 1C 18 0E 1C 1C 0E 1C 1C 0E 18 1C 0E  // ................
    A8C0: 15 1C 0E 11 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E  // ................
    A8D0: 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C 0E 0E  // ................
    A8E0: 1C 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15  // ................
    A8F0: 1C 0E 11 1C 14 14 1C 16 14 1C 18 14 1C 1A 14 1C  // ................
    A900: 1C 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C  // ................
    A910: 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18 1C  // ................
    A920: 14 16 1C 14 14 1C 14 14 1C 16 14 1C 18 14 1C 1A  // ................
    A930: 14 1C 1C 14 1A 1C 14 18 1C 14 16 1C 00 00 10 04  // ................
    A940: 00 10 08 00 10 0C 00 10 10 00 10 10 00 0C 10 00  // ................
    A950: 08 10 00 04 10 00 00 10 04 00 10 08 00 10 0C 00  // ................
    A960: 10 10 00 0C 10 00 08 10 00 04 10 00 00 10 00 00  // ................
    A970: 10 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08  // ................
    A980: 10 00 04 10 08 08 10 0A 08 10 0C 08 10 0E 08 10  // ................
    A990: 10 08 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10  // ................
    A9A0: 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C 10  // ................
    A9B0: 08 0A 10 08 08 10 08 08 10 0A 08 10 0C 08 10 0E  // ................
    A9C0: 08 10 10 08 0E 10 08 0C 10 08 0A 10 0B 0B 10 0C  // ................
    A9D0: 0B 10 0D 0B 10 0F 0B 10 10 0B 10 10 0B 0F 10 0B  // ................
    A9E0: 0D 10 0B 0C 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B  // ................
    A9F0: 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10 0B 0B  // ................
    AA00: 10 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D  // ................
    AA10: 10 0B 0C 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA20: 00 00 00 00 00 00 00 00 00 00 00 00 D1 00 01 03  // ................
    AA30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA40: 00 00 00 00 00 00 00 00 06 00 00 00 00 00 20 00  // .............. .
    AA50: 00 00 00 00 1D 3C 01 00 00 00 00 00 00 CB C8 00  // .....<..........
    AA60: 07 5A 5A 07 7D 00 00 00 00 00 00 00 00 00 00 00  // .ZZ.}...........
    AA70: 00 00 00 00 00 00 00 00 04 80 00 00 00 00 00 00  // ................
    AA80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AAF0: 00 00 00 00 00 00 00 00 00 00 FF 00 00 00 55 00  // ..............U.
    AB00: 01 01 68 48 6A 48 6B 48 69 48 68 48 6A 48 6B 48  // ..hHjHkHiHhHjHkH
    AB10: 69 48 90 00 00 00 00 08 08 08 08 00 00 6C 48 6E  // iH...........lHn
    AB20: 48 6F 48 6D 48 6C 48 6E 48 6F 48 6D 48 91 00 00  // HoHmHlHnHoHmH...
    AB30: 00 00 08 08 08 08 00 00 70 48 72 48 73 48 71 48  // ........pHrHsHqH
    AB40: 70 48 72 48 73 48 71 48 92 00 00 00 00 08 08 08  // pHrHsHqH........
    AB50: 08 00 00 00 0C 00 01 05 E0 FF 07 00 20 00 20 00  // ............ . .
    AB60: 00 02 01 09 20 4E 00 00 40 7E 05 00 68 A0 01 00  // .... N..@~..h...
    AB70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AB80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AB90: 00 00 00 00 00 00 00 00 12 00 00 00 00 00 00 00  // ................
    ABA0: C8 00 64 01 00 00 00 00 0B 00 00 00 00 00 00 00  // ..d.............
    ABB0: 00 00 00 00 00 00 74 01 00 00 04 01 00 00 00 00  // ......t.........
    ABC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ABD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ABE0: 00 00 00 00 90 65 64 19 00 00 00 00 00 00 00 00  // .....ed.........
    ABF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC00: 00 00 00 00 6B 03 30 75 00 00 84 03 40 9C 00 00  // ....k.0u....@...
    AC10: A9 03 F8 C1 00 00 C2 03 91 F4 00 00 E8 03 DC 0B  // ................
    AC20: 01 00 1A 04 0E 28 01 00 3F 04 80 38 01 00 65 04  // .....(..?..8..e.
    AC30: E2 4A 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // .J..............
    AC40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC60: 00 00 00 00 00 00 00 00 4C 13 00 00 D0 07 00 00  // ........L.......
    AC70: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    AC80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AC90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    ACA0: 00 00 00 00 68 A0 01 00 8C 04 01 00 00 00 00 00  // ....h...........
    ACB0: 00 00 00 00 00 00 00 00 E0 22 02 00 D0 FB 01 00  // ........."......
    ACC0: C0 D4 01 00 70 11 01 00 50 00 58 00 5E 00 6C 00  // ....p...P.X.^.l.
    ACD0: 07 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    ACE0: 00 00 00 00 00 00 00 00 08 00 10 02 0C 31 00 00  // .............1..
    ACF0: 00 00 E4 00 00 00 00 00 80 00 20 02 03 31 01 01  // .......... ..1..
    AD00: 00 00 E4 00 08 00 00 00 00 02 30 02 13 31 02 02  // ..........0..1..
    AD10: 00 00 E4 00 08 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AD60: 1C 00 01 01 8D 48 00 01 8D 48 08 02 8D 48 10 03  // .....H...H...H..
    AD70: 8D 48 18 04 8D 48 1A 05 8D 48 1C 06 74 00 01 01  // .H...H...H..t...
    AD80: 10 01 06 12 11 01 16 12 13 01 06 6A 14 01 16 6A  // ...........j...j
    AD90: 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01 16 EA  // ...U...U........
    ADA0: 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01 0A 6A  // e...f...!..."..j
    ADB0: 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01 0A EB  // #..U$...E...F...
    ADC0: 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01 0A 70  // u...v......p...p
    ADD0: D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01 0A 72  // ...q...q...r...r
    ADE0: E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01 0A 74  // ...s...s...t...t
    ADF0: EF 01 06 01 00 00 00 00 00 58 00 60 00 82 00 00  // .........X.`....
    AE00: 00 00 00 58 00 00 00 00 00 13 00 00 80 00 00 00  // ...X............
    AE10: 00 00 00 00 00 00 00 00 17 00 00 00 B4 00 00 00  // ................
    AE20: 00 00 00 00 00 00 73 01 00 00 00 00 00 00 00 00  // ......s.........
    AE30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE40: 00 00 00 00 00 00 00 00 02 02 00 00 07 01 01 00  // ................
    AE50: 08 04 00 00 00 00 01 00 00 00 02 00 00 00 03 00  // ................
    AE60: 00 00 04 00 00 00 05 00 00 00 06 00 00 00 07 00  // ................
    AE70: 00 00 02 18 05 00 00 00 00 00 00 00 00 00 00 00  // ................
    AE80: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00  // ................
    AE90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AEA0: 00 00 00 00 18 00 00 00 00 00 00 00 00 00 CC 00  // ................
    AEB0: 28 01 00 00 00 00 9C 01 00 00 C6 01 00 08 30 75  // (.............0u
    AEC0: 00 30 75 00 40 9C 00 40 9C 00 59 D8 00 59 D8 00  // .0u.@..@..Y..Y..
    AED0: 91 F4 00 91 F4 00 0E 28 01 0E 28 01 90 5F 01 90  // .......(..(.._..
    AEE0: 5F 01 00 77 01 00 77 01 CA 91 01 CA 91 01 08 6C  // _..w..w........l
    AEF0: 00 00 68 00 01 62 00 02 5E 00 03 58 00 04 50 00  // ..h..b..^..X..P.
    AF00: 05 4A 00 06 44 00 07 08 07 01 06 01 01 01 02 01  // .J..D...........
    AF10: 01 01 02 01 03 01 04 01 00 08 40 9C 00 30 75 00  // ..........@..0u.
    AF20: 74 B5 00 A0 8C 00 60 EA 00 74 B5 00 0E 28 01 60  // t.....`..t...(.`
    AF30: EA 00 90 5F 01 40 19 01 B2 B0 01 90 5F 01 C0 D4  // ..._.@......_...
    AF40: 01 00 77 01 5E FF 01 CA 91 01 08 6C 00 00 68 00  // ..w.^......l..h.
    AF50: 01 62 00 02 5E 00 03 58 00 04 50 00 05 4A 00 06  // .b..^..X..P..J..
    AF60: 44 00 07 08 C8 AF 00 6C 00 59 D8 00 68 00 AF FF  // D......l.Y..h...
    AF70: 00 62 00 40 19 01 5E 00 80 38 01 58 00 90 5F 01  // .b.@..^..8.X.._.
    AF80: 50 00 00 77 01 4A 00 CA 91 01 44 00 00 08 6C 00  // P..w.J....D...l.
    AF90: 30 75 00 68 00 40 9C 00 62 00 59 D8 00 5E 00 DC  // 0u.h.@..b.Y..^..
    AFA0: 0B 01 58 00 80 38 01 50 00 80 38 01 4A 00 80 38  // ..X..8.P..8.J..8
    AFB0: 01 44 00 80 38 01 08 C8 AF 00 68 00 59 D8 00 64  // .D..8.....h.Y..d
    AFC0: 00 AF FF 00 5E 00 40 19 01 5A 00 80 38 01 54 00  // ....^.@..Z..8.T.
    AFD0: 90 5F 01 4C 00 00 77 01 46 00 CA 91 01 40 00 00  // ._.L..w.F....@..
    AFE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AFF0: 62 01 01 03 88 02 3A 00 00 00 BF 00 00 00 12 00  // b.....:.........
    B000: 2C 01 03 01 00 00 08 00 0C 00 0C 31 00 11 1E 21  // ,..........1...!
    B010: 00 00 80 00 0C 00 03 31 00 11 1E 22 00 00 00 02  // .......1..."....
    B020: 0C 00 13 31 00 11 20 21 00 00 03 00 00 00 0C 31  // ...1.. !.......1
    B030: 56 00 5C 00 00 00 03 31 79 00 7F 00 00 00 13 31  // V.\....1y......1
    B040: 9C 00 A2 00 00 00 01 1E 21 00 00 00 04 14 01 00  // ........!.......
    B050: 10 02 00 00 08 00 00 00 00 00 00 00 00 00 00 00  // ................
    B060: 01 04 90 00 02 04 01 00 FF 01 1E 22 00 00 00 04  // ..........."....
    B070: 14 01 00 20 02 00 00 80 00 00 00 00 00 00 00 00  // ... ............
    B080: 00 00 00 01 04 91 00 02 04 02 00 FF 01 20 21 00  // ............. !.
    B090: 00 00 04 14 01 00 30 02 00 00 00 02 00 00 00 00  // ......0.........
    B0A0: 00 00 00 00 00 00 01 04 92 00 02 04 03 00 FF 05  // ................
    B0B0: 00 00 00 1E 21 EB 00 F1 00 00 00 22 21 F6 00 FC  // ....!......"!...
    B0C0: 00 00 00 1E 22 05 01 0B 01 00 00 23 22 10 01 18  // ...."......#"...
    B0D0: 01 00 00 20 21 21 01 27 01 00 00 01 00 11 01 0C  // ... !!.'........
    B0E0: 31 14 04 03 00 FF 01 1E 21 01 15 31 01 04 00 00  // 1.......!..1....
    B0F0: 02 04 00 00 FF 01 00 11 01 03 31 14 04 07 00 FF  // ..........1.....
    B100: 01 1E 22 02 15 32 15 33 01 04 00 00 02 04 00 00  // .."..2.3........
    B110: FF 01 00 11 01 13 31 14 04 07 00 FF 02 00 00 00  // ......1.........
    B120: 03 71 00 00 40 01 00 00 04 71 55 01 5B 01 00 00  // .q..@....qU.[...
    B130: 10 0A 01 02 03 00 00 00 00 00 11 0A 90 91 92 00  // ................
    B140: 00 00 00 00 FF 00 00 00 00 00 00 09 06 00 01 00  // ................
    B150: 00 FF 2D 00 01 01 01 03 02 38 00 06 10 00 00 03  // ..-......8......
    B160: 38 00 02 39 00 09 10 00 01 83 02 38 00 06 10 00  // 8..9.......8....
    B170: 00 03 38 00 08 20 00 00 03 39 00 09 26 00 00 00  // ..8.. ...9..&...
    B180: 40 00 03 01 FF FF FF 00 00 00 E4 0C 04 01 00 00  // @...............
    B190: FF FF FF 00 00 00 E4 0C 05 01 00 00 FF FF FF 00  // ................
    B1A0: 00 00 A0 0F 06 00 00 00 FF FF FF 00 77 01 E4 0C  // ............w...
    B1B0: 07 12 00 00 FF FF FF 00 77 01 00 00 0B 12 00 00  // ........w.......
    B1C0: 39 00 02 03 14 00 00 00 39 35 00 00 6E 03 02 03  // 9.......95..n...
    B1D0: 00 00 00 00 1E 21 34 00 4C 00 03 FF FF 00 1E 22  // .....!4.L......"
    B1E0: 34 00 4C 00 09 FF FF 00 20 21 34 00 4C 00 0A FF  // 4.L..... !4.L...
    B1F0: FF 00 FF FF 02 04 00 04 FF 00 18 00 02 01 02 00  // ................
    B200: 08 00 80 00 00 02 00 04 00 08 40 00 01 00 10 00  // ..........@.....
    B210: FF FF 9E 0C 03 03 DA 02 22 00 52 00 CA 0B D6 0B  // ........".R.....
    B220: 00 00 00 00 5C 04 9F 05 EB 06 2E 08 71 09 99 0A  // ....\.......q...
    B230: 00 00 00 00 C0 48 00 1F C1 48 00 1F C2 48 00 1F  // .....H...H...H..
    B240: C3 48 00 1F CB 48 00 10 CD 48 00 10 C4 48 08 17  // .H...H...H...H..
    B250: CE 48 00 1F CF 48 00 1F D0 48 00 1F D1 48 00 1F  // .H...H...H...H..
    B260: D4 48 00 1F 2E 00 A4 38 02 07 77 77 F0 0F 00 00  // .H.....8..ww....
    B270: 00 00 00 00 00 00 00 00 00 00 00 00 0E 80 08 08  // ................
    B280: 01 00 20 84 C4 06 01 00 81 0A 01 00 01 00 0E 00  // .. .............
    B290: 02 00 00 00 FF FF 02 07 77 77 F0 0F 00 00 00 00  // ........ww......
    B2A0: 00 00 00 04 00 00 00 00 00 00 0E 80 08 08 01 00  // ................
    B2B0: 20 84 C4 06 01 00 9F 0A 01 00 01 00 0E 00 02 00  //  ...............
    B2C0: 00 00 74 40 03 02 77 77 F0 0F 00 00 00 00 00 00  // ..t@..ww........
    B2D0: 00 00 00 00 00 00 00 00 0E 80 08 08 01 00 20 84  // .............. .
    B2E0: C4 06 01 00 81 0A 01 00 01 00 0E 00 02 00 00 00  // ................
    B2F0: E4 57 03 02 77 77 F0 0F 00 00 00 00 00 00 00 0C  // .W..ww..........
    B300: 00 00 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06  // ............ ...
    B310: 01 00 9F 0A 01 00 01 00 0E 00 02 00 00 00 30 75  // ..............0u
    B320: 03 02 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00  // ................
    B330: 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00  // .......... .....
    B340: 9F 0A 01 00 01 80 08 00 02 00 00 00 FF FF 03 02  // ................
    B350: 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00 00 00  // ................
    B360: 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00 9F 0A  // ........ .......
    B370: 01 00 01 00 0E 00 02 00 00 00 74 40 03 04 77 77  // ..........t@..ww
    B380: F0 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B390: 0E 80 08 08 01 00 20 84 C4 06 01 00 81 0A 01 00  // ...... .........
    B3A0: 01 00 0E 00 02 00 00 00 E4 57 03 04 77 77 F0 0F  // .........W..ww..
    B3B0: 00 00 00 00 00 00 00 0C 00 00 00 00 00 00 0E 80  // ................
    B3C0: 08 08 01 00 20 84 C4 06 01 00 9F 0A 01 00 01 00  // .... ...........
    B3D0: 0E 00 02 00 00 00 30 75 03 04 11 11 A0 0A 00 00  // ......0u........
    B3E0: 00 00 00 00 00 1C 00 00 00 00 00 00 0E 80 08 08  // ................
    B3F0: 01 00 20 84 C4 06 01 00 9F 0A 01 00 01 80 08 00  // .. .............
    B400: 02 00 00 00 FF FF 03 04 11 11 A0 0A 00 00 00 00  // ................
    B410: 00 00 00 1C 00 00 00 00 00 00 0E 80 08 08 01 00  // ................
    B420: 20 84 C4 06 01 00 9F 0A 01 00 01 00 0E 00 02 00  //  ...............
    B430: 00 00 74 40 03 07 77 77 F0 0F 00 00 00 00 00 00  // ..t@..ww........
    B440: 00 00 00 00 00 00 00 00 0E 80 08 08 01 00 20 84  // .............. .
    B450: C4 06 01 00 81 0A 01 00 01 00 0E 00 02 00 00 00  // ................
    B460: E4 57 03 07 77 77 F0 0F 00 00 00 00 00 00 00 0C  // .W..ww..........
    B470: 00 00 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06  // ............ ...
    B480: 01 00 9F 0A 01 00 01 00 0E 00 02 00 00 00 30 75  // ..............0u
    B490: 03 07 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00  // ................
    B4A0: 00 00 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00  // .......... .....
    B4B0: 9F 0A 01 00 01 00 0E 00 02 00 00 00 FF FF 03 07  // ................
    B4C0: 11 11 A0 0A 00 00 00 00 00 00 00 1C 00 00 00 00  // ................
    B4D0: 00 00 0E 80 08 08 01 00 20 84 C4 06 01 00 9F 0A  // ........ .......
    B4E0: 01 00 01 00 0E 00 02 00 00 00 00 00 00 07 80 01  // ................
    B4F0: C0 48 69 00 01 04 10 40 00 00 00 00 00 02 08 20  // .Hi....@....... 
    B500: 80 00 00 00 50 05 04 10 40 00 01 00 00 A0 0A 08  // ....P...@.......
    B510: 20 80 00 02 00 00 F0 0F 10 40 00 01 04 11 11 00  //  ........@......
    B520: 00 20 80 00 02 08 11 11 50 05 40 00 01 04 10 11  // . ......P.@.....
    B530: 11 A0 0A 80 00 02 08 20 22 22 00 00 00 01 00 00  // ....... ""......
    B540: 00 22 22 50 15 00 00 04 10 40 22 22 50 05 00 02  // .""P.....@""P...
    B550: 08 20 80 33 33 00 00 00 00 C1 48 0F 00 FF FF FF  // . .33.....H.....
    B560: FF FF 00 00 00 00 00 00 C2 48 45 00 B9 F4 F2 C9  // .........HE.....
    B570: FF 00 00 00 00 06 08 00 00 00 00 00 00 14 40 01  // ..............@.
    B580: 05 02 00 00 00 00 04 00 00 00 04 00 00 00 00 16  // ................
    B590: 00 00 00 10 00 00 00 00 08 00 02 08 00 00 00 00  // ................
    B5A0: 00 01 00 00 00 20 00 00 00 00 03 00 00 C3 48 0F  // ..... ........H.
    B5B0: 00 FF FF FF FF FF 80 00 00 00 00 00 CB 48 0F 00  // .............H..
    B5C0: FF FF FF FF FF 00 00 00 00 00 00 CD 48 0F 00 FF  // ............H...
    B5D0: FF FF FF FF 04 80 00 00 00 00 C4 48 0F 00 FF FF  // ...........H....
    B5E0: FF FF FF 00 08 08 00 00 00 CE 48 0F 00 FF FF FF  // ..........H.....
    B5F0: FF FF 01 00 20 80 00 00 CF 48 0F 00 FF FF FF FF  // .... ....H......
    B600: FF C4 06 01 00 00 00 D0 48 18 00 FF FF 0F C0 FF  // ........H.......
    B610: 81 0A 01 00 00 00 F0 3F 00 9F 0A 01 00 00 00 D1  // .......?........
    B620: 48 3C 00 01 00 00 00 00 01 00 02 00 00 04 00 00  // H<..............
    B630: 00 01 00 0A 00 02 00 10 01 00 01 00 0C 00 FC F9  // ................
    B640: A7 FE FF 01 00 0E 00 00 00 40 00 00 01 00 00 00  // .........@......
    B650: 00 02 08 00 00 01 80 0F 00 00 00 D4 48 0F 00 FF  // ............H...
    B660: FF FF FF FF 02 00 00 00 00 00 00 00 00 00 00 07  // ................
    B670: 41 01 C0 48 69 00 01 04 10 40 00 00 00 00 00 02  // A..Hi....@......
    B680: 08 20 80 00 00 00 50 05 04 10 40 00 01 00 00 A0  // . ....P...@.....
    B690: 0A 08 20 80 00 02 00 00 F0 0F 10 40 00 01 04 11  // .. ........@....
    B6A0: 11 00 00 20 80 00 02 08 11 11 50 05 40 00 01 04  // ... ......P.@...
    B6B0: 10 11 11 A0 0A 80 00 02 08 20 22 22 00 00 00 01  // ......... ""....
    B6C0: 00 00 00 22 22 50 15 00 00 04 10 40 22 22 50 05  // ...""P.....@""P.
    B6D0: 00 02 08 20 80 33 33 00 00 00 00 C1 48 0F 00 FF  // ... .33.....H...
    B6E0: FF FF FF FF 00 00 00 00 00 00 C2 48 2A 00 B9 F6  // ...........H*...
    B6F0: FA C9 FF 00 00 00 00 06 08 00 00 00 00 00 00 14  // ................
    B700: 40 01 05 22 00 00 00 00 04 00 00 00 14 00 00 00  // @.."............
    B710: 00 08 00 00 C3 48 0F 00 FF FF FF FF FF 80 00 00  // .....H..........
    B720: 00 00 00 CB 48 0F 00 FF FF FF FF FF 00 00 00 00  // ....H...........
    B730: 00 00 CD 48 0F 00 FF FF FF FF FF 04 80 00 00 00  // ...H............
    B740: 00 C4 48 0F 00 FF FF FF FF FF 00 08 08 00 00 00  // ..H.............
    B750: CE 48 0F 00 FF FF FF FF FF 01 00 20 80 00 00 CF  // .H......... ....
    B760: 48 0F 00 FF FF FF FF FF C4 06 01 00 00 00 D0 48  // H..............H
    B770: 0F 00 FF FF FF FF FF 81 0A 01 00 00 00 D1 48 21  // ..............H!
    B780: 00 01 04 00 00 00 01 00 0A 00 02 00 10 01 00 01  // ................
    B790: 00 0C 00 FC FB EF FE FF 01 00 0E 00 00 00 D4 48  // ...............H
    B7A0: 0F 00 FF FF FF FF FF 02 00 00 00 00 00 00 00 00  // ................
    B7B0: 00 00 07 4A 01 C0 48 69 00 01 04 10 40 00 00 00  // ...J..Hi....@...
    B7C0: 00 00 02 08 20 80 00 00 00 50 05 04 10 40 00 01  // .... ....P...@..
    B7D0: 00 00 A0 0A 08 20 80 00 02 00 00 F0 0F 10 40 00  // ..... ........@.
    B7E0: 01 04 11 11 00 00 20 80 00 02 08 11 11 50 05 40  // ...... ......P.@
    B7F0: 00 01 04 10 11 11 A0 0A 80 00 02 08 20 22 22 00  // ............ "".
    B800: 00 00 01 00 00 00 22 22 50 15 00 00 04 10 40 22  // ......""P.....@"
    B810: 22 50 05 00 02 08 20 80 33 33 00 00 00 00 C1 48  // "P.... .33.....H
    B820: 0F 00 FF FF FF FF FF 00 00 00 00 00 00 C2 48 2A  // ..............H*
    B830: 00 B9 F6 FA C9 FF 00 00 00 00 06 08 00 00 00 00  // ................
    B840: 00 00 14 40 01 05 22 00 00 00 00 04 00 00 00 14  // ...@..".........
    B850: 00 00 00 00 08 00 00 C3 48 0F 00 FF FF FF FF FF  // ........H.......
    B860: 80 00 00 00 00 00 CB 48 0F 00 FF FF FF FF FF 00  // .......H........
    B870: 00 00 00 00 00 CD 48 0F 00 FF FF FF FF FF 04 80  // ......H.........
    B880: 00 00 00 00 C4 48 0F 00 FF FF FF FF FF 00 08 08  // .....H..........
    B890: 00 00 00 CE 48 0F 00 FF FF FF FF FF 01 00 20 80  // ....H......... .
    B8A0: 00 00 CF 48 0F 00 FF FF FF FF FF C4 06 01 20 00  // ...H.......... .
    B8B0: 00 D0 48 0F 00 FF FF FF FF FF 81 0A 01 00 00 00  // ..H.............
    B8C0: D1 48 2A 00 01 04 00 00 00 01 00 0A 00 00 00 F0  // .H*.............
    B8D0: 3F 00 01 00 00 00 FC FB 0F C0 FF 01 00 0E 00 02  // ?...............
    B8E0: 00 00 00 00 01 00 0C 00 00 00 D4 48 0F 00 FF FF  // ...........H....
    B8F0: FF FF FF 02 00 00 00 00 00 00 00 00 00 00 07 41  // ...............A
    B900: 01 C0 48 69 00 01 04 10 40 00 00 00 00 00 02 08  // ..Hi....@.......
    B910: 20 80 00 00 00 50 05 04 10 40 00 01 00 00 A0 0A  //  ....P...@......
    B920: 08 20 80 00 02 00 00 F0 0F 10 40 00 01 04 11 11  // . ........@.....
    B930: 00 00 20 80 00 02 08 11 11 50 05 40 00 01 04 10  // .. ......P.@....
    B940: 11 11 A0 0A 80 00 02 08 20 22 22 00 00 00 01 00  // ........ "".....
    B950: 00 00 22 22 50 15 00 00 04 10 40 22 22 50 05 00  // ..""P.....@""P..
    B960: 02 08 20 80 33 33 00 00 00 00 C1 48 0F 00 FF FF  // .. .33.....H....
    B970: FF FF FF 00 00 00 00 00 00 C2 48 2A 00 B9 F6 FA  // ..........H*....
    B980: C9 FF 00 00 00 00 06 08 00 00 00 00 00 00 14 40  // ...............@
    B990: 01 05 22 00 00 00 00 04 00 00 00 14 00 00 00 00  // ..".............
    B9A0: 08 00 00 C3 48 0F 00 FF FF FF FF FF 80 00 00 00  // ....H...........
    B9B0: 00 00 CB 48 0F 00 FF FF FF FF FF 00 00 00 00 00  // ...H............
    B9C0: 00 CD 48 0F 00 FF FF FF FF FF 04 80 00 00 00 00  // ..H.............
    B9D0: C4 48 0F 00 FF FF FF FF FF 00 08 08 00 00 00 CE  // .H..............
    B9E0: 48 0F 00 FF FF FF FF FF 01 00 20 80 00 00 CF 48  // H......... ....H
    B9F0: 0F 00 FF FF FF FF FF C4 06 01 40 00 00 D0 48 0F  // ..........@...H.
    BA00: 00 FF FF FF FF FF 81 0A 01 00 00 00 D1 48 21 00  // .............H!.
    BA10: 01 04 00 00 00 01 00 0A 00 02 00 10 01 00 01 00  // ................
    BA20: 0C 00 FC FB EF FE FF 01 00 0E 00 00 00 D4 48 0F  // ..............H.
    BA30: 00 FF FF FF FF FF 02 00 00 00 00 00 00 00 00 00  // ................
    BA40: 00 07 41 01 C0 48 69 00 01 04 10 40 00 00 00 00  // ..A..Hi....@....
    BA50: 00 02 08 20 80 00 00 00 50 05 04 10 40 00 01 00  // ... ....P...@...
    BA60: 00 A0 0A 08 20 80 00 02 00 00 F0 0F 10 40 00 01  // .... ........@..
    BA70: 04 11 11 00 00 20 80 00 02 08 11 11 50 05 40 00  // ..... ......P.@.
    BA80: 01 04 10 11 11 A0 0A 80 00 02 08 20 22 22 00 00  // ........... ""..
    BA90: 00 01 00 00 00 22 22 50 15 00 00 04 10 40 22 22  // .....""P.....@""
    BAA0: 50 05 00 02 08 20 80 33 33 00 00 00 00 C1 48 0F  // P.... .33.....H.
    BAB0: 00 FF FF FF FF FF 00 00 00 00 00 00 C2 48 2A 00  // .............H*.
    BAC0: B9 F6 FA C9 FF 00 00 00 00 06 08 00 00 00 00 00  // ................
    BAD0: 00 14 40 01 05 22 00 00 00 00 04 00 00 00 14 00  // ..@.."..........
    BAE0: 00 00 00 08 00 00 C3 48 0F 00 FF FF FF FF FF 80  // .......H........
    BAF0: 00 00 00 00 00 CB 48 0F 00 FF FF FF FF FF 00 00  // ......H.........
    BB00: 00 00 00 00 CD 48 0F 00 FF FF FF FF FF 04 80 00  // .....H..........
    BB10: 00 00 00 C4 48 0F 00 FF FF FF FF FF 00 08 08 00  // ....H...........
    BB20: 00 00 CE 48 0F 00 FF FF FF FF FF 01 00 20 80 00  // ...H......... ..
    BB30: 00 CF 48 0F 00 FF FF FF FF FF C4 06 01 80 00 00  // ..H.............
    BB40: D0 48 0F 00 FF FF FF FF FF 81 0A 01 00 00 00 D1  // .H..............
    BB50: 48 21 00 01 04 00 00 00 01 00 0A 00 02 00 10 01  // H!..............
    BB60: 00 01 00 0C 00 FC FB EF FE FF 01 00 0E 00 00 00  // ................
    BB70: D4 48 0F 00 FF FF FF FF FF 02 00 00 00 00 00 00  // .H..............
    BB80: 00 00 00 00 07 26 01 C0 48 69 00 01 04 10 40 00  // .....&..Hi....@.
    BB90: 00 00 00 00 02 08 20 80 00 00 00 50 05 04 10 40  // ...... ....P...@
    BBA0: 00 01 00 00 A0 0A 08 20 80 00 02 00 00 F0 0F 10  // ....... ........
    BBB0: 40 00 01 04 11 11 00 00 20 80 00 02 08 11 11 50  // @....... ......P
    BBC0: 05 40 00 01 04 10 11 11 A0 0A 80 00 02 08 20 22  // .@............ "
    BBD0: 22 00 00 00 01 00 00 00 22 22 50 15 00 00 04 10  // ".......""P.....
    BBE0: 40 22 22 50 05 00 02 08 20 80 33 33 00 00 00 00  // @""P.... .33....
    BBF0: C1 48 0F 00 FF FF FF FF FF 00 00 00 00 00 00 C2  // .H..............
    BC00: 48 0F 00 FF FF FF FF FF 00 00 00 00 00 00 C3 48  // H..............H
    BC10: 0F 00 FF FF FF FF FF 80 00 00 00 00 00 CB 48 0F  // ..............H.
    BC20: 00 FF FF FF FF FF 00 00 00 00 00 00 CD 48 0F 00  // .............H..
    BC30: FF FF FF FF FF 04 80 00 00 00 00 C4 48 0F 00 FF  // ............H...
    BC40: FF FF FF FF 00 08 08 00 00 00 CE 48 0F 00 FF FF  // ...........H....
    BC50: FF FF FF 01 00 20 80 00 00 CF 48 0F 00 FF FF FF  // ..... ....H.....
    BC60: FF FF C4 06 01 20 00 00 D0 48 0F 00 FF FF FF FF  // ..... ...H......
    BC70: FF 81 0A 01 00 00 00 D1 48 21 00 FF FF 0F 00 00  // ........H!......
    BC80: 01 00 0A 00 00 00 F0 3F 00 01 00 0C 00 00 00 00  // .......?........
    BC90: C0 FF 01 00 0E 00 00 00 D4 48 0F 00 FF FF FF FF  // .........H......
    BCA0: FF 02 00 00 00 00 00 00 00 00 00 00 07 2F 01 C0  // ............./..
    BCB0: 48 69 00 01 04 10 40 00 00 00 00 00 02 08 20 80  // Hi....@....... .
    BCC0: 00 00 00 50 05 04 10 40 00 01 00 00 A0 0A 08 20  // ...P...@....... 
    BCD0: 80 00 02 00 00 F0 0F 10 40 00 01 04 11 11 00 00  // ........@.......
    BCE0: 20 80 00 02 08 11 11 50 05 40 00 01 04 10 11 11  //  ......P.@......
    BCF0: A0 0A 80 00 02 08 20 22 22 00 00 00 01 00 00 00  // ...... "".......
    BD00: 22 22 50 15 00 00 04 10 40 22 22 50 05 00 02 08  // ""P.....@""P....
    BD10: 20 80 33 33 00 00 00 00 C1 48 0F 00 FF FF FF FF  //  .33.....H......
    BD20: FF 00 00 00 00 00 00 C2 48 18 00 0F 3E F8 E0 83  // ........H...>...
    BD30: 00 00 00 00 F0 C1 07 1F 7C 00 00 00 14 00 00 C3  // ........|.......
    BD40: 48 0F 00 FF FF FF FF FF 80 00 00 00 00 00 CB 48  // H..............H
    BD50: 0F 00 FF FF FF FF FF 00 00 00 00 00 00 CD 48 0F  // ..............H.
    BD60: 00 FF FF FF FF FF 04 80 00 00 00 00 C4 48 0F 00  // .............H..
    BD70: FF FF FF FF FF 00 08 08 00 00 00 CE 48 0F 00 FF  // ............H...
    BD80: FF FF FF FF 01 00 20 80 00 00 CF 48 0F 00 FF FF  // ...... ....H....
    BD90: FF FF FF C4 06 01 20 00 00 D0 48 0F 00 FF FF FF  // ...... ...H.....
    BDA0: FF FF 81 0A 01 00 00 00 D1 48 21 00 0F 00 00 00  // .........H!.....
    BDB0: 00 01 00 0A 00 80 FF 0F FF FF 01 00 0E 00 70 00  // ..............p.
    BDC0: F0 00 00 01 00 0C 00 00 00 D4 48 0F 00 FF FF FF  // ..........H.....
    BDD0: FF FF 02 00 00 00 00 00 00 00 00 00 C5 48 00 1F  // .............H..
    BDE0: C6 48 00 1F C7 48 10 1F 0E 00 48 3F 00 07 00 80  // .H...H....H?....
    BDF0: 28 00 5D 00 12 00 10 00 78 69 00 07 00 00 1B 00  // (.].....xi......
    BE00: 5D 00 1A 00 00 00 90 7E 00 07 68 66 20 00 5D 00  // ]......~..hf .].
    BE10: 0A 00 00 00 F0 D2 00 07 00 00 36 00 5D 00 1A 00  // ..........6.]...
    BE20: 00 00 35 0C 02 07 00 00 50 00 1D 00 85 10 00 C0  // ..5.....P.......
    BE30: 6A 18 02 07 00 00 28 00 1D 00 32 10 00 A0 D4 30  // j.....(...2....0
    BE40: 02 07 00 00 14 00 1D 00 0A 10 00 80 FF FF 02 07  // ................
    BE50: 00 00 14 00 1D 00 2A 10 00 01 A0 0F 03 07 00 00  // ......*.........
    BE60: 50 00 1D 00 85 10 00 C0 4C 1D 03 07 00 00 14 00  // P.......L.......
    BE70: 1D 00 0A 10 00 80 74 40 03 07 00 00 14 00 1D 00  // ......t@........
    BE80: 0A 10 00 01 E4 57 03 07 00 00 14 00 5D 00 00 10  // .....W......]...
    BE90: 00 01 30 75 03 07 00 00 1E 00 5D 00 11 10 00 02  // ..0u......].....
    BEA0: FF FF 03 07 00 00 3C 00 5D 00 22 00 00 02 00 00  // ......<.].".....
    BEB0: 12 00 01 02 00 08 52 47 52 02 52 05 0D 65 D0 05  // ......RGR.R..e..
    BEC0: 02 5B 57 00 01 02 00 00 37 00 00 52 14 02 08 00  // .[W.....7..R....
    BED0: 0D 1A 32 08 00 0B 1A 02 88 00 0E 1A 32 88 00 0C  // ..2.........2...
    BEE0: 1A 03 00 46 04 1A 09 05 46 FF FF FF 02 56 00 40  // ...F....F....V.@
    BEF0: 03 20 40 01 1A 09 25 40 03 75 02 46 40 03 18 40  // . @...%@.u.F@..@
    BF00: 5C 1B 2D 02 46 40 27 00 46 06 1A 2D 08 40 5C 1B  // \.-.F@'.F..-.@\.
    BF10: 02 0A 01 41 02 8A 01 40 5B 00 36 00 01 01 00 00  // ...A...@[.6.....
    BF20: 37 00 00 01 05 00 0B 21 00 20 0F 5C 05 D3 0B 00  // 7......!. .\....
    BF30: 00 E0 FF E0 1B 32 00 01 05 02 14 A1 03 03 00 01  // .....2..........
    BF40: 05 03 14 A0 03 03 00 01 05 17 15 10 C1 10 40 5B  // ..............@[
    BF50: 32 00 01 01 00 00 37 00 00 54 20 24 15 56 00 41  // 2.....7..T $.V.A
    BF60: 03 88 41 09 08 01 02 01 0B 41 01 3A C9 00 41 15  // ..A......A.:..A.
    BF70: 05 41 08 01 02 C4 00 41 54 20 2B 08 0D 25 24 15  // .A.....AT +..%$.
    BF80: 03 5B FF 00 02 01 00 04 37 00 00 66 0C 03 0C 41  // .[......7..f...A
    BF90: 00 00 2D 0A 41 42 2D 0D 42 04 00 3D 24 00 03 00  // ..-.AB-.B..=$...
    BFA0: 44 30 00 2D 0D 42 04 00 3E 0A 42 41 44 FB 00 43  // D0.-.B..>.BAD..C
    BFB0: 19 00 56 00 43 03 A4 41 02 00 03 F2 41 41 03 0C  // ..V.C..A....AA..
    BFC0: 41 00 00 3E 0D 41 00 00 44 FB 00 3E 0D 41 61 48  // A..>.A..D..>.AaH
    BFD0: 49 6B 00 3E E5 41 10 46 5F 00 1B 3D 41 01 43 6B  // Ik.>.A.F_..=A.Ck
    BFE0: 00 09 E5 41 03 15 3D 41 02 2D E5 41 0C 03 3A 43  // ...A..=A.-.A..:C
    BFF0: 41 54 00 00 00 33 0D 41 01 00 01 0A 00 00 41 0D  // AT...3.A......A.
    C000: 02 01 00 44 2D 0D 41 02 00 01 0A 00 00 41 03 32  // ...D-.A......A.2
    C010: 43 41 4B E5 00 01 49 D7 00 07 02 01 00 45 2D 0D  // CAK...I......E-.
    C020: 41 01 00 01 0A 00 00 41 4A 02 01 00 44 44 B9 00  // A......AJ...DD..
    C030: 03 29 43 00 0E A2 00 44 43 C1 00 03 29 43 00 08  // .)C....DC...)C..
    C040: A2 00 45 33 0D 41 03 00 01 0A 00 00 41 03 3A 43  // ..E3.A......A.:C
    C050: 41 07 02 01 00 45 43 FA 00 0D 02 01 00 44 33 0D  // A....EC......D3.
    C060: 41 01 00 01 0A 00 00 41 3D A5 00 01 44 F5 00 07  // A......A=...D...
    C070: 02 01 00 45 43 FA 00 0D 02 01 00 44 5B 55 20 00  // ...EC......D[U .
    C080: 5B 00 41 00 01 01 00 04 02 01 01 00 02 E5 01 02  // [.A.............
    C090: 52 3C 37 00 00 01 05 82 01 EC 00 22 D8 4A A5 83  // R<7........".J..
    C0A0: 01 01 44 13 00 01 05 82 01 D0 00 22 D8 01 39 83  // ..D........"..9.
    C0B0: 01 01 01 05 82 01 EC 00 22 D8 4A A5 83 01 01 44  // ........".J....D
    C0C0: 30 00 5B 00 54 05 01 06 00 00 37 00 00 3D 25 02  // 0.[.T.....7..=%.
    C0D0: 08 49 49 02 3D 05 00 00 00 00 00 44 33 02 07 25  // .II.=......D3..%
    C0E0: 1E 17 FE 54 20 68 18 02 01 01 00 4A 25 51 18 10  // ...T h.....J%Q..
    C0F0: 44 40 00 4B E5 02 40 44 40 00 02 05 00 40 9C 00  // D@.K..@D@....@..
    C100: 00 43 47 00 02 05 00 60 EA 00 00 52 3C 03 01 46  // .CG....`...R<..F
    C110: 00 3C F9 24 01 00 44 AC 00 02 05 00 07 00 00 00  // .<.$..D.........
    C120: 52 13 4A A5 24 01 10 44 5E 00 07 25 15 01 FE 03  // R.J.$..D^..%....
    C130: 00 40 24 01 03 FA 40 46 3E 25 40 00 49 7F 00 03  // .@$...@F>%@.I...
    C140: 25 40 68 01 02 24 01 40 4A A5 24 01 10 44 84 00  // %@h..$.@J.$..D..
    C150: 02 02 00 46 4A 25 51 18 10 44 AC 00 4B E5 02 40  // ...FJ%Q..D..K..@
    C160: 44 AC 00 02 05 00 06 00 04 00 52 13 02 02 00 46  // D.........R....F
    C170: 55 38 00 20 05 00 50 C3 00 00 03 02 46 40 20 05  // U8. ..P.....F@ .
    C180: 00 05 00 00 00 66 1E 56 00 41 03 0C 41 10 01 21  // .....f.V.A..A..!
    C190: 02 40 41 27 05 40 14 00 00 00 33 02 46 40 01 02  // .@A'.@....3.F@..
    C1A0: 42 01 46 01 02 46 01 46 01 02 4A 01 46 01 02 4E  // B.F..F.F..J.F..N
    C1B0: 01 46 03 0C 41 10 01 3E 0D 41 00 00 44 1A 01 01  // .F..A..>.A..D...
    C1C0: A5 15 01 01 01 05 13 01 00 0E 27 07 01 02 14 01  // ..........'.....
    C1D0: 46 0D 25 15 01 01 4A 65 15 01 02 44 12 01 55 38  // F.%...Je...D..U8
    C1E0: 03 56 00 46 01 05 82 01 88 01 22 D8 03 00 41 83  // .V.F......"...A.
    C1F0: 01 09 05 41 07 00 03 00 4C 25 41 07 44 8B 01 0E  // ...A....L%A.D...
    C200: E5 03 01 03 0D 46 40 9C 3E 25 41 04 44 5C 01 03  // .....F@.>%A.D\..
    C210: 0D 46 30 75 3E 25 41 03 44 5C 01 03 0D 46 10 27  // .F0u>%A.D\...F.'
    C220: 3E A5 41 00 44 8B 01 3E A5 41 02 49 71 01 1B 0D  // >.A.D..>.A.Iq...
    C230: 46 01 43 8B 01 3E A5 41 01 49 7C 01 15 0D 46 01  // F.C..>.A.I|...F.
    C240: 03 05 41 03 00 00 00 27 02 46 41 03 02 46 40 4A  // ..A....'.FA..F@J
    C250: 25 51 18 10 44 D7 01 4B E5 02 40 44 D7 01 3D 05  // %Q..D..K..@D..=.
    C260: 01 40 9C 00 00 46 D7 01 0E E5 03 02 66 FF 2D 0D  // .@...F......f.-.
    C270: 42 30 05 3D 04 01 00 00 47 BF 01 2D 0D 42 06 00  // B0.=....G..-.B..
    C280: 43 AF 01 02 04 01 00 00 02 0C 03 04 00 3D 02 01  // C............=..
    C290: 46 49 D7 01 0E E5 03 04 43 E7 01 4B E5 03 01 44  // FI......C..K...D
    C2A0: E7 01 02 05 00 05 00 00 00 52 13 02 01 00 01 52  // .........R.....R
    C2B0: 3C 02 01 02 00 55 38 02 3C 39 24 01 00 44 11 02  // <....U8.<9$..D..
    C2C0: 4A A5 24 01 08 44 FC 01 01 39 24 01 00 4A A5 24  // J.$..D...9$..J.$
    C2D0: 01 08 44 09 02 4B E5 03 02 44 2E 02 02 01 02 01  // ..D..K...D......
    C2E0: 4B E5 03 04 49 2E 02 02 89 00 03 02 0D 00 04 00  // K...I...........
    C2F0: 52 13 02 01 00 02 5B 3A 00 00 0D 25 1E 17 01 0D  // R.....[:...%....
    C300: 25 68 18 01 4A 65 68 18 01 44 40 02 5B 4B 05 00  // %h..Jeh..D@.[K..
    C310: FF FF FF 00 44 6E 02 3D 65 02 24 49 5E 02 02 A5  // ....Dn.=e.$I^...
    C320: 02 00 3D 25 02 02 46 B8 03 52 24 4B E5 02 01 44  // ..=%..F..R$K...D
    C330: B8 03 3D E5 00 02 46 86 02 03 01 46 00 02 39 00  // ..=...F....F..9.
    C340: 00 55 28 00 52 23 02 02 00 46 3D 25 02 02 44 97  // .U(.R#...F=%..D.
    C350: 02 3A 2A 00 3D 25 02 00 49 FD 04 54 00 06 17 07  // .:*.=%..I..T....
    C360: 65 04 17 EF 54 00 05 17 54 00 03 17 07 25 07 17  // e...T...T....%..
    C370: F7 0D 25 07 17 01 51 32 07 25 07 17 7F 51 32 0D  // ..%...Q2.%...Q2.
    C380: 25 07 17 02 51 C8 4B 05 00 FF FF FF 00 44 FD 04  // %...Q.K......D..
    C390: 66 FF 2D 0D 42 04 05 3D 0C 01 00 00 47 E3 02 2D  // f.-.B..=....G..-
    C3A0: 0D 42 06 00 43 D3 02 3D A5 02 03 49 0E 03 03 01  // .B..C..=...I....
    C3B0: 46 00 56 38 46 3E 05 46 E4 57 00 00 47 0E 03 3D  // F.V8F>.F.W..G..=
    C3C0: 0D 01 1D 00 46 0E 03 01 05 08 17 44 B9 DE 19 43  // ....F......D...C
    C3D0: 14 03 01 04 08 17 02 00 01 65 00 17 40 4B E5 02  // .........e..@K..
    C3E0: 10 44 29 03 5C A5 07 17 F8 00 43 2F 03 5C A5 07  // .D).\.....C/.\..
    C3F0: 17 F8 01 0D 25 0C 17 01 4B E5 02 02 44 46 03 01  // ....%...K...DF..
    C400: 05 02 17 7E 7E 7E 00 43 64 03 01 39 00 17 01 01  // ...~~~.Cd..9....
    C410: 89 01 17 01 07 25 01 17 F0 01 B1 02 17 01 01 39  // .....%.........9
    C420: 02 17 03 01 71 02 17 01 51 64 54 20 0C 17 07 25  // ....q...QdT ...%
    C430: 07 17 FD 51 32 0D 25 07 17 80 50 02 07 25 07 17  // ...Q2.%...P..%..
    C440: FE 51 0A 4A A5 07 17 10 44 7D 03 4A A5 07 17 20  // .Q.J....D}.J... 
    C450: 44 87 03 4B E5 02 02 49 AE 03 01 31 01 17 03 3D  // D..K...I...1...=
    C460: 0D 03 00 00 44 AE 03 01 09 05 17 03 5C A5 05 17  // ....D.......\...
    C470: FC 01 0D 25 07 17 08 01 25 06 17 1F 3A 00 00 3D  // ...%....%...:..=
    C480: E5 00 02 46 FD 04 03 01 46 00 56 38 46 56 00 41  // ...F....F.V8FV.A
    C490: 03 39 41 02 09 25 41 0C 1B 25 41 01 66 FF 2D 0D  // .9A..%A..%A.f.-.
    C4A0: 42 28 05 2D 0A 42 41 03 24 41 01 00 21 02 46 41  // B(.-.BA.$A..!.FA
    C4B0: 03 24 41 00 00 27 02 40 41 03 05 41 00 E1 F5 05  // .$A..'.@A..A....
    C4C0: 27 02 41 40 3E 05 40 00 00 01 00 45 0F 04 03 0D  // '.A@>.@....E....
    C4D0: 40 FF FF 02 39 00 00 52 14 01 0A 30 1B 40 3A 00  // @...9..R...0.@:.
    C4E0: 00 55 00 03 02 39 03 00 14 0D 03 02 3D A5 02 00  // .U...9......=...
    C4F0: 49 84 04 03 09 48 03 21 05 46 50 C3 00 00 03 02  // I....H.!.FP.....
    C500: 46 40 3C 02 41 01 40 49 4E 04 4A 25 40 01 10 49  // F@<.A.@IN.J%@..I
    C510: FD 04 3A 00 00 55 28 00 52 23 03 09 48 03 07 25  // ..:..U(.R#..H..%
    C520: 40 01 EF 01 02 41 01 46 66 1E 03 0C 41 10 01 3E  // @....A.Ff...A..>
    C530: 0D 41 00 00 49 7C 04 5C 25 40 01 DF 10 43 FD 04  // .A..I|.\%@...C..
    C540: 0D 25 40 01 30 43 FD 04 03 09 48 03 03 39 46 02  // .%@.0C....H..9F.
    C550: 09 25 46 0C 15 25 46 02 0F 25 46 01 02 A1 02 02  // .%F..%F..%F.....
    C560: 2C A5 02 01 3D 25 02 02 49 AA 04 55 30 02 4B E5  // ,...=%..I..U0.K.
    C570: 02 01 49 CA 04 3C 31 40 01 02 49 C5 04 03 21 48  // ..I..<1@..I...!H
    C580: 02 3C 22 38 01 46 44 FD 04 55 28 00 52 23 03 21  // .<"8.FD..U(.R#.!
    C590: 48 02 07 25 38 01 FE 03 09 48 03 01 31 40 01 02  // H..%8....H..1@..
    C5A0: 03 21 48 02 01 22 38 01 46 4B E5 02 02 44 FD 04  // .!H.."8.FK...D..
    C5B0: 3A 00 00 03 21 43 00 0D 22 C1 00 44 0D 62 C1 00  // :...!C.."..D.b..
    C5C0: 44 3A 00 00 5B 7A 50 00 1D 00 44 B5 DE 9D 22 00  // D:..[zP...D...".
    C5D0: 44 B6 DE 9D 2D 00 44 B7 DE 9D 3B 00 44 65 DE 9D  // D...-.D...;.De..
    C5E0: 45 00 44 66 DE 9D FF FF 44 67 DE 9D 01 01 05 04  // E.Df....Dg......
    C5F0: 03 02 02 01 88 13 00 00 01 02 10 27 00 00 01 00  // ...........'....
    C600: 98 3A 00 00 03 02 20 4E 00 00 04 02 30 75 00 00  // .:.... N....0u..
    C610: 03 00 40 9C 00 00 04 00 4D 02 02 01 00 00 37 00  // ..@.....M.....7.
    C620: 00 3D 65 00 07 44 0F 01 03 0D 48 1B 00 3D 25 00  // .=e..D....H..=%.
    C630: 10 44 27 00 56 00 40 20 25 00 03 03 0A 48 40 3D  // .D'.V.@ %....H@=
    C640: 65 00 01 44 02 01 54 20 C1 02 3C E5 C2 02 30 49  // e..D..T ..<...0I
    C650: 32 00 56 08 48 3D 25 00 10 44 BF 00 03 21 48 00  // 2.V.H=%..D...!H.
    C660: 01 0D FA 02 02 00 52 14 01 05 8D 1A 00 00 20 00  // ......R....... .
    C670: 01 25 BE 1B 02 01 A5 CC 1A C0 01 0D 91 1A 45 01  // .%............E.
    C680: 5C 05 DA 1A F0 FF FF FF 02 00 00 00 07 25 03 1B  // \............%..
    C690: FB 0D 25 7D 1A 01 0D 25 34 1B 01 5C 05 36 1B EE  // ..%}...%4..\.6..
    C6A0: FE 00 00 11 01 FF 7F 01 25 3A 1B 11 01 0D 33 1B  // ........%:....3.
    C6B0: FF 7F 01 05 B3 1B 07 40 00 00 0D A5 B6 1B 01 01  // .......@........
    C6C0: 05 31 1B 00 08 00 04 01 0D 86 1B 04 00 01 0D E7  // .1..............
    C6D0: 1B 01 00 3A 00 00 5B 01 05 34 47 01 30 00 00 01  // ...:..[..4G.0...
    C6E0: 05 31 47 00 08 00 04 01 05 33 47 FF 7F 00 00 01  // .1G......3G.....
    C6F0: 05 38 47 11 00 00 00 01 05 41 47 01 30 00 00 01  // .8G......AG.0...
    C700: 05 3E 47 00 08 00 04 01 05 40 47 FF 7F 00 00 01  // .>G......@G.....
    C710: 05 45 47 11 00 00 00 43 BB 00 54 08 C0 02 0D 25  // .EG....C..T....%
    C720: C1 02 01 3A 00 00 5B 5C 05 F6 02 FF 00 FF 9F 04  // ...:..[\........
    C730: FC 00 20 01 05 F9 02 61 51 02 00 01 05 0C 03 00  // .. ....aQ.......
    C740: 90 00 10 01 25 09 01 03 0D 65 10 17 01 5C 65 07  // ....%....e...\e.
    C750: 17 E7 08 01 05 3B 01 30 02 12 00 01 05 30 01 80  // .....;.0.....0..
    C760: BB 10 00 01 8D E5 17 30 00 01 25 E4 17 01 01 05  // .......0..%.....
    C770: 31 01 3C 00 01 08 5C 65 D4 00 FC 02 01 0D FC 00  // 1.<...\e........
    C780: 00 01 01 05 2F 48 00 00 00 00 01 05 04 48 00 00  // ..../H.......H..
    C790: 00 00 01 05 3A 48 0F 00 00 00 0D E5 CB 05 10 01  // ....:H..........
    C7A0: 05 F8 16 00 00 00 30 01 0D 34 46 40 01 01 25 32  // ......0..4F@..%2
    C7B0: 01 00 01 05 34 47 01 30 00 00 01 05 31 47 00 08  // ....4G.0....1G..
    C7C0: 00 04 01 05 33 47 FF 7F 00 00 01 05 38 47 11 00  // ....3G......8G..
    C7D0: 00 00 01 05 41 47 01 30 00 00 01 05 3E 47 00 08  // ....AG.0....>G..
    C7E0: 00 04 01 05 40 47 FF 7F 00 00 01 05 45 47 11 00  // ....@G......EG..
    C7F0: 00 00 54 20 D2 02 4A 25 D5 02 01 49 DE 01 01 05  // ..T ..J%...I....
    C800: D4 02 00 20 00 00 01 05 D3 02 FF 10 00 10 4A 25  // ... ..........J%
    C810: D5 02 01 49 F6 01 01 05 D4 02 28 05 1B 00 01 05  // ...I......(.....
    C820: D3 02 FF 10 00 20 0D 25 D2 02 01 02 8D 00 00 07  // ..... .%........
    C830: 52 18 55 00 00 52 4E 02 25 00 07 52 33 66 16 03  // R.U..RN.%..R3f..
    C840: 0C 41 04 00 4C 0D 41 02 00 44 BB 00 0D A5 C9 05  // .A..L.A..D......
    C850: 04 52 4B 66 1E 03 24 41 38 00 09 25 41 3C 5C 22  // .RKf..$A8..%A<\"
    C860: 51 18 C3 41 5B 00 17 00 01 01 00 00 37 00 00 01  // Q..A[.......7...
    C870: 05 82 01 00 00 20 D0 07 A5 83 01 FC 5B 00 48 00  // ..... ......[.H.
    C880: 01 02 00 04 37 00 00 42 21 00 63 05 1F 00 63 04  // ....7..B!.c...c.
    C890: 1F 00 63 07 1F 00 63 06 1F 00 5A 5A 5B 54 00 D8  // ..c...c...ZZ[T..
    C8A0: 01 56 00 41 03 31 41 00 03 B9 41 00 01 02 E8 01  // .V.A.1A...A.....
    C8B0: 41 56 00 41 03 09 41 00 01 02 C8 01 41 3C 25 D8  // AV.A..A.....A<%.
    C8C0: 01 00 44 3F 00 5B 8E 00 01 02 00 04 66 FF 56 08  // ..D?.[......f.V.
    C8D0: 47 2D 0D 42 5C 00 03 21 47 00 09 25 47 F0 42 22  // G-.B\..!G..%G.B"
    C8E0: 47 63 00 43 00 63 40 2E 00 63 80 36 00 63 60 3E  // Gc.C.c@..c.6.c`>
    C8F0: 00 5A 5A 5B 2D 0D 42 26 00 43 43 00 2D 0D 42 0C  // .ZZ[-.B&.CC.-.B.
    C900: 00 43 43 00 2D 0D 42 18 00 03 21 47 00 09 25 47  // .CC.-.B...!G..%G
    C910: 07 2D 0A 42 47 2D 0A 42 47 03 0C 48 00 00 5B 7A  // .-.BG-.BG..H..[z
    C920: 32 00 00 00 00 02 00 04 00 26 00 28 00 2A 00 00  // 2........&.(.*..
    C930: 02 00 2C 00 2D 00 2E 00 2F 00 00 00 00 01 00 02  // ..,.-.../.......
    C940: 00 03 00 04 00 05 00 0A 00 00 01 00 07 00 08 00  // ................
    C950: 0B 00 0C 00 78 00 01 01 00 00 37 00 00 52 14 0D  // ....x.....7..R..
    C960: A5 51 1B 01 54 20 54 1B 07 25 44 1B FE 54 20 45  // .Q..T T..%D..T E
    C970: 1B 42 29 00 63 00 31 00 63 01 39 00 63 02 4D 00  // .B).c.1.c.9.c.M.
    C980: 5A 5A 43 70 00 01 25 45 1B 02 43 3E 00 01 25 45  // ZZCp..%E..C>..%E
    C990: 1B 01 54 20 42 1B 54 00 43 1B 54 00 47 1B 43 70  // ..T B.T.C.T.G.Cp
    C9A0: 00 01 0D 43 1B 01 01 01 05 47 1B 01 00 01 00 0D  // ...C.....G......
    C9B0: 65 48 1B 01 0D 65 4B 1B 01 01 0D 53 1B 10 10 01  // eH...eK....S....
    C9C0: 25 42 1B 01 54 30 51 1B 3A 00 00 5B 74 00 01 01  // %B..T0Q.:..[t...
    C9D0: 00 00 37 00 00 4A A5 CB 05 01 44 15 00 02 65 00  // ..7..J....D...e.
    C9E0: 01 0E 25 00 80 52 14 03 00 46 CC 00 08 25 00 0F  // ..%..R...F...%..
    C9F0: 52 14 54 30 9D 1B 3C 69 9D 1B 00 44 65 00 01 69  // R.T0..<i...De..i
    CA00: 9D 1B 00 3D 65 00 00 44 65 00 4A A5 9C 1B 01 44  // ...=e..De.J....D
    CA10: 65 00 4C 25 46 01 44 69 00 4A 25 A3 1B 01 49 4D  // e.L%F.Di.J%...IM
    CA20: 00 4A 25 A3 1B 01 44 55 00 4A 25 A3 1B 01 49 5D  // .J%...DU.J%...I]
    CA30: 00 3A 00 00 5B 4A 25 9D 1B 01 44 69 00 43 65 00  // .:..[J%...Di.Ce.
    CA40: 3E 00 01 01 00 00 37 00 00 52 14 3D 65 00 01 44  // >.....7..R.=e..D
    CA50: 30 00 0D 65 9C 1B 03 07 25 9C 1B FE 4A A5 9C 1B  // 0..e....%...J...
    CA60: 01 49 1C 00 07 E5 00 1B 7F 54 20 A9 1B 43 3A 00  // .I.......T ..C:.
    CA70: 0D E5 00 1B 80 0D 25 9C 1B 01 3A 00 00 5B 20 01  // ......%...:..[ .
    CA80: 01 03 00 0C 37 00 00 56 00 40 03 09 40 01 21 05  // ....7..V.@..@.!.
    CA90: 40 40 42 0F 00 2D 01 40 03 27 05 40 0A 00 00 00  // @@B..-.@.'.@....
    CAA0: 21 05 40 30 00 00 00 56 00 41 03 39 41 01 27 02  // !.@0...V.A.9A.'.
    CAB0: 40 41 27 05 40 E8 03 00 00 03 02 46 40 3E 05 41  // @A'.@......F@>.A
    CAC0: F4 01 00 00 47 50 00 2D 05 46 01 00 00 00 3D 05  // ....GP.-.F....=.
    CAD0: 03 00 00 00 00 44 84 00 2C 0D 01 01 00 03 05 40  // .....D..,......@
    CAE0: 40 42 0F 00 33 01 40 03 27 05 40 A0 86 01 00 02  // @B..3.@.'.@.....
    CAF0: A2 03 40 15 05 41 0E 27 05 41 A8 61 00 00 02 0A  // ..@..A.'.A.a....
    CB00: 03 40 02 F1 03 01 3D A5 02 00 44 A5 00 2D 05 46  // .@....=...D..-.F
    CB10: E0 01 00 00 03 01 41 00 56 38 41 27 02 46 41 02  // ......A.V8A'.FA.
    CB20: E2 03 40 0E A5 03 10 4B E5 02 01 49 18 01 3D 25  // ..@....K...I..=%
    CB30: 02 02 44 C4 00 3A 2A 00 3D 25 02 00 44 C4 00 3A  // ..D..:*.=%..D..:
    CB40: 54 00 03 00 41 07 17 5E 05 41 FC FF F8 FF 08 00  // T...A..^.A......
    CB50: 01 00 4B E5 02 10 44 E0 00 5E A5 41 F8 00 3C 02  // ..K...D..^.A..<.
    CB60: 07 17 41 49 18 01 3C 39 00 17 01 49 18 01 3C 89  // ..AI..<9...I..<.
    CB70: 01 17 01 49 18 01 3C 31 01 17 03 49 18 01 3C 09  // ...I..<1...I..<.
    CB80: 05 17 03 49 18 01 3C B1 02 17 01 49 18 01 3C 39  // ...I..<....I..<9
    CB90: 02 17 03 44 1C 01 0E E5 02 01 3A 00 00 5B 2C 00  // ...D......:..[,.
    CBA0: 02 01 00 00 37 00 00 3C 21 FC 00 00 49 19 00 0D  // ....7..<!...I...
    CBB0: A5 C0 00 01 43 26 00 3C 61 FC 00 00 49 26 00 0D  // ....C&.<a...I&..
    CBC0: A5 C0 00 02 0D A5 C1 00 01 5B 19 00 01 01 00 08  // .........[......
    CBD0: 37 00 00 52 14 01 01 5E 1B 00 01 01 5F 1B 01 3A  // 7..R...^...._..:
    CBE0: 00 00 5B 00 DE 00 01 03 04 00 37 00 00 56 00 46  // ..[.......7..V.F
    CBF0: 56 00 00 03 21 00 00 55 20 00 3D 65 00 03 44 2C  // V...!..U .=e..D,
    CC00: 00 3D 65 00 0A 46 D3 00 02 29 00 00 32 25 00 08  // .=e..F...)..2%..
    CC10: 0E 25 00 60 52 14 5C 22 00 4A F8 00 02 22 00 00  // .%.`R.\".J..."..
    CC20: 3D A5 00 01 49 54 00 66 1E 03 04 46 40 01 3E 05  // =...IT.f...F@.>.
    CC30: 46 00 00 00 00 49 BF 00 52 14 03 08 41 C0 1A 09  // F....I..R...A...
    CC40: 0D 41 03 00 66 FF 2D 0D 42 DA 00 2D 0A 42 41 03  // .A..f.-.B..-.BA.
    CC50: 24 00 00 00 3D E2 00 00 48 BF 00 3E 25 00 04 44  // $...=...H..>%..D
    CC60: 8E 00 03 22 46 00 33 25 46 01 15 25 46 04 0F 25  // ..."F.3%F..%F..%
    CC70: 46 01 33 39 00 00 3E 25 00 01 44 AB 00 3E 25 00  // F.39..>%..D..>%.
    CC80: 02 44 A4 00 03 25 46 21 03 65 00 2F 43 AF 00 03  // .D...%F!.e./C...
    CC90: 65 00 13 03 79 46 00 33 65 46 01 15 2D 46 03 0F  // e...yF.3eF..-F..
    CCA0: 65 46 01 52 14 01 02 F2 1B 46 01 52 EE 1B 00 54  // eF.R.....F.R...T
    CCB0: 00 F9 1B 54 00 ED 1B 3A 00 00 5B 7A 04 00 03 02  // ...T...:..[z....
    CCC0: 01 04 AF 01 01 04 00 08 37 00 00 3D 65 02 01 49  // ........7..=e..I
    CCD0: 44 01 4B A5 02 03 49 5D 00 02 05 00 00 03 00 05  // D.K...I]........
    CCE0: 02 05 01 00 05 02 00 3C 21 FC 00 02 49 57 00 01  // .......<!...IW..
    CCF0: 8D C0 00 00 02 51 02 01 05 C6 00 00 00 10 00 01  // .....Q..........
    CD00: 05 C8 00 00 00 50 00 01 0D C3 00 02 00 54 20 CA  // .....P.......T .
    CD10: 00 01 05 C2 00 00 01 00 00 56 20 40 43 83 00 0E  // .........V @C...
    CD20: 25 02 80 52 14 54 00 CC 00 56 08 48 08 25 02 07  // %..R.T...V.H.%..
    CD30: 0D 25 CA 00 01 01 25 C2 00 01 54 00 C6 00 54 00  // .%....%...T...T.
    CD40: C8 00 56 20 40 3D A5 01 00 49 8F 00 0D 25 C2 00  // ..V @=...I...%..
    CD50: 10 07 65 D0 05 FE 3D A5 01 01 47 A0 00 0D 65 D0  // ..e...=...G...e.
    CD60: 05 01 03 A0 40 C9 00 03 00 46 C4 00 03 02 41 46  // ....@....F....AF
    CD70: 2D 00 46 C6 00 2D 00 41 C8 00 52 14 01 32 07 1A  // -.F..-.A..R..2..
    CD80: 40 01 32 08 1A 40 01 02 04 1A 46 01 02 05 1A 41  // @.2..@....F....A
    CD90: 54 30 C1 1A 54 00 5C 1B 01 01 5D 1B 00 54 08 09  // T0..T.\...]..T..
    CDA0: 1A 54 08 0A 1A 54 08 0B 1A 54 08 0C 1A 01 09 0E  // .T...T...T......
    CDB0: 1A 00 01 19 0D 1A 00 5C 19 01 1A FC F8 01 5C A5  // .......\......\.
    CDC0: 01 1A 0F 10 01 09 06 1A 01 01 25 00 1A 01 0D 25  // ..........%....%
    CDD0: B3 1B 04 5C 62 B3 1B FE 40 54 20 35 1A 54 20 3C  // ...\b...@T 5.T <
    CDE0: 1A 54 00 CA 1B 54 00 C8 1B 54 00 CC 1B 4B A5 02  // .T...T...T...K..
    CDF0: 03 49 40 01 0E 25 02 80 52 14 01 05 CC 00 01 00  // .I@..%..R.......
    CE00: 00 00 3A 00 00 5B 52 14 3D 65 02 00 49 61 01 54  // ..:..[R.=e..Ia.T
    CE10: 20 00 1A 3A 00 00 3C 21 FC 00 02 49 60 01 54 08  //  ..:..<!...I`.T.
    CE20: C1 00 5B 3D 65 02 10 44 6E 01 01 09 06 1A 01 5B  // ..[=e..Dn......[
    CE30: 03 00 40 04 1A 09 05 40 00 00 00 FD 2D 01 40 00  // ..@....@....-.@.
    CE40: 09 0D 40 00 F0 01 02 04 1A 40 08 0D 00 FF 0F 56  // ..@......@.....V
    CE50: 00 41 03 31 41 01 74 0A 00 41 2C 09 01 00 08 25  // .A.1A.t..A,....%
    CE60: 00 FC 14 05 00 10 01 01 5C 1B 00 01 09 0D 1A 01  // ........\.......
    CE70: 5B 00 49 00 01 01 00 00 37 00 00 52 14 07 65 B6  // [.I.....7..R..e.
    CE80: 1B FE 3D 65 00 01 44 37 00 54 30 6E 1A 54 30 11  // ..=e..D7.T0n.T0.
    CE90: 1A 54 20 B5 1B 54 20 BD 1B 54 30 BD 1B 4A 25 B6  // .T ..T ..T0..J%.
    CEA0: 1B 01 49 2B 00 3A 00 00 5B 0D 25 BD 1B 01 54 00  // ..I+.:..[.%...T.
    CEB0: 9E 1B 07 25 C0 1A F4 3A 00 00 5B 00 95 00 01 03  // ...%...:..[.....
    CEC0: 00 00 37 00 00 52 14 0D 25 03 1B 04 54 20 78 1A  // ..7..R..%...T x.
    CED0: 54 00 80 1A 3D 65 00 01 49 56 00 0D 25 7E 1A 07  // T...=e..IV..%~..
    CEE0: 01 25 7F 1A 01 51 01 4A 25 7F 1A 02 44 29 00 54  // .%...Q.J%...D).T
    CEF0: 20 7F 1A 54 08 81 1A 54 08 82 1A 54 08 83 1A 01  //  ..T...T...T....
    CF00: 0D 84 1A FF FF 01 0D 85 1A FF FF 01 0D 86 1A FF  // ................
    CF10: FF 5B 01 31 79 1A 00 56 00 41 03 19 41 01 3B 02  // .[.1y..V.A..A.;.
    CF20: 41 3D 65 00 02 49 78 00 03 00 40 7C 1A 04 02 00  // A=e..Ix...@|....
    CF30: 40 43 81 00 03 03 40 00 01 02 7C 1A 40 2D 05 46  // @C....@...|.@-.F
    CF40: 04 00 00 00 2D 8D 41 01 00 3E 89 41 01 45 65 00  // ....-.A..>.A.Ee.
    CF50: 5B 00 8D 00 01 01 00 04 01 05 82 01 EC 00 22 D8  // [.............".
    CF60: 03 00 40 83 01 09 05 40 00 00 F0 07 1B 05 40 14  // ..@....@......@.
    CF70: 66 FF 2D 0D 42 65 00 3E 0C 40 02 00 47 35 00 2D  // f.-.Be.>.@..G5.-
    CF80: 0D 42 08 00 43 25 00 33 0C 40 04 00 21 0C 40 06  // .B..C%.3.@..!.@.
    CF90: 00 2D 0C 40 00 00 56 18 40 03 02 46 40 66 1E 02  // .-.@..V.@..F@f..
    CFA0: 04 00 08 00 20 05 00 64 00 00 00 27 02 40 46 02  // .... ..d...'.@F.
    CFB0: 02 00 40 5B 7A 28 00 64 00 00 00 00 00 00 00 FF  // ..@[z(.d........
    CFC0: FF 07 00 01 00 00 00 C8 00 3F 00 08 00 19 00 40  // .........?.....@
    CFD0: 06 5F 00 40 00 32 00 80 0C 7F 00 60 00 64 00 00  // ._.@.2.....`.d..
    CFE0: 53 01 02 03 00 18 37 00 00 66 FF 2D 0D 42 47 01  // S.....7..f.-.BG.
    CFF0: 55 28 05 2D 09 42 05 2D 09 42 05 03 0C 48 00 00  // U(.-.B.-.B...H..
    D000: 03 09 41 03 2D 19 41 03 3E 0D 41 03 00 46 3F 00  // ..A.-.A.>.A..F?.
    D010: 5C 05 B3 1B FB 0F F0 FF 00 30 00 00 43 4B 00 5C  // \........0..CK.\
    D020: 05 B3 1B FF 0F F0 FF 04 40 00 00 03 09 41 00 2D  // ........@....A.-
    D030: 19 41 00 33 0D 41 01 00 01 0A 80 1B 41 54 08 82  // .A.3.A......AT..
    D040: 1B 01 99 82 1B 02 03 19 41 00 33 09 41 02 56 18  // ........A.3.A.V.
    D050: 41 03 B1 41 04 33 1A 41 41 01 8A 81 1B 41 03 19  // A..A.3.AA....A..
    D060: 41 00 33 09 41 02 2D 1A 41 41 2D 09 41 00 4B 25  // A.3.A.-.AA-.A.K%
    D070: 04 10 44 99 00 2D 09 41 00 01 0A 81 1B 41 03 21  // ..D..-.A.....A.!
    D080: 41 04 09 25 41 02 1B 25 41 01 01 22 83 1B 41 54  // A..%A..%A.."..AT
    D090: 00 5E 1B 01 31 5E 1B 04 01 B1 5E 1B 04 03 09 41  // .^..1^....^....A
    D0A0: 01 2D 19 41 01 33 0D 41 01 00 01 0A 87 1B 41 54  // .-.A.3.A......AT
    D0B0: 08 8E 1B 01 99 8E 1B 03 03 19 41 01 33 09 41 03  // ..........A.3.A.
    D0C0: 56 18 41 03 B9 41 04 33 1A 41 41 01 8A 8D 1B 41  // V.A..A.3.AA....A
    D0D0: 03 19 41 01 33 09 41 03 2D 1A 41 41 2D 09 41 01  // ..A.3.A.-.AA-.A.
    D0E0: 4B 25 04 20 44 0B 01 2D 09 41 01 01 0A 8D 1B 41  // K%. D..-.A.....A
    D0F0: 03 21 41 04 09 25 41 04 1B 25 41 02 01 22 8F 1B  // .!A..%A..%A.."..
    D100: 41 54 00 5F 1B 01 39 5F 1B 04 01 B9 5F 1B 04 03  // AT._..9_...._...
    D110: 21 41 04 09 25 41 80 1B 25 41 07 01 22 9E 1B 41  // !A..%A..%A.."..A
    D120: 3A 00 00 5B 7A 0C 00 00 00 00 02 00 04 00 26 00  // :..[z.........&.
    D130: 28 00 2A 00 DA 13 02 03 08 00 37 00 00 56 00 00  // (.*.......7..V..
    D140: 03 09 00 00 02 0D 00 23 21 4B A5 00 10 44 21 00  // .......#!K...D!.
    D150: 02 0D 00 23 22 52 49 3E 0D 42 00 00 44 C3 05 03  // ...#"RI>.B..D...
    D160: 0C 41 04 00 3E 25 41 00 44 C3 05 3E 25 41 15 44  // .A..>%A.D..>%A.D
    D170: C3 05 42 39 00 63 07 83 02 63 05 FC 00 63 06 FC  // ..B9.c...c...c..
    D180: 00 63 12 2C 02 63 01 5C 00 63 00 76 00 5A 5A 5B  // .c.,.c.\.c.v.ZZ[
    D190: 4B A5 00 10 44 72 0A 4A A5 CB 05 01 49 76 00 07  // K...Dr.J....Iv..
    D1A0: E5 1F 48 FE 0D E5 1B 48 03 5B 4B A5 00 10 44 72  // ..H....H.[K...Dr
    D1B0: 0A 03 0C 41 01 00 66 FF 2D 0D 42 BE 13 3E 0C 41  // ...A..f.-.B..>.A
    D1C0: 00 00 44 99 00 2D 0D 42 04 00 43 89 00 03 0C 48  // ..D..-.B..C....H
    D1D0: 02 00 4A 25 48 4A 01 44 72 0A 03 0D 41 01 00 66  // ..J%HJ.Dr...A..f
    D1E0: FF 2D 0D 42 BE 13 4A 62 47 4A 41 49 CD 00 15 25  // .-.B..JbGJAI...%
    D1F0: 41 01 2D 0D 42 04 00 3E 25 41 80 49 B2 00 43 E2  // A.-.B..>%A.I..C.
    D200: 00 03 0C 48 02 00 54 08 A4 4A 51 C8 0D 25 A5 4A  // ...H..T..JQ..%.J
    D210: 01 51 32 56 08 48 03 25 01 03 03 05 00 01 BC FF  // .Q2V.H.%........
    D220: 00 43 3E 01 4C A5 41 02 44 72 0A 50 01 43 E2 00  // .C>.L.A.Dr.P.C..
    D230: 56 20 01 03 05 00 00 F3 FE 01 3D E5 00 05 44 3E  // V ........=...D>
    D240: 01 03 8D 00 FE 00 43 3E 01 66 06 03 24 41 28 00  // ......C>.f..$A(.
    D250: 4C 25 41 01 44 72 0A 03 25 01 01 03 05 00 00 F4  // L%A.Dr..%.......
    D260: FB 04 3D E5 00 05 44 3E 01 03 8D 00 FB 00 43 3E  // ..=...D>......C>
    D270: 01 5B 56 28 01 03 99 01 00 3B 05 00 4C 00 00 04  // .[V(.....;..L...
    D280: 05 00 F0 05 80 61 57 00 01 04 0A 01 00 02 21 01  // .....aW.......!.
    D290: 00 02 E9 01 00 02 05 00 00 4C 00 00 55 10 01 52  // .........L..U..R
    D2A0: 4E 3D 65 01 00 44 84 01 51 C8 51 C8 2D 65 01 01  // N=e..D..Q.Q.-e..
    D2B0: 3E 65 01 0C 45 61 01 5B 56 28 01 3B 05 00 4C 00  // >e..Ea.[V(.;..L.
    D2C0: 00 04 05 00 F2 05 90 40 02 05 00 00 4C 04 4C 55  // .......@....L.LU
    D2D0: 10 01 52 4E 3D 65 01 00 44 B3 01 2D 65 01 01 3E  // ..RN=e..D..-e..>
    D2E0: 65 01 06 45 87 01 5B 56 00 41 3B 05 04 4C 00 00  // e..E..[V.A;..L..
    D2F0: 03 A3 41 00 3E A5 00 FF 44 06 02 09 B2 41 00 0F  // ..A.>...D....A..
    D300: BA 41 00 03 0A 41 00 3B 05 00 4C 00 00 04 05 00  // .A...A.;..L.....
    D310: F0 05 80 72 04 02 01 41 56 28 01 02 05 00 00 4C  // ...r...AV(.....L
    D320: 00 00 55 10 01 52 4E 3D 65 01 00 44 06 02 2D 65  // ..U..RN=e..D..-e
    D330: 01 01 3E 65 01 06 45 E7 01 5B 02 9A 00 01 02 21  // ..>e..E..[.....!
    D340: 00 01 02 79 00 01 42 22 01 63 00 15 01 63 01 3D  // ...y..B".c...c.=
    D350: 01 63 02 B8 02 63 03 F0 00 63 04 CD 02 5A 5A 5B  // .c...c...c...ZZ[
    D360: 07 25 C9 05 FC 56 30 00 3B 05 00 4C 00 00 04 05  // .%...V0.;..L....
    D370: 00 00 02 90 40 02 21 01 00 02 E9 01 00 02 05 00  // ....@.!.........
    D380: 00 4C 04 4C 55 10 01 52 4E 3D 65 01 00 44 6C 02  // .L.LU..RN=e..Dl.
    D390: 51 C8 51 C8 2D A5 00 01 3E A5 00 06 45 34 02 5B  // Q.Q.-...>...E4.[
    D3A0: 3B 05 04 4C 00 00 0A 25 00 3F 3F 25 00 00 44 82  // ;..L...%.??%..D.
    D3B0: 02 0D 25 C9 05 02 5B 56 00 41 03 21 41 00 09 25  // ..%...[V.A.!A..%
    D3C0: 41 0F 15 0D 41 01 66 FF 2D 0D 42 76 0A 2D 0A 42  // A...A.f.-.Bv.-.B
    D3D0: 41 03 0C 48 00 00 07 A5 00 5C FB 56 08 48 03 25  // A..H.....\.V.H.%
    D3E0: 01 02 03 05 00 00 02 FF 00 43 3E 01 3E A5 41 20  // .........C>.>.A 
    D3F0: 49 DE 02 03 25 01 04 03 05 00 00 03 FF 00 43 3E  // I...%.........C>
    D400: 01 3E A5 41 31 49 DE 02 66 FF 2D 0D 42 FA 12 43  // .>.A1I..f.-.B..C
    D410: F1 02 66 FF 2D 0D 42 FE 11 4B A5 00 10 44 F1 02  // ..f.-.B..K...D..
    D420: 2D 0D 42 40 00 03 05 41 80 4C 00 00 3B 02 41 04  // -.B@...A.L..;.A.
    D430: 04 00 00 00 2D 0D 42 04 00 2D 05 41 04 00 00 00  // ....-.B..-.A....
    D440: 3F 05 00 FF FF FF FF 49 F8 02 4B A5 00 10 44 5C  // ?......I..K...D\
    D450: 05 02 05 01 06 00 00 00 56 00 41 66 1A 03 0C 41  // ........V.Af...A
    D460: 00 00 2D 0A 41 42 2D 0D 42 04 00 3D 24 01 08 00  // ..-.AB-.B..=$...
    D470: 44 53 03 2D 0D 42 0C 00 3E 0A 42 41 49 37 03 03  // DS.-.B..>.BAI7..
    D480: 0D 41 00 00 43 2C 04 03 0C 41 04 00 3E 0D 41 00  // .A..C,...A..>.A.
    D490: 00 44 2C 04 02 0C 01 06 00 03 02 46 41 26 05 01  // .D,........FA&..
    D4A0: 64 00 00 00 03 02 01 40 21 02 46 01 02 02 01 40  // d......@!.F....@
    D4B0: 21 02 40 46 21 05 40 00 04 00 00 27 05 40 7D 01  // !.@F!.@....'.@}.
    D4C0: 00 00 03 02 46 40 20 05 01 00 00 08 00 27 05 40  // ....F@ ......'.@
    D4D0: 71 02 00 00 21 05 40 10 00 00 00 2D 02 46 40 03  // q...!.@....-.F@.
    D4E0: 02 41 46 66 06 55 00 01 02 0C 01 04 00 20 05 01  // .AFf.U....... ..
    D4F0: 30 02 00 00 3D 0D 01 97 06 47 F0 03 1B 05 40 01  // 0...=....G....@.
    D500: 3D 0D 01 2F 0D 47 F0 03 1B 05 40 01 3D 0D 01 5E  // =../.G....@.=..^
    D510: 1A 47 F0 03 1B 05 40 01 3D 0D 01 BC 34 47 F0 03  // .G....@.=...4G..
    D520: 1B 05 40 01 03 02 00 40 3B 05 E8 4C 00 00 27 02  // ..@....@;..L..'.
    D530: 41 00 04 A2 00 40 3B 05 EC 4C 00 00 15 05 01 09  // A....@;..L......
    D540: 27 02 00 01 0F 25 40 80 04 A2 00 40 3B 05 18 4D  // '....%@....@;..M
    D550: 00 00 04 A5 00 00 3B 05 20 4D 00 00 04 A5 00 02  // ......;. M......
    D560: 3B 05 F0 4C 00 00 66 06 03 E4 41 28 00 4C E5 41  // ;..L..f...A(.L.A
    D570: 01 49 44 04 04 A5 00 00 3B 05 1C 4D 00 00 66 06  // .ID.....;..M..f.
    D580: 03 E4 41 28 00 4C E5 41 01 49 5C 04 04 A5 00 3C  // ..A(.L.A.I\....<
    D590: 3B 05 A4 4C 00 00 66 06 03 E4 41 28 00 4C E5 41  // ;..L..f...A(.L.A
    D5A0: 02 44 7F 04 04 A5 00 46 4C E5 41 10 49 7F 04 04  // .D.....FL.A.I...
    D5B0: A5 00 4A 3B 05 20 4D 00 00 66 06 03 E4 41 28 00  // ..J;. M..f...A(.
    D5C0: 4C E5 41 20 49 97 04 10 A5 00 04 66 06 03 24 41  // L.A I......f..$A
    D5D0: 34 00 3B 05 C4 4C 00 00 04 A2 00 41 03 24 41 35  // 4.;..L.....A.$A5
    D5E0: 00 3B 05 C8 4C 00 00 04 A2 00 41 03 24 41 39 00  // .;..L.....A.$A9.
    D5F0: 3B 05 CC 4C 00 00 04 A2 00 41 03 24 41 37 00 3B  // ;..L.....A.$A7.;
    D600: 05 D0 4C 00 00 04 A2 00 41 03 24 41 36 00 3B 05  // ..L.....A.$A6.;.
    D610: D4 4C 00 00 04 A2 00 41 03 24 41 3A 00 3B 05 D8  // .L.....A.$A:.;..
    D620: 4C 00 00 04 A2 00 41 03 24 41 38 00 3B 05 DC 4C  // L.....A.$A8.;..L
    D630: 00 00 04 A2 00 41 3B 05 A8 4C 00 00 66 1E 03 E4  // .....A;..L..f...
    D640: 41 36 01 4C E5 41 02 44 2E 05 04 A5 00 67 04 A5  // A6.L.A.D.....g..
    D650: 01 89 04 A5 02 AB 04 A5 03 01 04 A5 04 23 04 A5  // .............#..
    D660: 05 45 3B 05 C0 4C 00 00 66 1E 03 E4 41 36 01 4C  // .E;..L..f...A6.L
    D670: E5 41 20 44 4B 05 03 E4 41 37 01 04 BA 00 41 3B  // .A DK...A7....A;
    D680: 05 08 4D 00 00 4C E5 41 10 44 5C 05 04 A5 00 80  // ..M..L.A.D\.....
    D690: 03 05 00 80 4C 00 00 02 21 01 00 02 E9 01 00 56  // ....L...!......V
    D6A0: 00 41 03 0A 41 00 3B 02 41 03 03 41 00 3E 05 41  // .A..A.;.A..A.>.A
    D6B0: FF FF FF FF 44 C2 05 3B 05 00 4C 00 00 04 05 01  // ....D..;..L.....
    D6C0: F0 05 80 72 04 02 02 41 02 05 00 04 4C 00 00 55  // ...r...A....L..U
    D6D0: 10 01 52 4E 3D 65 01 00 44 B7 05 51 C8 51 C8 2D  // ..RN=e..D..Q.Q.-
    D6E0: A5 00 01 3E A5 00 07 45 6B 05 5B 2D 0D 00 04 00  // ...>...Ek.[-....
    D6F0: 56 18 00 43 6B 05 5B 02 0D 00 22 21 52 49 3E 0D  // V..Ck.[..."!RI>.
    D700: 42 00 00 44 72 0A 42 39 00 63 07 F0 05 63 00 CE  // B..Dr.B9.c...c..
    D710: 06 63 01 DD 06 63 0F 0A 07 63 12 EC 06 63 14 FB  // .c...c...c...c..
    D720: 06 5A 5A 5B 56 00 41 03 21 41 00 09 25 41 0F 15  // .ZZ[V.A.!A..%A..
    D730: 0D 41 01 66 FF 2D 0D 42 76 0A 2D 0A 42 41 03 0C  // .A.f.-.Bv.-.BA..
    D740: 48 00 00 07 A5 00 5C FB 56 08 48 03 01 01 00 02  // H.....\.V.H.....
    D750: 21 01 00 02 E9 01 00 3B 05 00 4C 00 00 04 05 00  // !......;..L.....
    D760: A8 50 98 43 55 10 01 02 05 00 00 4C 04 4C 52 4E  // .P.CU......L.LRN
    D770: 3B 05 00 4C 00 00 03 03 40 01 3D 65 01 00 44 63  // ;..L....@.=e..Dc
    D780: 06 51 C8 51 C8 2D A5 00 01 02 02 00 01 3E A5 00  // .Q.Q.-.......>..
    D790: 07 45 1B 06 56 00 40 02 02 00 01 56 18 00 66 FF  // .E..V.@....V..f.
    D7A0: 2D 0D 42 82 0A 03 0D 01 C0 01 03 05 41 80 4C 00  // -.B.........A.L.
    D7B0: 00 3B 02 41 04 04 00 00 00 2D 0D 42 04 00 2D 05  // .;.A.....-.B..-.
    D7C0: 41 04 00 00 00 33 0D 01 04 00 3E 0D 01 00 00 49  // A....3....>....I
    D7D0: 7D 06 3E 25 40 00 44 BA 06 3E 25 40 32 49 B0 06  // }.>%@.D..>%@2I..
    D7E0: 03 25 40 1F 3B 05 30 4E 00 00 04 22 00 40 3E 65  // .%@.;.0N...".@>e
    D7F0: 40 00 44 0E 09 3B 05 38 4E 00 00 04 6A 00 40 43  // @.D..;.8N...j.@C
    D800: 0E 09 66 FF 2D 0D 42 82 0F 03 0D 40 64 01 43 16  // ..f.-.B....@d.C.
    D810: 07 66 FF 2D 0D 42 2A 0F 03 0D 40 58 00 43 16 07  // .f.-.B*...@X.C..
    D820: 66 FF 2D 0D 42 E6 10 03 0D 40 04 01 43 16 07 66  // f.-.B....@..C..f
    D830: FF 2D 0D 42 EA 11 03 0D 40 14 00 43 16 07 66 FF  // .-.B....@..C..f.
    D840: 2D 0D 42 42 0C 03 0D 40 E8 02 03 05 41 80 4C 00  // -.BB...@....A.L.
    D850: 00 3B 02 41 04 04 00 00 00 2D 0D 42 04 00 2D 05  // .;.A.....-.B..-.
    D860: 41 04 00 00 00 33 0D 40 04 00 3E 0D 40 00 00 49  // A....3.@..>.@..I
    D870: 1D 07 3D E5 00 0F 49 0E 09 03 05 41 00 00 64 00  // ..=...I....A..d.
    D880: 03 05 40 00 00 22 00 4B A5 00 01 44 68 07 03 05  // ..@..".K...Dh...
    D890: 41 00 00 23 00 03 05 40 00 00 1B 00 3B 05 BC 4D  // A..#...@....;..M
    D8A0: 00 00 04 02 00 41 3B 05 C4 4D 00 00 04 02 00 40  // .....A;..M.....@
    D8B0: 03 05 41 80 00 00 00 4B A5 00 01 44 91 07 03 05  // ..A....K...D....
    D8C0: 41 00 00 00 00 3B 05 18 4E 00 00 0F 03 41 00 0F  // A....;..N....A..
    D8D0: 0D 41 01 02 03 8A 41 41 0F 0D 41 00 08 03 0A 40  // .A....AA..A....@
    D8E0: 41 0F 0D 40 20 00 04 0A 00 41 04 1A 09 41 04 0A  // A..@ ....A...A..
    D8F0: 0B 40 3D 65 01 01 44 F0 07 04 0A 02 41 04 1A 0D  // .@=e..D.....A...
    D900: 41 04 0A 0F 40 3D 65 01 02 44 F0 07 04 0A 04 41  // A...@=e..D.....A
    D910: 04 0A 06 41 04 1A 11 41 04 0A 13 40 04 1A 15 41  // ...A...A...@...A
    D920: 04 0A 17 40 03 05 40 00 1B B7 00 27 02 40 00 27  // ...@..@....'.@.'
    D930: 05 40 64 00 00 00 03 02 01 40 21 02 01 00 21 05  // .@d......@!...!.
    D940: 40 01 00 00 00 03 8A 00 01 03 02 01 40 21 05 40  // @...........@!.@
    D950: F5 28 00 00 03 02 41 40 03 02 40 01 03 02 01 41  // .(....A@..@....A
    D960: 21 05 40 4C 00 00 00 27 05 40 64 00 00 00 2D 02  // !.@L...'.@d...-.
    D970: 40 01 2D 05 40 0C 00 00 00 27 05 40 19 00 00 00  // @.-.@....'.@....
    D980: 03 05 01 01 40 00 00 3B 05 9C 4E 00 00 04 02 00  // ....@..;..N.....
    D990: 01 3B 05 A4 4E 00 00 04 02 00 40 3B 05 7C 4E 00  // .;..N.....@;.|N.
    D9A0: 00 1B 05 40 14 15 05 40 10 2D 05 40 00 00 00 00  // ...@...@.-.@....
    D9B0: 04 02 00 40 56 00 01 03 1A 01 00 3B 05 B4 4E 00  // ...@V......;..N.
    D9C0: 00 04 02 00 01 21 8A 00 00 27 05 40 C4 09 00 00  // .....!...'.@....
    D9D0: 03 02 01 40 2D 05 01 01 00 00 00 3E 05 41 00 00  // ...@-......>.A..
    D9E0: 00 00 49 BF 08 33 05 01 01 00 00 00 15 05 01 10  // ..I..3..........
    D9F0: 43 F3 08 15 05 01 10 03 05 40 C4 09 00 00 33 02  // C........@....3.
    DA00: 40 41 21 05 40 0A 00 00 00 27 05 40 C4 09 00 00  // @A!.@....'.@....
    DA10: 15 05 40 1C 2D 02 01 40 15 05 41 10 27 05 41 C4  // ..@.-..@..A.'.A.
    DA20: 09 00 00 03 0A 01 40 3B 05 18 4F 00 00 04 02 00  // ......@;..O.....
    DA30: 01 56 00 01 03 29 01 01 3B 05 60 4F 00 00 2E 02  // .V...)..;.`O....
    DA40: 00 01 03 99 01 00 03 05 00 80 4C 00 00 02 21 01  // ..........L...!.
    DA50: 00 02 E9 01 00 3B 02 00 03 03 41 00 03 03 40 01  // .....;....A...@.
    DA60: 3E 05 41 FF FF FF FF 44 50 0A 3E E5 41 00 44 47  // >.A....DP.>.A.DG
    DA70: 09 3E E5 41 01 44 47 09 43 CF 09 3B 02 00 03 03  // .>.A.DG.C..;....
    DA80: 41 00 5E 05 41 FF FF 0F 00 00 00 90 43 3B 05 00  // A.^.A.......C;..
    DA90: 4C 00 00 04 02 00 41 55 10 01 02 05 00 00 4C 04  // L.....AU......L.
    DAA0: 4C 52 4E 3B 05 00 4C 00 00 03 03 40 01 3D 65 01  // LRN;..L....@.=e.
    DAB0: 00 44 90 09 51 C8 51 C8 2D 25 01 01 3E 25 01 07  // .D..Q.Q.-%..>%..
    DAC0: 45 47 09 5B 3B 02 00 03 03 41 00 3E E5 41 00 44  // EG.[;....A.>.A.D
    DAD0: B8 09 03 03 41 01 2D 05 41 80 4C 00 00 3B 02 41  // ....A.-.A.L..;.A
    DAE0: 04 02 00 40 2D 0D 00 08 00 43 21 09 0F 05 41 00  // ...@-....C!...A.
    DAF0: 00 80 83 09 03 40 01 0F 03 40 02 2D 0D 00 04 00  // .....@...@.-....
    DB00: 43 16 0A 3E 8D 41 FE FF 49 16 0A 3E 0D 41 64 00  // C..>.A..I..>.Ad.
    DB10: 45 FF 09 27 0D 41 64 00 03 0A 41 40 50 01 33 0D  // E..'.Ad...A@P.3.
    DB20: 41 01 00 3E 0D 41 00 00 49 E8 09 2D 0D 00 04 00  // A..>.A..I..-....
    DB30: 43 21 09 51 0A 33 0D 41 01 00 3E 0D 41 00 00 49  // C!.Q.3.A..>.A..I
    DB40: FF 09 2D 0D 00 04 00 43 21 09 3B 05 00 4C 00 00  // ..-....C!.;..L..
    DB50: 04 02 00 41 04 02 01 40 02 05 00 00 4C 00 00 55  // ...A...@....L..U
    DB60: 10 01 52 4E 3D 65 01 00 44 45 0A 51 C8 2D A5 00  // ..RN=e..DE.Q.-..
    DB70: 01 3E A5 00 07 45 24 0A 5B 2D 0D 00 08 00 56 18  // .>...E$.[-....V.
    DB80: 00 43 21 09 3E E5 01 12 49 72 0A 3B 05 3C 4D 00  // .C!.>...Ir.;.<M.
    DB90: 00 03 03 41 00 07 25 C9 05 FC 3E 25 41 00 44 72  // ...A..%...>%A.Dr
    DBA0: 0A 0D 25 C9 05 02 5B 7A 64 09 00 00 1C 00 38 00  // ..%...[zd.....8.
    DBB0: 54 00 70 00 8C 00 08 80 88 83 7F 0F 00 00 00 80  // T.p.............
    DBC0: 88 83 10 00 00 00 10 05 80 50 E4 00 00 00 11 05  // .........P......
    DBD0: 80 50 00 00 00 00 82 05 80 83 01 00 00 00 A1 05  // .P..............
    DBE0: 80 83 F0 00 00 00 18 80 88 83 10 01 00 00 80 80  // ................
    DBF0: 88 83 01 00 00 00 70 80 88 83 01 00 00 00 30 80  // ......p.......0.
    DC00: 88 83 03 00 00 00 20 80 88 83 01 00 00 00 08 10  // ...... .........
    DC10: 88 83 00 00 00 10 04 10 88 83 10 00 23 00 08 10  // ............#...
    DC20: 88 83 00 00 1B 10 04 11 88 83 00 00 00 00 00 04  // ................
    DC30: 88 83 01 00 00 00 04 00 88 83 00 06 00 00 08 00  // ................
    DC40: 08 00 F4 FF FF FF 08 20 00 00 04 01 88 83 00 06  // ....... ........
    DC50: 00 00 08 01 08 00 F4 FF FF FF 08 20 00 00 04 02  // ........... ....
    DC60: 88 83 00 06 00 00 08 02 08 00 F4 FF FF FF 08 20  // ............... 
    DC70: 00 00 04 03 88 83 00 06 00 00 08 03 08 00 F4 FF  // ................
    DC80: FF FF 08 20 00 00 24 30 88 83 03 04 06 00 20 30  // ... ..$0...... 0
    DC90: 88 83 85 6F 07 29 38 30 88 83 00 00 00 20 40 30  // ...o.)80..... @0
    DCA0: 08 00 FE FF EF FF 01 00 00 00 00 30 88 83 01 00  // ...........0....
    DCB0: 00 00 00 50 88 83 00 00 00 00 50 50 88 83 01 01  // ...P......PP....
    DCC0: 01 01 A4 50 08 00 FE FF FF FF 01 00 00 00 14 05  // ...P............
    DCD0: 00 00 FE FF FF FF 00 00 00 00 20 05 80 83 EE 02  // .......... .....
    DCE0: 00 00 1C 05 80 83 D0 07 00 00 18 05 80 83 00 00  // ................
    DCF0: 00 00 13 05 80 50 00 00 00 00 14 05 00 00 F9 FF  // .....P..........
    DD00: FF FF 06 00 00 00 38 70 88 83 00 01 00 00 30 70  // ......8p......0p
    DD10: 08 00 FF F0 FF FF 00 04 00 00 30 70 08 00 FF FF  // ..........0p....
    DD20: FF FD 00 00 00 02 08 70 08 00 BF FF FF FF 40 00  // .......p......@.
    DD30: 00 00 14 05 00 00 FE FF FF FF 01 00 00 00 30 70  // ..............0p
    DD40: 08 00 FE FF FF FF 00 00 00 00 F4 01 FE FF 14 70  // ...............p
    DD50: 88 83 02 00 11 00 A8 50 08 00 FF FF FE FF 00 00  // .......P........
    DD60: 00 00 88 50 88 83 1F 00 00 00 74 50 88 83 02 1B  // ...P......tP....
    DD70: 00 00 FF FF FF FF 08 80 88 83 7F 0F 00 00 00 80  // ................
    DD80: 88 83 10 00 00 00 18 80 08 00 CF FF FF FF 10 00  // ................
    DD90: 00 00 24 30 88 83 03 04 06 00 38 30 88 83 00 00  // ..$0......80....
    DDA0: 00 20 00 30 88 83 00 00 00 00 00 06 80 50 02 00  // . .0.........P..
    DDB0: 00 00 04 00 08 00 DF FF FF FF 00 00 00 00 04 00  // ................
    DDC0: 08 00 FF F7 FF FF 00 00 00 00 04 01 08 00 DF FF  // ................
    DDD0: FF FF 00 00 00 00 04 01 08 00 FF F7 FF FF 00 00  // ................
    DDE0: 00 00 04 02 08 00 DF FF FF FF 00 00 00 00 04 02  // ................
    DDF0: 08 00 FF F7 FF FF 00 00 00 00 04 03 08 00 DF FF  // ................
    DE00: FF FF 00 00 00 00 04 03 08 00 FF F7 FF FF 00 00  // ................
    DE10: 00 00 04 00 08 00 FE FF FF FF 00 00 00 00 04 01  // ................
    DE20: 08 00 FE FF FF FF 00 00 00 00 04 02 08 00 FE FF  // ................
    DE30: FF FF 00 00 00 00 04 03 08 00 FE FF FF FF 00 00  // ................
    DE40: 00 00 08 00 08 00 FF FF FF FF 00 20 00 00 08 01  // ........... ....
    DE50: 08 00 FF FF FF FF 00 20 00 00 08 02 08 00 FF FF  // ....... ........
    DE60: FF FF 00 20 00 00 08 03 08 00 FF FF FF FF 00 20  // ... ........... 
    DE70: 00 00 18 80 08 00 FF FC FF FF 00 01 00 00 04 11  // ................
    DE80: 88 83 00 00 00 00 04 10 08 00 FF FF 00 FC 00 00  // ................
    DE90: 00 00 04 80 88 83 00 00 00 00 F4 01 FE FF 18 80  // ................
    DEA0: 08 00 FF F7 FF FF 00 08 00 00 01 00 FE FF 04 10  // ................
    DEB0: 88 83 00 00 00 00 08 10 88 83 00 00 00 00 04 11  // ................
    DEC0: 88 83 0B 00 00 00 0A 00 FE FF 18 80 08 00 FF FC  // ................
    DED0: FF FF 04 02 00 00 0A 00 FE FF 08 00 08 00 FF DF  // ................
    DEE0: FF FF 00 00 00 00 08 01 08 00 FF DF FF FF 00 00  // ................
    DEF0: 00 00 08 02 08 00 FF DF FF FF 00 00 00 00 08 03  // ................
    DF00: 08 00 FF DF FF FF 00 00 00 00 04 00 88 83 00 06  // ................
    DF10: 00 00 04 01 88 83 00 06 00 00 04 02 88 83 00 06  // ................
    DF20: 00 00 04 03 88 83 00 06 00 00 03 00 FE FF 04 00  // ................
    DF30: 88 83 00 06 00 00 04 00 88 83 00 06 00 00 04 01  // ................
    DF40: 88 83 00 06 00 00 04 01 88 83 00 06 00 00 04 02  // ................
    DF50: 88 83 00 06 00 00 04 02 88 83 00 06 00 00 04 03  // ................
    DF60: 88 83 00 06 00 00 04 03 88 83 00 06 00 00 58 30  // ..............X0
    DF70: 88 83 00 00 00 00 34 30 88 83 00 00 08 00 54 30  // ......40......T0
    DF80: 88 83 00 00 00 00 54 30 88 83 01 00 00 00 04 30  // ......T0.......0
    DF90: 88 83 00 40 00 00 18 30 88 83 00 00 00 00 14 30  // ...@...0.......0
    DFA0: 88 83 10 00 00 00 1C 30 88 83 00 00 00 00 14 00  // .......0........
    DFB0: FE FF 38 30 08 00 FF FF FF EF 00 00 00 10 01 00  // ..80............
    DFC0: FE FF 38 30 08 00 FF FF FF EF 00 00 00 00 01 00  // ..80............
    DFD0: FE FF 38 30 08 00 FF FF FF DF 00 00 00 00 2C 01  // ..80..........,.
    DFE0: FE FF 00 30 88 83 01 00 00 00 24 30 08 00 FD FF  // ...0......$0....
    DFF0: FF FF 00 00 00 00 05 00 FE FF 24 30 08 00 FE FF  // ..........$0....
    E000: FF FF 00 00 00 00 40 00 FE FF 58 30 88 83 00 00  // ......@...X0....
    E010: 00 00 34 30 08 00 FF FF FC FF 00 00 01 00 54 30  // ..40..........T0
    E020: 08 00 FD FF FF FF 02 00 00 00 05 00 FE FF 24 30  // ..............$0
    E030: 08 00 FF FF F9 FC 00 00 00 01 54 30 08 00 FE FF  // ..........T0....
    E040: FF FF 00 00 00 00 18 80 08 00 CF FF FF FF 30 00  // ..............0.
    E050: 00 00 01 01 80 83 80 00 00 00 FF FF FF FF 08 80  // ................
    E060: 88 83 7F 0F 00 00 00 80 88 83 10 00 00 00 50 50  // ..............PP
    E070: 08 00 FE FF FF FF 00 00 00 00 0A 00 FE FF A4 50  // ...............P
    E080: 08 00 FE FF FF FF 00 00 00 00 64 00 FE FF 50 50  // ..........d...PP
    E090: 88 83 00 00 00 00 64 00 FE FF 00 50 88 83 01 00  // ......d....P....
    E0A0: 00 00 08 80 88 83 53 0F 00 00 00 80 88 83 00 00  // ......S.........
    E0B0: 00 00 FF FF FF FF 08 80 88 83 7F 0F 00 00 00 80  // ................
    E0C0: 88 83 13 00 00 00 18 80 08 00 FF FF FF FF 00 01  // ................
    E0D0: 00 00 00 50 88 83 00 00 00 00 50 50 88 83 01 01  // ...P......PP....
    E0E0: 01 01 A4 50 08 00 FE FF FF FF 01 00 00 00 18 80  // ...P............
    E0F0: 08 00 DF FF FF FF 00 00 00 00 24 30 08 00 FF FF  // ..........$0....
    E100: FF FC 03 04 06 00 38 30 88 83 00 00 00 20 00 06  // ......80..... ..
    E110: 80 83 02 00 00 00 04 00 08 00 DF FF FF FF 00 00  // ................
    E120: 00 00 04 00 08 00 FF F7 FF FF 00 00 00 00 04 01  // ................
    E130: 08 00 DF FF FF FF 00 00 00 00 04 01 08 00 FF F7  // ................
    E140: FF FF 00 00 00 00 04 02 08 00 DF FF FF FF 00 00  // ................
    E150: 00 00 04 02 08 00 FF F7 FF FF 00 00 00 00 04 03  // ................
    E160: 08 00 DF FF FF FF 00 00 00 00 04 03 08 00 FF F7  // ................
    E170: FF FF 00 00 00 00 04 00 08 00 FE FF FF FF 00 00  // ................
    E180: 00 00 04 01 08 00 FE FF FF FF 00 00 00 00 04 02  // ................
    E190: 08 00 FE FF FF FF 00 00 00 00 04 03 08 00 FE FF  // ................
    E1A0: FF FF 00 00 00 00 08 00 08 00 FF FF FF FF 00 20  // ............... 
    E1B0: 00 00 08 01 08 00 FF FF FF FF 00 20 00 00 08 02  // ........... ....
    E1C0: 08 00 FF FF FF FF 00 20 00 00 08 03 08 00 FF FF  // ....... ........
    E1D0: FF FF 00 20 00 00 18 80 08 00 FF FD FF FF 00 00  // ... ............
    E1E0: 00 00 04 11 88 83 00 00 00 00 04 10 88 83 00 00  // ................
    E1F0: 00 00 08 80 88 83 53 0F 00 00 00 80 88 83 00 00  // ......S.........
    E200: 00 00 18 80 08 00 FF F7 FF FF 00 00 00 00 04 80  // ................
    E210: 88 83 01 00 00 00 FF FF FF FF 00 50 08 01 C4 00  // ...........P....
    E220: 00 00 28 50 08 01 CC 00 00 00 40 50 08 01 D4 00  // ..(P......@P....
    E230: 00 00 58 50 08 01 DC 00 00 00 5C 50 08 01 E4 00  // ..XP......\P....
    E240: 00 00 50 50 08 01 EC 00 00 00 04 80 08 01 F4 00  // ..PP............
    E250: 00 00 A4 50 08 01 FC 00 00 00 04 80 88 83 00 00  // ...P............
    E260: 00 00 01 00 FE FF 00 50 88 83 01 00 00 00 28 50  // .......P......(P
    E270: 08 00 FC FF FF FF 00 00 00 00 40 50 88 83 00 00  // ..........@P....
    E280: 00 00 58 50 88 83 01 00 00 00 5C 50 88 83 00 00  // ..XP......\P....
    E290: 07 00 50 50 08 00 FE FF FF FF 00 00 00 00 0A 00  // ..PP............
    E2A0: FE FF A4 50 08 00 FE FF FF FF 00 00 00 00 F4 01  // ...P............
    E2B0: FE FF 50 50 88 83 00 00 00 00 40 50 88 83 E6 01  // ..PP......@P....
    E2C0: 00 00 14 00 FE FF 5C 50 88 83 00 01 07 00 0A 00  // ......\P........
    E2D0: FE FF 60 50 08 01 BC 00 00 00 00 50 88 83 00 00  // ..`P.......P....
    E2E0: 00 00 28 50 88 83 00 00 00 00 40 50 88 83 00 00  // ..(P......@P....
    E2F0: 00 00 58 50 88 83 00 00 00 00 5C 50 88 83 00 00  // ..XP......\P....
    E300: 00 00 50 50 88 83 00 00 00 00 04 80 88 83 00 00  // ..PP............
    E310: 00 00 A4 50 88 83 00 00 00 00 FF FF FF FF 30 70  // ...P..........0p
    E320: 08 00 FE FF FF FF 00 00 00 00 F4 01 FE FF FF FF  // ................
    E330: FF FF 00 05 3D 00 00 1F 01 00 00 BA 00 00 00 BB  // ....=...........
    E340: 08 00 00 B1 4B 00 01 73 69 00 01 9F 26 00 00 19  // ....K..si...&...
    E350: 33 00 00 89 39 00 01 9E 05 00 01 CB 80 00 00 16  // 3...9...........
    E360: 44 00 00 F1 20 00 00 DC 00 00 00 DD 00 00 FF FF  // D... ...........
    E370: FF FF 00 05 3D 00 00 1F 03 00 00 BA 00 00 00 BB  // ....=...........
    E380: 08 00 00 B1 4B 00 01 73 69 00 01 9F 24 00 00 19  // ....K..si...$...
    E390: 33 00 00 89 39 00 00 F8 42 00 00 F9 01 00 00 FA  // 3...9...B.......
    E3A0: 23 00 00 FB 45 00 00 FC 67 00 00 FD 89 00 00 FE  // #...E...g.......
    E3B0: AB 00 00 1D 25 00 01 C3 07 00 01 C2 5A 00 01 C4  // ....%.......Z...
    E3C0: 00 00 01 C0 07 00 01 C1 5A 00 01 B1 00 00 01 BF  // ........Z.......
    E3D0: 7D 00 01 B5 63 00 01 CB 80 00 01 B3 00 00 01 B2  // }...c...........
    E3E0: 00 00 00 9F 10 00 01 83 14 00 00 A7 C2 00 01 71  // ...............q
    E3F0: 12 00 01 82 5D 00 01 89 24 00 01 BE 01 00 00 8A  // ....]...$.......
    E400: 53 00 00 0A 01 00 01 D4 10 00 00 F3 40 00 00 F4  // S...........@...
    E410: 00 00 01 B4 00 00 00 DC 00 00 00 DD 00 00 01 91  // ................
    E420: 20 00 00 D1 06 00 00 D6 01 00 FF FF FF FF 00 05  //  ...............
    E430: 3D 00 00 1F 03 00 00 BA 00 00 00 BB 08 00 00 B1  // =...............
    E440: 4B 00 01 73 69 00 01 9F 24 00 00 19 33 00 00 89  // K..si...$...3...
    E450: 39 00 00 F8 42 00 00 F9 01 00 00 FA 23 00 00 FB  // 9...B.......#...
    E460: 45 00 00 FC 67 00 00 FD 89 00 00 FE AB 00 00 1D  // E...g...........
    E470: 25 00 01 C3 07 00 01 C2 5A 00 01 C4 00 00 01 C0  // %.......Z.......
    E480: 07 00 01 C1 5A 00 01 B1 00 00 01 BF 7D 00 01 B5  // ....Z.......}...
    E490: 63 00 01 CB 80 00 01 B3 00 00 01 B2 00 00 00 9F  // c...............
    E4A0: 10 00 01 83 14 00 00 A7 C2 00 01 71 12 00 01 82  // ...........q....
    E4B0: 5D 00 01 89 28 00 01 BE 01 00 00 8A 53 00 00 0A  // ]...(.......S...
    E4C0: 01 00 01 D4 10 00 00 F3 40 00 00 F4 00 00 01 B4  // ........@.......
    E4D0: 00 00 00 DC 00 00 00 DD 00 00 01 91 20 00 00 D1  // ............ ...
    E4E0: 06 00 00 D6 01 00 01 D2 08 00 01 D3 80 00 FF FF  // ................
    E4F0: FF FF 1E 21 00 00 1E 22 00 01 20 21 00 02 20 22  // ...!...".. !.. "
    E500: 00 03 21 21 00 04 21 22 00 05 25 21 00 0A 21 02  // ..!!..!"..%!..!.
    E510: 01 01 00 08 37 00 00 0D 25 F4 16 08 07 25 62 18  // ....7...%....%b.
    E520: FE 56 00 41 03 39 41 01 09 25 41 0F 03 0A 40 42  // .V.A.9A..%A...@B
    E530: 66 FF 2D 0D 42 11 02 15 25 41 02 2D 0A 42 41 03  // f.-.B...%A.-.BA.
    E540: 0C 41 00 00 01 02 00 00 41 07 A5 01 00 FE 54 08  // .A......A.....T.
    E550: 01 00 01 0C FB 16 02 00 03 0A 42 40 03 05 40 C0  // ..........B@..@.
    E560: 5D 00 00 56 00 41 03 21 41 00 27 02 40 41 01 8A  // ]..V.A.!A.'.@A..
    E570: F7 16 40 01 25 F7 16 02 0D 25 F5 16 02 01 A9 F9  // ..@.%....%......
    E580: 16 01 4B 25 01 01 49 7F 00 54 30 F9 16 01 0D F9  // ..K%..I..T0.....
    E590: 16 00 31 2B A5 F9 16 01 4B 25 01 02 44 96 00 2B  // ..1+....K%..D..+
    E5A0: A5 F9 16 01 56 00 41 03 71 41 01 0F E5 41 80 01  // ....V.A.qA...A..
    E5B0: 02 FA 16 41 03 69 41 00 2D A5 41 01 01 02 FA 16  // ...A.iA.-.A.....
    E5C0: 41 4B 25 01 02 44 C6 00 56 28 41 2D A5 41 01 01  // AK%..D..V(A-.A..
    E5D0: 02 FA 16 41 4B 25 01 01 44 E7 00 03 71 41 00 2D  // ...AK%..D...qA.-
    E5E0: A5 41 01 01 02 FA 16 41 03 79 41 00 2D A5 41 01  // .A.....A.yA.-.A.
    E5F0: 01 02 FA 16 41 0D 25 F4 16 01 03 A5 41 01 43 BA  // ....A.%.....A.C.
    E600: 01 03 29 40 01 03 65 40 01 03 99 40 00 56 00 41  // ..)@..e@...@.V.A
    E610: 03 71 41 01 0F 65 41 01 0F E5 41 80 01 02 FA 16  // .qA..eA...A.....
    E620: 41 01 A5 F9 16 04 3D 65 01 04 47 28 01 01 0D F9  // A.....=e..G(....
    E630: 16 01 13 43 57 01 01 A2 F9 16 40 01 0D F9 16 01  // ...CW.....@.....
    E640: 31 43 57 01 07 65 F9 16 EF 01 A5 F9 16 03 3E 25  // 1CW..e........>%
    E650: 40 04 46 57 01 01 A2 F9 16 40 31 A5 F9 16 01 5C  // @.FW.....@1....\
    E660: 65 F9 16 FD 20 0D 25 F4 16 01 03 A5 41 00 43 BA  // e... .%.....A.C.
    E670: 01 03 05 41 01 00 00 80 03 AA 41 40 01 02 FA 16  // ...A......A@....
    E680: 41 3D 65 01 01 49 82 01 02 A8 00 FA 16 43 F9 01  // A=e..I.......C..
    E690: 56 00 41 03 1A 41 40 3B 02 41 03 28 41 FA 16 03  // V.A..A@;.A.(A...
    E6A0: 68 41 FA 16 03 A8 41 FA 16 03 E8 41 FA 16 04 02  // hA....A....A....
    E6B0: 00 41 56 28 40 2D 8D 40 04 00 3E 25 40 04 47 F9  // .AV(@-.@..>%@.G.
    E6C0: 01 33 25 40 04 43 36 01 02 65 00 02 03 0D 41 64  // .3%@.C6..e....Ad
    E6D0: 00 33 0D 41 01 00 3E 0D 41 00 00 44 F9 01 51 64  // .3.A..>.A..D..Qd
    E6E0: 4A 25 F6 16 10 44 C3 01 4A 65 F6 16 06 49 F9 01  // J%...D..Je...I..
    E6F0: 02 65 00 01 0D 25 F5 16 02 3E A5 41 00 44 63 01  // .e...%...>.A.Dc.
    E700: 4B 25 01 01 44 F3 00 0D 25 F5 16 02 01 25 F4 16  // K%..D...%....%..
    E710: 02 51 01 54 00 F4 16 54 00 FB 16 5B 7A 10 00 68  // .Q.T...T...[z..h
    E720: 48 01 00 6C 48 03 02 70 48 05 04 98 48 29 28 00  // H..lH..pH...H)(.
    E730: 6A 00 02 02 00 04 37 00 00 3D 65 00 01 44 54 00  // j.....7..=e..DT.
    E740: 55 30 00 3D 25 00 06 46 50 00 32 25 00 01 20 25  // U0.=%..FP.2%.. %
    E750: 00 08 56 08 48 03 22 48 40 0D A5 99 18 01 02 A0  // ..V.H."H@.......
    E760: 00 98 18 08 A5 00 03 4A 25 98 18 02 44 4A 00 5C  // .......J%...DJ.\
    E770: 0D 99 18 FF FE 01 00 43 50 00 0D 0D 99 18 01 01  // .......CP.......
    E780: 3A 00 00 5B 0D 65 CF 05 08 01 05 C8 01 01 00 00  // :..[.e..........
    E790: 00 3C 25 D8 01 00 44 61 00 5B D3 00 01 04 00 08  // .<%...Da.[......
    E7A0: 08 05 00 FF FF FF 00 66 1E 03 04 46 08 00 03 05  // .......f...F....
    E7B0: 40 38 18 00 00 3D 05 00 00 00 00 00 44 5D 00 21  // @8...=......D].!
    E7C0: 05 46 64 00 00 00 2D 01 40 00 33 05 40 01 00 00  // .Fd...-.@.3.@...
    E7D0: 00 27 01 40 00 3E 05 40 38 18 00 00 45 4C 00 03  // .'.@.>.@8...EL..
    E7E0: 05 40 38 18 00 00 3E 05 40 C8 00 00 00 46 5D 00  // .@8...>.@....F].
    E7F0: 03 05 40 C8 00 00 00 66 FF 2D 0D 42 BB 00 3E 0C  // ..@....f.-.B..>.
    E800: 40 02 00 47 74 00 2D 0D 42 08 00 43 64 00 33 0C  // @..Gt.-.B..Cd.3.
    E810: 40 00 00 2D 0C 40 06 00 33 0D 40 01 00 27 0C 40  // @..-.@..3.@..'.@
    E820: 06 00 2D 0C 40 04 00 02 E2 00 40 33 0C 40 04 00  // ..-.@.....@3.@..
    E830: 21 0C 40 06 00 2D 0C 40 00 00 03 02 41 40 21 05  // !.@..-.@....A@!.
    E840: 46 64 00 00 00 27 02 40 41 02 0A 00 40 02 B2 00  // Fd...'.@A...@...
    E850: 40 5B 7A 18 00 C8 00 40 06 08 00 19 00 40 06 80  // @[z....@.....@..
    E860: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 74 00  // .@.2...8.`.d..t.
    E870: 01 03 00 08 37 00 00 3A 2A 00 4B A5 00 0C 44 20  // ....7..:*.K...D 
    E880: 00 3A 54 00 4B A5 00 04 49 20 00 3A 00 00 3D E5  // .:T.K...I .:..=.
    E890: 00 01 44 3D 00 07 65 04 17 EF 3C 0D 05 17 00 00  // ..D=..e...<.....
    E8A0: 49 70 00 07 A5 05 17 FC 43 70 00 4A 65 04 17 10  // Ip......Cp.Je...
    E8B0: 49 70 00 07 25 07 17 F7 5C A5 05 17 FC 01 4B A5  // Ip..%...\.....K.
    E8C0: 00 01 49 5B 00 0E 65 01 20 0E 65 01 10 01 09 03  // ..I[..e. .e.....
    E8D0: 17 00 01 01 04 17 01 50 01 0D 25 07 17 08 3A 00  // .......P..%...:.
    E8E0: 00 5B BD 00 02 01 00 04 03 09 40 00 02 0D 00 00  // .[........@.....
    E8F0: FF 66 16 03 0A 41 40 1B 0D 41 0C 3E 25 41 02 44  // .f...A@..A.>%A.D
    E900: 2F 00 3E 25 41 03 49 B9 00 2D 0C 42 06 00 43 34  // /.>%A.I..-.B..C4
    E910: 00 2D 0C 42 0A 00 03 24 41 00 00 3E 25 41 00 44  // .-.B...$A..>%A.D
    E920: B9 00 3E 0C 40 04 00 44 54 00 2D 0D 42 08 00 33  // ..>.@..DT.-.B..3
    E930: 25 41 01 43 39 00 03 0C 40 06 00 03 0C 41 08 00  // %A.C9...@....A..
    E940: 66 16 2D 0A 40 42 3E 0D 41 00 00 44 A7 00 2D 0A  // f.-.@B>.A..D..-.
    E950: 42 41 56 00 41 03 24 41 00 00 03 A4 41 01 00 3E  // BAV.A.$A....A..>
    E960: 25 41 FF 44 A7 00 3E 25 41 01 49 90 00 02 24 00  // %A.D..>%A.I...$.
    E970: 02 00 3E 25 41 02 49 A0 00 02 64 00 02 00 32 65  // ..>%A.I...d...2e
    E980: 00 01 2D 1A 42 41 43 73 00 03 0A 42 40 03 0C 41  // ..-.BACs...B@..A
    E990: 01 00 3E 0D 41 00 00 44 B9 00 5B 56 08 42 5B 00  // ..>.A..D..[V.B[.
    E9A0: 41 00 01 03 00 08 37 00 00 03 01 41 00 55 18 00  // A.....7....A.U..
    E9B0: 55 08 01 3E E5 41 03 44 21 00 3E E5 41 02 49 40  // U..>.A.D!.>.A.I@
    E9C0: 00 3D 0D 00 30 75 45 40 00 03 05 40 C0 D4 01 00  // .=..0uE@...@....
    E9D0: 27 01 40 00 15 25 40 01 02 62 01 40 1A 05 00 01  // '.@..%@..b.@....
    E9E0: 5B 00 34 00 01 03 00 04 37 00 00 3D 0D 00 01 00  // [.4.....7..=....
    E9F0: 49 33 00 54 00 D8 01 56 00 41 03 19 41 00 15 05  // I3.T...V.A..A...
    EA00: 41 02 01 02 E8 01 41 01 0D C8 01 02 00 3C 25 D8  // A.....A......<%.
    EA10: 01 00 44 2B 00 5B 75 01 01 04 00 04 37 00 00 03  // ..D+.[u.....7...
    EA20: 01 46 01 02 31 01 00 1A 25 01 04 03 21 41 01 0E  // .F..1...%...!A..
    EA30: 25 01 60 52 14 02 02 01 46 42 39 00 63 0F 4F 00  // %.`R....FB9.c.O.
    EA40: 63 08 24 01 63 09 0D 01 63 0A 14 01 63 13 1C 01  // c.$.c...c...c...
    EA50: 63 0B 2C 01 63 0C 34 01 63 0D 44 01 63 10 5D 01  // c.,.c.4.c.D.c.].
    EA60: 5A 5A 43 09 01 54 00 72 4A 01 0D 03 4A 1F 00 3D  // ZZC..T.rJ...J..=
    EA70: 25 01 00 44 6E 00 3D 25 01 02 44 F7 00 3D 25 01  // %..Dn.=%..D..=%.
    EA80: 05 49 FF 00 54 08 A1 4A 3D A5 01 00 49 7D 00 02  // .I..T..J=...I}..
    EA90: A5 01 02 32 A5 01 01 01 F1 A1 4A 01 4A 25 A4 4A  // ...2......J.J%.J
    EAA0: 01 49 DB 00 66 FF 2D 0D 42 6D 01 03 31 41 00 09  // .I..f.-.Bm..1A..
    EAB0: 05 41 03 00 00 00 2D 0A 42 41 2D 0A 42 41 03 0C  // .A....-.BA-.BA..
    EAC0: 41 00 00 07 65 A8 4A FE 01 05 A9 4A 00 80 00 00  // A...e.J....J....
    EAD0: 56 00 40 03 09 40 00 21 05 40 00 80 00 00 27 02  // V.@..@.!.@....'.
    EAE0: 40 41 01 02 AA 4A 40 0D E5 AB 4A 10 0D 65 00 4A  // @A...J@...J..e.J
    EAF0: 04 02 20 01 00 4A 08 25 01 07 0E 25 01 00 52 14  // .. ..J.%...%..R.
    EB00: 15 2D 46 04 01 AA 9C 1B 46 3A 00 00 5B 01 05 72  // .-F.....F:..[..r
    EB10: 4A 00 00 00 00 07 E5 00 4A 2F 0D 65 00 4A 04 3A  // J.......J/.e.J.:
    EB20: 00 00 5B 54 20 B0 4A 43 09 01 01 25 B0 4A 01 43  // ..[T .JC...%.J.C
    EB30: 09 01 01 25 B0 4A 02 43 09 01 07 25 A0 4A EF 43  // ...%.J.C...%.J.C
    EB40: 09 01 0D 25 A0 4A 10 43 09 01 54 08 A4 4A 51 C8  // ...%.J.C..T..JQ.
    EB50: 0D 25 A5 4A 01 51 32 43 09 01 0D 65 A8 4A 01 51  // .%.J.Q2C...e.J.Q
    EB60: 0A 07 25 A5 4A FE 51 0A 01 0D A4 4A 01 02 51 C8  // ..%.J.Q....J..Q.
    EB70: 43 09 01 0D 25 B6 4A 10 01 21 A7 4A 01 43 09 01  // C...%.J..!.J.C..
    EB80: 7A 08 00 48 3F 78 69 F0 D2 90 7E 00 33 06 01 05  // z..H?xi...~.3...
    EB90: 04 08 37 00 00 03 01 46 02 56 18 46 03 B1 46 00  // ..7....F.V.F..F.
    EBA0: 15 1D 46 05 42 39 00 63 07 46 04 63 01 34 00 63  // ..F.B9.c.F.c.4.c
    EBB0: 00 52 03 63 0B 47 04 63 04 F7 05 5A 5A 43 03 06  // .R.c.G.c...ZZC..
    EBC0: 03 20 40 CF 05 02 31 02 00 0E 25 02 60 52 14 01  // . @...1...%.`R..
    EBD0: 62 47 4A 46 4C 25 40 10 49 66 00 3D A5 01 03 49  // bGJFL%@.If.=...I
    EBE0: 66 00 4A 25 0D 4A 10 49 66 00 01 A5 47 4A 02 43  // f.J%.J.If...GJ.C
    EBF0: 6B 00 01 B1 47 4A 01 03 39 41 01 09 25 41 70 3E  // k...GJ..9A..%Ap>
    EC00: 25 41 00 44 83 00 33 25 41 10 01 E2 47 4A 41 3D  // %A.D..3%A...GJA=
    EC10: A5 01 05 44 A8 00 3D A5 01 00 44 A8 00 01 0D 79  // ...D..=...D....y
    EC20: 4A 0F 01 3D 0D 00 A4 38 45 CA 00 01 0D 79 4A 0F  // J..=...8E....yJ.
    EC30: 00 43 CA 00 02 A5 01 00 0E E5 01 02 03 21 43 01  // .C...........!C.
    EC40: 03 02 40 44 33 25 40 01 32 25 01 01 01 21 A3 4A  // ..@D3%@.2%...!.J
    EC50: 01 01 0A 79 4A 40 03 1A 48 46 4A 25 C6 48 01 49  // ...yJ@..HFJ%.H.I
    EC60: 42 04 66 FF 2D 0D 42 0D 06 56 00 40 20 A5 00 06  // B.f.-.B..V.@ ...
    EC70: 2D 0A 42 40 07 A5 CA 48 FE 0D 25 CA 48 01 0D 64  // -.B@...H..%.H..d
    EC80: C7 48 05 00 56 08 48 20 A5 00 02 03 22 48 40 01  // .H..V.H ...."H@.
    EC90: 04 06 48 00 00 01 64 05 48 04 00 07 E5 05 48 FC  // ..H...d.H.....H.
    ECA0: 03 1A 48 46 3D A5 01 00 44 B2 01 66 07 2D 0C 42  // ..HF=...D..f.-.B
    ECB0: 08 00 02 01 02 00 02 F1 02 01 52 1C 03 1A 48 46  // ..........R...HF
    ECC0: 01 04 C0 48 04 00 01 04 C1 48 08 00 01 04 C2 48  // ...H.....H.....H
    ECD0: 0C 00 01 04 C3 48 10 00 01 0C CB 48 14 00 01 0C  // .....H.....H....
    ECE0: CD 48 16 00 01 4C C4 48 18 00 03 04 40 1A 00 09  // .H...L.H....@...
    ECF0: 05 40 FE FF FF 7F 0F 05 40 02 00 00 00 01 02 CE  // .@......@.......
    ED00: 48 40 03 04 40 1E 00 0F 05 40 00 00 02 00 01 02  // H@..@....@......
    ED10: CF 48 40 03 04 40 22 00 0F 05 40 00 40 00 40 01  // .H@..@"...@.@.@.
    ED20: 02 D0 48 40 03 04 40 26 00 0F 05 40 00 40 00 00  // ..H@..@&...@.@..
    ED30: 01 02 D1 48 40 01 04 D4 48 2A 00 43 B8 01 56 08  // ...H@...H*.C..V.
    ED40: 46 43 47 04 03 1A 48 46 07 25 C4 48 FE 07 25 CE  // FCG...HF.%.H..%.
    ED50: 48 FD 07 25 CF 48 FB 07 25 C4 48 FD 51 05 07 A5  // H..%.H..%.H.Q...
    ED60: CF 48 FD 51 03 0D 25 CE 48 01 51 03 07 05 D0 48  // .H.Q..%.H.Q....H
    ED70: FE BF FE BF 51 01 4A A5 D3 48 80 44 E8 01 4A E5  // ....Q.J..H.D..J.
    ED80: D3 48 01 49 42 04 0D E5 CE 48 80 51 03 07 0D D1  // .H.IB....H.Q....
    ED90: 48 FE BF 51 01 4A E5 D3 48 40 44 07 02 0D 25 D1  // H..Q.J..H@D...%.
    EDA0: 48 01 51 01 4A A5 D3 48 02 44 16 02 4A A5 D3 48  // H.Q.J..H.D..J..H
    EDB0: 04 49 42 04 0D 05 D0 48 01 00 01 00 51 01 0D 25  // .IB....H....Q..%
    EDC0: CD 48 04 0D 25 CF 48 04 03 20 41 D3 48 09 25 41  // .H..%.H.. A.H.%A
    EDD0: AA 3E 25 41 AA 49 3C 02 3A 00 00 66 FF 2D 0D 42  // .>%A.I<.:..f.-.B
    EDE0: 1F 06 56 08 41 03 39 41 01 09 25 41 0C 1B 25 41  // ..V.A.9A..%A..%A
    EDF0: 01 2D 0A 42 41 03 0C 46 00 00 66 07 2D 0C 42 0C  // .-.BA..F..f.-.B.
    EE00: 00 02 01 02 00 02 F1 02 01 52 1C 03 1A 48 46 03  // .........R...HF.
    EE10: 00 40 C7 48 03 8C 40 0C 00 5E 0A 40 00 20 46 3D  // .@.H..@..^.@. F=
    EE20: A5 01 00 44 A5 02 4B E5 01 02 44 A5 02 0F 25 40  // ...D..K...D...%@
    EE30: 02 01 04 C5 48 04 00 01 02 C7 48 40 03 04 41 08  // ....H.....H@..A.
    EE40: 00 5E 25 41 07 07 01 02 C6 48 41 51 0F 07 25 C6  // .^%A.....HAQ..%.
    EE50: 48 FD 51 04 01 24 C6 48 08 00 51 04 0D 25 C4 48  // H.Q..$.H..Q..%.H
    EE60: 02 3A 00 00 03 31 41 00 15 25 41 01 2D 25 41 01  // .:...1A..%A.-%A.
    EE70: 03 22 43 41 03 02 41 44 0D 0A 36 48 41 51 05 03  // ."CA..AD..6HAQ..
    EE80: 1A 48 46 07 25 C4 48 FD 56 08 48 03 31 48 00 0D  // .HF.%.H.V.H.1H..
    EE90: 25 60 01 01 51 01 3A 00 00 54 08 36 48 51 0A 56  // %`..Q.:..T.6HQ.V
    EEA0: 08 48 20 A5 00 02 03 22 48 40 5C A5 05 48 8F 10  // .H ...."H@\..H..
    EEB0: 02 31 02 00 0E 25 02 60 52 14 0D 25 48 4A 01 51  // .1...%.`R..%HJ.Q
    EEC0: 0A 56 08 48 20 A5 00 02 03 22 48 40 0D 25 05 48  // .V.H ...."H@.%.H
    EED0: 01 51 0A 0D E5 06 48 10 3A 00 00 43 42 04 02 31  // .Q....H.:..CB..1
    EEE0: 02 00 0E 25 02 60 52 14 4A 25 48 4A 01 44 42 04  // ...%.`R.J%HJ.DB.
    EEF0: 3C A5 47 4A 02 44 74 03 3C A5 47 4A 03 49 82 03  // <.GJ.Dt.<.GJ.I..
    EF00: 54 00 48 4A 50 02 07 25 47 4A FE 43 A6 03 03 31  // T.HJP..%GJ.C...1
    EF10: 43 00 4A 62 47 4A 44 44 A6 03 54 08 A4 4A 51 C8  // C.JbGJDD..T..JQ.
    EF20: 0D 25 A5 4A 01 51 32 54 20 A0 4A 54 20 B0 4A 43  // .%.J.Q2T .JT .JC
    EF30: A6 03 56 08 48 20 A5 00 02 03 22 48 40 07 E5 06  // ..V.H ...."H@...
    EF40: 48 EF 07 A5 05 48 8F 03 1A 48 46 07 25 CD 48 FB  // H....H...HF.%.H.
    EF50: 54 00 C3 48 54 00 C2 48 02 31 02 00 0E 25 02 60  // T..HT..H.1...%.`
    EF60: 52 14 54 20 48 4A 54 28 47 4A 54 00 79 4A 56 08  // R.T HJT(GJT.yJV.
    EF70: 48 03 31 48 00 07 25 60 01 FE 03 1A 48 46 07 25  // H.1H..%`....HF.%
    EF80: C6 48 07 51 0A 07 25 C6 48 FE 51 0A 07 25 CE 48  // .H.Q..%.H.Q..%.H
    EF90: FE 51 01 07 E5 CE 48 7F 51 01 0D 05 D0 48 01 00  // .Q....H.Q....H..
    EFA0: 01 00 0D 25 D1 48 01 51 0A 0D 25 CE 48 02 0D 25  // ...%.H.Q..%.H..%
    EFB0: C4 48 02 51 28 0D A5 CF 48 02 51 0A 0D 05 D0 48  // .H.Q(...H.Q....H
    EFC0: 00 40 00 40 0D 65 D1 48 40 0D 25 C4 48 01 3A 00  // .@.@.e.H@.%.H.:.
    EFD0: 00 5B 5B 09 65 46 1B 66 FF 2D 0D 42 27 06 56 00  // .[[.eF.f.-.B'.V.
    EFE0: 40 3E 64 46 00 00 44 6E 04 2D 25 40 01 2D 0D 42  // @>dF..Dn.-%@.-.B
    EFF0: 01 00 3E 25 40 0A 45 55 04 5B 56 08 48 03 22 43  // ..>%@.EU.[V.H."C
    F000: 40 03 02 41 44 03 0A 46 41 3D 0D 00 48 3F 44 B7  // @..AD..FA=..H?D.
    F010: 04 15 05 41 0A 3D 0D 00 78 69 44 B7 04 15 05 41  // ...A.=..xiD....A
    F020: 0A 3D 0D 00 F0 D2 44 B7 04 3D 0D 00 90 7E 49 EF  // .=....D..=...~I.
    F030: 05 15 05 41 0A 3E 25 40 02 45 B7 04 1B 0D 46 02  // ...A.>%@.E....F.
    F040: 43 BA 04 56 08 46 56 00 40 3D 65 01 14 49 D3 04  // C..V.FV.@=e..I..
    F050: 66 1E 03 24 40 72 01 15 25 40 01 2D 25 40 0E 66  // f..$@r..%@.-%@.f
    F060: 07 2D 0A 42 40 2D 0C 42 04 00 33 0A 42 40 55 30  // .-.B@-.B..3.B@U0
    F070: 01 03 31 43 00 03 22 40 44 3D A4 01 00 00 49 FD  // ..1C.."@D=....I.
    F080: 04 4C 24 40 01 00 49 05 05 2D 0C 42 02 00 43 ED  // .L$@..I..-.B..C.
    F090: 04 2D 0D 42 04 00 03 04 40 00 00 3E 0D 40 00 00  // .-.B....@..>.@..
    F0A0: 44 EF 05 2D 8A 40 42 4C 04 41 04 00 49 33 05 4C  // D..-.@BL.A..I3.L
    F0B0: 24 46 08 00 49 33 05 2D 0D 42 09 00 43 1B 05 54  // $F..I3.-.B..C..T
    F0C0: 00 00 00 3D E5 00 01 49 D9 05 3E 0D 40 CE 48 49  // ...=...I..>.@.HI
    F0D0: 6A 05 2D 1A 40 46 01 0A 00 00 40 03 04 00 09 00  // j.-.@F....@.....
    F0E0: 09 05 00 FE FF FF 7F 0F 05 00 02 00 00 00 01 02  // ................
    F0F0: 01 00 00 43 E8 05 3E 0D 40 CF 48 49 8F 05 2D 1A  // ...C..>.@.HI..-.
    F100: 40 46 01 0A 00 00 40 03 04 00 09 00 0F 05 00 00  // @F....@.........
    F110: 00 02 00 01 02 01 00 00 43 E8 05 3E 0D 40 D0 48  // ........C..>.@.H
    F120: 49 B4 05 2D 1A 40 46 01 0A 00 00 40 03 04 00 09  // I..-.@F....@....
    F130: 00 0F 05 00 00 40 00 40 01 02 01 00 00 43 E8 05  // .....@.@.....C..
    F140: 3E 0D 40 D1 48 49 D9 05 2D 1A 40 46 01 0A 00 00  // >.@.HI..-.@F....
    F150: 40 03 04 00 09 00 0F 05 00 00 40 00 00 01 02 01  // @.........@.....
    F160: 00 00 43 E8 05 2D 1A 40 46 01 0A 00 00 40 01 04  // ..C..-.@F....@..
    F170: 01 00 09 00 03 1A 42 40 43 0A 05 3D E5 00 01 44  // ......B@C..=...D
    F180: B8 01 5B 66 06 02 8C 02 32 00 02 68 02 CB 05 02  // ..[f....2..h....
    F190: 39 02 00 52 33 5B 7A 26 00 00 01 02 03 01 00 00  // 9..R3[z&........
    F1A0: 01 02 03 01 00 00 01 02 03 01 00 08 05 08 05 04  // ................
    F1B0: 05 20 0A 00 01 02 03 08 09 0A 10 11 18 FF FF 00  // . ..............
    F1C0: 4C 02 01 02 00 08 37 00 00 3D 0D 00 00 00 44 CE  // L.....7..=....D.
    F1D0: 01 56 00 41 03 21 41 01 09 25 41 0F 15 0D 41 02  // .V.A.!A..%A...A.
    F1E0: 03 0A 40 42 66 FF 2D 0D 42 34 02 2D 0A 42 41 03  // ..@Bf.-.B4.-.BA.
    F1F0: 0C 48 02 00 0D A5 68 48 01 54 08 68 48 03 0C 48  // .H....hH.T.hH..H
    F200: 00 00 03 F9 41 01 15 3D 41 04 5C BA 00 5C 8F 41  // ....A..=A.\..\.A
    F210: 03 0A 42 40 4A 25 00 5C 01 49 81 00 0D 0D 00 5C  // ..B@J%.\.I.....\
    F220: 01 01 0D 25 00 5C 10 4A 25 00 5C 20 44 67 00 07  // ...%.\.J%.\ Dg..
    F230: 25 00 5C EF 4A 25 00 5C 20 49 74 00 0D 25 03 5C  // %.\.J%.\ It..%.\
    F240: 40 56 00 41 03 09 41 00 3B 02 41 03 3B 41 00 1B  // @V.A..A.;.A.;A..
    F250: 25 41 04 01 A2 01 5C 41 03 69 41 01 15 2D 41 04  // %A....\A.iA..-A.
    F260: 01 2A 01 5C 41 56 00 40 0F E5 40 80 03 73 40 00  // .*.\AV.@..@..s@.
    F270: 01 02 06 5C 40 56 00 40 03 6B 40 00 01 02 06 5C  // ...\@V.@.k@....\
    F280: 40 03 63 40 00 01 02 06 5C 40 03 7B 40 00 09 65  // @.c@....\@.{@..e
    F290: 40 0F 01 02 06 5C 40 3E 25 41 04 47 10 01 33 25  // @....\@>%A.G..3%
    F2A0: 41 04 2D 05 46 04 00 00 00 03 63 40 00 01 02 06  // A.-.F.....c@....
    F2B0: 5C 40 03 6B 40 00 01 02 06 5C 40 03 73 40 00 01  // \@.k@....\@.s@..
    F2C0: 02 06 5C 40 03 7B 40 00 01 02 06 5C 40 43 D7 00  // ..\@.{@....\@C..
    F2D0: 0D 25 03 5C 02 0D 25 01 5C 01 03 29 40 01 21 25  // .%.\..%.\..)@.!%
    F2E0: 40 0A 2D 25 40 32 4A 25 04 5C 01 49 42 01 51 0A  // @.-%@2J%.\.IB.Q.
    F2F0: 33 25 40 01 3E 25 40 00 49 26 01 02 65 01 01 43  // 3%@.>%@.I&..e..C
    F300: CA 01 4A 05 04 5C F0 8F FF 00 44 54 01 02 65 01  // ..J..\....DT..e.
    F310: 02 43 CA 01 01 05 06 5C 01 00 00 80 03 00 40 06  // .C.....\......@.
    F320: 5C 02 6A 01 40 02 B8 01 04 5C 08 A5 01 1F 3D A5  // \.j.@....\....=.
    F330: 01 00 46 7C 01 02 65 01 03 43 CA 01 32 A5 01 01  // ..F|..e..C..2...
    F340: 3D 8D 00 00 00 44 CA 01 3D A5 01 00 44 CA 01 03  // =....D..=...D...
    F350: 31 41 01 03 19 40 00 56 18 40 3B 02 40 03 28 40  // 1A...@.V.@;.@.(@
    F360: 06 5C 03 68 40 06 5C 03 A8 40 06 5C 03 E8 40 06  // .\.h@.\..@.\..@.
    F370: 5C 04 02 00 40 3E 25 41 04 47 CA 01 33 25 41 04  // \...@>%A.G..3%A.
    F380: 2D 05 46 04 00 00 00 43 9D 01 3A 00 00 5B 66 FF  // -.F....C..:..[f.
    F390: 2D 0D 42 34 02 03 0C 48 00 00 01 8D 08 5C 18 00  // -.B4...H.....\..
    F3A0: 01 05 09 5C 00 1C 02 00 01 05 0A 5C 10 12 3D 12  // ...\.......\..=.
    F3B0: 2D 0D 42 04 00 2C 25 00 01 3D 25 00 03 49 D5 01  // -.B..,%..=%..I..
    F3C0: 56 08 48 03 25 41 10 0D 65 97 48 40 07 65 97 48  // V.H.%A..e.H@.e.H
    F3D0: BF 33 25 41 01 3E 25 41 00 49 07 02 0D 25 3B 48  // .3%A.>%A.I...%;H
    F3E0: 01 54 30 3B 48 0D 25 3C 48 01 54 30 3C 48 51 32  // .T0;H.%<H.T0<HQ2
    F3F0: 5B 7A 18 00 00 00 00 00 1C 00 04 00 38 00 08 00  // [z..........8...
    F400: 54 00 0C 00 70 00 10 00 8C 00 14 00 5C 00 01 02  // T...p.......\...
    F410: 00 04 02 25 01 04 03 31 41 00 09 0D 41 0F 00 15  // ...%...1A...A...
    F420: 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A 42 41 03 0C  // .A.f.-.BP.-.BA..
    F430: 48 00 00 07 A5 68 48 FE 01 0D 68 48 11 11 50 02  // H....hH...hH..P.
    F440: 4A 0D 6B 48 01 00 49 41 00 02 25 01 13 54 08 68  // J.kH..IA..%..T.h
    F450: 48 54 00 6A 48 3A 00 00 5B 7A 0C 00 00 00 04 00  // HT.jH:..[z......
    F460: 08 00 0C 00 10 00 14 00 38 00 01 01 00 00 03 0C  // ........8.......
    F470: 41 00 00 2D 0D 42 02 00 03 31 43 00 03 A2 41 44  // A..-.B...1C...AD
    F480: 3D E4 00 02 00 49 30 00 4C A4 41 03 00 44 30 00  // =....I0.L.A..D0.
    F490: 3D 0C 00 00 00 47 37 00 2D 0A 42 41 43 18 00 5B  // =....G7.-.BAC..[
    F4A0: D1 01 02 01 04 04 37 00 00 42 21 00 63 07 29 00  // ......7..B!.c.).
    F4B0: 63 03 66 00 63 02 D5 00 63 04 FA 00 63 0C 85 01  // c.f.c...c...c...
    F4C0: 63 0D A8 01 5A 5A 43 D0 01 01 0D 1D 48 9F 0F 01  // c...ZZC.....H...
    F4D0: 05 1E 48 00 00 00 00 01 05 1F 48 7D 00 00 00 66  // ..H.......H}...f
    F4E0: 06 01 4C 1F 48 39 00 03 24 46 42 00 3E 25 46 00  // ..L.H9..$FB.>%F.
    F4F0: 44 58 00 01 25 1F 48 00 4A 25 1B 48 10 49 D0 01  // DX..%.H.J%.H.I..
    F500: 0D E5 1B 48 02 5B 4A A5 CB 05 01 49 D0 01 4A 25  // ...H.[J....I..J%
    F510: 1B 48 01 44 D0 01 4A 25 1C 48 10 44 76 00 4A E5  // .H.D..J%.H.Dv.J.
    F520: 1B 48 02 49 91 00 4A 25 1C 48 08 49 D0 01 43 C5  // .H.I..J%.H.I..C.
    F530: 00 4A E5 1B 48 01 49 D0 01 4A 25 1B 48 10 44 C5  // .J..H.I..J%.H.D.
    F540: 00 0D A5 1B 48 03 0D 65 1B 48 03 01 0D 1D 48 00  // ....H..e.H....H.
    F550: 00 5C 25 1B 48 EF 01 4A 25 1C 48 10 44 B7 00 01  // .\%.H..J%.H.D...
    F560: 0D 1D 48 9F 0F 07 E5 1B 48 FC 0D E5 1F 48 01 0D  // ..H.....H....H..
    F570: 25 1B 48 11 5B 66 06 03 24 46 42 00 3E 25 46 00  // %.H.[f..$FB.>%F.
    F580: 49 D0 01 4A 25 1B 48 01 44 D0 01 4A 25 1C 48 10  // I..J%.H.D..J%.H.
    F590: 44 EB 00 5C E5 1B 48 FE 02 5B 4A 65 D0 05 02 44  // D..\..H..[Je...D
    F5A0: 07 01 0D 25 23 48 01 3D 8D 00 00 00 44 84 01 03  // ...%#H.=....D...
    F5B0: 05 46 00 36 6E 01 56 00 41 03 19 41 00 21 05 41  // .F.6n.V.A..A.!.A
    F5C0: FF 0F 00 00 27 02 46 40 3E 05 41 00 00 00 00 44  // ....'.F@>.A....D
    F5D0: 37 01 2D 0D 40 01 00 01 8A 1D 48 40 56 00 41 03  // 7.-.@.....H@V.A.
    F5E0: 19 41 00 21 02 40 41 27 02 46 40 01 A5 22 48 0C  // .A.!.@A'.F@.."H.
    F5F0: 01 0A 22 48 40 15 05 40 04 56 00 41 03 29 41 00  // .."H@..@.V.A.)A.
    F600: 2D 0D 41 01 00 21 02 40 41 1B 05 40 08 01 0A 20  // -.A..!.@A..@... 
    F610: 48 40 0D E5 20 48 C0 07 25 23 48 FE 4A 65 23 48  // H@.. H..%#H.Je#H
    F620: 01 49 7C 01 5B 4A 25 1B 48 01 44 9D 01 4A 25 1B  // .I|.[J%.H.D..J%.
    F630: 48 10 49 D0 01 4A 25 1C 48 10 44 95 01 07 E5 1F  // H.I..J%.H.D.....
    F640: 48 FE 0D 25 1B 48 11 5B 4A 25 1B 48 01 44 D0 01  // H..%.H.[J%.H.D..
    F650: 4A 25 1B 48 10 44 D0 01 4A 25 1C 48 10 44 B8 01  // J%.H.D..J%.H.D..
    F660: 07 A5 1B 48 FC 07 65 1B 48 FC 5C 25 1B 48 EF 01  // ...H..e.H.\%.H..
    F670: 5B 00 07 00 03 01 08 00 5B 00 DA 00 03 01 00 10  // [.......[.......
    F680: 37 00 00 56 00 40 4A 25 00 EC 01 44 31 00 4A 20  // 7..V.@J%...D1.J 
    F690: 05 EC 1E 00 49 31 00 03 25 40 01 01 05 05 EC 03  // ....I1..%@......
    F6A0: 00 00 00 4A 65 05 EC 0F 49 29 00 3D 65 02 00 49  // ...Je...I).=e..I
    F6B0: 3D 00 2C 28 02 09 08 3D E5 02 00 49 49 00 2C A8  // =.,(...=...II.,.
    F6C0: 02 09 08 3D E5 02 03 49 5F 00 01 01 82 01 01 02  // ...=...I_.......
    F6D0: 05 01 0C 06 00 00 43 77 00 3D E5 02 04 49 77 00  // ......Cw.=...Iw.
    F6E0: 01 01 42 FB 01 02 05 01 0C ED 03 00 07 25 00 EC  // ..B..........%..
    F6F0: FE 54 00 63 C0 01 01 64 C0 00 01 21 65 C0 02 01  // .T.c...d...!e...
    F700: 01 66 C0 01 01 31 67 C0 02 01 01 E8 C0 03 3D 65  // .f...1g.......=e
    F710: 02 01 44 A4 00 3D E5 02 01 44 A4 00 51 02 4A E5  // ..D..=...D..Q.J.
    F720: A0 21 80 49 A4 00 3D E5 02 04 49 C2 00 0D 25 00  // .!.I..=...I...%.
    F730: EC 01 0D 25 45 EC 03 0D 25 46 FB 01 3E 25 40 01  // ...%E...%F..>%@.
    F740: 49 D9 00 01 05 05 EC 01 00 00 00 4A 65 05 EC 0F  // I..........Je...
    F750: 49 D1 00 5B 32 05 01 01 04 00 37 00 00 56 00 00  // I..[2.....7..V..
    F760: 66 1E 2D 0D 42 88 01 56 00 40 21 25 00 10 2D 0A  // f.-.B..V.@!%..-.
    F770: 42 40 03 24 41 0C 00 4C 25 41 7C 44 B2 00 02 25  // B@.$A..L%A|D...%
    F780: 00 64 02 0D 01 01 01 02 E4 01 06 00 0E E5 01 90  // .d..............
    F790: 66 1E 03 24 41 38 00 4C 25 41 20 49 5C 00 02 A4  // f..$A8.L%A I\...
    F7A0: 01 88 00 03 64 00 89 00 2D 0D 42 8A 00 43 98 00  // ....d...-.B..C..
    F7B0: 3E 0D 00 00 00 44 77 00 3E 0D 00 01 00 44 89 00  // >....Dw.>....D..
    F7C0: 3E 0D 00 02 00 44 4A 00 43 B2 00 02 A4 01 5C 00  // >....DJ.C.....\.
    F7D0: 03 64 00 5D 00 2D 0D 42 5E 00 43 98 00 02 A4 01  // .d.].-.B^.C.....
    F7E0: 70 00 03 64 00 71 00 2D 0D 42 72 00 3E 65 00 00  // p..d.q.-.Br.>e..
    F7F0: 44 B2 00 33 65 00 01 02 4C 00 00 00 52 36 2D 0D  // D..3e...L...R6-.
    F800: 42 02 00 43 98 00 2D 25 00 01 3E 25 00 03 45 0C  // B..C..-%..>%..E.
    F810: 00 4A A5 C9 05 04 44 AE 04 66 06 03 24 00 42 00  // .J....D..f..$.B.
    F820: 3E 25 00 02 45 AE 04 02 0D 00 00 FF 03 0D 40 14  // >%..E.........@.
    F830: 31 66 16 2D 0C 42 06 00 03 24 41 00 00 3E 25 41  // 1f.-.B...$A..>%A
    F840: 00 44 68 01 3E 0C 40 04 00 44 04 01 2D 0D 42 08  // .Dh.>.@..D..-.B.
    F850: 00 33 25 41 01 43 E9 00 03 0C 40 06 00 03 0C 41  // .3%A.C....@....A
    F860: 08 00 66 16 2D 0A 40 42 3E 0D 41 00 00 44 57 01  // ..f.-.@B>.A..DW.
    F870: 2D 0A 42 41 56 00 41 03 24 41 00 00 03 A4 41 01  // -.BAV.A.$A....A.
    F880: 00 3E 25 41 FF 44 57 01 3E 25 41 01 49 40 01 02  // .>%A.DW.>%A.I@..
    F890: 24 00 02 00 3E 25 41 02 49 50 01 02 64 00 02 00  // $...>%A.IP..d...
    F8A0: 32 65 00 01 2D 1A 42 41 43 23 01 03 0A 42 40 03  // 2e..-.BAC#...B@.
    F8B0: 0C 41 01 00 3E 0D 41 00 00 49 6C 01 56 08 42 5B  // .A..>.A..Il.V.B[
    F8C0: 42 22 00 63 02 76 01 5A 5A 5B 3B 05 00 4C 00 00  // B".c.v.ZZ[;..L..
    F8D0: 03 01 00 00 04 05 00 09 05 90 40 55 00 01 02 21  // ..........@U...!
    F8E0: 01 00 02 E9 01 00 02 05 00 00 4C 04 4C 52 4E 3D  // ..........L.LRN=
    F8F0: 65 01 00 44 B0 01 51 90 2C E5 00 01 3D E5 00 10  // e..D..Q.,...=...
    F900: 45 92 01 5B 02 02 00 00 03 E5 40 01 3B 05 04 4C  // E..[......@.;..L
    F910: 00 00 3F 25 00 04 44 C9 01 03 E5 40 02 66 FF 2D  // ..?%..D....@.f.-
    F920: 0D 42 F2 04 03 05 41 80 4C 00 00 3B 02 41 04 04  // .B....A.L..;.A..
    F930: 00 00 00 2D 0D 42 04 00 2D 05 41 04 00 00 00 3F  // ...-.B..-.A....?
    F940: 05 00 FF FF FF FF 49 D7 01 66 06 03 24 41 34 00  // ......I..f..$A4.
    F950: 15 25 41 02 3B 05 80 4C 00 00 04 62 00 41 56 00  // .%A.;..L...b.AV.
    F960: 41 03 24 41 35 00 3B 05 84 4C 00 00 04 62 00 41  // A.$A5.;..L...b.A
    F970: 56 00 41 03 24 41 39 00 15 0D 41 02 3B 05 88 4C  // V.A.$A9...A.;..L
    F980: 00 00 04 62 00 41 56 00 41 03 24 41 3A 00 15 0D  // ...b.AV.A.$A:...
    F990: 41 02 3B 05 8C 4C 00 00 04 62 00 41 56 00 41 03  // A.;..L...b.AV.A.
    F9A0: 24 41 36 00 3B 05 90 4C 00 00 04 62 00 41 03 24  // $A6.;..L...b.A.$
    F9B0: 41 37 00 15 25 41 02 3B 05 94 4C 00 00 04 62 00  // A7..%A.;..L...b.
    F9C0: 41 56 00 41 03 24 41 38 00 3B 05 98 4C 00 00 04  // AV.A.$A8.;..L...
    F9D0: 62 00 41 56 00 41 3E E5 40 01 49 8D 02 0F 25 41  // b.AV.A>.@.I...%A
    F9E0: 08 66 06 03 E4 41 28 00 4C E5 41 01 44 9F 02 0F  // .f...A(.L.A.D...
    F9F0: 25 41 80 4C E5 41 02 49 AA 02 0F 25 41 04 4C E5  // %A.L.A.I...%A.L.
    FA00: 41 20 44 B5 02 0F 25 41 01 3B 05 A4 4C 00 00 04  // A D...%A.;..L...
    FA10: 62 00 41 02 05 01 06 00 00 00 56 00 41 66 1A 03  // b.A.......V.Af..
    FA20: 0C 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3D 24 01  // .A..-.AB-.B..=$.
    FA30: 08 00 44 F4 02 2D 0D 42 0C 00 3E 0A 42 41 49 D9  // ..D..-.B..>.BAI.
    FA40: 02 03 25 41 00 43 3E 04 03 8C 41 04 00 3E 8D 41  // ..%A.C>...A..>.A
    FA50: 00 00 44 ED 02 3E E5 40 01 49 7B 03 03 25 41 00  // ..D..>.@.I{..%A.
    FA60: 3E 8D 41 17 00 45 E8 03 03 25 41 01 3E 8D 41 47  // >.A..E...%A.>.AG
    FA70: 00 45 E8 03 03 25 41 02 3E 8D 41 7C 00 45 E8 03  // .E...%A.>.A|.E..
    FA80: 03 25 41 03 3E 8D 41 AC 00 45 E8 03 03 25 41 04  // .%A.>.A..E...%A.
    FA90: 3E 8D 41 D3 00 45 E8 03 03 25 41 05 3E 8D 41 10  // >.A..E...%A.>.A.
    FAA0: 01 45 E8 03 03 25 41 06 3E 8D 41 4B 01 45 E8 03  // .E...%A.>.AK.E..
    FAB0: 03 25 41 07 3E 8D 41 71 01 45 E8 03 03 25 41 08  // .%A.>.Aq.E...%A.
    FAC0: 3E 8D 41 AC 01 45 E8 03 03 25 41 09 43 E8 03 03  // >.A..E...%A.C...
    FAD0: 02 00 42 66 06 55 00 01 02 0C 01 04 00 66 FF 2D  // ..Bf.U.......f.-
    FAE0: 0D 42 B2 04 3D 04 01 00 00 45 A0 03 2D 0D 42 08  // .B..=....E..-.B.
    FAF0: 00 43 90 03 03 24 41 04 00 3E 8D 41 28 00 45 DF  // .C...$A..>.A(.E.
    FB00: 03 3E 8D 41 3C 00 45 E2 03 03 24 41 05 00 3E 8D  // .>.A<.E...$A..>.
    FB10: 41 50 00 45 DF 03 3E 8D 41 78 00 45 E2 03 03 24  // AP.E..>.Ax.E...$
    FB20: 41 06 00 3E 8D 41 78 00 45 DF 03 3E 8D 41 B4 00  // A..>.Ax.E..>.A..
    FB30: 45 E2 03 43 ED 02 66 1A 03 02 42 00 3B 05 A0 4C  // E..C..f...B.;..L
    FB40: 00 00 04 62 00 41 03 8C 41 06 00 03 25 41 00 3E  // ...b.A..A...%A.>
    FB50: 8D 41 AB 09 45 1F 04 03 25 41 20 3E 8D 41 36 10  // .A..E...%A >.A6.
    FB60: 45 1F 04 03 25 41 40 3E 8D 41 A8 16 45 1F 04 03  // E...%A@>.A..E...
    FB70: 25 41 60 0F 25 41 80 03 A4 41 09 00 4C A5 41 01  // %A`.%A...A..L.A.
    FB80: 49 3E 04 0F 25 41 10 3E E5 40 01 44 3E 04 09 25  // I>..%A.>.@.D>..%
    FB90: 41 7F 3B 05 9C 4C 00 00 04 62 00 41 03 05 00 80  // A.;..L...b.A....
    FBA0: 4C 00 00 02 21 01 00 02 E9 01 00 56 00 41 03 0A  // L...!......V.A..
    FBB0: 41 00 3B 02 41 03 03 41 00 3E 05 41 FF FF FF FF  // A.;.A..A.>.A....
    FBC0: 44 AE 04 3B 05 00 4C 00 00 04 05 01 F0 03 80 61  // D..;..L........a
    FBD0: 04 02 02 41 02 05 00 04 4C 00 00 55 10 01 52 4E  // ...A....L..U..RN
    FBE0: 3D 65 01 00 44 A3 04 51 C8 51 C8 2D A5 00 01 3E  // =e..D..Q.Q.-...>
    FBF0: A5 00 07 45 57 04 5B 2D 0D 00 04 00 56 18 00 43  // ...EW.[-....V..C
    FC00: 57 04 5B 7A 80 00 AC 0D 00 00 0D 1A 27 00 94 11  // W.[z........'...
    FC10: 00 00 08 10 18 00 7C 15 00 00 0A 14 1E 00 58 1B  // ......|.......X.
    FC20: 00 00 0D 1A 27 00 28 23 00 00 08 10 18 00 F8 2A  // ....'.(#.......*
    FC30: 00 00 0A 14 1E 00 4C 36 00 00 0D 1A 27 00 50 46  // ......L6....'.PF
    FC40: 00 00 08 10 18 00 01 1E 00 00 02 5A 00 00 03 00  // ...........Z....
    FC50: 00 00 04 00 00 00 05 5A 00 00 06 1E 00 00 07 7D  // .......Z.......}
    FC60: 00 00 08 20 00 00 09 01 00 00 0A 0C 00 00 0B 00  // ... ............
    FC70: 00 00 0C 06 00 00 0E 38 00 00 10 00 00 00 0D 01  // .......8........
    FC80: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FC90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FCF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FD90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FDF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    FE60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    FE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    FE80: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 88
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000004
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 88 41 4C 41 53 4B 41  // WSMT(.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 04 00 00 00                          // ........


