
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20191213
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00009990  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000B58  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 05)  PCCT  0x0000006E  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000000
 06)  SSDT  0x00008C98  0x02  "ALASKA"  "A M I   "  0x00000002  "MSFT"   0x04000000
 07)  VFCT  0x0000F084  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  CDIT  0x00000029  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 09)  UEFI  0x00000042  0x01  "ALASKA"  "A M I   "  0x00000002  "    "   0x01000013
 10)  IVRS  0x000000D0  0x02  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000000
 11)  DSDT  0x00006E2F  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20160930
 12)  SSDT  0x00001EC3  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  SSDT  0x00000024  0x01  "ALASKA"  "A M I   "  0x00001000  "INTL"   0x20160930
 15)  SSDT  0x0000374D  0x01  "ALASKA"  "A M I   "  0x00000001  "INTL"   0x20160930
 16)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 18)  SSDT  0x000000C8  0x02  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01072009
 19)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 20)  SSDT  0x00002F29  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x00000001
 21)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 22)  FACS  0x00000040  0x02

Found 22 ACPI tables in /root/snap/hw-probe/common/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 35
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 08
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 0A
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0C
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 01
[05Fh 0095   1]                Local Apic ID : 01
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 03
[067h 0103   1]                Local Apic ID : 03
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 05
[06Fh 0111   1]                Local Apic ID : 05
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 07
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 09
[07Fh 0127   1]                Local Apic ID : 0B
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0D
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 0D
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 0E
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 35 41 4C 41 53 4B 41  // APIC^....5ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 08 01 00 00 00 00 08 08 0A  // ................
    0050: 01 00 00 00 00 08 0A 0C 01 00 00 00 00 08 01 01  // ................
    0060: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0070: 01 00 00 00 00 08 07 09 01 00 00 00 00 08 09 0B  // ................
    0080: 01 00 00 00 00 08 0B 0D 01 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 0D 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 0E 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 EF 41 4C 41 53 4B 41  // CDIT).....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000B58
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 26
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2904 (0xB58)

    0000: 43 52 41 54 58 0B 00 00 01 26 41 4C 41 53 4B 41  // CRATX....&ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 01 00 00 00 2D 00 00 00 01 00 00 00 00 00 00 00  // ....-...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 0C 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0060: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0090: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    00D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    00E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 08 00 02 01 40 00 08 02 01 00  // ..........@.....
    0110: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0120: 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00  // ....?...........
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 01 03 01 40 00 10 00 01 00  // ..........@.....
    0150: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0160: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0190: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    01D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    01E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 00 08 00 02 01 40 00 08 02 01 00  // ..........@.....
    0210: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0220: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0250: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0260: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0290: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 00 08 00 02 01 40 00 08 02 01 00  // ..........@.....
    02D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    02E0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0310: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0320: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0350: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0360: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 00 08 00 02 01 40 00 08 02 01 00  // ..........@.....
    0390: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03A0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 00 00 01 03 01 40 00 10 00 01 00  // ..........@.....
    03D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03E0: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0410: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0420: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0450: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0460: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 00 08 00 02 01 40 00 08 02 01 00  // ..........@.....
    0490: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04A0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    04D0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04E0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 80 00 00 01 01 40 00 08 00 01 00  // ..........@.....
    0510: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0520: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 00 08 00 02 01 40 00 08 02 01 00  // ..........@.....
    0550: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0560: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0590: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    05A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    05D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    05E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0610: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0620: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0650: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0660: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0690: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    06A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    06D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    06E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0710: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0720: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0750: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0760: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0790: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    07A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    07D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07E0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0810: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0820: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0850: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0860: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0890: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    08A0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    08D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08E0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0910: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0920: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0950: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0960: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0990: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    09A0: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    09D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09E0: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0A10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0A20: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0A50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A60: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0AA0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0AD0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AE0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0B10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0B20: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0B50: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I", 0x01072009)
{
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (GSA1.MPTS, MethodObj)    // 1 Arguments
    External (GSA1.MWAK, MethodObj)    // 1 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Name (IO1B, 0x0A00)
    Name (IO1L, 0x30)
    Name (IO2B, 0x0A30)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A40)
    Name (IO3L, 0x10)
    Name (H2MB, 0x0A60)
    Name (H2ML, 0x10)
    Name (SP1O, 0x2E)
    Name (MSFG, Zero)
    Name (IOES, Zero)
    Name (HMIO, 0x0A65)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xDBFCCD18)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC03000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        Notify (\_SB.PWRB, 0x02) // Device Wake
        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x20
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PD30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2C
            }
        })
        Name (PD00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD22, Package (0x00){})
        Name (AR22, Package (0x00){})
        Name (PD23, Package (0x00){})
        Name (AR23, Package (0x00){})
        Name (PD24, Package (0x00){})
        Name (AR24, Package (0x00){})
        Name (PD25, Package (0x00){})
        Name (AR25, Package (0x00){})
        Name (PD26, Package (0x00){})
        Name (AR26, Package (0x00){})
        Name (PD27, Package (0x00){})
        Name (AR27, Package (0x00){})
        Name (PD28, Package (0x00){})
        Name (AR28, Package (0x00){})
        Name (PD29, Package (0x00){})
        Name (AR29, Package (0x00){})
        Name (PD2A, Package (0x00){})
        Name (AR2A, Package (0x00){})
        Name (PD2B, Package (0x00){})
        Name (AR2B, Package (0x00){})
        Name (PD2C, Package (0x00){})
        Name (AR2C, Package (0x00){})
        Name (PD20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD21, Package (0x00){})
        Name (AR21, Package (0x00){})
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x20000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14600000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D002)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (D022)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00050002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }

                Device (D025)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD000000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP13.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP13.APSP.CRS_ */
                    }
                }
            }

            Device (GP30)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR30) /* \_SB_.AR30 */
                    }

                    Return (PD30) /* \_SB_.PD30 */
                }

                Device (SAT0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP31)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR31) /* \_SB_.AR31 */
                    }

                    Return (PD31) /* \_SB_.PD31 */
                }

                Device (SAT1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (D02D)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IRQNoFlags (_Y1B)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1C)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1B._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            LDN = 0x06
                            ACTR = Zero
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        LDN = 0x06
                        ACTR = One
                        LDN = 0x05
                        ACTR = One
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)){}
                        If ((PMFG & 0x10)){}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (BXBR)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PD20) /* \_SB_.PD20 */
                }

                Device (BYUP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (BYD0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (BYS0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD1)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (BYS1)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD2)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (BYS2)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD3)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (BYS3)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD4)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (BYS4)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD5)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Device (BYS5)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD6)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Device (BYS6)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD7)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Device (BYS7)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD8)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Device (XHC1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "UNKNOWN",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "UNKNOWN",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x08)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "RIGHT",
                                            PLD_Shape              = "VERTICALRECTANGLE",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x09, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "BACK",
                                            PLD_VerticalPosition   = "CENTER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "OVAL",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x2,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }

                        Device (XHC0)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x0,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "UNKNOWN",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x1,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x0,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x2,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x3,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x4,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x5,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                    {
                                        ToPLD (
                                            PLD_Revision           = 0x2,
                                            PLD_IgnoreColor        = 0x1,
                                            PLD_Red                = 0x0,
                                            PLD_Green              = 0x0,
                                            PLD_Blue               = 0x0,
                                            PLD_Width              = 0x0,
                                            PLD_Height             = 0x0,
                                            PLD_UserVisible        = 0x1,
                                            PLD_Dock               = 0x0,
                                            PLD_Lid                = 0x0,
                                            PLD_Panel              = "FRONT",
                                            PLD_VerticalPosition   = "UPPER",
                                            PLD_HorizontalPosition = "LEFT",
                                            PLD_Shape              = "HORIZONTALTRAPEZOID",
                                            PLD_GroupOrientation   = 0x0,
                                            PLD_GroupToken         = 0x1,
                                            PLD_GroupPosition      = 0x6,
                                            PLD_Bay                = 0x0,
                                            PLD_Ejectable          = 0x1,
                                            PLD_EjectRequired      = 0x0,
                                            PLD_CabinetNumber      = 0x0,
                                            PLD_CardCageNumber     = 0x0,
                                            PLD_Reference          = 0x0,
                                            PLD_Rotation           = 0x0,
                                            PLD_Order              = 0x0,
                                            PLD_VerticalOffset     = 0xFFFF,
                                            PLD_HorizontalOffset   = 0xFFFF)

                                    })
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP10, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            Notify (\_SB.PCI0.BXBR, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP30, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP31, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.MPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        MWAK (Arg0)
        \_SB.MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (IC0I, 0x04)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x0A)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    Name (IC5I, 0x0F)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   4, 
            LPCE,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {14}
                    Memory32Fixed (ReadWrite,
                        0xFEDC6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC4I & 0x0F))
                Return (BUF0) /* \_SB_.I2CE._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDCB000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC5I & 0x0F))
                Return (BUF0) /* \_SB_.I2CF._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y22)
                    IRQNoFlags (_Y23)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y22._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y22._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y23._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y24)
                    IRQNoFlags (_Y25)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y24._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y24._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y25._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2A)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2B)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2C)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2D)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y2E,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2A._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2A._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2B._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2C._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2C._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y2D._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y2D._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y2E._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y2E._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y2E._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    INTV = 0x07
                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "375016749376Genuine NVIDIA Certified SLI Ready Motherboard for GIGABYTE X570APRO   EA5A-Copyright 2019 NVIDIA Corporation All Rights Reserved-274100472652(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x41494C53))
                {
                    Return (SLIC) /* \_SB_.PCI0.SLIC */
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Method (MPTS, 1, NotSerialized)
        {
            \GSA1.MPTS (Arg0)
        }

        Method (MWAK, 1, NotSerialized)
        {
            \GSA1.MWAK (Arg0)
        }
    }

    Scope (_SB.PCI0.GP13.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : A6
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DBFCCE00
[028h 0040   4]                 DSDT Address : DBF60200
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 00
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000DBF60200
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 A6 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 00 CE FC DB 00 02 F6 DB 00 01 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 00 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 02 F6 DB  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : C3E075EC
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 EC 75 E0 C3 00 00 00 00  // FACS@....u......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 26
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 26 41 4C 41 53 4B 41  // FIDT.....&ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 38 41 4D 54 53  // ....$FID.x.8AMTS
    0030: 30 30 34 00 EA 53 FB 3C C1 A4 4E 64 48 14 47 6A  // 004..S.<..NdH.Gj
    0040: AE AD CF 06 30 35 00 31 34 00 45 31 00 34 30 00  // ....05.14.E1.40.
    0050: E3 07 0C 06 11 2F 38 FF FF 41 4C 41 53 4B 41 41  // ...../8..ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000DCB0B3B0

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000DCB0B3D0

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 6C 41 4C 41 53 4B 41  // FPDTD....lALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 B0 B3 B0 DC  // ................
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 D0 B3 B0 DC  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 96
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]                     Reserved : 80048F6F

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 0D
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 0E
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Unknown Subtable Type]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

**** Unknown IVRS subtable type 0x11

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 96 41 4C 41 53 4B 41  // IVRS......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 0D A0 00 01  // H.......H.......
    0070: 48 00 00 00 0E 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DE 4A 29 22 EF 77 8F 05 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 0D A0 00 01 48 00 00 00 0E 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


PCCT
----
[000h 0000   4]                    Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C9
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]        Flags (decoded below) : 00000000
                                    Platform : 0
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Generic Communications Subspace]
[031h 0049   1]                       Length : 3E

[032h 0050   6]                     Reserved : 000000000000
[038h 0056   8]                 Base Address : 00000000DC3F0000
[040h 0064   8]               Address Length : 0000000000010000

[048h 0072  12]            Doorbell Register : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 04 [QWord Access:64]
[04Ch 0076   8]                      Address : 00000000FD110540

[054h 0084   8]                Preserve Mask : FFFFFFFF00000000
[05Ch 0092   8]                   Write Mask : 0000000000000001
[064h 0100   4]              Command Latency : 00000FA0
[068h 0104   4]          Maximum Access Rate : 0000EA60
[06Ch 0108   2]      Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 01 C9 41 4C 41 53 4B 41  // PCCTn.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 20  // A M I.......AMD 
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 3F DC 00 00 00 00  // .>........?.....
    0040: 00 00 01 00 00 00 00 00 00 40 00 04 40 05 11 FD  // .........@..@...
    0050: 00 00 00 00 00 00 00 00 FF FF FF FF 01 00 00 00  // ................
    0060: 00 00 00 00 A0 0F 00 00 60 EA 00 00 00 00        // ........`.....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (GSA1.M009, MethodObj)    // 1 Arguments
    External (GSA1.M010, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)

    Scope (\)
    {
        Device (GSA1)
        {
            Method (GIO2, 0, Serialized)
            {
            }

            Method (GIO0, 1, Serialized)
            {
                Return (M009 (Arg0))
            }

            Method (GIO1, 2, Serialized)
            {
                M010 (Arg0, Arg1)
            }

            Method (PIOD, 1, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, 0x80, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }

            Method (PIO0, 3, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.PIO0.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Method (PIO1, 4, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.PIO1.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                VARR = Local4
            }

            Method (PIO6, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.PIO6.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.PIO6.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.PIO6.VARR */
                    }

                }

                Return (Zero)
            }

            Method (PIO7, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Method (PFM8, 4, Serialized)
            {
                Local1 = Arg0
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                Return (Local4)
            }

            Method (PFM9, 3, Serialized)
            {
                Local1 = Arg0
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Name (GGGD, "AM4: X470/X570")
            Method (PFM0, 0, Serialized)
            {
            }

            Method (PFM1, 1, Serialized)
            {
                PFM0 ()
            }

            Method (PFM2, 1, Serialized)
            {
            }

            Name (PFMH, Package (0x04)
            {
                Buffer (0x03)
                {
                     0x02, 0xA0, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA2, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA4, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA6, 0x00                                 // ...
                }
            })
            Method (PFM7, 0, Serialized)
            {
                Return (RefOf (PFMH))
            }

            Mutex (MEMB, 0x00)
            Method (MEM8, 0, Serialized)
            {
            }

            Method (MEM9, 1, Serialized)
            {
                MEM8 ()
            }

            Method (MEMA, 1, Serialized)
            {
            }

            Method (MEM0, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.MEM0.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = ((Local1 >> Arg1) & (Local5 >> (0x20 - Arg2)
                    ))
                Return (Local2)
            }

            Method (MEM1, 4, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Local1 = VARR /* \GSA1.MEM1.VARR */
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local2 = (Arg1 + Arg2)
                Local2 = (0x20 - Local2)
                Local2 = (((Local5 << Local2) & Local5) >> Local2)
                Local2 = ((Local2 >> Arg1) << Arg1)
                Local3 = (Arg3 << Arg1)
                Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
                VARR = Local4
            }

            Method (MEM4, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.MEM4.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.MEM4.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.MEM4.VARR */
                    }

                }

                Return (Zero)
            }

            Method (MEM5, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemMemory, Local0, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Method (PCI0, 0, Serialized)
            {
            }

            Method (PCI1, 1, Serialized)
            {
                PCI0 ()
            }

            Method (PCI2, 1, Serialized)
            {
            }

            Method (PCI4, 0, Serialized)
            {
                Return (PCIB) /* \GSA1.PCIB */
            }

            Name (PCIB, 0xF8000000)
            Method (PCI9, 5, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                Return (MEM4 (Local0, Arg4))
            }

            Method (PCIA, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                MEM5 (Local0, Arg4, Arg5)
            }

            Method (PCIE, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, Zero))
            }

            Method (PCIF, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, Zero, Arg4)
            }

            Method (PCIG, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, One))
            }

            Method (PCIH, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, One, Arg4)
            }

            Method (PCI7, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x02))
            }

            Method (PCI8, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x02, Arg4)
            }

            Method (PCI5, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Return (MEM0 ((Local0 + Arg3), Arg4, Arg5))
            }

            Method (PCI6, 7, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                If ((MEM0 (Local0, Zero, 0x20) != Ones))
                {
                    MEM1 ((Local0 + Arg3), Arg4, Arg5, Arg6)
                }
            }

            Method (PCIC, 4, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                Local0 = VAR2 /* \GSA1.PCIC.VAR2 */
                Return (Local0)
            }

            Method (PCID, 5, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                VAR2 = Arg4
            }

            Method (SMBB, 0, Serialized)
            {
                Return (0x0B00)
            }

            Method (SMB8, 0, Serialized)
            {
            }

            Mutex (SMMB, 0x00)
            OperationRegion (SMBI, SystemIO, 0x0B00, 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCNT,   8, 
                HCMD,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8
            }

            Method (SMBG, 1, Serialized)
            {
                SMB8 ()
            }

            Method (SMBH, 1, Serialized)
            {
            }

            Method (KILL, 0, Serialized)
            {
                HCNT |= 0x02
                HSTS |= 0xFF
            }

            Method (CMPL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SRDY, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            HSTS = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMB0, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB1, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB2, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = Arg2
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB3, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB4, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = (Arg2 & 0xFF)
                DAT1 = ((Arg2 >> 0x08) & 0xFF)
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB5, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Ones)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Ones)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }
                }

                Return (Ones)
            }

            Method (SMB9, 4, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCNT = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SMBA, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \GSA1.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \GSA1.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (CMPL ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \GSA1.SMBA.TBUF */
                }

                HSTS |= 0xFF
                Return (Zero)
            }

            Method (SMBF, 1, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    SMB2 (0x6C, Zero, Zero)
                }
                Else
                {
                    SMB2 (0x6E, Zero, Zero)
                }
            }

            Method (SMBE, 2, Serialized)
            {
                Local0 = Zero
                While ((Local0 < 0x0200))
                {
                    If ((Local0 == Zero))
                    {
                        SMBF (Zero)
                    }

                    If ((Local0 == 0x0100))
                    {
                        SMBF (One)
                    }

                    Local1 = SMB3 (Arg0, (Local0 % 0x0100))
                    If ((Local1 == 0xFFFF))
                    {
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Arg1 [Local0] = Local1
                        Local0++
                    }
                }

                SMBF (Zero)
                Return (Zero)
            }

            Method (SMAB, 0, Serialized)
            {
                Return (0x0B20)
            }

            Method (SMA8, 0, Serialized)
            {
            }

            Mutex (SMME, 0x00)
            OperationRegion (SMG0, SystemIO, 0x0B20, 0x20)
            Field (SMG0, ByteAcc, NoLock, Preserve)
            {
                SMG1,   8, 
                Offset (0x02), 
                SMG2,   8, 
                SMG3,   8, 
                SMG4,   8, 
                SMG5,   8, 
                SMG6,   8, 
                SMG7,   8
            }

            Method (SMAG, 1, Serialized)
            {
                SMA8 ()
            }

            Method (SMAH, 1, Serialized)
            {
            }

            Method (SMAK, 0, Serialized)
            {
                SMG2 |= 0x02
                SMG1 |= 0xFF
            }

            Method (SMAL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SMAM, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((SMG1 & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMG1 = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMA0, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA1, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA2, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = Arg2
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA3, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA4, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = (Arg2 & 0xFF)
                SMG6 = ((Arg2 >> 0x08) & 0xFF)
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA5, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (Ones)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Ones)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (((SMG6 << 0x08) | SMG5))
                    }
                }

                Return (Ones)
            }

            Method (SMA9, 4, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = SizeOf (Arg2)
                Local1 = Zero
                SMG7 = DerefOf (Arg2 [Zero])
                SMG2 = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return (Zero)
                    }

                    SMG1 = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        SMG7 = DerefOf (Arg2 [Local1])
                    }
                }

                If (SMAL ())
                {
                    SMG1 |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SMAA, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x54
                Local0 = 0x0FA0
                While ((!(SMG1 & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    SMAK ()
                    Return (Zero)
                }

                TBUF [Zero] = SMG5 /* \GSA1.SMG5 */
                SMG1 = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return (Zero)
                    }

                    TBUF [Local1] = SMG7 /* \GSA1.SMG7 */
                    SMG1 = 0x80
                    Local1++
                }

                If (SMAL ())
                {
                    SMG1 |= 0xFF
                    Return (TBUF) /* \GSA1.SMAA.TBUF */
                }

                SMG1 |= 0xFF
                Return (Zero)
            }

            Method (SMM9, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMA, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM0, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB0 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)){}
                Return (Zero)
            }

            Method (SMM1, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB1 (Arg1)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)){}
                Return (0xFFFF)
            }

            Method (SMM2, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB2 (Arg1, Arg2, Arg3)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA2 (Arg1, Arg2, Arg3)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM3, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB3 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA3 (Arg1, Arg2)
                    Release (SMME)
                    Return (Local0)
                }

                Return (0xFFFF)
            }

            Method (SMM4, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB4 (Arg1, Arg2, Arg3)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA4 (Arg1, Arg2, Arg3)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM5, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMB5 (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SMME, 0xFFFF)
                    Local0 = SMA5 (Arg1, Arg2)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (SMM6, 5, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SMME, 0xFFFF)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM7, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SMMB, 0xFFFF)
                    Release (SMMB)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SMME, 0xFFFF)
                    Release (SMME)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (SMM8, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SMMB, 0xFFFF)
                    Local0 = SMBE (Arg1, Arg2)
                    Release (SMMB)
                    Return (Local0)
                }
            }

            Method (MM17, 1, NotSerialized)
            {
                Local7 = Arg0
                Local0 = Zero
                Local1 = ""
                While ((Local0 < SizeOf (Local7)))
                {
                    If ((Local0 != Zero))
                    {
                        Concatenate (Local1, ":", Local1)
                    }

                    Local6 = ToHexString (DerefOf (Local7 [Local0]), Local2)
                    Concatenate (Local1, Local6, Local1)
                    Local0++
                }

                Return (Local1)
            }

            Method (MM18, 1, NotSerialized)
            {
                Local7 = Arg0
                Local0 = Zero
                Local1 = ""
                While ((Local0 < SizeOf (Local7)))
                {
                    If ((Local0 != Zero))
                    {
                        Concatenate (Local1, ":", Local1)
                    }

                    Concatenate (Local1, DerefOf (Local7 [Local0]), Local1)
                    Local0++
                }

                Return (Local1)
            }

            Method (MM00, 0, NotSerialized)
            {
                Return (SizeOf (GSAT))
            }

            Method (MM01, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (GSAT)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (GSAT [Local0]) [Zero]) == Arg0))
                    {
                        Return (DerefOf (GSAT [Local0]))
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (MM19, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = SizeOf (GSAT)
                While ((Local0 < Local1))
                {
                    If ((DerefOf (DerefOf (GSAT [Local0]) [Zero]) == Arg0))
                    {
                        Return (Local0)
                    }

                    Local0++
                }

                Return (Ones)
            }

            Method (MM02, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [One]))
                }

                Return (Ones)
            }

            Method (MM04, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x02]))
                }

                Return (Ones)
            }

            Method (MM14, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x03]))
                }

                Return (Ones)
            }

            Method (MM03, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x04]))
                }

                Return (Ones)
            }

            Method (MM06, 2, Serialized)
            {
                Local0 = MM03 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Name (IFPK, Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    If ((Arg1 >= SizeOf (Local0)))
                    {
                        Return (Ones)
                    }

                    If ((Arg1 < SizeOf (Local0)))
                    {
                        Local1 = DerefOf (Local0 [Arg1])
                        If ((ObjectType (Local1) == 0x04))
                        {
                            IFPK [Zero] = DerefOf (Local1 [Zero])
                            IFPK [One] = DerefOf (Local1 [One])
                            IFPK [0x02] = DerefOf (DerefOf (Local1 [0x02]) [
                                Zero])
                            IFPK [0x03] = DerefOf (DerefOf (Local1 [0x02]) [
                                One])
                            IFPK [0x04] = DerefOf (DerefOf (Local1 [0x02]) [
                                0x02])
                            IFPK [0x05] = DerefOf (DerefOf (Local1 [0x02]) [
                                0x03])
                            Return (IFPK) /* \GSA1.MM06.IFPK */
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM07, 2, Serialized)
            {
                Local0 = MM03 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Name (IFPK, Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    If ((Arg1 < SizeOf (Local0)))
                    {
                        Local1 = DerefOf (Local0 [Arg1])
                        If ((ObjectType (Local1) == 0x04))
                        {
                            IFPK [Zero] = DerefOf (Local1 [Zero])
                            IFPK [One] = DerefOf (Local1 [One])
                            IFPK [0x02] = DerefOf (DerefOf (Local1 [0x03]) [
                                Zero])
                            IFPK [0x03] = DerefOf (DerefOf (Local1 [0x03]) [
                                One])
                            IFPK [0x04] = DerefOf (DerefOf (Local1 [0x03]) [
                                0x02])
                            IFPK [0x05] = DerefOf (DerefOf (Local1 [0x03]) [
                                0x03])
                            Return (IFPK) /* \GSA1.MM07.IFPK */
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM10, 1, NotSerialized)
            {
                Return (Zero)
            }

            Method (MM11, 2, NotSerialized)
            {
                Return (Zero)
            }

            Method (MM12, 2, NotSerialized)
            {
                Local6 = Arg1
                Local0 = Zero
                While (One)
                {
                    Local1 = MM06 (Arg0, Local0)
                    If ((ObjectType (Local1) == 0x04))
                    {
                        If ((DerefOf (Local1 [0x02]) <= DerefOf (Local1 [0x03]
                            )))
                        {
                            If (((Local6 >= DerefOf (Local1 [0x02])) && (
                                Local6 <= DerefOf (Local1 [0x03]))))
                            {
                                Local3 = (Local6 - DerefOf (Local1 [0x02]))
                                Local5 = DerefOf (Local1 [0x04])
                                If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                                {
                                    Local2 = MM07 (Arg0, Local0)
                                    Local3 /= DerefOf (Local1 [0x04])
                                    If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                        )))
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }
                                    Else
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }

                                    Return (Local4)
                                }
                            }
                        }
                        ElseIf (((Local6 >= DerefOf (Local1 [0x03])) && 
                            (Local6 <= DerefOf (Local1 [0x02]))))
                        {
                            Local3 = (DerefOf (Local1 [0x02]) - Local6)
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM07 (Arg0, Local0)
                                Local3 /= DerefOf (Local1 [0x04])
                                If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                    )))
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }
                                Else
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }

                                Return (Local4)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM13, 2, NotSerialized)
            {
                Local6 = Arg1
                Local0 = Zero
                While (One)
                {
                    Local1 = MM07 (Arg0, Local0)
                    If ((ObjectType (Local1) == 0x04))
                    {
                        If ((DerefOf (Local1 [0x02]) <= DerefOf (Local1 [0x03]
                            )))
                        {
                            If (((Local6 >= DerefOf (Local1 [0x02])) && (
                                Local6 <= DerefOf (Local1 [0x03]))))
                            {
                                Local3 = (Local6 - DerefOf (Local1 [0x02]))
                                If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                                {
                                    Local2 = MM06 (Arg0, Local0)
                                    Local3 /= DerefOf (Local1 [0x04])
                                    If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                        )))
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }
                                    Else
                                    {
                                        Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                            0x04])))
                                    }

                                    Return (Local4)
                                }
                            }
                        }
                        ElseIf (((Local6 >= DerefOf (Local1 [0x03])) && 
                            (Local6 <= DerefOf (Local1 [0x02]))))
                        {
                            Local3 = (DerefOf (Local1 [0x02]) - Local6)
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM06 (Arg0, Local0)
                                Local3 /= DerefOf (Local1 [0x04])
                                If ((DerefOf (Local2 [0x02]) <= DerefOf (Local2 [0x03]
                                    )))
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) + (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }
                                Else
                                {
                                    Local4 = (DerefOf (Local2 [0x02]) - (Local3 * DerefOf (Local2 [
                                        0x04])))
                                }

                                Return (Local4)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM08, 1, NotSerialized)
            {
                Local6 = MM10 (Arg0)
                Local0 = Zero
                While (One)
                {
                    Local1 = MM07 (Arg0, Local0)
                    If ((Local1 != Ones))
                    {
                        If ((DerefOf (Local1 [0x02]) <= DerefOf (Local1 [0x03]
                            )))
                        {
                            If (((Local6 >= DerefOf (Local1 [0x02])) && (
                                Local6 <= DerefOf (Local1 [0x03]))))
                            {
                                Local3 = (Local6 - DerefOf (Local1 [0x02]))
                                If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                                {
                                    Local2 = MM06 (Arg0, Local0)
                                    Local4 = (DerefOf (Local2 [0x02]) + ((Local3 / DerefOf (
                                        Local1 [0x04])) * DerefOf (Local2 [0x04])))
                                    Return (Local4)
                                }
                            }
                        }
                        ElseIf (((Local6 >= DerefOf (Local1 [0x03])) && 
                            (Local6 <= DerefOf (Local1 [0x02]))))
                        {
                            Local3 = (DerefOf (Local1 [0x02]) - Local6)
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM06 (Arg0, Local0)
                                Local4 = (DerefOf (Local2 [0x02]) + ((Local3 / DerefOf (
                                    Local1 [0x04])) * DerefOf (Local2 [0x04])))
                                Return (Local4)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM09, 2, NotSerialized)
            {
                Local0 = Zero
                While (One)
                {
                    Local1 = MM06 (Arg0, Local0)
                    If ((ObjectType (Local1) == 0x04))
                    {
                        If (((Arg1 >= DerefOf (Local1 [0x02])) && (
                            Arg1 <= DerefOf (Local1 [0x03]))))
                        {
                            Local3 = (Arg1 - DerefOf (Local1 [0x02]))
                            If (((Local3 % DerefOf (Local1 [0x04])) == Zero))
                            {
                                Local2 = MM07 (Arg0, Local0)
                                Local4 = (DerefOf (Local2 [0x02]) + ((Local3 / DerefOf (
                                    Local1 [0x04])) * DerefOf (Local2 [0x04])))
                                Return (Zero)
                            }
                        }

                        Local0++
                    }
                    Else
                    {
                        Break
                    }
                }

                Return (Ones)
            }

            Method (MM15, 2, NotSerialized)
            {
                Local0 = MM14 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((DerefOf (Local0 [One]) == One))
                    {
                        Local4 = DerefOf (Local0 [0x02])
                        Local2 = SizeOf (Local4)
                        Local3 = Zero
                        While ((Local3 < Local2))
                        {
                            If ((Arg1 == DerefOf (Local4 [Local3])))
                            {
                                Return (DerefOf (DerefOf (Local0 [0x03]) [Local3]))
                            }

                            Local3++
                        }
                    }
                }

                Return (Ones)
            }

            Method (MM16, 2, NotSerialized)
            {
                Local0 = MM14 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((DerefOf (Local0 [One]) == One))
                    {
                        Local1 = Match (DerefOf (Local0 [0x03]), MEQ, Arg1, MTR, Zero, 
                            Zero)
                        If ((Local1 != Ones))
                        {
                            Return (DerefOf (DerefOf (Local0 [0x02]) [Local1]))
                        }
                    }
                }

                Return ("Unknown")
            }

            Name (GSAT, Package (0x17)
            {
                Package (0x04)
                {
                    0x1B, 
                    "CPU Vcore Loadline Calibration", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x000500EB
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x05)
                        {
                            "Standard", 
                            "Low", 
                            "Medium", 
                            "High", 
                            "Turbo"
                        }, 

                        Package (0x05)
                        {
                            0x0C, 
                            0x07, 
                            0x04, 
                            0x03, 
                            0x02
                        }, 

                        "Standard"
                    }
                }, 

                Package (0x04)
                {
                    0x4D, 
                    "Vcore SOC Loadline Calibration", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_2", 
                        0x74, 
                        One, 
                        0x000500EC
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x05)
                        {
                            "Standard", 
                            "Low", 
                            "Medium", 
                            "High", 
                            "Turbo"
                        }, 

                        Package (0x05)
                        {
                            0x0C, 
                            0x07, 
                            0x04, 
                            0x03, 
                            0x02
                        }, 

                        "Standard"
                    }
                }, 

                Package (0x04)
                {
                    0x1D, 
                    "CPU Vcore Protection", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x00030549
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x06)
                        {
                            "150mV", 
                            "200mV", 
                            "250mV", 
                            "300mV", 
                            "350mV", 
                            "400mV"
                        }, 

                        Package (0x06)
                        {
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07
                        }, 

                        "350mV"
                    }
                }, 

                Package (0x04)
                {
                    0x22, 
                    "CPU Vcore Current Protection", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x00050049
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x05)
                        {
                            "Standard", 
                            "Low", 
                            "Medium", 
                            "High", 
                            "Turbo"
                        }, 

                        Package (0x05)
                        {
                            0x0B, 
                            0x0C, 
                            0x0E, 
                            0x10, 
                            0x13
                        }, 

                        "Medium"
                    }
                }, 

                Package (0x04)
                {
                    0x26, 
                    "CPU Vcore PWM Switch Rate", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x00060035
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "300khz", 
                            "400khz", 
                            "500khz"
                        }, 

                        Package (0x03)
                        {
                            0x34, 
                            0x2E, 
                            0x28
                        }, 

                        "400khz"
                    }
                }, 

                Package (0x04)
                {
                    0x50, 
                    "Vcore SOC PWM Switch Rate", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_2", 
                        0x74, 
                        One, 
                        0x00060036
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "300khz", 
                            "400khz", 
                            "500khz"
                        }, 

                        Package (0x03)
                        {
                            0x34, 
                            0x2E, 
                            0x28
                        }, 

                        "400khz"
                    }
                }, 

                Package (0x04)
                {
                    0x2D, 
                    "PWM Phase Control", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x0004042C
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x06)
                        {
                            "exm Perf", 
                            "high Perf", 
                            "Perf", 
                            "Balanced", 
                            "Mid PWR", 
                            "Lite PWR"
                        }, 

                        Package (0x06)
                        {
                            Zero, 
                            0x44, 
                            0x4044, 
                            0x00444444, 
                            0x00934444, 
                            0x00A08944
                        }, 

                        "exm Perf"
                    }
                }, 

                Package (0x06)
                {
                    0x06, 
                    "CPU VCore DVID Offset", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x000800E1
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0xFFFF8AD0, 
                            0x7530, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8AD0, 
                                0xFFFFFD8F, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xD0, 
                                0xFF, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                Zero, 
                                0x7530, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x30, 
                                One, 
                                One
                            }
                        }
                    }, 

                    Zero
                }, 

                Package (0x06)
                {
                    0x05, 
                    "CPU VCore", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x000800E3
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0x000124F8, 
                            0x0002BF20, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x000124F8, 
                                0x0002BF20, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0x77, 
                                0x012B, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0001D4C0, 
                                0x0001D4C0, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0001D4C0
                }, 

                Package (0x04)
                {
                    0x80000005, 
                    "CPU VCore Mode", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_1", 
                        0x74, 
                        Zero, 
                        0x000800B0
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "Auto", 
                            "Dynamic Offset", 
                            "Static"
                        }, 

                        Package (0x03)
                        {
                            Zero, 
                            0x02, 
                            0x03
                        }, 

                        "Auto"
                    }
                }, 

                Package (0x06)
                {
                    0x0B, 
                    "VCORE SOC DVID Offset", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_2", 
                        0x74, 
                        One, 
                        0x000800E2
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0xFFFF8AD0, 
                            0x7530, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0xFFFF8AD0, 
                                0xFFFFFD8F, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                0xD0, 
                                0xFF, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                Zero, 
                                0x7530, 
                                0x0271, 
                                0x000186A0
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x30, 
                                One, 
                                One
                            }
                        }
                    }, 

                    Zero
                }, 

                Package (0x06)
                {
                    0x0A, 
                    "VCORE SOC", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_2", 
                        0x74, 
                        One, 
                        0x000800E4
                    }, 

                    Package (0x03)
                    {
                        One, 
                        Zero, 
                        Package (0x04)
                        {
                            0x000124F8, 
                            0x0001D4C0, 
                            0x0271, 
                            0x000186A0
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x000124F8, 
                                0x0001D4C0, 
                                0x0271, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x77, 
                                0xBF, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x00016472, 
                                0x00016472, 
                                0x0271, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x00016472
                }, 

                Package (0x04)
                {
                    0x8000000A, 
                    "VCORE SOC Mode", 
                    Package (0x05)
                    {
                        One, 
                        "IR35201_0x74_2", 
                        0x74, 
                        One, 
                        0x000800B1
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x03)
                        {
                            "Auto", 
                            "Dynamic Offset", 
                            "Static"
                        }, 

                        Package (0x03)
                        {
                            Zero, 
                            0x02, 
                            0x03
                        }, 

                        "Auto"
                    }
                }, 

                Package (0x06)
                {
                    0x62, 
                    "CPU VDD18", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x20_VRF3", 
                        0x20, 
                        0x03, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x0640, 
                            0x0910, 
                            0x28, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0640, 
                                0x06E0, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x85, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0708, 
                                0x0910, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x0D, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0708
                }, 

                Package (0x06)
                {
                    0x09, 
                    "CPU VDDP", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x20_VRF2", 
                        0x20, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x02BC, 
                            0x0640, 
                            0x14, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x02BC, 
                                0x0370, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8A, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0384, 
                                0x0640, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x23, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0384
                }, 

                Package (0x06)
                {
                    0x0C, 
                    "PM_CLDO12", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x26_VRF2", 
                        0x26, 
                        0x02, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x0320, 
                            0x07D0, 
                            0x0A, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0320, 
                                0x04A6, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0xAA, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x04B0, 
                                0x07D0, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x51, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x04B0
                }, 

                Package (0x06)
                {
                    0x0F, 
                    "DRAM Voltage (CH A/B)", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x2A_VRF1", 
                        0x2A, 
                        One, 
                        0x0F
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x03E8, 
                            0x07D0, 
                            0x0A, 
                            0x03E8
                        }
                    }, 

                    Package (0x03)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x03E8, 
                                0x04A6, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x94, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x04B0, 
                                0x05D2, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x1D, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F3", 
                            Zero, 
                            Package (0x04)
                            {
                                0x05DC, 
                                0x07D0, 
                                0x0A, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x1F, 
                                0x51, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x04B0
                }, 

                Package (0x06)
                {
                    0x18, 
                    "DDRVPP (CH A/B) Voltage", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x2A_VRF3", 
                        0x2A, 
                        0x03, 
                        0x18
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x07BC, 
                            0x0BCC, 
                            0x28, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x07BC, 
                                0x099C, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8D, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x09C4, 
                                0x0BCC, 
                                0x28, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x0D, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x09C4
                }, 

                Package (0x06)
                {
                    0x10, 
                    "DRAM CH(A/B) Termination", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x2A_VRF2", 
                        0x2A, 
                        0x02, 
                        0x10
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x01C2, 
                            0x03E8, 
                            0x05, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x01C2, 
                                0x0258, 
                                0x05, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x1E, 
                                Zero, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x025D, 
                                0x03E8, 
                                0x05, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x81, 
                                0xD0, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0258
                }, 

                Package (0x06)
                {
                    0x74, 
                    "PM_1VSOC", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x26_VRF1", 
                        0x26, 
                        One, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x0320, 
                            0x05DC, 
                            0x14, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0320, 
                                0x03D4, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8A, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x03E8, 
                                0x05DC, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x19, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x03E8
                }, 

                Package (0x06)
                {
                    0x73, 
                    "PM_1V8", 
                    Package (0x05)
                    {
                        Zero, 
                        "NCT3933_0x26_VRF3", 
                        0x26, 
                        0x03, 
                        Zero
                    }, 

                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Package (0x04)
                        {
                            0x05DC, 
                            0x07D0, 
                            0x14, 
                            0x03E8
                        }
                    }, 

                    Package (0x02)
                    {
                        Package (0x04)
                        {
                            "F1", 
                            Zero, 
                            Package (0x04)
                            {
                                0x05DC, 
                                0x06F4, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                0x8F, 
                                0x81, 
                                One, 
                                One
                            }
                        }, 

                        Package (0x04)
                        {
                            "F2", 
                            Zero, 
                            Package (0x04)
                            {
                                0x0708, 
                                0x07D0, 
                                0x14, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                Zero, 
                                0x0A, 
                                One, 
                                One
                            }
                        }
                    }, 

                    0x0708
                }, 

                Package (0x04)
                {
                    0x20000001, 
                    "Pcie Slot1 x16_1_S", 
                    Package (0x05)
                    {
                        0x13, 
                        "FCHGPIO_23_9_X", 
                        0x02, 
                        0x17, 
                        0x09
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x08)
                        {
                            "000", 
                            "001", 
                            "010", 
                            "011", 
                            "100", 
                            "101", 
                            "110", 
                            "111"
                        }, 

                        Package (0x08)
                        {
                            0xFF, 
                            Zero, 
                            0xFF, 
                            One, 
                            0xFF, 
                            0x02, 
                            0xFF, 
                            0x03
                        }, 

                        "2#0#0#000301"
                    }
                }, 

                Package (0x04)
                {
                    0x20000002, 
                    "Pcie Slot2 x8_1_S", 
                    Package (0x05)
                    {
                        0x13, 
                        "FCHGPIO_92_X_4", 
                        0x02, 
                        0x5C, 
                        0x04
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        One, 
                        Package (0x08)
                        {
                            "000", 
                            "001", 
                            "010", 
                            "011", 
                            "100", 
                            "101", 
                            "110", 
                            "111"
                        }, 

                        Package (0x08)
                        {
                            0xFF, 
                            0xFF, 
                            Zero, 
                            One, 
                            0xFF, 
                            0xFF, 
                            0x02, 
                            0x03
                        }, 

                        "1#0#1#000301"
                    }
                }
            })
            Method (XDP8, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = (((SMB3 (Arg0, 0xFD) | (SMB3 (Arg0, 0xFC) << 0x08
                    )) | (SMB3 (Arg0, 0x6E) << 0x10)) | (SMB3 (Arg0, 0x6F) << 
                    0x18))
                Release (SMMB)
                Return (Local0)
            }

            Method (XDPV, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x6E)
                Local1 = SMB3 (Arg0, 0x6F)
                Local2 = SMB3 (Arg0, 0xFC)
                Release (SMMB)
                If ((((Local0 == 0x52) && (Local1 == 0x49)) && (Local2 == 0x7C)))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (XDPU, 1, Serialized)
            {
                Acquire (SMMB, 0xFFFF)
                Local0 = SMB3 (Arg0, 0x74)
                Release (SMMB)
                Return (Local0)
            }

            Method (XDPE, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local3 = SMB5 (Arg0, (Local1 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPF, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local1 = 0x06100050
                }
                Else
                {
                    Local1 = 0x0A100050
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = Arg2
                SMB4 (Arg0, (Local1 & 0xFF), Local5)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDP9, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                }
                Else
                {
                    Local0 = 0x08090082
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local5 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local5)
            }

            Method (XDPA, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }
                Else
                {
                    Local0 = 0x08090082
                    Local1 = 0x001000EC
                    Local2 = 0x000101E6
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), Zero)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                Local5 = SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), 0xA55A)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB4 (Arg0, (Local0 & 0xFF), Arg2)
                SMB2 (Arg0, 0xFF, (Local1 >> 0x18))
                SMB4 (Arg0, (Local1 & 0xFF), Zero)
                SMB2 (Arg0, 0xFF, (Local2 >> 0x18))
                Local5 = SMB3 (Arg0, (Local2 & 0xFF))
                Local5 = PFM8 (Local5, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), One)
                SMB2 (Arg0, (Local2 & 0xFF), Local5)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPW, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local2 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                Return (Local2)
            }

            Method (XDPX, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04020C82
                }
                Else
                {
                    Local0 = 0x08020C82
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), (Arg2 & One))
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPC, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local2 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local2)
            }

            Method (XDPB, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04080054
                }
                Else
                {
                    Local0 = 0x08080054
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                SMB2 (Arg0, (Local0 & 0xFF), Arg2)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPD, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x040800B0
                }
                Else
                {
                    Local0 = 0x080800B1
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local1 = SMB3 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local1)
            }

            Method (XDPM, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPN, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040C22
                }
                Else
                {
                    Local0 = 0x08040C22
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPJ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Release (SMMB)
                If ((Local4 & 0x08))
                {
                    Return (Local4)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (XDPK, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x04040822
                }
                Else
                {
                    Local0 = 0x08040822
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = SMB5 (Arg0, (Local0 & 0xFF))
                If ((Arg2 == Zero))
                {
                    Local4 = PFM8 (Local4, 0x0F, One, Zero)
                }
                Else
                {
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                }

                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPO, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610008C
                }
                Else
                {
                    Local0 = 0x0A10008C
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPP, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610008C
                }
                Else
                {
                    Local0 = 0x0A10008C
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPY, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPZ, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0610009E
                }
                Else
                {
                    Local0 = 0x0A10009E
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPQ, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local3 = SMB5 (Arg0, (Local0 & 0xFF))
                Release (SMMB)
                Return (Local3)
            }

            Method (XDPR, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x06100066
                }
                Else
                {
                    Local0 = 0x0A100066
                }

                Acquire (SMMB, 0xFFFF)
                SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                Local4 = Arg2
                SMB4 (Arg0, (Local0 & 0xFF), Local4)
                Release (SMMB)
                Return (Zero)
            }

            Method (XDPS, 2, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4D)
                    Local1 = SMB3 (Arg0, 0x4A)
                    Local2 = SMB3 (Arg0, 0x4B)
                    Local4 = ((Local0 + (Local1 << 0x08)) + (Local2 << 0x10
                        ))
                    Release (SMMB)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    Local0 = SMB3 (Arg0, 0x4C)
                    Local4 = Local0
                    Release (SMMB)
                }

                Return (Local4)
            }

            Method (XDPT, 3, Serialized)
            {
                If ((Arg1 == Zero))
                {
                    Local0 = 0x0004044B
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4D, (Arg2 & 0xFF))
                    SMB2 (Arg0, 0x4A, ((Arg2 >> 0x08) & 0xFF))
                    SMB2 (Arg0, 0x4B, ((Arg2 >> 0x10) & 0xFF))
                    Release (SMMB)
                }
                Else
                {
                    Local0 = 0x0004044C
                    Acquire (SMMB, 0xFFFF)
                    SMB2 (Arg0, 0xFF, (Local0 >> 0x18))
                    SMB2 (Arg0, 0x4C, (Arg2 & 0xFF))
                    Release (SMMB)
                }

                Return (Zero)
            }

            Method (IRD8, 1, Serialized)
            {
                Return ((((SMM3 (0x02, Arg0, 0xFA) | (SMM3 (0x02, Arg0, 
                    0xFB) << 0x08)) | (SMM3 (0x02, Arg0, 0xFC) << 0x10)) | (
                    SMM3 (0x02, Arg0, 0xFD) << 0x18)))
            }

            Method (IRDV, 1, Serialized)
            {
                Local0 = SMM3 (0x02, Arg0, 0xFC)
                Local1 = SMM3 (0x02, Arg0, 0xFD)
                Local2 = SMM3 (0x02, Arg0, 0xFB)
                If (((Local0 == 0x49) && (Local1 == 0x50)))
                {
                    If (((Local2 == 0x4D) || (Local2 == 0x50)))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IRDU, 1, Serialized)
            {
                Return (SMM3 (0x02, Arg0, 0xFA))
            }

            Method (IRDE, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x000106EB
                        Local1 = 0x000500EA
                    }
                    Else
                    {
                        Local0 = 0x000105EB
                        Local1 = 0x000500EB
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000106EC
                    Local1 = 0x000500EB
                }
                Else
                {
                    Local0 = 0x000105EC
                    Local1 = 0x000500EC
                }

                Local3 = SMM3 (0x02, Arg0, (Local1 & 0xFF))
                Local4 = PFM9 (Local3, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF))
                Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local5 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                If ((Local5 == Zero))
                {
                    Return (0x20)
                }
                Else
                {
                    Return ((Local4 & 0x1F))
                }
            }

            Method (IRDF, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x000106EB
                        Local1 = 0x000500EA
                    }
                    Else
                    {
                        Local0 = 0x000105EB
                        Local1 = 0x000500EB
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000106EC
                    Local1 = 0x000500EB
                }
                Else
                {
                    Local0 = 0x000105EC
                    Local1 = 0x000500EC
                }

                Local4 = SMM3 (0x02, Arg0, (Local1 & 0xFF))
                Local4 = PFM8 (Local4, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF), (Arg2 & 0x1F))
                SMM2 (0x02, Arg0, (Local1 & 0xFF), Local4)
                Local5 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local5 = PFM8 (Local5, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), (Arg2 >> 0x05))
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Local5)
                Return (Zero)
            }

            Method (IRD9, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00080092
                        Local1 = 0x00010791
                    }
                    Else
                    {
                        Local0 = 0x00080094
                        Local1 = 0x00010693
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000800E3
                    Local1 = 0x000107E5
                }
                Else
                {
                    Local0 = 0x000800E4
                    Local1 = 0x000106E5
                }

                Local3 = SMM3 (0x02, Arg0, (Local1 & 0xFF))
                Local4 = PFM9 (Local3, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF))
                Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local5 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Return (((Local5 << One) | (Local4 & One)))
            }

            Method (IRDA, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00080092
                        Local1 = 0x00010791
                    }
                    Else
                    {
                        Local0 = 0x00080094
                        Local1 = 0x00010693
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000800E3
                    Local1 = 0x000107E5
                }
                Else
                {
                    Local0 = 0x000800E4
                    Local1 = 0x000106E5
                }

                Local5 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local5 = PFM8 (Local5, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), (Arg2 >> One))
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Local5)
                Local4 = SMM3 (0x02, Arg0, (Local1 & 0xFF))
                Local4 = PFM8 (Local4, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF), (Arg2 & One))
                SMM2 (0x02, Arg0, (Local1 & 0xFF), Local4)
                Return (Zero)
            }

            Method (IRDW, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local2 = 0x0001009A
                    }
                    Else
                    {
                        Local2 = 0x0001009B
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local2 = 0x0001009A
                }
                Else
                {
                    Local2 = 0x0001009B
                }

                Local3 = SMM3 (0x02, Arg0, (Local2 & 0xFF))
                Local0 = PFM9 (Local3, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF))
                Return (Local0)
            }

            Method (IRDX, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local2 = 0x0001009A
                    }
                    Else
                    {
                        Local2 = 0x0001009B
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local2 = 0x0001009A
                }
                Else
                {
                    Local2 = 0x0001009B
                }

                Local4 = SMM3 (0x02, Arg0, (Local2 & 0xFF))
                Local4 = PFM8 (Local4, ((Local2 >> 0x08) & 0xFF), (
                    (Local2 >> 0x10) & 0xFF), (Arg2 & One))
                SMM2 (0x02, Arg0, (Local2 & 0xFF), Local4)
                Return (Zero)
            }

            Method (IRDC, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x0008007D
                    }
                    Else
                    {
                        Local0 = 0x0008007E
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000800E1
                }
                Else
                {
                    Local0 = 0x000800E2
                }

                Return (SMM3 (0x02, Arg0, (Local0 & 0xFF)))
            }

            Method (IRDB, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x0008007D
                    }
                    Else
                    {
                        Local0 = 0x0008007E
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000800E1
                }
                Else
                {
                    Local0 = 0x000800E2
                }

                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg2)
                Return (Zero)
            }

            Method (IRDD, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x000800B0
                    }
                    Else
                    {
                        Local0 = 0x000800B1
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x000800B0
                }
                Else
                {
                    Local0 = 0x000800B1
                }

                Return (SMM3 (0x02, Arg0, (Local0 & 0xFF)))
            }

            Method (IRDM, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00030545
                    }
                    Else
                    {
                        Local0 = 0x00030546
                    }

                    Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                    Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF))
                    Return (Local4)
                }
                Else
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00030549
                    }
                    Else
                    {
                        Local0 = 0x0003054A
                    }

                    Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                    Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF))
                    Return (Local4)
                }
            }

            Method (IRDN, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00030545
                    }
                    Else
                    {
                        Local0 = 0x00030546
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x00030549
                }
                Else
                {
                    Local0 = 0x0003054A
                }

                Local4 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), Arg2)
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Local4)
                Return (Zero)
            }

            Method (IRDO, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00050045
                    }
                    Else
                    {
                        Local0 = 0x00050046
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x00050049
                }
                Else
                {
                    Local0 = 0x0005004A
                }

                Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Return (Local4)
            }

            Method (IRDP, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00050045
                    }
                    Else
                    {
                        Local0 = 0x00050046
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x00050049
                }
                Else
                {
                    Local0 = 0x0005004A
                }

                Local4 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), Arg2)
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Local4)
                Return (Zero)
            }

            Method (IRDQ, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00060031
                    }
                    Else
                    {
                        Local0 = 0x00060032
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x00060035
                }
                Else
                {
                    Local0 = 0x00060036
                }

                Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF))
                Return (Local4)
            }

            Method (IRDR, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x00060031
                    }
                    Else
                    {
                        Local0 = 0x00060032
                    }
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = 0x00060035
                }
                Else
                {
                    Local0 = 0x00060036
                }

                Local4 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                    (Local0 >> 0x10) & 0xFF), Arg2)
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Local4)
                Return (Zero)
            }

            Method (IRDS, 2, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x0004042C
                    }
                    Else
                    {
                        Local0 = 0x0004002F
                    }

                    Local3 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                    Local4 = PFM9 (Local3, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF))
                }
                ElseIf ((Arg1 == Zero))
                {
                    Local0 = SMM3 (0x02, Arg0, 0x2C)
                    Local1 = SMM3 (0x02, Arg0, 0x2D)
                    Local2 = SMM3 (0x02, Arg0, 0x2E)
                    Local4 = ((Local0 + (Local1 << 0x08)) + (Local2 << 0x10
                        ))
                }
                Else
                {
                    Local0 = SMM3 (0x02, Arg0, 0x2F)
                    Local4 = Local0
                }

                Return (Local4)
            }

            Method (IRDT, 3, Serialized)
            {
                If ((IRDU (Arg0) < 0x03))
                {
                    If ((Arg1 == Zero))
                    {
                        Local0 = 0x0004042C
                    }
                    Else
                    {
                        Local0 = 0x0004002F
                    }

                    Local4 = SMM3 (0x02, Arg0, (Local0 & 0xFF))
                    Local4 = PFM8 (Local4, ((Local0 >> 0x08) & 0xFF), (
                        (Local0 >> 0x10) & 0xFF), Arg2)
                    SMM2 (0x02, Arg0, (Local0 & 0xFF), Local4)
                    Return (Zero)
                }
                Else
                {
                    If ((Arg1 == Zero))
                    {
                        SMM2 (0x02, Arg0, 0x2C, (Arg2 & 0xFF))
                        SMM2 (0x02, Arg0, 0x2D, ((Arg2 >> 0x08) & 0xFF))
                        SMM2 (0x02, Arg0, 0x2E, ((Arg2 >> 0x10) & 0xFF))
                    }
                    Else
                    {
                        SMM2 (0x02, Arg0, 0x2F, (Arg2 & 0xFF))
                    }

                    Return (Zero)
                }
            }

            Method (IRCU, 1, Serialized)
            {
                If (IRDV (Arg0))
                {
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (IRCE, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDE (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCF, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDF (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (IRC9, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRD9 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCA, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDA (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (IRCC, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDC (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCB, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDB (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (IRCD, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDD (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCM, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDM (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCN, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDN (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (IRCO, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDO (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCP, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDP (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (IRCQ, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDQ (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCR, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDR (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (IRCS, 2, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (IRDS (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (IRCT, 3, Serialized)
            {
                Local0 = IRCU (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    IRDT (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISM0, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMD, 1, Serialized)
            {
                Return (Zero)
            }

            Method (ISMF, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Local2 = PFM9 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF))
                Return (Local2)
            }

            Method (ISMG, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x000204F0
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local2 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Local2 = PFM8 (Local2, ((Local1 >> 0x08) & 0xFF), (
                    (Local1 >> 0x10) & 0xFF), Arg2)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), Local2)
                Return (Zero)
            }

            Method (ISM5, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM6, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100028
                Local2 = 0x000800E7
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                SMM2 (0x02, Arg0, (Local2 & 0xFF), One)
                Return (Zero)
            }

            Method (ISME, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010008B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM4, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM3, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100023
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM2, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Return (SMM5 (0x02, Arg0, (Local1 & 0xFF)))
            }

            Method (ISM1, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100021
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM7, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISM8, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100055
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISM9, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMA, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x0010005B
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISMH, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMI, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100042
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISMJ, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMK, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x00100046
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISML, 2, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000E6
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                Local3 = SMM5 (0x02, Arg0, (Local1 & 0xFF))
                Return (Local3)
            }

            Method (ISMM, 3, Serialized)
            {
                Local0 = 0x00080000
                Local1 = 0x001000E6
                SMM2 (0x02, Arg0, (Local0 & 0xFF), Arg1)
                SMM4 (0x02, Arg0, (Local1 & 0xFF), (Arg2 & 0xFFFF))
                Return (Zero)
            }

            Method (ISK0, 1, Serialized)
            {
                If (ISMD (Arg0))
                {
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ISK5, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM5 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK6, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM6 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK4, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM4 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK3, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM3 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK2, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM2 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK1, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM1 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK7, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM7 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISK8, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISM8 (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (ISK9, 2, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    Return (ISM9 (Arg0, Arg1))
                }

                Return (Ones)
            }

            Method (ISKA, 3, Serialized)
            {
                Local0 = ISK0 (Arg0)
                If (Zero){}
                ElseIf ((Local0 == Zero))
                {
                    ISMA (Arg0, Arg1, Arg2)
                }

                Return (Zero)
            }

            Method (NCT0, 1, Serialized)
            {
                Return ((SMM3 (0x02, Arg0, 0x5D) | (SMM3 (0x02, Arg0, 0x5E) << 0x08
                    )))
            }

            Method (NCT1, 2, Serialized)
            {
                Return (SMM3 (0x02, Arg0, Arg1))
            }

            Method (NCT2, 3, Serialized)
            {
                Local1 = SMM2 (0x02, Arg0, Arg1, Arg2)
                Return (Local1)
            }

            Name (EZVT, 0xFF)
            Name (EZVU, "None None None")
            Name (EZVV, 0xFFFF)
            Name (EZVW, "None None None")
            Name (EZVX, 0xFFFF)
            Name (EZW0, "None None None")
            Name (EZW1, "None None None")
            Method (EZV7, 1, Serialized)
            {
                EZV4 (0x0C, EZVT)
                Local0 = EZVK (0x80000005, EZVU)
                If ((Local0 == 0x02))
                {
                    EZV4 (0x06, EZVV)
                }
                ElseIf ((Local0 == 0x03))
                {
                    EZV4 (0x05, EZVV)
                }
                ElseIf ((Local0 == Zero)){}
                Local0 = EZVK (0x8000000A, EZVW)
                If ((Local0 == 0x03))
                {
                    EZV4 (0x0A, EZVX)
                }
                ElseIf ((Local0 == Zero)){}
                EZVI (0x1B, EZW0)
                EZVI (0x4D, EZW1)
            }

            Method (EZV8, 1, Serialized)
            {
                If ((Arg0 == 0x05)){}
                Else
                {
                    EZVT = EZV3 (0x0C)
                    EZVU = EZVH (0x80000005)
                    Local0 = EZVK (0x80000005, EZVU)
                    If ((Local0 == 0x02))
                    {
                        EZVV = EZV3 (0x06)
                    }
                    ElseIf ((Local0 == 0x03))
                    {
                        EZVV = EZV3 (0x05)
                    }

                    EZVW = EZVH (0x8000000A)
                    Local0 = EZVK (0x80000005, EZVW)
                    If ((Local0 == 0x02))
                    {
                        EZVX = EZV3 (0x0B)
                    }
                    ElseIf ((Local0 == 0x03))
                    {
                        EZVX = EZV3 (0x0A)
                    }

                    EZW0 = EZVH (0x1B)
                    EZW1 = EZVH (0x4D)
                }
            }

            Method (EZV5, 0, Serialized)
            {
                EZW3 ()
                EZVM ()
            }

            Method (EZW3, 0, Serialized)
            {
                EZW4 (0x26)
                EZW4 (0x50)
            }

            Method (EZW4, 1, Serialized)
            {
                Local0 = MM19 (Arg0)
                If ((Local0 != Ones))
                {
                    DerefOf (GSAT [Local0]) [Zero] = Ones
                }
            }

            Method (EZVM, 0, Serialized)
            {
            }

            Name (EZW2, "1.0")
            Name (EZVZ, "")
            Method (EZVY, 3, NotSerialized)
            {
                Local7 = EZVZ /* \GSA1.EZVZ */
                Local6 = DerefOf (Local7 [0x02])
                Return (Zero)
            }

            Method (EZV6, 0, Serialized)
            {
                Return (0xDEAB)
            }

            Method (EZV0, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Local1 = DerefOf (Local0 [One])
                    If ((DerefOf (DerefOf (Local0 [0x03]) [One]) == Zero))
                    {
                        Local7 = "I"
                        Local3 = ToHexString (DerefOf (Local0 [0x05]), Local4)
                        Local2 = ""
                        Local6 = Zero
                        Local4 = DerefOf (Local0 [0x03])
                        Local4 = (SizeOf (Local4) - 0x02)
                        While ((Local6 < Local4))
                        {
                            If ((Local6 != Zero))
                            {
                                Concatenate (Local2, ":", Local2)
                            }

                            Local5 = MM17 (DerefOf (DerefOf (Local0 [0x03]) [(0x02 + 
                                Local6)]))
                            Concatenate (Local2, Local5, Local2)
                            Local6++
                        }
                    }
                    Else
                    {
                        Local7 = "S"
                        Local3 = DerefOf (DerefOf (Local0 [0x03]) [0x04])
                        Local2 = MM18 (DerefOf (DerefOf (Local0 [0x03]) [0x02]))
                    }

                    Concatenate (Local1, ":", Local1)
                    Local4 = ToHexString (DerefOf (DerefOf (Local0 [0x03]) [Zero])
                        )
                    Concatenate (Local1, Local4, Local1)
                    Concatenate (Local1, ":", Local1)
                    Concatenate (Local1, Local7, Local1)
                    Concatenate (Local1, ":", Local1)
                    Concatenate (Local1, Local3, Local1)
                    Concatenate (Local1, ":", Local1)
                    Concatenate (Local1, Local2, Local1)
                    Return (Local1)
                }

                Return (Ones)
            }

            Method (EZVC, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                }

                Return (Ones)
            }

            Method (EZVB, 1, NotSerialized)
            {
                Local0 = EZVC (Arg0)
                Local1 = MM01 (Local0)
                If ((ObjectType (Local1) == 0x04))
                {
                    Return (DerefOf (Local1 [0x02]))
                }

                Return (Ones)
            }

            Method (EZV1, 1, NotSerialized)
            {
                Local0 = EZVB (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Local2 = Zero
                    If ((Local2 == DerefOf (Local0 [0x03])))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Return (Ones)
            }

            Method (EZV2, 2, NotSerialized)
            {
                Local0 = EZVB (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If ((Arg1 == One))
                    {
                        Local1 = DerefOf (Local0 [0x03])
                    }
                    Else
                    {
                        Local1 = DerefOf (Local0 [0x04])
                    }
                }
            }

            Method (EZV3, 1, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero){}
                    ElseIf (((DerefOf (DerefOf (Local0 [0x02]) [Zero]
                        ) == One) || (DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 0x02)))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x000800E3)
                            {
                                Local1 = IRD9 (Local7, Local6)
                            }
                            Case (0x000800E4)
                            {
                                Local1 = IRD9 (Local7, Local6)
                            }
                            Case (0x000800E1)
                            {
                                Local1 = IRDC (Local7, Local6)
                            }
                            Case (0x000800E2)
                            {
                                Local1 = IRDC (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x04090082)
                            {
                                Local1 = XDP9 (Local7, Local6)
                            }
                            Case (0x08090082)
                            {
                                Local1 = XDP9 (Local7, Local6)
                            }
                            Case (0x04080054)
                            {
                                Local1 = XDPC (Local7, Local6)
                            }
                            Case (0x08080054)
                            {
                                Local1 = XDPC (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local1 = NCT1 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                            DerefOf (DerefOf (Local0 [0x02]) [0x03]))
                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x00100021)
                            {
                                Local1 = ISM2 (Local7, Local6)
                                If ((Local1 == Zero))
                                {
                                    Return (Local1)
                                }

                                If ((Arg0 == 0x0A))
                                {
                                    If ((Local1 > 0x05DC))
                                    {
                                        Local1 = Zero
                                    }
                                }
                            }
                            Case (0x00100023)
                            {
                                Local1 = ISM4 (Local7, Local6)
                                If ((Local1 == Zero))
                                {
                                    Return (Local1)
                                }
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM13 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        Return (Ones)
                    }
                }

                Return (Ones)
            }

            Method (EZV4, 2, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero){}
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local1 = NCT2 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                                DerefOf (DerefOf (Local0 [0x02]) [0x03]), Local2)
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf (((DerefOf (DerefOf (Local0 [0x02]) [Zero]
                        ) == One) || (DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 0x02)))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x000800E3)
                                {
                                    Local1 = IRDA (Local7, Local6, Zero)
                                    Local1 = IRDA (Local7, Local6, Local2)
                                }
                                Case (0x000800E4)
                                {
                                    Local1 = IRDA (Local7, Local6, Zero)
                                    Local1 = IRDA (Local7, Local6, Local2)
                                }
                                Case (0x000800E1)
                                {
                                    Local1 = IRDA (Local7, Local6, Zero)
                                    Local1 = IRDB (Local7, Local6, Local2)
                                }
                                Case (0x000800E2)
                                {
                                    Local1 = IRDA (Local7, Local6, Zero)
                                    Local1 = IRDB (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = Ones
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x04090082)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPA (Local7, Local6, Local2)
                                }
                                Case (0x08090082)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPA (Local7, Local6, Local2)
                                }
                                Case (0x04080054)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPB (Local7, Local6, Local2)
                                }
                                Case (0x08080054)
                                {
                                    Local1 = XDPA (Local7, Local6, Zero)
                                    Local1 = XDPB (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = Ones
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local2 = MM12 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x00100021)
                                {
                                    Local1 = ISM3 (Local7, Local6, Zero)
                                    Local1 = ISM1 (Local7, Local6, Local2)
                                    Local1 = ISMG (Local7, Local6, 0x03)
                                }
                                Case (0x00100023)
                                {
                                    Local1 = ISM3 (Local7, Local6, Local2)
                                    Local1 = ISMG (Local7, Local6, 0x02)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Ones)
                    }
                }

                Return (One)
            }

            Method (EZV9, 1, NotSerialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    Return (DerefOf (Local0 [0x05]))
                }

                Return (One)
            }

            Method (EZVA, 1, NotSerialized)
            {
                Local0 = MM02 (Arg0)
                Return (Local0)
            }

            Method (EZVF, 2, NotSerialized)
            {
                Local0 = MM13 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZVG, 2, NotSerialized)
            {
                Local0 = MM12 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZVH, 1, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero){}
                    ElseIf (((DerefOf (DerefOf (Local0 [0x02]) [Zero]
                        ) == One) || (DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 0x02)))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x000800B0)
                            {
                                Local3 = IRD9 (Local7, Local6)
                                Local3 >>= One
                                If ((Local3 == Zero))
                                {
                                    Local2 = Zero
                                    If ((Arg0 == 0x80000005))
                                    {
                                        Local2 = EZV3 (0x06)
                                    }
                                    ElseIf ((Arg0 == 0x8000000A))
                                    {
                                        Local2 = EZV3 (0x0B)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x03
                                }
                            }
                            Case (0x000800B1)
                            {
                                Local3 = IRD9 (Local7, Local6)
                                Local3 >>= One
                                If ((Local3 == Zero))
                                {
                                    Local2 = Zero
                                    If ((Arg0 == 0x80000005))
                                    {
                                        Local2 = EZV3 (0x06)
                                    }
                                    ElseIf ((Arg0 == 0x8000000A))
                                    {
                                        Local2 = EZV3 (0x0B)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x03
                                }
                            }
                            Case (0x000500EB)
                            {
                                Local1 = IRDE (Local7, Local6)
                            }
                            Case (0x000500EC)
                            {
                                Local1 = IRDE (Local7, Local6)
                            }
                            Case (0x00030549)
                            {
                                Local1 = IRDM (Local7, Local6)
                            }
                            Case (0x0003054A)
                            {
                                Local1 = IRDM (Local7, Local6)
                            }
                            Case (0x00050049)
                            {
                                Local1 = IRDO (Local7, Local6)
                            }
                            Case (0x0005004A)
                            {
                                Local1 = IRDO (Local7, Local6)
                            }
                            Case (0x00060035)
                            {
                                Local1 = IRDQ (Local7, Local6)
                            }
                            Case (0x00060036)
                            {
                                Local1 = IRDQ (Local7, Local6)
                            }
                            Case (0x0004042C)
                            {
                                Local1 = IRDS (Local7, Local6)
                            }
                            Case (0x0004002F)
                            {
                                Local1 = IRDS (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x040800B0)
                            {
                                Local3 = XDP9 (Local7, Local6)
                                If ((Local3 == Zero))
                                {
                                    Local2 = Zero
                                    If ((Arg0 == 0x80000005))
                                    {
                                        Local2 = EZV3 (0x06)
                                    }
                                    ElseIf ((Arg0 == 0x8000000A))
                                    {
                                        Local2 = EZV3 (0x0B)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x03
                                }
                            }
                            Case (0x080800B1)
                            {
                                Local3 = XDP9 (Local7, Local6)
                                If ((Local3 == Zero))
                                {
                                    Local2 = Zero
                                    If ((Arg0 == 0x80000005))
                                    {
                                        Local2 = EZV3 (0x06)
                                    }
                                    ElseIf ((Arg0 == 0x8000000A))
                                    {
                                        Local2 = EZV3 (0x0B)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = Zero
                                    }
                                    Else
                                    {
                                        Local1 = 0x02
                                    }
                                }
                                Else
                                {
                                    Local1 = 0x03
                                }
                            }
                            Case (0x06100050)
                            {
                                Local1 = XDPE (Local7, Local6)
                            }
                            Case (0x0A100050)
                            {
                                Local1 = XDPE (Local7, Local6)
                            }
                            Case (0x04040C22)
                            {
                                Local1 = XDPM (Local7, Local6)
                            }
                            Case (0x08040C22)
                            {
                                Local1 = XDPM (Local7, Local6)
                            }
                            Case (0x0610008C)
                            {
                                Local1 = XDPO (Local7, Local6)
                            }
                            Case (0x0A10008C)
                            {
                                Local1 = XDPO (Local7, Local6)
                            }
                            Case (0x0610009E)
                            {
                                Local1 = XDPY (Local7, Local6)
                            }
                            Case (0x0A10009E)
                            {
                                Local1 = XDPY (Local7, Local6)
                            }
                            Case (0x06100066)
                            {
                                Local1 = XDPQ (Local7, Local6)
                            }
                            Case (0x0A100066)
                            {
                                Local1 = XDPQ (Local7, Local6)
                            }
                            Case (0x0004044B)
                            {
                                Local1 = XDPS (Local7, Local6)
                            }
                            Case (0x0004044C)
                            {
                                Local1 = XDPS (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                        Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                        {
                            Case (0x000204F0)
                            {
                                Local1 = ISMF (Local7, Local6)
                            }
                            Case (0x00100028)
                            {
                                Local1 = ISM5 (Local7, Local6)
                            }
                            Case (0x00100042)
                            {
                                Local1 = ISMH (Local7, Local6)
                            }
                            Case (0x00100046)
                            {
                                Local1 = ISMJ (Local7, Local6)
                            }
                            Case (0x001000E6)
                            {
                                Local1 = ISML (Local7, Local6)
                            }
                            Default
                            {
                                Local1 = Ones
                            }

                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local1 = NCT1 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                            DerefOf (DerefOf (Local0 [0x02]) [0x03]))
                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x04))
                    {
                        Local1 = M009 (DerefOf (DerefOf (Local0 [0x02]) [0x02]))
                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x13))
                    {
                        Local3 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local2 = Zero
                        Local1 = Zero
                        While ((Local2 < Local3))
                        {
                            Local1 = ((Local1 << One) | M009 (DerefOf (DerefOf (Local0 [
                                0x02]) [(0x03 + Local2)])))
                            Local2++
                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0C))
                    {
                        Local4 = (DerefOf (DerefOf (Local0 [0x02]) [0x02]) - 0x10)
                        Local1 = PIO0 ((0x0A00 + (Local4 >> 0x04)), (Local4 & 
                            0x0F), One)
                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0D))
                    {
                        Local3 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                        Local2 = Zero
                        Local1 = Zero
                        While ((Local2 < Local3))
                        {
                            Local4 = (DerefOf (DerefOf (Local0 [0x02]) [(0x03 + Local2
                                )]) - 0x10)
                            Local1 = ((Local1 << One) | PIO0 ((0x0A00 + (Local4 >> 0x04
                                )), (Local4 & 0x0F), One))
                            Local2++
                        }

                        If ((Local1 != Ones))
                        {
                            Local2 = MM16 (Arg0, Local1)
                            Return (Local2)
                        }

                        Return (Ones)
                    }
                }

                Return (Ones)
            }

            Method (EZVI, 2, Serialized)
            {
                Local0 = MM01 (Arg0)
                If ((ObjectType (Local0) == 0x04))
                {
                    If (Zero){}
                    ElseIf (((DerefOf (DerefOf (Local0 [0x02]) [Zero]
                        ) == One) || (DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 0x02)))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x000800B0)
                                {
                                    If ((Local2 == Zero))
                                    {
                                        Local3 = Zero
                                        IRDA (Local7, Local6, Local3)
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0B, Zero)
                                        }
                                    }
                                    ElseIf ((Local2 == 0x02))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0B, Zero)
                                        }
                                    }
                                    ElseIf ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00016472)
                                        }
                                        ElseIf ((Arg0 == 0x80001005))
                                        {
                                            EZV4 (0x1005, 0x0001D4C0)
                                        }
                                    }

                                    Local1 = Zero
                                }
                                Case (0x000800B1)
                                {
                                    If ((Local2 == Zero))
                                    {
                                        Local3 = Zero
                                        IRDA (Local7, Local6, Local3)
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0B, Zero)
                                        }
                                    }
                                    ElseIf ((Local2 == 0x02))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0B, Zero)
                                        }
                                    }
                                    ElseIf ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00016472)
                                        }
                                    }

                                    Local1 = Zero
                                }
                                Case (0x000500EB)
                                {
                                    If ((Local2 == 0x20))
                                    {
                                        Local2 = Zero
                                    }
                                    Else
                                    {
                                        Local2 |= 0x20
                                    }

                                    Local1 = IRDF (Local7, Local6, Local2)
                                }
                                Case (0x000500EC)
                                {
                                    If ((Local2 == 0x20))
                                    {
                                        Local2 = Zero
                                    }
                                    Else
                                    {
                                        Local2 += 0x20
                                    }

                                    Local1 = IRDF (Local7, Local6, Local2)
                                }
                                Case (0x00030549)
                                {
                                    Local1 = IRDN (Local7, Local6, Local2)
                                }
                                Case (0x0003054A)
                                {
                                    Local1 = IRDN (Local7, Local6, Local2)
                                }
                                Case (0x00050049)
                                {
                                    Local1 = IRDP (Local7, Local6, Local2)
                                }
                                Case (0x0005004A)
                                {
                                    Local1 = IRDP (Local7, Local6, Local2)
                                }
                                Case (0x00060035)
                                {
                                    Local1 = IRDR (Local7, Local6, Local2)
                                }
                                Case (0x00060036)
                                {
                                    Local1 = IRDR (Local7, Local6, Local2)
                                }
                                Case (0x0004042C)
                                {
                                    Local1 = IRDT (Local7, Local6, Local2)
                                }
                                Case (0x0004002F)
                                {
                                    Local1 = IRDT (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0F))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x040800B0)
                                {
                                    If ((Local2 == Zero))
                                    {
                                        Local3 = Zero
                                        XDPA (Local7, Local6, Local3)
                                        EZV4 (0x06, Zero)
                                    }
                                    ElseIf ((Local2 == 0x02))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0B, Zero)
                                        }
                                    }
                                    ElseIf ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x0001D4C0)
                                        }
                                    }

                                    Local1 = Zero
                                }
                                Case (0x080800B1)
                                {
                                    If ((Local2 == Zero))
                                    {
                                        Local3 = Zero
                                        XDPA (Local7, Local6, Local3)
                                    }
                                    ElseIf ((Local2 == 0x02))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x06, Zero)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0B, Zero)
                                        }
                                    }
                                    ElseIf ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00015F90)
                                        }
                                    }

                                    Local1 = Zero
                                }
                                Case (0x06100050)
                                {
                                    Local1 = XDPF (Local7, Local6, Local2)
                                }
                                Case (0x0A100050)
                                {
                                    Local1 = XDPF (Local7, Local6, Local2)
                                }
                                Case (0x04040C22)
                                {
                                    Local1 = XDPN (Local7, Local6, Local2)
                                }
                                Case (0x08040C22)
                                {
                                    Local1 = XDPN (Local7, Local6, Local2)
                                }
                                Case (0x04040822)
                                {
                                    Local1 = XDPK (Local7, Local6, Local2)
                                }
                                Case (0x08040822)
                                {
                                    Local1 = XDPK (Local7, Local6, Local2)
                                }
                                Case (0x0610008C)
                                {
                                    Local1 = XDPP (Local7, Local6, Local2)
                                }
                                Case (0x0A10008C)
                                {
                                    Local1 = XDPP (Local7, Local6, Local2)
                                }
                                Case (0x0610009E)
                                {
                                    Local1 = XDPZ (Local7, Local6, Local2)
                                }
                                Case (0x0A10009E)
                                {
                                    Local1 = XDPZ (Local7, Local6, Local2)
                                }
                                Case (0x06100066)
                                {
                                    Local1 = XDPR (Local7, Local6, Local2)
                                }
                                Case (0x0A100066)
                                {
                                    Local1 = XDPR (Local7, Local6, Local2)
                                }
                                Case (0x0004044B)
                                {
                                    Local1 = XDPT (Local7, Local6, Local2)
                                }
                                Case (0x0004044C)
                                {
                                    Local1 = XDPT (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x08))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local7 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local6 = DerefOf (DerefOf (Local0 [0x02]) [0x03])
                            Switch (DerefOf (DerefOf (Local0 [0x02]) [0x04]))
                            {
                                Case (0x000204F0)
                                {
                                    If ((Local2 == 0x03))
                                    {
                                        If ((Arg0 == 0x80000005))
                                        {
                                            EZV4 (0x05, 0x0001D4C0)
                                            ISM3 (Local7, Local6, Zero)
                                            Local1 = ISMG (Local7, Local6, Local2)
                                        }
                                        ElseIf ((Arg0 == 0x8000000A))
                                        {
                                            EZV4 (0x0A, 0x00016472)
                                            ISM3 (Local7, Local6, Zero)
                                            Local1 = ISMG (Local7, Local6, Local2)
                                        }
                                    }

                                    If ((Local2 == 0x02))
                                    {
                                        Local1 = ISMG (Local7, Local6, Local2)
                                        Local1 = ISM3 (Local7, Local6, Zero)
                                    }

                                    If ((Local2 == Zero))
                                    {
                                        Local1 = ISMG (Local7, Local6, Local2)
                                        Local1 = ISM3 (Local7, Local6, Zero)
                                    }
                                }
                                Case (0x00100028)
                                {
                                    Local1 = ISM6 (Local7, Local6, Local2)
                                }
                                Case (0x00100042)
                                {
                                    Local1 = ISMI (Local7, Local6, Local2)
                                }
                                Case (0x00100046)
                                {
                                    Local1 = ISMK (Local7, Local6, Local2)
                                }
                                Case (0x001000E6)
                                {
                                    Local1 = ISMM (Local7, Local6, Local2)
                                }
                                Default
                                {
                                    Local1 = 0xFFFF
                                }

                            }

                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        Zero))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local1 = NCT2 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), 
                                DerefOf (DerefOf (Local0 [0x02]) [0x03]), Local2)
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x04))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            M010 (DerefOf (DerefOf (Local0 [0x02]) [0x02]), Local2)
                            Local1 = Zero
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0C))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local5 = (DerefOf (DerefOf (Local0 [0x02]) [(0x03 + Local1
                                )]) - 0x10)
                            PIO1 ((0x0A00 + (Local5 >> 0x04)), (Local5 & 0x0F), 
                                One, Local2)
                            Local1 = Zero
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    ElseIf ((DerefOf (DerefOf (Local0 [0x02]) [Zero]) == 
                        0x0D))
                    {
                        Local2 = MM15 (Arg0, Arg1)
                        If ((Local2 != Ones))
                        {
                            Local3 = DerefOf (DerefOf (Local0 [0x02]) [0x02])
                            Local1 = Zero
                            While ((Local1 < Local3))
                            {
                                Local4 = ((Local2 >> ((Local3 - Local1) - One)) & 
                                    One)
                                Local5 = (DerefOf (DerefOf (Local0 [0x02]) [(0x03 + Local1
                                    )]) - 0x10)
                                PIO1 ((0x0A00 + (Local5 >> 0x04)), (Local5 & 0x0F), 
                                    One, Local4)
                                Local1++
                            }

                            Local1 = Zero
                            If ((Local1 == 0xFFFF))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                }

                Return (One)
            }

            Method (EZVJ, 2, NotSerialized)
            {
                Local0 = MM16 (Arg0, Arg1)
                Return (Local0)
            }

            Method (EZVK, 2, NotSerialized)
            {
                Local0 = MM15 (Arg0, Arg1)
                Return (Local0)
            }

            Name (SIOG, 0x0A45)
            OperationRegion (SIO1, SystemIO, SIOG, 0x02)
            Field (SIO1, ByteAcc, Lock, WriteAsZeros)
            {
                SIO2,   8, 
                SIO3,   8
            }

            IndexField (SIO2, SIO3, ByteAcc, Lock, Preserve)
            {
                Offset (0x0B), 
                FTD1,   3, 
                FTD2,   3, 
                Offset (0x0D), 
                FTA1,   8, 
                FTA2,   8, 
                FTA3,   8, 
                Offset (0x13), 
                FAE1,   1, 
                FAE2,   1, 
                FAE3,   1, 
                REV1,   1, 
                FTE1,   1, 
                FTE2,   1, 
                FTE3,   1, 
                Offset (0x14), 
                FBE1,   1, 
                FBE2,   1, 
                FBE3,   1, 
                REV2,   4, 
                Offset (0x15), 
                FP10,   7, 
                FP17,   1, 
                FP20,   7, 
                FP27,   1, 
                FP30,   7, 
                FP37,   1, 
                FTB1,   8, 
                FTB2,   8, 
                FTB3,   8, 
                Offset (0x29), 
                FET1,   8, 
                FET2,   8, 
                FET3,   8, 
                FET4,   8, 
                FET5,   8, 
                FET6,   8, 
                Offset (0x44), 
                BEEP,   8, 
                Offset (0x4C), 
                FTA6,   8, 
                FTB6,   8, 
                Offset (0x5C), 
                FBEC,   3, 
                Offset (0x60), 
                FC10,   8, 
                FC11,   8, 
                FC12,   8, 
                FC13,   8, 
                FC14,   8, 
                FC15,   8, 
                FC16,   8, 
                FC17,   8, 
                FC20,   8, 
                FC21,   8, 
                FC22,   8, 
                FC23,   8, 
                FC24,   8, 
                FC25,   8, 
                FC26,   8, 
                FC27,   8, 
                FC30,   8, 
                FC31,   8, 
                FC32,   8, 
                FC33,   8, 
                FC34,   8, 
                FC35,   8, 
                FC36,   8, 
                FC37,   8, 
                FC40,   8, 
                FC41,   8, 
                FC42,   8, 
                FC43,   8, 
                FC44,   8, 
                FC45,   8, 
                FC46,   8, 
                FC47,   8, 
                FTA4,   8, 
                FTB4,   8, 
                FTA5,   8, 
                FTB5,   8, 
                Offset (0xA0), 
                FC50,   8, 
                FC51,   8, 
                FC52,   8, 
                FC53,   8, 
                FC54,   8, 
                FC55,   8, 
                FC56,   8, 
                FC57,   8, 
                FC60,   8, 
                FC61,   8, 
                FC62,   8, 
                FC63,   8, 
                FC64,   8, 
                FC65,   8, 
                FC66,   8, 
                FC67,   8
            }

            Method (SIOE, 0, NotSerialized)
            {
                Return (FBEC) /* \GSA1.FBEC */
            }

            Method (SIOF, 1, NotSerialized)
            {
                FBEC = Arg0
            }

            Method (SIOA, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = Zero
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = Zero
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = Zero
                    }

                }
            }

            Method (SIO9, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = One
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = One
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = One
                    }

                }
            }

            Method (SIOD, 1, Serialized)
            {
                Local1 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (((FBE1 == Zero) && (FAE1 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (One)
                    {
                        If (((FBE2 == Zero) && (FAE2 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (0x02)
                    {
                        If (((FBE3 == Zero) && (FAE3 == Zero)))
                        {
                            Local1 = One
                        }
                    }

                }

                Return (Local1)
            }

            Method (SIO0, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FET1) /* \GSA1.FET1 */
                    }
                    Case (One)
                    {
                        Return (FET2) /* \GSA1.FET2 */
                    }
                    Case (0x02)
                    {
                        Return (FET3) /* \GSA1.FET3 */
                    }
                    Case (0x03)
                    {
                        Return (FET4) /* \GSA1.FET4 */
                    }
                    Case (0x04)
                    {
                        Return (FET5) /* \GSA1.FET5 */
                    }
                    Case (0x05)
                    {
                        Return (FET6) /* \GSA1.FET6 */
                    }

                }
            }

            Method (SIO4, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (((FTB1 << 0x08) | FTA1))
                    }
                    Case (One)
                    {
                        Return (((FTB2 << 0x08) | FTA2))
                    }
                    Case (0x02)
                    {
                        Return (((FTB3 << 0x08) | FTA3))
                    }
                    Case (0x03)
                    {
                        Return (((FTB4 << 0x08) | FTA4))
                    }
                    Case (0x04)
                    {
                        Return (((FTB5 << 0x08) | FTA5))
                    }
                    Case (0x05)
                    {
                        Return (((FTB6 >> 0x08) | FTA6))
                    }

                }
            }

            Method (SIOC, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FP10 = Arg1
                    }
                    Case (One)
                    {
                        FP20 = Arg1
                    }
                    Case (0x02)
                    {
                        FP30 = Arg1
                    }

                }
            }

            Method (SIOB, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FP10) /* \GSA1.FP10 */
                    }
                    Case (One)
                    {
                        Return (FP20) /* \GSA1.FP20 */
                    }
                    Case (0x02)
                    {
                        Return (FP30) /* \GSA1.FP30 */
                    }

                }

                Return (Zero)
            }

            Method (SIO7, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC10) /* \GSA1.FC10 */
                    }
                    Case (One)
                    {
                        Return (FC20) /* \GSA1.FC20 */
                    }
                    Case (0x02)
                    {
                        Return (FC30) /* \GSA1.FC30 */
                    }
                    Case (0x03)
                    {
                        Return (FC40) /* \GSA1.FC40 */
                    }
                    Case (0x04)
                    {
                        Return (FC50) /* \GSA1.FC50 */
                    }
                    Case (0x05)
                    {
                        Return (FC60) /* \GSA1.FC60 */
                    }

                }

                Return (Zero)
            }

            Method (SIO5, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC11) /* \GSA1.FC11 */
                    }
                    Case (One)
                    {
                        Return (FC21) /* \GSA1.FC21 */
                    }
                    Case (0x02)
                    {
                        Return (FC31) /* \GSA1.FC31 */
                    }
                    Case (0x03)
                    {
                        Return (FC41) /* \GSA1.FC41 */
                    }
                    Case (0x04)
                    {
                        Return (FC51) /* \GSA1.FC51 */
                    }
                    Case (0x05)
                    {
                        Return (FC61) /* \GSA1.FC61 */
                    }

                }

                Return (Zero)
            }

            Method (SIO8, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC10 = Arg1
                    }
                    Case (One)
                    {
                        FC20 = Arg1
                    }
                    Case (0x02)
                    {
                        FC30 = Arg1
                    }
                    Case (0x03)
                    {
                        FC40 = Arg1
                    }
                    Case (0x04)
                    {
                        FC50 = Arg1
                    }
                    Case (0x05)
                    {
                        FC60 = Arg1
                    }

                }
            }

            Method (SIO6, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC11 = Arg1
                    }
                    Case (One)
                    {
                        FC21 = Arg1
                    }
                    Case (0x02)
                    {
                        FC31 = Arg1
                    }
                    Case (0x03)
                    {
                        FC41 = Arg1
                    }
                    Case (0x04)
                    {
                        FC51 = Arg1
                    }
                    Case (0x05)
                    {
                        FC61 = Arg1
                    }

                }
            }

            Method (PTC0, 0, Serialized)
            {
            }

            Scope (\_TZ)
            {
                ThermalZone (PCT0)
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (\_OSI ("Windows 2001"))
                        {
                            Local0 = 0x04
                        }

                        If (\_OSI ("Windows 2001.1"))
                        {
                            Local0 = 0x05
                        }

                        If (\_OSI ("FreeBSD"))
                        {
                            Local0 = 0x06
                        }

                        If (\_OSI ("HP-UX"))
                        {
                            Local0 = 0x07
                        }

                        If (\_OSI ("OpenVMS"))
                        {
                            Local0 = 0x08
                        }

                        If (\_OSI ("Windows 2001 SP1"))
                        {
                            Local0 = 0x09
                        }

                        If (\_OSI ("Windows 2001 SP2"))
                        {
                            Local0 = 0x0A
                        }

                        If (\_OSI ("Windows 2001 SP3"))
                        {
                            Local0 = 0x0B
                        }

                        If (\_OSI ("Windows 2006"))
                        {
                            Local0 = 0x0C
                        }

                        If (\_OSI ("Windows 2006 SP1"))
                        {
                            Local0 = 0x0D
                        }

                        If (\_OSI ("Windows 2009"))
                        {
                            Local0 = 0x0E
                        }

                        If (\_OSI ("Windows 2012"))
                        {
                            Local0 = 0x0F
                        }

                        If (\_OSI ("Windows 2013"))
                        {
                            Local0 = 0x10
                        }

                        If (\_OSI ("Windows 2015"))
                        {
                            Local0 = 0x11
                        }

                        If (\_OSI ("Windows 2016"))
                        {
                            Local0 = 0x12
                        }

                        If (\_OSI ("Windows 2017"))
                        {
                            Local0 = 0x13
                        }

                        If (\_OSI ("Windows 2017.2"))
                        {
                            Local0 = 0x14
                        }

                        If (\_OSI ("Windows 2018"))
                        {
                            Local0 = 0x15
                        }

                        If (\_OSI ("Windows 2018.2"))
                        {
                            Local0 = 0x16
                        }

                        If ((Local0 <= 0x0E)){}
                        Return (0x0B)
                    }

                    Name (TZD, Package (0x00){})
                    Method (_TZD, 0, Serialized)  // _TZD: Thermal Zone Devices
                    {
                        Return (TZD) /* \_TZ_.PCT0.TZD_ */
                    }

                    Name (PSL, Package (0x00){})
                    Method (_PSL, 0, Serialized)  // _PSL: Passive List
                    {
                        Return (PSL) /* \_TZ_.PCT0.PSL_ */
                    }

                    Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
                    {
                        Return (0x0B54)
                    }

                    Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
                    {
                        Return (0x0B72)
                    }

                    Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                    {
                        Return (0x0B7C)
                    }

                    Method (_TC1, 0, Serialized)  // _TC1: Thermal Constant 1
                    {
                        Return (Zero)
                    }

                    Method (_TC2, 0, Serialized)  // _TC2: Thermal Constant 2
                    {
                        Return (Zero)
                    }

                    Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
                    {
                        Return (0x0A)
                    }

                    Method (_TZP, 0, Serialized)  // _TZP: Thermal Zone Polling
                    {
                        Return (0x0A)
                    }

                    Name (X57V, Zero)
                    Method (_TMP, 0, Serialized)  // _TMP: Temperature
                    {
                        If ((\GSA1.EVIH == One))
                        {
                            \GSA1.GGGH (0x04, 0x96, 0xFA)
                            \GSA1.GGGH (0x04, 0x96, 0xFA)
                            \GSA1.GGGH (0x04, 0x96, 0xFA)
                            \GSA1.GGGH (0x04, 0x96, 0xFA)
                            \GSA1.EVIH = Zero
                            Return (0x0B7C)
                        }

                        Return (0x0B54)
                    }

                    Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
                    {
                    }
                }
            }

            Name (DIC3, Package (0x04)
            {
                Buffer (0x04)
                {
                     0x09, 0x09, 0x01, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x04, 0x04, 0x02, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x01, 0x01, 0x02, 0x01                           // ....
                }, 

                Buffer (0x04)
                {
                     0x00, 0x01, 0x02, 0x01                           // ....
                }
            })
            Method (DIM0, 0, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Local1]) [Zero])
                    Local6 = DerefOf (DerefOf (Local7 [Local1]) [One])
                    Local4 = Zero
                    If ((SMM3 (Local5, Local6, Zero) != 0xFFFF))
                    {
                        Local4 = One
                        If ((SMM3 (Local5, ((Local6 & 0x0F) | 0x30), 
                            Zero) != 0xFFFF))
                        {
                            Local4 |= 0x04
                        }
                    }

                    DerefOf (DerefOf (Local2) [Local1]) [0x02] = Local4
                    Local1++
                }
            }

            Method (DIM6, 1, Serialized)
            {
                Return ("KingStone")
            }

            Method (DIMC, 0, Serialized)
            {
                Name (DIMG, Buffer (0x03){})
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local4 = DerefOf (DerefOf (Local7 [Local1]) [0x02])
                    Local5 = (One << Local1)
                    If ((Local4 & One))
                    {
                        DIMG [Zero] = (DerefOf (DIMG [Zero]) | Local5
                            )
                    }

                    If ((Local4 & 0x02))
                    {
                        DIMG [One] = (DerefOf (DIMG [One]) | Local5
                            )
                    }

                    If ((Local4 & 0x04))
                    {
                        DIMG [0x02] = (DerefOf (DIMG [0x02]) | Local5
                            )
                    }

                    Local1++
                }

                Return (DIMG) /* \GSA1.DIMC.DIMG */
            }

            Method (DIMD, 1, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Arg0]) [Zero])
                    Local6 = ((DerefOf (DerefOf (Local7 [Arg0]) [One]) & 
                        0x0F) | 0x30)
                    Local4 = DerefOf (DerefOf (Local7 [Arg0]) [0x02])
                    If ((Local4 & 0x04))
                    {
                        Return ((SMM5 (Local5, Local6, 0x05) & 0x1FFF))
                    }
                }

                Return (Ones)
            }

            Method (DIM1, 1, Serialized)
            {
                Name (DATB, Buffer (0x0200){})
                Name (DATC, Buffer (0x04){})
                CreateWordField (DATC, Zero, DIM8)
                CreateWordField (DATC, 0x02, DIM9)
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local0 = SMM8 (DerefOf (DerefOf (Local7 [Arg0]) [Zero]), 
                        DerefOf (DerefOf (Local7 [Arg0]) [One]), DATB)
                    If ((Local0 == Zero))
                    {
                        DIM8 = Zero
                        DIM9 = 0x0200
                        Concatenate (DATC, DATB, Local1)
                        Return (Local1)
                    }
                }

                DIM8 = 0xFFFF
                DIM9 = Zero
                Concatenate (DATC, DATB, Local1)
                Return (Local1)
            }

            Name (EVT1, Zero)
            Method (EVT0, 0, Serialized)
            {
            }

            Method (EVT2, 1, Serialized)
            {
                EVT1 = Arg0
                Notify (\GSA1, 0xE2) // Hardware-Specific
            }

            Name (GGGA, Package (0x05)
            {
                "F11", 
                "X570 AORUS PRO", 
                "X570AORUSPRO", 
                "8AMTS004", 
                0x01000000
            })
            Name (GGGB, "20191113")
            Name (GGGC, Zero)
            Method (GGG1, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG2, 0, Serialized)
            {
                Return (GGGD) /* \GSA1.GGGD */
            }

            Method (GGG3, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x03]))
            }

            Method (GGG4, 0, Serialized)
            {
                Return (DerefOf (GGGA [Zero]))
            }

            Method (GGG5, 0, Serialized)
            {
                Return (DerefOf (GGGA [One]))
            }

            Method (GGG6, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x04]))
            }

            Method (GGG7, 0, Serialized)
            {
                Return (GGG9 (Zero))
            }

            Method (GGG8, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG9, 1, Serialized)
            {
                Local0 = Zero
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = GGGC /* \GSA1.GGGC */
                    }
                    Case (0x04)
                    {
                        Local0 = 0x4008090B
                    }
                    Case (0x08)
                    {
                        Local0 = 0x0130005F
                    }
                    Case (0x0C)
                    {
                        Local0 = 0xDEAB
                    }

                }

                Return (Local0)
            }

            Name (GGGK, Package (0x16)
            {
                0x23A1, 
                0x1FBE, 
                0x1C48, 
                0x1AB1, 
                0x17C8, 
                0x1530, 
                0x12E0, 
                0x11D1, 
                0x0FDF, 
                0x0E24, 
                0x0D59, 
                0x0BE4, 
                0x0A98, 
                0x0970, 
                0x08E8, 
                0x07F0, 
                0x0712, 
                0x06AC, 
                0x05F2, 
                0x054C, 
                0x04B8, 
                0x0474
            })
            Method (GGGH, 3, Serialized)
            {
                Local0 = 0x11D1
                If ((Arg0 == 0x03))
                {
                    Local5 = SizeOf (GGGK)
                    Local0 = Zero
                    If (((Arg1 > Zero) && (Arg1 <= Local5)))
                    {
                        Local0 = DerefOf (GGGK [(Arg1 - One)])
                    }

                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = Arg1
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x04))
                {
                    Local0 = ((0x001234DE + (Arg1 >> One)) / Arg1)
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }
                ElseIf ((Arg0 == Zero))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }

                If (Local0)
                {
                    PIO7 (0x53, Zero, 0xB6)
                    PIO7 (0x52, Zero, (Local0 & 0xFF))
                    PIO7 (0x52, Zero, ((Local0 >> 0x08) & 0xFF))
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) | 0x03))
                    Sleep (Local1)
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) & 0xFC))
                }
                Else
                {
                    Sleep (Local1)
                }
            }

            OperationRegion (DBS0, SystemIO, 0x2E, 0x02)
            Field (DBS0, ByteAcc, NoLock, Preserve)
            {
                DBS1,   8, 
                DBS2,   8
            }

            IndexField (DBS1, DBS2, ByteAcc, NoLock, Preserve)
            {
                Offset (0x07), 
                DBS4,   8, 
                Offset (0xEF), 
                DBS8,   1, 
                DBS9,   1
            }

            Mutex (DBS3, 0x00)
            Method (DBS5, 1, NotSerialized)
            {
                Acquire (DBS3, 0xFFFF)
                DBS1 = 0x87
                DBS1 = One
                DBS1 = 0x55
                If (Ones)
                {
                    DBS1 = 0x55
                }
                Else
                {
                    DBS1 = 0xAA
                }

                DBS4 = Arg0
            }

            Method (DBS6, 0, NotSerialized)
            {
                DBS1 = 0x02
                DBS2 = 0x02
                Release (DBS3)
            }

            Method (GGGG, 0, Serialized)
            {
                DBS5 (0x07)
                Local0 = DBS9 /* \GSA1.DBS9 */
                DBS6 ()
                Return (Local0)
            }

            Method (GGGE, 0, Serialized)
            {
                DBS5 (0x07)
                Local0 = DBS8 /* \GSA1.DBS8 */
                DBS6 ()
                Return (Local0)
            }

            Method (GGGF, 1, Serialized)
            {
                DBS5 (0x07)
                DBS8 = Arg0
                Local0 = DBS8 /* \GSA1.DBS8 */
                DBS6 ()
                Return (Local0)
            }

            Method (MPTS, 1, NotSerialized)
            {
                EZV8 (Arg0)
            }

            Method (MWAK, 1, NotSerialized)
            {
                PFM1 (Arg0)
                EZV7 (Arg0)
            }

            OperationRegion (GGGT, SystemMemory, 0xDBFDEB18, 0x0100)
            Field (GGGT, DWordAcc, Lock, Preserve)
            {
                Offset (0x08), 
                PGRV,   8, 
                CCNT,   8, 
                E8CV,   8, 
                EVIH,   8
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "GSADEV0")  // _UID: Unique ID
            Name (MARK, "Mark Tsai<mark@gigabyte.com><marktsai0316@gmail.com>")
            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                If ((GGGG () == One))
                {
                    GGGC = (GGGC | 0x00040000)
                }

                PFM0 ()
                GGGC = (GGGC | 0x10)
                GGGC = (GGGC | 0x20)
                GGGC = (GGGC | 0x40)
                GGGC = (GGGC | 0x80)
                GGGC = (GGGC | 0x0800)
                EVT0 ()
                GGGC = (GGGC | 0x2000)
                EZV5 ()
                DIM0 ()
                GGGC = (GGGC | 0x00080000)
                PTC0 ()
            }

            Method (_WDG, 0, Serialized)
            {
                Return (QWDG) /* \GSA1.QWDG */
            }

            Name (QWDG, Buffer (0x50)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x43, 0x43, 0x01, 0x00, 0xEF, 0xBE, 0xAD, 0xDE,  // CC......
                /* 0018 */  0x00, 0x10, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x41, 0x01, 0x01,  // )...AA..
                /* 0028 */  0xEF, 0xBE, 0xAD, 0xDE, 0x01, 0x20, 0x00, 0x00,  // ..... ..
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0x42, 0x42, 0x01, 0x02, 0xEF, 0xBE, 0xAD, 0xDE,  // BB......
                /* 0040 */  0x02, 0x40, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // .@......
                /* 0048 */  0x29, 0x10, 0x00, 0x00, 0xE2, 0x00, 0x01, 0x08   // ).......
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (WQCC, Buffer (0x2563)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x53, 0x25, 0x00, 0x00, 0x38, 0x87, 0x01, 0x00,  // S%..8...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDF, 0xBB, 0x01, 0x01, 0x08, 0x09, 0x42,  // .......B
                /* 0020 */  0x58, 0x07, 0x84, 0xC4, 0x39, 0xA0, 0x10, 0x81,  // X...9...
                /* 0028 */  0xE4, 0x13, 0x49, 0x0E, 0x0C, 0x4A, 0x02, 0x88,  // ..I..J..
                /* 0030 */  0xE4, 0x40, 0xC8, 0x05, 0x13, 0x13, 0x20, 0x02,  // .@.... .
                /* 0038 */  0x42, 0x5E, 0x05, 0xD8, 0x14, 0x60, 0x12, 0x44,  // B^...`.D
                /* 0040 */  0xFD, 0xFB, 0x43, 0x94, 0x06, 0x45, 0x09, 0x2C,  // ..C..E.,
                /* 0048 */  0x04, 0x42, 0x32, 0x05, 0xF8, 0x16, 0xE0, 0x58,  // .B2....X
                /* 0050 */  0x80, 0x61, 0x01, 0xB2, 0x05, 0x58, 0x86, 0x22,  // .a...X."
                /* 0058 */  0xA8, 0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00,  // ....+@..
                /* 0060 */  0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x84, 0x83,  // ...h....
                /* 0068 */  0x46, 0x89, 0x81, 0x90, 0x44, 0x58, 0x39, 0xC7,  // F...DX9.
                /* 0070 */  0x96, 0x72, 0x01, 0xA6, 0x05, 0x08, 0x17, 0x20,  // .r..... 
                /* 0078 */  0x1D, 0x43, 0x23, 0xA8, 0x1B, 0x4C, 0x52, 0x05,  // .C#..LR.
                /* 0080 */  0x88, 0x86, 0x11, 0x5A, 0x41, 0x70, 0x1A, 0xC4,  // ...ZAp..
                /* 0088 */  0x51, 0x44, 0x09, 0xC3, 0xF0, 0x8C, 0x19, 0x28,  // QD.....(
                /* 0090 */  0x5C, 0x90, 0x48, 0x86, 0x09, 0x7A, 0x02, 0x41,  // \.H..z.A
                /* 0098 */  0x4A, 0xC6, 0x90, 0x66, 0x2C, 0x02, 0x71, 0x06,  // J..f,.q.
                /* 00A0 */  0x1C, 0x2B, 0x46, 0xA8, 0x90, 0x98, 0x81, 0x04,  // .+F.....
                /* 00A8 */  0x3F, 0x81, 0xAE, 0x31, 0xE4, 0x19, 0x88, 0x58,  // ?..1...X
                /* 00B0 */  0x9F, 0x80, 0x40, 0xA2, 0x47, 0x09, 0x6E, 0x5C,  // ..@.G.n\
                /* 00B8 */  0xA3, 0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26,  // ..1..n`&
                /* 00C0 */  0x88, 0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40,  // .sx....@
                /* 00C8 */  0xFC, 0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x0C, 0x65,  // .......e
                /* 00D0 */  0x51, 0x80, 0x41, 0x0C, 0x29, 0x04, 0x11, 0x42,  // Q.A.)..B
                /* 00D8 */  0x8D, 0x02, 0x6C, 0x0D, 0x56, 0xC6, 0x20, 0x84,  // ..l.V. .
                /* 00E0 */  0x10, 0xC5, 0x08, 0x0C, 0x85, 0x61, 0x46, 0xB1,  // .....aF.
                /* 00E8 */  0xC3, 0x39, 0x0B, 0xA4, 0x36, 0x01, 0xCA, 0x40,  // .9..6..@
                /* 00F0 */  0x04, 0xCA, 0x10, 0x98, 0xFD, 0x41, 0x90, 0x40,  // .....A.@
                /* 00F8 */  0xE7, 0x01, 0xFD, 0x08, 0x2C, 0x09, 0x44, 0x46,  // ....,.DF
                /* 0100 */  0xB6, 0x94, 0x80, 0x1C, 0x06, 0x12, 0x1C, 0x8E,  // ........
                /* 0108 */  0x27, 0xD2, 0xFC, 0xCC, 0x34, 0x2A, 0x26, 0x01,  // '...4*&.
                /* 0110 */  0x50, 0x1A, 0x40, 0x24, 0x0A, 0x42, 0xBF, 0x03,  // P.@$.B..
                /* 0118 */  0x2A, 0x40, 0xCA, 0xC9, 0x80, 0xD8, 0x1E, 0x97,  // *@......
                /* 0120 */  0xE6, 0x74, 0x80, 0xA7, 0xEE, 0xBB, 0xC1, 0x99,  // .t......
                /* 0128 */  0xF9, 0xAC, 0xE0, 0x2D, 0xF8, 0xFF, 0x7F, 0x46,  // ...-...F
                /* 0130 */  0xE0, 0x63, 0xF0, 0x50, 0x0F, 0x21, 0xE0, 0x11,  // .c.P.!..
                /* 0138 */  0xB2, 0x43, 0x82, 0x01, 0xF1, 0xDE, 0x6F, 0x05,  // .C....o.
                /* 0140 */  0x64, 0x2E, 0x06, 0x64, 0x07, 0x85, 0xE7, 0x03,  // d..d....
                /* 0148 */  0xB0, 0x4C, 0xF2, 0x34, 0x8F, 0xA1, 0xE2, 0xA9,  // .L.4....
                /* 0150 */  0x21, 0x8E, 0x04, 0x7C, 0x2A, 0x27, 0xC5, 0x08,  // !..|*'..
                /* 0158 */  0x7C, 0x8C, 0xF0, 0xE8, 0xF8, 0x28, 0x7C, 0x76,  // |....(|v
                /* 0160 */  0x38, 0xED, 0x62, 0x8F, 0x10, 0x54, 0xD6, 0x31,  // 8.b..T.1
                /* 0168 */  0x02, 0x3D, 0xF7, 0x23, 0x0C, 0xF8, 0xD2, 0xD0,  // .=.#....
                /* 0170 */  0xAC, 0x00, 0xA1, 0xF7, 0x00, 0x11, 0xBC, 0x0E,  // ........
                /* 0178 */  0xF8, 0xC6, 0x60, 0x71, 0x30, 0x3A, 0x51, 0xE0,  // ..`q0:Q.
                /* 0180 */  0x87, 0x6E, 0xBF, 0x02, 0x10, 0x42, 0x9F, 0xDB,  // .n...B..
                /* 0188 */  0x49, 0x3C, 0x50, 0x44, 0x48, 0xD0, 0x23, 0x86,  // I<PDH.#.
                /* 0190 */  0x60, 0xCE, 0x2A, 0xD6, 0x01, 0x3C, 0x09, 0x24,  // `.*..<.$
                /* 0198 */  0x28, 0x70, 0x88, 0x68, 0x68, 0xAE, 0x13, 0x53,  // (p.hh..S
                /* 01A0 */  0x43, 0x39, 0x91, 0xB8, 0x41, 0xA3, 0x9C, 0xC0,  // C9..A...
                /* 01A8 */  0xB1, 0x78, 0x9C, 0xC7, 0xF7, 0xD8, 0xE0, 0x23,  // .x.....#
                /* 01B0 */  0xC6, 0x39, 0xBF, 0x05, 0x78, 0x70, 0x9C, 0xC0,  // .9..xp..
                /* 01B8 */  0x12, 0x1F, 0x1E, 0x3E, 0x7B, 0x50, 0x51, 0x30,  // ...>{PQ0
                /* 01C0 */  0xA8, 0xE3, 0x07, 0xE0, 0xE6, 0xFF, 0x7F, 0xFC,  // ........
                /* 01C8 */  0x00, 0x2C, 0x41, 0x3C, 0x7E, 0x80, 0x33, 0x96,  // .,A<~.3.
                /* 01D0 */  0x82, 0xF3, 0x00, 0x3B, 0x7E, 0x00, 0xDC, 0xF8,  // ...;~...
                /* 01D8 */  0xFF, 0x1F, 0x3F, 0xB8, 0x8C, 0x91, 0x1B, 0x96,  // ..?.....
                /* 01E0 */  0x8E, 0xDC, 0xC0, 0xBE, 0x4D, 0x9C, 0x89, 0x21,  // ....M..!
                /* 01E8 */  0x1E, 0x14, 0x4C, 0xE0, 0xD0, 0x10, 0xB2, 0x30,  // ..L....0
                /* 01F0 */  0x74, 0xD0, 0x7C, 0x07, 0x34, 0x74, 0x40, 0xC6,  // t.|.4t@.
                /* 01F8 */  0x09, 0x06, 0xB8, 0x61, 0x3C, 0xC1, 0x00, 0x93,  // ...a<...
                /* 0200 */  0xF0, 0x67, 0x04, 0x54, 0x5C, 0x18, 0x14, 0x81,  // .g.T\...
                /* 0208 */  0xA3, 0x1E, 0x07, 0xE8, 0xC8, 0x3C, 0x30, 0xF8,  // .....<0.
                /* 0210 */  0x07, 0x19, 0x36, 0x97, 0xDA, 0x27, 0xAD, 0x61,  // ..6..'.a
                /* 0218 */  0x9A, 0xC0, 0x23, 0x83, 0xF3, 0xFF, 0x1F, 0x19,  // ..#.....
                /* 0220 */  0xB8, 0xE6, 0x7E, 0x00, 0x98, 0xE3, 0x84, 0x07,  // ..~.....
                /* 0228 */  0xC0, 0xC1, 0x5B, 0xBD, 0x01, 0x10, 0xA5, 0x13,  // ..[.....
                /* 0230 */  0x42, 0x12, 0x84, 0x33, 0xD6, 0xDB, 0xCD, 0x19,  // B..3....
                /* 0238 */  0xBC, 0x1C, 0xF8, 0x28, 0x63, 0x8C, 0xF7, 0x83,  // ...(c...
                /* 0240 */  0xA3, 0xC2, 0x9E, 0x7F, 0x10, 0x47, 0x39, 0x94,  // .....G9.
                /* 0248 */  0xA8, 0xD3, 0x1C, 0x40, 0xA4, 0xCB, 0x0F, 0xEE,  // ...@....
                /* 0250 */  0xFC, 0x03, 0xEB, 0xFF, 0x7F, 0xFE, 0x81, 0x78,  // .......x
                /* 0258 */  0x9A, 0x03, 0xA8, 0x72, 0x0C, 0xC1, 0x1D, 0x5E,  // ...r...^
                /* 0260 */  0xC0, 0x71, 0x61, 0xC0, 0x1D, 0x4B, 0x80, 0x03,  // .qa..K..
                /* 0268 */  0x3C, 0x17, 0x78, 0xFC, 0x40, 0x49, 0x3A, 0x81,  // <.x.@I:.
                /* 0270 */  0x80, 0xE6, 0xFF, 0x7F, 0x02, 0x01, 0x58, 0x72,  // ......Xr
                /* 0278 */  0xA0, 0x03, 0x6B, 0xA8, 0x13, 0x08, 0x15, 0x74,  // ..k....t
                /* 0280 */  0x02, 0x81, 0xFE, 0xEC, 0xF0, 0x09, 0x04, 0xB8,  // ........
                /* 0288 */  0x8A, 0x1C, 0x31, 0xEA, 0xFF, 0x7F, 0x3E, 0x80,  // ..1...>.
                /* 0290 */  0x6B, 0x6D, 0x94, 0x9A, 0xE6, 0x1B, 0x08, 0xF6,  // km......
                /* 0298 */  0x00, 0x02, 0x8E, 0xF7, 0x9A, 0x0F, 0x20, 0xC0,  // ...... .
                /* 02A0 */  0x0C, 0xE4, 0xC8, 0xCE, 0xE8, 0xAC, 0xF9, 0x01,  // ........
                /* 02A8 */  0x04, 0xB8, 0x08, 0x7A, 0xE7, 0xF9, 0xF4, 0xC1,  // ...z....
                /* 02B0 */  0x61, 0x70, 0x07, 0x10, 0x40, 0xED, 0xFF, 0xFF,  // ap..@...
                /* 02B8 */  0x00, 0x02, 0x2C, 0x6F, 0x10, 0x0F, 0x20, 0xE0,  // ..,o.. .
                /* 02C0 */  0x0C, 0xF1, 0x8E, 0xD0, 0x8F, 0xC0, 0xC1, 0x21,  // .......!
                /* 02C8 */  0xA4, 0xE4, 0x5C, 0x09, 0x3D, 0xE6, 0xB9, 0x12,  // ..\.=...
                /* 02D0 */  0x54, 0x27, 0x10, 0xE0, 0x70, 0xD0, 0xC0, 0x1D,  // T'..p...
                /* 02D8 */  0x10, 0xE0, 0x12, 0xF8, 0x24, 0xED, 0x33, 0x07,  // ....$.3.
                /* 02E0 */  0x38, 0x4E, 0x57, 0x26, 0xF0, 0x60, 0xE1, 0x9C,  // 8NW&.`..
                /* 02E8 */  0x22, 0x9E, 0xFE, 0x7C, 0x17, 0x78, 0x2D, 0xF0,  // "..|.x-.
                /* 02F0 */  0x60, 0xC1, 0x77, 0x26, 0x85, 0xFB, 0xFF, 0x1F,  // `.w&....
                /* 02F8 */  0x2C, 0xE0, 0xE0, 0xE0, 0x03, 0x5C, 0x0E, 0x43,  // ,....\.C
                /* 0300 */  0xE4, 0xE0, 0x03, 0xC8, 0x9F, 0x7E, 0xF8, 0x77,  // .....~.w
                /* 0308 */  0x95, 0x08, 0xE7, 0xE5, 0x83, 0x00, 0x3B, 0xF8,  // ......;.
                /* 0310 */  0xC0, 0xFD, 0xFF, 0x1F, 0x7C, 0x00, 0x16, 0x3A,  // ....|..:
                /* 0318 */  0x3B, 0xF8, 0x00, 0xF1, 0xFF, 0xFF, 0xC1, 0x07,  // ;.......
                /* 0320 */  0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0x03, 0xDC, 0x2E,  // ........
                /* 0328 */  0x17, 0xBE, 0x5E, 0x3C, 0xA5, 0xBC, 0xF8, 0xC0,  // ..^<....
                /* 0330 */  0x3B, 0xF8, 0x40, 0x7C, 0xC4, 0xE8, 0xE0, 0x03,  // ;.@|....
                /* 0338 */  0x0C, 0xE7, 0xC5, 0x06, 0x80, 0x3F, 0xF8, 0x00,  // .....?..
                /* 0340 */  0xBE, 0xFF, 0xFF, 0x07, 0x1F, 0xC0, 0xD2, 0x70,  // .......p
                /* 0348 */  0x1F, 0x7C, 0x00, 0x5E, 0xFD, 0xFF, 0x0F, 0x3E,  // .|.^...>
                /* 0350 */  0x00, 0xF7, 0xEE, 0x28, 0x6C, 0x84, 0x0F, 0x3E,  // ...(l..>
                /* 0358 */  0x20, 0x5C, 0xB5, 0x0E, 0x3E, 0xC0, 0xE3, 0xFF,  //  \..>...
                /* 0360 */  0x7F, 0xF0, 0x81, 0x39, 0xAF, 0x97, 0x10, 0x76,  // ...9...v
                /* 0368 */  0xF0, 0x01, 0x26, 0x12, 0xD7, 0x48, 0x4F, 0x3D,  // ..&..HO=
                /* 0370 */  0x16, 0x05, 0x83, 0x3A, 0xF8, 0x00, 0x0C, 0x3A,  // ...:...:
                /* 0378 */  0xAB, 0x3E, 0xF8, 0x80, 0x33, 0xD6, 0x79, 0x40,  // .>..3.y@
                /* 0380 */  0xFF, 0xFF, 0x1F, 0x81, 0x25, 0x1D, 0x40, 0xA0,  // ....%.@.
                /* 0388 */  0x4B, 0x38, 0x80, 0x80, 0xEA, 0xDC, 0x03, 0x1C,  // K8......
                /* 0390 */  0x0E, 0x0A, 0x0F, 0x72, 0xE0, 0x39, 0x7F, 0xE0,  // ...r.9..
                /* 0398 */  0x8F, 0x04, 0xEC, 0x44, 0x0C, 0x92, 0xA5, 0xE9,  // ...D....
                /* 03A0 */  0x04, 0x02, 0x0C, 0x8F, 0x03, 0xAF, 0x05, 0x4F,  // .......O
                /* 03A8 */  0xC4, 0xC0, 0x46, 0xB2, 0xC3, 0x8B, 0x80, 0x09,  // ..F.....
                /* 03B0 */  0xC6, 0xE0, 0x90, 0xB8, 0x65, 0x52, 0x18, 0x1F,  // ....eR..
                /* 03B8 */  0x0C, 0x7C, 0x02, 0x81, 0x2B, 0x09, 0x0E, 0x35,  // .|..+..5
                /* 03C0 */  0x40, 0x9F, 0x02, 0xCE, 0xFE, 0x38, 0x8F, 0xFC,  // @....8..
                /* 03C8 */  0xFF, 0x7F, 0x20, 0xBE, 0x06, 0x3C, 0x8A, 0xC0,  // .. ..<..
                /* 03D0 */  0x38, 0x28, 0x78, 0x52, 0xA7, 0x64, 0xED, 0x07,  // 8(xR.d..
                /* 03D8 */  0x0A, 0x72, 0xB7, 0x30, 0x81, 0x4F, 0x0B, 0x0C,  // .r.0.O..
                /* 03E0 */  0x8D, 0x9F, 0x4B, 0xC0, 0x7A, 0x42, 0x78, 0x50,  // ..K.zBxP
                /* 03E8 */  0x00, 0xCB, 0x9C, 0x5F, 0x4A, 0x30, 0x27, 0x10,  // ..._J0'.
                /* 03F0 */  0x0C, 0x60, 0xBC, 0x57, 0x05, 0xA3, 0x1E, 0x95,  // .`.W....
                /* 03F8 */  0xAF, 0x0A, 0x3E, 0x89, 0x78, 0xFC, 0x61, 0x23,  // ..>.x.a#
                /* 0400 */  0x04, 0x39, 0xAF, 0x38, 0xEF, 0x21, 0x06, 0x0C,  // .9.8.!..
                /* 0408 */  0x1B, 0xDC, 0x04, 0x3E, 0x85, 0x80, 0xEF, 0x76,  // ...>...v
                /* 0410 */  0xF0, 0xE4, 0xE1, 0x23, 0xC2, 0x53, 0x08, 0x78,  // ...#.S.x
                /* 0418 */  0x0F, 0x39, 0x8E, 0x34, 0x1A, 0xD4, 0x59, 0xC1,  // .9.4..Y.
                /* 0420 */  0xE7, 0x02, 0x9F, 0x09, 0x9E, 0x61, 0x7C, 0xAD,  // .....a|.
                /* 0428 */  0x30, 0xC8, 0xB9, 0x1E, 0xDA, 0xF3, 0xC2, 0x03,  // 0.......
                /* 0430 */  0x81, 0x87, 0xCE, 0xB0, 0x1E, 0x2D, 0xD8, 0x09,  // .....-..
                /* 0438 */  0x01, 0x7F, 0x83, 0x09, 0xF8, 0x6A, 0xF0, 0xF8,  // .....j..
                /* 0440 */  0x01, 0xEB, 0x18, 0x82, 0x3F, 0x7E, 0xC1, 0x1F,  // ....?~..
                /* 0448 */  0x8F, 0x4F, 0x02, 0x3E, 0xB2, 0xF9, 0x3C, 0x44,  // .O.>..<D
                /* 0450 */  0x20, 0xF4, 0xFF, 0x1F, 0x04, 0x3F, 0xBA, 0xF1,  //  ....?..
                /* 0458 */  0x91, 0x9E, 0xD6, 0x0B, 0x81, 0xCF, 0x09, 0x87,  // ........
                /* 0460 */  0xC5, 0xCE, 0x1E, 0x3E, 0xB0, 0x81, 0x63, 0x3C,  // ...>..c<
                /* 0468 */  0xF0, 0x6F, 0x26, 0x4F, 0x19, 0xBE, 0x35, 0x78,  // .o&O..5x
                /* 0470 */  0xBE, 0x3E, 0x2D, 0xF8, 0x10, 0x02, 0xAE, 0x6B,  // .>-....k
                /* 0478 */  0x87, 0x87, 0x70, 0x12, 0xBE, 0x27, 0x60, 0x4E,  // ..p..'`N
                /* 0480 */  0x21, 0xC0, 0x40, 0x8C, 0xC0, 0xB7, 0xC1, 0xF3,  // !.@.....
                /* 0488 */  0x86, 0xC5, 0x2D, 0x54, 0x36, 0x0E, 0x3C, 0x74,  // ..-T6.<t
                /* 0490 */  0x4C, 0x16, 0x7B, 0x42, 0xD0, 0x78, 0xCE, 0xFD,  // L.{B.x..
                /* 0498 */  0xD4, 0x0E, 0xF0, 0xB5, 0xC2, 0xE7, 0x02, 0x8B,  // ........
                /* 04A0 */  0x84, 0xD2, 0x75, 0xC4, 0x10, 0x96, 0x77, 0x1E,  // ..u...w.
                /* 04A8 */  0x31, 0x84, 0x06, 0xE3, 0x93, 0x0C, 0x81, 0xA3,  // 1.......
                /* 04B0 */  0x20, 0x1E, 0xBB, 0xA3, 0x42, 0xC8, 0xC6, 0x31,  //  ...B..1
                /* 04B8 */  0x00, 0x35, 0x78, 0xDF, 0x7C, 0x38, 0x81, 0xA3,  // .5x.|8..
                /* 04C0 */  0x7D, 0x74, 0xD9, 0x59, 0x01, 0xC2, 0xC0, 0x1E,  // }t.Y....
                /* 04C8 */  0x2B, 0x8E, 0xC5, 0x87, 0x3F, 0xF0, 0x9D, 0x74,  // +...?..t
                /* 04D0 */  0xF0, 0x43, 0x7F, 0x0F, 0x30, 0x01, 0x3B, 0xD3,  // .C..0.;.
                /* 04D8 */  0xE1, 0x8E, 0x05, 0x70, 0xFE, 0xFF, 0x33, 0x78,  // ...p..3x
                /* 04E0 */  0x2D, 0xA8, 0x7A, 0x1C, 0xBA, 0x2D, 0x58, 0xDD,  // -.z..-X.
                /* 04E8 */  0x65, 0x00, 0x85, 0xF7, 0x84, 0x85, 0x3B, 0xF0,  // e.....;.
                /* 04F0 */  0x80, 0x05, 0xC8, 0x97, 0x01, 0x2B, 0x3D, 0x10,  // .....+=.
                /* 04F8 */  0xD0, 0x99, 0x84, 0x08, 0x13, 0xCD, 0xF0, 0x98,  // ........
                /* 0500 */  0xE3, 0x24, 0x1F, 0xA8, 0x47, 0xC7, 0x07, 0xEA,  // .$..G...
                /* 0508 */  0x63, 0x0C, 0x3B, 0x28, 0xE0, 0x0E, 0x51, 0x18,  // c.;(..Q.
                /* 0510 */  0x58, 0x0F, 0x9D, 0xC3, 0x1A, 0x2D, 0xEC, 0x11,  // X....-..
                /* 0518 */  0x3F, 0x43, 0xF8, 0xFE, 0xE1, 0x8B, 0x91, 0xAF,  // ?C......
                /* 0520 */  0x2D, 0x3E, 0x79, 0x80, 0xE5, 0x68, 0x09, 0x5C,  // ->y..h.\
                /* 0528 */  0xA4, 0x1D, 0x1F, 0x50, 0x07, 0x21, 0x4B, 0x3D,  // ...P.!K=
                /* 0530 */  0x3E, 0x20, 0x30, 0x0E, 0xD1, 0xE7, 0x81, 0xB3,  // > 0.....
                /* 0538 */  0x7C, 0x26, 0xF0, 0x59, 0xD6, 0xC7, 0x11, 0x9C,  // |&.Y....
                /* 0540 */  0xB0, 0x33, 0x04, 0xEA, 0x3C, 0xE6, 0x03, 0xA6,  // .3..<...
                /* 0548 */  0xCF, 0x10, 0xFC, 0x2C, 0x66, 0x30, 0x83, 0xF8,  // ...,f0..
                /* 0550 */  0x0C, 0xE1, 0x78, 0x47, 0x18, 0xF4, 0xE8, 0xAC,  // ..xG....
                /* 0558 */  0xF5, 0x20, 0x44, 0xCE, 0x0E, 0x47, 0xE7, 0x38,  // . D..G.8
                /* 0560 */  0x67, 0x08, 0xD0, 0xFF, 0xFF, 0xCF, 0x10, 0xE0,  // g.......
                /* 0568 */  0x3A, 0xC8, 0x80, 0xEF, 0xF4, 0x00, 0xBC, 0x87,  // :.......
                /* 0570 */  0xEF, 0xD3, 0x03, 0xE0, 0xED, 0x40, 0x75, 0x96,  // .....@u.
                /* 0578 */  0x47, 0xFC, 0x36, 0xE2, 0xDB, 0x03, 0xF6, 0xF4,  // G.6.....
                /* 0580 */  0x00, 0xBC, 0xFE, 0xFF, 0xA7, 0x07, 0x80, 0x07,  // ........
                /* 0588 */  0x90, 0x3E, 0x3D, 0x00, 0xEE, 0x0E, 0x0A, 0xEF,  // .>=.....
                /* 0590 */  0x7C, 0x3E, 0x3D, 0x80, 0xF1, 0xFF, 0x7F, 0x7A,  // |>=....z
                /* 0598 */  0x00, 0xB8, 0x33, 0x68, 0x9F, 0x1E, 0x00, 0x77,  // ..3h...w
                /* 05A0 */  0x37, 0x54, 0xFF, 0xFF, 0xCF, 0x6B, 0x4F, 0x0F,  // 7T...kO.
                /* 05A8 */  0x00, 0xDB, 0x60, 0xF9, 0xE9, 0x01, 0xF0, 0xF0,  // ..`.....
                /* 05B0 */  0xFF, 0x3F, 0x08, 0xE0, 0x84, 0x9D, 0x1E, 0x50,  // .?.....P
                /* 05B8 */  0x1C, 0x16, 0x7A, 0x7A, 0x80, 0x70, 0x28, 0x66,  // ..zz.p(f
                /* 05C0 */  0x83, 0x3C, 0xE2, 0xE0, 0xD5, 0x8F, 0x84, 0x1C,  // .<......
                /* 05C8 */  0x1E, 0xC0, 0xE7, 0xE4, 0xF0, 0x00, 0x68, 0x3A,  // ......h:
                /* 05D0 */  0xAF, 0x73, 0x67, 0x47, 0x65, 0x1D, 0x1E, 0x80,  // .sgGe...
                /* 05D8 */  0xFB, 0x31, 0xDD, 0x87, 0x07, 0xE0, 0xF6, 0xFF,  // .1......
                /* 05E0 */  0x3F, 0x3C, 0x80, 0xFB, 0xF8, 0x8B, 0x13, 0x75,  // ?<.....u
                /* 05E8 */  0xFC, 0x45, 0x1E, 0x1E, 0xD8, 0xB8, 0xA3, 0x84,  // .E......
                /* 05F0 */  0x0E, 0xF1, 0x22, 0x1B, 0xFB, 0xDC, 0xCE, 0xC4,  // ..".....
                /* 05F8 */  0x57, 0xEC, 0x83, 0x78, 0x1D, 0xF0, 0xF1, 0x01,  // W..x....
                /* 0600 */  0x60, 0x98, 0x87, 0xE3, 0x03, 0x68, 0xFE, 0xFF,  // `....h..
                /* 0608 */  0xE7, 0x2A, 0xC0, 0xC9, 0x8D, 0x9A, 0x5D, 0xF2,  // .*....].
                /* 0610 */  0x18, 0x56, 0x74, 0xCC, 0xB9, 0x0A, 0xE0, 0xD4,  // .Vt.....
                /* 0618 */  0xFF, 0xFF, 0xF4, 0x80, 0x03, 0xF7, 0xE9, 0x01,  // ........
                /* 0620 */  0xF0, 0x22, 0xEB, 0xF4, 0x80, 0x3A, 0x0B, 0x58,  // ."...:.X
                /* 0628 */  0xE6, 0x51, 0x41, 0x93, 0xAD, 0xF6, 0x94, 0xA0,  // .QA.....
                /* 0630 */  0xD3, 0x03, 0xBB, 0x3B, 0xE0, 0xCF, 0x0E, 0x00,  // ...;....
                /* 0638 */  0x4F, 0xFE, 0xFF, 0x67, 0x07, 0xF0, 0x9A, 0x38,  // O..g...8
                /* 0640 */  0x3B, 0x00, 0x6A, 0xF4, 0x2D, 0x50, 0x47, 0x3C,  // ;.j.-PG<
                /* 0648 */  0x9C, 0xDE, 0x97, 0x82, 0x0E, 0x32, 0x38, 0x91,  // .....28.
                /* 0650 */  0xB3, 0xD4, 0xC0, 0x03, 0x5B, 0x33, 0xB8, 0x8E,  // ....[3..
                /* 0658 */  0x00, 0x4C, 0x1F, 0xA4, 0x4E, 0x0D, 0x3E, 0x34,  // .L..N.>4
                /* 0660 */  0x58, 0x19, 0x85, 0x74, 0x1C, 0x1E, 0x50, 0xC9,  // X..t..P.
                /* 0668 */  0x8F, 0x10, 0x14, 0xC4, 0x80, 0x8E, 0x75, 0xA8,  // ......u.
                /* 0670 */  0x42, 0x9F, 0xCC, 0x3C, 0x84, 0x63, 0x74, 0x92,  // B..<.ct.
                /* 0678 */  0xAB, 0x03, 0x9D, 0x98, 0xE7, 0xC8, 0xF1, 0xD8,  // ........
                /* 0680 */  0xB8, 0x8C, 0x5A, 0xD5, 0x0C, 0x41, 0xA4, 0xE6,  // ..Z..A..
                /* 0688 */  0x48, 0x80, 0x9A, 0x80, 0x4F, 0x0E, 0x18, 0x5D,  // H...O..]
                /* 0690 */  0x17, 0x2A, 0x90, 0xE9, 0x3B, 0x38, 0x40, 0xFF,  // .*..;8@.
                /* 0698 */  0xFF, 0x1F, 0x1C, 0x60, 0xA3, 0xF3, 0x7B, 0x19,  // ...`..{.
                /* 06A0 */  0xE0, 0x68, 0x54, 0xBE, 0x97, 0x01, 0x9E, 0x54,  // .hT....T
                /* 06A8 */  0xDC, 0x3F, 0x00, 0x11, 0xFF, 0xFF, 0x1B, 0x2B,  // .?.....+
                /* 06B0 */  0x18, 0xE1, 0x2B, 0x9C, 0xB7, 0x80, 0xE3, 0x47,  // ..+....G
                /* 06B8 */  0x3A, 0x11, 0x76, 0x47, 0x04, 0x18, 0x36, 0x64,  // :.vG..6d
                /* 06C0 */  0x1F, 0x1E, 0x80, 0xD5, 0xFF, 0xFF, 0x2E, 0x04,  // ........
                /* 06C8 */  0xDC, 0x46, 0xFB, 0xF0, 0x00, 0xEF, 0x2E, 0x04,  // .F......
                /* 06D0 */  0x0C, 0xE6, 0xE3, 0xBB, 0x10, 0xC0, 0xA1, 0xFF,  // ........
                /* 06D8 */  0xFF, 0x5D, 0x08, 0x70, 0x3C, 0x72, 0xDF, 0x3F,  // .].p<r.?
                /* 06E0 */  0x00, 0x2F, 0xB1, 0xEE, 0x1F, 0xE8, 0x98, 0xF7,  // ./......
                /* 06E8 */  0x0F, 0x14, 0xEC, 0xE1, 0xD8, 0xF5, 0x35, 0x93,  // ......5.
                /* 06F0 */  0x9C, 0x40, 0x62, 0x44, 0x88, 0x14, 0x9A, 0xDC,  // .@bD....
                /* 06F8 */  0x3F, 0x28, 0x84, 0x03, 0xC1, 0x28, 0x0E, 0x84,  // ?(...(..
                /* 0700 */  0x0E, 0x0F, 0x3C, 0x00, 0x1C, 0x05, 0xF1, 0x91,  // ..<.....
                /* 0708 */  0xC1, 0x87, 0x07, 0x2B, 0x39, 0x3C, 0xA0, 0xA7,  // ...+9<..
                /* 0710 */  0x74, 0xDC, 0xBE, 0x92, 0xB0, 0xFF, 0xFF, 0xE1,  // t.......
                /* 0718 */  0x01, 0xDE, 0x09, 0x84, 0xDD, 0x85, 0x80, 0xB5,  // ........
                /* 0720 */  0x31, 0x01, 0xDA, 0x20, 0xC9, 0xF8, 0xE0, 0x68,  // 1.. ...h
                /* 0728 */  0x3F, 0x6B, 0x80, 0x62, 0x7C, 0xC0, 0xE7, 0xAC,  // ?k.b|...
                /* 0730 */  0x01, 0xAE, 0xF1, 0xF1, 0x80, 0xE3, 0x43, 0x43,  // ......CC
                /* 0738 */  0xFB, 0x34, 0x10, 0xF3, 0x70, 0x8E, 0x06, 0x33,  // .4..p..3
                /* 0740 */  0x40, 0xE0, 0x79, 0x7C, 0xF1, 0x00, 0xE1, 0xFD,  // @.y|....
                /* 0748 */  0xFF, 0x07, 0x08, 0xEF, 0x6C, 0x02, 0xBC, 0x6D,  // ....l..m
                /* 0750 */  0x9C, 0x4D, 0x00, 0x35, 0x72, 0xAE, 0x7D, 0xA8,  // .M.5r.}.
                /* 0758 */  0x51, 0x5B, 0xDE, 0xB5, 0x0F, 0x31, 0xE3, 0xE3,  // Q[...1..
                /* 0760 */  0x3D, 0x5C, 0x26, 0xEB, 0xCA, 0x87, 0x3A, 0x22,  // =\&...:"
                /* 0768 */  0x59, 0xCE, 0x19, 0x09, 0x45, 0x65, 0x30, 0x53,  // Y...Ee0S
                /* 0770 */  0xF8, 0x54, 0xE0, 0x70, 0x67, 0x24, 0xF4, 0x79,  // .T.pg$.y
                /* 0778 */  0x81, 0x8D, 0x8F, 0x9D, 0x1B, 0x80, 0xE7, 0xFF,  // ........
                /* 0780 */  0xFF, 0xC6, 0x07, 0xB8, 0xD2, 0x71, 0x6E, 0x00,  // .....qn.
                /* 0788 */  0xA4, 0xCD, 0xF1, 0x84, 0xBB, 0x3C, 0x37, 0x00,  // .....<7.
                /* 0790 */  0x62, 0xFE, 0xFF, 0xE7, 0x06, 0xC0, 0xA3, 0x8F,  // b.......
                /* 0798 */  0x73, 0x03, 0xA0, 0x46, 0xD0, 0xB9, 0x01, 0x2D,  // s..F...-
                /* 07A0 */  0xF0, 0xA4, 0xA0, 0x09, 0x36, 0x3F, 0x07, 0x02,  // ....6?..
                /* 07A8 */  0xFD, 0x34, 0xE4, 0x0B, 0x30, 0x18, 0xC7, 0xC3,  // .4..0...
                /* 07B0 */  0x4F, 0x8C, 0xE0, 0xFF, 0xFF, 0x1F, 0x1C, 0x80,  // O.......
                /* 07B8 */  0xDF, 0x40, 0x3D, 0x0A, 0x8F, 0xA1, 0xE7, 0x83,  // .@=.....
                /* 07C0 */  0x03, 0x90, 0x1F, 0xC4, 0x83, 0x03, 0x60, 0xEE,  // ......`.
                /* 07C8 */  0x1A, 0xE2, 0x83, 0x03, 0xF0, 0xFA, 0xFF, 0x1F,  // ........
                /* 07D0 */  0x1C, 0x00, 0x1E, 0x18, 0x3D, 0x38, 0x00, 0xEA,  // ....=8..
                /* 07D8 */  0xCE, 0x43, 0x0F, 0x0E, 0x60, 0xFE, 0xFF, 0x1F,  // .C..`...
                /* 07E0 */  0x1C, 0x00, 0x9E, 0x0C, 0xE0, 0xC1, 0x01, 0x30,  // .......0
                /* 07E8 */  0x23, 0xEB, 0xE0, 0x80, 0x3A, 0x0B, 0x58, 0xE6,  // #...:.X.
                /* 07F0 */  0x51, 0x41, 0x73, 0x3D, 0xC2, 0xA7, 0xE7, 0x13,  // QAs=....
                /* 07F8 */  0x8B, 0x19, 0xE3, 0x70, 0xA2, 0xC7, 0x3F, 0xE6,  // ...p..?.
                /* 0800 */  0xF3, 0x89, 0x70, 0x00, 0xCF, 0x0E, 0xD8, 0xFF,  // ..p.....
                /* 0808 */  0xFF, 0xD9, 0x01, 0x1C, 0x27, 0x62, 0xFC, 0x0C,  // ....'b..
                /* 0810 */  0x4E, 0xE2, 0x84, 0x42, 0x3C, 0xD3, 0xC1, 0x3D,  // N..B<..=
                /* 0818 */  0x3B, 0x00, 0xE7, 0x13, 0x2E, 0xE0, 0x01, 0xC2,  // ;.......
                /* 0820 */  0x67, 0x07, 0xC0, 0x4B, 0x92, 0xB7, 0x81, 0xCE,  // g..K....
                /* 0828 */  0x0E, 0x1C, 0xD6, 0xFF, 0xFF, 0x64, 0x8B, 0xD4,  // .....d..
                /* 0830 */  0xD9, 0x81, 0x61, 0x1C, 0x96, 0x67, 0x13, 0xE5,  // ..a..g..
                /* 0838 */  0x35, 0x86, 0x11, 0x4C, 0x03, 0xA7, 0x33, 0x83,  // 5..L..3.
                /* 0840 */  0x8F, 0x0C, 0xCE, 0x01, 0x23, 0xD5, 0x47, 0x79,  // ....#.Gy
                /* 0848 */  0x94, 0xCE, 0xA3, 0x3C, 0x05, 0xF1, 0x81, 0xC1,  // ...<....
                /* 0850 */  0xB1, 0x20, 0x64, 0xE4, 0x70, 0x89, 0x56, 0x7C,  // . d.p.V|
                /* 0858 */  0x29, 0xD0, 0x90, 0x12, 0x0C, 0x72, 0x72, 0xA0,  // )....rr.
                /* 0860 */  0x83, 0xF1, 0x10, 0xB9, 0x86, 0xC3, 0x25, 0x02,  // ......%.
                /* 0868 */  0xB6, 0xAA, 0x01, 0x82, 0x48, 0xCD, 0x85, 0x00,  // ....H...
                /* 0870 */  0x35, 0x01, 0xDF, 0x1B, 0x30, 0x23, 0xC6, 0x9D,  // 5...0#..
                /* 0878 */  0x1B, 0xE0, 0x8A, 0x83, 0x51, 0xAE, 0xB1, 0xA1,  // ....Q...
                /* 0880 */  0x55, 0x80, 0xE8, 0x30, 0xE0, 0x7B, 0x07, 0x9B,  // U..0.{..
                /* 0888 */  0x1B, 0xF0, 0x9B, 0xBD, 0xE7, 0x06, 0xFE, 0x0B,  // ........
                /* 0890 */  0x09, 0x66, 0x6E, 0xE0, 0xFF, 0xFF, 0xCF, 0x0D,  // .fn.....
                /* 0898 */  0xFE, 0x79, 0xC1, 0x73, 0x03, 0x97, 0xBE, 0xD3,  // .y.s....
                /* 08A0 */  0x08, 0xC8, 0xD1, 0xF9, 0xA5, 0x06, 0xFE, 0xA0,  // ........
                /* 08A8 */  0x71, 0x33, 0xF1, 0xCD, 0xC9, 0x93, 0xF6, 0x61,  // q3.....a
                /* 08B0 */  0x82, 0x11, 0x0C, 0x73, 0xAB, 0x01, 0x9A, 0x50,  // ...s...P
                /* 08B8 */  0x9E, 0x37, 0xB8, 0x2E, 0x35, 0xC0, 0xFB, 0x8E,  // .7..5...
                /* 08C0 */  0xE2, 0x4B, 0x0D, 0xAC, 0xFF, 0xFF, 0xA5, 0x06,  // .K......
                /* 08C8 */  0x30, 0x10, 0xE9, 0x52, 0x83, 0xE2, 0x70, 0xC4,  // 0..R..p.
                /* 08D0 */  0x4B, 0x0D, 0x62, 0xB6, 0xB1, 0x43, 0x87, 0x88,  // K.b..C..
                /* 08D8 */  0x5B, 0x3B, 0x86, 0x8E, 0x35, 0x18, 0x68, 0x5D,  // [;..5.h]
                /* 08E0 */  0x6B, 0x50, 0x61, 0x60, 0x14, 0xEF, 0xF0, 0x80,  // kPa`....
                /* 08E8 */  0x0A, 0x74, 0x78, 0xA0, 0x20, 0x1E, 0xB7, 0xAF,  // .tx. ...
                /* 08F0 */  0x35, 0x00, 0x3B, 0xFE, 0xFF, 0xD7, 0x1A, 0x70,  // 5.;....p
                /* 08F8 */  0x9F, 0x55, 0x80, 0x45, 0xD8, 0xF3, 0x01, 0xEA,  // .U.E....
                /* 0900 */  0x88, 0xE0, 0x19, 0x19, 0xC4, 0x03, 0xF3, 0x8D,  // ........
                /* 0908 */  0xDF, 0x83, 0xC6, 0xDD, 0xE7, 0xF0, 0x47, 0x15,  // ......G.
                /* 0910 */  0xE0, 0x79, 0xE3, 0x01, 0xDF, 0xC9, 0x06, 0x30,  // .y.....0
                /* 0918 */  0xF5, 0xFF, 0x3F, 0xD9, 0x00, 0x26, 0x34, 0x9F,  // ..?..&4.
                /* 0920 */  0x6C, 0x00, 0x35, 0x0A, 0x97, 0xA8, 0x8B, 0x28,  // l.5....(
                /* 0928 */  0x4E, 0xF1, 0xF3, 0x40, 0x27, 0x1B, 0x36, 0xC7,  // N..@'.6.
                /* 0930 */  0xB3, 0xE0, 0x07, 0x1B, 0x9C, 0x46, 0x40, 0x1D,  // .....F@.
                /* 0938 */  0x6C, 0xB8, 0x3A, 0x18, 0x69, 0x59, 0xB0, 0x4E,  // l.:.iY.N
                /* 0940 */  0x1A, 0x3C, 0xFD, 0xF5, 0x8F, 0x82, 0x78, 0xE0,  // .<....x.
                /* 0948 */  0x3E, 0xD8, 0x00, 0xFB, 0xFF, 0xFF, 0xC1, 0x06,  // >.......
                /* 0950 */  0x70, 0x7B, 0x0D, 0x80, 0x33, 0x97, 0x57, 0x88,  // p{..3.W.
                /* 0958 */  0x27, 0x07, 0x1F, 0xFF, 0x00, 0x1F, 0x37, 0x45,  // '.....7E
                /* 0960 */  0xE0, 0xFD, 0xFF, 0x9F, 0x1B, 0x3B, 0xB9, 0x80,  // .....;..
                /* 0968 */  0xEF, 0xA6, 0x08, 0xD8, 0x1E, 0x89, 0x2F, 0x40,  // ....../@
                /* 0970 */  0x80, 0xA3, 0x8B, 0xBF, 0x2F, 0x40, 0xE0, 0xFB,  // ..../@..
                /* 0978 */  0xFF, 0x5F, 0x80, 0x80, 0xA7, 0xC8, 0x0B, 0x10,  // ._......
                /* 0980 */  0x0A, 0xD6, 0xA2, 0x2F, 0x40, 0x88, 0x9B, 0xA2,  // .../@...
                /* 0988 */  0x67, 0xE3, 0x03, 0x10, 0x46, 0xE8, 0xFD, 0x07,  // g...F...
                /* 0990 */  0x25, 0x11, 0x46, 0xA2, 0x8F, 0xD3, 0x28, 0x99,  // %.F...(.
                /* 0998 */  0xF7, 0x1F, 0x0A, 0xE2, 0xE3, 0x34, 0xC0, 0xA1,  // .....4..
                /* 09A0 */  0xFF, 0xFF, 0xFD, 0x07, 0xB0, 0x78, 0xA5, 0x04,  // .....x..
                /* 09A8 */  0x4C, 0x5F, 0x8D, 0xC0, 0x77, 0x04, 0x82, 0xFF,  // L_..w...
                /* 09B0 */  0xFF, 0x3F, 0x02, 0x01, 0x9C, 0x80, 0x79, 0x04,  // .?....y.
                /* 09B8 */  0x02, 0x2C, 0x1D, 0x05, 0x7C, 0x04, 0xC2, 0x5C,  // .,..|..\
                /* 09C0 */  0x29, 0x31, 0x28, 0x81, 0xC3, 0x1C, 0x10, 0x93,  // )1(.....
                /* 09C8 */  0x79, 0x06, 0x42, 0x09, 0x84, 0x91, 0x98, 0x2B,  // y.B....+
                /* 09D0 */  0x25, 0x2A, 0x3E, 0x95, 0xFE, 0xFF, 0x70, 0x06,  // %*>...p.
                /* 09D8 */  0xF1, 0x95, 0x12, 0xE0, 0xFD, 0xFF, 0x7F, 0x6C,  // .......l
                /* 09E0 */  0x30, 0x82, 0x41, 0x48, 0xC9, 0x95, 0x12, 0x62,  // 0.AH...b
                /* 09E8 */  0x92, 0x2B, 0x25, 0x50, 0xD4, 0x35, 0x37, 0xD0,  // .+%P.57.
                /* 09F0 */  0x18, 0x13, 0xA0, 0xED, 0xBC, 0x04, 0x44, 0x24,  // ......D$
                /* 09F8 */  0x9D, 0x97, 0x50, 0x22, 0xCE, 0x4B, 0x14, 0xC4,  // ..P".K..
                /* 0A00 */  0xF3, 0x77, 0xC0, 0x49, 0xA3, 0x4F, 0x40, 0x70,  // .w.I.O@p
                /* 0A08 */  0xE2, 0x9C, 0x80, 0x80, 0xAA, 0xB0, 0x81, 0x83,  // ........
                /* 0A10 */  0xEC, 0x08, 0x04, 0xFB, 0xFF, 0x7F, 0x04, 0x02,  // ........
                /* 0A18 */  0x6E, 0x50, 0x8F, 0x40, 0x80, 0x19, 0xA1, 0x87,  // nP.@....
                /* 0A20 */  0x4A, 0xB4, 0xF0, 0x43, 0x25, 0x84, 0x1B, 0x10,  // J..C%...
                /* 0A28 */  0x46, 0xEC, 0x09, 0x08, 0x75, 0x08, 0xF2, 0xA1,  // F...u...
                /* 0A30 */  0x12, 0x70, 0xF9, 0xFF, 0x3F, 0x54, 0x02, 0xDC,  // .p..?T..
                /* 0A38 */  0x0C, 0x7C, 0xAA, 0x41, 0x45, 0x3C, 0xD5, 0x50,  // .|.AE<.P
                /* 0A40 */  0x10, 0x0F, 0xCC, 0xC7, 0x44, 0x9F, 0x6A, 0x70,  // ....D.jp
                /* 0A48 */  0x87, 0x4A, 0xFC, 0xA1, 0x06, 0x3C, 0xFF, 0xFF,  // .J...<..
                /* 0A50 */  0x43, 0x25, 0x70, 0x38, 0xD4, 0x80, 0xEF, 0x10,  // C%p8....
                /* 0A58 */  0x04, 0xF0, 0x46, 0xF5, 0x21, 0x08, 0x28, 0xFD,  // ..F.!.(.
                /* 0A60 */  0xFF, 0x0F, 0x41, 0xC0, 0x43, 0xF1, 0xB1, 0x12,  // ..A.C...
                /* 0A68 */  0x9D, 0xE0, 0x10, 0x84, 0x40, 0x38, 0xAF, 0xA0,  // ....@8..
                /* 0A70 */  0xB1, 0xBB, 0xBE, 0x58, 0xA2, 0x08, 0x6A, 0x3E,  // ...X..j>
                /* 0A78 */  0x05, 0xA1, 0xD4, 0xC2, 0x48, 0xD9, 0xB1, 0x12,  // ....H...
                /* 0A80 */  0xA5, 0x05, 0x46, 0x70, 0x06, 0xF1, 0xB1, 0x12,  // ..Fp....
                /* 0A88 */  0xE0, 0xD7, 0xFF, 0xFF, 0x14, 0x04, 0x98, 0x4A,  // .......J
                /* 0A90 */  0x09, 0x21, 0x1B, 0xC7, 0x4A, 0x88, 0x53, 0xF4,  // .!..J.S.
                /* 0A98 */  0xB1, 0x12, 0xF8, 0x89, 0x9C, 0x1B, 0xF4, 0x09,  // ........
                /* 0AA0 */  0xBC, 0x55, 0x3C, 0x99, 0x1C, 0xC6, 0x59, 0x1C,  // .U<...Y.
                /* 0AA8 */  0x44, 0x75, 0x02, 0x3C, 0x1E, 0x38, 0x74, 0x5E,  // Du.<.8t^
                /* 0AB0 */  0x79, 0x7A, 0x79, 0x64, 0x79, 0xE1, 0x38, 0xC4,  // yzydy.8.
                /* 0AB8 */  0x9A, 0x11, 0xA4, 0x4C, 0x80, 0xB5, 0xCB, 0x25,  // ...L...%
                /* 0AC0 */  0x20, 0xE4, 0xFF, 0x7F, 0x11, 0x02, 0xD8, 0x70,  //  ......p
                /* 0AC8 */  0xB2, 0x79, 0x11, 0x02, 0xCC, 0xC8, 0xBE, 0x08,  // .y......
                /* 0AD0 */  0xA1, 0x63, 0x5C, 0x84, 0xA0, 0x9C, 0x2F, 0x39,  // .c\.../9
                /* 0AD8 */  0x81, 0x2F, 0x99, 0xBE, 0x08, 0x71, 0xC9, 0xB7,  // ./...q..
                /* 0AE0 */  0x4B, 0x88, 0xFF, 0xFF, 0xDB, 0x25, 0xC0, 0xFF,  // K....%..
                /* 0AE8 */  0xFF, 0xFF, 0xED, 0x12, 0x18, 0x85, 0x3F, 0xD6,  // ......?.
                /* 0AF0 */  0xA0, 0xE2, 0x1E, 0x6B, 0x28, 0x88, 0x07, 0xE6,  // ...k(...
                /* 0AF8 */  0xA8, 0x27, 0x24, 0xF4, 0xED, 0x12, 0x1F, 0xED,  // .'$.....
                /* 0B00 */  0x76, 0x09, 0x54, 0xEF, 0x48, 0xC0, 0xE3, 0x2C,  // v.T.H..,
                /* 0B08 */  0x04, 0xD8, 0xFB, 0xFF, 0x9F, 0x85, 0x80, 0xF9,  // ........
                /* 0B10 */  0xE9, 0xE6, 0x59, 0x08, 0x30, 0x73, 0xA7, 0xF4,  // ..Y.0s..
                /* 0B18 */  0x59, 0x88, 0x4B, 0x81, 0x90, 0xD2, 0x2F, 0x88,  // Y.K.../.
                /* 0B20 */  0x06, 0x7C, 0x5E, 0x7D, 0x5E, 0x84, 0x10, 0x87,  // .|^}^...
                /* 0B28 */  0x0F, 0x5F, 0x3E, 0x74, 0x04, 0xA2, 0x57, 0x11,  // ._>t..W.
                /* 0B30 */  0x2B, 0xA3, 0x90, 0x92, 0xF3, 0x06, 0x2A, 0xFB,  // +.....*.
                /* 0B38 */  0xDD, 0x85, 0x82, 0x18, 0xD0, 0xC1, 0x8E, 0x0E,  // ........
                /* 0B40 */  0xE8, 0xE3, 0x8D, 0x87, 0xF3, 0x24, 0xEF, 0x0B,  // .....$..
                /* 0B48 */  0x83, 0x93, 0xDC, 0x84, 0x80, 0xA2, 0xAE, 0x6B,  // .......k
                /* 0B50 */  0x03, 0x94, 0xFF, 0xFF, 0xB5, 0x01, 0xE6, 0x9D,  // ........
                /* 0B58 */  0x05, 0x58, 0xC8, 0x99, 0x34, 0x6A, 0xCF, 0x9E,  // .X..4j..
                /* 0B60 */  0xB4, 0x29, 0x3C, 0x69, 0x87, 0x3B, 0xF7, 0xA0,  // .)<i.;..
                /* 0B68 */  0xEF, 0x2C, 0xF8, 0x30, 0xB7, 0x0F, 0xA0, 0x79,  // .,.0...y
                /* 0B70 */  0x4A, 0x02, 0xDF, 0xE5, 0x03, 0x78, 0x0F, 0xD1,  // J....x..
                /* 0B78 */  0x97, 0x0F, 0xE0, 0xF3, 0xFF, 0xBF, 0x7C, 0x00,  // ......|.
                /* 0B80 */  0x8F, 0xB8, 0x8F, 0x04, 0x5D, 0x3E, 0x70, 0xF1,  // ....]>p.
                /* 0B88 */  0x5F, 0x01, 0xBA, 0x7C, 0xB0, 0xDB, 0x32, 0x66,  // _..|..2f
                /* 0B90 */  0xFC, 0x0E, 0x7D, 0x62, 0xA0, 0xB7, 0x26, 0x1E,  // ..}b..&.
                /* 0B98 */  0xF6, 0xE0, 0x80, 0x8A, 0x07, 0x47, 0x41, 0x7C,  // .....GA|
                /* 0BA0 */  0xD2, 0x87, 0x77, 0xF9, 0xC0, 0xDC, 0x82, 0x60,  // ..w....`
                /* 0BA8 */  0x9E, 0x3E, 0xD8, 0xC1, 0x01, 0x98, 0x10, 0xF8,  // .>......
                /* 0BB0 */  0x16, 0x04, 0xBE, 0x73, 0x06, 0x78, 0xC7, 0x07,  // ...s.x..
                /* 0BB8 */  0x7C, 0xCE, 0x19, 0xF0, 0xFF, 0xFF, 0xE7, 0x0C,  // |.......
                /* 0BC0 */  0xC0, 0x03, 0xCA, 0x73, 0x06, 0x60, 0x46, 0xDB,  // ...s.`F.
                /* 0BC8 */  0x9D, 0x09, 0xAD, 0xF5, 0xCE, 0x04, 0xE1, 0xB6,  // ........
                /* 0BD0 */  0xC0, 0x14, 0xDE, 0x99, 0x50, 0xDA, 0xEE, 0x4C,  // ....P..L
                /* 0BD8 */  0x80, 0xA6, 0xFF, 0xFF, 0x9D, 0x09, 0xD8, 0x0A,  // ........
                /* 0BE0 */  0x9A, 0x34, 0x4A, 0xC2, 0x5D, 0x85, 0x82, 0x78,  // .4J.]..x
                /* 0BE8 */  0xD2, 0xBE, 0xAB, 0xC0, 0xB9, 0x7C, 0xE0, 0x4E,  // .....|.N
                /* 0BF0 */  0x80, 0xC0, 0x73, 0x54, 0x3E, 0x01, 0x02, 0x9E,  // ..sT>...
                /* 0BF8 */  0x46, 0xF9, 0xF6, 0x01, 0xFE, 0xFF, 0xFF, 0xED,  // F.......
                /* 0C00 */  0x03, 0x98, 0x45, 0xBE, 0x34, 0xA1, 0x60, 0x2D,  // ..E.4.`-
                /* 0C08 */  0xE1, 0xF6, 0x81, 0xB8, 0x34, 0x61, 0x0E, 0x00,  // ....4a..
                /* 0C10 */  0x3C, 0xF6, 0xAD, 0x09, 0x15, 0x98, 0x42, 0xD7,  // <.....B.
                /* 0C18 */  0x26, 0x1F, 0x1D, 0x78, 0x40, 0x38, 0x0A, 0xE2,  // &..x@8..
                /* 0C20 */  0x5B, 0x13, 0xE0, 0xEF, 0xA4, 0x01, 0xDE, 0x5B,  // [......[
                /* 0C28 */  0x13, 0x70, 0x1A, 0x1F, 0xFB, 0xFF, 0x9F, 0x34,  // .p.....4
                /* 0C30 */  0x00, 0x43, 0xC6, 0xAF, 0x4D, 0x80, 0x3C, 0x67,  // .C..M.<g
                /* 0C38 */  0x47, 0x67, 0x5D, 0x9B, 0x00, 0x37, 0xFF, 0xFF,  // Gg]..7..
                /* 0C40 */  0x6B, 0x13, 0xE0, 0xC9, 0xC9, 0xB5, 0x09, 0xD0,  // k.......
                /* 0C48 */  0x75, 0x5C, 0x60, 0xB7, 0x0F, 0x60, 0x3E, 0xCC,  // u\`..`>.
                /* 0C50 */  0xB7, 0x0F, 0xB0, 0xFC, 0xFF, 0xAF, 0x4D, 0x80,  // ......M.
                /* 0C58 */  0x97, 0x03, 0x00, 0xBF, 0x36, 0x01, 0xAE, 0x4F,  // ....6..O
                /* 0C60 */  0x1A, 0xE0, 0x1C, 0x1F, 0xF8, 0xFF, 0xFF, 0x27,  // .......'
                /* 0C68 */  0x0D, 0xC0, 0xDD, 0x38, 0x9F, 0x34, 0x00, 0x33,  // ...8.4.3
                /* 0C70 */  0x02, 0x4F, 0x1A, 0xA8, 0x43, 0x80, 0x05, 0x1F,  // .O..C...
                /* 0C78 */  0xBA, 0xC9, 0x15, 0xC0, 0x1E, 0x87, 0x48, 0x60,  // ......H`
                /* 0C80 */  0x82, 0x07, 0x8E, 0x72, 0x96, 0xC7, 0x69, 0xF0,  // ...r..i.
                /* 0C88 */  0x0A, 0xA7, 0xA4, 0x31, 0x04, 0x3A, 0xEF, 0x83,  // ...1.:..
                /* 0C90 */  0x8A, 0xF0, 0x7E, 0x62, 0x70, 0x9D, 0x37, 0x50,  // ..~bp.7P
                /* 0C98 */  0x92, 0x28, 0x74, 0xF2, 0x01, 0x4E, 0xFF, 0xFF,  // .(t..N..
                /* 0CA0 */  0x93, 0x0F, 0xF0, 0x39, 0x6F, 0x80, 0xEB, 0x00,  // ...9o...
                /* 0CA8 */  0x01, 0xFC, 0xC5, 0x1F, 0x20, 0x00, 0x35, 0x2A,  // .... .5*
                /* 0CB0 */  0x97, 0xA8, 0x6B, 0x1C, 0x4E, 0xF5, 0xFB, 0x40,  // ..k.N..@
                /* 0CB8 */  0x07, 0x08, 0x76, 0x8D, 0xE3, 0x77, 0x73, 0x5F,  // ..v..ws_
                /* 0CC0 */  0xE6, 0x04, 0xA6, 0x6B, 0x1C, 0x57, 0x09, 0x23,  // ...k.W.#
                /* 0CC8 */  0x55, 0xCB, 0xD5, 0xC9, 0x81, 0xEB, 0x80, 0x11,  // U.......
                /* 0CD0 */  0x9C, 0x41, 0x3C, 0x6C, 0xC7, 0x3A, 0xD5, 0xA3,  // .A<l.:..
                /* 0CD8 */  0xC7, 0xE4, 0xFF, 0xBF, 0xE2, 0x3B, 0x81, 0x8E,  // .....;..
                /* 0CE0 */  0x20, 0x0E, 0x72, 0x8C, 0x03, 0x8A, 0x47, 0x7A,  //  .r...Gz
                /* 0CE8 */  0x70, 0x65, 0x1B, 0x1B, 0xFA, 0x98, 0x64, 0xCD,  // pe....d.
                /* 0CF0 */  0x88, 0x02, 0x3C, 0x9A, 0x73, 0xC1, 0xCC, 0x0E,  // ..<.s...
                /* 0CF8 */  0xF8, 0xDD, 0xFF, 0xC1, 0x97, 0x6C, 0x76, 0x68,  // .....lvh
                /* 0D00 */  0x1D, 0x37, 0x12, 0x32, 0x9A, 0xDA, 0x21, 0x35,  // .7.2..!5
                /* 0D08 */  0x9B, 0x47, 0x06, 0x4F, 0x0E, 0xF8, 0x1D, 0x19,  // .G.O....
                /* 0D10 */  0x3C, 0x39, 0x70, 0xFD, 0xFF, 0xA3, 0x9D, 0xBE,  // <9p.....
                /* 0D18 */  0xD0, 0x93, 0xF3, 0x44, 0x5E, 0x05, 0x22, 0xBC,  // ...D^.".
                /* 0D20 */  0xD3, 0xF8, 0x32, 0x09, 0x1C, 0x91, 0x7C, 0x99,  // ..2...|.
                /* 0D28 */  0x04, 0xCE, 0x72, 0xEE, 0x40, 0xA8, 0xA7, 0x82,  // ..r.@...
                /* 0D30 */  0xCF, 0x0A, 0xA6, 0xF0, 0x05, 0xC0, 0xE1, 0x8E,  // ........
                /* 0D38 */  0x08, 0xE8, 0x3B, 0x10, 0x3E, 0xCC, 0x1D, 0x08,  // ..;.>...
                /* 0D40 */  0x68, 0x8E, 0xC4, 0x77, 0x04, 0x70, 0x5D, 0x81,  // h..w.p].
                /* 0D48 */  0xC0, 0xF8, 0xFF, 0xBF, 0x02, 0x01, 0x0B, 0xF3,  // ........
                /* 0D50 */  0x57, 0x20, 0x40, 0x8D, 0x90, 0x2B, 0x10, 0x5A,  // W @..+.Z
                /* 0D58 */  0xD8, 0x15, 0x08, 0x71, 0x97, 0xC4, 0x8C, 0xDF,  // ...q....
                /* 0D60 */  0x72, 0xAE, 0x40, 0x14, 0xC2, 0x42, 0x60, 0x24,  // r.@..B`$
                /* 0D68 */  0x03, 0x42, 0x07, 0x07, 0x1E, 0xFC, 0x0A, 0x44,  // .B.....D
                /* 0D70 */  0x41, 0x7C, 0xBD, 0xF0, 0xED, 0xC3, 0x57, 0x20,  // A|....W 
                /* 0D78 */  0x78, 0xE7, 0x06, 0x78, 0x37, 0x49, 0xE0, 0x74,  // x..x7I.t
                /* 0D80 */  0x6E, 0x00, 0x57, 0xC0, 0xD1, 0xA1, 0xC7, 0xEC,  // n.W.....
                /* 0D88 */  0x9B, 0xCA, 0xFF, 0xFF, 0x25, 0x08, 0x3F, 0x40,  // ....%.?@
                /* 0D90 */  0x60, 0x7A, 0x0E, 0x02, 0xDF, 0x45, 0xCF, 0x03,  // `z...E..
                /* 0D98 */  0xC4, 0x01, 0xFB, 0x1C, 0x84, 0x1D, 0x1F, 0x30,  // .......0
                /* 0DA0 */  0xBD, 0x09, 0x81, 0xEF, 0x3C, 0xE0, 0x9B, 0x10,  // ....<...
                /* 0DA8 */  0x0E, 0xD8, 0x37, 0x21, 0xEC, 0x45, 0x15, 0x98,  // ..7!.E..
                /* 0DB0 */  0x42, 0xF9, 0x62, 0x88, 0xF9, 0xFF, 0xDF, 0x6B,  // B.b....k
                /* 0DB8 */  0xC1, 0x72, 0xE8, 0x01, 0xEF, 0xF8, 0x80, 0xCF,  // .r......
                /* 0DC0 */  0xA1, 0x07, 0xF0, 0xA4, 0xFE, 0xD0, 0x03, 0xA8,  // ........
                /* 0DC8 */  0xD1, 0x79, 0xE8, 0x41, 0xFE, 0xFF, 0x09, 0xEA,  // .y.A....
                /* 0DD0 */  0xBE, 0x46, 0x42, 0xB8, 0x2D, 0x30, 0xB5, 0xD7,  // .FB.-0..
                /* 0DD8 */  0x48, 0x94, 0xCE, 0x6B, 0x24, 0x40, 0xEC, 0xFF,  // H..k$@..
                /* 0DE0 */  0xFF, 0x35, 0x12, 0xE0, 0xD4, 0xD1, 0x1C, 0xFE,  // .5......
                /* 0DE8 */  0xAC, 0x71, 0x47, 0x73, 0xE0, 0x3D, 0x12, 0xDF,  // .qGs.=..
                /* 0DF0 */  0x98, 0xFC, 0xFF, 0xBF, 0x31, 0x81, 0xEB, 0x0E,  // ....1...
                /* 0DF8 */  0x04, 0xBC, 0xDD, 0xDF, 0x81, 0x00, 0x35, 0x62,  // ......5b
                /* 0E00 */  0xEE, 0x40, 0x28, 0x58, 0x8B, 0xBB, 0x47, 0x42,  // .@(X..GB
                /* 0E08 */  0x39, 0x00, 0x70, 0x41, 0x17, 0x49, 0x94, 0x14,  // 9.pA.I..
                /* 0E10 */  0x18, 0xDD, 0x24, 0x7D, 0x74, 0xE0, 0xD1, 0x2F,  // ..$}t../
                /* 0E18 */  0x41, 0x14, 0xC4, 0x17, 0x49, 0xE0, 0xFA, 0xFF,  // A...I...
                /* 0E20 */  0xBF, 0x48, 0x02, 0xFC, 0xFF, 0xFF, 0x5F, 0x24,  // .H...._$
                /* 0E28 */  0x01, 0x0F, 0xC7, 0x1E, 0xF0, 0x5E, 0x24, 0x81,  // .....^$.
                /* 0E30 */  0xD3, 0xB1, 0x07, 0xF0, 0x24, 0xFF, 0xD8, 0x03,  // ....$...
                /* 0E38 */  0x14, 0xFE, 0xFF, 0x37, 0x49, 0x60, 0xEE, 0x4C,  // ...7I`.L
                /* 0E40 */  0x80, 0xB2, 0x9B, 0x24, 0x40, 0xC1, 0xFF, 0xFF,  // ...$@...
                /* 0E48 */  0x4D, 0x12, 0x60, 0xB6, 0x93, 0x3B, 0x10, 0x48,  // M.`..;.H
                /* 0E50 */  0xFE, 0xFF, 0x37, 0x49, 0xC0, 0xC4, 0xA1, 0x85,  // ..7I....
                /* 0E58 */  0xDD, 0x81, 0x80, 0xB9, 0xFD, 0x9B, 0x24, 0xA0,  // ......$.
                /* 0E60 */  0xEF, 0x00, 0xC0, 0x6F, 0x92, 0x60, 0xFB, 0xFF,  // ...o.`..
                /* 0E68 */  0xDF, 0x24, 0x01, 0xFE, 0xFF, 0xFF, 0x6F, 0x92,  // .$....o.
                /* 0E70 */  0x80, 0xF1, 0x63, 0x0F, 0x38, 0x6F, 0x92, 0xC0,  // ..c.8o..
                /* 0E78 */  0xFD, 0xD8, 0x03, 0xEC, 0xFE, 0xFF, 0xC7, 0x1E,  // ........
                /* 0E80 */  0x30, 0xE8, 0x3F, 0xF6, 0x00, 0x6A, 0xB2, 0xBD,  // 0.?..j..
                /* 0E88 */  0x70, 0x74, 0xEC, 0xE1, 0x67, 0x01, 0x67, 0x5D,  // pt..g.g]
                /* 0E90 */  0xA6, 0x6E, 0x92, 0x30, 0x14, 0x0E, 0x84, 0x9C,  // .n.0....
                /* 0E98 */  0x72, 0x9C, 0x0E, 0x50, 0x77, 0x49, 0x9E, 0x0B,  // r..PwI..
                /* 0EA0 */  0x46, 0x29, 0xCE, 0x3D, 0xA8, 0x8B, 0xA5, 0xE1,  // F).=....
                /* 0EA8 */  0x0C, 0x62, 0x0F, 0x77, 0x49, 0x40, 0xF4, 0xFF,  // .b.wI@..
                /* 0EB0 */  0xFF, 0x2E, 0x09, 0x30, 0x3C, 0xD8, 0x4D, 0x00,  // ...0<.M.
                /* 0EB8 */  0x7D, 0x1A, 0xF1, 0x64, 0x5E, 0x76, 0x3C, 0x9A,  // }..d^v<.
                /* 0EC0 */  0x18, 0xFF, 0xFF, 0x27, 0x01, 0x60, 0x38, 0x0E,  // ...'.`8.
                /* 0EC8 */  0x9F, 0x04, 0xC0, 0x35, 0x38, 0x38, 0x27, 0x97,  // ...588'.
                /* 0ED0 */  0x80, 0xAF, 0x0D, 0x8F, 0x35, 0x1E, 0x1C, 0x30,  // ....5..0
                /* 0ED8 */  0x3C, 0xF7, 0xF0, 0xC1, 0x81, 0xE7, 0x8E, 0x0A,  // <.......
                /* 0EE0 */  0xD8, 0xFB, 0xFF, 0xDF, 0xAE, 0xC0, 0x35, 0x72,  // ......5r
                /* 0EE8 */  0xDF, 0xAE, 0x00, 0x4F, 0xFE, 0x6F, 0x57, 0x80,  // ...O.oW.
                /* 0EF0 */  0x9A, 0x20, 0xB7, 0x2B, 0x14, 0x87, 0x83, 0xDD,  // . .+....
                /* 0EF8 */  0xAE, 0x10, 0x77, 0x54, 0xEC, 0xF1, 0x0A, 0x03,  // ..wT....
                /* 0F00 */  0xAD, 0xEB, 0x15, 0x85, 0x70, 0x04, 0x18, 0x05,  // ....p...
                /* 0F08 */  0x80, 0xD0, 0xE1, 0x81, 0x4B, 0x86, 0xA3, 0x20,  // ....K.. 
                /* 0F10 */  0x1E, 0x91, 0x6F, 0xA9, 0xE0, 0xFA, 0xFF, 0xDF,  // ..o.....
                /* 0F18 */  0x52, 0x01, 0xFE, 0xFF, 0xFF, 0x6F, 0xA9, 0x80,  // R....o..
                /* 0F20 */  0xC3, 0x70, 0x17, 0x2D, 0xE8, 0xC7, 0x01, 0xE0,  // .p.-....
                /* 0F28 */  0x79, 0xD5, 0x02, 0xDF, 0xF0, 0xE0, 0x5C, 0xB5,  // y.....\.
                /* 0F30 */  0x70, 0xC3, 0x03, 0x8E, 0xFF, 0x7F, 0x02, 0x5F,  // p......_
                /* 0F38 */  0xB6, 0xC0, 0x77, 0x03, 0x06, 0x3C, 0x1C, 0xAA,  // ..w..<..
                /* 0F40 */  0x00, 0x57, 0x01, 0x0E, 0x55, 0x80, 0x96, 0xFF,  // .W..U...
                /* 0F48 */  0x3F, 0x81, 0x95, 0x2D, 0x50, 0x87, 0x2A, 0x7E,  // ?..-P.*~
                /* 0F50 */  0x1C, 0xB2, 0xD2, 0x07, 0x8C, 0x86, 0x6B, 0x88,  // ......k.
                /* 0F58 */  0x37, 0x60, 0x7E, 0x5B, 0xF0, 0x55, 0x4F, 0x60,  // 7`~[.UO`
                /* 0F60 */  0xBA, 0xFF, 0x72, 0x65, 0x14, 0x52, 0x72, 0xBA,  // ..re.Rr.
                /* 0F68 */  0x43, 0x65, 0x3F, 0xFD, 0x50, 0x10, 0x03, 0xFA,  // Ce?.P...
                /* 0F70 */  0x86, 0xE8, 0x93, 0x03, 0x4E, 0x05, 0x88, 0xA6,  // ....N...
                /* 0F78 */  0x60, 0x84, 0x13, 0x7A, 0xF3, 0x04, 0x86, 0x04,  // `..z....
                /* 0F80 */  0xBE, 0x79, 0x82, 0xE7, 0xDA, 0xC0, 0x6E, 0x88,  // .y....n.
                /* 0F88 */  0xC0, 0x42, 0xCE, 0xA4, 0x51, 0x7B, 0xF6, 0xA4,  // .B..Q{..
                /* 0F90 */  0x4D, 0xE1, 0x49, 0xFB, 0xAE, 0x02, 0xE7, 0xF6,  // M.I.....
                /* 0F98 */  0x81, 0xBB, 0xAB, 0xC0, 0xBB, 0x21, 0x02, 0x9F,  // .....!..
                /* 0FA0 */  0x6B, 0x16, 0xF6, 0xFF, 0x7F, 0x57, 0x01, 0xC3,  // k....W..
                /* 0FA8 */  0xE5, 0x03, 0x78, 0x27, 0xB8, 0x7C, 0x00, 0x6A,  // ..x'.|.j
                /* 0FB0 */  0xE2, 0x3E, 0x12, 0x74, 0xF9, 0xC0, 0xC5, 0x7F,  // .>.t....
                /* 0FB8 */  0x05, 0xE8, 0xF2, 0xC1, 0x2E, 0x88, 0x98, 0xF1,  // ........
                /* 0FC0 */  0x3B, 0xF4, 0x89, 0x81, 0x42, 0x38, 0x2E, 0x85,  // ;...B8..
                /* 0FC8 */  0xC2, 0x1E, 0x1C, 0x50, 0xF1, 0xE0, 0x28, 0x88,  // ...P..(.
                /* 0FD0 */  0x07, 0xED, 0x5B, 0x10, 0x9C, 0xCB, 0x07, 0xE6,  // ..[.....
                /* 0FD8 */  0x16, 0x04, 0xBC, 0xFE, 0xFF, 0xD7, 0x43, 0x58,  // ......CX
                /* 0FE0 */  0xB7, 0x20, 0xF0, 0x9D, 0x33, 0xC0, 0x7B, 0x3B,  // . ..3.{;
                /* 0FE8 */  0x04, 0xFE, 0xE7, 0x0C, 0xE0, 0xDD, 0xE0, 0x9C,  // ........
                /* 0FF0 */  0x01, 0x88, 0xF8, 0xFF, 0x9F, 0x03, 0x60, 0x68,  // ......`h
                /* 0FF8 */  0xBB, 0x33, 0xA1, 0xB5, 0xDE, 0x99, 0x20, 0x1C,  // .3.... .
                /* 1000 */  0x07, 0x99, 0xC2, 0x3B, 0x13, 0x4A, 0xDB, 0x9D,  // ...;.J..
                /* 1008 */  0x09, 0x20, 0xC5, 0x29, 0x1D, 0xFE, 0x69, 0x14,  // . .)..i.
                /* 1010 */  0x77, 0x4A, 0x07, 0xDE, 0xFF, 0xFF, 0x51, 0xF9,  // wJ....Q.
                /* 1018 */  0x30, 0x0A, 0xBE, 0xDB, 0x07, 0xF0, 0x8E, 0x70,  // 0......p
                /* 1020 */  0xFB, 0x00, 0xD4, 0x44, 0xBE, 0x34, 0xA1, 0x60,  // ...D.4.`
                /* 1028 */  0x2D, 0xE1, 0xF6, 0x81, 0xB8, 0x34, 0x61, 0x0E,  // -....4a.
                /* 1030 */  0x00, 0x3C, 0xF6, 0xAD, 0x09, 0x15, 0x98, 0x42,  // .<.....B
                /* 1038 */  0xD7, 0x26, 0x1F, 0x1D, 0x78, 0x40, 0x38, 0x0A,  // .&..x@8.
                /* 1040 */  0xE2, 0x5B, 0x13, 0x70, 0xFC, 0xFF, 0xDF, 0x9A,  // .[.p....
                /* 1048 */  0x80, 0xDB, 0x49, 0x03, 0xBC, 0xB7, 0x26, 0xE0,  // ..I...&.
                /* 1050 */  0x74, 0xD2, 0x00, 0x3C, 0x55, 0x38, 0x69, 0x00,  // t..<U8i.
                /* 1058 */  0xDD, 0xFF, 0xFF, 0xB5, 0x09, 0xD8, 0x5C, 0x17,  // ......\.
                /* 1060 */  0xD8, 0xB5, 0x09, 0x60, 0xD0, 0x3D, 0x1C, 0x9C,  // ...`.=..
                /* 1068 */  0xD7, 0x26, 0xB0, 0xFE, 0xFF, 0x6F, 0x1F, 0xC0,  // .&...o..
                /* 1070 */  0xE2, 0x1E, 0x0E, 0xFC, 0x33, 0x5C, 0x9B, 0x00,  // ....3\..
                /* 1078 */  0x7D, 0x07, 0x00, 0x7E, 0x6D, 0x02, 0xC6, 0xFF,  // }..~m...
                /* 1080 */  0xFF, 0x6B, 0x13, 0x30, 0x3F, 0x69, 0x80, 0xF3,  // .k.0?i..
                /* 1088 */  0xDA, 0x04, 0xDC, 0x4F, 0x1A, 0xC0, 0xBF, 0xC3,  // ...O....
                /* 1090 */  0x49, 0x03, 0x48, 0xFD, 0xFF, 0x4F, 0x1A, 0xC0,  // I.H..O..
                /* 1098 */  0x22, 0xCF, 0xDB, 0x40, 0x27, 0x0D, 0x7E, 0x16,  // "..@'.~.
                /* 10A0 */  0x70, 0xBE, 0x45, 0xEA, 0xDA, 0x04, 0x43, 0xE1,  // p.E...C.
                /* 10A8 */  0x40, 0xC8, 0x08, 0x12, 0x4C, 0x04, 0xA8, 0x8B,  // @...L...
                /* 10B0 */  0x13, 0xCF, 0x02, 0x23, 0xE5, 0x24, 0x3A, 0x6A,  // ...#.$:j
                /* 10B8 */  0xF0, 0x5B, 0x94, 0xE1, 0x0C, 0xE2, 0x13, 0x83,  // .[......
                /* 10C0 */  0x2F, 0x4E, 0x80, 0xAF, 0xC1, 0xF9, 0xCC, 0x8D,  // /N......
                /* 10C8 */  0x9F, 0xCC, 0x6B, 0x86, 0x47, 0xF3, 0x60, 0xE4,  // ..k.G.`.
                /* 10D0 */  0x20, 0x93, 0x03, 0x7A, 0x27, 0x6E, 0xB0, 0xFD,  //  ..z'n..
                /* 10D8 */  0xFF, 0x07, 0x07, 0xEB, 0xCC, 0x10, 0xF0, 0x41,  // .......A
                /* 10E0 */  0xE0, 0x81, 0xC2, 0x83, 0x03, 0x86, 0x27, 0x06,  // ......'.
                /* 10E8 */  0x0F, 0x0E, 0x5C, 0x17, 0x32, 0xC0, 0x34, 0x94,  // ..\.2.4.
                /* 10F0 */  0xEF, 0x35, 0xC0, 0xEF, 0xFF, 0x7F, 0xAF, 0x01,  // .5......
                /* 10F8 */  0x1E, 0x21, 0xEE, 0x35, 0x80, 0x1A, 0xB9, 0xF7,  // .!.5....
                /* 1100 */  0x1A, 0x14, 0x87, 0xE5, 0xDF, 0x6B, 0x10, 0x17,  // .....k..
                /* 1108 */  0x32, 0xEC, 0xC1, 0x06, 0x03, 0xAD, 0x8B, 0x0D,  // 2.......
                /* 1110 */  0x85, 0xB0, 0x50, 0x18, 0xC9, 0x84, 0xD0, 0xE1,  // ..P.....
                /* 1118 */  0x81, 0x0B, 0x83, 0xA3, 0x20, 0x1E, 0xB9, 0xAF,  // .... ...
                /* 1120 */  0x64, 0x80, 0xBB, 0xFF, 0x7F, 0xB8, 0xBB, 0x0D,  // d.......
                /* 1128 */  0xF4, 0x30, 0x57, 0x32, 0xA0, 0x7A, 0x63, 0x01,  // .0W2.zc.
                /* 1130 */  0xD7, 0xF0, 0xE0, 0xDC, 0x6E, 0x70, 0xC3, 0x03,  // ....np..
                /* 1138 */  0x9E, 0xF7, 0x1B, 0xF0, 0x5D, 0xF7, 0x00, 0x0F,  // ....]...
                /* 1140 */  0xE7, 0x18, 0xFE, 0xFF, 0x3F, 0xC7, 0x00, 0x8E,  // ....?...
                /* 1148 */  0x4A, 0x9C, 0x63, 0x00, 0x35, 0xE2, 0xEE, 0xA9,  // J.c.5...
                /* 1150 */  0x28, 0x51, 0x10, 0x12, 0xFB, 0xC4, 0xD0, 0x11,  // (Q......
                /* 1158 */  0xE6, 0x64, 0xFB, 0x1C, 0xB0, 0xC0, 0x4F, 0xFB,  // .d....O.
                /* 1160 */  0xB0, 0x3D, 0xE2, 0xA3, 0x8E, 0x71, 0x66, 0x1E,  // .=...qf.
                /* 1168 */  0xD1, 0x39, 0xD7, 0x3E, 0x38, 0x7A, 0x20, 0xD0,  // .9.>8z .
                /* 1170 */  0x5D, 0x15, 0x25, 0x89, 0x42, 0xA7, 0x2A, 0xF0,  // ].%.B.*.
                /* 1178 */  0x4D, 0xE1, 0x2C, 0x4F, 0xF8, 0xCD, 0xE0, 0xF0,  // M.,O....
                /* 1180 */  0x7C, 0xAA, 0x02, 0xEF, 0xFF, 0xFF, 0x24, 0x03,  // |.....$.
                /* 1188 */  0x1C, 0x8F, 0x0F, 0xC0, 0x3B, 0xDF, 0xF1, 0x01,  // ....;...
                /* 1190 */  0x50, 0x23, 0xEA, 0xD6, 0x8C, 0x16, 0x79, 0x54,  // P#....yT
                /* 1198 */  0xD0, 0xE5, 0xC1, 0x2A, 0x05, 0x78, 0x1C, 0x22,  // ...*.x."
                /* 11A0 */  0x99, 0xEE, 0x4B, 0x8B, 0x3D, 0x8F, 0x83, 0x1C,  // ..K.=...
                /* 11A8 */  0x1D, 0xC0, 0xA7, 0xE4, 0xE8, 0x00, 0xAA, 0xFF,  // ........
                /* 11B0 */  0xFF, 0xD1, 0x01, 0x70, 0x60, 0x4C, 0x80, 0xB6,  // ...p`L..
                /* 11B8 */  0xA3, 0x03, 0x90, 0x8F, 0x7B, 0x74, 0x00, 0xD4,  // ....{t..
                /* 11C0 */  0x48, 0x3A, 0x3A, 0xA0, 0x25, 0x1E, 0x1D, 0xD0,  // H::.%...
                /* 11C8 */  0x22, 0xE7, 0xA1, 0x19, 0xB2, 0x61, 0xE8, 0xE8,  // "....a..
                /* 11D0 */  0x80, 0x3A, 0x39, 0x58, 0xCE, 0xD1, 0x01, 0x45,  // .:9X...E
                /* 11D8 */  0x65, 0x30, 0x53, 0xF8, 0xE8, 0xE0, 0x03, 0x18,  // e0S.....
                /* 11E0 */  0xFF, 0xFF, 0x1F, 0x1D, 0xE0, 0x1D, 0xC0, 0xE0,  // ........
                /* 11E8 */  0x1D, 0x1D, 0x80, 0xD3, 0x01, 0x0C, 0x5C, 0x27,  // ......\'
                /* 11F0 */  0x07, 0xE0, 0x5D, 0xF7, 0xE4, 0x00, 0xA8, 0x11,  // ..].....
                /* 11F8 */  0x74, 0x72, 0x40, 0x49, 0x19, 0xB9, 0x4F, 0x0A,  // tr@I..O.
                /* 1200 */  0x9A, 0xAD, 0x8F, 0x54, 0x31, 0x42, 0x9E, 0x4D,  // ...T1B.M
                /* 1208 */  0xC5, 0x23, 0x23, 0x07, 0x07, 0x58, 0xFF, 0xFF,  // .##..X..
                /* 1210 */  0x83, 0x03, 0xF0, 0x39, 0x65, 0x02, 0xA7, 0x83,  // ...9e...
                /* 1218 */  0x03, 0xE0, 0x28, 0xF3, 0x09, 0x06, 0xD0, 0x75,  // ..(....u
                /* 1220 */  0x70, 0x60, 0x27, 0x98, 0xFF, 0xFF, 0x21, 0x7A,  // p`'...!z
                /* 1228 */  0x8E, 0x87, 0xE8, 0x69, 0xF8, 0x04, 0x03, 0xB0,  // ...i....
                /* 1230 */  0xAB, 0xF3, 0xC9, 0x01, 0x50, 0xF2, 0xFF, 0x3F,  // ....P..?
                /* 1238 */  0x39, 0x80, 0xE1, 0x7A, 0xE9, 0x93, 0x03, 0x30,  // 9..z...0
                /* 1240 */  0x3E, 0xC2, 0x00, 0xDE, 0x43, 0x9F, 0x1C, 0x80,  // >...C...
                /* 1248 */  0xEE, 0xFF, 0xFF, 0x08, 0x03, 0x5C, 0xCE, 0x74,  // .....\.t
                /* 1250 */  0x00, 0xCF, 0x4A, 0x9F, 0x1C, 0x80, 0xCA, 0xFF,  // ..J.....
                /* 1258 */  0xFF, 0x98, 0x0B, 0xDC, 0x8E, 0x02, 0x3E, 0xE6,  // ......>.
                /* 1260 */  0xDA, 0xEA, 0x60, 0x35, 0xC6, 0xC7, 0x5C, 0x1C,  // ..`5..\.
                /* 1268 */  0xC4, 0x23, 0xC0, 0x09, 0x3C, 0x3A, 0x00, 0xFC,  // .#..<:..
                /* 1270 */  0x0A, 0x7E, 0x74, 0x00, 0xC5, 0xFF, 0xFF, 0xE8,  // .~t.....
                /* 1278 */  0x00, 0x18, 0x39, 0x4C, 0xB1, 0xA3, 0x03, 0x70,  // ..9L...p
                /* 1280 */  0x3E, 0x4D, 0x01, 0xCE, 0xFF, 0xFF, 0xF7, 0x04,  // >M......
                /* 1288 */  0x17, 0x3F, 0x4D, 0x01, 0xBA, 0x0E, 0x31, 0xB8,  // .?M...1.
                /* 1290 */  0xD3, 0x14, 0xC0, 0x9F, 0xFF, 0xFF, 0xC9, 0x01,  // ........
                /* 1298 */  0x3C, 0xC9, 0x4F, 0x0E, 0x80, 0x1A, 0x81, 0x0B,  // <.O.....
                /* 12A0 */  0xD4, 0xC9, 0x81, 0x73, 0x58, 0xF0, 0x43, 0x41,  // ...sX.CA
                /* 12A8 */  0x3A, 0x27, 0xAD, 0xE1, 0x3E, 0x39, 0x30, 0x94,  // :'..>90.
                /* 12B0 */  0x53, 0x8C, 0xED, 0xC1, 0x45, 0xAE, 0x19, 0x5C,  // S...E..\
                /* 12B8 */  0xD0, 0x04, 0x52, 0x87, 0x06, 0x9F, 0x19, 0x2C,  // ..R....,
                /* 12C0 */  0x8D, 0x42, 0x42, 0xCE, 0x0E, 0xA8, 0xE8, 0x27,  // .BB....'
                /* 12C8 */  0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3A, 0x3B, 0xA0,  // ..b@.:;.
                /* 12D0 */  0x55, 0x80, 0xE8, 0x1A, 0x70, 0x8C, 0x11, 0xCE,  // U...p...
                /* 12D8 */  0x29, 0xC1, 0x20, 0x57, 0x07, 0x3A, 0x33, 0x4F,  // ). W.:3O
                /* 12E0 */  0x92, 0x6B, 0xB8, 0xC3, 0x20, 0x70, 0xAB, 0x9A,  // .k.. p..
                /* 12E8 */  0x22, 0x88, 0xD4, 0x9C, 0x09, 0x50, 0x13, 0xF0,  // "....P..
                /* 12F0 */  0xC9, 0x01, 0x73, 0x71, 0x00, 0x97, 0xBE, 0x8B,  // ..sq....
                /* 12F8 */  0x03, 0xC8, 0xFE, 0xFF, 0x17, 0x07, 0x3C, 0x3A,  // ......<:
                /* 1300 */  0x3F, 0x80, 0x78, 0xD0, 0x5C, 0xC2, 0xF9, 0x83,  // ?.x.\...
                /* 1308 */  0x82, 0x78, 0xD0, 0x8E, 0x07, 0x21, 0x25, 0xE7,  // .x...!%.
                /* 1310 */  0x0F, 0xA8, 0x71, 0xCE, 0x1F, 0x40, 0x73, 0x54,  // ..q..@sT
                /* 1318 */  0x16, 0x36, 0x6D, 0xD0, 0x18, 0x13, 0xA0, 0xED,  // .6m.....
                /* 1320 */  0xB8, 0xC0, 0x0E, 0x20, 0x40, 0x3B, 0xFD, 0x01,  // ... @;..
                /* 1328 */  0x04, 0xD0, 0xF2, 0xFF, 0x27, 0xB0, 0x94, 0xB7,  // ....'...
                /* 1330 */  0x81, 0xCE, 0x64, 0x38, 0x11, 0x8B, 0xD4, 0x01,  // ..d8....
                /* 1338 */  0x04, 0xA7, 0x75, 0xBE, 0xD2, 0x08, 0x21, 0x98,  // ..u...!.
                /* 1340 */  0x9E, 0x21, 0x49, 0xEC, 0xF3, 0x07, 0x2A, 0x30,  // .!I...*0
                /* 1348 */  0x85, 0x02, 0x9E, 0x1D, 0x50, 0x91, 0xCE, 0x0E,  // ....P...
                /* 1350 */  0x14, 0xC4, 0xC3, 0xF6, 0xF9, 0x03, 0xB0, 0x15,  // ........
                /* 1358 */  0xEC, 0xD6, 0x04, 0xE5, 0xF6, 0xE2, 0xEB, 0xB6,  // ........
                /* 1360 */  0xC5, 0x0F, 0x0E, 0x28, 0x4E, 0xDF, 0x67, 0x15,  // ...(N.g.
                /* 1368 */  0x60, 0xFB, 0xFF, 0x3F, 0x2D, 0x90, 0xA3, 0x17,  // `..?-...
                /* 1370 */  0xE8, 0x0E, 0x0D, 0x8F, 0x5E, 0xC0, 0x78, 0x4C,  // ....^.xL
                /* 1378 */  0x3E, 0x7A, 0x01, 0xE7, 0xF0, 0x47, 0x15, 0xD0,  // >z...G..
                /* 1380 */  0xB5, 0x3F, 0xAA, 0x00, 0x5D, 0xB1, 0xE7, 0x00,  // .?..]...
                /* 1388 */  0xD0, 0x60, 0xBC, 0x6E, 0x45, 0x38, 0xAD, 0x50,  // .`.nE8.P
                /* 1390 */  0x67, 0x7E, 0x4A, 0x11, 0x63, 0x86, 0x39, 0xE6,  // g~J.c.9.
                /* 1398 */  0x58, 0xFF, 0xFF, 0x30, 0x21, 0xC2, 0x9E, 0x49,  // X..0!..I
                /* 13A0 */  0x98, 0xE6, 0xB1, 0x35, 0x32, 0xCF, 0xCF, 0xC7,  // ...52...
                /* 13A8 */  0x04, 0x9D, 0xC2, 0x50, 0xA7, 0x02, 0x87, 0x3B,  // ...P...;
                /* 13B0 */  0x85, 0x21, 0x0E, 0xA6, 0xEC, 0xD4, 0x82, 0x8F,  // .!......
                /* 13B8 */  0x73, 0x6A, 0xA1, 0x10, 0x0E, 0x02, 0xA3, 0x18,  // sj......
                /* 13C0 */  0x10, 0x3A, 0x45, 0x70, 0xE1, 0x70, 0x14, 0xC4,  // .:Ep.p..
                /* 13C8 */  0x67, 0x07, 0x9F, 0x22, 0xE0, 0x9C, 0x5A, 0x30,  // g.."..Z0
                /* 13D0 */  0x07, 0x53, 0xC0, 0xCC, 0xF0, 0xE0, 0xDC, 0x5B,  // .S.....[
                /* 13D8 */  0x70, 0xC3, 0x03, 0x9E, 0x37, 0x17, 0xF0, 0x9D,  // p...7...
                /* 13E0 */  0x50, 0xE0, 0xFE, 0xFF, 0x0F, 0xBD, 0xC0, 0xF5,  // P.......
                /* 13E8 */  0x84, 0x02, 0xBC, 0xCF, 0x66, 0xE0, 0x8B, 0x7F,  // ....f...
                /* 13F0 */  0x36, 0x03, 0xD4, 0xA8, 0x3B, 0x96, 0xA0, 0xD5,  // 6...;...
                /* 13F8 */  0xBE, 0x02, 0x34, 0xD9, 0x6A, 0x0F, 0x09, 0x3A,  // ..4.j..:
                /* 1400 */  0x9B, 0xF1, 0x53, 0x8A, 0xCF, 0xDF, 0x3E, 0x96,  // ..S...>.
                /* 1408 */  0x1C, 0x88, 0xF5, 0x9D, 0xCD, 0x50, 0xCA, 0x28,  // .....P.(
                /* 1410 */  0xA4, 0xE3, 0xAC, 0x84, 0x3A, 0xA5, 0xFA, 0xFF,  // ....:...
                /* 1418 */  0x0F, 0x67, 0x10, 0x03, 0x3A, 0xD6, 0xC0, 0x51,  // .g..:..Q
                /* 1420 */  0x90, 0x3E, 0x56, 0xB1, 0x21, 0x3A, 0xC9, 0xD1,  // .>V.!:..
                /* 1428 */  0x0C, 0x28, 0xEA, 0xBA, 0x36, 0x40, 0x1F, 0xC4,  // .(..6@..
                /* 1430 */  0x6B, 0x03, 0x73, 0x36, 0xC4, 0x37, 0x4D, 0x20,  // k.s6.7M 
                /* 1438 */  0x3A, 0x67, 0xDC, 0xED, 0x03, 0x7F, 0xD3, 0x04,  // :g......
                /* 1440 */  0x5C, 0x8C, 0x1B, 0x7B, 0xFD, 0x00, 0xD7, 0xFF,  // \..{....
                /* 1448 */  0xFF, 0xFA, 0x01, 0x6C, 0xC4, 0xAC, 0x4D, 0xD7,  // ...l..M.
                /* 1450 */  0x0F, 0xC0, 0x4B, 0xE4, 0x2B, 0x3C, 0xEA, 0x2C,  // ..K.+<.,
                /* 1458 */  0x60, 0x09, 0xD7, 0x0F, 0xC4, 0x25, 0x8B, 0x5F,  // `....%._
                /* 1460 */  0x3F, 0xB0, 0xA1, 0xEF, 0xF0, 0xA8, 0xB8, 0x14,  // ?.......
                /* 1468 */  0x0A, 0x7B, 0x76, 0x40, 0xC5, 0x83, 0xA3, 0x20,  // .{v@... 
                /* 1470 */  0x1E, 0xB6, 0x2F, 0x42, 0x3E, 0x3B, 0xE0, 0x0E,  // ../B>;..
                /* 1478 */  0x08, 0x6C, 0x88, 0xEC, 0xE8, 0x00, 0xEF, 0x8E,  // .l......
                /* 1480 */  0x05, 0x9C, 0x8E, 0x0E, 0xE0, 0x3B, 0x69, 0xFC,  // .....;i.
                /* 1488 */  0xFF, 0x9F, 0x34, 0xC0, 0x7A, 0xC9, 0x02, 0x4E,  // ..4.z..N
                /* 1490 */  0x27, 0x0D, 0xC0, 0x93, 0x99, 0x93, 0x06, 0xA0,  // '.......
                /* 1498 */  0x46, 0xD2, 0x49, 0x03, 0x05, 0x4B, 0xC6, 0xA6,  // F.I..K..
                /* 14A0 */  0x7B, 0x13, 0x4E, 0xE4, 0x3C, 0x74, 0xAC, 0xE0,  // {.N.<t..
                /* 14A8 */  0xB2, 0x4E, 0x18, 0xE4, 0xFF, 0x0F, 0xC1, 0x8E,  // .N......
                /* 14B0 */  0x3C, 0xBE, 0xB1, 0x82, 0xEF, 0xB2, 0x8E, 0xBB,  // <.......
                /* 14B8 */  0xB1, 0x02, 0xCF, 0xCB, 0x21, 0xF8, 0x4E, 0x0E,  // ....!.N.
                /* 14C0 */  0xC0, 0x5B, 0xCD, 0xC9, 0x01, 0x50, 0x13, 0xFE,  // .[...P..
                /* 14C8 */  0x02, 0x87, 0x02, 0xFF, 0xFF, 0x07, 0x16, 0x90,  // ........
                /* 14D0 */  0x4E, 0x0E, 0xEC, 0xDE, 0xE0, 0xFB, 0x0A, 0xE6,  // N.......
                /* 14D8 */  0x26, 0x72, 0x72, 0x27, 0xE2, 0xB9, 0xBD, 0xB4,  // &rr'....
                /* 14E0 */  0xE0, 0xEE, 0xEB, 0x30, 0x4E, 0x3C, 0x3E, 0x3E,  // ...0N<>>
                /* 14E8 */  0xF0, 0x40, 0xC7, 0x07, 0x0A, 0xE2, 0xA1, 0xFB,  // .@......
                /* 14F0 */  0x12, 0x07, 0xB8, 0xBA, 0xDA, 0xFB, 0x84, 0x04,  // ........
                /* 14F8 */  0x03, 0xF0, 0x7C, 0xCF, 0x0D, 0x18, 0x8E, 0xDE,  // ..|.....
                /* 1500 */  0x07, 0x3E, 0x60, 0xFD, 0xFF, 0x3F, 0xF0, 0xC1,  // .>`..?..
                /* 1508 */  0x76, 0x72, 0x5A, 0x81, 0x7A, 0xE0, 0x03, 0x9E,  // vrZ.z...
                /* 1510 */  0x63, 0xF2, 0xB9, 0x09, 0xFE, 0x69, 0x85, 0x9F,  // c....i..
                /* 1518 */  0x9B, 0x80, 0xBF, 0x9B, 0xE3, 0x0A, 0x20, 0xEC,  // ...... .
                /* 1520 */  0xFF, 0x7F, 0x5C, 0xF1, 0x51, 0x05, 0xC6, 0x0D,  // ..\.Q...
                /* 1528 */  0xE0, 0x99, 0x05, 0x7B, 0x5C, 0x01, 0x98, 0xFD,  // ...{\...
                /* 1530 */  0xFF, 0x3F, 0xAE, 0x00, 0x2C, 0x3A, 0xFF, 0xF9,  // .?..,:..
                /* 1538 */  0xF2, 0x0E, 0x58, 0xFB, 0xFF, 0xC3, 0xB6, 0x3A,  // ..X....:
                /* 1540 */  0x35, 0x1D, 0x36, 0xAC, 0x19, 0x5A, 0x04, 0xBE,  // 5.6..Z..
                /* 1548 */  0xBC, 0x03, 0xEC, 0x01, 0xE5, 0xD7, 0x0F, 0xE0,  // ........
                /* 1550 */  0x7E, 0x07, 0x06, 0xCB, 0x18, 0x8E, 0xC2, 0xFF,  // ~.......
                /* 1558 */  0xFF, 0x31, 0xBC, 0x6B, 0xBF, 0x7E, 0x00, 0x77,  // .1.k.~.w
                /* 1560 */  0x3B, 0xD7, 0x0F, 0x40, 0x4D, 0xF4, 0xEB, 0x07,  // ;..@M...
                /* 1568 */  0x4A, 0x14, 0x84, 0xA4, 0x5C, 0x3D, 0x41, 0x30,  // J...\=A0
                /* 1570 */  0xE6, 0xB7, 0x00, 0xDF, 0xBD, 0x00, 0x57, 0xFF,  // ......W.
                /* 1578 */  0xFF, 0xBB, 0x17, 0x38, 0xEF, 0x4D, 0xB8, 0xBB,  // ...8.M..
                /* 1580 */  0x17, 0xE0, 0xE3, 0xD2, 0x84, 0x3D, 0xAD, 0x00,  // .....=..
                /* 1588 */  0xA6, 0xEF, 0x5E, 0xE0, 0x38, 0xAD, 0xC0, 0xF9,  // ..^.8...
                /* 1590 */  0xFF, 0x9F, 0x56, 0x80, 0xB3, 0x9E, 0xD3, 0x0A,  // ..V.....
                /* 1598 */  0x20, 0xED, 0xA4, 0x82, 0xBD, 0x78, 0x02, 0x1E,  //  ....x..
                /* 15A0 */  0xFF, 0xFF, 0xA7, 0x15, 0xF0, 0x9C, 0x34, 0x70,  // ......4p
                /* 15A8 */  0x17, 0x4F, 0xC0, 0xC8, 0x31, 0x03, 0x77, 0xF1,  // .O..1.w.
                /* 15B0 */  0x04, 0xD8, 0xF2, 0xFF, 0x3F, 0xAD, 0x00, 0x4F,  // ....?..O
                /* 15B8 */  0x3F, 0xA7, 0x15, 0x40, 0x8D, 0xB6, 0xD3, 0x0A,  // ?..@....
                /* 15C0 */  0x0A, 0xD6, 0x5A, 0x2F, 0x9E, 0xE8, 0xEB, 0x0A,  // ..Z/....
                /* 15C8 */  0xBF, 0x77, 0x02, 0x4E, 0xFF, 0xFF, 0x57, 0x2F,  // .w.N..W/
                /* 15D0 */  0x60, 0x7F, 0x00, 0xC2, 0xDD, 0x3B, 0x01, 0x4E,  // `....;.N
                /* 15D8 */  0x1C, 0x02, 0x7C, 0xFB, 0x00, 0x76, 0xFF, 0xFF,  // ..|..v..
                /* 15E0 */  0xDB, 0x07, 0x98, 0x2F, 0x5A, 0xBE, 0x7D, 0xE0,  // .../Z.}.
                /* 15E8 */  0x5E, 0x0A, 0xBE, 0x7D, 0xB0, 0xD1, 0xBE, 0x7D,  // ^..}...}
                /* 15F0 */  0xE0, 0x43, 0x9F, 0x19, 0x28, 0x84, 0xE3, 0x52,  // .C..(..R
                /* 15F8 */  0x28, 0xEC, 0xD1, 0x01, 0x75, 0xF3, 0x32, 0x98,  // (...u.2.
                /* 1600 */  0x41, 0x3C, 0x6A, 0x87, 0xBB, 0x7D, 0xA0, 0xCF,  // A<j..}..
                /* 1608 */  0x07, 0x6C, 0x84, 0xEC, 0xE4, 0x00, 0xEF, 0xF8,  // .l......
                /* 1610 */  0xC1, 0x4E, 0x0E, 0xC0, 0x84, 0xC0, 0x27, 0x07,  // .N....'.
                /* 1618 */  0x30, 0x5C, 0x83, 0xB0, 0x07, 0x0D, 0xF0, 0x8E,  // 0\......
                /* 1620 */  0x0F, 0xF8, 0x1C, 0x34, 0xC0, 0xF6, 0xFF, 0x3F,  // ...4...?
                /* 1628 */  0x68, 0x00, 0x7B, 0x43, 0x07, 0x0D, 0x40, 0x4D,  // h.{C..@M
                /* 1630 */  0xD8, 0x83, 0x06, 0x6A, 0xD4, 0x0E, 0x3F, 0x36,  // ...j..?6
                /* 1638 */  0x1D, 0x34, 0xD8, 0x80, 0x23, 0xF8, 0x98, 0x01,  // .4..#...
                /* 1640 */  0x58, 0xFC, 0xFF, 0x1F, 0x33, 0x00, 0x56, 0x85,  // X...3.V.
                /* 1648 */  0xA6, 0xD4, 0x31, 0x03, 0xF0, 0x22, 0xE9, 0x78,  // ..1..".x
                /* 1650 */  0x84, 0xFC, 0xFF, 0xC3, 0xEA, 0x19, 0xA0, 0x5B,  // .......[
                /* 1658 */  0x46, 0x8D, 0xA3, 0xD6, 0x5D, 0x8F, 0x1D, 0x73,  // F...]..s
                /* 1660 */  0x7D, 0xAC, 0xE0, 0xB2, 0x0E, 0x1A, 0xA8, 0x33,  // }......3
                /* 1668 */  0x95, 0xE5, 0x1C, 0x34, 0x50, 0x54, 0x06, 0x33,  // ...4PT.3
                /* 1670 */  0x85, 0x0F, 0x6A, 0x3E, 0x68, 0xD8, 0xC8, 0xAD,  // ..j>h...
                /* 1678 */  0x13, 0x6A, 0x98, 0x83, 0x1A, 0xD0, 0x1C, 0x1E,  // .j......
                /* 1680 */  0xB9, 0x75, 0x82, 0x46, 0xDC, 0xC9, 0x01, 0xA8,  // .u.F....
                /* 1688 */  0x2B, 0x3A, 0xEF, 0x00, 0x12, 0xFE, 0xFF, 0xE7,  // +:......
                /* 1690 */  0x00, 0x58, 0x02, 0x6F, 0xDC, 0x68, 0xC1, 0x0F,  // .X.o.h..
                /* 1698 */  0x05, 0x9D, 0x1C, 0x70, 0x28, 0xA7, 0x13, 0xF6,  // ...p(...
                /* 16A0 */  0x95, 0xDB, 0xD0, 0xE1, 0x83, 0x18, 0x28, 0xC4,  // ......(.
                /* 16A8 */  0x5B, 0xC0, 0x41, 0x24, 0x28, 0xEE, 0xE2, 0x89,  // [.A$(...
                /* 16B0 */  0x92, 0x45, 0x21, 0x19, 0xA7, 0x07, 0x54, 0xF0,  // .E!...T.
                /* 16B8 */  0x33, 0x04, 0x05, 0x31, 0xA0, 0x53, 0x9D, 0x1E,  // 3..1.S..
                /* 16C0 */  0xD0, 0x27, 0x4E, 0x36, 0x4A, 0x07, 0xB9, 0x78,  // .'N6J..x
                /* 16C8 */  0x02, 0xC5, 0x9B, 0x03, 0xB8, 0x0E, 0x9E, 0xC0,  // ........
                /* 16D0 */  0xE2, 0x00, 0x02, 0xBE, 0x01, 0x1D, 0xE5, 0x21,  // .......!
                /* 16D8 */  0xF2, 0x03, 0x08, 0xB0, 0xFA, 0xFF, 0x1F, 0x85,  // ........
                /* 16E0 */  0x60, 0x1D, 0x40, 0x00, 0x47, 0x8E, 0x0E, 0x20,  // `.@.G.. 
                /* 16E8 */  0x80, 0x9A, 0xD0, 0x27, 0x21, 0xD4, 0x01, 0xC4,  // ...'!...
                /* 16F0 */  0x22, 0x0E, 0x20, 0x88, 0x73, 0x27, 0x3B, 0x80,  // ". .s';.
                /* 16F8 */  0xC0, 0x0D, 0x7C, 0x1A, 0x42, 0x45, 0xA5, 0x50,  // ..|.BE.P
                /* 1700 */  0xD0, 0xD3, 0x03, 0x2A, 0x1A, 0x1C, 0x05, 0xF1,  // ...*....
                /* 1708 */  0xC8, 0x1D, 0xED, 0xF4, 0x80, 0x3E, 0x8E, 0xB1,  // .....>..
                /* 1710 */  0x51, 0xB2, 0xC3, 0x03, 0xBC, 0x63, 0x19, 0xF6,  // Q....c..
                /* 1718 */  0xFF, 0x7F, 0x18, 0x02, 0xC6, 0x47, 0x0D, 0xF0,  // .....G..
                /* 1720 */  0x1E, 0xE2, 0x80, 0xD3, 0x51, 0x03, 0x70, 0x24,  // ....Q.p$
                /* 1728 */  0xE9, 0xA8, 0x01, 0xE4, 0xFE, 0xFF, 0x47, 0x0D,  // ......G.
                /* 1730 */  0xB0, 0xCB, 0x3B, 0x3A, 0xA1, 0x24, 0x41, 0x48,  // ..;:.$AH
                /* 1738 */  0xEE, 0xD1, 0x09, 0x0D, 0xF2, 0x02, 0x10, 0xFC,  // ........
                /* 1740 */  0x84, 0x3C, 0x32, 0xCF, 0xF9, 0xE0, 0x3C, 0x82,  // .<2...<.
                /* 1748 */  0x27, 0x27, 0x80, 0x4D, 0x27, 0x41, 0xB0, 0xFF,  // ''.M'A..
                /* 1750 */  0xFF, 0xCF, 0x1F, 0x80, 0x5D, 0x4B, 0xE7, 0x0F,  // ....]K..
                /* 1758 */  0x40, 0x8D, 0xB0, 0x93, 0x13, 0xEA, 0xFC, 0x61,  // @......a
                /* 1760 */  0xA1, 0x47, 0x52, 0xC4, 0xC9, 0x89, 0x9D, 0x84,  // .GR.....
                /* 1768 */  0xE3, 0x06, 0x7F, 0x6B, 0xF2, 0x41, 0xC1, 0xE7,  // ...k.A..
                /* 1770 */  0x0F, 0xCC, 0xA9, 0x14, 0xD8, 0xFC, 0xFF, 0x4F,  // .......O
                /* 1778 */  0x4E, 0x80, 0x95, 0xC3, 0x03, 0xF0, 0xD6, 0x74,  // N......t
                /* 1780 */  0x78, 0x00, 0xD4, 0x48, 0x3C, 0x95, 0xA2, 0x25,  // x..H<..%
                /* 1788 */  0x9F, 0x4A, 0x21, 0xCD, 0x38, 0x46, 0xFC, 0xF7,  // .J!.8F..
                /* 1790 */  0xED, 0x48, 0x3E, 0x3D, 0x60, 0xE4, 0x1D, 0x86,  // .H>=`...
                /* 1798 */  0x50, 0xC7, 0x09, 0x1F, 0x86, 0x30, 0xFF, 0xFF,  // P....0..
                /* 17A0 */  0xC3, 0x10, 0xC0, 0x80, 0x13, 0x88, 0xC7, 0xCC,  // ........
                /* 17A8 */  0x25, 0x1C, 0x40, 0x28, 0x88, 0xC7, 0xEC, 0xF3,  // %.@(....
                /* 17B0 */  0xBE, 0xC7, 0x8C, 0x9B, 0x89, 0xEF, 0x07, 0xBE,  // ........
                /* 17B8 */  0x05, 0xF8, 0x28, 0x08, 0xFF, 0x34, 0x04, 0x58,  // ..(..4.X
                /* 17C0 */  0xFA, 0xFF, 0x9F, 0x40, 0x80, 0x91, 0xA7, 0x13,  // ...@....
                /* 17C8 */  0x08, 0xA0, 0x26, 0xF6, 0xB1, 0x14, 0x2D, 0xE3,  // ..&...-.
                /* 17D0 */  0x58, 0x0A, 0xE9, 0x04, 0x02, 0x2B, 0xF2, 0x71,  // X....+.q
                /* 17D8 */  0x08, 0x15, 0x96, 0x42, 0xE7, 0x52, 0x1F, 0x1F,  // ...B.R..
                /* 17E0 */  0x78, 0x38, 0x38, 0x0A, 0xE2, 0x63, 0x29, 0x60,  // x88..c)`
                /* 17E8 */  0xEB, 0xFF, 0x7F, 0x78, 0xC0, 0x9C, 0x35, 0xC0,  // ...x..5.
                /* 17F0 */  0x7D, 0x2E, 0x05, 0xBC, 0x8B, 0x3A, 0x6B, 0x00,  // }....:k.
                /* 17F8 */  0x6A, 0x82, 0x1F, 0x9E, 0xD0, 0x42, 0x80, 0x74,  // j....B.t
                /* 1800 */  0x78, 0x82, 0xF1, 0xFF, 0x3F, 0x68, 0xF0, 0xA1,  // x...?h..
                /* 1808 */  0x87, 0x3F, 0x52, 0x5F, 0x6E, 0x7C, 0xC0, 0x66,  // .?R_n|.f
                /* 1810 */  0x87, 0x27, 0x1E, 0xF7, 0xF0, 0x04, 0xD0, 0x21,  // .'.....!
                /* 1818 */  0xE6, 0x98, 0x51, 0xC1, 0x8E, 0x2B, 0x14, 0xC4,  // ..Q..+..
                /* 1820 */  0xC7, 0x15, 0x78, 0x23, 0xAC, 0x19, 0x41, 0x47,  // ..x#..AG
                /* 1828 */  0x27, 0xC0, 0xCB, 0xFF, 0x7F, 0x74, 0xF0, 0xCE,  // '....t..
                /* 1830 */  0xE4, 0xB0, 0x47, 0x07, 0x7C, 0x8E, 0xCC, 0xE4,  // ..G.|...
                /* 1838 */  0xB0, 0x02, 0x28, 0x32, 0x75, 0x58, 0x01, 0xD4,  // ..(2uX..
                /* 1840 */  0xA4, 0x79, 0x1A, 0xE8, 0xB0, 0x82, 0x4B, 0x77,  // .y....Kw
                /* 1848 */  0x58, 0x41, 0x9C, 0xB3, 0xB0, 0x87, 0x15, 0xEC,  // XA......
                /* 1850 */  0xFF, 0xFF, 0xB0, 0xC2, 0x92, 0xC0, 0xEA, 0xB0,  // ........
                /* 1858 */  0xC2, 0x33, 0xC0, 0x48, 0x31, 0x89, 0x4E, 0x1A,  // .3.H1.N.
                /* 1860 */  0x5C, 0xE3, 0x99, 0x85, 0x82, 0xF8, 0xCC, 0xE0,  // \.......
                /* 1868 */  0xC3, 0x0A, 0x60, 0x2A, 0xD6, 0x9D, 0x04, 0xEA,  // ..`*....
                /* 1870 */  0xD8, 0x80, 0xDF, 0x8D, 0x04, 0x7C, 0xB7, 0x00,  // .....|..
                /* 1878 */  0x38, 0x13, 0x61, 0x53, 0x03, 0x76, 0xFF, 0xFF,  // 8.aS.v..
                /* 1880 */  0xF3, 0x08, 0x18, 0x6F, 0xA3, 0xC0, 0x12, 0x94,  // ...o....
                /* 1888 */  0xDF, 0xAE, 0xE1, 0xC4, 0xB9, 0xD5, 0x00, 0x4D,  // .......M
                /* 1890 */  0x28, 0x0B, 0x9B, 0x36, 0xF4, 0x51, 0x1C, 0xC3,  // (..6.Q..
                /* 1898 */  0x51, 0x78, 0x0C, 0x0F, 0x8F, 0x09, 0x7C, 0xAD,  // Qx....|.
                /* 18A0 */  0x01, 0xDE, 0xAA, 0xAE, 0x35, 0xA0, 0xFD, 0xFF,  // ....5...
                /* 18A8 */  0x5F, 0x6B, 0x80, 0x63, 0xD8, 0xDB, 0x28, 0x0A,  // _k.c..(.
                /* 18B0 */  0xD6, 0xE1, 0xAF, 0xFA, 0x88, 0x53, 0x0D, 0xF3,  // .....S..
                /* 18B8 */  0x09, 0x41, 0x8E, 0x25, 0x2C, 0xF0, 0x4D, 0x14,  // .A.%,.M.
                /* 18C0 */  0x75, 0x11, 0x75, 0xD0, 0xA3, 0x03, 0x2A, 0x1A,  // u.u...*.
                /* 18C8 */  0x1C, 0x05, 0xF1, 0x4D, 0x14, 0xF0, 0x16, 0x6E,  // ...M...n
                /* 18D0 */  0x74, 0xE8, 0x73, 0x80, 0x87, 0xFB, 0x64, 0x70,  // t.s...dp
                /* 18D8 */  0xC8, 0x0F, 0x10, 0xEC, 0x22, 0x0A, 0x7C, 0xFF,  // ....".|.
                /* 18E0 */  0xFF, 0x97, 0x31, 0xC0, 0x8F, 0xAB, 0x63, 0x06,  // ..1...c.
                /* 18E8 */  0xA0, 0x26, 0xC8, 0x45, 0x14, 0x75, 0x14, 0x70,  // .&.E.u.p
                /* 18F0 */  0xB0, 0xA3, 0x86, 0x80, 0x23, 0x1C, 0xED, 0x8B,  // ....#...
                /* 18F8 */  0x28, 0x1B, 0xF7, 0xE9, 0x84, 0x0E, 0x51, 0xF1,  // (.....Q.
                /* 1900 */  0xD8, 0x08, 0xC1, 0x28, 0x57, 0x30, 0x0A, 0xE1,  // ...(W0..
                /* 1908 */  0x10, 0x30, 0x8A, 0x70, 0x13, 0x43, 0x89, 0x86,  // .0.p.C..
                /* 1910 */  0xA3, 0x20, 0x3E, 0x30, 0xF8, 0x9C, 0x01, 0x67,  // . >0...g
                /* 1918 */  0x48, 0xE7, 0x70, 0x8A, 0xBE, 0x15, 0x02, 0x97,  // H.p.....
                /* 1920 */  0xFF, 0xFF, 0x39, 0x03, 0xB8, 0x8C, 0x0E, 0xCE,  // ..9.....
                /* 1928 */  0x11, 0xDC, 0x03, 0x7E, 0xDF, 0x04, 0xCC, 0x1C,  // ...~....
                /* 1930 */  0x4A, 0xE0, 0xDC, 0xB6, 0xF9, 0x85, 0x13, 0x70,  // J......p
                /* 1938 */  0xFC, 0xFF, 0x3F, 0x94, 0x80, 0x4F, 0xD6, 0xA1,  // ..?..O..
                /* 1940 */  0x04, 0x50, 0xA3, 0xF5, 0x50, 0x82, 0xD6, 0x7E,  // .P..P..~
                /* 1948 */  0x28, 0x41, 0x4F, 0xF7, 0x01, 0xC4, 0x40, 0x07,  // (AO...@.
                /* 1950 */  0x14, 0x26, 0xC4, 0x13, 0x95, 0x6E, 0xDA, 0x28,  // .&...n.(
                /* 1958 */  0x9D, 0x14, 0x52, 0x72, 0x96, 0x42, 0x65, 0x3F,  // ..Rr.Be?
                /* 1960 */  0x43, 0x50, 0x10, 0x03, 0x3A, 0xD8, 0xD1, 0x01,  // CP..:...
                /* 1968 */  0xCA, 0x70, 0x4F, 0xE7, 0x20, 0x4E, 0xA3, 0xF8,  // .pO. N..
                /* 1970 */  0xB3, 0x36, 0xA0, 0xEE, 0xFF, 0x7F, 0x33, 0x84,  // .6....3.
                /* 1978 */  0x2D, 0x6E, 0xD2, 0x28, 0x39, 0xF7, 0x31, 0x0A,  // -n.(9.1.
                /* 1980 */  0xE2, 0x49, 0x3B, 0x2A, 0x84, 0x6C, 0x4C, 0x1A,  // .I;*.lL.
                /* 1988 */  0x3D, 0xE7, 0xE7, 0x00, 0x7E, 0x67, 0x61, 0x97,  // =...~ga.
                /* 1990 */  0x15, 0xE0, 0x29, 0x72, 0xDA, 0xD0, 0x67, 0xF0,  // ..)r..g.
                /* 1998 */  0x44, 0x53, 0xF5, 0x38, 0x34, 0x8D, 0xA3, 0xA8,  // DS.84...
                /* 19A0 */  0xEE, 0xCE, 0xA0, 0x91, 0x9E, 0x6C, 0x63, 0xF3,  // .....lc.
                /* 19A8 */  0x95, 0xC2, 0x31, 0xE9, 0x38, 0x67, 0x6B, 0x38,  // ..1.8gk8
                /* 19B0 */  0xD2, 0x76, 0x0B, 0x01, 0xEA, 0xDA, 0x6E, 0x21,  // .v....n!
                /* 19B8 */  0x40, 0xFC, 0xFF, 0x7F, 0x3F, 0x04, 0xEB, 0xB8,  // @...?...
                /* 19C0 */  0x02, 0xC6, 0x3C, 0xE3, 0x87, 0x09, 0xCF, 0xF1,  // ..<.....
                /* 19C8 */  0x10, 0x3D, 0x0D, 0xDF, 0x0F, 0x81, 0xC1, 0x78,  // .=.....x
                /* 19D0 */  0x1E, 0x3E, 0xD8, 0xFD, 0x10, 0x70, 0x75, 0x2F,  // .>...pu/
                /* 19D8 */  0x38, 0x60, 0xCC, 0xFD, 0x10, 0x30, 0xF6, 0xFF,  // 8`...0..
                /* 19E0 */  0x3F, 0x66, 0x00, 0x3B, 0x81, 0xC7, 0x0C, 0x40,  // ?f.;...@
                /* 19E8 */  0x4D, 0xE0, 0x63, 0x06, 0x8A, 0x83, 0x00, 0xE9,  // M.c.....
                /* 19F0 */  0x98, 0xC1, 0xB0, 0x83, 0xBE, 0xDD, 0x1D, 0x86,  // ........
                /* 19F8 */  0x4F, 0xD3, 0x1E, 0xE7, 0x91, 0x60, 0x0E, 0x1A,  // O....`..
                /* 1A00 */  0x80, 0xD1, 0xFF, 0xFF, 0x41, 0x03, 0x0C, 0xD7,  // ....A...
                /* 1A08 */  0x71, 0xDC, 0x41, 0x03, 0xE0, 0x83, 0xC1, 0x83,  // q.A.....
                /* 1A10 */  0x06, 0xA0, 0x46, 0xDD, 0x9D, 0x0F, 0xC5, 0xE1,  // ..F.....
                /* 1A18 */  0xBB, 0x9E, 0x0F, 0x1A, 0x30, 0xFE, 0xFF, 0x43,  // ....0..C
                /* 1A20 */  0x3B, 0xE2, 0x23, 0xC2, 0xA8, 0xBB, 0xF4, 0xA1,  // ;.#.....
                /* 1A28 */  0x74, 0x51, 0x48, 0xC7, 0x41, 0x03, 0x95, 0xFC,  // tQH.A...
                /* 1A30 */  0x58, 0x40, 0x41, 0x0C, 0xE8, 0x58, 0x07, 0x0D,  // X@A..X..
                /* 1A38 */  0xA8, 0x77, 0x3E, 0xC0, 0xEA, 0x75, 0xCF, 0x73,  // .w>..u.s
                /* 1A40 */  0xE6, 0x5B, 0xF6, 0x9C, 0x4D, 0xE1, 0x39, 0xFB,  // .[..M.9.
                /* 1A48 */  0xFA, 0x01, 0xDE, 0x03, 0x2F, 0xF0, 0xFF, 0xFF,  // ..../...
                /* 1A50 */  0x5F, 0x3F, 0x80, 0xB7, 0xC2, 0xEB, 0x07, 0xA0,  // _?......
                /* 1A58 */  0x46, 0xDA, 0xF5, 0x03, 0x05, 0x6B, 0xA9, 0x0F,  // F....k..
                /* 1A60 */  0x05, 0x0D, 0x38, 0xF2, 0x1B, 0x2C, 0x3F, 0x7E,  // ..8..,?~
                /* 1A68 */  0x18, 0xE2, 0x0D, 0xE0, 0x00, 0x12, 0x94, 0x77,  // .......w
                /* 1A70 */  0xF9, 0x40, 0x09, 0xA3, 0x90, 0x90, 0x93, 0x03,  // .@......
                /* 1A78 */  0x2A, 0xFA, 0xA1, 0x80, 0x82, 0x18, 0xD0, 0xB9,  // *.......
                /* 1A80 */  0x4E, 0x0E, 0x68, 0x15, 0x97, 0x0F, 0x32, 0x9C,  // N.h...2.
                /* 1A88 */  0x23, 0x7A, 0x61, 0xF0, 0xE9, 0x03, 0x58, 0xFF,  // #za...X.
                /* 1A90 */  0xFF, 0x4F, 0x1F, 0x00, 0x57, 0x2D, 0x9E, 0x3E,  // .O..W-.>
                /* 1A98 */  0x80, 0xD2, 0xFF, 0xFF, 0xF4, 0x01, 0x3C, 0xE2,  // ......<.
                /* 1AA0 */  0xDE, 0x5C, 0xD1, 0xF1, 0xC7, 0xA6, 0xD3, 0x87,  // .\......
                /* 1AA8 */  0x27, 0xFB, 0xF4, 0x01, 0x23, 0xF2, 0x0D, 0x10,  // '...#...
                /* 1AB0 */  0x15, 0x96, 0x42, 0x57, 0x40, 0x9F, 0x1C, 0x78,  // ..BW@..x
                /* 1AB8 */  0x38, 0x38, 0x0A, 0xE2, 0x51, 0xFB, 0xE4, 0x00,  // 88..Q...
                /* 1AC0 */  0xE7, 0xF4, 0x81, 0xB9, 0x02, 0x02, 0x0C, 0xFA,  // ........
                /* 1AC8 */  0xFF, 0x9F, 0x33, 0x00, 0x0F, 0x1A, 0xCF, 0x19,  // ..3.....
                /* 1AD0 */  0x80, 0x1A, 0x41, 0xE7, 0x0C, 0x94, 0x94, 0x5B,  // ..A....[
                /* 1AD8 */  0x2E, 0x3D, 0x34, 0x61, 0xCE, 0xF3, 0xC7, 0x71,  // .=4a...q
                /* 1AE0 */  0x84, 0x4C, 0xD6, 0x31, 0x03, 0x25, 0x88, 0x42,  // .L.1.%.B
                /* 1AE8 */  0xE7, 0x1D, 0xC0, 0xD1, 0xFF, 0xFF, 0x98, 0x01,  // ........
                /* 1AF0 */  0xBE, 0x83, 0x03, 0xF0, 0xF6, 0x78, 0x70, 0x00,  // .....xp.
                /* 1AF8 */  0xD4, 0xC8, 0x3B, 0xBC, 0xA1, 0x8E, 0x02, 0x96,  // ..;.....
                /* 1B00 */  0x7B, 0x78, 0x43, 0xA2, 0xBC, 0xDB, 0xB0, 0xB9,  // {xC.....
                /* 1B08 */  0x05, 0xAE, 0x19, 0x46, 0x27, 0x00, 0x9D, 0xDE,  // ...F'...
                /* 1B10 */  0x50, 0xD2, 0x4E, 0x6F, 0x40, 0xFF, 0xFF, 0x7F,  // P.No@...
                /* 1B18 */  0x7A, 0x03, 0x9C, 0x9C, 0x3F, 0x3C, 0x68, 0x2E,  // z...?<h.
                /* 1B20 */  0xE1, 0xF8, 0x41, 0x41, 0x3C, 0x68, 0xC7, 0x03,  // ..AA<h..
                /* 1B28 */  0x45, 0x1D, 0x3F, 0xE0, 0xC4, 0x39, 0xBD, 0x01,  // E.?..9..
                /* 1B30 */  0x55, 0x61, 0xD3, 0x86, 0x3E, 0x8A, 0x63, 0x38,  // Ua..>.c8
                /* 1B38 */  0x0A, 0x8F, 0xE1, 0x5D, 0x38, 0x81, 0xCF, 0x1F,  // ...]8...
                /* 1B40 */  0xC0, 0x5B, 0xE4, 0xF9, 0x03, 0xEA, 0xFF, 0xFF,  // .[......
                /* 1B48 */  0xFC, 0x01, 0xFC, 0x65, 0x9D, 0x83, 0x50, 0x1C,  // ...e..P.
                /* 1B50 */  0x96, 0x79, 0x0E, 0x42, 0x9E, 0x3F, 0xF8, 0xC4,  // .y.B.?..
                /* 1B58 */  0x1F, 0x10, 0x3C, 0x33, 0x43, 0x93, 0xA3, 0x10,  // ..<3C...
                /* 1B60 */  0x40, 0xA5, 0xFF, 0xFF, 0xD9, 0x01, 0x6F, 0xF2,  // @.....o.
                /* 1B68 */  0xEC, 0x00, 0xA8, 0x09, 0x7B, 0x24, 0x43, 0x87,  // ....{$C.
                /* 1B70 */  0x3F, 0x49, 0x22, 0xC7, 0x78, 0x86, 0x1E, 0x86,  // ?I".x...
                /* 1B78 */  0x0F, 0x92, 0x00, 0x57, 0xFE, 0xFF, 0x07, 0x49,  // ...W...I
                /* 1B80 */  0xC0, 0xB3, 0xCA, 0x63, 0x06, 0xA0, 0x46, 0xD8,  // ...c..F.
                /* 1B88 */  0x01, 0x0E, 0x75, 0xCC, 0xB0, 0xD0, 0x03, 0x1C,  // ..u.....
                /* 1B90 */  0xF2, 0x98, 0x81, 0x39, 0xCB, 0x03, 0xA7, 0xFF,  // ...9....
                /* 1B98 */  0xFF, 0x59, 0x1E, 0xE0, 0xFF, 0xFF, 0xFF, 0xF0,  // .Y......
                /* 1BA0 */  0x01, 0xCF, 0xE5, 0xE1, 0x03, 0x50, 0x23, 0xE7,  // .....P#.
                /* 1BA8 */  0xC8, 0x84, 0x1A, 0xB5, 0xE5, 0x1D, 0x99, 0xA8,  // ........
                /* 1BB0 */  0xCF, 0x83, 0xA8, 0x10, 0x62, 0x04, 0xF5, 0xC9,  // ....b...
                /* 1BB8 */  0x0D, 0xFC, 0x27, 0x26, 0xC0, 0xD1, 0xB9, 0x01,  // ..'&....
                /* 1BC0 */  0x38, 0xFC, 0xFF, 0xCF, 0x0D, 0xE0, 0x3C, 0x19,  // 8.....<.
                /* 1BC8 */  0xFA, 0x6C, 0x0E, 0xB8, 0xBA, 0x34, 0x9C, 0x70,  // .l...4.p
                /* 1BD0 */  0x85, 0xC3, 0x15, 0xE4, 0xD9, 0x54, 0x3C, 0x32,  // .....T<2
                /* 1BD8 */  0x72, 0x82, 0x04, 0x96, 0x07, 0x07, 0xC0, 0xD1,  // r.......
                /* 1BE0 */  0xFF, 0xFF, 0xE0, 0x00, 0x9C, 0x7C, 0x1E, 0x1C,  // .....|..
                /* 1BE8 */  0x00, 0x35, 0x92, 0x0E, 0x0E, 0x28, 0x58, 0x72,  // .5...(Xr
                /* 1BF0 */  0x70, 0x40, 0xDC, 0xC5, 0x98, 0xC8, 0x79, 0x68,  // p@....yh
                /* 1BF8 */  0x86, 0xEC, 0x28, 0x0B, 0x58, 0xFE, 0xFF, 0x9F,  // ..(.X...
                /* 1C00 */  0x1C, 0x80, 0xB7, 0xD0, 0x93, 0x03, 0xA0, 0x26,  // .......&
                /* 1C08 */  0xDE, 0xD3, 0xC0, 0x67, 0x78, 0x8F, 0x4C, 0x81,  // ...gx.L.
                /* 1C10 */  0x60, 0x50, 0x07, 0x3D, 0x1F, 0x10, 0xF0, 0x03,  // `P.=....
                /* 1C18 */  0x3D, 0xCE, 0xC3, 0x3B, 0x12, 0x26, 0x09, 0x0E,  // =..;.&..
                /* 1C20 */  0x75, 0x06, 0xF0, 0x48, 0x9A, 0x3F, 0xCD, 0x90,  // u..H.?..
                /* 1C28 */  0x09, 0x7B, 0x2A, 0x21, 0x99, 0xB4, 0x21, 0xA1,  // .{*!..!.
                /* 1C30 */  0xCE, 0x8A, 0x64, 0x42, 0x9A, 0xCE, 0xAB, 0x43,  // ..dB...C
                /* 1C38 */  0xC4, 0x27, 0x45, 0xC3, 0x24, 0xF0, 0xE8, 0x19,  // .'E.$...
                /* 1C40 */  0x1A, 0x27, 0x18, 0x60, 0x7C, 0xA0, 0x39, 0x1D,  // .'.`|.9.
                /* 1C48 */  0x1C, 0xFF, 0xB9, 0x44, 0x8B, 0x70, 0xCE, 0xF1,  // ...D.p..
                /* 1C50 */  0x42, 0x19, 0x2E, 0xD0, 0xB3, 0x82, 0x4F, 0xF4,  // B.....O.
                /* 1C58 */  0x0C, 0x2B, 0xF8, 0x41, 0xBC, 0x06, 0x30, 0x98,  // .+.A..0.
                /* 1C60 */  0x40, 0x51, 0xFC, 0xFF, 0x1F, 0x8D, 0x21, 0x5F,  // @Q....!_
                /* 1C68 */  0x05, 0x18, 0x54, 0xAB, 0xB7, 0x05, 0x81, 0x1B,  // ..T.....
                /* 1C70 */  0xD6, 0x40, 0xC1, 0x0C, 0x71, 0x74, 0xD8, 0x61,  // .@..qt.a
                /* 1C78 */  0x1A, 0xD2, 0x03, 0x79, 0xCE, 0xF0, 0x3D, 0xC0,  // ...y..=.
                /* 1C80 */  0x04, 0x27, 0xFC, 0xCC, 0x50, 0xEE, 0x9D, 0x5F,  // .'..P.._
                /* 1C88 */  0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14, 0x81, 0x0B,  // .Q......
                /* 1C90 */  0x8D, 0x39, 0x14, 0x78, 0x12, 0x6F, 0x13, 0x3E,  // .9.x.o.>
                /* 1C98 */  0x1C, 0x30, 0xF7, 0x13, 0xD4, 0x05, 0xE2, 0x19,  // .0......
                /* 1CA0 */  0x22, 0xC6, 0x5B, 0x91, 0x11, 0x6A, 0x14, 0x60,  // ".[..j.`
                /* 1CA8 */  0x0B, 0x9D, 0x20, 0x18, 0x25, 0x08, 0x43, 0xE1,  // .. .%.C.
                /* 1CB0 */  0x98, 0x51, 0x3C, 0xCD, 0xB3, 0x08, 0x52, 0x9B,  // .Q<...R.
                /* 1CB8 */  0x00, 0x65, 0x20, 0x32, 0x86, 0x88, 0x40, 0x68,  // .e 2..@h
                /* 1CC0 */  0x7F, 0x10, 0x44, 0xC2, 0x63, 0x42, 0xE7, 0x02,  // ..D.cB..
                /* 1CC8 */  0x47, 0x1A, 0x0D, 0xEA, 0x88, 0xE1, 0xB3, 0x81,  // G.......
                /* 1CD0 */  0xCF, 0x05, 0xE7, 0x78, 0xD0, 0x87, 0x68, 0x90,  // ...x..h.
                /* 1CD8 */  0xA3, 0x3B, 0xB8, 0x3A, 0x0F, 0x05, 0x64, 0x78,  // .;.:..dx
                /* 1CE0 */  0xEC, 0x38, 0xE2, 0xB3, 0x85, 0x4F, 0x09, 0x78,  // .8...O.x
                /* 1CE8 */  0xD7, 0x80, 0xBA, 0x1E, 0x3C, 0x4E, 0x80, 0x65,  // ....<N.e
                /* 1CF0 */  0x44, 0xCF, 0x22, 0xB0, 0xC7, 0xE3, 0xA3, 0x81,  // D.".....
                /* 1CF8 */  0x4F, 0x01, 0x26, 0xB0, 0xFC, 0x41, 0xA0, 0x46,  // O.&..A.F
                /* 1D00 */  0x66, 0x68, 0x8F, 0xF4, 0xB4, 0xDE, 0x10, 0x7C,  // fh.....|
                /* 1D08 */  0x2E, 0x30, 0x81, 0xC5, 0x9E, 0x50, 0xE9, 0x78,  // .0...P.x
                /* 1D10 */  0xC0, 0x7F, 0xD6, 0x7A, 0x34, 0x88, 0xF0, 0x66,  // ...z4..f
                /* 1D18 */  0xE0, 0xF9, 0xFA, 0x6C, 0xC3, 0x9C, 0x9C, 0x6C,  // ...l...l
                /* 1D20 */  0xD0, 0xFF, 0xFF, 0xCB, 0x02, 0x86, 0x60, 0xE0,  // ......`.
                /* 1D28 */  0x13, 0x0A, 0x15, 0x75, 0x42, 0x41, 0x9D, 0x2C,  // ...uBA.,
                /* 1D30 */  0x7C, 0xA8, 0x60, 0x77, 0x83, 0x87, 0x06, 0x76,  // |.`w...v
                /* 1D38 */  0x40, 0x61, 0xA7, 0x1E, 0x72, 0x2A, 0x01, 0xFD,  // @a..r*..
                /* 1D40 */  0x79, 0x06, 0x77, 0xCC, 0x80, 0x7B, 0xAB, 0xC0,  // y.w..{..
                /* 1D48 */  0xCD, 0x88, 0x1F, 0x7F, 0xC9, 0x51, 0x07, 0x34,  // .....Q.4
                /* 1D50 */  0xCE, 0x8E, 0x0F, 0x3A, 0x06, 0xF0, 0xB3, 0x0E,  // ...:....
                /* 1D58 */  0xFC, 0x1B, 0x53, 0x8C, 0x30, 0x4F, 0x12, 0xB1,  // ..S.0O..
                /* 1D60 */  0x62, 0x1C, 0xCE, 0xB9, 0x9C, 0xC4, 0x7B, 0x53,  // b.....{S
                /* 1D68 */  0x95, 0x30, 0x82, 0xEC, 0xF2, 0xC6, 0x43, 0x0E,  // .0....C.
                /* 1D70 */  0x49, 0x1E, 0xD2, 0x79, 0x3C, 0x82, 0x70, 0x02,  // I..y<.p.
                /* 1D78 */  0x0F, 0x11, 0x3F, 0x0C, 0x7E, 0x96, 0x78, 0xF8,  // ..?.~.x.
                /* 1D80 */  0x61, 0x93, 0x78, 0xFF, 0xF1, 0x04, 0x8E, 0xCA,  // a.x.....
                /* 1D88 */  0xA7, 0x14, 0x23, 0x04, 0x7F, 0xF8, 0x38, 0xE7,  // ..#...8.
                /* 1D90 */  0xB7, 0x00, 0x13, 0xF8, 0x7A, 0xE4, 0x13, 0x2E,  // ....z...
                /* 1D98 */  0x62, 0x00, 0x28, 0xF0, 0x13, 0x3A, 0x45, 0x9F,  // b.(..:E.
                /* 1DA0 */  0x85, 0x4E, 0x0C, 0x77, 0x28, 0xE0, 0x23, 0xC2,  // .N.w(.#.
                /* 1DA8 */  0x0E, 0x80, 0x9F, 0x6F, 0xC0, 0xF7, 0xFF, 0x3F,  // ...o...?
                /* 1DB0 */  0xDF, 0x00, 0x4C, 0x3A, 0x3D, 0x3C, 0xDF, 0x00,  // ..L:=<..
                /* 1DB8 */  0xCE, 0xFE, 0xFF, 0xE7, 0x1B, 0x80, 0xD5, 0x13,  // ........
                /* 1DC0 */  0x08, 0xF6, 0x78, 0x73, 0x0E, 0xE7, 0xF3, 0xFC,  // ..xs....
                /* 1DC8 */  0xF2, 0x68, 0x11, 0x25, 0x44, 0x94, 0x38, 0x11,  // .h.%D.8.
                /* 1DD0 */  0xA2, 0x3C, 0x41, 0xC4, 0xF3, 0xF5, 0x05, 0xF3,  // .<A.....
                /* 1DD8 */  0xFF, 0x3F, 0xDF, 0x00, 0x2E, 0xA2, 0x1D, 0x6E,  // .?.....n
                /* 1DE0 */  0x50, 0x61, 0xCE, 0x37, 0x00, 0xCD, 0xFE, 0xFF,  // Pa.7....
                /* 1DE8 */  0xE7, 0x1B, 0x76, 0x92, 0x78, 0xBE, 0x01, 0x67,  // ..v.x..g
                /* 1DF0 */  0xFC, 0xA7, 0x8A, 0xCE, 0x37, 0x00, 0x7F, 0xFF,  // ....7...
                /* 1DF8 */  0xFF, 0xE7, 0x1B, 0xE0, 0x88, 0xF5, 0x7C, 0x03,  // ......|.
                /* 1E00 */  0xAE, 0x73, 0xC5, 0xD3, 0xCB, 0xA3, 0xCD, 0x9B,  // .s......
                /* 1E08 */  0x85, 0x01, 0xE3, 0x79, 0x18, 0x2F, 0x37, 0xD8,  // ...y./7.
                /* 1E10 */  0xC3, 0x20, 0xC0, 0xA6, 0xFF, 0xFF, 0xE9, 0x06,  // . ......
                /* 1E18 */  0x30, 0x77, 0x8F, 0x78, 0x18, 0x04, 0x38, 0xF4,  // 0w.x..8.
                /* 1E20 */  0xFF, 0x3F, 0x0C, 0x02, 0x2C, 0x3A, 0xDC, 0x04,  // .?..,:..
                /* 1E28 */  0x7B, 0x9A, 0xF1, 0xE5, 0xE1, 0x18, 0x02, 0xBE,  // {.......
                /* 1E30 */  0x0B, 0xC2, 0x3C, 0xDF, 0x00, 0x36, 0x14, 0xDA,  // ..<..6..
                /* 1E38 */  0xF4, 0xA9, 0xF1, 0xFF, 0x6F, 0xD4, 0xAA, 0x41,  // ....o..A
                /* 1E40 */  0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,  // ..e...S.
                /* 1E48 */  0x31, 0x63, 0x95, 0x9F, 0x06, 0x8A, 0xF4, 0x86,  // 1c......
                /* 1E50 */  0xD0, 0x21, 0xC1, 0x71, 0xDF, 0x09, 0x02, 0x71,  // .!.q...q
                /* 1E58 */  0xE8, 0xB7, 0x87, 0x40, 0x2C, 0xE6, 0x5D, 0x20,  // ...@,.] 
                /* 1E60 */  0x10, 0x8B, 0xD5, 0x01, 0xC2, 0x24, 0x1B, 0x01,  // .....$..
                /* 1E68 */  0x61, 0x52, 0x95, 0x80, 0x30, 0xF1, 0x6F, 0x07,  // aR..0.o.
                /* 1E70 */  0x81, 0x38, 0x82, 0x16, 0x10, 0x26, 0xDD, 0x0B,  // .8...&..
                /* 1E78 */  0x08, 0x0B, 0xB3, 0x52, 0x81, 0x38, 0x92, 0x1B,  // ...R.8..
                /* 1E80 */  0x10, 0x16, 0x65, 0x75, 0x02, 0x71, 0x38, 0x3B,  // ..eu.q8;
                /* 1E88 */  0x20, 0x2C, 0xFE, 0x73, 0x41, 0x20, 0x8E, 0xE9,  //  ,.sA ..
                /* 1E90 */  0x08, 0x84, 0x89, 0x7C, 0xF6, 0x08, 0xC4, 0x11,  // ...|....
                /* 1E98 */  0x2D, 0x41, 0xDC, 0x88, 0x8E, 0x12, 0x41, 0x04,  // -A....A.
                /* 1EA0 */  0x64, 0x21, 0x4F, 0x09, 0x01, 0x59, 0x16, 0x88,  // d!O..Y..
                /* 1EA8 */  0x80, 0x2C, 0x51, 0x15, 0x10, 0x13, 0x0C, 0xA2,  // .,Q.....
                /* 1EB0 */  0x01, 0x11, 0x59, 0x40, 0x2C, 0x0A, 0x88, 0x80,  // ..Y@,...
                /* 1EB8 */  0x1C, 0x4B, 0x17, 0x10, 0x0B, 0x09, 0xA2, 0x41,  // .K.....A
                /* 1EC0 */  0x92, 0x07, 0x83, 0x80, 0x1C, 0x1E, 0x44, 0x40,  // ......D@
                /* 1EC8 */  0x96, 0xF2, 0x54, 0x08, 0x44, 0x84, 0x81, 0x68,  // ..T.D..h
                /* 1ED0 */  0x38, 0xC4, 0x1A, 0x10, 0x93, 0x0C, 0xA2, 0x01,  // 8.......
                /* 1ED8 */  0x12, 0x6F, 0x40, 0x2C, 0x08, 0x88, 0x86, 0x48,  // .o@,...H
                /* 1EE0 */  0xBE, 0x36, 0x02, 0x72, 0x32, 0x10, 0x01, 0x39,  // .6.r2..9
                /* 1EE8 */  0x99, 0x3A, 0x20, 0x96, 0x13, 0x44, 0x40, 0x4E,  // .: ..D@N
                /* 1EF0 */  0x2C, 0x0F, 0x88, 0xE5, 0x07, 0x11, 0x90, 0x35,  // ,......5
                /* 1EF8 */  0xF8, 0x03, 0x62, 0x82, 0x40, 0x04, 0x64, 0x41,  // ..b.@.dA
                /* 1F00 */  0xCF, 0x05, 0x01, 0x59, 0x1E, 0x88, 0x80, 0x2C,  // ...Y...,
                /* 1F08 */  0xF4, 0xE5, 0x10, 0x88, 0xC8, 0x06, 0x11, 0x90,  // ........
                /* 1F10 */  0x65, 0xFC, 0x0E, 0x02, 0x11, 0x51, 0x20, 0x1A,  // e....Q .
                /* 1F18 */  0x34, 0x01, 0xA2, 0xA1, 0x81, 0x68, 0xE8, 0x47,  // 4....h.G
                /* 1F20 */  0x83, 0x80, 0x2C, 0xE1, 0xC1, 0x13, 0x88, 0x48,  // ..,....H
                /* 1F28 */  0x10, 0x39, 0x10, 0x0A, 0x22, 0x20, 0x4B, 0x7A,  // .9.." Kz
                /* 1F30 */  0xD9, 0x07, 0x22, 0x02, 0x41, 0x34, 0x70, 0xF2,  // ..".A4p.
                /* 1F38 */  0x62, 0x38, 0x70, 0x06, 0xA2, 0xC3, 0x01, 0x79,  // b8p....y
                /* 1F40 */  0x48, 0x04, 0x22, 0x01, 0x40, 0x04, 0xE4, 0x20,  // H.".@.. 
                /* 1F48 */  0xAF, 0x32, 0x01, 0xF9, 0xFF, 0x1F, 0x0B, 0x44,  // .2.....D
                /* 1F50 */  0x40, 0xCE, 0xF5, 0x7C, 0x38, 0x78, 0x06, 0x22,  // @..|8x."
                /* 1F58 */  0x20, 0xCB, 0xFD, 0x3F, 0x08, 0xC8, 0xDA, 0x41,  //  ..?...A
                /* 1F60 */  0x04, 0x64, 0x15, 0x7F, 0x8C, 0x40, 0x44, 0x12,  // .d...@D.
                /* 1F68 */  0x88, 0x80, 0xAC, 0xE9, 0x2F, 0x11, 0x88, 0x28,  // ..../..(
                /* 1F70 */  0x04, 0xD1, 0x01, 0x80, 0x3C, 0x25, 0x02, 0x11,  // ....<%..
                /* 1F78 */  0xC5, 0x20, 0x02, 0x72, 0x76, 0x20, 0x2A, 0xE4,  // . .rv *.
                /* 1F80 */  0x09, 0x22, 0x20, 0xEB, 0x78, 0x8A, 0x04, 0x22,  // ." .x.."
                /* 1F88 */  0xAA, 0x40, 0x04, 0xE4, 0x94, 0x40, 0x34, 0x33,  // .@...@43
                /* 1F90 */  0x10, 0x0D, 0xED, 0x16, 0x88, 0x29, 0x78, 0x6B,  // .....)xk
                /* 1F98 */  0x04, 0x22, 0x59, 0x40, 0x04, 0xE4, 0x60, 0x40,  // ."Y@..`@
                /* 1FA0 */  0x54, 0xA1, 0x5D, 0x20, 0x26, 0x17, 0x44, 0x40,  // T.] &.D@
                /* 1FA8 */  0x0E, 0x0E, 0x44, 0x55, 0xE8, 0x3D, 0x00, 0xD0,  // ..DU.=..
                /* 1FB0 */  0x0F, 0xC7, 0x03, 0x00, 0x03, 0xD1, 0xC0, 0xC8,  // ........
                /* 1FB8 */  0x6F, 0x45, 0x83, 0x26, 0x20, 0x02, 0x72, 0x54,  // oE.& .rT
                /* 1FC0 */  0x20, 0x9A, 0x1B, 0x88, 0x06, 0x78, 0xEC, 0x04,  //  ....x..
                /* 1FC8 */  0x22, 0x69, 0x40, 0x74, 0x50, 0x20, 0xAF, 0x31,  // "i@tP .1
                /* 1FD0 */  0x01, 0x39, 0x1A, 0x88, 0x8E, 0x19, 0xE4, 0x5B,  // .9.....[
                /* 1FD8 */  0x23, 0x20, 0x0B, 0x07, 0x11, 0x90, 0x95, 0x6B,  // # .....k
                /* 1FE0 */  0x06, 0x62, 0x31, 0x40, 0x74, 0x48, 0x20, 0x2F,  // .b1@tH /
                /* 1FE8 */  0x1E, 0x01, 0x59, 0x1D, 0x88, 0x0E, 0x07, 0x04,  // ..Y.....
                /* 1FF0 */  0x88, 0x66, 0x06, 0xA2, 0xEA, 0x45, 0x1F, 0x2A,  // .f...E.*
                /* 1FF8 */  0x28, 0x88, 0x06, 0x42, 0xFE, 0x27, 0x1A, 0x08,  // (..B.'..
                /* 2000 */  0x01, 0x11, 0x90, 0xB3, 0x3D, 0x9F, 0x02, 0x91,  // ....=...
                /* 2008 */  0xA0, 0x20, 0x3A, 0x18, 0x90, 0x17, 0x97, 0x80,  // . :.....
                /* 2010 */  0xAC, 0x1F, 0x44, 0x87, 0x0D, 0xF2, 0x3B, 0x39,  // ..D...;9
                /* 2018 */  0x78, 0x06, 0x22, 0x20, 0x8B, 0x7A, 0xE7, 0x08,  // x." .z..
                /* 2020 */  0xC8, 0x12, 0x41, 0x34, 0x78, 0x02, 0x44, 0x25,  // ..A4x.D%
                /* 2028 */  0x3C, 0x5C, 0x1E, 0x0C, 0x98, 0xF1, 0x83, 0x01,  // <\......
                /* 2030 */  0x05, 0xD1, 0x41, 0x84, 0x00, 0xD1, 0xA4, 0x40,  // ..A....@
                /* 2038 */  0x54, 0xF2, 0xDF, 0x4D, 0x03, 0x21, 0x20, 0x02,  // T..M.! .
                /* 2040 */  0xB2, 0x92, 0xF7, 0x4F, 0x20, 0xF2, 0xFF, 0x97,  // ...O ...
                /* 2048 */  0x05, 0x22, 0x20, 0xAB, 0xFC, 0xB6, 0x08, 0xC8,  // ." .....
                /* 2050 */  0x9A, 0x41, 0x04, 0x64, 0xD9, 0x6F, 0x38, 0x01,  // .A.d.o8.
                /* 2058 */  0x39, 0x03, 0x88, 0x80, 0xAC, 0xE6, 0x43, 0x13,  // 9.....C.
                /* 2060 */  0x88, 0x48, 0x03, 0x11, 0x90, 0x33, 0x02, 0xD1,  // .H...3..
                /* 2068 */  0xC0, 0x40, 0x34, 0xEF, 0x23, 0x2D, 0x10, 0x49,  // .@4.#-.I
                /* 2070 */  0x0F, 0xA2, 0x81, 0x92, 0x57, 0x97, 0x06, 0x44,  // ....W..D
                /* 2078 */  0x40, 0x04, 0xE4, 0xA4, 0x4F, 0xB4, 0x40, 0x24,  // @...O.@$
                /* 2080 */  0x36, 0x88, 0x80, 0x1C, 0xFB, 0x9D, 0x25, 0x20,  // 6.....% 
                /* 2088 */  0x8B, 0xF8, 0x95, 0xE9, 0x80, 0x40, 0xFC, 0x1F,  // .....@..
                /* 2090 */  0x10, 0x28, 0x88, 0x80, 0x1C, 0x12, 0x88, 0x46,  // .(.....F
                /* 2098 */  0x06, 0xA2, 0x81, 0x0B, 0x0C, 0x84, 0x82, 0x08,  // ........
                /* 20A0 */  0xC8, 0xE9, 0x13, 0x00, 0x31, 0x2D, 0x0D, 0x80,  // ....1-..
                /* 20A8 */  0x98, 0xA2, 0x0A, 0x40, 0x4C, 0x1F, 0x88, 0x06,  // ...@L...
                /* 20B0 */  0x45, 0x80, 0x68, 0x7A, 0x20, 0x9A, 0xBE, 0x03,  // E.hz ...
                /* 20B8 */  0x10, 0x93, 0x12, 0xE2, 0xC0, 0x42, 0x4B, 0x1C,  // .....BK.
                /* 20C0 */  0x58, 0x28, 0x88, 0x80, 0x2C, 0xAF, 0x05, 0x10,  // X(..,...
                /* 20C8 */  0x13, 0x0B, 0x22, 0x20, 0x87, 0x07, 0xA2, 0x52,  // .." ...R
                /* 20D0 */  0x62, 0x00, 0x31, 0x71, 0x39, 0x80, 0x98, 0x54,  // b.1q9..T
                /* 20D8 */  0x10, 0x01, 0x59, 0x69, 0x90, 0x03, 0x0A, 0x05,  // ..Yi....
                /* 20E0 */  0x11, 0x90, 0x45, 0x14, 0x01, 0x62, 0x8A, 0x40,  // ..E..b.@
                /* 20E8 */  0x04, 0xE4, 0x74, 0x40, 0x34, 0x2A, 0x10, 0x95,  // ..t@4*..
                /* 20F0 */  0x9D, 0xE4, 0x10, 0x40, 0x41, 0x04, 0xE4, 0x0C,  // ...@A...
                /* 20F8 */  0x4D, 0x80, 0x58, 0x22, 0x10, 0x01, 0x39, 0x51,  // M.X"..9Q
                /* 2100 */  0x15, 0x20, 0x96, 0x0F, 0x44, 0x40, 0x56, 0x9C,  // . ..D@V.
                /* 2108 */  0xE5, 0x70, 0x40, 0x41, 0x04, 0x64, 0x3D, 0x5D,  // .p@A.d=]
                /* 2110 */  0x0E, 0x13, 0x14, 0x44, 0x40, 0x4E, 0x0B, 0x44,  // ...D@N.D
                /* 2118 */  0xB3, 0x03, 0xD1, 0x2C, 0x61, 0x0E, 0x36, 0x14,  // ...,a.6.
                /* 2120 */  0x44, 0x07, 0x1E, 0x92, 0x06, 0x88, 0x65, 0x04,  // D.....e.
                /* 2128 */  0xD1, 0x20, 0x48, 0x1B, 0x20, 0x26, 0x1F, 0x44,  // . H. &.D
                /* 2130 */  0x03, 0x26, 0x71, 0x80, 0xD8, 0xFF, 0x5F, 0x17,  // .&q..._.
                /* 2138 */  0x88, 0x0E, 0x09, 0x04, 0x88, 0x06, 0x06, 0xA2,  // ........
                /* 2140 */  0x81, 0xEB, 0x00, 0xB1, 0xF8, 0x20, 0x3A, 0xCC,  // ..... :.
                /* 2148 */  0x90, 0x40, 0x87, 0x19, 0x0A, 0xA2, 0x83, 0x11,  // .@......
                /* 2150 */  0x01, 0xA2, 0x81, 0x81, 0x68, 0x80, 0x42, 0x40,  // ....h.B@
                /* 2158 */  0x2C, 0x0E, 0x88, 0x0E, 0x01, 0x24, 0xD1, 0x21,  // ,....$.!
                /* 2160 */  0x80, 0x82, 0xE8, 0x10, 0x40, 0x80, 0xA8, 0x94,  // ....@...
                /* 2168 */  0x46, 0x07, 0x0A, 0x5A, 0xE9, 0x40, 0x41, 0x41,  // F..Z.@AA
                /* 2170 */  0x74, 0x58, 0x20, 0x40, 0x34, 0x31, 0x10, 0x55,  // tX @41.U
                /* 2178 */  0x9F, 0xE9, 0x00, 0x42, 0x41, 0x04, 0x64, 0x59,  // ...BA.dY
                /* 2180 */  0x9D, 0x80, 0x98, 0x46, 0x10, 0x01, 0x59, 0x63,  // ...F..Yc
                /* 2188 */  0xA8, 0xC3, 0x0C, 0x05, 0x11, 0x90, 0x55, 0xA7,  // ......U.
                /* 2190 */  0x3A, 0x08, 0x50, 0x10, 0x01, 0x59, 0x55, 0x2B,  // :.P..YU+
                /* 2198 */  0x60, 0x0A, 0x22, 0x20, 0x67, 0x06, 0xA2, 0x0A,  // `." g...
                /* 21A0 */  0x62, 0x1D, 0x06, 0x28, 0x88, 0x0E, 0x03, 0x04,  // b..(....
                /* 21A8 */  0x88, 0xEA, 0xAD, 0x05, 0xC4, 0xD4, 0x83, 0x68,  // .......h
                /* 21B0 */  0x90, 0xA4, 0xD7, 0xC1, 0x85, 0x82, 0x08, 0xC8,  // ........
                /* 21B8 */  0xDA, 0x82, 0x01, 0x31, 0xA1, 0x20, 0x3A, 0x90,  // ...1. :.
                /* 21C0 */  0x10, 0x20, 0xAA, 0xA0, 0x18, 0x10, 0x4B, 0x03,  // . ....K.
                /* 21C8 */  0xA2, 0x83, 0x0A, 0x01, 0xA2, 0x32, 0x93, 0x1D,  // .....2..
                /* 21D0 */  0x42, 0x28, 0x88, 0x8E, 0x5A, 0x04, 0x88, 0x6A,  // B(..Z..j
                /* 21D8 */  0x69, 0x76, 0x20, 0xA0, 0xD1, 0x0E, 0x14, 0x14,  // iv .....
                /* 21E0 */  0x44, 0x40, 0x16, 0x98, 0xED, 0xA0, 0x43, 0x41,  // D@....CA
                /* 21E8 */  0x74, 0x08, 0x24, 0xDD, 0x80, 0x98, 0x1C, 0x10,  // t.$.....
                /* 21F0 */  0x01, 0x39, 0x1E, 0x10, 0x0D, 0x0B, 0x44, 0xC5,  // .9....D.
                /* 21F8 */  0x87, 0x1B, 0x38, 0x05, 0x11, 0x90, 0xA5, 0x95,  // ..8.....
                /* 2200 */  0x1B, 0x18, 0x05, 0xD1, 0x41, 0x84, 0x00, 0x51,  // ....A..Q
                /* 2208 */  0x11, 0xE9, 0x0E, 0x64, 0x14, 0x44, 0x40, 0x0E,  // ...d.D@.
                /* 2210 */  0x08, 0x44, 0x03, 0xC6, 0x03, 0x62, 0xFF, 0xFF,  // .D...b..
                /* 2218 */  0xB4, 0x20, 0x3A, 0x44, 0x90, 0x7A, 0x87, 0x08,  // . :D.z..
                /* 2220 */  0x0A, 0xA2, 0xC3, 0x07, 0xE9, 0x37, 0x38, 0x1A,  // .....78.
                /* 2228 */  0xF0, 0x90, 0x42, 0x41, 0x74, 0x48, 0x21, 0x40,  // ..BAtH!@
                /* 2230 */  0x34, 0x67, 0xC2, 0x83, 0x15, 0x05, 0xD1, 0xA0,  // 4g......
                /* 2238 */  0x49, 0xC3, 0x43, 0x0D, 0x8D, 0x78, 0xC0, 0xA1,  // I.C..x..
                /* 2240 */  0x19, 0x0F, 0x0A, 0x14, 0x44, 0x07, 0x1F, 0x02,  // ....D...
                /* 2248 */  0x44, 0x43, 0x03, 0xD1, 0xD0, 0x21, 0x0F, 0x00,  // DC...!..
                /* 2250 */  0xB4, 0x24, 0x10, 0x53, 0x90, 0x12, 0x88, 0xE9,  // .$.S....
                /* 2258 */  0x01, 0xD1, 0x01, 0x81, 0xC4, 0x3C, 0x20, 0x50,  // .....< P
                /* 2260 */  0x10, 0x1D, 0x10, 0x08, 0x10, 0x55, 0x50, 0xF3,  // .....UP.
                /* 2268 */  0xB0, 0x43, 0x7B, 0x1E, 0x76, 0x28, 0x88, 0x06,  // .C{.v(..
                /* 2270 */  0x4E, 0x80, 0x68, 0x56, 0x20, 0x2A, 0x3B, 0xE8,  // N.hV *;.
                /* 2278 */  0xA1, 0x81, 0x82, 0xE8, 0x58, 0x47, 0x8A, 0x02,  // ....XG..
                /* 2280 */  0xB1, 0x40, 0x20, 0x02, 0x72, 0xB4, 0xA6, 0x07,  // .@ .r...
                /* 2288 */  0x22, 0x0A, 0x22, 0x20, 0x0B, 0x8F, 0x7A, 0x50,  // "." ..zP
                /* 2290 */  0xA2, 0x20, 0x3A, 0x0C, 0x91, 0xAA, 0x87, 0x21,  // . :....!
                /* 2298 */  0x0A, 0xA2, 0x43, 0x07, 0x01, 0xA2, 0xF1, 0x81,  // ..C.....
                /* 22A0 */  0xA8, 0x98, 0xB0, 0x87, 0x1E, 0x0A, 0xA2, 0x03,  // ........
                /* 22A8 */  0x02, 0x49, 0x7B, 0x40, 0xA0, 0x20, 0x02, 0xB2,  // .I{@. ..
                /* 22B0 */  0xE8, 0xB8, 0x40, 0x2C, 0x02, 0x88, 0x80, 0x1C,  // ..@,....
                /* 22B8 */  0x22, 0x2F, 0x10, 0x8B, 0x04, 0xA2, 0x83, 0x09,  // "/......
                /* 22C0 */  0x79, 0x80, 0xEA, 0x30, 0x46, 0x40, 0x04, 0xE4,  // y..0F@..
                /* 22C8 */  0xA0, 0x89, 0x0F, 0x3E, 0x14, 0x44, 0x40, 0x8E,  // ...>.D@.
                /* 22D0 */  0x1E, 0xF9, 0x00, 0x46, 0x2B, 0x1F, 0x67, 0x69,  // ...F+.gi
                /* 22D8 */  0x67, 0x20, 0x26, 0x0E, 0x44, 0x07, 0x35, 0x52,  // g &.D.5R
                /* 22E0 */  0xFA, 0xA0, 0x46, 0x41, 0x34, 0x18, 0xD2, 0x7A,  // ..FA4..z
                /* 22E8 */  0x30, 0x14, 0x44, 0x40, 0x8E, 0x51, 0x1B, 0x88,  // 0.D@.Q..
                /* 22F0 */  0x65, 0x02, 0xD1, 0x81, 0x81, 0xE4, 0x3E, 0x30,  // e.....>0
                /* 22F8 */  0x50, 0x10, 0x1D, 0x46, 0x48, 0x70, 0x20, 0xF6,  // P..FHp .
                /* 2300 */  0xFF, 0x4F, 0x0C, 0xA2, 0x43, 0x04, 0x29, 0x0E,  // .O..C.).
                /* 2308 */  0xC4, 0x92, 0x80, 0xE8, 0xE0, 0x46, 0x92, 0x1F,  // .....F..
                /* 2310 */  0xDC, 0x28, 0x88, 0x80, 0x1C, 0x39, 0x3A, 0x10,  // .(...9:.
                /* 2318 */  0x13, 0x50, 0x1D, 0x88, 0xC5, 0x01, 0x11, 0x90,  // .P......
                /* 2320 */  0xC3, 0x01, 0x51, 0xA9, 0xD9, 0x0F, 0x5F, 0x14,  // ..Q..._.
                /* 2328 */  0x44, 0x87, 0x00, 0x12, 0x1E, 0x88, 0xA5, 0x00,  // D.......
                /* 2330 */  0x11, 0x90, 0x53, 0x94, 0x1F, 0x14, 0x05, 0xD1,  // ..S.....
                /* 2338 */  0x01, 0x90, 0xB4, 0x3F, 0x00, 0x52, 0x10, 0x01,  // ...?.R..
                /* 2340 */  0x59, 0x77, 0x7C, 0x60, 0x0A, 0xA2, 0x43, 0x0E,  // Yw|`..C.
                /* 2348 */  0xC9, 0x7F, 0xC8, 0xA1, 0x20, 0x02, 0xF2, 0x4F,  // .... ..O
                /* 2350 */  0xE2, 0xBB, 0x32, 0x90, 0xFF, 0x00, 0x41, 0x0E,  // ..2...A.
                /* 2358 */  0x84, 0x18, 0x00, 0x62, 0x29, 0x40, 0x34, 0x10,  // ...b)@4.
                /* 2360 */  0xA2, 0x00, 0x88, 0x65, 0x02, 0xD1, 0x81, 0x88,  // ...e....
                /* 2368 */  0x48, 0x00, 0x62, 0x51, 0x41, 0x34, 0x70, 0x62,  // H.bQA4pb
                /* 2370 */  0x01, 0x88, 0x25, 0x00, 0x11, 0x90, 0x13, 0x68,  // ..%....h
                /* 2378 */  0x00, 0x62, 0x79, 0x40, 0x74, 0x68, 0x21, 0x22,  // .by@th!"
                /* 2380 */  0x80, 0x58, 0x3C, 0x10, 0x1D, 0x22, 0x88, 0x09,  // .X<.."..
                /* 2388 */  0x20, 0x16, 0x16, 0x44, 0x87, 0x0B, 0xE2, 0x02,  //  ..D....
                /* 2390 */  0x88, 0x29, 0x90, 0x01, 0xC4, 0xB2, 0x80, 0xE8,  // .)......
                /* 2398 */  0x60, 0x47, 0x80, 0x68, 0x30, 0x1B, 0x40, 0x2C,  // `G.h0.@,
                /* 23A0 */  0x26, 0x88, 0x0E, 0x93, 0xC4, 0x07, 0x10, 0xCB,  // &.......
                /* 23A8 */  0x0E, 0xA2, 0x81, 0x11, 0x21, 0x40, 0x2C, 0x12,  // ....!@,.
                /* 23B0 */  0x88, 0x0E, 0x05, 0xC4, 0x08, 0x10, 0x0B, 0x08,  // ........
                /* 23B8 */  0xA2, 0x43, 0x09, 0x71, 0x02, 0xC4, 0xD2, 0x82,  // .C.q....
                /* 23C0 */  0xE8, 0x50, 0x42, 0xA4, 0x0C, 0x80, 0x82, 0x08,  // .PB.....
                /* 23C8 */  0xC8, 0xF9, 0xB5, 0x00, 0x31, 0x35, 0x5E, 0x06,  // ....15^.
                /* 23D0 */  0x4A, 0x41, 0x74, 0xD8, 0x20, 0x40, 0x34, 0xAB,  // JAt. @4.
                /* 23D8 */  0x19, 0x20, 0x96, 0x1C, 0x44, 0x40, 0x4E, 0xA2,  // . ..D@N.
                /* 23E0 */  0x06, 0x88, 0xE5, 0x02, 0x11, 0x30, 0x91, 0x03,  // .....0..
                /* 23E8 */  0x4C, 0x41, 0x74, 0xB8, 0x24, 0x7A, 0x80, 0xD8,  // LAt.$z..
                /* 23F0 */  0xFF, 0x3F, 0x3E, 0x88, 0x0E, 0x2B, 0xC4, 0x0F,  // .?>..+..
                /* 23F8 */  0x10, 0xD3, 0x22, 0x08, 0x88, 0xA9, 0x52, 0x04,  // .."...R.
                /* 2400 */  0xC4, 0x34, 0x82, 0x08, 0x98, 0x00, 0xD1, 0xFC,  // .4......
                /* 2408 */  0x40, 0x54, 0x83, 0x25, 0x20, 0x26, 0x08, 0x44,  // @T.% &.D
                /* 2410 */  0x07, 0x2B, 0xA2, 0x09, 0x88, 0xA9, 0x03, 0x11,  // .+......
                /* 2418 */  0x90, 0x75, 0x8A, 0x02, 0x62, 0xAA, 0x41, 0x04,  // .u..b.A.
                /* 2420 */  0x64, 0xED, 0xAA, 0x80, 0x58, 0x10, 0x10, 0x0D,  // d...X...
                /* 2428 */  0x8C, 0xB8, 0x1A, 0x18, 0x05, 0xD1, 0x41, 0x81,  // ......A.
                /* 2430 */  0xD8, 0x02, 0x62, 0x79, 0x41, 0x04, 0x64, 0xFD,  // ..byA.d.
                /* 2438 */  0xBA, 0x80, 0x58, 0x1A, 0x10, 0x01, 0x39, 0x93,  // ..X...9.
                /* 2440 */  0xB0, 0xC1, 0x53, 0x10, 0x0D, 0x92, 0x18, 0x1B,  // ..S.....
                /* 2448 */  0x24, 0x05, 0xD1, 0x01, 0x82, 0x28, 0x3B, 0x34,  // $....(;4
                /* 2450 */  0x50, 0x10, 0x1D, 0x0C, 0x88, 0xB4, 0x83, 0x01,  // P.......
                /* 2458 */  0x05, 0xD1, 0x01, 0x92, 0x58, 0x03, 0x62, 0x72,  // ....X.br
                /* 2460 */  0x41, 0x74, 0xF0, 0x21, 0x40, 0x54, 0x83, 0x36,  // At.!@T.6
                /* 2468 */  0x20, 0x26, 0xC1, 0xDB, 0x20, 0x29, 0x88, 0x0E,  //  &.. )..
                /* 2470 */  0x2C, 0xC4, 0x1C, 0x10, 0x93, 0x08, 0xA2, 0x03,  // ,.......
                /* 2478 */  0x0B, 0x01, 0xA2, 0xF1, 0x81, 0xA8, 0x04, 0x79,  // .......y
                /* 2480 */  0xC0, 0x14, 0x44, 0x87, 0x41, 0x02, 0x44, 0xA3,  // ..D.A.D.
                /* 2488 */  0x02, 0x51, 0xE1, 0xF6, 0x80, 0x58, 0x0C, 0x10,  // .Q...X..
                /* 2490 */  0x0D, 0x96, 0xF8, 0x03, 0x62, 0xB1, 0x40, 0x04,  // ....b.@.
                /* 2498 */  0xE4, 0x54, 0x02, 0x81, 0x58, 0x46, 0x10, 0x1D,  // .T..XF..
                /* 24A0 */  0x74, 0x88, 0xC2, 0x83, 0x04, 0x75, 0x08, 0xC4,  // t....u..
                /* 24A8 */  0xF2, 0x80, 0x08, 0xC8, 0xE9, 0x80, 0x68, 0x46,  // ......hF
                /* 24B0 */  0x8B, 0x40, 0x2C, 0x31, 0x88, 0x06, 0x4E, 0x34,  // .@,1..N4
                /* 24B8 */  0x0E, 0x9C, 0x82, 0x08, 0xC8, 0x81, 0x44, 0x02,  // ......D.
                /* 24C0 */  0x53, 0x10, 0x0D, 0x8A, 0x98, 0x1C, 0x14, 0x05,  // S.......
                /* 24C8 */  0xD1, 0x81, 0x93, 0xB8, 0x04, 0x62, 0xB9, 0x41,  // .....b.A
                /* 24D0 */  0x34, 0x60, 0x22, 0x13, 0x88, 0xFD, 0xFF, 0x45,  // 4`"....E
                /* 24D8 */  0xD8, 0x04, 0x62, 0x42, 0x7C, 0x02, 0x31, 0x59,  // ..bB|.1Y
                /* 24E0 */  0x20, 0x3A, 0xB8, 0x10, 0x20, 0x1A, 0x19, 0x88,  //  :.. ...
                /* 24E8 */  0x86, 0x36, 0x0A, 0xC4, 0x24, 0x28, 0x05, 0x62,  // .6..$(.b
                /* 24F0 */  0x22, 0xA4, 0x02, 0x31, 0x45, 0x20, 0x3A, 0x74,  // "..1E :t
                /* 24F8 */  0x12, 0xAB, 0x40, 0x4C, 0x1E, 0x88, 0x0E, 0xBA,  // ..@L....
                /* 2500 */  0xC4, 0x2B, 0x10, 0x93, 0x0D, 0xA2, 0x41, 0x13,  // .+....A.
                /* 2508 */  0xB3, 0x83, 0xA6, 0x20, 0x3A, 0x08, 0x10, 0xB5,  // ... :...
                /* 2510 */  0x07, 0x01, 0x0A, 0xA2, 0x03, 0x10, 0x91, 0x0B,  // ........
                /* 2518 */  0xC4, 0xD4, 0x82, 0xE8, 0x28, 0x4D, 0xEC, 0x02,  // ....(M..
                /* 2520 */  0x31, 0xE9, 0x20, 0x3A, 0x14, 0x13, 0xBF, 0x07,  // 1. :....
                /* 2528 */  0x08, 0x0A, 0xA2, 0x23, 0x34, 0x31, 0x7C, 0x50,  // ...#41|P
                /* 2530 */  0xA0, 0x20, 0x1A, 0x2C, 0x71, 0x3C, 0x58, 0x0A,  // . .,q<X.
                /* 2538 */  0xA2, 0x41, 0x10, 0xCF, 0x47, 0x14, 0x0A, 0xC2,  // .A..G...
                /* 2540 */  0x45, 0x83, 0xB0, 0xF8, 0xAE, 0x41, 0x98, 0x78,  // E....A.x
                /* 2548 */  0xD9, 0x20, 0xD4, 0xF6, 0x00, 0xE8, 0x23, 0xE6,  // . ....#.
                /* 2550 */  0x11, 0x8C, 0x19, 0x07, 0xA1, 0xCA, 0x41, 0x98,  // ......A.
                /* 2558 */  0x6C, 0xEB, 0x03, 0xA6, 0x20, 0x5C, 0x3B, 0x08,  // l... \;.
                /* 2560 */  0xFB, 0xFF, 0x03                                 // ...
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (Zero){}
                ElseIf ((Arg0 == 0xE2))
                {
                    Return (EVT1) /* \GSA1.EVT1 */
                }

                Return (Zero)
            }

            Name (SAA0, Buffer (0x10)
            {
                /* 0000 */  0xF0, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00   // ........
            })
            Name (CCAA, Zero)
            Name (CCAB, Zero)
            Name (CCAC, Zero)
            Name (ECD0, Zero)
            Name (ECD1, Zero)
            Name (ECD2, Zero)
            Method (WCAA, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCAA == Zero)){}
                }
                ElseIf ((CCAA != Zero)){}
                CCAA = Arg0
            }

            Method (WED0, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD0 == Zero)){}
                }
                ElseIf ((ECD0 != Zero)){}
                ECD0 = Arg0
            }

            Method (WED1, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD1 == Zero)){}
                }
                ElseIf ((ECD1 != Zero)){}
                ECD1 = Arg0
            }

            Method (WED2, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD2 == Zero)){}
                }
                ElseIf ((ECD2 != Zero)){}
                ECD2 = Arg0
            }

            Method (GETA, 1, NotSerialized)
            {
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WQAA, 1, NotSerialized)
            {
                Return (GETA (Arg0))
            }

            Method (SETA, 2, NotSerialized)
            {
                SAA0 = Arg1
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (SETA (Arg0, Arg1))
            }

            Method (WMBB, 3, Serialized)
            {
                If (Zero){}
                ElseIf ((Arg1 == One))
                {
                    Return (GGG1 ())
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Return (GGG2 ())
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Return (GGG3 ())
                }
                ElseIf ((Arg1 == 0x04))
                {
                    Return (GGG4 ())
                }
                ElseIf ((Arg1 == 0x05))
                {
                    Return (GGG5 ())
                }
                ElseIf ((Arg1 == 0x06))
                {
                    Return (GGG6 ())
                }
                ElseIf ((Arg1 == 0x07))
                {
                    Return (GGG7 ())
                }
                ElseIf ((Arg1 == 0x08))
                {
                    Return (GGG8 ())
                }
                ElseIf ((Arg1 == 0x0A))
                {
                    Return (GGG9 (Arg2))
                }
                ElseIf ((Arg1 == 0x0B))
                {
                    Return (GGGE ())
                }
                ElseIf ((Arg1 == 0x0C))
                {
                    Return (GGGF (Arg2))
                }
                ElseIf ((Arg1 == 0x0D))
                {
                    CreateWordField (Arg2, Zero, GGGI)
                    CreateWordField (Arg2, 0x02, GGGJ)
                    CreateWordField (Arg2, 0x04, GGGK)
                    GGGH (GGGI, GGGJ, GGGK)
                }
                ElseIf ((Arg1 == 0x0E))
                {
                    \GSA1.MPTS (ToInteger (Arg2))
                }
                ElseIf ((Arg1 == 0x0F))
                {
                    \GSA1.MWAK (ToInteger (Arg2))
                }
                ElseIf (((Arg1 >= 0x64) && (Arg1 <= 0x6C)))
                {
                    CreateByteField (Arg2, Zero, SMDP)
                    CreateByteField (Arg2, One, SMDK)
                    CreateByteField (Arg2, 0x02, SMDL)
                    CreateByteField (Arg2, 0x03, SMDM)
                    CreateWordField (Arg2, 0x04, SMDN)
                    CreateByteField (Arg2, 0x03, SMDO)
                    If ((Arg1 == 0x64))
                    {
                        Local0 = SMBB ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x65))
                    {
                        Local0 = SMM0 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x66))
                    {
                        Local0 = SMM1 (SMDP, SMDK)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x67))
                    {
                        Local0 = SMM2 (SMDP, SMDK, SMDL, SMDM)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x68))
                    {
                        Local0 = SMM3 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x69))
                    {
                        Local0 = SMM4 (SMDP, SMDK, SMDL, SMDN)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6A))
                    {
                        Local0 = SMM5 (SMDP, SMDK, SMDL)
                        Return (Local0)
                    }
                }
                ElseIf (((Arg1 >= 0x6E) && (Arg1 <= 0x75)))
                {
                    CreateWordField (Arg2, Zero, PID0)
                    CreateByteField (Arg2, 0x02, PID1)
                    CreateWordField (Arg2, 0x02, PID2)
                    CreateDWordField (Arg2, 0x02, PID3)
                    If ((Arg1 == 0x6E))
                    {
                        Local0 = PIO6 (PID0, Zero)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6F))
                    {
                        PIO7 (PID0, Zero, PID1)
                    }
                    ElseIf ((Arg1 == 0x70))
                    {
                        Local0 = PIO6 (PID0, One)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x71))
                    {
                        PIO7 (PID0, One, PID2)
                    }
                    ElseIf ((Arg1 == 0x72))
                    {
                        Local0 = PIO6 (PID0, 0x02)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x73))
                    {
                        PIO7 (PID0, 0x02, PID3)
                    }
                }
                ElseIf ((Arg1 == 0x76)){}
                ElseIf ((Arg1 == 0x77)){}
                ElseIf (((Arg1 >= 0x78) && (Arg1 <= 0x80)))
                {
                    CreateByteField (Arg2, Zero, PCE0)
                    CreateByteField (Arg2, One, PCE1)
                    CreateByteField (Arg2, 0x02, PCE2)
                    CreateWordField (Arg2, 0x04, PCE3)
                    CreateByteField (Arg2, 0x06, PCE6)
                    CreateWordField (Arg2, 0x06, PCE4)
                    CreateDWordField (Arg2, 0x06, PCE5)
                    If ((Arg1 == 0x78))
                    {
                        Local0 = PCI4 ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x79))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, Zero))
                    }
                    ElseIf ((Arg1 == 0x7A))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, Zero, PCE6)
                    }
                    ElseIf ((Arg1 == 0x7B))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, One))
                    }
                    ElseIf ((Arg1 == 0x7C))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, One, PCE4)
                    }
                    ElseIf ((Arg1 == 0x7D))
                    {
                        Return (PCI9 (PCE0, PCE1, PCE2, PCE3, 0x02))
                    }
                    ElseIf ((Arg1 == 0x7E))
                    {
                        PCIA (PCE0, PCE1, PCE2, PCE3, 0x02, PCE5)
                    }

                    CreateByteField (Arg2, 0x06, PCE7)
                    CreateByteField (Arg2, 0x07, PCE8)
                    CreateDWordField (Arg2, 0x08, PCE9)
                    If ((Arg1 == 0x7F))
                    {
                        Return (PCI5 (PCE0, PCE1, PCE2, PCE3, PCE7, PCE8))
                    }
                    ElseIf ((Arg1 == 0x80))
                    {
                        PCI6 (PCE0, PCE1, PCE2, PCE3, PCE7, PCE8, PCE9)
                    }
                }
                ElseIf (((Arg1 >= 0x82) && (Arg1 <= 0x89)))
                {
                    CreateDWordField (Arg2, Zero, MED0)
                    CreateByteField (Arg2, 0x04, MED1)
                    CreateWordField (Arg2, 0x04, MED2)
                    CreateDWordField (Arg2, 0x04, MED3)
                    CreateByteField (Arg2, 0x04, MED4)
                    CreateByteField (Arg2, 0x05, MED5)
                    CreateDWordField (Arg2, 0x06, MED6)
                    If ((Arg1 == 0x82))
                    {
                        Return (MEM4 (MED0, Zero))
                    }
                    ElseIf ((Arg1 == 0x83))
                    {
                        MEM5 (MED0, Zero, MED1)
                    }
                    ElseIf ((Arg1 == 0x84))
                    {
                        Return (MEM4 (MED0, One))
                    }
                    ElseIf ((Arg1 == 0x85))
                    {
                        MEM5 (MED0, One, MED2)
                    }
                    ElseIf ((Arg1 == 0x86))
                    {
                        Return (MEM4 (MED0, 0x02))
                    }
                    ElseIf ((Arg1 == 0x87))
                    {
                        MEM5 (MED0, 0x02, MED3)
                    }
                    ElseIf ((Arg1 == 0x88))
                    {
                        Return (MEM0 (MED0, MED4, MED5))
                    }
                    ElseIf ((Arg1 == 0x89))
                    {
                        MEM1 (MED0, MED4, MED5, MED6)
                    }
                }
                ElseIf ((Arg1 == 0xBE))
                {
                    EVT2 (Arg2)
                }
                ElseIf ((Arg1 == 0x09))
                {
                    Return (EZW2) /* \GSA1.EZW2 */
                }
                ElseIf (((Arg1 >= 0x0118) && (Arg1 <= 0x0121)))
                {
                    CreateDWordField (Arg2, Zero, EZVD)
                    CreateDWordField (Arg2, 0x04, EZVE)
                    CreateWordField (Arg2, 0x04, EZVL)
                    If ((Arg1 == 0x0118))
                    {
                        Return (EZV3 (EZVD))
                    }
                    ElseIf ((Arg1 == 0x0119))
                    {
                        EZV4 (EZVD, EZVE)
                    }
                    ElseIf ((Arg1 == 0x011A))
                    {
                        Return (EZV6 ())
                    }
                    ElseIf ((Arg1 == 0x011B))
                    {
                        Return (EZVF (EZVD, EZVE))
                    }
                    ElseIf ((Arg1 == 0x011C))
                    {
                        Return (EZVG (EZVD, EZVE))
                    }
                    ElseIf ((Arg1 == 0x011D))
                    {
                        Return (EZV0 (EZVD))
                    }
                    ElseIf ((Arg1 == 0x011E))
                    {
                        Return (EZVJ (EZVD, DerefOf (Arg2 [0x04])))
                    }
                    ElseIf ((Arg1 == 0x011F))
                    {
                        Name (B2F2, Buffer (0x3C){})
                        Local0 = EZVL /* \GSA1.WMBB.EZVL */
                        Local1 = Zero
                        While (((Local1 * 0x02) < Local0))
                        {
                            B2F2 [Local1] = DerefOf (Arg2 [(0x06 + (Local1 * 
                                0x02))])
                            Local1++
                        }

                        Local3 = ToString (B2F2, Local1)
                        Return (EZVK (EZVD, Local3))
                    }
                    ElseIf ((Arg1 == 0x0120))
                    {
                        Return (EZVH (EZVD))
                    }
                    ElseIf ((Arg1 == 0x0121))
                    {
                        Name (B1F1, Buffer (0x3C){})
                        Local0 = EZVL /* \GSA1.WMBB.EZVL */
                        Local1 = Zero
                        While (((Local1 * 0x02) < Local0))
                        {
                            B1F1 [Local1] = DerefOf (Arg2 [(0x06 + (Local1 * 
                                0x02))])
                            Local1++
                        }

                        Local3 = ToString (B1F1, Local1)
                        EZVI (EZVD, Local3)
                    }
                }
                ElseIf ((Arg1 == 0x012C))
                {
                    Return (DIMC ())
                }
                ElseIf ((Arg1 == 0x0130))
                {
                    Return (DIMD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0136))
                {
                    Return (DIM1 (DerefOf (Arg2 [Zero])))
                }
            }

            Method (WMBC, 3, NotSerialized)
            {
            }
        }
    }

    Scope (\_SB)
    {
    }

    Scope (\)
    {
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 0028 */  0x1F, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x07, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10528, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B10564, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B10598, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B1059C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B105A0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B105A4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B105A8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B105AC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)){}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)){}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x31, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x43, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x44, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x46, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x48, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xDBFCD018, 0x000100CD)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                        One)
                }
                Else
                {
                    Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                        One)
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            Local2 = M038 (Local1)
        }
        ElseIf ((Local0 == 0x02))
        {
            Local2 = M038 ((Local1 + 0x08))
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                If ((Local0 == Zero))
                {
                    M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
                Else
                {
                    M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                        0x02 | Arg1))
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == 0x05))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                    0x04), Zero, One))
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = One
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IPTS (Arg0)
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }

        If ((M280 != Zero))
        {
            \_SB.M284 (Arg0)
        }

        If ((M331 != Zero))
        {
            If ((M049 (M331, 0x12) && M049 (M331, 0x13)))
            {
                \_SB.IWAK (Arg0)
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00001000)
{


SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "Set VDDIO", 
                "Set VTT"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xF9)
            {
                0x00020001, 
                0x029B, 
                0x0BB8, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                Zero, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x09C4, 
                0x21, 
                0x00020036, 
                0x0640, 
                0x1F40, 
                One, 
                0x00020037, 
                0xC8, 
                0x07D0, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x03E8, 
                0x0708, 
                0x0A, 
                0x00030002, 
                0x01F4, 
                0x0384, 
                0x05, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                Zero
            })
            Name (OBD1, Package (0xFA)
            {
                0x00020001, 
                0x29, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0xDC)
            {
                0x00020035, 
                0x2E, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x041A, 
                0x042A, 
                0x00030001, 
                0x51, 
                0x03E8, 
                0x03F2, 
                0x03FC, 
                0x0406, 
                0x0410, 
                0x041A, 
                0x0424, 
                0x042E, 
                0x0438, 
                0x0442, 
                0x044C, 
                0x0456, 
                0x0460, 
                0x046A, 
                0x0474, 
                0x047E, 
                0x0488, 
                0x0492, 
                0x049C, 
                0x04A6, 
                0x04B0, 
                0x04BA, 
                0x04C4, 
                0x04CE, 
                0x04D8, 
                0x04E2, 
                0x04EC, 
                0x04F6, 
                0x0500, 
                0x050A, 
                0x0514, 
                0x051E, 
                0x0528, 
                0x0532, 
                0x053C, 
                0x0546, 
                0x0550, 
                0x055A, 
                0x0564, 
                0x056E, 
                0x0578, 
                0x0582, 
                0x058C, 
                0x0596, 
                0x05A0, 
                0x05AA, 
                0x05B4, 
                0x05BE, 
                0x05C8, 
                0x05D2, 
                0x05DC, 
                0x05E6, 
                0x05F0, 
                0x05FA, 
                0x0604, 
                0x060E, 
                0x0618, 
                0x0622, 
                0x062C, 
                0x0636, 
                0x0640, 
                0x064A, 
                0x0654, 
                0x065E, 
                0x0668, 
                0x0672, 
                0x067C, 
                0x0686, 
                0x0690, 
                0x069A, 
                0x06A4, 
                0x06AE, 
                0x06B8, 
                0x06C2, 
                0x06CC, 
                0x06D6, 
                0x06E0, 
                0x06EA, 
                0x06F4, 
                0x06FE, 
                0x0708, 
                0x00030002, 
                0x51, 
                0x01F4, 
                0x01F9, 
                0x01FE, 
                0x0203, 
                0x0208, 
                0x020D, 
                0x0212, 
                0x0217, 
                0x021C, 
                0x0221, 
                0x0226, 
                0x022B, 
                0x0230, 
                0x0235, 
                0x023A, 
                0x023F, 
                0x0244, 
                0x0249, 
                0x024E, 
                0x0253, 
                0x0258, 
                0x025D, 
                0x0262, 
                0x0267, 
                0x026C, 
                0x0271, 
                0x0276, 
                0x027B, 
                0x0280, 
                0x0285, 
                0x028A, 
                0x028F, 
                0x0294, 
                0x0299, 
                0x029E, 
                0x02A3, 
                0x02A8, 
                0x02AD, 
                0x02B2, 
                0x02B7, 
                0x02BC, 
                0x02C1, 
                0x02C6, 
                0x02CB, 
                0x02D0, 
                0x02D5, 
                0x02DA, 
                0x02DF, 
                0x02E4, 
                0x02E9, 
                0x02EE, 
                0x02F3, 
                0x02F8, 
                0x02FD, 
                0x0302, 
                0x0307, 
                0x030C, 
                0x0311, 
                0x0316, 
                0x031B, 
                0x0320, 
                0x0325, 
                0x032A, 
                0x032F, 
                0x0334, 
                0x0339, 
                0x033E, 
                0x0343, 
                0x0348, 
                0x034D, 
                0x0352, 
                0x0357, 
                0x035C, 
                0x0361, 
                0x0366, 
                0x036B, 
                0x0370, 
                0x0375, 
                0x037A, 
                0x037F, 
                0x0384, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xDBFC4018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                MRSD,   288, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "A M I", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
        Processor (C004, 0x04, 0x00000810, 0x06){}
        Processor (C005, 0x05, 0x00000810, 0x06){}
        Processor (C006, 0x06, 0x00000810, 0x06){}
        Processor (C007, 0x07, 0x00000810, 0x06){}
        Processor (C008, 0x08, 0x00000810, 0x06){}
        Processor (C009, 0x09, 0x00000810, 0x06){}
        Processor (C00A, 0x0A, 0x00000810, 0x06){}
        Processor (C00B, 0x0B, 0x00000810, 0x06){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "ALASKA", "A M I", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000000C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000001C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000010C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000011C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000020C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000021C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000030C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000031C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000040C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000041C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000050C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000051C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000060C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000061C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000070C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000071C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000800, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000804, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000808, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000080C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000814, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000818, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000081C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000840, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000844, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000848, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000850, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000900, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000904, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000908, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000090C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000914, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000918, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000091C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000940, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000944, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000948, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000950, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PlatformCommChannel, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Method (NFPR, 0, NotSerialized)
    {
        Local0 = 0xDC3F0000
        OperationRegion (SHRM, SystemMemory, Local0, 0x0C08)
        Field (SHRM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x48), 
            V000,   1, 
            Offset (0x148), 
            V001,   1, 
            Offset (0x248), 
            V002,   1, 
            Offset (0x348), 
            V003,   1, 
            Offset (0x448), 
            V004,   1, 
            Offset (0x548), 
            V005,   1, 
            Offset (0x648), 
            V006,   1, 
            Offset (0x748), 
            V007,   1, 
            Offset (0x848), 
            V008,   1, 
            Offset (0x948), 
            V009,   1, 
            Offset (0xA48), 
            V00A,   1, 
            Offset (0xB48), 
            V00B,   1
        }

        If ((V000 == One))
        {
            Notify (\_PR.C000, 0x84) // Reserved
        }

        If ((V001 == One))
        {
            Notify (\_PR.C001, 0x84) // Reserved
        }

        If ((V002 == One))
        {
            Notify (\_PR.C002, 0x84) // Reserved
        }

        If ((V003 == One))
        {
            Notify (\_PR.C003, 0x84) // Reserved
        }

        If ((V004 == One))
        {
            Notify (\_PR.C004, 0x84) // Reserved
        }

        If ((V005 == One))
        {
            Notify (\_PR.C005, 0x84) // Reserved
        }

        If ((V006 == One))
        {
            Notify (\_PR.C006, 0x84) // Reserved
        }

        If ((V007 == One))
        {
            Notify (\_PR.C007, 0x84) // Reserved
        }

        If ((V008 == One))
        {
            Notify (\_PR.C008, 0x84) // Reserved
        }

        If ((V009 == One))
        {
            Notify (\_PR.C009, 0x84) // Reserved
        }

        If ((V00A == One))
        {
            Notify (\_PR.C00A, 0x84) // Reserved
        }

        If ((V00B == One))
        {
            Notify (\_PR.C00B, 0x84) // Reserved
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2B
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 2B 41 4C 41 53 4B 41  // UEFIB....+ALASKA
    0010: 41 20 4D 20 49 00 00 00 02 00 00 00 20 20 20 20  // A M I.......    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 C0 EC DB 00 00  // ...26...........
    0040: 00 00                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000F084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 83
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 61572 (0xF084)

    0000: 56 46 43 54 84 F0 00 00 01 83 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 4D 44 00  // A M I.......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 67 00 00 00 00  // ...........g....
    0060: 01 00 00 00 00 F0 00 00 55 AA 78 E9 B9 02 00 00  // ........U.x.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 5C 02 00 00 00 00 49 42 4D 7E 90 92 00 00 00 00  // \.....IBM~......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 B1 02 00 00 00 00 00 00  // 20..............
    00B0: 38 02 00 00 00 00 00 00 30 35 2F 32 35 2F 31 38  // 8.......05/25/18
    00C0: 20 30 34 3A 33 35 00 00 31 00 00 00 E9 C4 03 00  //  04:35..1.......
    00D0: E9 D3 03 00 00 00 F4 00 00 13 00 00 00 D0 01 00  // ................
    00E0: 4C A0 20 E1 02 80 7E 00 62 12 46 02 12 00 00 00  // L. ...~.b.F.....
    00F0: 00 00 00 3C 40 0E 02 07 3C 01 1A 00 04 00 00 00  // ...<@...<.......
    0100: EE A0 FF 06 00 08 30 40 0E 01 00 00 00 00 00 00  // ......0@........
    0110: 14 03 00 00 00 00 00 00 BE 7E 11 00 B9 07 1A D6  // .........~......
    0120: 50 2C 00 00 00 00 00 00 00 00 00 00 0C 40 41 43  // P,...........@AC
    0130: 00 00 00 00 10 00 00 00 42 00 00 00 F0 7D E6 0F  // ........B....}..
    0140: 20 00 20 00 12 00 0E 00 00 00 00 00 00 00 00 00  //  . .............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 31 31 33 2D  // ............113-
    0160: 54 49 43 33 34 31 33 35 2D 30 30 31 00 50 4F 4C  // TIC34135-001.POL
    0170: 41 52 49 53 32 30 00 50 43 49 5F 45 58 50 52 45  // ARIS20.PCI_EXPRE
    0180: 53 53 00 47 44 44 52 35 00 0D 0A 44 30 30 30 33  // SS.GDDR5...D0003
    0190: 34 20 50 6F 6C 61 72 69 73 32 30 20 58 4C 20 41  // 4 Polaris20 XL A
    01A0: 31 20 47 44 44 52 35 20 31 32 38 4D 78 33 32 20  // 1 GDDR5 128Mx32 
    01B0: 34 47 42 20 33 30 30 65 2F 33 30 30 6D 20 20 20  // 4GB 300e/300m   
    01C0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01D0: 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00  //        ..... ...
    01E0: 28 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20 41  // (C) 1988-2010, A
    01F0: 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44 65  // dvanced Micro De
    0200: 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F 4D  // vices, Inc..ATOM
    0210: 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30 31  // BIOSBK-AMD VER01
    0220: 35 2E 30 35 30 2E 30 30 32 2E 30 30 31 2E 30 33  // 5.050.002.001.03
    0230: 34 31 33 35 00 54 49 43 33 34 31 33 35 2E 30 30  // 4135.TIC34135.00
    0240: 31 00 31 35 35 39 35 37 31 20 00 34 31 37 32 38  // 1.1559571 .41728
    0250: 31 20 20 00 20 20 20 20 20 20 20 20 00 41 53 52  // 1  .        .ASR
    0260: 4F 43 4B 5F 4D 49 4E 49 4E 47 5F 50 4F 4C 41 52  // OCK_MINING_POLAR
    0270: 49 53 32 30 5F 44 30 30 30 33 34 5F 52 58 35 37  // IS20_D00034_RX57
    0280: 30 5F 41 31 5F 47 44 35 5F 34 47 42 5F 44 49 44  // 0_A1_GD5_4GB_DID
    0290: 35 30 32 36 5C 63 6F 6E 66 69 67 2E 68 00 00 00  // 5026\config.h...
    02A0: 24 00 01 01 41 54 4F 4D 00 C0 DD 03 CD 01 81 02  // $...ATOM........
    02B0: 21 01 02 04 00 00 00 00 49 18 26 50 5C 02 68 97  // !.......I.&P\.h.
    02C0: 0E 98 A0 00 50 43 49 52 02 10 DF 67 00 00 18 00  // ....PCIR...g....
    02D0: 00 00 00 03 78 00 32 0F 00 00 00 00 41 4D 44 20  // ....x.2.....AMD 
    02E0: 41 54 4F 4D 42 49 4F 53 00 6D 7D 80 7F 00 00 00  // ATOMBIOS.m}.....
    02F0: 00 00 00 00 00 85 7C 04 E0 6A 15 96 E6 7B 0B CC  // ......|..j...{..
    0300: 22 95 8B FD 53 01 00 00 00 00 00 00 00 00 00 00  // "...S...........
    0310: 00 00 00 00 00 00 00 00 00 56 1E 0E 1F E8 3E 2A  // .........V....>*
    0320: 81 4D 50 00 20 1F 5E 1E 06 66 50 66 51 66 52 66  // .MP. .^..fPfQfRf
    0330: 53 66 55 66 56 66 57 0E 1F A3 4C 02 8C 0E 40 02  // SfUfVfW...L...@.
    0340: B2 20 E8 F6 2D 0B C0 75 14 A2 02 00 66 5F 66 5E  // . ..-..u....f_f^
    0350: 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB E8 0C 2F  // f]f[fZfYfX...../
    0360: E8 D7 2C 32 D2 89 16 4E 02 A1 4C 02 66 C1 C0 10  // ..,2...N..L.f...
    0370: A1 40 02 E8 0B 04 E8 1E 04 E8 E6 03 E8 54 05 E8  // .@...........T..
    0380: 4B 03 E8 D9 29 F7 45 50 00 20 75 13 E8 AF 29 0B  // K...).EP. u...).
    0390: C0 74 0C E8 49 00 E8 F7 57 E8 DB 03 E8 3E 58 E8  // .t..I...W....>X.
    03A0: B9 00 B4 80 E8 C8 2C 8A C7 66 C1 E0 10 8A E3 B0  // ......,..f......
    03B0: 14 66 50 BB 08 00 E8 13 28 A8 01 66 58 74 02 B0  // .fP.....(..fXt..
    03C0: 20 66 A3 90 92 E8 68 03 E8 D6 03 E8 C3 2E 66 5F  //  f....h.......f_
    03D0: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F CB 2E  // f^f]f[fZfYfX....
    03E0: 8B 1E 40 02 83 3E EF 03 00 75 04 89 1E ED 03 1E  // ..@..>...u......
    03F0: 2E 8E 1E E5 03 9C FA 66 C7 06 08 01 65 F0 00 F0  // .......f....e...
    0400: C7 06 40 00 02 04 89 1E 42 00 C7 06 B4 01 02 04  // ..@.....B.......
    0410: 89 1E B6 01 C7 06 7C 00 AE 60 89 1E 7E 00 C7 06  // ......|..`..~...
    0420: 0C 01 C1 64 89 1E 0E 01 C7 06 A8 04 EE 5A 89 1E  // ...d.........Z..
    0430: AA 04 2E 8E 1E ED 03 8B C3 A3 F0 5A A3 00 5B A3  // ...........Z..[.
    0440: 12 5B 9D 1F C3 50 4D 49 44 02 04 16 48 00 00 00  // .[...PMID...H...
    0450: A0 00 B0 00 B8 00 C0 00 00 00 00 BB 00 00 E8 6B  // ...............k
    0460: 27 66 C1 E8 10 A3 62 02 C3 00 E8 FF 2D E8 48 02  // 'f....b.....-.H.
    0470: 75 1B 2E 3A 26 5A 02 75 05 E8 47 00 EB 11 80 FC  // u..:&Z.u..G.....
    0480: 4F 75 05 E8 EE 42 EB 07 E8 3B 4A EB 02 B4 01 E8  // Ou...B...;J.....
    0490: FF 2D CF E8 D6 2D E8 1F 02 75 05 E8 25 00 EB 02  // .-...-...u..%...
    04A0: B4 01 E8 EC 2D CB E8 C3 2D E8 0C 02 75 0F 80 FC  // ....-...-...u...
    04B0: 4F 75 05 E8 BE 42 EB 07 E8 0B 4A EB 02 B4 01 E8  // Ou...B....J.....
    04C0: CF 2D CB 1E 06 66 50 66 51 66 52 66 53 66 55 66  // .-...fPfQfRfSfUf
    04D0: 56 66 57 0E 1F 3C 04 75 23 BB 0B 00 E8 ED 26 8D  // VfW..<.u#.....&.
    04E0: 36 1E 01 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C 89  // 6...<..0.....^..
    04F0: 46 04 66 C1 E8 10 89 46 00 E9 9A 01 3C 05 75 18  // F.f....F....<.u.
    0500: E8 77 02 E8 34 2B 8B EC 89 56 10 89 46 00 66 C1  // .w..4+...V..F.f.
    0510: E8 10 89 46 04 E9 7E 01 3C 06 75 39 E8 69 02 66  // ...F..~.<.u9.i.f
    0520: D1 E0 8B EC 89 46 14 BB 02 00 E8 9F 26 88 46 18  // .....F......&.F.
    0530: E8 59 02 66 0B C0 0F 84 54 01 66 89 46 0C BB 06  // .Y.f....T.f.F...
    0540: 00 E8 88 26 33 C0 66 89 46 00 2E 8B 16 62 02 89  // ...&3.f.F....b..
    0550: 56 10 E9 41 01 3C 0B 75 24 0A DB 75 11 B9 80 00  // V..A.<.u$..u....
    0560: BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 28 01 8A C7  // ......^..N..(...
    0570: E8 3B 01 E8 D8 0E 0F 84 14 01 E9 19 01 3C 17 75  // .;...........<.u
    0580: 21 E8 6A 06 74 06 E8 5E 0D E8 A7 18 E8 8B 07 E8  // !.j.t..^........
    0590: AF 0E 33 C9 66 C1 E8 10 0A E8 8B EC 89 4E 14 E9  // ..3.f........N..
    05A0: F4 00 3C 18 75 6A 0A FF 75 18 E8 9B 05 8B EC 89  // ..<.uj..u.......
    05B0: 46 0C 66 C1 E8 10 89 46 14 E8 3C 08 89 4E 10 E9  // F.f....F..<..N..
    05C0: D4 00 80 FF 0F 74 0E 23 C9 0F 84 C1 00 E8 C5 05  // .....t.#........
    05D0: E8 1B 06 75 2D BB 00 1C E8 51 2C 66 0B C0 0F 84  // ...u-....Q,f....
    05E0: AC 00 E8 35 07 0B C9 0F 84 A3 00 BE 00 1C E8 C6  // ...5............
    05F0: 01 0F 84 99 00 BE 00 1C B0 40 E8 23 02 E8 48 05  // .........@.#..H.
    0600: EB 06 E8 3E 06 E8 2D 06 8B EC 89 46 0C E9 86 00  // ...>..-....F....
    0610: 3C 19 75 05 E8 00 06 EB 7D 3C 82 75 2C 80 FB 01  // <.u.....}<.u,...
    0620: 75 0D 8B EC BE 80 06 89 76 00 8C 4E 10 EB 67 80  // u.......v..N..g.
    0630: FB 05 75 15 0A FF 75 0A E8 86 03 8B EC 89 46 14  // ..u...u.......F.
    0640: EB 54 E8 45 03 74 3F EB 4D 3C 8E 75 12 80 FF 01  // .T.E.t?.M<.u....
    0650: 74 08 80 FF 02 75 2F 80 C1 02 E8 CA 03 EB 37 3C  // t....u/.......7<
    0660: 8F 75 23 80 FF 05 75 05 E8 1C 06 EB 29 80 FF 07  // .u#...u.....)...
    0670: 75 0A E8 20 06 8B EC 88 5E 0C EB 1A 80 FF 85 75  // u.. ....^......u
    0680: 05 E8 03 06 EB 10 8B EC C6 46 19 02 EB 0F 8B EC  // .........F......
    0690: C6 46 19 01 EB 07 32 E4 8B EC 88 66 19 66 5F 66  // .F....2....f.f_f
    06A0: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 51 8A  // ^f]f[fZfYfX...Q.
    06B0: C8 B8 01 00 D3 E0 59 C3 50 32 C0 53 BB 15 00 E8  // ......Y.P2.S....
    06C0: 0A 25 5B 3C FF 74 04 24 03 0A C0 58 C3 E8 E7 2B  // .%[<.t.$...X...+
    06D0: E8 A8 06 F7 C1 02 00 74 0E 06 0E 07 8D 3E 80 06  // .......t.....>..
    06E0: B8 02 00 E8 C1 05 07 C3 00 00 00 00 07 00 08 08  // ................
    06F0: 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 00 00 00 0C 01 C3 00 50 51 B0 B6  // ............PQ..
    0710: E6 43 B0 33 E6 42 B0 05 E6 42 E4 61 8A E0 0C 03  // .C.3.B...B.a....
    0720: E6 61 8A C4 B9 C8 00 E8 98 27 E6 61 59 58 C3 00  // .a.......'.aYX..
    0730: 1E 56 0E 1F 80 3E 02 00 80 76 05 C6 06 02 00 80  // .V...>...v......
    0740: 8A 0E 02 00 C1 E1 09 FC C6 06 21 00 00 33 F6 32  // ..........!..3.2
    0750: E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26 21 00 5E 1F  // ...........&!.^.
    0760: C3 00 E8 76 26 75 03 E8 20 28 E8 B9 26 E8 83 26  // ...v&u.. (..&..&
    0770: E8 DD 25 E8 71 0B C3 B0 01 C3 BB 01 00 E8 38 24  // ..%.q.........8$
    0780: C3 BB 01 00 E8 3B 24 C3 E8 C5 27 C3 53 BB 04 00  // .....;$...'.S...
    0790: E8 39 24 33 C0 5B C3 E8 8E 27 BB 0A 00 E8 22 24  // .9$3.[...'...."$
    07A0: C3 BB 0A 00 E8 11 24 66 8B C8 E8 7B 27 BB 0A 00  // ......$f...{'...
    07B0: 66 2B C1 E8 0C 24 C3 E8 29 00 0B C9 74 22 E8 66  // f+...$..)...t".f
    07C0: 06 E8 FB 15 66 51 66 8B C8 BB 07 00 E8 E9 23 66  // ....fQf.......#f
    07D0: 25 00 FE 00 00 66 0B C1 E8 E7 23 66 59 0C 01 C3  // %....f....#fY...
    07E0: 32 C0 C3 E8 9D 03 0B C9 75 0A 33 D2 E8 4F 25 8B  // 2.......u.3..O%.
    07F0: C8 E8 A1 03 0B D1 E8 FF 05 23 CA 66 C1 E6 10 33  // .........#.f...3
    0800: F6 E8 8A 0A 74 15 E8 97 0B 85 C1 74 F4 51 E8 A2  // ....t......t.Q..
    0810: 11 59 75 ED E8 89 0B 33 C8 EB E6 66 C1 EE 10 C3  // .Yu....3...f....
    0820: A8 10 75 5A E8 AA 15 66 C1 E6 10 33 F6 E8 5E 0A  // ..uZ...f...3..^.
    0830: 74 24 E8 2E 0A 74 0B E8 AB 0B 24 03 3C 03 75 ED  // t$...t....$.<.u.
    0840: EB 0A E8 A0 0B A8 01 74 E4 E8 15 07 E8 A3 16 B5  // .......t........
    0850: 00 E8 98 0B EB D7 E8 7C 01 32 C9 33 F6 E8 72 0A  // .......|.2.3..r.
    0860: E8 19 16 E8 F9 25 FE C1 38 C1 72 F1 66 C1 EE 10  // .....%..8.r.f...
    0870: E8 57 15 A8 20 75 57 A8 40 75 03 E8 36 1C E8 3E  // .W.. uW.@u..6..>
    0880: 15 0A C0 75 19 32 C9 33 F6 E8 46 0A 0B F6 74 05  // ...u.2.3..F...t.
    0890: B5 01 E8 D6 1C E8 C7 25 FE C1 38 C1 72 EB 33 F6  // .......%..8.r.3.
    08A0: E8 E0 09 74 26 E8 1D 0B E8 8F 22 75 14 E8 E5 03  // ...t&....."u....
    08B0: 0A DB 74 0D E8 AA 06 E8 38 16 B5 00 E8 2D 0B EB  // ..t.....8....-..
    08C0: DF E8 10 16 B5 01 E8 23 0B EB D5 E8 14 01 C3 E8  // .......#........
    08D0: 6C 24 C3 E8 5D 15 33 C9 33 D2 E8 B8 02 66 33 D2  // l$..].3.3....f3.
    08E0: 66 33 C0 E8 3E 0B E8 58 00 B1 FF E8 9C 00 33 F6  // f3..>..X......3.
    08F0: E8 9B 09 74 10 E8 CD 0A E8 3B 22 74 03 E8 6F 16  // ...t.....;"t..o.
    0900: E8 9C 16 EB EB B3 01 E8 6A 02 32 C9 E8 08 03 E8  // ........j.2.....
    0910: D2 24 E8 29 24 0B C0 C3 E8 CC 09 E8 15 15 66 33  // .$.)$.........f3
    0920: C0 66 BA 00 F0 00 F0 E8 2D 02 51 B1 01 E8 D8 02  // .f......-.Q.....
    0930: 59 33 F6 E8 58 09 74 05 E8 34 16 EB F6 E8 84 1B  // Y3..X.t..4......
    0940: C3 B8 02 00 E8 29 09 74 40 B1 07 E8 27 20 E8 31  // .....).t@...' .1
    0950: 0B A8 04 75 12 E8 A0 26 83 3D 00 75 0A E8 DE 23  // ...u...&.=.u...#
    0960: 83 E0 FD E8 E1 23 C3 66 BA FF FF FB FF 66 B8 00  // .....#.f.....f..
    0970: 00 04 00 E8 AE 0A E8 D1 0C E8 0F 26 8A C8 BB 04  // ...........&....
    0980: 00 E8 34 22 8A E1 E8 39 22 C3 E8 4B 22 74 31 38  // ..4"...9"..K"t18
    0990: E1 76 04 8A CC EB 06 38 C1 73 02 8A C8 BB 02 00  // .v.....8.s......
    09A0: E8 15 22 8A E1 E8 1A 22 BB 02 00 E8 0A 22 66 C1  // .."...."....."f.
    09B0: E8 18 A8 20 75 08 B1 04 E8 BA 1F 0C 01 C3 0C 01  // ... u...........
    09C0: C3 51 E8 13 22 74 0C 8A CC BB 02 00 E8 E9 21 8A  // .Q.."t........!.
    09D0: C4 8A E1 59 C3 33 F6 E8 A9 08 74 05 E8 7F 14 EB  // ...Y.3....t.....
    09E0: F6 C3 33 F6 E8 9C 08 74 05 E8 81 14 EB F6 C3 E8  // ..3....t........
    09F0: 49 25 75 1B 80 F9 01 75 17 33 F6 E8 85 08 74 0C  // I%u....u.3....t.
    0A00: 51 E8 D0 14 B5 01 E8 E3 09 59 EB EF E8 D3 FF C3  // Q........Y......
    0A10: E8 C2 FF 33 F6 E8 6B 08 74 0C 51 E8 51 15 B5 00  // ...3..k.t.Q.Q...
    0A20: E8 C9 09 59 EB EF C3 B8 02 00 E8 43 08 74 03 E8  // ...Y.......C.t..
    0A30: 43 1F C3 E8 0D 1B 8B C8 66 C1 E8 10 8B D0 C3 8A  // C.......f.......
    0A40: C3 24 80 E8 8B 13 32 C9 B5 10 E8 AF 1A E8 0F 24  // .$....2........$
    0A50: FE C1 38 C1 72 F2 C3 E8 04 13 3B C1 7C 3A 8B C1  // ..8.r.....;.|:..
    0A60: E8 44 13 E8 D5 1C 8B C8 51 E8 74 13 E8 38 13 59  // .D......Q.t..8.Y
    0A70: E8 C8 1C 3B C8 72 02 8B C1 8D 5C 04 E8 25 27 32  // ...;.r....\..%'2
    0A80: C9 B5 0F E8 76 1A E8 D6 23 FE C1 38 C1 72 F2 8D  // ....v...#..8.r..
    0A90: 5C 04 E8 97 27 0B C0 C3 33 C0 C3 52 E8 9C 00 8A  // \...'...3..R....
    0AA0: C2 8B D1 66 C1 E2 10 8A D0 32 C0 B9 00 02 E8 69  // ...f.....2.....i
    0AB0: 1C 66 C1 EA 10 8B CA 5A E8 80 00 E8 6E 27 66 C1  // .f.....Z....n'f.
    0AC0: E8 02 0A F6 75 04 66 C1 E8 02 67 26 88 07 66 C1  // ....u.f...g&..f.
    0AD0: E8 0A 67 26 88 47 01 66 C1 E8 0A 67 26 88 47 02  // ..g&.G.f...g&.G.
    0AE0: 66 83 C7 04 83 C3 04 E2 D2 C3 51 E8 4D 00 53 67  // f.........Q.M.Sg
    0AF0: 26 8A 47 02 66 C1 E0 0A 67 26 8A 47 01 66 C1 E0  // &.G.f...g&.G.f..
    0B00: 0A 67 26 8A 07 66 C1 E0 02 0A F6 75 04 66 C1 E0  // .g&..f.....u.f..
    0B10: 02 E8 78 26 66 83 C7 04 83 C3 04 E2 D2 5B 59 8A  // ..x&f........[Y.
    0B20: C2 8B D1 66 C1 E2 10 8A D0 B9 00 03 53 E8 EA 1B  // ...f........S...
    0B30: 5B E8 2B 23 FE C1 38 C1 72 F2 C3 BB 00 18 33 C0  // [.+#..8.r.....3.
    0B40: 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8 69 20 66  // ........S....i f
    0B50: 25 FF 0F FF 0F 5B C3 53 66 50 66 51 66 8B C8 BB  // %....[.SfPfQf...
    0B60: 03 00 E8 53 20 66 23 C2 66 0B C1 E8 54 20 66 59  // ...S f#.f...T fY
    0B70: 66 58 5B C3 B8 2C 06 F6 C3 01 75 03 B8 0C 06 E8  // fX[..,....u.....
    0B80: 37 00 C3 BB 05 00 E8 2F 20 25 FF 0F 8B C8 66 C1  // 7....../ %....f.
    0B90: E0 10 8B D0 C3 E8 A6 21 23 C8 81 E2 15 01 23 D1  // .......!#.....#.
    0BA0: 66 C1 E2 10 8B D1 BB 05 00 E8 0C 20 66 25 00 F0  // f.......... f%..
    0BB0: EA FE 66 0B C2 E8 0A 20 C3 66 50 53 51 66 52 66  // ..f.... .fPSQfRf
    0BC0: 33 D2 33 DB 8A DC 8A E8 8A C8 80 E1 1F 66 BA 01  // 3.3..........f..
    0BD0: 00 00 00 66 D3 E2 E8 DF 1F 66 0B C2 F6 C5 20 75  // ...f.....f.... u
    0BE0: 03 66 33 C2 E8 DB 1F 66 5A 59 5B 66 58 C3 66 50  // .f3....fZY[fX.fP
    0BF0: 53 BB 06 00 E8 C1 1F A8 10 75 09 BB F0 16 E8 2B  // S........u.....+
    0C00: 26 3D 5A A5 5B 66 58 C3 B8 04 06 80 F1 01 C0 E1  // &=Z.[fX.........
    0C10: 05 0A C1 E8 A3 FF C3 53 66 50 BB F8 16 E8 0C 26  // .......SfP.....&
    0C20: 8A C1 E8 67 25 66 58 5B C3 53 BB F8 16 E8 FC 25  // ...g%fX[.S.....%
    0C30: 83 E0 01 5B C3 BB 06 00 E8 7D 1F 66 C1 E8 10 25  // ...[.....}.f...%
    0C40: FF 0F C3 BB 06 00 E8 6F 1F 66 25 FF FF 00 F0 66  // .......o.f%....f
    0C50: C1 E2 10 66 0B C2 E8 69 1F C3 53 66 50 BB 07 00  // ...f...i..SfP...
    0C60: E8 55 1F F6 C4 01 66 58 B0 06 74 02 B0 08 5B C3  // .U....fX..t...[.
    0C70: 53 BB 07 00 E8 41 1F 80 E4 FE 80 FD 06 74 03 80  // S....A.......t..
    0C80: CC 01 E8 3D 1F 5B C3 53 B8 06 06 C0 E3 05 0A C3  // ...=.[.S........
    0C90: E8 26 FF 5B C3 66 50 BB 06 00 E8 1B 1F 24 40 C0  // .&.[.fP......$@.
    0CA0: E8 06 8A D8 66 58 C3 57 66 50 66 33 C0 B9 08 00  // ....fX.WfPf3....
    0CB0: FC F3 66 AB 66 58 5F E8 3E 01 0B C0 75 09 E8 E3  // ..f.fX_.>...u...
    0CC0: 05 74 3C 85 C1 74 F7 E8 A6 05 8D 9C 6A 01 E8 5B  // .t<..t......j..[
    0CD0: 25 26 89 05 8D 9C 6E 01 E8 51 25 26 89 45 02 8D  // %&....n..Q%&.E..
    0CE0: 9C B5 02 E8 46 25 02 C0 04 04 26 88 45 06 26 88  // ....F%....&.E.&.
    0CF0: 45 07 26 88 45 08 B0 07 26 88 45 04 0A C0 C3 32  // E.&.E...&.E....2
    0D00: C0 C3 C3 66 50 53 51 52 56 57 E8 E1 FE 74 03 E8  // ...fPSQRVW...t..
    0D10: D5 05 5F 5E 5A 59 5B 66 58 C3 33 C9 E8 1C 22 75  // .._^ZY[fX.3..."u
    0D20: 48 66 BA FF FF 0C FF 66 33 C0 E8 F7 06 33 F6 E8  // Hf.....f3....3..
    0D30: 5C 05 74 18 E8 69 06 A9 C8 0E 74 F3 E8 43 07 A8  // \.t..i....t..C..
    0D40: 04 75 04 A8 18 74 E8 E8 7B 00 EB E3 E8 2C 00 75  // .u...t..{....,.u
    0D50: 03 E8 A4 00 33 F6 E8 35 05 74 0E E8 42 06 85 C1  // ....3..5.t..B...
    0D60: 74 F4 51 E8 F9 07 59 EB ED C3 8D 5D 28 66 C1 E3  // t.Q...Y....](f..
    0D70: 10 8D 5C 28 B9 49 00 E8 0C 21 C3 66 50 53 52 56  // ..\(.I...!.fPSRV
    0D80: 33 C9 33 D2 8D 36 54 0D E8 B6 06 A8 03 74 03 83  // 3.3..6T......t..
    0D90: CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74 15 66 A9 01  // ..f........t.f..
    0DA0: 00 00 00 74 07 BB 01 00 D3 E3 0B D3 66 D1 E8 46  // ...t........f..F
    0DB0: EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3 03 07 01 05  // ......^Z[fX.....
    0DC0: 06 09 0A 0B FF 66 50 53 51 E8 D4 05 0F BC D8 81  // .....fPSQ.......
    0DD0: C3 84 0D 8A 0F 66 B8 01 00 00 00 66 D3 E0 66 BA  // .....f.....f..f.
    0DE0: FF FF FF FF E8 3D 06 59 5B 66 58 C3 01 12 0B 10  // .....=.Y[fX.....
    0DF0: 09 13 14 11 0C 15 16 17 50 53 52 E8 7D FF 75 13  // ........PSR.}.u.
    0E00: B9 01 00 E8 38 1F 23 C8 75 19 33 C0 E8 95 04 8B  // ....8.#.u.3.....
    0E10: C8 EB 10 83 F9 02 74 0B E8 7A FE 80 FB 01 75 03  // ......t..z....u.
    0E20: 83 E1 FD 5A 5B 58 C3 56 83 EC 04 8B EC 66 33 C0  // ...Z[X.V.....f3.
    0E30: 66 89 46 00 66 BA 00 F0 00 F0 E8 1A FD 66 C1 E6  // f.F.f........f..
    0E40: 10 E8 60 04 0B C0 74 1E 85 C1 74 F5 55 E8 56 00  // ..`...t...t.U.V.
    0E50: 5D 74 04 33 C8 EB EA E8 BB 05 66 3B 56 00 76 E1  // ]t.3......f;V.v.
    0E60: 66 89 56 00 EB DB E8 DF FC 74 07 66 8B 46 00 E8  // f.V......t.f.F..
    0E70: 05 00 83 C4 04 5E C3 33 F6 66 50 E8 05 04 66 58  // .....^.3.fP...fX
    0E80: 8D 9C D8 02 E8 05 23 66 8B D0 E8 BB FC E8 DD 18  // ......#f........
    0E90: 8D 9C 1C 03 E8 95 23 38 D0 74 0A 8A C2 E8 EC 22  // ......#8.t....."
    0EA0: B0 02 E8 5F 05 C3 50 51 E8 C5 03 32 C0 E8 54 05  // ..._..PQ...2..T.
    0EB0: E8 3A 03 E8 AB 00 8D 9C 40 03 E8 6F 23 38 E8 74  // .:......@..o#8.t
    0EC0: 0A 8A C5 E8 C6 22 B0 02 E8 39 05 E8 BD 00 E8 D8  // ....."...9......
    0ED0: 00 75 73 E8 9E 00 8D 9C 4C 01 E8 4F 23 8B C8 8B  // .us.....L..O#...
    0EE0: D3 8D 9C 00 03 E8 44 23 3B C1 74 05 B0 02 E8 13  // ......D#;.t.....
    0EF0: 05 E8 65 0A 8D 9C 00 03 E8 4F 18 8D 9C D8 02 E8  // ..e......O......
    0F00: 8A 22 66 C1 CE 10 8B FE 66 C1 CE 10 E8 C9 00 E8  // ."f.....f.......
    0F10: FF 00 E8 94 04 8A E9 8D 9C DC 02 32 C9 E8 B0 22  // ...........2..."
    0F20: E8 7D 04 66 25 FF 0F 00 00 E8 F9 03 80 F9 01 75  // .}.f%..........u
    0F30: 04 66 C1 E0 10 59 58 66 BA FF FF FF FF 66 33 D0  // .f...YXf.....f3.
    0F40: E8 14 FC 33 D2 C3 E8 05 00 0C 01 59 58 C3 53 66  // ...3.......YX.Sf
    0F50: 50 8D 9C D4 02 E8 D4 22 8A C4 E8 2F 22 66 58 5B  // P......".../"fX[
    0F60: C3 53 66 50 8D 9C D4 02 E8 C1 22 8A E0 E8 1C 22  // .SfP......"...."
    0F70: 66 58 5B C3 E8 CE 03 E8 91 03 8A DD E8 6B 19 8D  // fX[..........k..
    0F80: 9C 3C 03 8A E9 32 C9 E8 46 22 C3 83 EC 08 8B EC  // .<...2..F"......
    0F90: E8 B2 03 E8 75 03 E8 FF 18 8A 6E 00 8D 9C 4C 03  // ....u.....n...L.
    0FA0: 32 C9 E8 2B 22 83 C4 08 C3 33 C9 56 E8 23 03 0B  // 2..+"....3.V.#..
    0FB0: F6 5E 74 0C FE C1 E8 A6 1E 38 C1 75 EE 0C 01 C3  // .^t......8.u....
    0FC0: 8D 9C D4 02 E8 65 22 38 C8 74 0A 8A C1 E8 BC 21  // .....e"8.t.....!
    0FD0: B0 02 E8 2F 04 32 C0 C3 E8 0A 00 8D 9C D0 02 32  // .../.2.........2
    0FE0: C9 E8 EC 21 C3 8D 1D E8 42 22 66 8B D0 8D 9C 02  // ...!....B"f.....
    0FF0: 03 E8 38 22 51 8B C8 8D 9C 06 03 E8 2E 22 66 C1  // ..8"Q........"f.
    1000: E0 10 8B C1 59 66 3B C2 75 04 B5 00 EB 02 B5 02  // ....Yf;.u.......
    1010: C3 E8 6D 03 8D 9C 40 03 B1 03 E8 B3 21 E8 B2 06  // ..m...@.....!...
    1020: 8D 9C 40 03 B1 02 E8 A7 21 E8 DF 02 80 FD 00 75  // ..@.....!......u
    1030: 1D E8 94 00 66 81 FA F0 D2 00 00 75 06 66 BA 78  // ....f......u.f.x
    1040: 69 00 00 E8 B6 00 E8 EF 00 E8 AB 03 EB 38 E8 81  // i............8..
    1050: 03 E8 A3 03 66 52 E8 F7 02 0B D2 74 07 E8 82 18  // ....fR.....t....
    1060: 66 5A EB 22 E8 5E 03 E8 00 1B 66 5A 51 E8 9B 02  // fZ.".^....fZQ...
    1070: 80 FD 02 59 75 10 B5 04 66 81 FA 74 40 00 00 76  // ...Yu...f..t@..v
    1080: 05 B5 08 66 D1 EA 8D 9C 54 03 66 8B C2 E8 FC 20  // ...f....T.f.... 
    1090: 8D 9C 40 03 E8 95 21 8A E5 E8 F0 20 E8 1E 01 8D  // ..@...!.... ....
    10A0: 9C 48 03 32 C9 E8 28 21 E8 9A 02 E8 5D 02 E8 34  // .H.2..(!....]..4
    10B0: 18 8D 9C 58 03 32 C9 E8 16 21 E8 88 02 E8 4B 02  // ...X.2...!....K.
    10C0: 8D 9C 60 03 E8 EC 17 C3 53 8D 9C 29 01 E8 5C 21  // ..`.....S..)..\!
    10D0: 66 33 D2 0A C0 75 05 BA 48 3F 5B C3 8A D0 66 B8  // f3...u..H?[...f.
    10E0: 8C 0A 00 00 66 F7 E2 66 8B F8 E8 58 02 B3 00 E8  // ....f..f...X....
    10F0: 3F 17 66 3B D7 76 03 66 8B D7 5B C3 B7 01 53 8D  // ?.f;.v.f..[...S.
    1100: 9C 42 03 E8 26 21 8A C8 5B 66 52 E8 83 00 E8 C1  // .B..&!..[fR.....
    1110: 02 66 3B D1 66 5A 76 09 D0 E7 E8 07 00 38 EF 72  // .f;.fZv......8.r
    1120: DD 8A EF C3 53 8D 9C 2A 01 E8 00 21 24 0F 8A E8  // ....S..*...!$...
    1130: 0A ED 75 02 B5 01 5B C3 51 83 EC 08 8B EC 66 C7  // ..u...[.Q.....f.
    1140: 46 00 48 3F 78 69 66 C7 46 04 F0 D2 00 00 E8 FF  // F.H?xif.F.......
    1150: 01 0B D2 74 03 E8 9B 17 8A FD 53 8D 9C 42 03 E8  // ...t......S..B..
    1160: CA 20 8A C8 5B E8 60 FF 66 33 C0 8B 46 00 66 3B  // . ..[.`.f3..F.f;
    1170: C2 73 19 66 8B D0 E8 18 00 E8 56 02 66 3B D1 72  // .s.f......V.f;.r
    1180: 05 83 C5 02 EB D4 66 33 D2 8B 56 00 83 C4 08 59  // ......f3..V....Y
    1190: C3 66 52 52 32 ED 83 C1 02 B8 06 00 F7 E1 66 33  // .fRR2.........f3
    11A0: C9 8B C8 5A 51 66 33 C0 8B C2 8A CF 66 F7 E1 66  // ...ZQf3.....f..f
    11B0: C1 E0 03 59 66 F7 F1 66 8B C8 66 5A C3 E8 90 01  // ...Yf..f..fZ....
    11C0: 0B D2 74 0B E8 16 00 0A ED 75 11 E8 B8 16 C3 B5  // ..t......u......
    11D0: 00 E8 F1 01 E8 5F 19 75 03 E8 01 00 C3 B5 00 8D  // ....._.u........
    11E0: 9C 31 01 E8 46 20 A8 01 74 02 B5 01 C3 53 E8 5F  // .1..F ..t....S._
    11F0: 01 66 C1 E2 10 E8 4D 01 8D 9C B8 02 E8 2D 20 8A  // .f....M......- .
    1200: E8 E8 5F 16 8A EB 5B C3 57 53 53 E8 DF FF E8 34  // .._...[.WSS....4
    1210: 01 5B E8 A2 16 74 49 80 FD 00 75 24 53 E8 A8 FE  // .[...tI...u$S...
    1220: E8 AF 04 8A CD E8 FC FE 8A FD E8 64 FF 5B E8 FB  // ...........d.[..
    1230: 1F 66 25 FF FF 00 00 66 3B C8 73 21 32 DB EB 20  // .f%....f;.s!2.. 
    1240: 80 FD 02 75 18 53 E8 7C 01 E8 FB 18 5B 74 0E 8D  // ...u.S.|....[t..
    1250: 1D E8 D8 1F 3D 74 40 76 04 32 DB EB 03 80 CB 01  // ....=t@v.2......
    1260: 5B 5F C3 53 E8 39 01 8B D8 E8 DC F8 85 C3 5B C3  // [_.S.9........[.
    1270: 53 8B F0 E8 C8 1A 23 F0 74 07 8B C6 E8 69 19 8B  // S.....#.t....i..
    1280: F3 5B C3 E8 08 00 74 05 E8 D8 FF 74 F6 C3 33 C0  // .[....t....t..3.
    1290: 0B F6 74 03 E8 09 01 33 F6 E8 08 00 74 03 E8 CF  // ..t....3....t...
    12A0: FF 0B F6 C3 57 53 E8 E0 1A 0B C0 74 09 8B 1D 83  // ....WS.....t....
    12B0: C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0E 83 C7 02  // ..;.u......t....
    12C0: E8 7B 1A 85 D8 74 EF 8B C3 EB 02 33 C0 0B C0 5B  // .{...t.....3...[
    12D0: 5F C3 51 33 F6 8A E9 E8 A9 FF 74 07 E8 46 00 38  // _.Q3......t..F.8
    12E0: E9 75 F4 0B F6 59 C3 33 C0 E8 B8 FF 74 13 E8 7F  // .u...Y.3....t...
    12F0: FF 8B DE B9 FB 00 E8 78 1B 83 C6 08 E8 C2 19 EB  // .......x........
    1300: E8 BB F0 16 B8 5A A5 E8 9A 1E C3 53 66 50 8D 9C  // .....Z.....SfP..
    1310: 40 03 E8 17 1F 8A E8 66 58 5B C3 8D 9C 64 03 E8  // @......fX[...d..
    1320: 0A 1F 0B C0 C3 53 66 50 8D 9C D4 02 E8 FD 1E 8A  // .....SfP........
    1330: C8 66 58 5B C3 53 66 50 8D 9C D5 02 E8 ED 1E 8A  // .fX[.SfP........
    1340: C8 66 58 5B C3 53 8D 5C 14 E8 E0 1E 8B D0 5B C3  // .fX[.S.\......[.
    1350: 53 66 50 8D 5C 16 E8 D3 1E 8B D0 66 58 5B C3 53  // SfP.\......fX[.S
    1360: 66 50 8D 9C 50 03 E8 C3 1E 66 8B D0 66 58 5B C3  // fP..P....f..fX[.
    1370: 53 66 50 8D 9C 54 03 E8 B2 1E 66 8B D0 66 58 5B  // SfP..T....f..fX[
    1380: C3 53 66 50 8D 5C 10 E8 A2 1E 8B C8 66 58 5B C3  // .SfP.\......fX[.
    1390: 66 50 53 8D 9C 41 03 E8 92 1E 5B 8A D8 66 58 C3  // fPS..A....[..fX.
    13A0: 53 8D 5C 08 E8 85 1E 5B C3 53 50 8D 9C 4C 03 E8  // S.\....[.SP..L..
    13B0: 7A 1E 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 6C 1E  // z...X[.SP..M..l.
    13C0: 8A C8 58 5B C3 53 50 8D 5C 0C E8 5F 1E 8B D0 58  // ..X[.SP.\.._...X
    13D0: 5B C3 53 66 50 8D 9C 00 03 E8 50 1E 66 33 D2 8B  // [.SfP.....P.f3..
    13E0: D0 66 58 5B C3 8D 5C 04 E8 41 1E C3 51 8D 5C 04  // .fX[..\..A..Q.\.
    13F0: 32 C9 E8 DB 1D 59 C3 8D 9C 50 03 E8 2E 1E 8B C2  // 2....Y...P......
    1400: E8 89 1D C3 53 51 8A E8 E8 DA FF 24 FD 0A E8 E8  // ....SQ.....$....
    1410: DA FF 59 5B C3 66 50 8D 9C D8 02 E8 0E 1E 66 8B  // ..Y[.fP.......f.
    1420: D0 66 58 C3 53 66 50 66 51 66 8B C8 BB 00 00 E8  // .fX.SfPfQf......
    1430: 86 17 66 23 C2 66 0B C1 E8 87 17 66 59 66 58 5B  // ..f#.f.....fYfX[
    1440: C3 BB 00 00 E8 71 17 66 25 03 03 FF 00 C3 57 0B  // .....q.f%.....W.
    1450: C0 75 10 33 F6 E8 36 FE 74 26 E8 25 00 A8 04 74  // .u.3..6.t&.%...t
    1460: F4 EB 13 8B C8 E8 D6 18 23 C1 74 14 E8 01 FE E8  // ........#.t.....
    1470: 10 00 A8 04 74 0A 5F 8D 5C 28 E8 2D 05 0B F6 C3  // ....t._.\(.-....
    1480: 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF E8 B4 16 74  // _......tr.9....t
    1490: 30 0A ED 74 10 8A CD B5 02 E8 A0 19 B1 02 8D 9C  // 0..t............
    14A0: 48 01 E8 2B 1D E8 34 02 A8 04 74 15 8D 5C 28 E8  // H..+..4...t..\(.
    14B0: 56 00 74 0D E8 0E FF E8 80 16 74 3F 80 FD 02 74  // V.t.......t?...t
    14C0: 3A 8D 5C 28 E8 38 00 E8 20 0B 33 C9 50 8D 9C 28  // :.\(.8.. .3.P..(
    14D0: 01 E8 58 1D 66 0B C0 74 03 B9 00 08 58 0A C0 75  // ..X.f..t....X..u
    14E0: 13 8D 5C 28 E8 3F 00 75 0B 80 CD 02 E8 19 00 74  // ..\(.?.u.......t
    14F0: 03 80 CD 04 8D 9C 48 01 E8 D5 1C E8 DE 01 C3 51  // ......H........Q
    1500: B9 49 00 E8 6B 19 59 C3 51 E8 1A 00 75 14 E8 9C  // .I..k.Y.Q...u...
    1510: 01 3C 01 75 0D B9 20 00 E8 27 00 75 05 80 C9 01  // .<.u.. ..'.u....
    1520: EB 02 33 C9 59 C3 53 E8 02 1D 66 3D 00 FF FF FF  // ..3.Y.S...f=....
    1530: 75 0E 83 C3 04 E8 F4 1C 66 3D FF FF FF 00 75 00  // u.......f=....u.
    1540: 5B C3 50 52 32 D2 E8 E3 1C 02 D0 02 D4 66 C1 E8  // [.PR2........f..
    1550: 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 8D  // ............ZX..
    1560: 9C 4C 01 E8 1F 01 E8 73 01 B5 13 A8 08 75 0C E8  // .L.....s.....u..
    1570: 53 FE 8A EA 80 FD 13 75 02 B5 03 8D 9C B8 02 66  // S......u.......f
    1580: 33 C0 8A C5 E8 05 1C E8 16 FE A9 11 00 74 37 B5  // 3............t7.
    1590: 01 E8 22 01 E8 45 01 A8 04 75 17 55 BD 00 00 B8  // .."..E...u.U....
    15A0: 61 40 E8 F0 02 B8 45 40 E8 EA 02 5D B5 02 E8 8A  // a@....E@...]....
    15B0: 00 C3 E8 2F 01 B5 02 8D 5C 28 E8 DD 00 75 02 B5  // .../....\(...u..
    15C0: 01 E8 77 00 EB 67 A9 C8 0E 74 3E E8 0E 01 A8 08  // ..w..g...t>.....
    15D0: 74 08 8D 5C 28 E8 B4 00 74 B5 B5 02 E8 D7 00 E8  // t..\(...t.......
    15E0: FA 00 A8 04 74 0B 8D 5C 28 E8 F8 00 E8 F8 02 EB  // ....t..\(.......
    15F0: 0A 8D 9C 68 01 B8 3C 6A E8 60 05 E8 D4 00 80 FD  // ...h..<j.`......
    1600: 00 75 37 B5 02 E8 C0 00 C3 A9 22 00 74 2C B5 04  // .u7.......".t,..
    1610: E8 A3 00 8D 9C 68 01 56 E8 DD 19 8B F7 E8 58 03  // .....h.V......X.
    1620: 5E E8 85 19 E8 A1 00 8D 5C 28 E8 AB 19 8D 9C 68  // ^.......\(.....h
    1630: 01 E8 4F 03 66 8B D1 E8 C0 07 C3 8D 9C B4 02 B1  // ..O.f...........
    1640: 02 E8 8C 1B B5 02 E8 7F 00 C3 8D 9C 4C 01 E8 34  // ............L..4
    1650: 00 E8 88 00 A8 04 74 23 8D 5C 28 E8 86 00 E8 97  // ......t#.\(.....
    1660: 19 8D 9C 68 01 06 0E 07 B9 07 00 E8 3D 18 07 E8  // ...h........=...
    1670: 60 00 E8 50 FD 8D 5C 28 E8 88 19 8D 5C 28 E8 37  // `..P..\(....\(.7
    1680: 19 E8 DB FE C3 B9 61 00 E8 E6 17 C3 53 81 C3 05  // ......a.....S...
    1690: 01 E8 98 1B 24 06 3C 02 5B C3 E8 10 00 3D 01 04  // ....$.<.[....=..
    16A0: 75 0A 53 83 C3 18 E8 83 1B 5B A8 01 C3 53 83 C3  // u.S......[...S..
    16B0: 12 E8 78 1B 5B C3 8D 9C B4 02 32 C9 E8 11 1B C3  // ..x.[.....2.....
    16C0: 8D 9C B4 02 E8 65 1B C3 8D 9C B4 02 B1 01 E8 FF  // .....e..........
    16D0: 1A C3 8D 9C B4 02 B1 01 E8 0D 1B C3 8D 9C 48 01  // ..............H.
    16E0: E8 49 1B C3 55 57 51 B9 08 00 BD 00 00 BB 08 00  // .I..UWQ.........
    16F0: 2B D9 D1 E3 8D 58 4E E8 32 1B E8 98 01 E2 EE 8D  // +....XN.2.......
    1700: 5C 4B E8 27 1B B9 04 00 8B D0 BF 09 17 85 55 06  // \K.'..........U.
    1710: 74 17 66 8B 05 8D 9A F4 01 E8 70 1A 8B 45 04 8D  // t.f.......p..E..
    1720: 9A F8 01 E8 7E 1A 83 C5 08 83 C7 08 E2 DF 8D 7C  // ....~..........|
    1730: 5E B9 04 00 33 ED 8B DF E8 F1 1A 0B C0 74 09 E8  // ^...3........t..
    1740: 12 01 E8 4C 00 83 C5 1C 83 C7 12 E2 E9 32 ED E8  // ...L.........2..
    1750: 76 FF 8D 5C 28 E8 55 FF 3D 01 04 75 10 83 C3 14  // v..\(.U.=..u....
    1760: E8 C9 1A 24 70 C0 E8 04 8A E8 E8 5B FF 59 5F 5D  // ...$p......[.Y_]
    1770: C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C 00 00  // . .X.<.......<..
    1780: 08 00 05 00 04 4B 00 00 01 80 02 E0 01 3C 00 20  // .....K.......<. 
    1790: 00 51 8D 1D E8 95 1A 8D 9A 68 01 E8 06 1A 8D 5D  // .Q.......h.....]
    17A0: 02 E8 88 1A 8D 9A 6A 01 E8 89 00 8D 5D 05 E8 7B  // ......j.....]..{
    17B0: 1A 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8 6E 1A 8B C8  // ...n..|..]..n...
    17C0: 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A F0 C0 EE 04  // ..f.............
    17D0: 8A EC C0 E5 06 8A FC C0 E7 04 80 E7 03 80 E4 0F  // ................
    17E0: C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0 EC 02 0A F4  // .......?........
    17F0: 8B C3 8D 9A 74 01 E8 AB 19 8D 9A 72 01 8B C1 E8  // ....t......r....
    1800: A2 19 8D 9A 76 01 33 C0 8A C6 E8 97 19 8D 9A 78  // ....v.3........x
    1810: 01 33 C0 8A C2 E8 8C 19 8D 5D 0C E8 0E 1A 8D 9A  // .3.......]......
    1820: 7A 01 E8 0F 00 8D 5D 0F E8 01 1A 8D 9A 7E 01 E8  // z.....]......~..
    1830: 72 19 59 C3 8B C8 8A D4 66 C1 C8 10 8A F0 80 E6  // r.Y.....f.......
    1840: 0F 8A E8 C0 ED 04 8B C1 E8 59 19 83 C3 02 8B C2  // .........Y......
    1850: E8 51 19 C3 8D 5D 11 E8 D2 19 8A E0 BA 06 02 C0  // .Q...]..........
    1860: E8 07 74 03 80 CA 80 8A C4 C0 E8 03 24 03 3C 02  // ..t.........$.<.
    1870: 75 03 80 CA 40 3C 03 75 12 8A C4 D0 E8 A8 01 74  // u...@<.u.......t
    1880: 03 80 E2 FD A8 02 74 03 80 E2 FB 8B C2 8D 9A 80  // ......t.........
    1890: 01 E8 10 19 C3 3C 01 74 3D 8B D0 0F B6 C6 24 3F  // .....<.t=.....$?
    18A0: 04 3C 8D 9A F8 01 E8 FB 18 0F B6 C2 83 C0 1F C1  // .<..............
    18B0: E0 03 8D 9A F4 01 E8 EB 18 0F B6 DE C1 EB 06 C1  // ................
    18C0: E3 02 2E F7 A7 71 18 2E F7 B7 6F 18 8D 9A F6 01  // .....q....o.....
    18D0: E8 D1 18 83 C5 08 C3 01 00 01 00 04 00 03 00 05  // ................
    18E0: 00 04 00 10 00 09 00 57 8D 9C 68 01 8B FB 8B DF  // .......W..h.....
    18F0: E8 90 00 0B C9 74 44 8D 5D 18 E8 2F 19 A8 80 74  // .....tD.]../...t
    1900: 0D 8B DF 56 8D 36 D5 18 E8 6D 00 5E EB 28 66 8B  // ...V.6...m.^.(f.
    1910: D1 E8 E6 04 8D 9C A6 00 E8 11 19 3C 01 75 17 66  // ...........<.u.f
    1920: 81 F9 80 07 38 04 74 09 66 81 F9 00 05 D0 02 75  // ....8.t.f......u
    1930: 05 B5 03 E8 80 FD 83 C7 1C EB B3 5F C3 8C 0A D0  // ..........._....
    1940: 02 8A 00 E0 01 2D 00 10 00 3E 00 09 00 06 00 00  // .....-...>......
    1950: 00 00 00 00 00 06 00 00 00 50 53 51 B9 07 00 53  // .........PSQ...S
    1960: 8B DA E8 C7 18 83 F8 00 5B 74 09 66 C1 E3 10 8B  // ........[t.f....
    1970: DA E8 12 15 59 5B 58 C3 51 53 B9 07 00 E8 1F 15  // ....Y[X.QS......
    1980: 5B 59 C3 66 50 53 83 C3 06 E8 A0 18 5B 8B C8 66  // [Y.fPS......[..f
    1990: C1 E1 10 53 83 C3 02 E8 92 18 8B C8 5B 66 58 C3  // ...S........[fX.
    19A0: 8D 9C 48 01 32 C9 E8 27 18 C3 57 B9 20 00 E8 FA  // ..H.2..'..W. ...
    19B0: 14 5F C3 E8 0A FD 3C 01 75 57 8D 9C B6 02 E8 6B  // ._....<.uW.....k
    19C0: 18 A8 02 74 71 66 C1 CE 10 E8 F3 03 66 C1 CE 10  // ...tqf......f...
    19D0: 0A C0 75 0E 8D 9C 4C 01 B8 3C 6A E8 7D 01 0C 01  // ..u...L..<j.}...
    19E0: EB 7A 8D 9C 68 01 B0 00 E8 36 01 75 07 B0 00 E8  // .z..h....6.u....
    19F0: DF 00 74 68 8D 9C 68 01 B0 01 E8 24 01 75 52 B0  // ..th..h....$.uR.
    1A00: 01 E8 B0 00 75 56 B0 00 E8 A9 00 EB 4F 0B F6 EB  // ....uV......O...
    1A10: 4B 3C 04 74 21 3C 03 74 1D 66 C1 CE 10 E8 9F 03  // K<.t!<.t.f......
    1A20: 66 C1 CE 10 0A C0 74 07 B0 01 E8 A4 00 75 2D B0  // f.....t......u-.
    1A30: 00 E8 9D 00 75 26 8D BC 68 01 8D 1D E8 ED 17 0B  // ....u&..h.......
    1A40: C0 74 19 8B DF B0 00 E8 D7 00 75 05 83 C7 1C EB  // .t........u.....
    1A50: E9 8B D3 8D 9C 4C 01 E8 FF FE 0B F6 C3 57 53 51  // .....L.......WSQ
    1A60: E8 44 13 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1  // .D.;U.u.f.....f.
    1A70: CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09  // ..;].u...t.:E.t.
    1A80: 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F  // .....3.......Y[_
    1A90: C3 51 66 52 E8 10 13 3A 65 1A 75 09 0A C0 74 0E  // .QfR...:e.u...t.
    1AA0: 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF  // :E.t......3.....
    1AB0: 66 5A 59 C3 51 E8 EF 12 56 8D 9C 4C 01 8B F7 E8  // fZY.Q...V..L....
    1AC0: B6 FE 5E E8 5B 00 75 07 83 C7 1C E2 EB 33 FF 59  // ..^.[.u......3.Y
    1AD0: C3 8D BC F4 01 8A C8 8D 1D E8 50 17 0B C0 74 40  // ..........P...t@
    1AE0: 66 50 E8 DB FB 3C 01 66 58 74 05 3D 40 06 73 2B  // fP...<.fXt.=@.s+
    1AF0: 66 8B D0 8D 5D 04 E8 33 17 E8 61 FF 74 1D 8D 9C  // f...]..3..a.t...
    1B00: 4C 01 56 8B F2 E8 70 FE 5E 53 8D 9C 62 01 33 C0  // L.V...p.^S..b.3.
    1B10: E8 91 16 5B 8A C1 E8 08 00 75 05 83 C7 08 EB B7  // ...[.....u......
    1B20: C3 66 51 50 53 66 C1 CE 10 8B DE 66 C1 CE 10 E8  // .fQPSf.....f....
    1B30: FA 16 5B 66 8B D0 E8 4A FE 58 3C 01 75 0A 66 3B  // ..[f...J.X<.u.f;
    1B40: CA 75 13 E8 C2 F6 75 10 3B CA 72 0A 66 3B CA 72  // .u....u.;.r.f;.r
    1B50: 05 E8 B4 F6 75 02 32 C0 66 59 C3 56 57 E8 31 FF  // ....u.2.fY.VW.1.
    1B60: 8B F7 E8 13 FE 5F 5E C3 66 50 53 66 51 52 57 56  // ....._^.fPSfQRWV
    1B70: 51 8B DE B9 08 00 E8 F8 12 59 8D 5C 08 8B C1 66  // Q........Y.\...f
    1B80: C1 E0 10 8A C2 E8 04 16 F6 C2 03 75 24 8B C1 24  // ...........u$..$
    1B90: 7F BF 4B 1C 80 3D FF 0F 84 0F 01 3A 05 75 0D 66  // ..K..=.....:.u.f
    1BA0: 8B 45 01 66 B9 00 05 02 00 E9 96 00 83 C7 05 EB  // .E.f............
    1BB0: E3 F6 C2 01 74 25 8B C1 E8 61 01 0F 84 EB 00 33  // ....t%...a.....3
    1BC0: C9 8A CC 8A D0 0A C0 75 12 8D 5C 08 66 25 FF FF  // .......u..\.f%..
    1BD0: 00 00 66 C1 E0 08 E8 B3 15 EB B2 8A E1 8A CA 80  // ..f.............
    1BE0: E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A EA 80 FC 70  // ...............p
    1BF0: 72 2A 80 FC 75 73 25 80 EC 70 8A C4 32 E4 50 E8  // r*..us%..p..2.P.
    1C00: 21 02 8B D8 58 38 D8 72 05 33 C0 E9 9C 00 E8 19  // !...X8.r.3......
    1C10: 02 E8 18 16 0B C0 0F 84 90 00 EB 1B 32 C0 E8 70  // ............2..p
    1C20: FE 0F 84 85 00 8D 5C 16 8B 05 E8 77 15 8B 45 06  // ......\....w..E.
    1C30: 66 C1 E0 10 8B 45 02 50 E8 00 0B 66 C1 E1 10 8B  // f....E.P...f....
    1C40: C8 58 8D 1C E8 45 15 66 50 8D 5C 04 66 8B C1 E8  // .X...E.fP.\.f...
    1C50: 3A 15 66 58 66 C1 E8 10 66 81 E1 FF FF 00 00 66  // :.fXf...f......f
    1C60: F7 E1 66 50 8D 5C 06 E8 C2 15 8B C8 66 58 66 D3  // ..fP.\......fXf.
    1C70: E0 66 C1 E8 10 40 8D 5C 14 E8 28 15 BF 9C 1C 83  // .f...@.\..(.....
    1C80: F9 01 74 11 BF A4 1C 81 F9 01 01 74 08 BF AC 1C  // ..t........t....
    1C90: 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8 EE 14 8D 5C  // ...u..\.f......\
    1CA0: 10 66 8B 45 04 E8 E4 14 0B DB 5E 5F 5A 66 59 5B  // .f.E......^_ZfY[
    1CB0: 66 58 C3 00 40 01 90 01 01 40 01 90 01 02 80 02  // fX..@....@......
    1CC0: 90 01 03 80 02 90 01 04 40 01 90 01 05 40 01 90  // ........@....@..
    1CD0: 01 06 80 02 90 01 07 D0 02 5E 01 0D 40 01 90 01  // .........^..@...
    1CE0: 0E 80 02 90 01 0F 80 02 5E 01 10 80 02 5E 01 11  // ........^....^..
    1CF0: 80 02 E0 01 12 80 02 E0 01 13 80 02 90 01 62 80  // ..............b.
    1D00: 02 E0 01 FF 05 0A 05 05 05 00 00 00 05 0B 06 05  // ................
    1D10: 05 00 00 00 08 10 08 08 08 00 00 00 56 E8 77 12  // ............V.w.
    1D20: 80 E4 01 3B 04 74 09 83 C6 04 E2 F7 33 C0 EB 05  // ...;.t......3...
    1D30: 8B 44 02 0B C0 5E C3 57 53 50 E8 5A 12 83 E9 0A  // .D...^.WSP.Z....
    1D40: E8 E0 00 83 F8 05 76 03 B8 05 00 D1 E0 03 C8 FB  // ......v.........
    1D50: A5 83 C6 02 E2 FA B8 FF FF AB 58 5B 5F C3 66 53  // ..........X[_.fS
    1D60: 51 66 52 E8 41 00 E8 77 00 66 C1 E8 10 66 0F B7  // QfR.A..w.f...f..
    1D70: D8 66 B8 00 00 00 03 66 D3 E8 66 33 D2 66 F7 F3  // .f.....f..f3.f..
    1D80: E8 B8 09 66 5A 59 66 5B C3 53 66 50 BB 07 00 E8  // ...fZYf[.SfP....
    1D90: 26 0E 0A C0 66 58 5B C3 53 66 50 BB 07 00 E8 17  // &...fX[.SfP.....
    1DA0: 0E A8 01 66 58 5B C3 53 66 50 8D 5C 06 E8 7C 14  // ...fX[.SfP.\..|.
    1DB0: 8A C8 66 58 5B C3 51 B9 08 00 E8 C9 10 59 C3 53  // ..fX[.Q......Y.S
    1DC0: 8D 5C 08 E8 66 14 24 03 5B C3 8D 5C 09 E8 5C 14  // .\..f.$.[..\..\.
    1DD0: C3 51 53 B1 01 8A E8 8D 5C 08 E8 F3 13 5B 59 C3  // .QS.....\....[Y.
    1DE0: 53 8D 1C E8 46 14 5B C3 53 8D 5C 04 E8 3D 14 5B  // S...F.[.S.\..=.[
    1DF0: C3 53 8D 5C 16 E8 34 14 5B C3 53 66 52 33 C0 E8  // .S.\..4.[.SfR3..
    1E00: 5B FC 66 5A 75 1B E8 34 00 74 16 E8 15 00 40 83  // [.fZu..4.t....@.
    1E10: F8 05 73 0D E8 75 13 48 E8 0F 00 66 8B C2 E8 6B  // ..s..u.H...f...k
    1E20: 13 5B C3 BB 00 1E E8 03 14 C3 BB 08 1E C1 E0 03  // .[..............
    1E30: 03 D8 C3 BB 00 1E B9 32 00 E8 35 10 C3 51 E8 E2  // .......2..5..Q..
    1E40: FF 0B C0 74 12 8B C8 BB 08 1E E8 DF 13 66 3B C2  // ...t.........f;.
    1E50: 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3 C3 00 BB 20  // t........Y..... 
    1E60: DF E8 69 35 E8 BE F4 B5 01 E8 2B 07 C3 BB 00 DF  // ..i5......+.....
    1E70: E8 5A 35 E8 AF F4 B5 00 E8 1C 07 C3 80 F9 00 75  // .Z5............u
    1E80: 0A E8 E1 0F 8A C8 B5 02 E8 E5 08 0B F6 74 29 E8  // .............t).
    1E90: 93 F4 B5 01 E8 14 07 56 33 F6 B5 00 E8 5D 06 5E  // .......V3....].^
    1EA0: B5 01 E8 04 F5 E8 C8 08 E8 85 09 E8 77 F4 8D 9C  // ............w...
    1EB0: 00 03 E8 FD 06 E8 46 07 66 C1 CE 10 B5 01 E8 3B  // ......F.f......;
    1EC0: 06 E8 06 FF A8 40 75 07 32 C0 B5 01 E8 4B 08 66  // .....@u.2....K.f
    1ED0: C1 CE 10 C3 E8 4E F4 B5 01 E8 96 06 B5 00 E8 CA  // .....N..........
    1EE0: 06 E8 2D 07 B1 0F E8 16 0A B1 10 E8 11 0A E8 2B  // ..-............+
    1EF0: 00 C3 E8 7A 00 E8 3D F4 B5 00 E8 75 06 B5 00 E8  // ...z..=....u....
    1F00: A9 06 E8 B2 F4 E8 5D 0F 38 C1 74 0F 80 F9 08 72  // ......].8.t....r
    1F10: 05 80 F9 0B 76 05 B5 03 E8 55 08 C3 53 66 50 BB  // ....v....U..SfP.
    1F20: 02 00 E8 93 0C 66 A9 00 00 01 00 66 58 5B 75 3E  // .....f.....fX[u>
    1F30: E8 1D F4 0B D2 74 0C E8 AB F4 3C 01 74 05 B1 0F  // .....t....<.t...
    1F40: E8 FA 09 B1 0C E8 75 00 B1 01 E8 28 0A E8 BB F3  // ......u....(....
    1F50: 80 FD 00 75 0D E8 E6 01 B1 0D E8 A2 09 B1 03 E8  // ...u............
    1F60: 5B 00 E8 EB F3 0B D2 74 05 B1 01 E8 CF 09 C3 E8  // [......t........
    1F70: DE F3 0B D2 74 05 B1 00 E8 C2 09 B1 02 E8 3D 00  // ....t.........=.
    1F80: E8 62 F4 A8 01 74 0D E8 81 F3 80 FD 00 75 05 B0  // .b...t.......u..
    1F90: 02 E8 12 04 B1 00 E8 DC 09 B1 0D E8 1F 00 C3 B1  // ................
    1FA0: 07 E8 D1 09 E8 A9 F3 0B D2 75 0C E8 17 F4 E8 85  // .........u......
    1FB0: 0B 75 09 E8 6D 0A C3 B1 07 E8 81 09 C3 E8 05 F4  // .u..m...........
    1FC0: E8 73 0B 75 24 51 E8 AC 09 59 80 F9 0C 75 1A 33  // .s.u$Q...Y...u.3
    1FD0: D2 56 83 C6 08 E8 9C 0B 5E 0A C0 75 0C B9 0A 00  // .V......^..u....
    1FE0: E8 DF 0E 42 83 FA 1E 75 E8 C3 56 83 C6 08 E8 24  // ...B...u..V....$
    1FF0: 0B 5E E8 5B F3 0B D2 74 03 E8 99 08 80 FD 01 0F  // .^.[...t........
    2000: 84 D1 00 80 FD 02 0F 85 F2 00 B1 0C E8 AE FF 56  // ...............V
    2010: 83 C6 08 E8 5E 0B 5E 0A C0 0F 84 DF 00 E8 DF 00  // ....^.^.........
    2020: 0A DB 0F 85 D6 00 8D 9C 35 01 E8 FF 11 A8 01 74  // ........5......t
    2030: 03 E8 7F 03 E8 19 F3 0B D2 74 05 B1 14 E8 FD 08  // .........t......
    2040: 66 33 C9 E8 3B F3 66 BA 50 01 40 50 66 C1 C9 10  // f3..;.f.P.@Pf...
    2050: 8A C1 66 C1 C9 10 E8 15 0A 0F 85 9F 00 66 BA 50  // ..f..........f.P
    2060: 01 50 4F 52 E8 E9 F2 80 FA 22 5A 74 0D 8D 9C 2D  // .POR....."Zt...-
    2070: 01 E8 B8 11 24 06 3C 02 75 02 B6 02 8D 5C 28 66  // ....$.<.u....\(f
    2080: C1 C9 10 03 D9 66 C1 C9 10 E8 E2 09 75 6E 8A DF  // .....f......un..
    2090: 32 FF 66 C1 C9 10 03 CB 66 C1 C9 10 66 BA 50 01  // 2.f.....f...f.P.
    20A0: 10 30 33 DB E8 C7 09 75 53 66 C1 C9 10 8B C1 66  // .03....uSf.....f
    20B0: C1 C9 10 0B C0 74 45 83 F8 10 75 0F 8D 5C 28 E8  // .....tE...u..\(.
    20C0: 6A 11 66 0B C0 0F 85 7D FF EB 31 3D 80 00 0F 82  // j.f....}..1=....
    20D0: 74 FF EB 25 E8 AA F2 8A E9 B1 A0 BA 00 80 BF 32  // t..%...........2
    20E0: 00 8D 5C 28 E8 5C 09 80 FF 01 74 0D B1 A2 8D 5C  // ..\(.\....t....\
    20F0: 28 E8 4F 09 80 FF 01 75 03 B0 00 C3 B0 01 C3 E8  // (.O....u........
    2100: 2B 00 74 0C B0 01 E8 9D 02 75 21 E8 1F 00 75 1C  // +.t......u!...u.
    2110: 66 BA 0C 00 90 43 8D 9C 30 01 E8 51 09 66 BA 20  // f....C..0..Q.f. 
    2120: 00 90 41 8D 9C 34 01 E8 44 09 33 DB C3 E8 51 F2  // ..A..4..D.3...Q.
    2130: 66 BA 00 00 90 47 8D 9C 28 01 E8 31 09 C3 E8 A4  // f....G..(..1....
    2140: F2 3C 01 75 0E E8 ED 02 80 FD 01 75 06 B5 02 E8  // .<.u.......u....
    2150: 12 03 C3 8D 9C AC 03 B9 10 00 E8 14 0D B0 01 E8  // ................
    2160: 44 02 74 08 B5 04 E8 11 03 E9 19 01 B1 08 E8 8E  // D.t.............
    2170: 07 E8 66 02 B1 09 E8 86 07 E8 AC 01 8D 9C B8 03  // ..f.............
    2180: 66 33 C0 E8 06 10 E8 47 01 B9 90 01 E8 28 0D B0  // f3.....G.....(..
    2190: 01 E8 F7 01 B5 02 E8 D5 02 E8 5B 01 E8 E7 02 E8  // ..........[.....
    21A0: C7 01 B5 03 E8 C7 02 33 C9 E8 E7 00 F6 C5 01 75  // .......3.......u
    21B0: 2E B5 02 E8 B8 02 E8 07 01 F6 C5 04 74 08 B5 01  // ............t...
    21C0: E8 B7 02 E9 BF 00 8A FD 80 E7 03 E8 CF 00 80 E3  // ................
    21D0: 03 38 FB 75 07 E8 33 01 0F 84 A9 00 E8 54 01 FE  // .8.u..3......T..
    21E0: C1 E8 AC F1 38 D9 75 C1 8D 9C AC 03 E8 3D 10 3C  // ....8.u......=.<
    21F0: 03 74 05 E8 DA 00 EB A1 8D 9C B0 03 66 33 C0 E8  // .t..........f3..
    2200: 8A 0F 8D 9C 2A 01 E8 23 10 A8 40 74 0C B1 13 E8  // ....*..#..@t....
    2210: ED 06 B0 03 E8 74 01 EB 0A B1 0A E8 E1 06 B0 02  // .....t..........
    2220: E8 68 01 B5 04 E8 46 02 E8 CC 00 E8 58 02 E8 38  // .h....F.....X..8
    2230: 01 B5 05 E8 38 02 33 C9 E8 58 00 80 FD 07 75 05  // ....8.3..X....u.
    2240: E8 73 00 75 27 51 B5 04 E8 23 02 59 F6 C5 01 75  // .s.u'Q...#.Y...u
    2250: 07 B5 03 E8 24 02 EB 2D E8 65 00 8A D5 E8 D3 00  // ....$..-.e......
    2260: E8 5D 00 38 EA 75 05 E8 A1 00 74 19 FE C1 E8 1F  // .].8.u....t.....
    2270: F1 38 D9 75 C3 8D 9C AC 03 E8 B0 0F 3C 04 75 05  // .8.u........<.u.
    2280: E8 4D 00 EB A3 B0 00 E8 01 01 B1 0B E8 70 06 E8  // .M...........p..
    2290: A3 01 C3 8D 9C C0 03 E8 0F 00 8A E8 C3 53 8D 9C  // .............S..
    22A0: C4 03 E8 04 00 5B 8A D8 C3 51 E8 7F 0F C0 E1 02  // .....[...Q......
    22B0: D3 E8 24 0F 59 C3 8D 9C C2 03 E8 6F 0F A8 01 C3  // ..$.Y......o....
    22C0: 8D 9C B8 03 E8 21 0F C3 8D 9C B8 03 E8 01 0F C3  // .....!..........
    22D0: 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A D5 FE C1 E8  // 3.3....8.v......
    22E0: AE F0 38 D9 72 EE 33 C9 8A EA 8D 9C 5C 03 E8 DF  // ..8.r.3.....\...
    22F0: 0E B1 0B E8 7F 06 C3 E8 87 F0 8D 9C B8 03 E8 2B  // ...............+
    2300: 0F 66 BA 03 01 80 83 E8 64 07 C3 51 53 8D 9C B0  // .f......d..QS...
    2310: 03 E8 D4 0E FE C5 E8 B7 0E 80 FD 06 72 07 B5 02  // ............r...
    2320: E8 57 01 33 C9 5B 59 C3 66 33 C0 8D 9C B0 03 E8  // .W.3.[Y.f3......
    2330: 5A 0E C3 32 ED E8 65 FF 80 E3 0C C0 EB 02 B7 03  // Z..2..e.........
    2340: 2A FB C0 E3 03 8A EB 80 FB 18 72 03 80 CD 20 E8  // *.........r... .
    2350: 4B FF 80 E3 03 38 FB 72 02 8A DF 80 FB 03 75 03  // K....8.r......u.
    2360: 80 CD 04 0A EB E8 60 FF C3 E8 15 F0 8D 9C C0 03  // ......`.........
    2370: 66 BA 02 02 90 45 E8 F5 06 C3 E8 04 F0 66 BA 00  // f....E.......f..
    2380: 01 90 42 8D 9C B4 03 E8 E4 06 C3 E8 F3 EF 66 BA  // ..B...........f.
    2390: 02 01 80 50 E8 D7 06 C3 E8 D5 EF 8B C2 66 33 D2  // ...P.........f3.
    23A0: B9 8C 0A F7 F1 C3 E8 D8 EF 66 BA 00 06 80 50 E8  // .........f....P.
    23B0: BC 06 C3 E8 CB EF 66 BA 11 01 80 50 B0 04 E8 AD  // ......f....P....
    23C0: 06 C3 E8 BC EF 66 BA 00 06 90 40 8D 9C C8 03 E8  // .....f....@.....
    23D0: 9C 06 8D 9C C8 03 E8 53 0E C3 E8 BB FF E8 B0 EF  // .......S........
    23E0: 8A E3 80 CC 80 50 E8 98 EF 58 66 BA 00 01 80 61  // .....P...Xf....a
    23F0: E8 7B 06 33 C9 E8 23 EF 0B C0 74 02 B5 10 8D 9C  // .{.3..#...t.....
    2400: BC 03 E8 CB 0D 8A C5 E8 77 EF 66 BA 07 01 80 50  // ........w.f....P
    2410: E8 5B 06 E8 AF EF E8 21 07 75 19 8D 9C 48 03 E8  // .[.....!.u...H..
    2420: 0A 0E 0A C0 74 0E E8 58 EF 66 BA 0A 01 80 50 B0  // ....t..X.f....P.
    2430: 01 E8 3A 06 C3 E8 42 FF E8 2E FF E8 84 FF 3C 01  // ..:...B.......<.
    2440: 75 1C E8 71 FE 74 17 33 C9 E8 47 FE 80 FD 07 75  // u..q.t.3..G....u
    2450: 0D FE C1 E8 3A EF 38 D9 75 EF B5 01 EB 02 B5 00  // ....:.8.u.......
    2460: E8 01 00 C3 8D 9C AC 03 B1 02 E8 63 0D C3 51 8D  // ...........c..Q.
    2470: 9C AC 03 32 C9 E8 58 0D 59 C3 51 8D 9C AC 03 B1  // ...2..X.Y.Q.....
    2480: 01 E8 4C 0D 59 C3 8D 9C 32 01 E8 9F 0D 0A C0 75  // ..L.Y...2......u
    2490: 15 B9 64 00 8D 9C AC 03 E8 91 0D 3C 02 74 03 B9  // ..d........<.t..
    24A0: 90 01 E8 12 0A C3 32 E4 B1 04 33 D2 F6 E1 8B C8  // ......2...3.....
    24B0: E8 0F 0A C3 51 8D 5C 14 E8 71 0D 66 C1 E0 10 E8  // ....Q.\..q.f....
    24C0: 98 01 59 C3 33 C9 E8 96 09 38 C1 73 05 B5 00 E8  // ..Y.3....8.s....
    24D0: A7 00 B5 00 E8 9B 00 FE C1 E8 86 09 38 C1 72 E6  // ............8.r.
    24E0: B1 14 8A E9 E8 7E 09 38 C1 74 05 B5 03 E8 80 02  // .....~.8.t......
    24F0: FE C1 E8 67 09 04 14 38 C1 76 E7 C3 83 EC 0C 8B  // ...g...8.v......
    2500: EC 0B F6 74 29 E8 D8 F8 66 C1 C8 10 80 FD 10 75  // ...t)...f......u
    2510: 06 8D 5C 18 E8 15 0D 66 89 46 00 8D 5C 04 E8 0B  // ..\....f.F..\...
    2520: 0D 66 89 46 04 8D 5C 08 E8 01 0D 88 46 0A 89 4E  // .f.F..\.....F..N
    2530: 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00 E8 7B 08 83  // ...f......+..{..
    2540: C4 0C C3 33 DB 83 EC 08 8B EC 89 5E 00 8C D0 66  // ...3.......^...f
    2550: C1 E0 10 8B C4 BB 01 00 E8 5F 08 8B EC 8B 4E 00  // ........._....N.
    2560: 8B 56 02 66 8B 46 04 83 C4 08 C3 BB 25 00 E8 0F  // .V.f.F......%...
    2570: 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00 E8 01 00 C3  // ...#............
    2580: 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4  // ......N...f.....
    2590: E8 27 08 83 C4 04 C3 BB 22 00 E8 E3 FF 80 FD 01  // .'......".......
    25A0: 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB 2C 00 E8 CF  // t...........,...
    25B0: FF C3 E8 77 0C 66 A9 00 00 FF FF 74 40 83 EC 18  // ...w.f.....t@...
    25C0: 8B EC 55 51 B9 04 00 83 C3 02 E8 5F 0C 66 89 46  // ..UQ......._.f.F
    25D0: 00 83 C5 04 83 C3 04 E2 F1 83 C3 04 E8 4D 0C 66  // .............M.f
    25E0: C1 C8 10 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1  // ...f.F.Y].N...f.
    25F0: E0 10 8B C4 BB 31 00 E8 C0 07 83 C4 18 C3 E8 24  // .....1.........$
    2600: ED 8D 9C D0 02 E8 24 0C 8A E8 BB 21 00 E8 70 FF  // ......$....!..p.
    2610: C3 8D 9C 3C 03 E8 14 0C 8A F8 E8 EE EC 8A DD 53  // ...<...........S
    2620: 8D 9C 42 03 E8 05 0C 8A E8 5B E8 F8 EC E8 95 ED  // ..B......[......
    2630: E8 07 05 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88  // ...u.........N..
    2640: 7E 01 88 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4  // ~..^..n...f.....
    2650: BB 2A 00 E8 64 07 83 C4 04 C3 83 EC 10 8B EC 66  // .*..d..........f
    2660: 8B C8 66 33 C0 66 89 46 04 BB 00 17 E8 1D 0B 66  // ..f3.f.F.......f
    2670: B8 00 80 20 50 66 89 46 0C 66 33 C0 66 89 46 08  // ... Pf.F.f3.f.F.
    2680: 56 E8 11 07 66 8B 44 04 66 50 66 C1 E8 16 88 46  // V...f.D.fPf....F
    2690: 08 66 58 66 C1 E0 0A 66 05 00 17 00 00 66 89 46  // .fXf...f.....f.F
    26A0: 00 5E 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 0A 07  // .^..f......5....
    26B0: 8B EC 66 B8 00 80 00 00 66 2B C8 66 89 46 04 66  // ..f.....f+.f.F.f
    26C0: 05 00 00 20 40 66 89 46 0C 66 33 C0 66 89 46 08  // ... @f.F.f3.f.F.
    26D0: 66 89 46 00 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8  // f.F...f......5..
    26E0: D8 06 8B EC 66 8B 46 0C 66 25 FF FF 1F 00 66 01  // ....f.F.f%....f.
    26F0: 46 04 66 3B C8 76 1F 66 2B C8 66 8B 46 04 66 3D  // F.f;.v.f+.f.F.f=
    2700: 00 FF 01 00 76 06 66 B8 00 FF 01 00 66 3B C8 73  // ....v.f.....f;.s
    2710: AE 66 8B C1 EB A9 83 C4 10 C3 83 EC 08 8B EC 89  // .f..............
    2720: 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0 10 8B  // N.f.V..^...f....
    2730: C4 BB 2D 00 E8 83 06 83 C4 08 C3 3D C0 7F 76 04  // ..-........=..v.
    2740: B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 DE 0A 66 33  // ......?$..Q...f3
    2750: D2 B9 0A 00 F7 F1 8B C8 E8 D1 0A 03 C1 66 25 FF  // .............f%.
    2760: FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 32 D2 C3  // ...Y=.'s...'.2..
    2770: 80 FD 02 75 19 E8 9D EC 66 BB 00 08 00 00 E8 8E  // ...u....f.......
    2780: 00 66 33 D2 66 BB 01 08 00 00 E8 82 00 C3 80 FD  // .f3.f...........
    2790: 03 75 10 66 33 C0 8A C1 66 33 D2 66 BB FF 00 00  // .u.f3...f3.f....
    27A0: 00 EB 36 51 33 D2 E8 62 EB 8A D5 66 C1 E2 10 E8  // ..6Q3..b...f....
    27B0: 93 EB 8A F2 8A D1 66 8B C2 66 0D 00 00 00 80 E8  // ......f..f......
    27C0: CE EB 80 FB 04 76 06 66 0D 00 00 00 08 E8 02 EC  // .....v.f........
    27D0: E8 52 EB 66 33 DB 8A D9 59 83 EC 14 8B EC 66 89  // .R.f3...Y.....f.
    27E0: 46 04 66 89 5E 08 66 8B C2 66 33 D2 66 BB 64 00  // F.f.^.f..f3.f.d.
    27F0: 00 00 66 F7 E3 66 89 46 00 BB 0C 00 8C D0 66 C1  // ..f..f.F......f.
    2800: E0 10 8B C4 E8 B3 05 8B EC B3 01 83 C4 14 C3 83  // ................
    2810: EC 10 8B EC 66 89 56 00 66 89 5E 04 BB 2E 00 8C  // ....f.V.f.^.....
    2820: D0 66 C1 E0 10 8B C4 E8 90 05 B3 01 83 C4 10 C3  // .f..............
    2830: C3 53 51 66 50 B9 A0 8C 80 FB 00 75 1C B9 90 7E  // .SQfP......u...~
    2840: E8 0E 05 83 E3 03 80 FB 03 75 0E E8 E4 05 66 3D  // .........u....f=
    2850: 50 C3 00 00 72 03 B9 F0 D2 66 33 D2 8B D1 66 58  // P...r....f3...fX
    2860: 59 5B C3 66 52 B3 00 66 F7 C2 00 00 FF FF 75 13  // Y[.fR..f......u.
    2870: 80 FD 13 74 0E 80 FD 14 74 09 B3 01 80 FD 0E 74  // ...t....t......t
    2880: 02 B3 02 66 5A C3 B5 11 80 FA 23 74 07 80 FA 22  // ...fZ.....#t..."
    2890: 74 02 B5 00 C3 B5 02 C3 B1 01 80 FD 00 75 06 C7  // t............u..
    28A0: 46 00 0B 01 C3 50 33 C0 E8 79 01 04 14 89 46 00  // F....P3..y....F.
    28B0: 58 C3 C3 C3 0C 01 C3 E8 72 09 66 C1 E8 10 0B C0  // X.......r.f.....
    28C0: 74 1A 53 83 C3 06 E8 63 09 5B 3D E0 01 72 0D 53  // t.S....c.[=..r.S
    28D0: 83 C3 18 E8 56 09 5B A9 10 00 74 03 32 C0 C3 0C  // ....V.[...t.2...
    28E0: 01 C3 B5 0C C3 32 ED B5 02 C3 57 E8 01 01 8B 4D  // .....2....W....M
    28F0: 06 5F C3 80 FA 22 75 05 C7 46 00 78 69 C3 C3 E8  // ._..."u..F.xi...
    2900: 04 01 80 FD FF 74 35 83 EC 0C 8B EC 88 4E 01 88  // .....t5......N..
    2910: 6E 00 80 F9 0F 75 05 E8 24 00 EB 0F 80 F9 10 75  // n....u..$......u
    2920: 0A 8D 9C 48 03 E8 04 09 88 46 02 8C D0 66 C1 E0  // ...H.....F...f..
    2930: 10 8B C4 BB 04 00 E8 81 04 83 C4 0C C3 C3 66 53  // ..............fS
    2940: E8 2D EA 66 8B C2 66 33 D2 66 BB 8C 0A 00 00 66  // .-.f..f3.f.....f
    2950: F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40 03 E8 CC 08  // ..f[...n...@....
    2960: 88 46 02 88 66 03 66 C1 E8 10 88 46 08 E8 EF E9  // .F..f.f....F....
    2970: 66 89 56 04 C3 80 F9 04 74 03 E8 C8 E9 83 EC 10  // f.V.....t.......
    2980: 8B EC 80 F9 04 75 0A 88 4E 01 32 C0 88 46 00 EB  // .....u..N.2..F..
    2990: 4C E8 90 00 88 46 00 88 4E 01 E8 28 EA 88 56 0A  // L....F..N..(..V.
    29A0: 80 F9 01 74 11 80 F9 0B 75 33 8D 9C 5C 03 E8 7B  // ...t....u3..\..{
    29B0: 08 88 46 02 EB 27 E8 C8 E9 88 6E 08 E8 A0 E9 66  // ..F..'....n....f
    29C0: 89 56 04 E8 CA E9 88 5E 03 E8 3F E9 88 6E 02 51  // .V.....^..?..n.Q
    29D0: E8 33 00 8A CD B0 01 D2 E0 59 88 46 09 8C D0 66  // .3.......Y.F...f
    29E0: C1 E0 10 8B C4 BB 4C 00 E8 CF 03 83 C4 10 C3 E8  // ......L.........
    29F0: AC 03 03 7D 04 83 3D FF 74 0B 3B 15 74 05 83 C7  // ...}..=.t.;.t...
    2A00: 0A EB F2 0B FF C3 8D 9C 3C 03 E8 1F 08 32 ED 3C  // ........<....2.<
    2A10: 03 74 0C 3C 09 72 09 3C 0E 77 05 2C 08 8A E8 C3  // .t.<.r.<.w.,....
    2A20: B5 FF C3 C3 52 32 C0 80 EE 21 80 FA 1E 74 10 B0  // ....R2...!...t..
    2A30: 02 80 FA 20 74 09 B0 04 80 FA 21 74 02 B0 06 02  // ... t.....!t....
    2A40: C6 5A C3 83 EC 08 8B EC 89 7E 00 89 5E 02 89 56  // .Z.......~..^..V
    2A50: 04 89 4E 06 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8  // ..N...f......6..
    2A60: 58 03 8B EC 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33  // X....^..~.....V3
    2A70: F6 66 F7 C2 00 00 80 00 75 0A 50 33 C0 8A C6 8B  // .f......u.P3....
    2A80: F0 32 F6 58 53 BB 04 3E E8 01 07 66 8B C2 BB 00  // .2.XS..>...f....
    2A90: 3E E8 F8 06 5B 66 F7 C2 00 00 10 00 75 02 33 DB  // >...[f......u.3.
    2AA0: 8B D3 66 C1 E2 10 BA 00 3E 83 EC 08 8B EC 66 89  // ..f.....>.....f.
    2AB0: 56 00 88 4E 04 8A C5 FE C8 88 46 07 C6 46 05 00  // V..N......F..F..
    2AC0: C6 46 06 00 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8  // .F....f......N..
    2AD0: E8 02 8B EC 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74  // .....^..~......t
    2AE0: 32 51 B9 90 01 80 FB 20 74 05 80 FB 80 75 13 B9  // 2Q..... t....u..
    2AF0: 0A 00 8B C6 0A C0 74 0A B9 90 01 3C 01 74 03 B9  // ......t....<.t..
    2B00: E8 03 E8 B2 03 59 8B C6 FE C4 8B F0 80 FC 06 76  // .....Y.........v
    2B10: 98 0A DB 5E C3 8D 5C 04 E8 11 07 8B D0 B5 02 E8  // ...^..\.........
    2B20: 14 00 74 11 B5 01 80 FA 13 75 0A E8 61 00 80 FA  // ..t......u..a...
    2B30: 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80  // .u...........t..
    2B40: FA 0E C3 80 FA 05 C3 80 FA 02 74 03 80 FA 04 C3  // ..........t.....
    2B50: 80 FA 01 74 03 80 FA 02 C3 80 FA 02 75 03 B2 01  // ...t........u...
    2B60: C3 80 FA 04 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74  // ....u..........t
    2B70: 02 B5 04 C3 8D 5C 09 E8 B2 06 8A C8 0A C9 75 03  // .....\........u.
    2B80: 32 C0 C3 B5 02 E8 B4 02 8A C5 24 02 D0 E8 C3 8D  // 2.........$.....
    2B90: 5C 08 E8 97 06 8A D0 B6 01 83 EC 08 8B EC 89 56  // \..............V
    2BA0: 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00 E8 0B 02 8B  // ...f......O.....
    2BB0: EC 8A 56 04 83 C4 08 C3 53 81 C3 C9 05 E8 3A 06  // ..V.....S.....:.
    2BC0: 5B C3 53 81 C3 C9 05 E8 8B 05 5B C3 66 53 81 C3  // [.S.......[.fS..
    2BD0: 00 10 E8 25 06 66 5B C3 57 E8 82 01 8A 45 2D B4  // ...%.f[.W....E-.
    2BE0: FF F7 45 50 20 00 5F C3 50 56 0F BC D8 8D 36 8F  // ..EP ._.PV....6.
    2BF0: 2B E8 63 03 5E 58 C3 00 20 00 24 00 00 00 28 00  // +.c.^X.. .$...(.
    2C00: 2C 00 30 00 34 00 38 00 00 00 3C 00 40 00 44 53  // ,.0.4.8...<.@.DS
    2C10: 56 51 8B F7 B3 00 E8 30 00 0B F6 74 16 49 0B C9  // VQ.....0...t.I..
    2C20: 75 04 33 FF EB 0D 8B DF 03 7D 02 3B F3 74 04 E2  // u.3......}.;.t..
    2C30: F5 33 FF 0B FF 59 5E 5B C3 0E 00 00 00 0A 00 06  // .3...Y^[........
    2C40: 00 08 00 0C 00 0E 00 10 00 56 8D 36 D1 2B E8 06  // .........V.6.+..
    2C50: 03 E8 13 01 03 DE 8B 3F 0B FF 74 0B 03 FE 33 C9  // .......?..t...3.
    2C60: 8A 0D 83 C7 04 0B FF 5E C3 51 56 53 C1 EB 0C E8  // .......^.QVS....
    2C70: D7 FF 5B 75 04 33 FF EB 0B 3B 1D 74 07 83 C7 08  // ..[u.3...;.t....
    2C80: E2 F7 33 FF 0B FF 5E 59 C3 57 E8 DC FF 75 04 33  // ..3...^Y.W...u.3
    2C90: DB 5F C3 E8 02 00 5F C3 52 51 8B 5D 04 0B DB 74  // ._...._.RQ.]...t
    2CA0: 1B 56 E8 C2 00 03 DE 5E 33 C9 8A 4F 01 80 3F FF  // .V.....^3..O..?.
    2CB0: 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B DB 59 5A  // t.:.t.....3...YZ
    2CC0: C3 50 8D 1C E8 C5 04 8B D8 E8 72 00 23 C3 74 6C  // .P........r.#.tl
    2CD0: 33 FF E8 3A FF 0B FF 74 63 39 05 75 F5 66 33 C0  // 3..:...tc9.u.f3.
    2CE0: 8B 45 08 8B 4D 02 83 F9 0A 74 18 8B 4D 0A 8B D1  // .E..M....t..M...
    2CF0: 81 E2 00 70 80 FE 20 75 0A 66 C1 C8 10 8B C1 66  // ...p.. u.f.....f
    2D00: C1 C8 10 8D 5C 0C E8 83 04 66 33 C0 8B 45 04 8D  // ....\....f3..E..
    2D10: 5C 04 E8 77 04 33 C9 8B D8 50 B0 01 E8 6A FF 58  // \..w.3...P...j.X
    2D20: 74 0F 8A 4F 02 8B D8 B0 02 E8 5D FF 74 03 8A 6F  // t..O......].t..o
    2D30: 02 8D 5C 08 66 33 C0 8B C1 E8 50 04 58 C3 56 E8  // ..\.f3....P.X.V.
    2D40: 25 00 8B 44 04 5E C3 56 E8 1C 00 89 44 04 5E C3  // %..D.^.V....D.^.
    2D50: C3 8B DA B0 14 E8 31 FF 74 03 8B 5F 02 C3 BF 58  // ......1.t.._...X
    2D60: 02 8B 3D 8B 7D 0C C3 BE 58 02 8B 34 8B 74 30 C3  // ..=.}...X..4.t0.
    2D70: 1E 0E 1F BF 58 02 8B 3D 8B 7D 0E 83 C7 04 1F C3  // ....X..=.}......
    2D80: BE 58 02 8B 34 8B 74 10 C3 BF 58 02 8B 3D 8B 7D  // .X..4.t...X..=.}
    2D90: 26 83 C7 04 C3 BE 58 02 8B 34 8B 74 1A C3 BF 58  // &.....X..4.t...X
    2DA0: 02 8B 3D 8B 7D 3A C3 BF 58 02 8B 3D 8B 7D 0A 83  // ..=.}:..X..=.}..
    2DB0: C7 04 B9 08 00 C3 E8 01 00 CB 83 EC 06 8B EC 89  // ................
    2DC0: 46 00 66 33 C0 C6 46 04 00 89 46 02 06 52 8A D3  // F.f3..F...F..R..
    2DD0: 8B C5 E8 7F 16 5A 07 83 C4 06 C3 E8 80 FF F7 45  // .....Z.........E
    2DE0: 50 01 00 C3 E8 77 FF 83 4D 50 01 C3 E8 6F FF 88  // P....w..MP...o..
    2DF0: 45 58 C3 66 53 83 EC 28 8B EC 66 89 5E 00 66 89  // EX.fS..(..f.^.f.
    2E00: 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 AA FF  // N...f...........
    2E10: 83 C4 28 66 5B E8 48 01 BB 04 00 E8 9A FD 66 C1  // ..(f[.H.......f.
    2E20: E8 10 E8 C7 FF C3 E8 35 FF 66 8B 5D 08 66 8B 4D  // .......5.f.].f.M
    2E30: 0C C3 57 E8 28 FF 66 8B 45 28 5F C3 83 EC 04 8B  // ..W.(.f.E(_.....
    2E40: EC 89 4E 00 8C D0 66 C1 E0 10 8B C4 BB 38 00 E8  // ..N...f......8..
    2E50: 68 FF 8B EC 8A 6E 02 83 C4 04 C3 C3 B0 06 C3 B0  // h....n..........
    2E60: 02 C3 B0 06 C3 B0 08 C3 E8 F3 FE 8B 45 56 0B C0  // ............EV..
    2E70: C3 53 66 50 66 33 C0 E8 12 03 83 C3 04 E2 F8 66  // .SfPf3.........f
    2E80: 58 5B C3 32 C0 C3 FC E8 A2 03 66 C1 CB 10 E8 FB  // X[.2......f.....
    2E90: 02 66 C1 CB 10 66 81 C3 04 00 04 00 E2 E9 C3 FC  // .f...f..........
    2EA0: 66 AD E8 E7 02 83 C3 04 E2 F6 C3 FC E8 7D 03 66  // f............}.f
    2EB0: AB 83 C3 04 E2 F6 C3 66 50 B8 19 00 E8 10 00 66  // .......fP......f
    2EC0: 58 C3 66 50 B8 D4 30 D1 E1 E8 03 00 66 58 C3 52  // X.fP..0.....fX.R
    2ED0: F7 E1 8B CA E8 63 01 66 53 8B D9 66 C1 E3 10 8B  // .....c.fS..f....
    2EE0: D8 66 B8 04 B1 03 00 B2 00 66 EF B2 04 66 33 C0  // .f.......f...f3.
    2EF0: 66 EF 66 B8 08 B1 03 00 B2 00 66 EF B2 04 66 ED  // f.f.......f...f.
    2F00: 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00 00 80 75  // 3.f..s.f.f.....u
    2F10: F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B C1 72 04  // .f.f;.s.f...;.r.
    2F20: 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8 CC 02 66 33  // ....f[Z..B....f3
    2F30: D2 66 BB 19 00 00 00 66 F7 F3 C3 66 50 53 BB 07  // .f.....f...fPS..
    2F40: 00 E8 74 FC 25 00 02 35 00 02 0B C0 5B 66 58 C3  // ..t.%..5....[fX.
    2F50: BB 0A 15 E8 A4 02 C3 32 FF D1 E3 03 F3 8B 1C C3  // .......2........
    2F60: E8 ED FF 66 C1 E0 0A 66 83 E8 20 E8 27 FE 66 89  // ...f...f.. .'.f.
    2F70: 44 04 C7 44 08 20 00 C3 56 1E 0E 1F E8 16 FE 66  // D..D. ..V......f
    2F80: 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 56 E8 F1 FD 8B  // .D.f....^..V....
    2F90: 4C 22 8A 44 29 5E C3 BE 58 02 8B 34 8B 74 1E 83  // L".D)^..X..4.t..
    2FA0: C6 04 B9 1C 00 C3 33 FF C3 56 E8 D3 FD 8A 6C 28  // ......3..V....l(
    2FB0: 80 E5 70 C0 ED 04 5E C3 56 E8 C4 FD 53 81 C3 09  // ..p...^.V...S...
    2FC0: 01 E8 68 02 8A E8 5B 53 81 C3 00 01 E8 5D 02 5B  // ..h...[S.....].[
    2FD0: 8A C5 66 89 44 3C 5E C3 56 E8 A4 FD 66 8B 44 3C  // ..f.D<^.V...f.D<
    2FE0: 53 81 C3 00 01 E8 A4 01 5B 53 81 C3 08 01 B1 01  // S.......[S......
    2FF0: 8A E8 E8 DB 01 5B 5E C3 56 E8 84 FD 8B FE 83 C7  // .....[^.V.......
    3000: 04 5E C3 56 E8 79 FD 8A 44 28 80 FD 00 74 0E 24  // .^.V.y..D(...t.$
    3010: 8F C0 E5 04 0A C5 80 FD 20 75 02 0C 02 24 FE 81  // ........ u...$..
    3020: 7C 04 34 21 76 02 0C 01 88 44 28 E8 08 FB 75 04  // |.4!v....D(...u.
    3030: 80 4C 30 01 5E C3 32 C0 C3 00 66 50 8C C8 3D 00  // .L0.^.2...fP..=.
    3040: C0 75 10 BA C3 03 EC 8A F0 0A F6 74 06 B2 4C 66  // .u.........t..Lf
    3050: ED EB 17 53 2E 8B 1E 4C 02 B2 20 E8 DD 00 A8 01  // ...S...L.. .....
    3060: 75 05 B2 14 E8 D4 00 8A F4 5B 32 D2 66 58 C3 2E  // u........[2.fX..
    3070: 8B 1E 4C 02 C3 0B C9 75 1A 4B 74 16 43 3B DA 77  // ..L....u.Kt.C;.w
    3080: 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B DA 8B D1  // .....+..........
    3090: 2B C9 C3 3B CA 72 1A 75 10 3B D8 77 0C 2B C3 8B  // +..;.r.u.;.w.+..
    30A0: D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB 93 87 CA  // .+.+.....+.+....
    30B0: C3 55 56 2B F6 8B EE 03 DB 13 C9 72 11 45 3B CA  // .UV+.......r.E;.
    30C0: 72 F5 77 04 3B D8 76 EF F8 13 F6 4D 78 20 D1 D9  // r.w.;.v....Mx ..
    30D0: D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78 0C D1 E9  // ..+....r...Mx...
    30E0: D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3 13 D1 8B D8  // ......s.........
    30F0: 8B CA 8B C6 33 D2 5E 5D C3 93 50 92 0B C0 74 02  // ....3.^]..P...t.
    3100: F7 E2 91 0B C0 74 04 F7 E3 03 C8 58 F7 E3 03 D1  // .....t.....X....
    3110: C3 52 66 50 B4 80 8A C7 66 C1 E0 10 8A E3 8A C2  // .RfP....f.......
    3120: 24 FC BA F8 0C 66 EF 66 58 5A C3 52 BA FC 0C 66  // $....f.fXZ.R...f
    3130: ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31 FF 9C FA  // .Z.R...f.Z..1...
    3140: E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA E8 C1 FF  // .........$......
    3150: E8 E0 FF 9D C3 52 66 53 66 50 E8 06 00 66 58 66  // .....RfSfP...fXf
    3160: 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8 CC FE E8 71  // [Z.f...f.......q
    3170: 01 C3 66 50 66 C1 E3 10 66 C1 EB 10 E8 F9 FD 66  // ..fPf...f......f
    3180: 03 D8 66 81 CB 00 00 00 80 66 58 C3 52 66 53 E8  // ..f......fX.RfS.
    3190: 04 00 66 5B 5A C3 66 50 E8 9F FE E8 D4 FF E8 41  // ..f[Z.fP.......A
    31A0: 01 66 58 C3 52 51 66 53 66 50 8A CB 80 E3 FC 80  // .fX.RQfSfP......
    31B0: E1 03 C0 E1 03 E8 82 FE E8 B7 FF E8 0B 01 66 D3  // ..............f.
    31C0: C8 58 50 66 D3 C0 E8 19 01 66 58 66 5B 59 5A C3  // .XPf.....fXf[YZ.
    31D0: 66 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A C5 66 D3  // fPQ....S.f....f.
    31E0: C0 E8 A8 FF 59 66 58 C3 66 50 51 C0 E1 03 E8 3B  // ....YfX.fPQ....;
    31F0: 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00 C3 E8 39  // .f..Y..fX.._...9
    3200: FE 66 C1 E3 10 66 C1 EB 0E E8 BD 00 C3 E8 2A FE  // .f...f........*.
    3210: 66 C1 E3 02 E8 B2 00 C3 52 66 53 E8 04 00 66 5B  // f.......RfS...f[
    3220: 5A C3 E8 15 FE E8 4A FF E8 9E 00 C3 51 66 52 8A  // Z.....J.....QfR.
    3230: EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8 D9 FF 80  // ................
    3240: F9 00 74 14 66 8B D0 83 C3 04 E8 CB FF 83 EB 04  // ..t.f...........
    3250: 66 92 66 0F AD D0 8A DD 66 5A 59 C3 52 66 53 E8  // f.f.....fZY.RfS.
    3260: 9C FF 66 5B 5A C3 52 E8 A3 FF 5A C3 66 50 55 52  // ..f[Z.R...Z.fPUR
    3270: 66 50 8B EC 8B 56 0C 89 56 08 E8 BD FD 2E A1 A1  // fP...V..V.......
    3280: 02 B2 18 EF B2 00 66 ED 66 89 46 0A 66 58 5A 5D  // ......f.f.F.fXZ]
    3290: C3 66 50 55 52 8B EC E8 A0 FD B2 00 66 8B 46 0A  // .fPUR.......f.F.
    32A0: 66 EF 8B 56 08 89 56 0C 66 8B 46 04 66 89 46 08  // f..V..V.f.F.f.F.
    32B0: 5A 5D 66 58 66 58 C3 66 50 52 E8 7D FD B2 18 66  // Z]fXfX.fPR.}...f
    32C0: ED 2E A3 A1 02 5A 66 58 C3 66 81 FB FF 00 00 00  // .....ZfX.f......
    32D0: 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04 66  // w.....f....f...f
    32E0: ED C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A 66  // ..f......w.....f
    32F0: 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 C3 C3  // ...f.f...f......
    3300: C3 C3 C3 C3 C3 C3 55 8B EC 53 51 8B F0 26 8B 5C  // ......U..SQ..&.\
    3310: 14 26 8B 4C 16 E8 28 00 8D 66 FC 59 5B 5D C3 53  // .&.L..(..f.Y[].S
    3320: 51 8B F0 26 8B 5C 24 33 C9 E8 14 00 59 5B C3 55  // Q..&.\$3....Y[.U
    3330: 8B EC 53 51 8B F0 26 8B 5C 08 26 8B 4C 0A EB D5  // ..SQ..&.\.&.L...
    3340: 52 56 57 C8 06 00 00 8B F0 89 4E FE 8C D0 8E C0  // RVW.......N.....
    3350: 26 8B 7C 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF  // &.|&.E.2.. .+...
    3360: FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 03 32 ED  // ............M.2.
    3370: 8B FA E3 06 D1 E0 D1 D7 E2 FA F7 D0 F7 D7 26 21  // ..............&!
    3380: 44 1C 26 21 7C 1E 8C D0 8E C0 26 8B 7C 26 8A 4D  // D.&!|.....&.|&.M
    3390: 01 32 ED B8 20 00 2B C1 8B C8 66 C7 46 FA FF FF  // .2.. .+...f.F...
    33A0: FF FF E3 08 D1 6E FC D1 5E FA E2 F8 8A 4D 02 32  // .....n..^....M.2
    33B0: ED 8B C3 8B 56 FE E3 06 D1 EA D1 D8 E2 FA 23 46  // ....V.........#F
    33C0: FA 23 56 FC 8A 4D 03 32 ED E3 06 D1 E0 D1 D2 E2  // .#V..M.2........
    33D0: FA 26 09 44 1C 26 09 54 1E C9 5F 5E 5A C3 55 8B  // .&.D.&.T.._^Z.U.
    33E0: EC 53 51 52 57 50 8B D8 26 8B 7F 26 8A 45 01 32  // .SQRWP..&..&.E.2
    33F0: E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1  // .. .+...........
    3400: D8 E2 FA 8A 4D 02 88 4E F6 C6 46 F7 00 8B FA 8B  // ....M..N..F.....
    3410: 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26 09 47 1C 26 09  // N.........&.G.&.
    3420: 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53 51 52 57 8B D8  // ...f._Z...SQRW..
    3430: 8C D0 8E C0 26 8B 77 26 8A 4C 01 32 ED B8 20 00  // ....&.w&.L.2.. .
    3440: 2B C1 8B C8 BE FF FF 8B D6 E3 06 D1 EA D1 DE E2  // +...............
    3450: FA 26 8B 7F 26 8A 4D 02 32 ED 8B C6 E3 06 D1 E0  // .&..&.M.2.......
    3460: D1 D2 E2 FA F7 D0 F7 D2 26 21 47 1C 26 21 57 1E  // ........&!G.&!W.
    3470: 5F E9 CC 05 53 56 8B D8 8C D2 8E C2 26 8B 77 26  // _...SV......&.w&
    3480: 80 3C 00 74 73 80 3C 01 75 58 8A 44 01 32 E4 26  // .<.ts.<.uX.D.2.&
    3490: 83 7F 1E 00 75 4C 26 3B 47 1C 75 46 8A 04 6B F0  // ....uL&;G.uF..k.
    34A0: 03 8A 84 50 95 26 01 47 26 8C D0 8E C0 26 8B 77  // ...P.&.G&....&.w
    34B0: 26 80 3C 09 74 17 8A 04 32 E4 6B F0 03 8B C3 FF  // &.<.t...2.k.....
    34C0: 94 4E 95 26 8B 77 26 8A 04 32 E4 EB D1 8B 44 01  // .N.&.w&..2....D.
    34D0: 26 29 47 26 26 FF 47 26 26 8B 47 1C 26 8B 77 1E  // &)G&&.G&&.G.&.w.
    34E0: EB 1A 26 8B 77 26 8A 04 32 E4 6B F0 03 8A 84 50  // ..&.w&..2.k....P
    34F0: 95 26 01 47 26 E9 80 FF 33 C0 33 F6 8B D6 5E 5B  // .&.G&...3.3...^[
    3500: C3 53 51 52 56 8B D8 8D 77 35 26 8B 54 02 26 89  // .SQRV...w5&.T.&.
    3510: 57 14 26 C7 47 16 00 00 8B F0 26 8B 47 20 33 D2  // W.&.G.....&.G 3.
    3520: 26 01 47 14 26 11 54 16 8C D1 8E C1 26 F6 47 2F  // &.G.&.T.....&.G/
    3530: 06 0F 85 0A 05 26 80 7F 34 00 75 22 26 8B 77 16  // .....&..4.u"&.w.
    3540: 26 0B 77 14 75 10 26 D1 67 08 26 D1 57 0A 26 D1  // &.w.u.&.g.&.W.&.
    3550: 67 08 26 D1 57 0A 8B C3 E8 79 11 E9 E1 04 26 8A  // g.&.W....y....&.
    3560: 47 34 32 E4 05 80 00 99 26 89 47 1C 26 89 57 1E  // G42.....&.G.&.W.
    3570: 8B C3 E8 FF FE E9 C7 04 53 56 8B D8 8D 77 35 26  // ........SV...w5&
    3580: 8A 44 02 32 E4 C1 E0 02 26 8B 37 26 8B 34 03 F0  // .D.2....&.7&.4..
    3590: 26 8B 47 08 26 8B 5F 0A 26 89 04 26 89 5C 02 5E  // &.G.&._.&..&.\.^
    35A0: 5B C3 53 52 56 8B D8 8C D0 8D 77 35 8E C0 26 8A  // [.SRV.....w5..&.
    35B0: 54 02 80 FA 40 73 21 26 8B 77 02 32 F6 C1 E2 02  // T...@s!&.w.2....
    35C0: 26 8B 74 04 03 F2 26 8B 57 08 26 8B 47 0A 26 89  // &.t...&.W.&.G.&.
    35D0: 14 26 89 44 02 E9 7F 00 80 FA 41 75 12 26 8B 47  // .&.D......Au.&.G
    35E0: 08 26 8B 57 0A 26 89 47 10 26 89 57 12 EB 68 80  // .&.W.&.G.&.W..h.
    35F0: FA 40 75 12 26 8B 47 08 26 8B 57 0A 26 89 47 0C  // .@u.&.G.&.W.&.G.
    3600: 26 89 57 0E EB 51 80 FA 42 75 0A 26 8B 47 08 26  // &.W..Q..Bu.&.G.&
    3610: 89 47 22 EB 42 80 FA 43 75 0A 26 8A 47 08 26 88  // .G".B..Cu.&.G.&.
    3620: 47 33 EB 33 80 FA 46 75 12 26 8B 57 08 26 8B 47  // G3.3..Fu.&.W.&.G
    3630: 0A 26 89 57 18 26 89 47 1A EB 1C 80 FA 47 75 0A  // .&.W.&.G.....Gu.
    3640: 26 8B 47 08 26 89 47 24 EB 0D 80 FA 48 75 08 26  // &.G.&.G$....Hu.&
    3650: 8B 47 08 26 89 47 20 5E 5A 5B C3 53 56 8B D8 8D  // .G.&.G ^Z[.SV...
    3660: 77 35 26 8A 44 02 32 E4 26 89 47 14 26 C7 47 16  // w5&.D.2.&.G.&.G.
    3670: 00 00 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74  // ..^[.SV..&.w.&.t
    3680: 02 8A 04 32 E4 26 89 47 14 26 C7 47 16 00 00 26  // ...2.&.G.&.G...&
    3690: 8B 5F 02 26 FF 47 02 5E 5B C3 53 56 8B D8 26 8B  // ._.&.G.^[.SV..&.
    36A0: 77 02 26 8B 74 02 8B 34 26 89 77 14 26 C7 47 16  // w.&.t..4&.w.&.G.
    36B0: 00 00 26 8B 5F 02 26 83 47 02 02 5E 5B C3 53 56  // ..&._.&.G..^[.SV
    36C0: 8B D8 26 8B 77 02 26 8B 74 02 8B 04 8B 74 02 26  // ..&.w.&.t....t.&
    36D0: 89 47 14 26 89 77 16 26 8B 5F 02 26 83 47 02 04  // .G.&.w.&._.&.G..
    36E0: 5E 5B C3 53 52 56 8B D8 E8 70 FF 8B F3 26 8B 47  // ^[.SRV...p...&.G
    36F0: 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47  // .&.W.........&.G
    3700: 14 26 11 54 16 8B C3 E8 2B 10 E9 4A FF 53 8B D8  // .&.T....+..J.S..
    3710: 26 8B 5F 02 26 FF 47 02 5B C3 53 8B D8 26 8B 5F  // &._.&.G.[.S..&._
    3720: 02 26 83 47 02 02 5B C3 53 56 8B D8 E8 6B FF 8B  // .&.G..[.SV...k..
    3730: F3 26 8B 57 20 33 C0 26 01 57 14 26 11 44 16 8C  // .&.W 3.&.W.&.D..
    3740: D2 8E C2 26 8B 47 2E 32 C0 80 E4 06 3D 00 02 75  // ...&.G.2....=..u
    3750: 07 32 E4 33 D2 5E 5B C3 26 8B 47 2E 32 C0 80 E4  // .2.3.^[.&.G.2...
    3760: 06 3D 00 04 74 EB 26 80 7F 34 00 75 08 8B C3 E8  // .=..t.&..4.u....
    3770: 2F 0F 5E 5B C3 26 8A 47 34 32 E4 26 89 47 1C 26  // /.^[.&.G42.&.G.&
    3780: C7 47 1E 00 00 8B C3 E8 EA FC 5E 5B C3 53 8B D8  // .G........^[.S..
    3790: E8 E2 FE 26 8B 47 14 C1 E0 02 26 8B 1F 26 8B 1F  // ...&.G....&..&..
    37A0: 03 D8 26 8B 07 26 8B 57 02 5B C3 B1 37 A6 37 BC  // ..&..&.W.[..7.7.
    37B0: 37 0B 38 C2 37 DA 37 F4 37 FF 37 05 38 53 51 56  // 7.8.7.7.7.7.8SQV
    37C0: 8B D8 E8 B0 FE 8C D2 8E C2 26 83 7F 16 00 75 22  // .........&....u"
    37D0: 26 83 7F 14 40 73 1B 26 8B 77 02 26 8B 5F 14 C1  // &...@s.&.w.&._..
    37E0: E3 02 26 8B 44 04 03 D8 26 8B 07 26 8B 57 02 E9  // ..&.D...&..&.W..
    37F0: 7B 05 26 8B 77 14 26 8B 47 16 83 C6 C0 83 D0 FF  // {.&.w.&.G.......
    3800: 75 71 83 FE 08 77 6C 03 F6 2E FF A4 43 37 26 8B  // uq...wl.....C7&.
    3810: 47 10 26 8B 57 12 E9 54 05 26 8B 47 0C 26 8B 57  // G.&.W..T.&.G.&.W
    3820: 0E E9 49 05 26 8B 47 22 EB 4B 26 8A 4F 33 32 ED  // ..I.&.G".K&.O32.
    3830: BB 01 00 33 D2 E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9  // ...3............
    3840: 2B 05 26 8A 4F 33 32 ED B8 01 00 33 D2 E3 06 D1  // +.&.O32....3....
    3850: E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11 05 26 8B 47 18  // ............&.G.
    3860: 26 8B 57 1A E9 06 05 26 8B 47 24 EB 08 26 8B 47  // &.W....&.G$..&.G
    3870: 20 EB 02 33 C0 33 D2 E9 F3 04 53 56 8B D8 E8 F4  //  ..3.3....SV....
    3880: FD 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1  // ...&.G.&.W......
    3890: EA D1 D8 26 01 47 14 26 11 54 16 8B C3 E8 16 0E  // ...&.G.&.T......
    38A0: 5E 5B C3 33 C0 33 D2 C3 53 56 8B D8 E8 EB FD 26  // ^[.3.3..SV.....&
    38B0: 8B 77 14 26 03 77 22 8B 04 8B 54 02 5E 5B C3 53  // .w.&.w"...T.^[.S
    38C0: 8B D8 26 C6 47 2B 04 E8 AB FD 26 8B 47 14 26 8B  // ..&.G+....&.G.&.
    38D0: 57 16 5B C3 53 8B D8 26 C6 47 2B 01 E8 BB FD EB  // W.[.S..&.G+.....
    38E0: E9 53 8B D8 26 C6 47 2B 00 E8 D2 FD EB DC 53 8B  // .S..&.G+......S.
    38F0: D8 83 C3 35 26 8A 5F 01 C0 EB 03 80 E3 07 32 FF  // ...5&._.......2.
    3900: 03 DB FF 97 DE 94 5B C3 53 52 56 8B D8 26 8A 47  // ......[.SRV..&.G
    3910: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FA 94 26 89 47  // ,2...........&.G
    3920: 08 26 89 57 0A 26 8A 47 2D 32 E4 8B F0 03 F0 8B  // .&.W.&.G-2......
    3930: C3 FF 94 12 95 26 89 47 04 26 89 57 06 E9 17 FD  // .....&.G.&.W....
    3940: 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 42  // SQV..&.O+2.....B
    3950: 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    3960: 2B 32 ED 8B F1 C1 E6 02 8B 8C 22 95 8B B4 24 95  // +2........"...$.
    3970: 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1  // &!O.&!w.&.O*2...
    3980: 8A 8C 4A 95 E3 0A 26 D1 67 04 26 D1 57 06 E2 F6  // ..J...&.g.&.W...
    3990: 26 8B 4F 08 26 8B 77 0A 26 89 4F 14 26 89 77 16  // &.O.&.w.&.O.&.w.
    39A0: E9 CA 03 53 51 52 56 57 8B D8 8C D0 8E C0 26 8A  // ...SQRVW......&.
    39B0: 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A  // G+2......&.G*...
    39C0: 8D 4A 95 32 ED 8B 84 22 95 8B 94 24 95 E3 06 D1  // .J.2..."...$....
    39D0: E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 14 26 21 57  // .........&!G.&!W
    39E0: 16 26 8A 47 2A 32 E4 8B F0 8A 8C 4A 95 32 ED E3  // .&.G*2.....J.2..
    39F0: 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 47 2B 8B  // .&.o.&._...&.G+.
    3A00: F0 C1 E6 02 8B 84 22 95 8B 94 24 95 26 21 47 08  // ......"...$.&!G.
    3A10: 26 21 57 0A 26 8A 47 2A 32 E4 8B F0 8A 8C 4A 95  // &!W.&.G*2.....J.
    3A20: 32 ED E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 26 8B  // 2...&.g.&.W...&.
    3A30: 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A 5F 5E  // G.&.W.&.G.&.W._^
    3A40: 5A 59 5B C3 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B  // ZY[.SQV..&.O+2..
    3A50: F1 8A 8C 42 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...B...&.o.&._..
    3A60: F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 22 95  // .&.O+2........".
    3A70: 8B B4 24 95 26 21 4F 04 26 21 77 06 26 8A 4F 2A  // ..$.&!O.&!w.&.O*
    3A80: 32 ED 8B F1 8A 8C 4A 95 E3 0A 26 D1 6F 0A 26 D1  // 2.....J...&.o.&.
    3A90: 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B  // _...&.O+2.......
    3AA0: 8C 22 95 8B B4 24 95 26 21 4F 08 26 21 77 0A E9  // ."...$.&!O.&!w..
    3AB0: BB 02 51 52 57 8B D8 8C D0 8E C0 26 80 7F 2B 00  // ..QRW......&..+.
    3AC0: 74 1A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // t.&.G,2.........
    3AD0: FA 94 26 89 47 08 26 89 57 0A EB 10 26 8A 47 2C  // ..&.G.&.W...&.G,
    3AE0: 32 E4 8B F0 03 F0 8B C3 FF 94 06 95 26 8A 47 2D  // 2...........&.G-
    3AF0: 32 E4 8B F0 03 F0 8B C3 FF 94 12 95 26 89 47 04  // 2...........&.G.
    3B00: 26 89 57 06 8C D2 8E C2 26 80 7F 2B 00 74 4A 26  // &.W.....&..+.tJ&
    3B10: 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8  // .G+2......&.G*..
    3B20: 8A 8D 4A 95 32 ED 8B 84 22 95 8B 94 24 95 E3 06  // ..J.2..."...$...
    3B30: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21  // ..........&!G.&!
    3B40: 57 0A 8B C3 E8 F9 FD 26 8B 47 04 26 8B 57 06 26  // W......&.G.&.W.&
    3B50: 09 47 08 26 09 57 0A EB 10 26 8B 57 04 26 8B 47  // .G.&.W...&.W.&.G
    3B60: 06 26 89 57 08 26 89 47 0A 26 8A 47 2C 32 E4 8B  // .&.W.&.G.&.G,2..
    3B70: F0 03 F0 8B C3 FF 94 EE 94 5F 5A 59 C3 53 51 52  // ........._ZY.SQR
    3B80: 56 57 8B D8 26 8A 47 2A 32 E4 8B F0 8A 8C 4A 95  // VW..&.G*2.....J.
    3B90: 32 ED E3 0A 26 D1 67 04 26 D1 57 06 E2 F6 8C D0  // 2...&.g.&.W.....
    3BA0: 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47  // ..&.G+2......&.G
    3BB0: 2A 8B F8 8A 8D 4A 95 32 ED 8B 84 22 95 8B 94 24  // *....J.2..."...$
    3BC0: 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 09 47  // .............&.G
    3BD0: 04 26 09 57 06 26 8B 47 04 26 8B 57 06 26 21 47  // .&.W.&.G.&.W.&!G
    3BE0: 08 26 21 57 0A E9 56 FE 55 8B EC 51 52 50 8B D8  // .&!W..V.U..QRP..
    3BF0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FA 94  // &.G,2...........
    3C00: 26 89 47 08 26 89 57 0A 26 8A 47 2B 88 46 FA 8B  // &.G.&.W.&.G+.F..
    3C10: C3 E8 DA FC 26 89 47 04 26 89 57 06 26 8A 4F 2D  // ....&.G.&.W.&.O-
    3C20: 32 ED 8B F1 03 F1 8B C3 FF 94 12 95 26 89 47 14  // 2...........&.G.
    3C30: 26 89 57 16 8B C3 E8 44 FF 8A 46 FA 32 E4 8B F0  // &.W....D..F.2...
    3C40: 8A 8C 42 95 E3 0A 26 D1 6F 16 26 D1 5F 14 E2 F6  // ..B...&.o.&._...
    3C50: 26 8A 57 2B 32 F6 8B F2 C1 E6 02 8B 84 22 95 8B  // &.W+2........"..
    3C60: 94 24 95 26 21 47 14 26 21 57 16 26 8A 47 2A 32  // .$.&!G.&!W.&.G*2
    3C70: E4 8B F0 8A 8C 4A 95 32 ED E3 0A 26 D1 67 14 26  // .....J.2...&.g.&
    3C80: D1 57 16 E2 F6 26 8B 47 14 26 8B 57 16 26 09 47  // .W...&.G.&.W.&.G
    3C90: 08 26 09 57 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .&.W.&.G,2......
    3CA0: C3 FF 94 EE 94 8D 66 FC 5A 59 5D C3 51 8B D8 E8  // ......f.ZY].Q...
    3CB0: 56 FC 26 8A 4F 2B 32 ED 8B F1 8A 8C 42 95 E3 0A  // V.&.O+2.....B...
    3CC0: 26 D1 6F 06 26 D1 5F 04 E2 F6 8B C3 E8 AE FE 26  // &.o.&._........&
    3CD0: 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 EE 94 59  // .O,2...........Y
    3CE0: C3 8B D8 E8 22 FC 8B C3 E8 55 FC 26 8B 47 04 26  // ...."....U.&.G.&
    3CF0: 8B 77 06 26 09 47 08 26 09 77 0A 26 8A 47 2C 32  // .w.&.G.&.w.&.G,2
    3D00: E4 8B F0 03 F0 8B C3 FF 94 EE 94 C3 53 56 8B D8  // ............SV..
    3D10: E8 F5 FB 8B C3 E8 28 FC 26 8B 47 04 26 8B 77 06  // ......(.&.G.&.w.
    3D20: 26 31 47 08 26 31 77 0A 26 8A 47 2C 32 E4 8B F0  // &1G.&1w.&.G,2...
    3D30: 03 F0 8B C3 FF 94 EE 94 5E 5B C3 53 51 56 8B D8  // ........^[.SQV..
    3D40: E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F 04 E3 0A 26 D1  // ........&.O...&.
    3D50: 67 08 26 D1 57 0A E2 F6 8B C3 E8 46 FC 26 8A 4F  // g.&.W......F.&.O
    3D60: 2C 32 ED 8B F1 03 F1 8B C3 FF 94 EE 94 5E 59 5B  // ,2...........^Y[
    3D70: C3 53 51 56 8B D8 E8 8F FB 8B C3 E8 C2 FB 26 8B  // .SQV..........&.
    3D80: 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 EB C8  // O...&.o.&._.....
    3D90: 52 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B F3 26 8B 47  // R...r........&.G
    3DA0: 04 26 8B 57 06 26 01 47 08 26 11 54 0A 8B C3 E8  // .&.W.&.G.&.T....
    3DB0: F1 FB 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    3DC0: EE 94 5A C3 52 8B D8 E8 3E FB 8B C3 E8 71 FB 8B  // ..Z.R...>....q..
    3DD0: F3 26 8B 47 04 26 8B 57 06 26 29 47 08 26 19 54  // .&.G.&.W.&)G.&.T
    3DE0: 0A EB CA 51 52 8B F0 E8 1E FB 8B C6 E8 55 FC 26  // ...QR........U.&
    3DF0: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    3E00: F7 F2 26 89 44 0C 26 89 54 0E 5A 59 C3 52 8B D0  // ..&.D.&.T.ZY.R..
    3E10: E8 F5 FA 8B C2 E8 2C FC 8B C2 E8 5C 08 5A C3 51  // ......,....\.Z.Q
    3E20: 52 57 8B F0 E8 E1 FA 8B C6 E8 18 FC 26 8B 44 08  // RW..........&.D.
    3E30: 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 36 F2 26  // &.T.&.\.&.L..6.&
    3E40: 89 44 0C 26 89 54 0E 8C D7 8E C7 26 8B 44 08 26  // .D.&.T.....&.D.&
    3E50: 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 17 F2 26 89  // .T.&.\.&.L....&.
    3E60: 5C 10 26 89 4C 12 E9 10 FD 52 8B D0 E8 99 FA 8B  // \.&.L....R......
    3E70: C2 E8 D0 FB 8B C2 E8 D3 07 5A C3 51 52 8B D8 E8  // .........Z.QR...
    3E80: 86 FA 8B C3 E8 BD FB 8C D1 8E C1 26 8B 47 08 26  // ...........&.G.&
    3E90: 8B 57 0A 26 3B 57 06 75 0E 26 3B 47 04 75 08 26  // .W.&;W.u.&;G.u.&
    3EA0: C6 47 30 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B 47  // .G0.ZY...&.G.&;G
    3EB0: 06 72 08 75 0A 26 3B 57 04 73 04 33 C0 EB 03 B8  // .r.u.&;W.s.3....
    3EC0: 02 00 26 88 47 30 5A 59 C3 51 52 57 8B D8 26 8A  // ..&.G0ZY.QRW..&.
    3ED0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FA 94 26 89  // G,2...........&.
    3EE0: 47 08 26 89 57 0A 8C D0 8E C0 26 8A 47 2B 32 E4  // G.&.W.....&.G+2.
    3EF0: 8B F0 C1 E6 02 8B F8 8A 8D 42 95 32 ED 8B 84 22  // .........B.2..."
    3F00: 95 8B 94 24 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ...$............
    3F10: D2 26 21 47 08 26 21 57 0A E9 4D FC 55 8B EC 51  // .&!G.&!W..M.U..Q
    3F20: 52 57 83 EC 06 8B D8 26 8A 47 2B 32 E4 8B F0 C1  // RW.....&.G+2....
    3F30: E6 02 8B F8 8A 8D 42 95 32 ED 8B 84 22 95 89 46  // ......B.2..."..F
    3F40: F4 8B 84 24 95 89 46 F6 E3 08 D1 66 F4 D1 56 F6  // ...$..F....f..V.
    3F50: E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C 32  // ...~..F..F.&.G,2
    3F60: E4 8B F0 03 F0 8B C3 FF 94 FA 94 26 89 47 08 26  // ...........&.G.&
    3F70: 89 57 0A 8B C3 E8 47 F9 26 89 47 04 26 89 57 06  // .W....G.&.G.&.W.
    3F80: 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47 08 26 23 57  // .....V...&#G.&#W
    3F90: 0A 26 89 47 14 26 89 57 16 26 21 7F 08 8B 46 F6  // .&.G.&.W.&!...F.
    3FA0: 26 21 47 0A 8C D1 8D 77 35 8E C1 26 80 3C 19 73  // &!G....w5..&.<.s
    3FB0: 12 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2  // .&.O...&.g.&.W..
    3FC0: F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F  // ...&.O...&.o.&._
    3FD0: 08 E2 F6 26 21 7F 08 8B 46 F8 26 21 47 0A 26 8B  // ...&!...F.&!G.&.
    3FE0: 57 14 26 8B 47 16 26 09 57 08 26 09 47 0A 26 8A  // W.&.G.&.W.&.G.&.
    3FF0: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE 94 8D 66  // G,2............f
    4000: FA 5F E9 A3 FC 52 8B D8 E8 FD F8 8B C3 E8 34 FA  // ._...R........4.
    4010: 26 8B 47 08 26 8B 57 0A 26 85 57 06 75 06 26 85  // &.G.&.W.&.W.u.&.
    4020: 47 04 74 05 B8 03 00 EB 03 B8 01 00 26 88 47 30  // G.t.........&.G0
    4030: 5A C3 53 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B F1  // Z.SQRV..&.O-2...
    4040: 03 F1 FF 94 12 95 26 89 47 04 26 89 57 06 26 8A  // ......&.G.&.W.&.
    4050: 47 2B 32 E4 8B F0 8A 8C 42 95 E3 0A 26 D1 6F 06  // G+2.....B...&.o.
    4060: 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B  // &._...&.G+......
    4070: 84 22 95 8B 94 24 95 26 21 47 04 26 21 57 06 E9  // ."...$.&!G.&!W..
    4080: BD F9 52 8B D8 E8 AA FF 26 8B 47 04 26 8B 57 06  // ..R.....&.G.&.W.
    4090: 26 89 47 18 26 89 57 1A 5A C3 51 52 8B D8 E8 91  // &.G.&.W.Z.QR....
    40A0: FF 8C D0 8E C0 26 8B 77 02 26 8B 74 02 81 3C 5A  // .....&.w.&.t..<Z
    40B0: 5A 74 5B 26 8B 77 02 26 8B 74 02 80 3C 63 75 E1  // Zt[&.w.&.t..<cu.
    40C0: 26 8B 77 02 26 FF 44 02 8B C3 E8 21 F8 26 89 47  // &.w.&.D....!.&.G
    40D0: 08 26 89 57 0A 8B C3 E8 FA F7 26 89 47 14 26 89  // .&.W......&.G.&.
    40E0: 57 16 8C D1 8E C1 26 8B 57 04 26 8B 47 06 26 3B  // W.....&.W.&.G.&;
    40F0: 47 0A 75 AD 26 3B 57 08 75 A7 26 8B 77 02 26 8B  // G.u.&;W.u.&.w.&.
    4100: 04 26 03 47 14 8B DE 26 89 47 02 5A 59 C3 26 8B  // .&.G...&.G.ZY.&.
    4110: 5F 02 26 83 47 02 02 5A 59 C3 52 57 8B D8 8C D0  // _.&.G..ZY.RW....
    4120: 8E C0 26 8B 77 02 26 8B 74 02 8A 54 01 84 D2 75  // ..&.w.&.t..T...u
    4130: 08 26 C7 47 22 00 00 EB 2F 80 FA FF 75 14 26 8B  // .&.G".../...u.&.
    4140: 77 02 26 8B 3F 26 8B 34 26 2B 75 02 26 89 77 22  // w.&.?&.4&+u.&.w"
    4150: EB 16 26 8B 07 E8 E3 02 8B F0 8A C2 32 E4 03 C0  // ..&.........2...
    4160: 03 F0 8B 04 26 89 47 22 26 8B 5F 02 26 83 47 02  // ....&.G"&._.&.G.
    4170: 02 5F 5A C3 8B D8 26 80 67 2F F9 26 8B 77 02 26  // ._Z...&.g/.&.w.&
    4180: 8B 74 02 8A 44 01 26 88 47 34 26 8B 5F 02 26 83  // .t..D.&.G4&._.&.
    4190: 47 02 03 C3 8B D8 26 8B 77 02 26 8B 74 02 8B 74  // G.....&.w.&.t..t
    41A0: 01 26 89 77 20 EB E3 53 8B D8 26 8A 47 2C 32 E4  // .&.w ..S..&.G,2.
    41B0: 24 03 26 80 67 2F F9 C1 E0 09 26 09 47 2E E9 4F  // $.&.g/....&.G..O
    41C0: F5 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4  // ...&.w.&.t..D.2.
    41D0: 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 40 04 26  // &.G.&.G......@.&
    41E0: 8B 5F 02 26 83 47 02 02 C3 8B D8 26 8B 77 02 26  // ._.&.G.....&.w.&
    41F0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    4200: 00 00 8B C3 E8 08 04 EB D6 53 56 8B D8 26 8B 77  // .........SV..&.w
    4210: 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7  // .&.t..D.2.&.G.&.
    4220: 47 06 00 00 8B C3 E8 06 04 E9 86 F4 53 56 8B D8  // G...........SV..
    4230: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    4240: 04 26 C7 47 06 00 00 8B C3 E8 F0 03 E9 63 F4 53  // .&.G.........c.S
    4250: 56 8B D8 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F 01  // V..&.w...&._.._.
    4260: 83 C3 03 26 01 5C 02 5E 5B C3 51 52 8B D8 26 8B  // ...&.\.^[.QR..&.
    4270: 77 02 26 83 44 02 02 26 8B 07 E8 A0 01 8B C8 26  // w.&.D..&.......&
    4280: 8B 77 28 8A 44 01 32 E4 03 C0 8B F1 03 F0 83 3C  // .w(.D.2........<
    4290: 00 74 4F 26 8B 77 28 8A 54 01 32 F6 8B C3 E8 B0  // .tO&.w(.T.2.....
    42A0: 01 26 88 47 31 26 8B 77 02 26 8B 34 8B 44 04 C1  // .&.G1&.w.&.4.D..
    42B0: E8 08 32 E4 24 7F C1 E8 02 32 E4 24 1F 26 80 67  // ..2.$....2.$.&.g
    42C0: 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37 26 8B 47 2E  // /....&.G.&.7&.G.
    42D0: C1 E8 0B C1 E0 02 26 01 04 26 C6 47 32 01 26 89  // ......&..&.G2.&.
    42E0: 4F 28 5A 59 C3 53 8B D8 26 C6 47 32 82 5B C3 57  // O(ZY.S..&.G2.[.W
    42F0: 8B D8 8C D6 8E C6 26 80 7F 2C 05 74 0A 26 8A 47  // ......&..,.t.&.G
    4300: 2C 26 3A 47 30 75 1E 26 8B 77 02 26 8B 74 02 26  // ,&:G0u.&.w.&.t.&
    4310: 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26  // ...&.=.t...&._.&
    4320: 89 77 02 5F C3 26 8B 5F 02 26 83 47 02 03 5F C3  // .w._.&._.&.G.._.
    4330: 53 56 57 8B D8 8C D6 8E C6 26 80 7F 30 01 74 0A  // SVW......&..0.t.
    4340: 26 8A 47 30 26 3A 47 2C 75 20 26 8B 77 02 26 8B  // &.G0&:G,u &.w.&.
    4350: 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B  // t.&...&.=.t...&.
    4360: 5F 02 26 89 77 02 5F 5E 5B C3 26 8B 5F 02 26 83  // _.&.w._^[.&._.&.
    4370: 47 02 03 EB F1 53 56 57 8B D8 8C D0 8E C0 26 80  // G....SVW......&.
    4380: 7F 30 01 74 E5 EB C3 55 8B EC 53 51 52 57 8B D8  // .0.t...U..SQRW..
    4390: 26 8B 77 02 26 8B 74 02 8A 04 26 C6 47 3D 00 8C  // &.w.&.t...&.G=..
    43A0: D1 8E C1 26 80 7F 3D 08 73 20 26 8B 77 02 26 8A  // ...&..=.s &.w.&.
    43B0: 57 3D 32 F6 26 8B 7C 02 03 FA 8B F3 03 F2 8A 15  // W=2.&.|.........
    43C0: 26 88 54 35 26 FE 47 3D EB D5 26 8B 7F 02 8A D0  // &.T5&.G=..&.....
    43D0: 32 F6 8B F2 C1 E6 02 8A 94 6F 95 26 01 55 02 26  // 2........o.&.U.&
    43E0: 8B 7F 28 8A 55 01 80 E2 07 26 88 57 2D 26 8B 7F  // ..(.U....&.W-&..
    43F0: 28 8A 55 01 C0 EA 03 80 E2 07 26 88 57 2B 26 8B  // (.U.......&.W+&.
    4400: 7F 28 8A 55 01 C0 EA 06 26 88 57 2A 8A 94 6E 95  // .(.U....&.W*..n.
    4410: 26 88 57 2C 8D 66 F8 5F 5A 59 5B 5D C3 53 56 8B  // &.W,.f._ZY[].SV.
    4420: D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8 8B 74  // .&.w....tH.....t
    4430: 1E 8B C6 03 C3 83 C0 04 5E 5B C3 53 56 8B D8 26  // ........^[.SV..&
    4440: 8B 77 02 8B C6 8B 74 48 03 F0 8B D8 8B 74 20 EB  // .w....tH.....t .
    4450: E0 8A C2 C3 16 07 55 8B EC 53 51 56 57 83 EC 40  // ......U..SQVW..@
    4460: 8B F8 89 46 B8 E8 D3 FF 8B D8 89 46 E0 26 8B 45  // ...F.......F.&.E
    4470: 02 8B 5F 2E 03 D8 89 5E DE 83 46 DE 04 8B C7 E8  // .._....^..F.....
    4480: 9B FF 89 46 E0 32 F6 8D 46 B8 E8 C4 FF 8A D0 32  // ...F.2..F......2
    4490: F6 03 D2 8B 5E E0 03 DA 83 3F 00 0F 84 65 01 88  // ....^....?...e..
    44A0: 46 E9 80 66 E7 F9 C6 46 EC 00 C7 46 D8 00 00 66  // F..f...F...F...f
    44B0: C7 46 D0 00 00 00 00 C7 46 F6 00 00 C6 46 EA 01  // .F......F....F..
    44C0: EB 06 3C 01 0F 85 8C 00 8A 56 E9 8A C2 32 E4 03  // ..<......V...2..
    44D0: C0 8B 5E E0 03 D8 83 3F 00 74 75 26 8B 45 02 8B  // ..^....?.tu&.E..
    44E0: 1F 03 D8 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80  // ....G.2......2..
    44F0: E1 FE 83 F9 00 74 07 D1 E9 33 C0 50 E2 FD 8B C4  // .....t...3.P....
    4500: 8B D8 89 46 BA 85 C0 74 41 83 C0 08 26 89 47 04  // ...F...tA...&.G.
    4510: 8A C2 32 E4 03 C0 8B 5E E0 03 D8 26 8B 45 02 03  // ..2....^...&.E..
    4520: 07 8B 5E BA 26 89 07 8B 5E BA 26 8B 07 83 C0 06  // ..^.&...^.&.....
    4530: 26 89 47 02 8B 5E BA 8B 76 F6 26 89 77 06 8B 5E  // &.G..^..v.&.w..^
    4540: BA 89 5E F6 C6 46 EA 00 EB 0A C6 46 EA 87 EB 04  // ..^..F.....F....
    4550: C6 46 EA 83 8A 46 EA 32 E4 83 F8 10 0F 8F 99 00  // .F...F.2........
    4560: 88 66 EA 8A 46 EA 32 E4 85 C0 0F 8F 83 00 8C D0  // .f..F.2.........
    4570: 8B 5E BA 8E C0 26 8B 5F 02 89 5E E0 8B 5E BA 26  // .^...&._..^..^.&
    4580: 8B 5F 02 80 3F 5B 75 4A C6 46 EA 10 8B 5E BA 26  // ._..?[uJ.F...^.&
    4590: 8B 5F 06 89 5E F6 8B 5E BA 26 8B 1F 8B 47 04 32  // ._..^..^.&...G.2
    45A0: E4 8B C8 83 C1 09 32 ED 80 E1 FE 03 E1 8B 5E F6  // ......2.......^.
    45B0: 89 5E BA 85 DB 74 AC 26 8B 1F 8B 47 04 C1 E8 08  // .^...t.&...G....
    45C0: 32 E4 24 7F C1 E8 02 C1 E0 02 8B 5E B8 26 29 07  // 2.$........^.&).
    45D0: EB 91 8D 46 B8 E8 AF FD 8A D0 8D 46 B8 E8 2E 00  // ...F.......F....
    45E0: 8A DA 32 FF C1 E3 02 8D 46 B8 FF 97 6C 95 E9 72  // ..2.....F...l..r
    45F0: FF 83 7E F6 00 0F 85 C9 FE 80 7E EA 10 74 05 8A  // ..~.......~..t..
    4600: 46 EA EB 02 32 C0 8D 66 F8 5F 5E E9 0B FE C3 53  // F...2..f._^....S
    4610: 51 8B D8 26 8A 4F 04 32 ED E8 9B E8 59 5B C3 53  // Q..&.O.2....Y[.S
    4620: 51 8B D8 26 8A 4F 04 32 ED E8 96 E8 59 5B C3 53  // Q..&.O.2....Y[.S
    4630: 8B D8 26 8A 47 04 32 E4 E6 80 5B C3 53 51 8B D8  // ..&.G.2...[.SQ..
    4640: 26 8A 4F 04 32 ED E8 13 D8 59 5B C3 53 8B D8 66  // &.O.2....Y[.S..f
    4650: 50 66 52 66 51 66 26 8B 47 08 66 26 8B 57 10 66  // PfRfQf&.G.f&.W.f
    4660: 26 8B 4F 04 66 F7 F1 66 26 89 47 0C 66 26 89 57  // &.O.f..f&.G.f&.W
    4670: 10 66 59 66 5A 66 58 5B C3 53 8B D8 66 50 66 52  // .fYfZfX[.S..fPfR
    4680: 66 51 66 26 8B 47 08 66 26 8B 4F 04 66 F7 E1 66  // fQf&.G.f&.O.f..f
    4690: 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58 5B  // &.G.f&.W.fYfZfX[
    46A0: C3 53 57 8B D8 26 8B 5F 14 E8 52 EB 8B D0 66 C1  // .SW..&._..R...f.
    46B0: E8 10 92 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B  // ..._[.SW..&.G.&.
    46C0: 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8  // W.....f.........
    46D0: 50 EB EB D8 53 52 57 8B D8 26 8B 47 08 26 8B 57  // P...SRW..&.G.&.W
    46E0: 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14 E8 74 EA 5F  // ..f.....&._..t._
    46F0: 5A 5B C3 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92  // Z[.SR..&.G.&.W..
    4700: 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F 01 E8 53 EA  // f.....&._&._..S.
    4710: 5A 5B C3 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8  // Z[.SRV..&.\&._..
    4720: DC EA 8B D0 66 C1 E8 10 92 26 89 44 1C 26 89 54  // ....f....&.D.&.T
    4730: 1E 5E 5A 5B C3 53 51 52 57 8B D8 26 8B 47 08 26  // .^Z[.SQRW..&.G.&
    4740: 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14  // .W..f.......&.G.
    4750: 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3  // &.W.....f.......
    4760: 02 8B C1 E8 30 EA 5F 5A 59 5B C3 8B D0 66 C1 E8  // ....0._ZY[...f..
    4770: 10 92 C3 00 1E 06 66 50 66 51 66 52 66 53 66 55  // ......fPfQfRfSfU
    4780: 66 56 66 57 0E 1F 0A C0 75 06 E8 37 01 E9 D8 00  // fVfW....u..7....
    4790: 3C 01 75 06 E8 67 01 E9 CE 00 3C 02 75 06 E8 9B  // <.u..g....<.u...
    47A0: 02 E9 C4 00 3C 03 75 0B E8 CF 03 8B EC 89 5E 0C  // ....<.u.......^.
    47B0: E9 B5 00 3C 04 75 0B E8 DE 03 8B EC 89 5E 0C E9  // ...<.u.......^..
    47C0: A6 00 3C 05 75 0B E8 09 05 8B EC 89 56 10 E9 97  // ..<.u.......V...
    47D0: 00 3C 06 75 11 E8 86 04 8B EC 89 5E 0C 89 4E 14  // .<.u.......^..N.
    47E0: 89 56 10 E9 82 00 3C 07 75 10 E8 78 05 8B EC 88  // .V....<.u..x....
    47F0: 7E 0D 89 4E 14 89 56 10 EB 6E 3C 08 75 0A E8 BB  // ~..N..V..n<.u...
    4800: 04 8B EC 88 7E 0D EB 60 3C 09 75 05 E8 B4 05 EB  // ....~..`<.u.....
    4810: 57 3C 0A 75 10 E8 FC 05 8B EC 89 4E 14 89 7E 00  // W<.u.......N..~.
    4820: 8C 46 1C EB 43 3C 0B 75 0B E8 F6 05 8B EC 66 89  // .F..C<.u......f.
    4830: 4E 14 EB 34 3C 10 75 0A E8 EB 05 8B EC 89 5E 0C  // N..4<.u.......^.
    4840: EB 26 3C 11 75 0D E8 1F 06 8B EC 89 5E 0C 89 4E  // .&<.u.......^..N
    4850: 14 EB 15 3C 15 75 0F E8 4A 06 8B EC 89 5E 0C EB  // ...<.u..J....^..
    4860: 07 B8 4F 01 EB 02 32 C0 8B EC 89 46 18 66 5F 66  // ..O...2....F.f_f
    4870: 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 50 1E  // ^f]f[fZfYfX...P.
    4880: 2E 8E 1E ED 03 8C D8 A3 F0 5A A3 00 5B A3 12 5B  // .........Z..[..[
    4890: 2E 8E 1E E5 03 A3 AA 04 1F 58 CB 00 30 31 2E 30  // .........X..01.0
    48A0: 30 00 56 45 53 41 00 03 74 02 00 00 01 00 00 00  // 0.VESA..t.......
    48B0: 00 00 00 00 00 03 32 0F 78 01 00 00 05 01 00 00  // ......2.x.......
    48C0: 34 48 00 00 B9 3F 00 8B DF 83 C7 04 FC 66 33 C0  // 4H...?.......f3.
    48D0: F3 66 AB 8B FB BE 3A 48 B9 22 00 F3 A4 06 1F 8C  // .f....:H."......
    48E0: 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7  // O..G..O..O..O ..
    48F0: 22 89 7F 0E 0E 1F E8 3E D4 B0 4F 32 E4 C3 56 51  // "......>..O2..VQ
    4900: 57 B9 10 00 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F  // W...f3..f._Y....
    4910: C7 05 BB 00 C6 45 02 07 C7 45 04 40 00 C7 45 06  // .....E...E.@..E.
    4920: 40 00 C6 45 1B 04 C6 45 18 01 C6 45 1A 01 C6 45  // @..E...E...E...E
    4930: 1E 01 66 C7 45 3E 00 84 D7 17 8E DB E8 4D BE 66  // ..f.E>.......M.f
    4940: 0B C0 0F 84 EE 00 06 1F 66 89 45 28 8C C8 66 C1  // ........f.E(..f.
    4950: E0 10 B8 C7 4C 66 89 45 0C 81 F9 FF 81 0F 84 CF  // ....Lf.E........
    4960: 00 80 E5 03 B2 01 53 8E DB BE 80 1C E8 F9 D1 5B  // ......S........[
    4970: 06 1F 0F 84 BE 00 53 E8 66 D4 66 89 45 12 C7 45  // ......S.f.f.E..E
    4980: 16 08 10 8D 5C 0C E8 A3 E8 66 89 45 1F 66 89 45  // ....\....f.E.f.E
    4990: 36 8D 5C 10 E8 95 E8 66 89 45 23 66 89 45 3A 8D  // 6.\....f.E#f.E:.
    49A0: 5C 08 E8 87 E8 0A C0 75 04 5B E9 87 00 E8 30 D4  // \......u.[....0.
    49B0: 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01 74 08 77 0A  // f...=X.t.=^.t.w.
    49C0: C6 45 17 08 EB 04 C6 45 17 0E E8 DA D3 80 F9 00  // .E.....E........
    49D0: 74 04 C6 45 1B 06 2E A1 E7 03 89 45 08 8D 5C 04  // t..E.......E..\.
    49E0: E8 49 E8 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89  // .I.f..f......E..
    49F0: 45 32 B0 08 D2 E0 88 45 19 8D 5C 14 E8 2D E8 5B  // E2.....E..\..-.[
    4A00: 3D 00 03 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B  // =..w/S.....3...[
    4A10: FE C8 88 45 1D 88 45 35 88 45 34 8E DB 57 53 BE  // ...E..E5.E4..WS.
    4A20: 80 1C E8 BE BD 5B 5F 0B C9 75 05 06 1F 83 25 FE  // .....[_..u....%.
    4A30: 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3 81 FB FF 81  // 2......O..^.....
    4A40: 74 6A 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 63 8B  // tj..u....!...uc.
    4A50: CB B2 01 BE 20 1C E8 0F D1 74 57 E8 61 D3 0A C0  // .... ....tW.a...
    4A60: 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8 91 04 EB 3C  // u.f............<
    4A70: E8 7B C1 74 05 E8 A0 BE EB 00 E8 9D C2 BE 20 1C  // .{.t.......... .
    4A80: E8 34 BD 74 2D E8 A5 00 E8 2C 00 66 BB 20 1C 00  // .4.t-....,.f. ..
    4A90: 1C E8 22 D3 BE 00 1C E8 25 D3 66 C1 E8 10 8B D8  // ..".....%.f.....
    4AA0: 32 C0 F6 C7 80 74 02 B0 40 E8 74 BD B0 4F 32 E4  // 2....t..@.t..O2.
    4AB0: EB 04 B0 4F B4 03 C3 56 06 33 C0 8E C0 BE 20 1C  // ...O...V.3.... .
    4AC0: E8 1D D3 8B C8 66 C1 E8 10 8B D0 C1 E9 03 26 89  // .....f........&.
    4AD0: 0E 4A 04 C1 EA 04 FE CA 26 88 16 84 04 26 C6 06  // .J......&....&..
    4AE0: 51 04 00 26 C6 06 50 04 00 26 C6 06 49 04 62 26  // Q..&..P..&..I.b&
    4AF0: C7 06 4C 04 00 A0 26 C6 06 85 04 10 26 C7 06 0C  // ..L...&.....&...
    4B00: 01 C1 64 8C C8 26 A3 0E 01 07 5E C3 01 0F 00 0A  // ..d..&....^.....
    4B10: 00 00 00 00 00 40 05 0F FF 00 01 02 03 04 05 06  // .....@..........
    4B20: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4  // ................
    4B30: 03 B8 00 01 EF B9 04 00 B4 01 BE A4 4A AC 86 E0  // ............J...
    4B40: EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9 09 00 BA CE  // ................
    4B50: 03 32 E4 BE A8 4A 8A C4 EE AC 42 EE 4A FE C4 E2  // .2...J....B.J...
    4B60: F5 BA DA 03 EC B9 14 00 BA C0 03 32 E4 BE B1 4A  // ...........2...J
    4B70: 8A C4 EE AC EE FE C4 E2 F7 C3 BE 00 1C E8 3F D2  // ..............?.
    4B80: 66 C1 E8 10 8B D8 E8 0F D2 75 05 E8 FB D1 75 04  // f........u....u.
    4B90: B8 4F 00 C3 B8 4F 03 C3 83 E1 0F 0F 84 BB 00 0A  // .O...O..........
    4BA0: D2 75 0C B8 00 1C E8 1D 03 83 C3 11 E9 A6 00 80  // .u..............
    4BB0: FA 01 75 33 8B FB BB C9 05 B9 08 00 FC E8 3A E6  // ..u3..........:.
    4BC0: 66 AB 43 E2 F8 66 C1 E7 10 66 C1 EF 10 B9 00 01  // f.C..f...f......
    4BD0: BA 00 01 0E 1F E8 C3 BE 06 1F B8 01 1C B9 07 00  // ................
    4BE0: 8B DF E8 E1 02 EB 6E 80 FA 02 75 6E 8B F3 06 1F  // ......n...un....
    4BF0: FC BB C9 05 B9 08 00 66 AD E8 59 E5 43 E2 F8 06  // .......f..Y.C...
    4C00: 56 0E 1F BB D0 05 E8 F1 E5 8A D0 80 E2 03 66 C1  // V.............f.
    4C10: E8 10 8B C8 BE 00 1C E8 4E CF BB CE 05 E8 DA E5  // ........N.......
    4C20: 8B C8 66 C1 E8 10 8B D0 B0 18 B7 01 E8 94 B8 5B  // ..f............[
    4C30: 07 53 81 C3 00 04 B8 02 1C B9 07 00 E8 87 02 5E  // .S.............^
    4C40: 8B FE 66 C1 E7 10 66 C1 EF 10 B9 00 01 BA 00 01  // ..f...f.........
    4C50: 0E 1F E8 95 BE B0 4F 32 E4 C3 32 C0 C3 00 E8 37  // ......O2..2....7
    4C60: D1 74 53 BE 00 1C 80 FB 00 74 18 80 FB 01 75 05  // .tS......t....u.
    4C70: E8 75 D1 EB 1D 80 FB 02 75 10 8B C1 E8 28 D1 D3  // .u......u....(..
    4C80: E8 8B C8 E8 D1 BD 74 2E EB 08 80 FB 03 75 24 E8  // ......t......u$.
    4C90: CC D0 E8 12 D1 8B D8 D3 E3 50 33 C0 BA 00 03 3B  // .........P3....;
    4CA0: DA 77 05 BA FF FF EB 04 F7 F3 8B D0 58 8B C8 B8  // .w..........X...
    4CB0: 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00 0A DB 75 07  // O..2...O......u.
    4CC0: 8A EF E8 AB BF EB 05 E8 90 BF 8A F8 B0 4F 32 E4  // .............O2.
    4CD0: C3 00 E8 C3 D0 74 2C BE 00 1C E8 E2 D0 66 C1 E8  // .....t,......f..
    4CE0: 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E 00 EB 0F 80  // ...@u...u.......
    4CF0: FF 01 75 14 BB 13 00 E8 00 E5 D1 E8 8B D0 B0 4F  // ..u............O
    4D00: 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52 53 66 50 81  // 2...O...2..RSfP.
    4D10: E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10 8B C2 BB 13  // .......@f.......
    4D20: 00 E8 31 E4 BB 12 00 E8 2B E4 66 58 5B 5A C3 9C  // ..1.....+.fX[Z..
    4D30: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    4D40: 0E 1F E8 27 E5 E8 8A FF E8 46 E5 8B EC 89 56 10  // ...'.....F....V.
    4D50: 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // .F.f_f^f]f[fZfYf
    4D60: 58 07 1F 9D CB E8 30 D0 74 54 F6 C3 7F 75 38 53  // X.....0.tT...u8S
    4D70: BE 00 1C E8 72 D0 F7 E2 66 C1 E2 10 8B D0 66 81  // ....r...f.....f.
    4D80: E1 FF FF 00 00 66 03 D1 E8 1C D0 80 E2 FC 66 D3  // .....f........f.
    4D90: E2 66 81 E2 FF FF FF 02 8D 5C 18 66 8B C2 E8 EB  // .f.......\.f....
    4DA0: E3 5B E8 9A BC EB 0F 80 FB 82 74 C3 80 FB 01 75  // .[........t....u
    4DB0: 0A E8 7F BC 32 FF B0 4F 32 E4 C3 32 C0 C3 B0 4F  // ....2..O2..2...O
    4DC0: B4 03 C3 E8 D2 CF 74 47 80 FF 20 74 08 66 C1 E7  // ......tG.. t.f..
    4DD0: 10 66 C1 EF 10 81 F9 00 01 77 31 0A DB 74 05 80  // .f.......w1..t..
    4DE0: FB 80 75 10 32 F6 E8 71 BE 3C 06 74 02 B6 01 E8  // ..u.2..q.<.t....
    4DF0: F8 BC EB 13 80 FB 01 75 13 32 F6 E8 5C BE 3C 06  // .......u.2..\.<.
    4E00: 74 02 B6 01 E8 94 BC B0 4F 32 E4 C3 32 C0 C3 B0  // t.......O2..2...
    4E10: 4F B4 03 C3 0E 07 BF 88 92 2E 8B 0E 86 92 B8 4F  // O..............O
    4E20: 00 C3 32 C0 C3 00 0A DB 75 06 B7 04 B3 10 EB 2F  // ..2.....u....../
    4E30: 80 FB 01 75 1D 53 32 C9 0A FF 74 02 B1 01 E8 D6  // ...u.S2...t.....
    4E40: BD B1 01 0A FF 74 02 B1 00 E8 B7 BE E8 A0 BB 5B  // .....t.........[
    4E50: EB 0D 80 FB 02 75 0D E8 CF BD 8A F8 C0 E7 02 B0  // .....u..........
    4E60: 4F 32 E4 C3 B8 4F 03 C3 80 FB 01 75 09 33 C0 E8  // O2...O.....u.3..
    4E70: 35 BE 74 2B EB 24 80 FB 07 75 24 0A FF 75 0E B0  // 5.t+.$...u$..u..
    4E80: 82 E8 3F B6 0A C9 74 12 B9 03 03 EB 0D 0B C9 B1  // ..?...t.........
    4E90: 00 74 02 B1 03 B0 82 E8 29 B6 B0 4F 32 E4 C3 B0  // .t......)..O2...
    4EA0: 4F B4 03 C3 80 E3 01 0A DB 75 05 BB 02 01 EB 0C  // O........u......
    4EB0: 33 C0 53 E8 4D BE E8 95 C5 5B 74 05 B0 4F 32 E4  // 3.S.M....[t..O2.
    4EC0: C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06  // ..O......r..B...
    4ED0: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    4EE0: 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 A8 4E 66 5F  // P.......X....Nf_
    4EF0: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E  // f^f]f[fZfYfX....
    4F00: 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 A8 4E C3  // .P.......X....N.
    4F10: E2 4E 2C 89 45 89 62 89 D7 4F 65 80 97 80 0A 81  // .N,.E.b..Oe.....
    4F20: 8D 81 1B 83 1F 83 28 86 F9 86 7C 87 E3 87 7E 89  // ......(...|...~.
    4F30: A3 89 4C 8C F0 51 93 90 96 4E 96 4E 96 4E 96 4E  // ..L..Q...N.N.N.N
    4F40: 96 4E 96 4E 63 91 A3 75 F7 76 2E 8E 1E E5 03 80  // .N.Nc..u.v......
    4F50: 26 87 04 F3 50 8A E0 80 E4 7F E8 C6 01 3B D3 75  // &...P........;.u
    4F60: 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01  // .X........0&.G..
    4F70: 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01  // t.... ..uI......
    4F80: 74 41 B5 0B 53 E8 67 42 0A FF 5B 75 0B 80 26 88  // tA..S.gB..[u..&.
    4F90: 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26  // .......+X......&
    4FA0: 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08  // .........c......
    4FB0: 00 C6 06 84 04 18 C7 06 0C 01 AE 5C 8C 0E 0E 01  // ...........\....
    4FC0: CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E  // .B..&.......XSP.
    4FD0: 1F 33 C9 8A C8 B2 08 BE 40 1C E8 8B CB E8 0E BC  // .3......@.......
    4FE0: 74 05 E8 33 B9 EB 00 E8 30 BD BE 40 1C E8 C7 B7  // t..3....0..@....
    4FF0: 58 5B 0F 84 6C FF 2E 8E 1E E5 03 0E 07 E8 4B 2A  // X[..l.........K*
    5000: 0E 1F 53 66 BB 40 1C 00 1C E8 AA CD BE 00 1C B0  // ..Sf.@..........
    5010: 20 E8 0C B8 5B 2E 8E 1E E5 03 0E 07 E8 54 2F E8  //  ...[........T/.
    5020: 24 00 E8 23 3E E8 D1 01 E8 8E 01 E8 A9 3F 0E 1F  // $..#>........?..
    5030: BE 00 1C B0 10 E8 E8 B7 E8 2F 2F E8 27 2F C3 8B  // .........//.'/..
    5040: EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8  // ..F..../........
    5050: 52 00 E8 94 0B C3 53 83 C3 0A 8B 16 63 04 B9 19  // R.....S.....c...
    5060: 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7  // ...0.2.&.'.C....
    5070: 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9  // [...2...S.......
    5080: 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43  // ....&.'<.u... .C
    5090: FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8  // ....[&.G........
    50A0: 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09  // ........#...&.G.
    50B0: 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC  // .u........t.....
    50C0: B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26  // ..........t....&
    50D0: 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00  // ...F.....S......
    50E0: 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4  // 2........&...C..
    50F0: 8A C4 EE 32 C0 EE 1E 06 E8 81 2E 0B ED 74 09 1F  // ...2.........t..
    5100: 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37  // ......F...[.S..7
    5110: B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2  // ...2....&.'.C...
    5120: F7 5B C3 BB AE 53 0E 07 8B D3 0A E4 7D 01 C3 E8  // .[...S......}...
    5130: 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10  // ...3.....<J.....
    5140: 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C  // u ...$.<.~$<.t <
    5150: 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 C0  // .t.<.t..@.......
    5160: 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 C0 05 C3 B0  // ...@............
    5170: 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10  // @........u......
    5180: 75 05 81 C3 C0 01 C3 81 C3 40 06 C3 BF 30 51 BE  // u........@...0Q.
    5190: 51 51 33 C9 E8 4E 00 C3 04 00 01 05 40 01 06 80  // QQ3..N......@...
    51A0: 01 0D 40 03 0E 80 03 0F 40 04 10 80 04 11 80 06  // ..@.....@.......
    51B0: 12 C0 06 13 00 07 62 00 02 53 8A 1E 49 04 80 FB  // ......b..S..I...
    51C0: 07 7F 10 32 FF D1 E3 2E 8B 87 6D 51 A2 65 04 88  // ...2......mQ.e..
    51D0: 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E  // &f.[.,0(0-0)0*0.
    51E0: 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6  // 0.?)0.8%u...].3.
    51F0: C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E E5 03  // ....;.u.........
    5200: F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49  // .....uI.>L..tB.I
    5210: 04 B9 00 20 2E 8B 3E EB 03 26 F6 47 33 01 75 0E  // ... ..>..&.G3.u.
    5220: 26 F6 47 09 01 75 1B 2E 8B 3E E9 03 EB 14 3C 06  // &.G..u...>....<.
    5230: 7E 0B 2E 8B 3E E7 03 26 8A 67 37 B5 40 66 33 C0  // ~...>..&.g7.@f3.
    5240: EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB  // ..f. . ...f3..f.
    5250: 80 26 87 04 7F 07 1F C3 2E 8E 1E E5 03 80 FB 10  // .&..............
    5260: 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32  // u..z... u......2
    5270: 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9  // u......u........
    5280: F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4  // .........$......
    5290: 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9  // ...5u(<.u.....@.
    52A0: D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA  // ......@.........
    52B0: 00 FE C8 75 06 E8 D8 08 E9 BA 00 E9 BD 00 80 FB  // ...u............
    52C0: 30 74 03 E9 96 00 50 E8 25 3F 8A EF BA CC 03 EC  // 0t....P.%?......
    52D0: 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED  // ..X..u0.....u...
    52E0: 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00  // u....$0<0u......
    52F0: A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F  // ...$0<0u....&..o
    5300: 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F  // ......6<.uA.&..o
    5310: B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30  // .....u......$0<0
    5320: 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24  // t.....t........$
    5330: 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88  // 0<0u.....t......
    5340: 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B  // ...........)<.u+
    5350: 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75  // .&..o.........1u
    5360: 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05  // ...t.<.u........
    5370: 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75  // .&......F.....3u
    5380: 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5  // .<.t.<.u..&.....
    5390: 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07  // .........4u.<.u.
    53A0: 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01  // .&.....<.u......
    53B0: EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB  // .....6u&. .<.t..
    53C0: 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA  // ..<.t...........
    53D0: C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3  // .....B."........
    53E0: 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04  // .........u......
    53F0: 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E  // ......%.......^.
    5400: 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00 90 7A  // .N..F..........z
    5410: 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00 02 63  // ......(........c
    5420: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    5430: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    5440: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    5450: 00 00 10 0E 00 FF 28 18 08 00 08 09 03 00 02 63  // ......(........c
    5460: 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00  // -'(.+...........
    5470: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ................
    5480: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    5490: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    54A0: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    54B0: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    54C0: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    54D0: 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63  // ......P........c
    54E0: 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00  // _OP.U...........
    54F0: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(............
    5500: 07 10 11 12 13 14 15 16 17 08 00 0F 00 00 00 00  // ................
    5510: 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63  // ......(...@....c
    5520: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    5530: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    5540: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    5550: 00 00 30 0F 00 FF 28 18 08 00 40 09 03 00 02 63  // ..0...(...@....c
    5560: 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00  // -'(.+...........
    5570: 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06  // ................
    5580: 07 10 11 12 13 14 15 16 17 01 00 03 00 00 00 00  // ................
    5590: 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63  // ..0...P...@....c
    55A0: 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00  // _OP.T...........
    55B0: 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17  // ...(............
    55C0: 17 17 17 17 17 17 17 17 17 01 00 01 00 00 00 00  // ................
    55D0: 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6  // ......P.........
    55E0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    55F0: 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08  // ..](.c..........
    5600: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    5610: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3  // ......P.........
    5620: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    5630: EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06  // ...P............
    5640: 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00  // ................
    5650: 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18  // ..@..........(..
    5660: 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20  // -2 $8?......... 
    5670: 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C  // $(-28?..........
    5680: 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25  // %/83.*%')*,#..#%
    5690: 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33  // '*,+*))-27;97423
    56A0: 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35  // 4551,'/023443325
    56B0: 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05  // 8:=<:98899:741..
    56C0: 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11  // ................
    56D0: 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14  // ................
    56E0: 16 18 1A 19 18 17 16 17 17 17 18 15 14 11 15 15  // ................
    56F0: 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19  // ................
    5700: 19 19 1A 18 17 16 02 03 04 05 07 06 06 05 05 07  // ................
    5710: 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09  // ................
    5720: 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D  // ................
    5730: 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D  // ................
    5740: 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00  // ................
    5750: 00 00 00 00 00 00 28 18 08 00 20 09 0F 00 06 63  // ......(... ....c
    5760: 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00  // -'(.+...........
    5770: 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ................
    5780: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    5790: 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63  // ......P...@....c
    57A0: 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00  // _OP.T...........
    57B0: 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06  // ...(............
    57C0: 07 10 11 12 13 14 15 16 17 01 00 0F 00 00 00 00  // ................
    57D0: 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07  // ............%(..
    57E0: 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13  // . ..(,..%*..26..
    57F0: 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D  // ',. 49...$..,0..
    5800: 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18  // !&...3..+0.$8=..
    5810: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    5820: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    5830: 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05  // -2 $8?..........
    5840: 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18  // ........-2 $8?..
    5850: 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2  // -2 $8?P.........
    5860: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    5870: 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00  // ..](.c..........
    5880: 00 00 08 00 00 00 18 00 00 0B 00 05 00 00 00 00  // ................
    5890: 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3  // ......P.........
    58A0: 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00  // _OP.T....@......
    58B0: 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14  // ..](.c..........
    58C0: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    58D0: 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    58E0: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    58F0: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    5900: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    5910: 00 00 10 0E 00 FF 28 18 0E 00 08 09 03 00 02 A3  // ......(.........
    5920: 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00  // -'(.+....M......
    5930: 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..]..c..........
    5940: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    5950: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    5960: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    5970: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    5980: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    5990: 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3  // ......P.........
    59A0: 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00  // _OP.U....M......
    59B0: 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14  // ..](.c..........
    59C0: 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00  // .89:;<=>?.......
    59D0: 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67  // ......(........g
    59E0: 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00  // -'(.+....O......
    59F0: 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ................
    5A00: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    5A10: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67  // ......P........g
    5A20: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    5A30: 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14  // ...(............
    5A40: 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00  // .89:;<=>?.......
    5A50: 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66  // ......P........f
    5A60: 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00  // _OP.U....O......
    5A70: 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08  // ...(............
    5A80: 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00  // ................
    5A90: 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    5AA0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    5AB0: EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F  // ...(......??????
    5AC0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00  // ?????????.......
    5AD0: 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3  // ......P.........
    5AE0: 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00  // _OP.T..>.@......
    5AF0: EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14  // ...(............
    5B00: 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00  // .89:;<=>?.......
    5B10: 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63  // ......(... ....c
    5B20: 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00  // _OP.T....A......
    5B30: 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06  // ...(@...........
    5B40: 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00  // .........A......
    5B50: 00 00 40 05 0F FF AE 53 00 C0 00 00 00 00 00 00  // ..@....S........
    5B60: 00 00 00 00 00 00 0E 5B 00 C0 00 00 00 00 00 00  // .......[........
    5B70: 00 00 00 00 00 00 1A 00 61 92 00 C0 00 00 00 00  // ........a.......
    5B80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B90: 1E E8 10 00 2E 8E 1E E5 03 E8 B3 36 E8 8A 36 E8  // ...........6..6.
    5BA0: 68 1A 1F C3 2E 8E 1E E5 03 C7 06 87 04 60 F9 C6  // h............`..
    5BB0: 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01  // .........$......
    5BC0: E8 65 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20  // .e.....&....... 
    5BD0: C7 06 63 04 D4 03 B8 03 00 E8 23 F3 C3 1E 2E 8E  // ..c.......#.....
    5BE0: 1E E5 03 0E 07 EB 00 1F C3 F6 06 89 04 08 74 01  // ..............t.
    5BF0: C3 53 BA C8 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63  // .S............>c
    5C00: 04 B4 75 2F BE 62 5C B9 40 00 33 DB 9C FA 8A C3  // ..u/.b\.@.3.....
    5C10: EE 8B FB C1 EF 03 83 E7 03 03 FE 2E 8A 05 42 EE  // ..............B.
    5C20: 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D  // ..E....E....J...
    5C30: E9 85 00 26 8A 47 2B F6 06 89 04 06 74 31 B9 F8  // ...&.G+.....t1..
    5C40: 00 BF EE 55 3C 08 74 11 B9 40 00 BF 6E 57 3C 38  // ...U<.t..@..nW<8
    5C50: 74 07 3C 3F 74 03 BF AE 57 33 DB 9C FA 8A C3 EE  // t.<?t...W3......
    5C60: 2E 8A 01 42 EE EE EE FE C3 4A E2 F1 9D EB 49 3C  // ...B.....J....I<
    5C70: 08 74 25 3C 38 74 2E 3C 3F 74 2A B9 08 00 33 DB  // .t%<8t.<?t*...3.
    5C80: 51 E8 EC D0 B9 08 00 F7 C3 10 00 74 03 83 C7 18  // Q..........t....
    5C90: E8 67 00 59 E2 EA EB 20 E8 D5 D0 B9 10 00 33 DB  // .g.Y... ......3.
    5CA0: E8 57 00 EB 13 B9 40 00 33 DB 51 E8 28 00 8A C3  // .W....@.3.Q.(...
    5CB0: E8 7A 2F FE C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A  // .z/..Y..[..*.*.*
    5CC0: 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A  // .*.?.?.?.?.*.?.*
    5CD0: 00 3F 00 2A 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A  // .?.*.?..........
    5CE0: B5 52 5C 8B FB D1 EF 83 E7 0F 2E 8A AD 52 5C 8B  // .R\..........R\.
    5CF0: FB 83 E7 0F 2E 8A 8D 52 5C C3 9C 8A C3 FA EE 2E  // .......R\.......
    5D00: 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE  // ..B.G....G....G.
    5D10: C3 4A E2 E7 9D C3 00 00 00 00 00 00 00 00 7E 81  // .J............~.
    5D20: A5 81 BD 99 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE  // .....~|.....|...
    5D30: FE FE 7C 38 10 00 10 38 7C FE 7C 38 10 00 10 38  // ..|8...8|.|8...8
    5D40: 10 EE EE 10 38 00 38 7C FE FE 6C 10 38 00 00 18  // ....8.8|..l.8...
    5D50: 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7 FF FF 00 18  // <~<.............
    5D60: 3C 66 66 3C 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E  // <ff<............
    5D70: 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A  // .6x..x~..~.~....
    5D80: 1E 18 18 70 F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C  // ...p.`>>66.f...<
    5D90: 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0 80 00 02 06  // f.f<............
    5DA0: 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C 18 00 66 66  // .>.....<~.~<..ff
    5DB0: 66 66 66 00 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66  // fff.f...{;....<f
    5DC0: 38 6C 6C 38 CC 78 00 00 00 00 FE FE FE 00 18 3C  // 8ll8.x.........<
    5DD0: 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18 18 00 18 18  // ~.~<.~.<~.......
    5DE0: 18 18 7E 3C 18 00 00 18 1C FE 1C 18 00 00 00 30  // ..~<...........0
    5DF0: 70 FE 70 30 00 00 00 00 C0 C0 C0 FE 00 00 00 24  // p.p0...........$
    5E00: 66 FF 66 24 00 00 00 10 38 7C 7C FE 00 00 00 FE  // f.f$....8||.....
    5E10: 7C 7C 38 10 00 00 00 00 00 00 00 00 00 00 18 3C  // ||8............<
    5E20: 3C 18 18 00 18 00 6C 6C 6C 00 00 00 00 00 6C 6C  // <.....lll.....ll
    5E30: FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC 18 00 00 C6  // .l.ll..~.|......
    5E40: 0C 18 30 60 C6 00 38 6C 38 76 CC CC 76 00 18 18  // ..0`..8l8v..v...
    5E50: 30 00 00 00 00 00 18 30 60 60 60 30 18 00 60 30  // 0......0```0..`0
    5E60: 18 18 18 30 60 00 00 EE 7C FE 7C EE 00 00 00 18  // ...0`...|.|.....
    5E70: 18 7E 18 18 00 00 00 00 00 00 18 18 30 00 00 00  // .~..........0...
    5E80: 00 FE 00 00 00 00 00 00 00 00 00 38 38 00 06 0C  // ...........88...
    5E90: 18 30 60 C0 80 00 7C C6 CE DE F6 E6 7C 00 18 78  // .0`...|.....|..x
    5EA0: 18 18 18 18 7E 00 7C C6 0C 18 30 66 FE 00 7C C6  // ....~.|...0f..|.
    5EB0: 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0  // .<..|...<l......
    5EC0: FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6  // ....|.|.....|...
    5ED0: 06 0C 18 18 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6  // ......|..|..|.|.
    5EE0: C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C 1C 00 00 18  // .~..|...........
    5EF0: 18 00 00 18 18 30 0C 18 30 60 30 18 0C 00 00 00  // .....0..0`0.....
    5F00: FE 00 00 FE 00 00 60 30 18 0C 18 30 60 00 7C C6  // ......`0...0`.|.
    5F10: 06 0C 18 00 18 00 7C C6 C6 DE DC C0 7E 00 38 6C  // ......|.....~.8l
    5F20: C6 C6 FE C6 C6 00 FC 66 66 7C 66 66 FC 00 3C 66  // .......ff|ff..<f
    5F30: C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C F8 00 FE C2  // ...f<..lfffl....
    5F40: C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60 F0 00 7C C6  // .......b`|``..|.
    5F50: C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18  // ....|.........<.
    5F60: 18 18 18 18 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC  // ....<.<.....p...
    5F70: D8 F0 D8 CC C6 00 F0 60 60 60 60 62 FE 00 C6 EE  // .......````b....
    5F80: FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6  // ..............|.
    5F90: C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60 F0 00 7C C6  // ....|..ff|``..|.
    5FA0: C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6  // ....|.........|.
    5FB0: C0 7C 06 C6 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6  // .|..|.~Z....<...
    5FC0: C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6  // ....|.....l8....
    5FD0: D6 D6 FE EE C6 00 C6 6C 38 38 38 6C C6 00 66 66  // .......l888l..ff
    5FE0: 66 3C 18 18 3C 00 FE 86 0C 18 30 62 FE 00 7C 60  // f<..<.....0b..|`
    5FF0: 60 60 60 60 7C 00 C0 60 30 18 0C 06 02 00 7C 0C  // ````|..`0.....|.
    6000: 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00 00 00 00 00  // ....|..8l.......
    6010: 00 00 00 00 00 FF 30 30 18 00 00 00 00 00 00 00  // ......00........
    6020: 78 0C 7C CC 7E 00 E0 60 7C 66 66 66 FC 00 00 00  // x.|.~..`|fff....
    6030: 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC 7E 00 00 00  // |...|...|...~...
    6040: 7C C6 FE C0 7C 00 1C 36 30 FC 30 30 78 00 00 00  // |...|..60.00x...
    6050: 76 CE C6 7E 06 7C E0 60 7C 66 66 66 E6 00 18 00  // v..~.|.`|fff....
    6060: 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60  // 8...<........x.`
    6070: 66 6C 78 6C E6 00 18 18 18 18 18 18 1C 00 00 00  // flxl............
    6080: 6C FE D6 D6 C6 00 00 00 DC 66 66 66 66 00 00 00  // l........ffff...
    6090: 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C 60 F0 00 00  // |...|....ff|`...
    60A0: 76 CC CC 7C 0C 1E 00 00 DC 66 60 60 F0 00 00 00  // v..|.....f``....
    60B0: 7C C0 7C 06 7C 00 30 30 FC 30 30 36 1C 00 00 00  // |.|.|.00.006....
    60C0: CC CC CC CC 76 00 00 00 C6 C6 6C 38 10 00 00 00  // ....v.....l8....
    60D0: C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C C6 00 00 00  // ....l....l8l....
    60E0: C6 C6 CE 76 06 7C 00 00 FC 98 30 64 FC 00 0E 18  // ...v.|....0d....
    60F0: 18 70 18 18 0E 00 18 18 18 00 18 18 18 00 70 18  // .p............p.
    6100: 18 0E 18 18 70 00 76 DC 00 00 00 00 00 00 00 10  // ....p.v.........
    6110: 38 38 6C 6C FE 00 3C 66 C0 66 3C 18 CC 78 00 C6  // 88ll..<f.f<..x..
    6120: 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0 7C 00 7C C6  // ....v...|...|.|.
    6130: 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00  // x.|.~...x.|.~...
    6140: 78 0C 7C CC 7E 00 38 38 78 0C 7C CC 7E 00 00 00  // x.|.~.88x.|.~...
    6150: 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00  // |.|.l8|.|...|...
    6160: 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0 7C 00 66 00  // |...|...|...|.f.
    6170: 38 18 18 18 3C 00 7C C6 38 18 18 18 3C 00 00 00  // 8...<.|.8...<...
    6180: 38 18 18 18 3C 00 C6 38 6C C6 FE C6 C6 00 38 38  // 8...<..8l.....88
    6190: 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0 FE 00 00 00  // .|..............
    61A0: 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6  // l.~.n.~.......|.
    61B0: 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0  // .|..|....|..|...
    61C0: 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0  // .|..|.|.....v...
    61D0: 00 C6 C6 CE 76 00 18 00 3C 18 18 18 3C 00 C6 38  // ....v...<...<..8
    61E0: 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18  // l..l8.......|...
    61F0: 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6 6C 00 C3 66  // ~..~..8l`.f.l..f
    6200: 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E 00 1C 00 3E  // <~.<..>c8.c>...>
    6210: 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00  // a<.|....x.|.~...
    6220: 38 18 18 18 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E  // 8...<....|..|...
    6230: 00 CC CC DC 76 00 00 FC 00 BC 66 66 E6 00 FE 00  // ....v.....ff....
    6240: C6 E6 F6 CE C6 00 3E 00 3E 60 67 63 3D 00 3E 00  // ......>.>`gc=.>.
    6250: 76 CE C6 7E 06 7C 18 00 18 30 60 66 3C 00 00 00  // v..~.|...0`f<...
    6260: 00 7C 60 60 00 00 00 00 00 7C 0C 0C 00 00 C0 CC  // .|``.....|......
    6270: D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00  // .0|6.>...0l<~...
    6280: 18 18 3C 3C 18 00 00 36 6C D8 6C 36 00 00 00 D8  // ..<<...6l.l6....
    6290: 6C 36 6C D8 00 00 22 88 22 88 22 88 22 88 55 AA  // l6l...".".".".U.
    62A0: 55 AA 55 AA 55 AA DD 77 DD 77 DD 77 DD 77 18 18  // U.U.U..w.w.w.w..
    62B0: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    62C0: F8 18 F8 18 18 18 36 36 36 36 F6 36 36 36 00 00  // ......6666.666..
    62D0: 00 00 FE 36 36 36 00 00 F8 18 F8 18 18 18 36 36  // ...666........66
    62E0: F6 06 F6 36 36 36 36 36 36 36 36 36 36 36 00 00  // ...66666666666..
    62F0: FE 06 F6 36 36 36 36 36 F6 06 FE 00 00 00 36 36  // ...66666......66
    6300: 36 36 FE 00 00 00 18 18 F8 18 F8 00 00 00 00 00  // 66..............
    6310: 00 00 F8 18 18 18 18 18 18 18 1F 00 00 00 18 18  // ................
    6320: 18 18 FF 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    6330: 18 18 1F 18 18 18 00 00 00 00 FF 00 00 00 18 18  // ................
    6340: 18 18 FF 18 18 18 18 18 1F 18 1F 18 18 18 36 36  // ..............66
    6350: 36 36 37 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6676666670?.....
    6360: 3F 30 37 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // ?0766666........
    6370: FF 00 F7 36 36 36 36 36 37 30 37 36 36 36 00 00  // ...66666707666..
    6380: FF 00 FF 00 00 00 36 36 F7 00 F7 36 36 36 18 18  // ......66...666..
    6390: FF 00 FF 00 00 00 36 36 36 36 FF 00 00 00 00 00  // ......6666......
    63A0: FF 00 FF 18 18 18 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    63B0: 36 36 3F 00 00 00 18 18 1F 18 1F 00 00 00 00 00  // 66?.............
    63C0: 1F 18 1F 18 18 18 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    63D0: 36 36 FF 36 36 36 18 18 FF 18 FF 18 18 18 18 18  // 66.666..........
    63E0: 18 18 F8 00 00 00 00 00 00 00 1F 18 18 18 FF FF  // ................
    63F0: FF FF FF FF FF FF 00 00 00 00 FF FF FF FF F0 F0  // ................
    6400: F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF  // ................
    6410: FF FF 00 00 00 00 00 00 66 DC D8 DC 66 00 00 78  // ........f...f..x
    6420: CC F8 CC C6 CC 00 00 FE 62 60 60 60 E0 00 00 FE  // ........b```....
    6430: 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6 FE 00 00 7E  // lllll...`0`....~
    6440: D8 CC CC D8 70 00 00 66 66 66 66 7C C0 00 00 76  // ....p..ffff|...v
    6450: DC 18 18 18 38 00 FE 38 6C C6 6C 38 FE 00 38 6C  // ....8..8l.l8..8l
    6460: C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C EE 00 3E 60  // ...l8.8l..ll..>`
    6470: 38 66 C6 CC 78 00 00 00 7E DB DB 7E 00 00 06 7C  // 8f..x...~..~...|
    6480: DE F6 E6 7C C0 00 38 60 C0 F8 C0 60 38 00 7C C6  // ...|..8`...`8.|.
    6490: C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE 00 00 18 18  // ................
    64A0: 7E 18 18 00 7E 00 30 18 0C 18 30 00 7E 00 0C 18  // ~...~.0...0.~...
    64B0: 30 18 0C 00 7E 00 0C 1E 18 18 18 18 18 18 18 18  // 0...~...........
    64C0: 18 18 18 78 30 00 00 00 18 00 7E 00 18 00 00 76  // ...x0.....~....v
    64D0: DC 00 76 DC 00 00 7C C6 C6 7C 00 00 00 00 00 00  // ..v...|..|......
    64E0: 00 18 18 00 00 00 00 00 00 00 18 00 00 00 1F 18  // ................
    64F0: 18 18 F8 38 18 00 D8 6C 6C 6C 00 00 00 00 70 D8  // ...8...lll....p.
    6500: 30 F8 00 00 00 00 00 00 7C 7C 7C 7C 00 00 00 00  // 0.......||||....
    6510: 00 00 00 00 00 00 1D 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
    6520: 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00  // ................
    6530: 00 00 00 00 00 00 00 00 00 00 00 7E 81 A5 81 81  // ...........~....
    6540: BD 99 81 81 7E 00 00 00 00 00 00 7C FE FE D6 FE  // ....~......|....
    6550: FE BA C6 FE 7C 00 00 00 00 00 00 00 6C EE FE FE  // ....|.......l...
    6560: FE FE 7C 38 10 00 00 00 00 00 00 00 10 38 7C FE  // ..|8.........8|.
    6570: 7C 38 10 00 00 00 00 00 00 00 00 00 10 38 38 10  // |8...........88.
    6580: 6C EE 6C 10 38 00 00 00 00 00 00 10 38 7C 7C FE  // l.l.8.......8||.
    6590: FE FE 6C 10 38 00 00 00 00 00 00 00 00 00 18 3C  // ..l.8..........<
    65A0: 3C 3C 18 00 00 00 00 00 00 FF FF FF FF FF E7 C3  // <<..............
    65B0: C3 C3 E7 FF FF FF FF FF FF 00 00 00 00 18 3C 66  // ..............<f
    65C0: 66 66 3C 18 00 00 00 00 00 FF FF FF FF E7 C3 99  // ff<.............
    65D0: 99 99 C3 E7 FF FF FF FF FF 00 00 1E 0E 1E 36 78  // ..............6x
    65E0: CC CC CC CC 78 00 00 00 00 00 00 3C 66 66 66 3C  // ....x......<fff<
    65F0: 18 7E 18 18 18 00 00 00 00 00 00 1E 1A 1E 18 18  // .~..............
    6600: 18 18 78 F8 70 00 00 00 00 00 00 3E 36 3E 36 36  // ..x.p......>6>66
    6610: 76 F6 66 0E 1E 0C 00 00 00 00 00 18 DB 7E 3C 66  // v.f..........~<f
    6620: 66 3C 7E DB 18 00 00 00 00 00 00 00 80 E0 F0 FC  // f<~.............
    6630: FE FC F0 E0 80 00 00 00 00 00 00 00 02 0E 3E 7E  // ..............>~
    6640: FE 7E 3E 0E 02 00 00 00 00 00 00 18 3C 7E 18 18  // .~>.........<~..
    6650: 18 18 7E 3C 18 00 00 00 00 00 00 66 66 66 66 66  // ..~<.......fffff
    6660: 66 66 00 66 66 00 00 00 00 00 00 7F DB DB DB DB  // ff.ff...........
    6670: 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C C6 C6 60 7C  // {..........|..`|
    6680: F6 DE 7C 0C C6 C6 7C 00 00 00 00 00 00 00 00 00  // ..|...|.........
    6690: 00 FE FE FE FE 00 00 00 00 00 00 18 3C 7E 18 18  // ............<~..
    66A0: 18 7E 3C 18 7E 00 00 00 00 00 00 18 3C 7E 18 18  // .~<.~.......<~..
    66B0: 18 18 18 18 18 00 00 00 00 00 00 18 18 18 18 18  // ................
    66C0: 18 18 7E 3C 18 00 00 00 00 00 00 00 00 00 0C 0E  // ..~<............
    66D0: FF 0E 0C 00 00 00 00 00 00 00 00 00 00 00 30 70  // ..............0p
    66E0: FE 70 30 00 00 00 00 00 00 00 00 00 00 00 00 C0  // .p0.............
    66F0: C0 C0 FE 00 00 00 00 00 00 00 00 00 00 00 24 66  // ..............$f
    6700: FF 66 24 00 00 00 00 00 00 00 00 00 10 38 38 38  // .f$..........888
    6710: 7C 7C FE FE 00 00 00 00 00 00 00 00 FE FE 7C 7C  // ||............||
    6720: 7C 38 38 10 00 00 00 00 00 00 00 00 00 00 00 00  // |88.............
    6730: 00 00 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 3C  // ............<<<<
    6740: 18 18 00 18 18 00 00 00 00 00 36 36 36 36 14 00  // ..........6666..
    6750: 00 00 00 00 00 00 00 00 00 00 00 6C 6C 6C FE 6C  // ...........lll.l
    6760: 6C FE 6C 6C 6C 00 00 00 00 00 00 18 18 7C C6 C0  // l.lll........|..
    6770: 78 3C 06 C6 7C 18 18 00 00 00 00 00 00 00 62 66  // x<..|.........bf
    6780: 0C 18 30 66 C6 00 00 00 00 00 00 38 6C 38 30 76  // ..0f.......8l80v
    6790: 7E CC CC CC 76 00 00 00 00 00 0C 0C 0C 18 00 00  // ~...v...........
    67A0: 00 00 00 00 00 00 00 00 00 00 00 0C 18 30 30 30  // .............000
    67B0: 30 30 30 18 0C 00 00 00 00 00 00 30 18 0C 0C 0C  // 000........0....
    67C0: 0C 0C 0C 18 30 00 00 00 00 00 00 00 00 00 6C 38  // ....0.........l8
    67D0: FE 38 6C 00 00 00 00 00 00 00 00 00 00 00 18 18  // .8l.............
    67E0: 7E 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00  // ~...............
    67F0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    6800: FE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6810: 00 00 00 18 18 00 00 00 00 00 00 00 00 02 06 0C  // ................
    6820: 18 30 60 C0 80 00 00 00 00 00 00 7C C6 C6 CE DE  // .0`........|....
    6830: F6 E6 C6 C6 7C 00 00 00 00 00 00 18 78 18 18 18  // ....|.......x...
    6840: 18 18 18 18 7E 00 00 00 00 00 00 7C C6 C6 06 0C  // ....~......|....
    6850: 18 30 60 C6 FE 00 00 00 00 00 00 7C C6 06 06 3C  // .0`........|...<
    6860: 06 06 06 C6 7C 00 00 00 00 00 00 0C 1C 3C 6C CC  // ....|........<l.
    6870: CC FE 0C 0C 1E 00 00 00 00 00 00 FE C0 C0 C0 FC  // ................
    6880: 06 06 06 C6 7C 00 00 00 00 00 00 7C C6 C0 C0 FC  // ....|......|....
    6890: C6 C6 C6 C6 7C 00 00 00 00 00 00 FE C6 06 0C 18  // ....|...........
    68A0: 30 30 30 30 30 00 00 00 00 00 00 7C C6 C6 C6 7C  // 00000......|...|
    68B0: C6 C6 C6 C6 7C 00 00 00 00 00 00 7C C6 C6 C6 C6  // ....|......|....
    68C0: 7E 06 06 C6 7C 00 00 00 00 00 00 00 00 00 0C 0C  // ~...|...........
    68D0: 00 00 0C 0C 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
    68E0: 00 00 0C 0C 0C 18 00 00 00 00 00 00 0C 18 30 60  // ..............0`
    68F0: C0 60 30 18 0C 00 00 00 00 00 00 00 00 00 00 FE  // .`0.............
    6900: 00 FE 00 00 00 00 00 00 00 00 00 00 60 30 18 0C  // ............`0..
    6910: 06 0C 18 30 60 00 00 00 00 00 00 7C C6 C6 0C 18  // ...0`......|....
    6920: 18 18 00 18 18 00 00 00 00 00 00 7C C6 C6 C6 DE  // ...........|....
    6930: DE DE DC C0 7E 00 00 00 00 00 00 38 6C C6 C6 C6  // ....~......8l...
    6940: FE C6 C6 C6 C6 00 00 00 00 00 00 FC 66 66 66 7C  // ............fff|
    6950: 66 66 66 66 FC 00 00 00 00 00 00 3C 66 C2 C0 C0  // ffff.......<f...
    6960: C0 C0 C2 66 3C 00 00 00 00 00 00 F8 6C 66 66 66  // ...f<.......lfff
    6970: 66 66 66 6C F8 00 00 00 00 00 00 FE 66 60 64 7C  // fffl........f`d|
    6980: 64 60 60 66 FE 00 00 00 00 00 00 FE 66 60 64 7C  // d``f........f`d|
    6990: 64 60 60 60 F0 00 00 00 00 00 00 7C C6 C6 C0 C0  // d```.......|....
    69A0: C0 CE C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE  // ....|...........
    69B0: C6 C6 C6 C6 C6 00 00 00 00 00 00 3C 18 18 18 18  // ...........<....
    69C0: 18 18 18 18 3C 00 00 00 00 00 00 3C 18 18 18 18  // ....<......<....
    69D0: 18 18 D8 D8 70 00 00 00 00 00 00 C6 C6 CC D8 F0  // ....p...........
    69E0: F0 D8 CC C6 C6 00 00 00 00 00 00 F0 60 60 60 60  // ............````
    69F0: 60 60 62 66 FE 00 00 00 00 00 00 C6 C6 EE EE FE  // ``bf............
    6A00: D6 D6 D6 C6 C6 00 00 00 00 00 00 C6 C6 E6 E6 F6  // ................
    6A10: DE CE CE C6 C6 00 00 00 00 00 00 7C C6 C6 C6 C6  // ...........|....
    6A20: C6 C6 C6 C6 7C 00 00 00 00 00 00 FC 66 66 66 66  // ....|.......ffff
    6A30: 7C 60 60 60 F0 00 00 00 00 00 00 7C C6 C6 C6 C6  // |```.......|....
    6A40: C6 C6 D6 D6 7C 06 00 00 00 00 00 FC 66 66 66 7C  // ....|.......fff|
    6A50: 78 6C 66 66 E6 00 00 00 00 00 00 7C C6 C0 C0 70  // xlff.......|...p
    6A60: 1C 06 06 C6 7C 00 00 00 00 00 00 7E 5A 18 18 18  // ....|......~Z...
    6A70: 18 18 18 18 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6  // ....<...........
    6A80: C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6  // ....|...........
    6A90: C6 C6 6C 38 10 00 00 00 00 00 00 C6 C6 C6 D6 D6  // ..l8............
    6AA0: D6 FE EE C6 C6 00 00 00 00 00 00 C6 C6 C6 6C 38  // ..............l8
    6AB0: 38 6C C6 C6 C6 00 00 00 00 00 00 66 66 66 66 66  // 8l.........fffff
    6AC0: 3C 18 18 18 3C 00 00 00 00 00 00 FE C6 86 0C 18  // <...<...........
    6AD0: 30 60 C2 C6 FE 00 00 00 00 00 00 7C 60 60 60 60  // 0`.........|````
    6AE0: 60 60 60 60 7C 00 00 00 00 00 00 00 00 80 C0 60  // ````|..........`
    6AF0: 30 18 0C 06 02 00 00 00 00 00 00 7C 0C 0C 0C 0C  // 0..........|....
    6B00: 0C 0C 0C 0C 7C 00 00 00 00 00 10 38 6C C6 00 00  // ....|......8l...
    6B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B20: 00 00 00 00 00 00 FF 00 00 00 18 18 18 0C 00 00  // ................
    6B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 0C  // ..............x.
    6B40: 7C CC CC DC 76 00 00 00 00 00 00 E0 60 60 7C 66  // |...v.......``|f
    6B50: 66 66 66 66 FC 00 00 00 00 00 00 00 00 00 7C C6  // ffff..........|.
    6B60: C0 C0 C0 C6 7C 00 00 00 00 00 00 1C 0C 0C 7C CC  // ....|.........|.
    6B70: CC CC CC CC 7E 00 00 00 00 00 00 00 00 00 7C C6  // ....~.........|.
    6B80: C6 FE C0 C6 7C 00 00 00 00 00 00 1C 36 30 30 FC  // ....|.......600.
    6B90: 30 30 30 30 78 00 00 00 00 00 00 00 00 00 76 CE  // 0000x.........v.
    6BA0: C6 C6 CE 76 06 C6 7C 00 00 00 00 E0 60 60 7C 66  // ...v..|.....``|f
    6BB0: 66 66 66 66 E6 00 00 00 00 00 00 18 18 00 38 18  // ffff..........8.
    6BC0: 18 18 18 18 3C 00 00 00 00 00 00 0C 0C 00 1C 0C  // ....<...........
    6BD0: 0C 0C 0C 0C CC CC 78 00 00 00 00 E0 60 60 66 66  // ......x.....``ff
    6BE0: 6C 78 6C 66 E6 00 00 00 00 00 00 18 18 18 18 18  // lxlf............
    6BF0: 18 18 18 18 1C 00 00 00 00 00 00 00 00 00 6C FE  // ..............l.
    6C00: D6 D6 C6 C6 C6 00 00 00 00 00 00 00 00 00 DC 66  // ...............f
    6C10: 66 66 66 66 66 00 00 00 00 00 00 00 00 00 7C C6  // fffff.........|.
    6C20: C6 C6 C6 C6 7C 00 00 00 00 00 00 00 00 00 DC 66  // ....|..........f
    6C30: 66 66 66 7C 60 60 F0 00 00 00 00 00 00 00 76 CC  // fff|``........v.
    6C40: CC CC CC 7C 0C 0C 1E 00 00 00 00 00 00 00 DC 66  // ...|...........f
    6C50: 60 60 60 60 F0 00 00 00 00 00 00 00 00 00 7C C6  // ````..........|.
    6C60: C0 7C 06 C6 7C 00 00 00 00 00 00 30 30 30 FC 30  // .|..|......000.0
    6C70: 30 30 30 36 1C 00 00 00 00 00 00 00 00 00 CC CC  // 0006............
    6C80: CC CC CC CC 76 00 00 00 00 00 00 00 00 00 C6 C6  // ....v...........
    6C90: C6 C6 6C 38 10 00 00 00 00 00 00 00 00 00 C6 C6  // ..l8............
    6CA0: D6 D6 D6 FE 6C 00 00 00 00 00 00 00 00 00 C6 C6  // ....l...........
    6CB0: 6C 38 6C C6 C6 00 00 00 00 00 00 00 00 00 C6 C6  // l8l.............
    6CC0: C6 C6 CE 76 06 C6 7C 00 00 00 00 00 00 00 FE 86  // ...v..|.........
    6CD0: 0C 18 30 62 FE 00 00 00 00 00 00 0E 18 18 18 70  // ..0b...........p
    6CE0: 18 18 18 18 0E 00 00 00 00 00 00 18 18 18 18 00  // ................
    6CF0: 18 18 18 18 18 00 00 00 00 00 00 70 18 18 18 0E  // ...........p....
    6D00: 18 18 18 18 70 00 00 00 00 00 00 76 DC 00 00 00  // ....p......v....
    6D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 38  // ...............8
    6D20: 38 6C 6C FE 00 00 00 00 00 00 00 3C 66 C0 C0 C0  // 8ll........<f...
    6D30: C6 66 3C 18 0C CC 38 00 00 00 00 C6 00 00 C6 C6  // .f<...8.........
    6D40: C6 C6 C6 CE 76 00 00 00 00 00 0C 18 30 00 7C C6  // ....v.......0.|.
    6D50: C6 FE C0 C6 7C 00 00 00 00 00 30 78 CC 00 78 0C  // ....|.....0x..x.
    6D60: 7C CC CC DC 76 00 00 00 00 00 00 CC 00 00 78 0C  // |...v.........x.
    6D70: 7C CC CC DC 76 00 00 00 00 00 60 30 18 00 78 0C  // |...v.....`0..x.
    6D80: 7C CC CC DC 76 00 00 00 00 00 38 6C 38 00 78 0C  // |...v.....8l8.x.
    6D90: 7C CC CC DC 76 00 00 00 00 00 00 00 00 7C C6 C0  // |...v........|..
    6DA0: C0 C6 7C 18 0C 6C 38 00 00 00 30 78 CC 00 7C C6  // ..|..l8...0x..|.
    6DB0: C6 FE C0 C6 7C 00 00 00 00 00 00 CC 00 00 7C C6  // ....|.........|.
    6DC0: C6 FE C0 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6  // ....|.....0...|.
    6DD0: C6 FE C0 C6 7C 00 00 00 00 00 00 66 00 00 38 18  // ....|......f..8.
    6DE0: 18 18 18 18 3C 00 00 00 00 00 18 3C 66 00 38 18  // ....<......<f.8.
    6DF0: 18 18 18 18 3C 00 00 00 00 00 00 00 00 00 38 18  // ....<.........8.
    6E00: 18 18 18 18 3C 00 00 00 00 00 C6 00 38 6C C6 C6  // ....<.......8l..
    6E10: C6 FE C6 C6 C6 00 00 00 00 38 6C 38 00 38 6C C6  // .........8l8.8l.
    6E20: C6 FE C6 C6 C6 00 00 00 00 0C 18 30 00 FE 60 60  // ...........0..``
    6E30: 7C 60 60 60 FE 00 00 00 00 00 00 00 00 66 DB 1B  // |```.........f..
    6E40: 7F D8 D8 DF 76 00 00 00 00 00 00 7E D8 D8 D8 D8  // ....v......~....
    6E50: FE D8 D8 D8 DE 00 00 00 00 00 30 78 CC 00 7C C6  // ..........0x..|.
    6E60: C6 C6 C6 C6 7C 00 00 00 00 00 00 C6 00 00 7C C6  // ....|.........|.
    6E70: C6 C6 C6 C6 7C 00 00 00 00 00 30 18 0C 00 7C C6  // ....|.....0...|.
    6E80: C6 C6 C6 C6 7C 00 00 00 00 00 30 78 CC 00 C6 C6  // ....|.....0x....
    6E90: C6 C6 C6 CE 76 00 00 00 00 00 60 30 18 00 C6 C6  // ....v.....`0....
    6EA0: C6 C6 C6 CE 76 00 00 00 00 00 18 00 3C 18 18 18  // ....v.......<...
    6EB0: 18 18 18 18 3C 00 00 00 00 00 C6 00 7C C6 C6 C6  // ....<.......|...
    6EC0: C6 C6 C6 C6 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6  // ....|...........
    6ED0: C6 C6 C6 C6 7C 00 00 00 00 00 00 18 18 7C C6 C0  // ....|........|..
    6EE0: C0 C6 7C 18 18 00 00 00 00 00 38 6C 60 60 F0 60  // ..|.......8l``.`
    6EF0: 60 60 66 F6 6C 00 00 00 00 00 66 66 66 66 3C 18  // ``f.l.....ffff<.
    6F00: 7E 18 3C 18 18 00 00 00 00 00 00 3E 63 63 30 1C  // ~.<........>cc0.
    6F10: 06 63 63 3E 00 1C 00 00 00 00 00 00 00 00 3E 63  // .cc>..........>c
    6F20: 38 0E 63 3E 00 1C 00 00 00 00 0C 18 30 00 78 0C  // 8.c>........0.x.
    6F30: 7C CC CC DC 76 00 00 00 00 00 0C 18 30 00 38 18  // |...v.......0.8.
    6F40: 18 18 18 18 3C 00 00 00 00 00 0C 18 30 00 7C C6  // ....<.......0.|.
    6F50: C6 C6 C6 C6 7C 00 00 00 00 00 18 30 60 00 CC CC  // ....|......0`...
    6F60: CC CC CC DC 76 00 00 00 00 00 00 76 DC 00 BC 66  // ....v......v...f
    6F70: 66 66 66 66 E6 00 00 00 00 00 76 DC 00 C6 C6 E6  // ffff......v.....
    6F80: F6 DE CE C6 C6 00 00 00 00 00 21 1E 00 1E 33 60  // ..........!...3`
    6F90: 60 67 63 33 1D 00 00 00 00 00 42 3C 00 3B 66 66  // `gc3......B<.;ff
    6FA0: 66 3E 06 66 3C 00 00 00 00 00 00 30 30 00 30 30  // f>.f<......00.00
    6FB0: 30 60 C6 C6 7C 00 00 00 00 00 00 00 00 00 00 00  // 0`..|...........
    6FC0: 7E 60 60 60 00 00 00 00 00 00 00 00 00 00 00 00  // ~```............
    6FD0: 7E 06 06 06 00 00 00 00 00 00 60 60 62 66 6C 18  // ~.........``bfl.
    6FE0: 30 60 DC 36 0C 18 3E 00 00 00 60 60 62 66 6C 18  // 0`.6..>...``bfl.
    6FF0: 36 6E DE 36 7E 06 06 00 00 00 00 18 18 00 18 18  // 6n.6~...........
    7000: 3C 3C 3C 3C 18 00 00 00 00 00 00 00 00 00 36 6C  // <<<<..........6l
    7010: D8 6C 36 00 00 00 00 00 00 00 00 00 00 00 D8 6C  // .l6............l
    7020: 36 6C D8 00 00 00 00 00 00 11 44 11 44 11 44 11  // 6l........D.D.D.
    7030: 44 11 44 11 44 11 44 11 44 AA 55 AA 55 AA 55 AA  // D.D.D.D.D.U.U.U.
    7040: 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD  // U.U.U.U.U.w.w.w.
    7050: 77 DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18  // w.w.w.w.w.......
    7060: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7070: F8 18 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // ................
    7080: F8 18 18 18 18 18 18 18 18 36 36 36 36 36 36 36  // .........6666666
    7090: F6 36 36 36 36 36 36 36 36 00 00 00 00 00 00 00  // .66666666.......
    70A0: FE 36 36 36 36 36 36 36 36 00 00 00 00 00 F8 18  // .66666666.......
    70B0: F8 18 18 18 18 18 18 18 18 36 36 36 36 36 F6 06  // .........66666..
    70C0: F6 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // .666666666666666
    70D0: 36 36 36 36 36 36 36 36 36 00 00 00 00 00 FE 06  // 666666666.......
    70E0: F6 36 36 36 36 36 36 36 36 36 36 36 36 36 F6 06  // .6666666666666..
    70F0: FE 00 00 00 00 00 00 00 00 36 36 36 36 36 36 36  // .........6666666
    7100: FE 00 00 00 00 00 00 00 00 18 18 18 18 18 F8 18  // ................
    7110: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7120: F8 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7130: 1F 00 00 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    7140: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7150: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7160: 1F 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    7170: FF 00 00 00 00 00 00 00 00 18 18 18 18 18 18 18  // ................
    7180: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 1F 18  // ................
    7190: 1F 18 18 18 18 18 18 18 18 36 36 36 36 36 36 36  // .........6666666
    71A0: 37 36 36 36 36 36 36 36 36 36 36 36 36 36 37 30  // 7666666666666670
    71B0: 3F 00 00 00 00 00 00 00 00 00 00 00 00 00 3F 30  // ?.............?0
    71C0: 37 36 36 36 36 36 36 36 36 36 36 36 36 36 F7 00  // 76666666666666..
    71D0: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    71E0: F7 36 36 36 36 36 36 36 36 36 36 36 36 36 37 30  // .666666666666670
    71F0: 37 36 36 36 36 36 36 36 36 00 00 00 00 00 FF 00  // 766666666.......
    7200: FF 00 00 00 00 00 00 00 00 36 36 36 36 36 F7 00  // .........66666..
    7210: F7 36 36 36 36 36 36 36 36 18 18 18 18 18 FF 00  // .66666666.......
    7220: FF 00 00 00 00 00 00 00 00 36 36 36 36 36 36 36  // .........6666666
    7230: FF 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    7240: FF 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    7250: FF 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // .666666666666666
    7260: 3F 00 00 00 00 00 00 00 00 18 18 18 18 18 1F 18  // ?...............
    7270: 1F 00 00 00 00 00 00 00 00 00 00 00 00 00 1F 18  // ................
    7280: 1F 18 18 18 18 18 18 18 18 00 00 00 00 00 00 00  // ................
    7290: 3F 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // ?666666666666666
    72A0: FF 36 36 36 36 36 36 36 36 18 18 18 18 18 FF 18  // .66666666.......
    72B0: FF 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    72C0: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    72D0: 1F 18 18 18 18 18 18 18 18 FF FF FF FF FF FF FF  // ................
    72E0: FF FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    72F0: 00 FF FF FF FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0  // ................
    7300: F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F  // ................
    7310: 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF FF FF FF  // ................
    7320: FF 00 00 00 00 00 00 00 00 00 00 00 00 76 DC D8  // .............v..
    7330: D8 D8 D8 DC 76 00 00 00 00 00 00 78 CC CC D8 FC  // ....v......x....
    7340: C6 C6 C6 C6 CC 00 00 00 00 00 00 FE 66 62 60 60  // ............fb``
    7350: 60 60 60 60 60 00 00 00 00 00 00 00 00 00 FE 6C  // `````..........l
    7360: 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE C6 62 30 18  // lllll........b0.
    7370: 18 30 62 C6 FE 00 00 00 00 00 00 00 00 00 7E D8  // .0b...........~.
    7380: CC CC CC D8 70 00 00 00 00 00 00 00 00 66 66 66  // ....p........fff
    7390: 66 66 7C 60 C0 80 00 00 00 00 00 00 00 00 76 DC  // ff|`..........v.
    73A0: 18 18 18 18 18 00 00 00 00 00 00 FE 38 38 6C C6  // ............88l.
    73B0: C6 6C 38 38 FE 00 00 00 00 00 00 00 38 6C C6 C6  // .l88........8l..
    73C0: FE C6 C6 6C 38 00 00 00 00 00 00 38 6C C6 C6 C6  // ...l8......8l...
    73D0: C6 6C 6C 6C EE 00 00 00 00 00 00 3E 60 60 3C 66  // .lll.......>``<f
    73E0: C6 C6 C6 CC 78 00 00 00 00 00 00 00 00 00 7E DB  // ....x.........~.
    73F0: DB DB 7E 00 00 00 00 00 00 00 00 02 06 7C CE DE  // ..~..........|..
    7400: F6 F6 7C 60 C0 00 00 00 00 00 00 00 1C 30 60 60  // ..|`.........0``
    7410: 7C 60 60 30 1C 00 00 00 00 00 00 7C C6 C6 C6 C6  // |``0.......|....
    7420: C6 C6 C6 C6 C6 00 00 00 00 00 00 00 00 FE 00 00  // ................
    7430: FE 00 00 FE 00 00 00 00 00 00 00 00 00 18 18 7E  // ...............~
    7440: 18 18 00 00 7E 00 00 00 00 00 00 30 18 0C 06 0C  // ....~......0....
    7450: 18 30 00 00 7E 00 00 00 00 00 00 0C 18 30 60 30  // .0..~........0`0
    7460: 18 0C 00 00 7E 00 00 00 00 00 00 00 00 0C 1E 1A  // ....~...........
    7470: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7480: 18 18 18 58 78 30 00 00 00 00 00 00 00 18 18 00  // ...Xx0..........
    7490: 7E 00 18 18 00 00 00 00 00 00 00 00 00 00 00 76  // ~..............v
    74A0: DC 00 76 DC 00 00 00 00 00 00 00 78 CC CC 78 00  // ..v........x..x.
    74B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    74C0: 18 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    74D0: 00 18 00 00 00 00 00 00 00 00 00 1F 18 18 18 18  // ................
    74E0: 18 D8 D8 78 38 18 00 00 00 00 00 D8 6C 6C 6C 6C  // ...x8.......llll
    74F0: 6C 00 00 00 00 00 00 00 00 00 00 70 D8 18 30 60  // l..........p..0`
    7500: F8 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 7E  // ..............~~
    7510: 7E 7E 7E 7E 00 00 00 00 00 00 00 00 00 00 00 00  // ~~~~............
    7520: 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 00 24  // ...............$
    7530: 66 FF 66 24 00 00 00 00 00 00 2F 00 00 00 01 03  // f.f$....../.....
    7540: 06 0C 18 30 60 C0 80 00 00 00 00 30 00 00 7E C3  // ...0`......0..~.
    7550: C3 C3 DB DB C3 C3 C3 7E 00 00 00 00 4D 00 00 C3  // .......~....M...
    7560: C3 E7 FF FF DB DB C3 C3 C3 00 00 00 00 54 00 00  // .............T..
    7570: FF 99 18 18 18 18 18 18 18 3C 00 00 00 00 56 00  // .........<....V.
    7580: 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00 00 00 00 57  // ........f<.....W
    7590: 00 00 C3 C3 C3 C3 DB DB DB DB FF 66 00 00 00 00  // ...........f....
    75A0: 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00  // X.....f<<f......
    75B0: 00 59 00 00 C3 C3 C3 C3 66 3C 18 18 18 3C 00 00  // .Y......f<...<..
    75C0: 00 00 5C 00 00 00 80 C0 60 30 18 0C 06 03 01 00  // ..\.....`0......
    75D0: 00 00 00 6D 00 00 00 00 00 66 FF DB DB DB C3 C3  // ...m.....f......
    75E0: 00 00 00 00 76 00 00 00 00 00 C3 C3 C3 C3 66 3C  // ....v.........f<
    75F0: 18 00 00 00 00 77 00 00 00 00 00 C3 C3 DB DB DB  // .....w..........
    7600: FF 66 00 00 00 00 00 00 C1 64 C3 0B DB 74 03 E9  // .f.......d...t..
    7610: 46 01 57 32 C0 B9 40 00 F3 AA 5F BB 51 92 26 89  // F.W2..@..._.Q.&.
    7620: 1D 26 8C 4D 02 2E 8E 1E E5 03 57 BE 49 04 B9 1E  // .&.M......W.I...
    7630: 00 83 C7 04 FC 8A 04 26 88 05 46 47 E2 F7 5F A0  // .......&..FG.._.
    7640: 84 04 FE C0 26 88 45 22 A1 85 04 26 89 45 23 57  // ....&.E"...&.E#W
    7650: E8 9C 1B 5F 26 88 5D 25 26 88 7D 26 8A 1E 49 04  // ..._&.]%&.}&..I.
    7660: E8 FC 05 74 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A  // ...t......2.....
    7670: 87 29 92 32 E4 0A C0 74 01 40 26 89 45 27 2E 8A  // .).2...t.@&.E'..
    7680: 87 2A 92 26 88 45 29 A1 85 04 8A 16 84 04 FE C2  // .*.&.E).........
    7690: F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E  // ....=..~...=^.~.
    76A0: B2 02 3D 90 01 7E 07 B2 03 3D E0 01 7E 00 26 88  // ..=..~...=..~.&.
    76B0: 55 2A 8A 26 87 04 8A C4 24 01 C0 E0 04 80 E4 02  // U*.&....$.......
    76C0: D0 E4 0A E0 80 F4 10 A0 89 04 24 0A 0A E0 E8 94  // ..........$.....
    76D0: 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C  // ....0.B.$.......
    76E0: 01 26 88 45 2D B0 03 26 88 45 31 E8 77 08 1E 06  // .&.E-..&.E1.w...
    76F0: 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE 74 34 26 C5  // 2.........;.t4&.
    7700: 77 04 8C D9 0B F1 74 03 80 CA 10 26 C5 77 0C 8C  // w.....t....&.w..
    7710: D9 0B F1 74 03 80 CA 08 26 C5 77 08 8C D9 0B F1  // ...t....&.w.....
    7720: 74 03 80 CA 04 26 C5 77 10 8C D9 0B F1 74 03 80  // t....&.w.....t..
    7730: CA 01 07 1F 26 88 55 32 B0 03 BA C4 03 E8 E4 04  // ....&.U2........
    7740: 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81 E2 04 04 25  // ...............%
    7750: 03 03 0B C2 26 89 45 2B 8B EC C6 46 1A 1B C3 0A  // ....&.E+...F....
    7760: C0 74 0F FE C8 74 36 FE C8 74 56 8B EC C6 46 1A  // .t...t6..tV...F.
    7770: 00 C3 B8 20 00 F6 C1 01 74 03 83 C0 60 F6 C1 02  // ... ....t...`...
    7780: 74 03 83 C0 3A F6 C1 04 74 03 05 03 03 83 C0 3F  // t...:...t......?
    7790: C1 E8 06 8B EC 89 46 0E C6 46 1A 1C C3 8B FB 83  // ......F..F......
    77A0: C7 20 F6 C1 01 74 03 E8 85 00 F6 C1 02 74 03 E8  // . ...t.......t..
    77B0: EF 00 F6 C1 04 74 03 E8 F8 01 8B EC C6 46 1A 1C  // .....t.......F..
    77C0: C3 F6 C1 01 74 06 E8 D9 14 E8 25 01 F6 C1 02 74  // ....t.....%....t
    77D0: 03 E8 85 01 F6 C1 04 74 03 E8 12 02 EB DC 8A C4  // .......t........
    77E0: EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03  // .B....J....k....
    77F0: B9 15 00 32 E4 EC 87 EA 8A C4 EE 42 EC AA FE C4  // ...2.......B....
    7800: 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3 26 8A 05 88  // J........ ..&...
    7810: 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3  // .GF...&.%.G.....
    7820: B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C  // .....&..G.......
    7830: FA 51 57 8B C7 2B C3 26 89 07 8B F7 E8 0A 04 EC  // .QW..+.&........
    7840: 26 88 44 01 26 89 54 41 B2 CE EC 26 88 44 02 B2  // &.D.&.TA...&.D..
    7850: CC EC 26 88 44 09 B2 CA EC 26 88 44 04 B2 C4 EC  // ..&.D....&.D....
    7860: 26 88 04 83 C7 05 B9 04 00 B4 01 E8 70 FF 26 8A  // &...........p.&.
    7870: 04 EE 8B FE 83 C7 0A 26 8B 54 41 32 E4 B9 19 00  // .......&.TA2....
    7880: E8 5B FF 26 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9  // .[.&.D..._...2..
    7890: 09 00 E8 49 FF 26 8A 44 02 EE 5F 59 83 C7 60 9D  // ...I.&.D.._Y..`.
    78A0: C3 9C FA 8B C7 2B C3 26 89 47 02 51 57 2E 8E 1E  // .....+.&.G.QW...
    78B0: E5 03 A0 10 04 24 30 AA BE 49 04 B9 1E 00 F3 A4  // .....$0..I......
    78C0: BE 84 04 B1 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14  // ................
    78D0: 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1  // ......t......|..
    78E0: 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D  // .........._Y..:.
    78F0: C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05  // ...&.?....Q.....
    7900: BA C4 03 B8 00 01 EF B0 01 B9 04 00 E8 07 FF 47  // ...............G
    7910: B2 C2 26 8A 44 09 EE B2 C4 B8 00 03 EF 26 8A 04  // ..&.D........&..
    7920: EE 26 8B 54 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE  // .&.TA......2....
    7930: 26 8A 44 01 EE 80 C2 06 26 8A 44 04 EE EC B1 15  // &.D.....&.D.....
    7940: 32 E4 E8 DB FE B0 20 EE B1 09 32 C0 B2 CE E8 C5  // 2..... ...2.....
    7950: FE 26 8A 44 02 EE 59 9D C3 9C FA 26 8B 7F 02 03  // .&.D..Y....&....
    7960: FB 06 51 2E 8E 1E E5 03 26 8A 05 80 26 10 04 CF  // ..Q.....&...&...
    7970: 08 06 10 04 47 BE 49 04 B9 1E 00 E8 8E FE BE 84  // ....G.I.........
    7980: 04 B1 07 E8 86 FE BE A8 04 B1 04 E8 7E FE BE 14  // ............~...
    7990: 00 B1 04 E8 76 FE BE 74 00 B1 04 E8 6E FE BE 7C  // ....v..t....n..|
    79A0: 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8 5E FE 59 07  // ....f.......^.Y.
    79B0: 9D C3 9C FA 8B C7 2B C3 26 89 47 04 E8 A6 05 B2  // ......+.&.G.....
    79C0: C0 B0 34 EE 42 EC 26 88 05 BA C8 03 EC 26 88 45  // ..4.B.&......&.E
    79D0: 01 50 4A 4A EC 26 88 45 02 83 C7 03 B9 00 03 42  // .PJJ.&.E.......B
    79E0: 32 C0 EE 42 42 EC AA E2 FC 58 4A EE 9D C3 9C FA  // 2..BB....XJ.....
    79F0: 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A  // &.w....l....4.&.
    7A00: 04 EE BA C6 03 26 8A 44 02 EE 56 42 42 83 C6 03  // .....&.D..VBB...
    7A10: 32 C0 EE 42 B9 00 03 26 8A 04 EE 46 E2 F9 5E FE  // 2..B...&...F..^.
    7A20: CA 26 8A 44 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4  // .&.D........$...
    7A30: B2 C2 EE C3 E8 6B 12 B2 C0 86 C4 EE EB 00 EB 00  // .....k..........
    7A40: 86 C4 EE EB 00 EB 00 B0 20 EE C3 50 8A E0 80 E4  // ........ ..P....
    7A50: 80 80 26 87 04 7F 08 26 87 04 24 7F 8A E0 3C 07  // ..&....&..$...<.
    7A60: 7E 1E 26 F6 47 33 01 75 17 3C 23 74 13 3C 32 74  // ~.&.G3.u.<#t.<2t
    7A70: 0F 3C 33 74 0B B4 03 26 F6 47 09 01 75 02 B4 07  // .<3t...&.G..u...
    7A80: 88 26 49 04 BA B4 03 80 0E 87 04 02 26 F6 47 09  // .&I.........&.G.
    7A90: 01 74 07 B2 D4 80 26 87 04 FD 89 16 63 04 C7 06  // .t....&.....c...
    7AA0: 4E 04 00 00 C6 06 62 04 00 B9 08 00 BF 50 04 FC  // N.....b......P..
    7AB0: 06 1E 07 33 C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04  // ...3....&..2..J.
    7AC0: 26 8A 47 01 A2 84 04 26 8A 47 02 A3 85 04 26 8B  // &.G....&.G....&.
    7AD0: 47 03 A3 4C 04 26 8B 47 14 86 C4 A3 60 04 58 C3  // G..L.&.G....`.X.
    7AE0: 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29 75 08 32 E4  // R2.3.......)u.2.
    7AF0: 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E 8E 1E E5 03  // 3.....Z...`.....
    7B00: 2E 83 0E EF 03 00 75 6E 80 3E 00 05 01 74 67 C6  // ......un.>...tg.
    7B10: 06 00 05 01 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85  // ......b.2.......
    7B20: 50 04 8A 3E 62 04 50 32 F6 8A 0E 84 04 32 ED 41  // P..>b.P2.....2.A
    7B30: 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51  // Q..J.2......)u=Q
    7B40: 52 89 95 50 04 B4 08 E8 7C D3 0A C0 75 02 B0 20  // R..P....|...u.. 
    7B50: 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A FE C2 59 E2  // 3.2.....)u.Z..Y.
    7B60: DE FE C6 59 E2 CA E8 77 FF 32 C0 A2 00 05 58 89  // ...Y...w.2....X.
    7B70: 85 50 04 E8 AF 03 61 1F 07 CF 5A 59 59 B0 FF EB  // .P....a...ZYY...
    7B80: EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E 06 E7 03 5A  // .R*.8.}.2......Z
    7B90: C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA BA C4 03 B8  // ................
    7BA0: 02 0F EF B4 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6  // ......m...2.....
    7BB0: F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53  // ......Ku.2..W..S
    7BC0: 8A 1E 62 04 0B C0 75 04 0A DB 74 03 E8 35 03 5B  // ..b...u...t..5.[
    7BD0: 8B F8 2B D1 81 C2 01 01 8A C3 32 E4 C3 8A C6 32  // ..+.......2....2
    7BE0: F6 2B EA 0A DB 74 2A 2A C3 F6 26 85 04 8B C8 52  // .+...t**..&....R
    7BF0: B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B  // ... .......Z....
    7C00: C1 8B CA F3 A4 03 F5 03 FD 48 75 F5 1F E8 81 FF  // .........Hu.....
    7C10: C3 8A D8 EB F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A  // ...........B.$..
    7C20: C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E  // ..J....B...J....
    7C30: 8E 1E E5 03 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E  // ......c.........
    7C40: 1E E5 03 8B 16 63 04 1F C3 50 BA CC 03 EC B2 D4  // .....c...P......
    7C50: A8 01 75 02 B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E  // ..u...X.........
    7C60: 2E 8E 1E E5 03 80 3E 49 04 03 74 13 80 3E 49 04  // ......>I..t..>I.
    7C70: 02 74 0C 80 3E 49 04 01 74 05 80 3E 49 04 00 1F  // .t..>I..t..>I...
    7C80: C3 50 2E 8E 06 E9 03 A0 10 04 24 30 3C 30 74 05  // .P........$0<0t.
    7C90: 2E 8E 06 EB 03 58 0B C0 74 03 E8 E1 01 03 06 4E  // .....X..t......N
    7CA0: 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B  // .....+.2...J....
    7CB0: F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38  // ...........u...8
    7CC0: F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0  // .~..............
    7CD0: 3A 16 4A 04 74 06 06 1F E8 1B 00 C3 06 1F E8 40  // :.J.t..........@
    7CE0: 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0  // ..............+.
    7CF0: 06 1F E8 01 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B  // ......S..*.2.2.+
    7D00: EA 2B EA E3 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE  // .+..............
    7D10: CC 75 F4 58 B0 20 8A CA F3 AB 03 FD FE CB 75 F6  // .u.X. ........u.
    7D20: C3 53 8A C6 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B  // .S..*.t.......X.
    7D30: C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E  // ..... ..........
    7D40: 1E EB 03 8A C3 22 DF D3 E3 A8 80 74 03 30 1C C3  // .....".....t.0..
    7D50: F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A FC E8 0C 00  // ...4"...........
    7D60: 2E 8E 1E EB 03 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2  // ........."...(..
    7D70: F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05  // ...t............
    7D80: 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE  // ................
    7D90: 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06  // ................
    7DA0: EB 03 8B C1 E8 86 00 75 02 8A DE 03 F0 E8 24 00  // .......u......$.
    7DB0: C3 FC 8A D8 2E 8E 06 EB 03 8A C1 8A E6 E8 6D 00  // ..............m.
    7DC0: 75 02 8A DE F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0  // u.............+.
    7DD0: E8 01 00 C3 8A CE 2A CB E3 2C 51 8A CA 56 57 D1  // ......*..,Q..VW.
    7DE0: E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00  // .........+.+....
    7DF0: 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03  //  ... ........_^.
    7E00: F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3  // ...Y........W...
    7E10: AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3  // .......+.... ...
    7E20: AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE C3 E8 B0 00  // ....._....u.....
    7E30: 81 C2 01 01 2B D1 38 F3 76 02 32 DB 51 B1 02 D2  // ....+.8.v.2.Q...
    7E40: E6 D2 E3 59 32 ED BD 50 00 80 3E 49 04 06 74 04  // ...Y2..P..>I..t.
    7E50: D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB  // ...........P....
    7E60: C3 52 53 8A DF 32 FF D1 E3 8B 87 50 04 E8 0E 00  // .RS..2.....P....
    7E70: 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B  // P...L...[..[Z.R.
    7E80: D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8  // ..J...2.....Z...
    7E90: 83 E5 0F 2E 8A A6 3E 7E 8B E8 C1 ED 04 83 E5 0F  // ......>~........
    7EA0: 2E 8A 86 3E 7E C3 00 03 0C 0F 30 33 3C 3F C0 C3  // ...>~.....03<?..
    7EB0: CC CF F0 F3 FC FF 26 8B 04 86 E0 BA 00 80 F6 C4  // ......&.........
    7EC0: C0 74 02 0A D6 D0 EE C1 E0 02 75 F2 88 56 00 45  // .t........u..V.E
    7ED0: C3 8B 16 63 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3  // ...c............
    7EE0: 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2  // R.....&J....2...
    7EF0: 5A C3 53 8A DF 32 FF D1 E3 8B 87 50 04 D1 EB E8  // Z.S..2.....P....
    7F00: 02 00 5B C3 52 8B D0 32 F6 52 8A C4 F6 26 85 04  // ..[.R..2.R...&..
    7F10: F7 26 4A 04 5A 03 C2 0A DB 74 08 03 06 4C 04 FE  // .&J.Z....t...L..
    7F20: CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03  // .u.Z.R...J...2..
    7F30: C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF  // .....N..........
    7F40: 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A  // Z....&J.........
    7F50: FF 74 0A 8A C7 32 E4 F7 26 4C 04 03 F8 80 E1 07  // .t...2..&L......
    7F60: B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0  // ................
    7F70: 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3 C4 3E A8 04  //  .......2....>..
    7F80: 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A  // &.}......S......
    7F90: E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF  // ..............U.
    7FA0: B0 0E E8 7F FC 3C AA 74 0D B0 0F E8 76 FC 3C 55  // .....<.t....v.<U
    7FB0: 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF  // t.2.[...........
    7FC0: B0 01 0A C0 5B C3 8A EE 8A 36 85 04 06 1F 0A DB  // ....[....6......
    7FD0: 74 25 8A C5 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02  // t%..*.....R2....
    7FE0: 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59  // ....+.Q....+.+.Y
    7FF0: E2 F4 5A E8 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B  // ..Z.............
    8000: C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1  // .....2..........
    8010: 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E E5  // +.....+.Nu......
    8020: 03 89 0E 60 04 8A C5 24 60 A8 20 74 06 B9 00 1E  // ...`...$`. t....
    8030: E9 94 00 F6 06 87 04 01 0F 85 8B 00 80 3E 49 04  // .............>I.
    8040: 07 74 06 E8 19 FC 74 01 C3 F6 06 87 04 08 74 03  // .t....t.......t.
    8050: CD 42 C3 8A 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A  // .B..6......8.~..
    8060: C9 74 64 8A E9 8A CE FE C9 EB 5C 38 D1 74 58 8A  // .td.......\8.tX.
    8070: CE 80 FD 03 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9  // ....|........I..
    8080: 03 7E 44 8A E1 2A E5 0A E4 75 0A 38 CA 74 38 FE  // .~D..*...u.8.t8.
    8090: CA 38 CA 74 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02  // .8.t2....8.~....
    80A0: 7E 12 80 FD 02 7F C8 80 FC 03 7D BF 8A D6 FE CA  // ~.........}.....
    80B0: 38 D1 74 13 8A CE FE C9 FE C9 8A E9 2A EC 80 FE  // 8.t.........*...
    80C0: 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E  // ................
    80D0: E5 03 A2 62 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04  // ...b.2....&L..N.
    80E0: 8B C8 E8 7A FB 74 07 80 3E 49 04 07 77 02 D1 F9  // ...z.t..>I..w...
    80F0: B4 0C E8 DC FD D1 E6 8B 84 50 04 E8 27 FE C3 2E  // .........P..'...
    8100: 8E 1E E5 03 8A 26 49 04 E8 7E 9C 74 07 C7 06 50  // .....&I..~.t...P
    8110: 04 00 00 C3 E8 48 FB 74 0B 80 FC 07 74 06 77 08  // .....H.t....t.w.
    8120: E8 77 FC C3 E8 9F FB C3 80 FC 13 7C 03 74 1F C3  // .w.........|.t..
    8130: E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6  // .N..........J.R.
    8140: 26 85 04 F7 E5 8B F7 03 F0 5A E8 90 FA C3 E8 30  // &........Z.....0
    8150: FA 8A D8 8B C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04  // ......g....R..J.
    8160: C1 E5 03 F7 26 85 04 F7 E5 8B F7 03 F0 5A E8 55  // ....&........Z.U
    8170: FE C3 2E 8E 1E E5 03 8A 26 49 04 E8 E1 FA 74 0C  // ........&I....t.
    8180: 80 FC 07 74 07 77 40 80 FC 03 7F 04 E8 53 FB C3  // ...t.w@......S..
    8190: E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8  // ................
    81A0: 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26 85 04 F7 26  // ..+>J....R.&...&
    81B0: 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5  // J......+.Z..J...
    81C0: 03 F7 DD E8 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8  // ..........|.t...
    81D0: AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E  // .............R..
    81E0: 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7  // J..&....+...+.Z.
    81F0: DD E8 E9 F9 C3 2E 8E 1E E5 03 2E 8E 06 EB 03 E8  // ................
    8200: 5D FA 74 11 80 3E 49 04 07 7C 18 2E 8E 06 E9 03  // ].t..>I..|......
    8210: 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B 07 8B EC 89  // t.....I...&.....
    8220: 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3  // F...P.........+.
    8230: 8B EC 80 3E 49 04 06 75 1F B9 04 00 26 8A 04 88  // ...>I..u....&...
    8240: 46 00 45 26 8A 84 00 20 88 46 00 45 83 C6 50 E2  // F.E&... .F.E..P.
    8250: EB B8 00 02 B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC  // ..............V.
    8260: 81 C6 00 20 E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B  // ... .O.........+
    8270: EB C4 3E 0C 01 32 F6 80 FB 0E 75 09 26 83 7D FE  // ..>..2....u.&.}.
    8280: 10 75 02 B6 80 16 1F 8B F5 8B CB F6 C6 80 74 01  // .u............t.
    8290: 47 56 57 F3 A6 5F 5E 74 23 FE C0 03 FB F6 C6 80  // GVW.._^t#.......
    82A0: 74 01 47 FE CA 75 E2 FE CC 74 0F 2E 8E 1E E5 03  // t.G..u...t......
    82B0: C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0 8B E5 03 E3  // .>|.......2.....
    82C0: 8B EC 89 46 1A C3 80 3E 49 04 13 7C 05 75 02 EB  // ...F...>I..|.u..
    82D0: 5A C3 2E 8E 06 E7 03 E8 18 FC 8B F0 8B 1E 85 04  // Z...............
    82E0: 2B E3 8B EC B8 05 08 B9 05 00 BA CE 03 80 3E 49  // +.............>I
    82F0: 04 0F 72 1A F6 06 87 04 60 75 13 B4 0A F7 C6 01  // ..r.....`u......
    8300: 00 75 02 B4 05 B0 07 EF B8 05 18 B9 05 01 EF 51  // .u.............Q
    8310: 8B CB 26 8A 04 F6 D0 88 46 00 45 03 36 4A 04 E2  // ..&.....F.E.6J..
    8320: F1 58 EF B8 00 01 32 D2 E9 44 FF 2E 8E 06 E7 03  // .X....2..D......
    8330: A1 50 04 8B D0 32 F6 52 8A C4 32 E4 F7 26 4A 04  // .P...2.R..2..&J.
    8340: F7 26 85 04 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B  // .&..Z........+..
    8350: EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00  // .S.>J.O.........
    8360: 32 E4 26 8A 04 D0 E4 0A C0 74 03 80 CC 01 46 E2  // 2.&......t....F.
    8370: F1 88 66 00 45 03 F7 4B 75 E3 5B B8 00 01 32 D2  // ..f.E..Ku.[...2.
    8380: E9 EC FE 33 ED EB 03 BD 01 00 2E 8E 1E E5 03 2E  // ...3............
    8390: 8E 06 EB 03 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06  // .....&I....t....
    83A0: E9 03 80 FC 07 74 05 7C 3D E9 0B 02 8A E3 8B F0  // .....t.|=.......
    83B0: 8A DF 32 FF D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6  // ..2.....P....J..
    83C0: E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1  // .2.........t....
    83D0: 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED 75 03 F3 AB  // L.....u.....u...
    83E0: C3 AA 47 E2 FC C3 50 2E 8E 06 EB 03 A1 50 04 E8  // ..G...P......P..
    83F0: EE FA 8B F8 A0 50 04 8A 26 4A 04 8B E8 58 A8 80  // .....P..&J...X..
    8400: 74 08 24 7F C5 36 7C 00 EB 04 C5 36 0C 01 8A FC  // t.$..6|....6....
    8410: 32 E4 C1 E0 03 03 F0 80 FF 06 74 69 D1 E7 8A F3  // 2.........ti....
    8420: B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04  // .U...........P..
    8430: F6 C6 80 75 27 AC E8 55 FA 23 C3 AB AC E8 4E FA  // ...u'..U.#....N.
    8440: 23 C3 26 89 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE  // #.&......N..u...
    8450: 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA  // ...>.X.r........
    8460: 23 C3 26 31 05 AC E8 25 FA 23 C3 26 31 85 00 20  // #.&1...%.#.&1.. 
    8470: 83 C7 50 FE CA 75 E5 83 EE 08 81 EF 3E 01 58 E8  // ..P..u......>.X.
    8480: 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3 80 74 1F AC  // I......P.....t..
    8490: 26 30 05 AC 26 30 85 00 20 83 C7 50 FE CA 7F EF  // &0..&0.. ..P....
    84A0: 83 EE 08 81 EF 3F 01 58 E8 20 00 E2 DA C3 AC AA  // .....?.X. ......
    84B0: AC 26 88 85 FF 1F 83 C7 4F FE CA 7F F1 83 EE 08  // .&......O.......
    84C0: 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE C0 38 E0 72  // ..?.X........8.r
    84D0: 06 32 C0 81 C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0  // .2..............
    84E0: 32 F6 8B EA 66 0F B6 06 51 04 F6 E2 66 0F B7 16  // 2...f...Q...f...
    84F0: 4A 04 83 FA 64 75 03 BA 68 00 83 FA 5A 75 03 BA  // J...du..h...Zu..
    8500: 60 00 81 FA AF 00 75 03 BA B0 00 52 F7 E2 66 0F  // `.....u....R..f.
    8510: B7 F8 66 0F B6 06 50 04 66 03 F8 66 C1 CF 10 03  // ..f...P.f..f....
    8520: FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2  // .f.......f...Z..
    8530: 4A C1 E2 03 A0 50 04 50 C5 06 0C 01 03 F0 2E 8E  // J....P.P........
    8540: 06 E7 03 58 57 51 50 9C FC 8B CD E8 3B 00 B5 08  // ...XWQP.....;...
    8550: AC 8A E0 8A C7 D0 E4 73 02 8A C3 26 88 05 66 47  // .......s...&..fG
    8560: FE CD 75 EF 66 03 FA E2 E2 9D 58 59 5F 83 C7 08  // ..u.f.....XY_...
    8570: FE C0 38 E0 72 0E 51 32 C0 8B CD 49 03 FA 83 C7  // ..8.r.Q2...I....
    8580: 08 E2 F9 59 2B F5 E2 BC C3 06 52 33 C0 8E C0 66  // ...Y+.....R3...f
    8590: C1 C7 10 8B C7 66 C1 C7 10 E8 ED 97 74 16 38 E0  // .....f......t.8.
    85A0: 74 12 0F B6 D0 E8 63 C7 8A E0 66 C1 C7 10 8B F8  // t.....c...f.....
    85B0: 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF  // f...Z.....|.....
    85C0: 80 FC 62 0F 84 11 FF E8 01 00 C3 80 FC 11 75 06  // ..b...........u.
    85D0: 80 E3 80 80 CB 0F 50 53 8A DF 32 FF D1 E3 8B 97  // ......PS..2.....
    85E0: 50 04 5B 2E 8E 06 E7 03 E8 07 F9 8B F8 8B 2E 85  // P.[.............
    85F0: 04 58 32 F6 52 8B 36 4A 04 56 8A 26 85 04 C5 36  // .X2.R.6J.V.&...6
    8600: 0C 01 80 FC 0E 75 09 83 7C FE 10 75 03 B4 10 46  // .....u..|..u...F
    8610: F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F  // .........um.....
    8620: EF 5A 58 50 52 4A 8A E0 57 51 51 57 8B CD 32 C0  // .ZXPRJ..WQQW..2.
    8630: AA 03 FA E2 FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B  // ....._G..8.v.2..
    8640: CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0  // .I..G..Y..Y_....
    8650: 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA  // ....[KZQW...&.%.
    8660: 03 FB E2 F7 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B  // ...._G+.B;.v.3..
    8670: CD 49 03 FB 47 E2 FB 59 E2 DD BA CE 03 B8 03 00  // .I..G..Y........
    8680: EF B2 C4 B8 02 0F EF C3 B2 CE B8 03 18 EF EB BC  // ................
    8690: 2E 8E 1E E5 03 80 3E 63 04 B4 74 0B BA CC 03 EC  // ......>c..t.....
    86A0: A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A  // ..u..B.......u..
    86B0: E3 80 E4 1F 80 26 66 04 E0 08 26 66 04 E8 2D 00  // .....&f...&f..-.
    86C0: 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8 91 F5 74 19  // ..f... .......t.
    86D0: A0 66 04 24 DF 80 E3 01 74 02 0C 20 A2 66 04 24  // .f.$....t.. .f.$
    86E0: 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8 C3 53 50 80  // ......S...~..SP.
    86F0: E3 0F 8A FB D0 E3 81 E3 10 07 0A DF E8 60 F5 74  // .............`.t
    8700: 0E B4 00 8A C3 E8 2C F3 0B ED 74 03 26 88 1D 8A  // ......,...t.&...
    8710: C3 E8 0B 00 0B ED 74 04 26 88 5D 10 58 5B C3 8A  // ......t.&.].X[..
    8720: E0 1E 2E 8E 1E E5 03 80 3E 49 04 33 1F 7F 08 8A  // ........>I.3....
    8730: C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C FA E8 62 05  // ........0.....b.
    8740: B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74  // ...............t
    8750: 04 47 26 88 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D  // .G&.......... ..
    8760: C3 2E 8E 1E E5 03 8A 26 49 04 E8 F2 F4 74 0A 80  // .......&I....t..
    8770: FC 07 77 06 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74  // ..w.t........|.t
    8780: 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E  // L...............
    8790: E7 03 F6 C3 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6  // .....u........%.
    87A0: 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 08  // ......%...%.....
    87B0: FF EF C3 B8 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25  // ...............%
    87C0: B4 FF 88 25 EF B2 CE B8 03 00 EF EB E1 50 2E 8E  // ...%.........P..
    87D0: 06 E7 03 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58  // ....J..........X
    87E0: 26 88 05 C3 2E 8E 1E E5 03 8A 26 49 04 E8 6F F4  // &.........&I..o.
    87F0: 74 0F 80 FC 07 77 0B 74 08 E8 5F F5 8B EC 89 46  // t....w.t.._....F
    8800: 1A C3 80 FC 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E  // .....|.t)..5....
    8810: 8E 1E E7 03 BA CE 03 32 FF B8 04 03 EF D0 E7 8A  // .......2........
    8820: 1D 22 D9 74 03 80 CF 01 FE CC 7D F0 8B EC 88 7E  // .".t......}....~
    8830: 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E  // ...J............
    8840: 1E E7 03 8A 05 8B EC 88 46 1A C3 2E 8E 1E E5 03  // ........F.......
    8850: 8A 3E 62 04 8A CF D0 E1 32 ED BE 50 04 03 F1 8B  // .>b.....2..P....
    8860: 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06 EB 03 E8 EE  // ...I.<.vJ.......
    8870: F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03  // .u3..J..........
    8880: C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE  // .....N........A.
    8890: C2 38 DA 73 59 89 14 8B 16 63 04 B0 0E 8A E5 EF  // .8.sY....c......
    88A0: 8A E1 FE C0 EF C3 2E 8E 06 E9 03 80 F9 07 74 C3  // ..............t.
    88B0: E9 83 00 75 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84  // ...u.2...<.u.:6.
    88C0: 04 75 03 E9 93 00 FE C6 89 14 E8 92 F3 75 05 80  // .u...........u..
    88D0: F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07 75 04 E8 2B  // .......L..<.u..+
    88E0: 7E C3 3C 08 75 83 0A D2 74 DE FE CA EB DA 32 FF  // ~.<.u...t.....2.
    88F0: 32 D2 2B CB 3A 36 84 04 74 06 FE C6 03 CB EB 95  // 2.+.:6..t.......
    8900: 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF  // ....c...........
    8910: 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1  // +.+.&.e.P.>N....
    8920: E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB  // ................
    8930: 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8 88 C5 FE C2  // X. .............
    8940: 3A 16 4A 04 74 03 89 14 C3 32 FF 32 D2 89 14 3A  // :.J.t....2.2...:
    8950: 36 84 04 74 2E FE C6 EB ED 89 14 2E 8E 06 EB 03  // 6..t............
    8960: E8 FC F2 74 0E 2E 8E 06 E9 03 80 F9 07 74 04 32  // ...t.........t.2
    8970: FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A  // ............O..J
    8980: 04 EB 91 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B0  // ...3..6....J....
    8990: 01 E9 70 F7 2E 8E 1E E5 03 F6 06 87 04 08 74 03  // ..p...........t.
    89A0: CD 42 C3 E8 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E  // .B..v....F......
    89B0: E5 03 8A DF 32 FF D1 E3 89 97 50 04 D0 EB 38 1E  // ....2.....P...8.
    89C0: 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E 1E E5 03 8A  // b.u....\........
    89D0: DF 32 FF D1 E3 8B 97 50 04 8B 0E 60 04 8B EC 89  // .2.....P...`....
    89E0: 4E 16 89 56 12 C3 2E 8E 1E E5 03 A0 87 04 24 80  // N..V..........$.
    89F0: 0A 06 49 04 8A 26 4A 04 8A 3E 62 04 8B EC 89 46  // ..I..&J..>b....F
    8A00: 1A 89 5E 0E 89 4E 16 89 56 12 C3 2E 8E 1E E5 03  // ..^..N..V.......
    8A10: 3C 04 7F 1B 50 52 BA CC 03 EC A8 01 5A 58 74 08  // <...PR......ZXt.
    8A20: 80 3E 63 04 D4 74 08 C3 80 3E 63 04 B4 75 F8 3C  // .>c..t...>c..u.<
    8A30: 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6 D6 89 0E 8A  // .s.2............
    8A40: 2E 8A 40 8A 75 8A BF 89 BF 89 BF 89 9A 8A B2 8A  // ..@.u...........
    8A50: B6 8A BF 89 BF 89 BF 89 BF 89 BF 89 BF 89 E4 8A  // ................
    8A60: BF 89 E8 8A 03 8B BF 89 42 8B BF 89 50 8B 6B 8B  // ........B...P.k.
    8A70: 72 8B 7E 8B A2 8B 80 3E 49 04 13 74 15 E8 FC F4  // r.~....>I..t....
    8A80: 8B C3 86 E0 E8 AD EF 0B ED 74 07 8A C7 32 FF 26  // .........t...2.&
    8A90: 88 01 E8 D0 F4 C3 E8 E3 F4 8A C7 E8 81 FC 0B ED  // ................
    8AA0: 74 F0 26 88 7D 11 EB EA 80 3E 49 04 13 74 E3 06  // t.&.}....>I..t..
    8AB0: E8 C9 F4 1F 0B ED 74 07 8B F2 B9 11 00 F3 A4 8B  // ......t.........
    8AC0: F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C FA 8A C4 EE  // ....2...........
    8AD0: AC EE 9D FE C4 E2 F4 AC E8 44 FC EB B5 80 FB 01  // .........D......
    8AE0: 77 B0 E8 80 F4 B2 C0 B0 30 E8 38 F1 24 F7 80 26  // w.......0.8.$..&
    8AF0: 65 04 DF 80 FB 00 74 07 0C 08 80 0E 65 04 20 EE  // e.....t.....e. .
    8B00: EB 90 E8 9D 01 8A C3 B2 C0 E8 18 F1 8B C8 EE B0  // ................
    8B10: 20 EE 8B EC 88 4E 0F E9 78 FF B3 11 EB E4 8B FA  //  ....N..x.......
    8B20: E8 42 F4 B9 10 00 32 E4 B2 C0 8A C4 9C FA EE 42  // .B....2........B
    8B30: EC 26 88 05 FE C4 4A EE 9D 47 E2 EE 9C FA B0 11  // .&....J..G......
    8B40: EE 42 EC 9D 26 88 05 E8 20 F4 EB 5A E8 CE 00 C3  // .B..&... ..Z....
    8B50: 8B FA 51 8B C3 26 8A 35 26 8A 6D 01 26 8A 4D 02  // ..Q..&.5&.m.&.M.
    8B60: E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A DB 75 1A E8  // ......CY.....u..
    8B70: F3 F3 B2 C0 B0 30 E8 AB F0 24 7F F6 C7 01 74 02  // .....0...$....t.
    8B80: 0C 80 B4 30 E8 AD EE EB 1D FE CB 75 1C E8 D5 F3  // ...0.......u....
    8B90: B2 C0 B0 30 E8 8D F0 EE A8 80 75 03 C0 E7 02 B4  // ...0......u.....
    8BA0: 34 8A C7 E8 8E EE E8 BC F3 C3 8A C3 E8 D1 00 8B  // 4...............
    8BB0: EC 89 4E 16 88 76 13 C3 8B FA 51 8B C3 E8 C3 00  // ..N..v....Q.....
    8BC0: 26 88 35 26 88 6D 01 26 88 4D 02 83 C7 03 43 59  // &.5&.m.&.M....CY
    8BD0: E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6 03 EC 32 E4  // ..............2.
    8BE0: 8B EC 89 46 0E C3 E8 7C F3 B2 C0 B0 34 E8 34 F0  // ...F...|....4.4.
    8BF0: 8A F8 EE B0 30 E8 2C F0 B3 01 A8 80 75 05 B3 00  // ....0.,.....u...
    8C00: C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B C3 E8 73 00  // ......^...Q...s.
    8C10: E8 2A 00 8A C3 E8 52 00 43 59 E2 EE C3 F6 06 89  // .*....R.CY......
    8C20: 04 02 74 03 E8 16 00 8A C3 E8 39 00 C3 F6 06 89  // ..t.......9.....
    8C30: 04 02 74 03 E8 06 00 8A C3 E8 2E 00 C3 50 B0 1E  // ..t..........P..
    8C40: F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1 59 03 C1 59  // ..P.;..P....Y..Y
    8C50: 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE C0 8A F0 8A  // ...d....2|......
    8C60: E8 8A C8 58 C3 52 E8 39 00 5A 53 8B DA BA C8 03  // ...X.R.9.ZS.....
    8C70: 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1 EE 9D 5B C3  // ...B..........[.
    8C80: E8 1F 00 53 9C FA BA C7 03 EE 42 42 EC 8A F8 EB  // ...S......BB....
    8C90: 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A C8 8A F7 9D  // ................
    8CA0: 5B C3 50 51 E8 BE F2 B9 FF 7F EC A8 08 75 02 E2  // [.PQ.........u..
    8CB0: F9 59 58 C3 2E 8E 1E E5 03 8B F8 24 0F 81 E7 F0  // .YX........$....
    8CC0: 00 C1 EF 03 83 FF 06 7F 18 2E FF A5 66 8C 6E 8C  // ............f.n.
    8CD0: 83 8C 21 8D 7D 8D 3C 03 74 08 3C 04 7F 03 E8 CF  // ..!.}.<.t.<.....
    8CE0: 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C 04 77 F2 50  // ...........<.w.P
    8CF0: 53 50 52 8B 16 63 04 B0 07 E8 28 EF 8A E0 D0 EC  // SPR..c....(.....
    8D00: 80 E4 01 A8 40 74 03 80 CC 02 B0 12 E8 15 EF 40  // ....@t.........@
    8D10: A3 85 04 B0 09 E8 0C EF A8 80 74 04 D1 2E 85 04  // ..........t.....
    8D20: A1 85 04 8B D0 3D F4 01 73 1B BA E0 01 3D C2 01  // .....=..s....=..
    8D30: 73 13 BA 90 01 3D 7C 01 73 0B BA 5E 01 3D 4A 01  // s....=|.s..^.=J.
    8D40: 73 03 BA C8 00 89 16 85 04 5A 58 C6 06 84 04 FF  // s........ZX.....
    8D50: E8 5D 01 5B 58 8A DF 32 FF 0A C0 74 0E B3 0E 3C  // .].[X..2...t...<
    8D60: 01 74 08 B3 08 3C 02 74 02 B3 10 8A CB 8A E9 81  // .t...<.t........
    8D70: E9 01 02 80 F9 08 7E 04 81 E9 01 01 87 1E 85 04  // ......~.........
    8D80: 53 E8 98 F2 5B E8 85 02 C3 0A C0 74 11 FE C8 74  // S...[......t...t
    8D90: 1A FE C8 74 38 FE C8 74 3C FE C8 74 40 C3 89 2E  // ...t8..t<..t@...
    8DA0: 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE CA 0A DB 74  // |...~..........t
    8DB0: 07 32 FF 2E 8A 97 61 8D 89 0E 85 04 88 16 84 04  // .2....a.........
    8DC0: 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18 2A E8 09 03  // ............*...
    8DD0: B9 0E 00 EB D6 BD AE 5C B9 08 00 EB CA BD C1 64  // .......\.......d
    8DE0: B9 10 00 EB C2 0A C0 75 BD 8B 0E 85 04 8A 16 84  // .......u........
    8DF0: 04 80 FF 07 77 35 80 FF 01 77 10 0A FF 75 06 C4  // ....w5...w...u..
    8E00: 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80 FF 02 75 0B  // .|..&..... ...u.
    8E10: 8C CD 8E C5 2E 8B 2E A0 75 EB 10 0E 07 8A DF 32  // ........u......2
    8E20: FF 80 EB 02 D1 E3 2E 8B AF D4 8D 8B C5 8B EC 89  // ................
    8E30: 4E 16 89 56 12 89 46 0A 8C 46 1E C3 C1 64 AE 5C  // N..V..F..F...d.\
    8E40: AE 60 AE 64 C1 64 C1 74 53 06 8A 26 49 04 E8 D2  // .`.d.d.tS..&I...
    8E50: C2 26 8A 47 02 26 8A 67 33 F6 C4 01 74 22 BD C1  // .&.G.&.g3...t"..
    8E60: 64 3C 10 7D 0E E8 71 02 8C 06 0E 01 3C 0E 7D 07  // d<.}..q.....<.}.
    8E70: BD AE 5C 8C 0E 0E 01 89 2E 0C 01 E8 10 01 EB 2D  // ..\............-
    8E80: B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D 7F 15 B4 02  // ..<.}...<.t.....
    8E90: 3C 08 74 05 80 CC 80 EB 0A 26 F6 47 05 01 74 03  // <.t......&.G..t.
    8EA0: 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9 01 07 5B C3  // .....2........[.
    8EB0: 8B F8 8B F2 BA CE 03 EC B8 05 00 EF B8 06 04 EF  // ................
    8EC0: B2 C4 EC B8 02 04 EF B8 04 07 EF 8B D6 8B C7 50  // ...............P
    8ED0: 24 7F 0A C0 74 22 0E 07 33 D2 B9 00 01 3C 04 75  // $...t"..3....<.u
    8EE0: 07 B7 10 BD C1 64 EB 10 FE C8 75 07 B7 0E E8 E8  // .....d....u.....
    8EF0: 01 EB 05 B7 08 BD AE 5C E8 2D 00 58 A8 80 74 00  // .......\.-.X..t.
    8F00: BA C4 03 B8 02 03 EF B8 04 02 EF B2 CC EC A8 01  // ................
    8F10: B8 06 0E 75 02 B4 0A B2 CE 50 EC 58 EF B0 04 EE  // ...u.....P.X....
    8F20: 32 C0 EE B8 05 10 EF C3 FC 0B C9 75 01 C3 80 FF  // 2..........u....
    8F30: 0E 75 0A 26 83 7E FE 10 75 03 80 CD 80 1E 06 1F  // .u.&.~..u.......
    8F40: 2E 8E 06 E7 03 8B FA C1 E7 05 B0 40 53 80 E3 03  // ...........@S...
    8F50: F6 E3 5B F6 C3 04 74 02 04 20 86 E0 8B D0 03 FA  // ..[...t.. ......
    8F60: 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6 C5 80 74 01  // ...(2...2.Q...t.
    8F70: 46 8B CB F3 A4 83 FB 20 74 07 B9 20 00 2B CB F3  // F...... t.. .+..
    8F80: AA 59 F6 C5 80 74 01 46 FE C9 75 DE 1F C3 8A 26  // .Y...t.F..u....&
    8F90: 49 04 50 06 57 C4 3E A8 04 26 C4 7D 0C 8C C5 0B  // I.P.W.>..&.}....
    8FA0: EF 74 30 8B EF 83 C7 07 26 8A 05 3C FF 74 24 38  // .t0.....&..<.t$8
    8FB0: E0 74 03 47 EB F2 8B FD 26 8A 05 FE C8 A2 84 04  // .t.G....&.......
    8FC0: 26 8B 45 01 A3 85 04 26 C4 7D 03 89 3E 0C 01 8C  // &.E....&.}..>...
    8FD0: 06 0E 01 5F 07 58 C3 26 F6 47 33 01 74 01 C3 C4  // ..._.X.&.G3.t...
    8FE0: 1E A8 04 26 C4 5F 08 8C C0 0B C3 74 1F BF 0B 00  // ...&._.....t....
    8FF0: 26 8A 01 3C FF 74 15 47 38 06 49 04 75 F2 26 8A  // &..<.t.G8.I.u.&.
    9000: 07 32 E4 87 06 85 04 8B D8 E8 01 00 C3 8B 16 63  // .2.............c
    9010: 04 8A 26 85 04 FE CC 80 E4 1F 9C FA 80 FA D4 74  // ..&............t
    9020: 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A B0 09 EE 42  // ....B.$....J...B
    9030: EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A 16 85 04 F6  // .$..............
    9040: F2 80 3E 84 04 FF 75 07 A2 84 04 FE 0E 84 04 F6  // ..>...u.........
    9050: E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0 12 8B 16 63  // ....t...H......c
    9060: 04 EF A0 4A 04 8A 26 84 04 FE C4 F6 E4 D1 E0 05  // ...J..&.........
    9070: 00 01 A3 4C 04 C3 8A 26 49 04 50 06 57 C4 3E A8  // ...L...&I.P.W.>.
    9080: 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B EF 83 C7 0B  // .&.}.....tJ.....
    9090: 26 8A 05 3C FF 74 3E 38 E0 74 03 47 EB F2 8B FD  // &..<.t>8.t.G....
    90A0: 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26 8B 55 04 26  // &.=&.].&.M.&.U.&
    90B0: 8A 45 0A 3C FF 74 02 FE C8 50 A0 84 04 FE C0 F6  // .E.<.t...P......
    90C0: 26 85 04 A3 85 04 58 A2 84 04 26 C4 7D 06 8B EF  // &.....X...&.}...
    90D0: 32 C0 E8 DB FD 5F 07 58 C3 50 53 51 52 2E A1 EF  // 2...._.X.PSQR...
    90E0: 03 0B C0 74 09 2E 8B 2E A0 75 0E 07 EB 08 B8 30  // ...t.....u.....0
    90F0: 11 B7 02 E8 D0 BD 5A 59 5B 58 C3 3C 04 7C 01 C3  // ......ZY[X.<.|..
    9100: E3 FD 53 2E 8E 1E E5 03 86 FB 32 FF D1 E3 8B FB  // ..S.......2.....
    9110: 81 C7 50 04 8B 35 5B 89 15 56 8B F0 51 53 26 8A  // ..P..5[..V..QS&.
    9120: 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB 40 3C 0A 74  // F.E<...u.2..@<.t
    9130: 32 3C 07 75 05 E8 D4 75 EB 62 3C 08 75 08 0A D2  // 2<.u...u.b<.u...
    9140: 74 5A FE CA EB 27 F7 C6 02 00 74 05 26 8A 5E 00  // tZ...'....t.&.^.
    9150: 45 B9 01 00 B4 09 E8 6D BD FE C2 3A 16 4A 04 72  // E......m...:.J.r
    9160: 0C 32 D2 89 15 3A 36 84 04 73 06 FE C6 89 15 EB  // .2...:6..s......
    9170: 2B 50 E8 EA EA 75 08 B8 00 08 E8 49 BD EB 09 80  // +P...u.....I....
    9180: 3E 49 04 07 74 F1 32 E4 86 3E 62 04 53 8A FC 55  // >I..t.2..>b.S..U
    9190: E8 25 00 5D 5B 86 3E 62 04 58 8B 15 5B 59 E2 15  // .%.][.>b.X..[Y..
    91A0: 5A F7 C6 01 00 75 02 89 15 8B 05 3A 3E 62 04 75  // Z....u.....:>b.u
    91B0: 03 E8 71 ED C3 E9 64 FF 33 C9 8A 36 84 04 8A 16  // ..q...d.3..6....
    91C0: 4A 04 FE CA B8 01 06 E8 FC BC C3 2E 8E 1E E5 03  // J...............
    91D0: 0A C0 75 0D E8 18 00 8B EC 89 5E 0E C6 46 1A 1A  // ..u.......^..F..
    91E0: C3 3C 01 75 09 E8 41 00 8B EC C6 46 1A 1A C3 A0  // .<.u..A....F....
    91F0: 8A 04 BF 61 92 2E 3A 05 72 04 BB FF FF C3 32 E4  // ...a..:.r.....2.
    9200: D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05 0A FF 75 04  // ......]...t...u.
    9210: C3 86 FB C3 A0 10 04 24 30 3C 30 74 06 F6 C3 01  // .......$0<0t....
    9220: 75 EF C3 F6 C3 01 74 E9 C3 BF 61 92 2E 8A 0D 32  // u.....t...a....2
    9230: C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E 3B 1D 74 0B  // .....;.t....;.t.
    9240: 83 C7 02 FE C0 38 C8 7E EB B0 FF A2 8A 04 C3 BB  // .....8.~........
    9250: 08 00 F6 06 89 04 02 74 0E BB 07 00 BA CC 03 EC  // .......t........
    9260: A8 01 74 18 BB 08 00 BA B4 03 E8 1C ED 74 21 B7  // ..t..........t!.
    9270: 01 E8 C9 E9 80 FA D4 74 17 86 FB C3 BA D4 03 E8  // .......t........
    9280: 07 ED 74 0C B7 02 E8 B4 E9 80 FA B4 74 02 86 FB  // ..t.........t...
    9290: C3 0F 08 0F 08 0F 08 0F 08 03 01 03 01 01 01 00  // ................
    92A0: 08 01 01 01 01 01 01 01 01 0F 01 0F 08 0F 04 00  // ................
    92B0: 02 0F 02 01 01 0F 01 FF 01 FF E0 0F 00 00 00 00  // ................
    92C0: 07 02 08 FF 0E 00 00 3F 00 10 01 08 00 00 00 00  // .......?........
    92D0: 01 00 02 02 01 00 04 04 01 00 05 02 05 00 06 01  // ................
    92E0: 06 05 06 00 08 01 08 00 07 02 07 06 07 00 55 02  // ..............U.
    92F0: 34 00 90 00 D2 00 00 00 00 00 00 00 5F 57 C3 90  // 4..........._W..
    9300: 50 66 52 E8 F4 FF FF FF 81 EF 10 00 00 00 2E 8B  // PfR.............
    9310: 07 66 BA F8 0C EF 66 BA FC 0C ED 32 C0 66 8B F8  // .f....f....2.f..
    9320: 66 5A 58 C3 66 B8 4F 03 66 52 66 56 53 57 50 0A  // fZX.f.O.fRfVSWP.
    9330: FF 75 44 E8 C8 FF FF FF 66 33 F6 66 BB D0 05 E8  // .uD.....f3.f....
    9340: 00 01 00 00 C1 E8 10 F6 C4 40 75 2B 66 81 E2 FF  // .........@u+f...
    9350: 02 66 D1 E2 66 8B C2 66 40 C1 E0 10 66 8B C2 66  // .f..f..f@...f..f
    9360: BB 13 00 E8 E8 00 00 00 66 BB 12 00 E8 DF 00 00  // ........f.......
    9370: 00 66 58 32 E4 66 50 58 5F 5B 66 5E 66 5A C3 90  // .fX2.fPX_[f^fZ..
    9380: 66 B8 4F 03 52 51 53 57 66 56 50 8A FB 80 E3 7F  // f.O.RQSWfVP.....
    9390: 0A DB 75 26 E8 67 FF FF FF C1 E2 10 66 8B D1 C1  // ..u&.g......f...
    93A0: E2 02 66 BE 00 00 E8 C7 00 00 00 66 BE 00 02 E8  // ..f........f....
    93B0: BE 00 00 00 66 58 32 E4 66 50 58 66 5E 5F 5B 59  // ....fX2.fPXf^_[Y
    93C0: 5A C3 66 B8 4F 03 66 51 57 56 53 52 50 8A FB 80  // Z.f.O.fQWVSRP...
    93D0: E3 7F 0A DB 75 39 8A DA 57 5A E8 21 FF FF FF 66  // ....u9..WZ.!...f
    93E0: 33 F6 66 53 66 BB D0 05 E8 57 00 00 00 80 E4 01  // 3.fSf....W......
    93F0: 66 5B 80 E7 FE 0A FC 66 BE 00 00 E8 DE 00 00 00  // f[.....f........
    9400: 66 BE 00 02 E8 D5 00 00 00 66 58 32 E4 66 50 58  // f........fX2.fPX
    9410: 5A 5B 5E 5F 66 59 C3 90 53 50 51 F6 C7 80 74 20  // Z[^_fY..SPQ...t 
    9420: 66 BB 9C 1B E8 1B 00 00 00 A8 01 74 13 66 B9 FF  // f..........t.f..
    9430: FF 66 BB A3 1B E8 0A 00 00 00 A8 01 75 02 E2 F1  // .f..........u...
    9440: 59 58 5B C3 66 52 E8 11 00 00 00 ED 66 5A C3 90  // YX[.fR......fZ..
    9450: 66 52 E8 05 00 00 00 EF 66 5A C3 90 66 8B D7 50  // fR......fZ..f..P
    9460: 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF 66 83 C2 04  // 3.f..f......f...
    9470: 58 C3 52 E8 A0 FF FF FF 81 E2 FF FF FF 02 66 BB  // X.R...........f.
    9480: 04 1A E8 BD FF FF FF 25 00 00 00 FD 03 C2 66 25  // .......%......f%
    9490: 00 F0 E8 B9 FF FF FF 66 BB 05 1A E8 B0 FF FF FF  // .......f........
    94A0: 66 81 E2 FF 0F 66 BB 01 1A E8 96 FF FF FF 24 03  // f....f........$.
    94B0: 8A C8 66 D3 EA 66 BB 06 1A E8 86 FF FF FF 66 03  // ..f..f........f.
    94C0: C2 66 BB 0D 1A E8 86 FF FF FF 66 8B C2 24 FC C1  // .f........f..$..
    94D0: E0 10 66 BB 5C 1B E8 75 FF FF FF 5A C3 90 52 66  // ..f.\..u...Z..Rf
    94E0: 53 66 51 E8 30 FF FF FF 33 C0 8A C3 66 53 66 BB  // SfQ.0...3...fSf.
    94F0: 79 1A E8 59 FF FF FF 66 5B 66 49 66 81 E1 FF 00  // y..Y...f[fIf....
    9500: 66 41 32 C0 66 53 66 BB 78 1A E8 41 FF FF FF 66  // fA2.fSf.x..A...f
    9510: 5B 26 8A 42 02 C1 E0 0A 26 8A 42 01 C1 E0 0A 26  // [&.B....&.B....&
    9520: 8A 02 C1 E0 02 F6 C7 01 75 03 C1 E0 02 66 53 66  // ........u....fSf
    9530: BB 7C 1A E8 18 FF FF FF 66 5B 83 C2 04 E2 D2 66  // .|......f[.....f
    9540: 59 66 5B 5A C3 00 79 38 6C 38 6C 38 6C 38 57 38  // Yf[Z..y8l8l8l8W8
    9550: 57 38 57 38 57 38 99 34 10 35 3A 35 7B 36 7A 36  // W8W8W8.4.5:5{6z6
    9560: 7A 36 C0 36 25 37 55 37 12 38 3B 38 3B 38 B2 36  // z6.6%7U7.8;8;8.6
    9570: A5 36 A5 36 A5 36 A5 36 A5 36 C0 36 25 37 55 37  // .6.6.6.6.6.6%7U7
    9580: 12 38 40 38 86 38 3B 38 3B 38 FF FF FF FF FF FF  // .8@8.8;8;8......
    9590: 00 00 FF FF 00 00 FF FF 00 00 FF 00 00 00 FF 00  // ................
    95A0: 00 00 FF 00 00 00 FF 00 00 00 00 00 08 10 00 08  // ................
    95B0: 10 18 00 08 10 18 9D 32 01 9D 32 02 AB 46 03 8B  // .......2..2..F..
    95C0: 46 03 C2 33 03 76 33 03 9E 32 04 B7 32 04 C7 32  // F..3.v3..2..2..2
    95D0: 04 9D 32 03 00 00 00 00 4A 3A 00 02 4A 3A 01 02  // ..2.....J:..J:..
    95E0: 4A 3A 02 02 4A 3A 03 02 4A 3A 04 02 4A 3A 05 02  // J:..J:..J:..J:..
    95F0: 44 3C 00 02 44 3C 01 02 44 3C 02 02 44 3C 03 02  // D<..D<..D<..D<..
    9600: 44 3C 04 02 44 3C 05 02 79 3C 00 02 79 3C 01 02  // D<..D<..y<..y<..
    9610: 79 3C 02 02 79 3C 03 02 79 3C 04 02 79 3C 05 02  // y<..y<..y<..y<..
    9620: B4 3E 00 02 B4 3E 01 02 B4 3E 02 02 B4 3E 03 02  // .>...>...>...>..
    9630: B4 3E 04 02 B4 3E 05 02 B4 3E 00 02 B4 3E 01 02  // .>...>...>...>..
    9640: B4 3E 02 02 B4 3E 03 02 B4 3E 04 02 B4 3E 05 02  // .>...>...>...>..
    9650: 7B 3D 00 02 7B 3D 01 02 7B 3D 02 02 7B 3D 03 02  // {=..{=..{=..{=..
    9660: 7B 3D 04 02 7B 3D 05 02 B7 3D 00 02 B7 3D 01 02  // {=..{=...=...=..
    9670: B7 3D 02 02 B7 3D 03 02 B7 3D 04 02 B7 3D 05 02  // .=...=...=...=..
    9680: 28 3D 00 02 28 3D 01 02 28 3D 02 02 28 3D 03 02  // (=..(=..(=..(=..
    9690: 28 3D 04 02 28 3D 05 02 5C 3D 00 02 5C 3D 01 02  // (=..(=..\=..\=..
    96A0: 5C 3D 02 02 5C 3D 03 02 5C 3D 04 02 5C 3D 05 02  // \=..\=..\=..\=..
    96B0: 0C 41 00 00 3F 41 01 00 3F 41 02 00 2C 41 00 00  // .A..?A..?A..,A..
    96C0: 1A 40 00 02 13 3E 00 02 13 3E 01 02 13 3E 02 02  // .@...>...>...>..
    96D0: 13 3E 03 02 13 3E 04 02 13 3E 05 02 32 40 00 02  // .>...>...>..2@..
    96E0: 87 42 05 00 87 42 01 00 87 42 00 00 87 42 02 00  // .B...B...B...B..
    96F0: C8 42 00 00 C8 42 02 00 0D 43 00 00 9D 3F 00 02  // .B...B...C...?..
    9700: 9D 3F 01 02 9D 3F 02 02 9D 3F 03 02 9D 3F 04 02  // .?...?...?...?..
    9710: 9D 3F 05 02 59 41 00 00 81 41 00 00 02 42 00 00  // .?..YA...A...B..
    9720: 7D 42 00 00 61 3E 00 02 61 3E 01 02 61 3E 02 02  // }B..a>..a>..a>..
    9730: 61 3E 03 02 61 3E 04 02 61 3E 05 02 7C 42 00 01  // a>..a>..a>..|B..
    9740: 7C 42 00 01 80 3B 00 02 80 3B 01 02 80 3B 02 02  // |B...;...;...;..
    9750: 80 3B 03 02 80 3B 04 02 80 3B 05 02 A1 41 00 00  // .;...;...;...A..
    9760: 7D 42 00 00 7D 42 00 00 7D 42 00 00 B2 40 00 00  // }B..}B..}B...@..
    9770: A4 3C 00 02 A4 3C 01 02 A4 3C 02 02 A4 3C 03 02  // .<...<...<...<..
    9780: A4 3C 04 02 A4 3C 05 02 D3 3C 00 02 D3 3C 01 02  // .<...<...<...<..
    9790: D3 3C 02 02 D3 3C 03 02 D3 3C 04 02 D3 3C 05 02  // .<...<...<...<..
    97A0: 09 3D 00 02 09 3D 01 02 09 3D 02 02 09 3D 03 02  // .=...=...=...=..
    97B0: 09 3D 04 02 09 3D 05 02 C4 41 00 00 E7 41 00 00  // .=...=...A...A..
    97C0: A5 3D 01 02 A5 3D 02 02 01 3E 01 02 01 3E 02 02  // .=...=...>...>..
    97D0: A6 00 01 01 88 B0 20 B1 78 B1 BE CF 44 DA 30 B2  // ...... .x...D.0.
    97E0: 00 00 5C D0 00 00 44 B3 44 B4 F0 B5 12 B7 DE BB  // ..\...D.D.......
    97F0: 66 BD 6E BD 0C D8 3E D8 AC C2 BE C3 E0 C3 00 00  // f.n...>.........
    9800: 00 00 00 00 00 00 00 00 00 00 6E C4 00 00 00 00  // ..........n.....
    9810: FC E3 9C E4 48 E6 2E C7 A6 C7 1A C8 00 00 58 C8  // ....H.........X.
    9820: 84 C8 00 00 A6 C8 C0 C8 40 C9 06 CA B6 CB 00 CC  // ........@.......
    9830: 12 EB 96 CC D4 CC AC CD 00 00 00 E8 00 CF 44 EA  // ..............D.
    9840: 76 D0 1A E7 A8 D2 08 D3 12 D3 1C D3 58 D3 08 D5  // v...........X...
    9850: AC DC 10 D5 80 D6 80 D7 00 00 4E D8 00 00 D2 E9  // ..........N.....
    9860: 00 00 F8 BD 5A C2 00 00 00 00 00 00 D6 DC 1C DE  // ....Z...........
    9870: 54 E1 A0 E3 C0 D9 4A 00 01 01 00 00 00 00 00 00  // T.....J.........
    9880: 58 98 3C 99 A8 99 DC 99 00 00 FA AF 00 00 2A 9A  // X.<...........*.
    9890: 06 9B 12 9B 32 9B A6 9B BE 9B 00 00 E2 AF 00 00  // ....2...........
    98A0: 00 00 00 00 00 00 00 9F 32 A3 5E A0 00 00 56 AF  // ........2.^...V.
    98B0: 7E AF B0 A3 00 00 00 00 16 AE 22 AF 00 00 32 B0  // ~........."...2.
    98C0: E4 00 01 02 4E 0C 80 02 C0 00 90 01 2D 00 20 00  // ....N.......-. .
    98D0: 40 00 01 00 03 00 00 00 00 00 00 00 02 00 E6 55  // @..............U
    98E0: D6 09 80 02 A0 00 E0 01 2D 00 10 00 60 00 0A 00  // ........-...`...
    98F0: 02 00 00 00 00 00 08 08 06 00 12 3C A0 0F 20 03  // ...........<.. .
    9900: 00 01 58 02 1C 00 28 00 80 00 01 00 04 00 00 00  // ..X...(.........
    9910: 00 00 00 00 00 00 6A 3C 64 19 00 04 40 01 00 03  // ......j<d...@...
    9920: 26 00 18 00 88 00 03 00 06 00 00 00 00 00 00 00  // &...............
    9930: 06 00 55 3C 30 2A 00 05 08 02 C0 03 28 00 60 00  // ..U<0*......(.`.
    9940: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 E9 3C  // p..............<
    9950: 30 2A 00 05 98 01 00 04 2A 00 30 00 70 00 01 00  // 0*......*.0.p...
    9960: 03 00 00 00 00 00 00 00 00 00 EA 3C 8F 2F 78 05  // ...........<./x.
    9970: D0 01 1A 04 27 00 58 00 90 00 03 00 04 00 00 00  // ....'.X.........
    9980: 00 00 00 00 02 00 EB 3C 48 3F 40 06 30 02 B0 04  // .......<H?@.0...
    9990: 32 00 40 00 C0 00 01 00 03 00 00 00 00 00 00 00  // 2.@.............
    99A0: 00 00 EC 3C 6C 00 02 02 01 02 32 0F 30 75 00 00  // ...<l.....2.0u..
    99B0: 30 75 00 00 00 00 00 00 40 7E 05 00 00 00 00 00  // 0u......@~......
    99C0: 00 00 00 00 C0 27 09 00 00 00 00 00 92 F4 00 00  // .....'..........
    99D0: 00 00 84 03 9A 0B 70 17 00 00 00 00 28 88 04 00  // ......p.....(...
    99E0: 00 00 00 00 00 00 00 00 00 00 00 00 40 9C C4 09  // ............@...
    99F0: 10 27 52 03 1F 40 10 27 10 27 10 27 01 00 00 00  // .'R..@.'.'.'....
    9A00: 0E 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A10: 34 00 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // 4........*.*..**
    9A20: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    9A30: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    9A40: 15 3F 3F 3F 4E 00 01 03 00 00 00 00 00 00 00 00  // .???N...........
    9A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A60: 06 00 00 00 00 00 20 00 00 00 00 00 1D 3C 01 00  // ...... ......<..
    9A70: 00 00 00 00 00 48 C8 00 07 5A 5A 07 7D 00 00 00  // .....H...ZZ.}...
    9A80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A90: 00 00 DC 00 01 01 68 48 6A 48 6B 48 69 48 68 48  // ......hHjHkHiHhH
    9AA0: 6A 48 6B 48 69 48 90 00 00 00 00 08 08 08 08 00  // jHkHiH..........
    9AB0: 00 6C 48 6E 48 6F 48 6D 48 6C 48 6E 48 6F 48 6D  // .lHnHoHmHlHnHoHm
    9AC0: 48 91 00 00 00 00 08 08 08 08 00 00 70 48 72 48  // H...........pHrH
    9AD0: 73 48 71 48 70 48 72 48 73 48 71 48 92 00 00 00  // sHqHpHrHsHqH....
    9AE0: 00 08 08 08 08 00 00 74 48 76 48 77 48 75 48 74  // .......tHvHwHuHt
    9AF0: 48 76 48 77 48 75 48 93 00 00 00 00 08 08 08 08  // HvHwHuH.........
    9B00: 00 00 78 48 7A 48 7B 48 79 48 78 48 7A 48 7B 48  // ..xHzH{HyHxHzH{H
    9B10: 79 48 94 00 00 00 00 08 08 08 08 00 00 7C 48 7E  // yH...........|H~
    9B20: 48 7F 48 7D 48 7C 48 7E 48 7F 48 7D 48 95 00 00  // H.H}H|H~H.H}H...
    9B30: 00 00 08 08 08 08 00 00 98 48 9A 48 9B 48 99 48  // .........H.H.H.H
    9B40: 98 48 9A 48 9B 48 99 48 96 00 00 00 00 01 01 01  // .H.H.H.H........
    9B50: 01 00 00 80 48 82 48 83 48 81 48 80 48 82 48 83  // ....H.H.H.H.H.H.
    9B60: 48 81 48 97 00 00 00 00 08 08 08 08 00 00 0C 00  // H.H.............
    9B70: 01 05 E0 FF 3F 00 20 00 20 00 20 00 01 01 8D 48  // ....?. . . ....H
    9B80: 00 01 8D 48 08 02 8D 48 10 03 8D 48 18 04 8D 48  // ...H...H...H...H
    9B90: 1A 05 8D 48 1C 06 83 01 05 3D 74 00 01 01 10 01  // ...H.....=t.....
    9BA0: 06 12 11 01 16 12 13 01 06 6A 14 01 16 6A 16 01  // .........j...j..
    9BB0: 06 55 17 01 16 55 19 01 06 EA 1A 01 16 EA 65 01  // .U...U........e.
    9BC0: 16 E9 66 01 0A E9 21 01 0A 12 22 01 0A 6A 23 01  // ..f...!..."..j#.
    9BD0: 0A 55 24 01 0A EA 45 01 16 EB 46 01 0A EB 75 01  // .U$...E...F...u.
    9BE0: 16 EC 76 01 0A EC D2 01 16 70 D4 01 0A 70 D8 01  // ..v......p...p..
    9BF0: 16 71 D9 01 0A 71 E2 01 16 72 E4 01 0A 72 E8 01  // .q...q...r...r..
    9C00: 16 73 E9 01 0A 73 F5 01 16 74 F6 01 0A 74 18 00  // .s...s...t...t..
    9C10: 02 03 01 08 04 08 09 01 02 08 00 00 00 00 00 00  // ................
    9C20: 00 00 00 00 00 00 41 03 07 01 00 4D 00 95 06 00  // ......A....M....
    9C30: 00 6F 28 00 00 19 00 00 00 00 80 06 01 40 0D 03  // .o(..........@..
    9C40: 00 E8 6E 03 00 32 00 19 00 4D 00 A1 02 98 02 00  // ..n..2...M......
    9C50: 00 B5 01 3B 01 77 00 F9 00 DE 01 06 03 00 00 D1  // ...;.w..........
    9C60: 02 00 00 20 03 3A 03 CC EB 01 00 53 07 00 00 00  // ... .:.....S....
    9C70: 00 00 00 01 02 00 00 00 00 00 00 00 00 08 00 00  // ................
    9C80: 00 00 00 00 00 00 00 00 00 07 00 02 00 00 00 00  // ................
    9C90: 00 05 00 00 00 00 00 00 00 00 00 00 00 00 10 EE  // ................
    9CA0: 02 00 00 00 00 00 00 02 FF 00 00 00 00 00 00 03  // ................
    9CB0: FF 00 00 00 00 00 00 04 FF 00 00 00 00 00 00 05  // ................
    9CC0: FF 00 00 00 00 00 00 06 FF 00 00 00 00 00 00 07  // ................
    9CD0: FF 00 00 00 00 00 00 08 FF 00 00 00 00 00 00 20  // ............... 
    9CE0: 03 00 00 00 00 00 00 52 03 00 00 00 00 00 00 84  // .......R........
    9CF0: 03 00 00 00 00 00 00 B6 03 00 00 00 00 00 00 E8  // ................
    9D00: 03 00 00 00 00 00 00 1A 04 00 00 00 00 00 00 4C  // ...............L
    9D10: 04 00 00 00 00 00 00 7E 04 00 00 00 00 00 00 00  // .......~........
    9D20: 08 84 03 00 00 00 00 00 00 02 FF 00 00 00 00 00  // ................
    9D30: 00 03 FF 00 00 00 00 00 00 04 FF 00 00 00 00 00  // ................
    9D40: 00 05 FF 00 00 00 00 00 00 06 FF 00 00 00 00 00  // ................
    9D50: 00 07 FF 00 00 00 00 00 00 08 FF 00 00 00 00 00  // ................
    9D60: 00 01 08 00 00 00 30 75 00 00 00 00 00 80 00 00  // ......0u........
    9D70: 00 00 01 E6 FF B0 E5 00 00 00 00 00 00 00 00 00  // ................
    9D80: 00 02 E6 FF E0 73 01 00 00 00 00 00 00 00 00 00  // .....s..........
    9D90: 03 E6 FF A4 96 01 00 00 00 00 00 00 00 00 00 04  // ................
    9DA0: E6 FF 08 B0 01 00 00 00 00 00 00 00 00 00 05 E6  // ................
    9DB0: FF 40 C8 01 00 00 00 00 00 00 00 00 00 06 E6 FF  // .@..............
    9DC0: 44 D8 01 00 00 00 00 00 00 00 00 00 07 00 00 F0  // D...............
    9DD0: E5 01 00 00 00 00 00 00 00 00 00 00 03 00 20 03  // .............. .
    9DE0: 00 00 E8 03 30 75 00 00 00 00 08 52 03 00 00 E8  // ....0u.....R....
    9DF0: 03 A0 86 01 00 00 00 0A 84 03 00 00 E8 03 98 AB  // ................
    9E00: 02 00 00 00 00 08 08 00 00 90 E2 00 00 F8 24 01  // ..............$.
    9E10: 00 18 F6 00 00 00 00 00 00 A8 DE 00 00 09 B4 FF  // ................
    9E20: 18 F6 00 00 80 38 01 00 88 0D 01 00 00 00 00 00  // .....8..........
    9E30: 00 FA 00 00 0A 9B FF A0 09 01 00 08 4C 01 00 F8  // ............L...
    9E40: 24 01 00 00 00 00 00 70 11 01 00 0B 82 FF 28 1D  // $......p......(.
    9E50: 01 00 A8 5B 01 00 68 3C 01 00 00 00 00 00 E0 28  // ...[..h<.......(
    9E60: 01 00 0C 69 FF C8 2C 01 00 60 67 01 00 F0 4F 01  // ...i..,..`g...O.
    9E70: 00 00 00 00 00 68 3C 01 00 0D 37 FF 80 38 01 00  // .....h<...7..8..
    9E80: 18 73 01 00 78 63 01 00 00 00 00 00 08 4C 01 00  // .s..xc.......L..
    9E90: 0E 05 FF 38 44 01 00 D0 7E 01 00 00 77 01 00 00  // ...8D...~...w...
    9EA0: 00 00 00 C0 57 01 00 0F 00 00 F0 4F 01 00 A0 86  // ....W......O....
    9EB0: 01 00 A0 86 01 00 00 00 00 00 78 63 01 00 01 17  // ..........xc....
    9EC0: 00 00 02 09 2D 00 00 09 03 A0 0F 64 19 34 21 D0  // ....-......d.4!.
    9ED0: 07 A0 0F 70 17 94 2A 01 64 00 E4 12 B8 0B 78 63  // ...p..*.d.....xc
    9EE0: 01 00 4B 14 64 00 64 00 64 00 64 00 64 00 64 00  // ..K.d.d.d.d.d.d.
    9EF0: 64 00 00 32 3C 00 00 04 78 00 00 00 6B 00 78 00  // d..2<...x...k.x.
    9F00: 78 00 00 00 00 00 78 00 5A 00 00 00 00 00 5E 00  // x.....x.Z.....^.
    9F10: 02 00 69 00 50 00 50 00 73 00 73 00 5F 00 00 00  // ..i.P.P.s.s._...
    9F20: 90 10 96 00 90 00 00 06 00 00 00 00 01 06 00 00  // ................
    9F30: 01 02 00 01 01 02 00 02 01 02 00 02 01 02 00 02  // ................
    9F40: 01 02 00 02 01 02 01 03 00 10 00 00 00 00 00 00  // ................
    9F50: 00 10 00 00 00 00 00 00 02 10 00 00 00 00 00 00  // ................
    9F60: 00 01 00 00 00 00 00 00 5E 01 01 03 88 0E 48 00  // ........^.....H.
    9F70: 00 00 FB 00 00 00 12 00 00 00 05 01 00 00 08 00  // ................
    9F80: 0A 00 13 31 00 11 21 21 80 00 0A 00 13 32 00 11  // ...1..!!.....2..
    9F90: 21 22 00 02 0A 00 13 33 00 11 20 21 00 04 0A 00  // !".....3.. !....
    9FA0: 0C 31 00 11 20 22 00 08 0A 00 04 31 00 11 1E 21  // .1.. ".....1...!
    9FB0: 05 00 00 00 13 31 74 00 7A 00 00 00 13 32 8F 00  // .....1t.z....2..
    9FC0: 95 00 00 00 13 33 AA 00 B0 00 00 00 0C 31 C5 00  // .....3.......1..
    9FD0: CB 00 00 00 04 31 E0 00 E6 00 00 00 01 21 21 00  // .....1.......!!.
    9FE0: 00 00 04 0C 01 00 10 02 00 00 08 00 00 00 01 04  // ................
    9FF0: 90 00 02 04 06 00 FF 01 21 22 00 00 00 04 0C 01  // ........!"......
    A000: 00 20 02 00 00 80 00 00 00 01 04 92 00 02 04 04  // . ..............
    A010: 00 FF 01 20 21 00 00 00 04 0C 01 00 30 02 00 00  // ... !.......0...
    A020: 00 02 00 00 01 04 91 00 02 04 01 00 FF 01 20 22  // .............. "
    A030: 00 00 00 04 0C 01 00 40 02 00 00 00 04 00 00 01  // .......@........
    A040: 04 93 00 02 04 05 00 FF 01 1E 21 00 00 00 04 0C  // ..........!.....
    A050: 01 00 50 02 00 00 00 08 00 00 01 04 95 00 02 04  // ..P.............
    A060: 03 00 FF 05 00 00 00 21 21 27 01 2D 01 00 00 21  // .......!!'.-...!
    A070: 22 32 01 38 01 00 00 20 21 3D 01 43 01 00 00 20  // "2.8... !=.C... 
    A080: 22 48 01 4E 01 00 00 1E 21 53 01 59 01 00 00 01  // "H.N....!S.Y....
    A090: 00 11 01 13 31 14 04 0F 00 FF 01 00 11 01 13 32  // ....1..........2
    A0A0: 14 04 0F 00 FF 01 00 11 01 13 33 14 04 0F 00 FF  // ..........3.....
    A0B0: 01 00 11 01 0C 31 14 04 0F 00 FF 01 00 11 01 04  // .....1..........
    A0C0: 31 14 04 0F 00 FF D4 02 02 01 30 DC B4 00 00 80  // 1.........0.....
    A0D0: 03 00 2C 1F 00 00 14 00 00 00 DC 0C 14 00 00 00  // ..,.............
    A0E0: D5 0C 33 03 00 00 D4 0C 00 02 0C 00 00 0B 29 00  // ..3...........).
    A0F0: 20 0F D3 0B E0 1F 12 00 ED 09 10 A8 08 00 92 09  //  ...............
    A100: 00 04 0C 00 94 09 00 04 0C 00 93 09 00 04 0C 00  // ................
    A110: 6D 09 1F 10 14 01 2E 08 00 04 0C 00 30 08 80 0C  // m...........0...
    A120: 0C 00 2F 08 00 04 0C 00 4F 09 B4 00 01 00 1E 09  // ../.....O.......
    A130: 00 04 0C 00 F3 09 1B 90 00 00 E9 09 5A 8A FF 00  // ............Z...
    A140: EA 09 7A AE FF 08 EE 09 10 0C 00 00 EF 09 10 0C  // ..z.............
    A150: 00 00 E5 09 FC FD FC FC E6 09 FD F8 FC FC E7 09  // ................
    A160: FC FC F3 FC E8 09 FC FC FC F5 F0 09 08 6F C3 00  // .............o..
    A170: F1 09 05 29 C3 00 DA 09 11 40 04 00 D6 09 03 F8  // ...).....@......
    A180: 6F 00 F2 09 10 10 87 01 F4 09 45 4F 70 08 F5 09  // o.........EOp...
    A190: 16 3A 02 03 DB 09 03 03 00 00 E1 09 00 00 00 00  // .:..............
    A1A0: E2 09 04 00 00 00 74 09 C9 00 00 00 76 09 00 30  // ......t.....v..0
    A1B0: 00 00 7F 09 49 9A 24 00 80 09 51 12 25 02 3B 08  // ....I.$...Q.%.;.
    A1C0: 1C 3C 00 70 56 08 3F 40 00 00 57 08 10 10 00 00  // .<.pV.?@..W.....
    A1D0: 5A 08 97 09 00 00 E7 0D 99 00 C1 50 E8 0D 99 01  // Z..........P....
    A1E0: C1 50 E9 0D 89 00 C1 50 EA 0D 19 03 C1 50 51 08  // .P.....P.....PQ.
    A1F0: 99 00 C1 50 52 08 99 00 C1 50 53 08 99 00 C1 50  // ...PR....PS....P
    A200: 54 08 99 00 C1 50 5C 08 91 09 00 00 83 08 91 01  // T....P\.........
    A210: 00 00 59 08 91 51 00 00 5B 08 91 29 00 00 5D 08  // ..Y..Q..[..)..].
    A220: 91 09 00 00 58 08 91 09 00 00 64 08 13 00 00 00  // ....X.....d.....
    A230: 84 08 95 09 00 00 3D 08 49 92 24 00 80 08 91 09  // ......=.I.$.....
    A240: 00 00 35 08 1E 00 F9 00 41 08 12 68 8F F8 42 08  // ..5.....A..h..B.
    A250: 13 6A 91 F6 77 08 91 13 00 00 70 08 11 0B 00 00  // .j..w.....p.....
    A260: EB 0D 3D 90 80 40 EC 0D 35 50 54 40 ED 0D 3D 50  // ..=..@..5PT@..=P
    A270: 1C 40 EE 0D 35 B0 6A 40 66 08 45 90 80 40 67 08  // .@..5.j@f.E..@g.
    A280: 55 50 80 40 68 08 3D 50 4C 40 69 08 3D 70 80 40  // UP.@h.=PL@i.=p.@
    A290: 6D 08 91 09 01 00 71 08 15 24 00 00 88 08 91 11  // m.....q..$......
    A2A0: 00 00 78 08 91 12 00 00 6B 08 A1 09 00 00 72 08  // ..x.....k.....r.
    A2B0: 91 09 00 00 6C 08 01 09 00 00 74 08 95 51 00 00  // ....l.....t..Q..
    A2C0: 4D 08 11 09 00 00 4E 08 11 2A 00 00 73 08 13 0F  // M.....N..*..s...
    A2D0: 00 00 75 08 91 09 00 00 7D 08 91 09 00 00 89 08  // ..u.....}.......
    A2E0: 91 01 00 00 3E 08 49 92 CC 00 7F 08 91 11 00 00  // ....>.I.........
    A2F0: 7E 08 91 21 03 00 6F 08 91 29 00 00 3C 08 07 00  // ~..!..o..)..<...
    A300: 00 80 81 09 91 0C 00 00 82 09 95 09 00 00 85 09  // ................
    A310: 11 01 00 00 83 09 91 09 00 00 84 09 11 8C 00 00  // ................
    A320: 86 09 91 09 00 00 87 09 11 09 00 00 88 09 91 89  // ................
    A330: 00 00 7B 09 91 49 00 00 7C 09 A1 09 00 00 70 05  // ..{..I..|.....p.
    A340: 00 04 0C 00 8E 0C 00 00 00 00 83 08 91 01 00 00  // ................
    A350: 84 08 95 09 00 00 85 08 97 09 00 00 88 08 91 11  // ................
    A360: 00 00 89 08 91 01 00 00 8A 08 93 09 00 00 50 08  // ..............P.
    A370: 91 09 02 00 3F 08 28 28 72 72 40 08 50 50 28 28  // ....?.((rr@.PP((
    A380: 43 08 80 80 00 00 CD 09 10 00 00 00 C0 09 40 0F  // C.............@.
    A390: 50 00 60 08 E1 09 02 00 00 00 7D 00 01 01 01 02  // P.`.......}.....
    A3A0: 04 20 00 06 20 00 00 03 91 0A 02 92 0A 09 10 00  // . .. ...........
    A3B0: 01 82 04 20 00 06 20 00 00 03 91 0A 08 20 00 00  // ... .. ...... ..
    A3C0: 03 92 0A 09 26 00 01 03 02 0E 00 06 10 00 00 03  // ....&...........
    A3D0: 0E 00 02 0F 00 09 38 00 01 83 02 0E 00 06 10 00  // ......8.........
    A3E0: 00 03 0E 00 08 20 00 00 03 0F 00 09 4E 00 01 05  // ..... ......N...
    A3F0: 02 82 00 06 10 00 00 03 82 00 02 83 00 09 60 00  // ..............`.
    A400: 01 85 02 82 00 06 10 00 00 03 82 00 08 20 00 00  // ............. ..
    A410: 03 83 00 09 76 00 00 00 66 0A 02 02 E8 00 7A 01  // ....v...f.....z.
    A420: FC 08 F2 09 6A 09 00 00 04 01 08 04 32 10 54 76  // ....j.......2.Tv
    A430: 2D 00 62 60 FF 00 00 50 03 05 53 09 04 00 00 00  // -.b`...P..S.....
    A440: 00 10 00 0B 00 40 00 61 00 02 02 00 00 00 00 00  // .....@.a........
    A450: 43 65 07 00 00 00 00 00 00 32 10 54 76 38 00 62  // Ce.......2.Tv8.b
    A460: 60 FF 00 00 50 03 05 53 09 04 00 00 00 00 10 01  // `...P..S........
    A470: 0B 00 40 00 61 03 02 02 00 00 00 00 00 43 65 07  // ..@.a........Ce.
    A480: 00 00 00 00 00 45 44 57 34 30 33 32 42 41 42 47  // .....EDW4032BABG
    A490: 00 32 10 54 76 37 00 62 60 FF 00 00 50 03 05 53  // .2.Tv7.b`...P..S
    A4A0: 09 04 00 00 00 00 10 00 0B 00 40 00 61 91 02 02  // ..........@.a...
    A4B0: 00 00 00 00 00 43 65 07 00 00 00 00 00 4B 34 47  // .....Ce......K4G
    A4C0: 34 31 33 32 35 46 45 00 32 10 54 76 38 00 62 60  // 41325FE.2.Tv8.b`
    A4D0: FF 00 00 50 03 05 53 09 04 00 00 00 00 10 02 0B  // ...P..S.........
    A4E0: 00 40 00 61 66 02 02 00 00 00 00 00 43 65 07 00  // .@.af.......Ce..
    A4F0: 00 00 00 00 48 35 47 51 34 48 32 34 41 4A 52 00  // ....H5GQ4H24AJR.
    A500: 1E 00 24 00 8C 0A 04 95 0A 04 96 0A 04 75 0A 04  // ..$..........u..
    A510: 01 00 44 0C 00 44 0F 00 44 97 0A 04 98 0A 00 FF  // ..D..D..D.......
    A520: FF 00 FF FF FF 00 E8 CE 08 E0 5A 4A 6F A0 0C F0  // ..........ZJo...
    A530: 00 30 66 66 00 00 04 00 06 01 00 00 1E 01 00 00  // .0ff............
    A540: 00 00 F5 C8 02 00 FF FF FF 01 F8 CF 00 E0 5A C6  // ..............Z.
    A550: 6B A0 0D F0 8C 30 00 00 1B 00 04 04 05 01 00 00  // k....0..........
    A560: 3E 01 00 00 86 53 F5 08 03 00 FF FF FF 02 F8 CF  // >....S..........
    A570: 00 E0 5A CE 6F A0 0C F0 8C 30 00 00 1B 00 04 00  // ..Z.o....0......
    A580: 05 03 00 00 1E 01 00 00 00 00 5D 07 03 00 00 00  // ..........].....
    A590: 00 00 2A 00 34 00 2F 0A 04 30 0A 00 D5 0A 04 2C  // ..*.4./..0.....,
    A5A0: 0A 04 28 0A 04 29 0A 04 2A 0A 04 2B 0A 04 81 0A  // ..(..)..*..+....
    A5B0: 04 8B 0A 04 5F 0A 04 DD 09 84 DE 09 84 FF FF 00  // ...._...........
    A5C0: 20 4E 00 01 99 90 00 00 00 00 00 00 22 AA 1C 00  //  N.........."...
    A5D0: 60 88 11 07 C0 54 0B 07 8F 82 C0 00 00 20 41 00  // `....T....... A.
    A5E0: 15 00 14 20 9A 88 40 A1 00 00 00 00 03 01 05 07  // ... ..@.........
    A5F0: 0C 0A 10 0C 40 9C 00 01 99 90 00 00 00 00 00 00  // ....@...........
    A600: 22 AA 1C 00 60 94 12 0F D0 54 0C 08 15 44 91 01  // "...`....T...D..
    A610: 00 20 41 00 1D 03 14 20 9A 88 80 A2 00 00 00 00  // . A.... ........
    A620: 06 01 0A 0F 19 0E 16 0D 80 38 01 01 99 90 00 00  // .........8......
    A630: 00 00 00 00 22 AA 1C 00 A5 AC 35 1F 10 55 0E 0C  // ....".....5..U..
    A640: 21 C7 32 03 00 44 82 00 3D 09 14 20 2A 89 00 A5  // !.2..D..=.. *...
    A650: 00 00 00 00 0C 06 14 1A 33 18 22 10 A0 86 01 01  // ........3.".....
    A660: 77 70 00 00 00 00 00 00 22 AA 1C 00 29 39 57 27  // wp......"...)9W'
    A670: 50 55 0D 0F A6 88 03 04 00 68 C2 00 54 0C 14 20  // PU.......h..T.. 
    A680: AA 89 00 A6 00 00 00 00 0F 0A 19 1E 40 1E 27 12  // ............@.'.
    A690: 48 E8 01 01 77 70 00 00 00 00 00 00 22 AA 1C 00  // H...wp......"...
    A6A0: AD 49 59 32 70 55 0E 12 AD 8A 14 05 00 68 C3 00  // .IY2pU.......h..
    A6B0: 64 0F 14 20 BA 89 80 A7 00 00 00 00 13 0E 20 25  // d.. .......... %
    A6C0: 51 24 2E 13 1C 19 02 01 77 70 00 00 00 00 00 00  // Q$......wp......
    A6D0: 22 AA 1C 00 EF 51 6A 37 90 55 0F 14 B2 0B 95 05  // "....Qj7.U......
    A6E0: 00 6A E4 00 74 02 14 20 CA 89 C0 A8 02 00 00 00  // .j..t.. ........
    A6F0: 15 10 23 28 59 28 33 15 A4 2C 02 01 77 70 00 00  // ..#(Y(3..,..wp..
    A700: 00 00 00 00 22 AA 1C 00 10 D6 6A 39 90 55 0F 14  // ....".....j9.U..
    A710: 34 4C C5 05 00 6A E4 00 74 03 14 20 CA 89 00 A9  // 4L...j..t.. ....
    A720: 02 00 00 00 16 11 24 29 5C 29 35 15 F0 49 02 01  // ......$)\)5..I..
    A730: 77 70 00 00 00 00 00 00 22 AA 1C 00 31 5A 6B 3C  // wp......"...1Zk<
    A740: A0 55 0F 15 B6 8C 15 06 00 6A E4 00 7C 04 14 20  // .U.......j..|.. 
    A750: CA 89 80 A9 02 00 00 00 17 12 26 2B 61 2B 37 15  // ..........&+a+7.
    A760: C4 7A 02 01 77 70 00 00 00 00 00 00 22 AA 1C 00  // .z..wp......"...
    A770: 73 62 7C 41 B0 55 10 16 BA 0D 96 06 00 6C 06 01  // sb|A.U.......l..
    A780: 04 06 14 20 EA 89 40 AA 03 00 00 00 19 14 29 2E  // ... ..@.......).
    A790: 69 2E 3B 16 98 AB 02 01 77 70 00 00 00 00 00 00  // i.;.....wp......
    A7A0: 22 AA 1C 00 B5 6A 7D 46 C0 55 10 17 BE 8E 16 07  // "....j}F.U......
    A7B0: 00 6C 07 01 0C 08 14 20 FA 89 00 AB 03 00 00 00  // .l..... ........
    A7C0: 1B 16 2C 31 71 31 3F 17 6C DC 02 01 77 70 00 00  // ..,1q1?.l...wp..
    A7D0: 00 00 00 00 22 AA 1C 00 18 F7 7E 4F D0 55 11 18  // ....".....~O.U..
    A7E0: 45 50 17 08 00 6C 07 01 14 0C 14 20 FA 89 80 AC  // EP...l..... ....
    A7F0: 03 00 00 00 1E 19 32 37 81 35 46 18 40 0D 03 01  // ......27.5F.@...
    A800: 99 90 00 00 00 00 00 00 22 AA 1C 00 18 F7 7E 4F  // ........".....~O
    A810: D0 55 12 19 46 50 17 08 00 6C 07 01 1D 0C 14 20  // .U..FP...l..... 
    A820: FA 89 80 AC 03 00 00 00 1E 19 32 37 81 36 47 18  // ..........27.6G.
    A830: A8 61 00 02 11 10 00 00 00 00 00 00 22 CC 1C 00  // .a.........."...
    A840: 62 8C 11 0B 20 57 09 08 0D C3 60 01 00 20 42 00  // b... W....`.. B.
    A850: 21 01 14 20 AA 88 00 A0 00 00 00 00 04 03 08 09  // !.. ............
    A860: 16 0D 0E 0E 60 EA 00 02 33 30 00 00 00 00 00 00  // ....`...30......
    A870: 22 CC 1C 00 A5 20 24 19 40 57 0B 0B 16 C5 51 03  // ".... $.@W....Q.
    A880: 00 22 64 00 3A 05 14 20 CA 88 00 A0 00 00 00 00  // ."d.:.. ........
    A890: 09 06 11 14 35 14 17 10 90 5F 01 02 33 30 00 00  // ....5...._..30..
    A8A0: 00 00 00 00 22 CC 1C 00 E7 30 36 25 80 57 0B 0F  // ...."....06%.W..
    A8B0: 9D 86 02 05 00 24 85 00 5A 09 14 20 DA 88 00 A0  // .....$..Z.. ....
    A8C0: 00 00 00 00 0D 08 19 1E 50 1B 1E 12 A0 86 01 02  // ........P.......
    A8D0: 33 30 00 00 00 00 00 00 22 CC 1C 00 08 B5 36 29  // 30......".....6)
    A8E0: 90 57 0B 10 1F C7 92 05 00 44 86 00 62 0A 14 20  // .W.......D..b.. 
    A8F0: 6A 89 00 A0 00 00 00 00 0E 09 1C 21 59 1D 20 13  // j..........!Y. .
    A900: 74 B7 01 02 33 30 00 00 00 00 00 00 22 CC 1C 00  // t...30......"...
    A910: 29 BD 47 2F A0 57 0C 11 23 48 53 06 00 46 A6 00  // ).G/.W..#HS..F..
    A920: 6A 0C 14 20 6A 89 00 A0 00 00 00 00 10 0A 20 26  // j.. j......... &
    A930: 65 20 24 14 48 E8 01 02 33 30 00 00 00 00 00 00  // e $.H...30......
    A940: 22 CC 1C 00 4A C5 48 34 B0 57 0C 12 A6 88 03 07  // "...J.H4.W......
    A950: 00 46 A7 00 72 0E 14 20 7A 89 00 A0 00 00 00 00  // .F..r.. z.......
    A960: 12 0B 23 2A 70 22 27 14 1C 19 02 02 33 30 00 00  // ..#*p"'.....30..
    A970: 00 00 00 00 22 CC 1C 00 8C CD 59 3A C0 57 0D 13  // ....".....Y:.W..
    A980: AA 09 B4 07 00 48 C7 00 7A 00 14 20 7A 89 00 A0  // .....H..z.. z...
    A990: 02 00 00 00 14 0D 27 2E 7B 25 2B 15 F0 49 02 02  // ......'.{%+..I..
    A9A0: 55 50 00 00 00 00 00 00 22 CC 1C 00 AD 51 5A 3E  // UP......"....QZ>
    A9B0: C0 57 0E 14 2D 4A 64 08 00 48 C7 00 03 01 14 20  // .W..-Jd..H..... 
    A9C0: 7A 89 00 A0 03 00 00 00 15 0E 2A 31 86 27 2E 16  // z.........*1.'..
    A9D0: C4 7A 02 02 55 50 00 00 00 00 00 00 22 CC 1C 00  // .z..UP......"...
    A9E0: CE 59 6B 44 D0 57 0F 15 31 CB 24 09 00 4A E7 00  // .YkD.W..1.$..J..
    A9F0: 0B 03 14 20 7A 89 00 A0 03 00 00 00 17 0F 2E 36  // ... z..........6
    AA00: 92 2A 32 17 98 AB 02 02 77 70 00 00 00 00 00 00  // .*2.....wp......
    AA10: 22 CC 1C 00 10 62 6C 49 D0 57 10 16 B5 0B D5 09  // "....blI.W......
    AA20: 00 4A E7 00 14 05 14 20 7A 89 00 A0 03 00 00 00  // .J..... z.......
    AA30: 19 11 31 39 9D 2C 36 17 30 E6 02 02 77 70 00 00  // ..19.,6.0...wp..
    AA40: 00 00 00 00 22 CC 1C 00 10 6A 7D 4F E0 57 11 17  // ...."....j}O.W..
    AA50: B9 8C A5 0A 00 4C 07 01 1C 07 14 20 7A 89 00 A0  // .....L..... z...
    AA60: 03 00 00 00 1B 11 35 3F AA 2F 3A 18 40 0D 03 02  // ......5?./:.@...
    AA70: 77 70 00 00 00 00 00 00 22 CC 1C 00 31 EE 7D 53  // wp......"...1.}S
    AA80: F0 57 11 18 3B CD 35 0B 00 4C 07 01 24 08 14 20  // .W..;.5..L..$.. 
    AA90: 7A 89 00 A0 03 00 00 00 1C 12 38 42 B3 31 3C 19  // z.........8B.1<.
    AAA0: 40 9C 00 03 55 50 00 00 00 00 00 00 22 DD 1C 00  // @...UP......"...
    AAB0: 84 94 12 12 F0 54 0B 07 95 84 71 02 00 20 41 00  // .....T....q.. A.
    AAC0: 1B 04 14 20 9A 88 00 A0 00 00 31 20 06 05 0D 0E  // ... ......1 ....
    AAD0: 27 0F 16 0E 80 38 01 03 77 70 00 00 00 00 00 00  // '....8..wp......
    AAE0: 22 DD 1C 00 E7 AC 35 22 10 55 0D 0A 20 C7 F2 04  // ".....5".U.. ...
    AAF0: 00 24 81 00 34 09 14 20 9A 88 00 A0 00 00 31 20  // .$..4.. ......1 
    AB00: 0C 08 17 1B 4F 17 21 10 90 5F 01 03 77 70 00 00  // ....O.!.._..wp..
    AB10: 00 00 00 00 22 DD 1C 00 29 31 46 26 20 55 0E 0B  // ...."...)1F& U..
    AB20: A2 07 93 05 00 26 A2 00 3C 0A 14 20 AA 88 00 A0  // .....&..<.. ....
    AB30: 00 00 31 20 0D 0A 1A 1D 59 19 23 11 A0 86 01 03  // ..1 ....Y.#.....
    AB40: 77 70 00 00 00 00 00 00 22 DD 1C 00 29 B5 46 29  // wp......"...).F)
    AB50: 30 55 0E 0C 24 48 23 06 00 26 A2 00 44 0B 14 20  // 0U..$H#..&..D.. 
    AB60: AA 88 00 A0 00 00 31 20 0E 0A 1C 20 62 1B 25 11  // ......1 ... b.%.
    AB70: 74 B7 01 03 77 70 00 00 00 00 00 00 22 FF 1C 00  // t...wp......"...
    AB80: 6B BD 57 2F 40 55 0F 0D 28 C9 F3 06 00 48 C5 00  // k.W/@U..(....H..
    AB90: 4C 0D 14 20 5A 89 00 A0 00 00 31 20 10 0C 20 24  // L.. Z.....1 .. $
    ABA0: 6F 1E 29 12 48 E8 01 03 77 70 00 00 00 00 00 00  // o.).H...wp......
    ABB0: 22 FF 1C 00 8C C5 58 34 60 55 0F 0F 2C 4A B4 07  // ".....X4`U..,J..
    ABC0: 00 48 C5 00 5C 0F 14 20 5A 89 00 A0 00 00 31 20  // .H..\.. Z.....1 
    ABD0: 12 0D 23 28 7B 22 2D 13 1C 19 02 03 77 70 00 00  // ..#({"-.....wp..
    ABE0: 00 00 00 00 22 33 9D 00 CE CD 59 39 80 55 11 11  // ...."3....Y9.U..
    ABF0: AE 8A 84 08 00 48 C6 00 6C 00 14 20 6A 89 00 A0  // .....H..l.. j...
    AC00: 02 00 31 20 14 0F 26 2B 88 25 2F 15 A4 2C 02 03  // ..1 ..&+.%/..,..
    AC10: 77 70 00 00 00 00 00 00 22 33 9D 00 CE 51 6A 3B  // wp......"3...Qj;
    AC20: 80 55 11 11 2F CB D4 08 00 4A E6 00 6C 00 14 20  // .U../....J..l.. 
    AC30: 6A 89 00 A0 02 00 31 20 15 0F 27 2D 8D 26 30 15  // j.....1 ..'-.&0.
    AC40: F0 49 02 03 77 70 00 00 00 00 00 00 22 33 9D 00  // .I..wp......"3..
    AC50: CE 51 6A 3D 90 55 11 12 30 CB 44 09 00 4A E6 00  // .Qj=.U..0.D..J..
    AC60: 74 01 14 20 6A 89 00 A0 02 00 31 20 15 0F 29 2F  // t.. j.....1 ..)/
    AC70: 94 27 31 16 C4 7A 02 03 99 90 00 00 00 00 00 00  // .'1..z..........
    AC80: 22 55 9D 00 10 DE 7B 44 80 55 13 12 B7 8C 45 0A  // "U....{D.U....E.
    AC90: 00 4C 06 01 75 04 14 20 6A 89 00 A0 02 00 31 20  // .L..u.. j.....1 
    ACA0: 18 11 2D 34 A4 2A 38 16 98 AB 02 03 99 90 00 00  // ..-4.*8.........
    ACB0: 00 00 00 00 22 55 9D 00 31 62 7C 48 90 55 13 13  // ...."U..1b|H.U..
    ACC0: 39 CD D5 0A 00 4C 06 01 7D 05 14 20 6A 89 00 A0  // 9....L..}.. j...
    ACD0: 02 00 31 20 19 12 30 37 AD 2C 3A 17 40 0D 03 03  // ..1 ..07.,:.@...
    ACE0: BB B0 00 00 00 00 00 00 22 88 9D 00 73 EE 8D 53  // ........"...s..S
    ACF0: 80 55 15 13 3E CF 56 0C 00 4E 26 01 7E 05 14 20  // .U..>.V..N&.~.. 
    AD00: 6A 89 00 A0 02 00 31 20 1C 14 38 40 C5 30 3F 17  // j.....1 ..8@.0?.
    AD10: 00 00 00 00 06 00 08 00 0E 00 44 FF FF 00 FF FF  // ..........D.....
    AD20: FF 00 1F 00 00 00 FF FF FF 01 1F 00 00 00 FF FF  // ................
    AD30: FF 02 1F 00 00 00 FF FF FF 03 1F 00 00 00 FF FF  // ................
    AD40: FF 04 1F 00 00 00 FF FF FF 05 1F 00 00 00 FF FF  // ................
    AD50: FF 06 1F 00 00 00 FF FF FF 07 1F 00 00 00 FF FF  // ................
    AD60: FF 08 1F 00 00 00 FF FF FF 09 1F 00 00 00 FF FF  // ................
    AD70: FF 0A 1F 00 00 00 FF FF FF 0B 1F 00 00 00 00 00  // ................
    AD80: 00 00 E1 B4 88 D6 9B 00 A5 3F 21 00 FD 02 D1 00  // .........?!.....
    AD90: 81 F6 D2 00 88 D6 9B 00 66 3F 05 00 F4 9B 41 00  // ........f?....A.
    ADA0: A6 B0 E6 00 4E 1E 6F 06 D1 00 42 D6 D3 00 AC 3F  // ....N.o...B....?
    ADB0: 05 00 81 56 9F 00 E6 BB 40 00 16 B1 F4 00 88 D6  // ...V....@.......
    ADC0: 9B 00 E5 3D 28 00 E1 B1 11 E6 B3 00 F4 3B 05 00  // ...=(........;..
    ADD0: 6F 06 CA 00 42 D6 D3 00 BC AB 21 00 88 76 97 00  // o...B.....!..v..
    ADE0: E6 BB 08 00 A6 B0 F4 00 4B 1E 4F 07 D1 00 C2 D2  // ........K.O.....
    ADF0: D3 00 88 F6 D2 00 F4 3B 05 00 66 3F 21 00 A6 90  // .......;..f?!...
    AE00: BD 00 81 76 B3 00 F4 3B 05 00 30 00 3C 00 80 0A  // ...v...;..0.<...
    AE10: 04 99 0A 04 82 0A 04 74 0A 04 00 00 44 02 00 44  // .......t....D..D
    AE20: 03 00 44 04 00 44 05 00 44 09 00 44 0A 00 44 0B  // ..D..D..D..D..D.
    AE30: 00 44 0D 00 44 4E 0A 04 54 0A 00 FF FF 00 FF FF  // .D..DN..T.......
    AE40: FF 00 72 21 60 50 00 E0 05 70 13 46 03 61 00 00  // ..r!`P...p.F.a..
    AE50: 00 00 FF FF 0C 0C 20 3C 00 00 00 03 00 63 04 06  // ...... <.....c..
    AE60: 00 00 23 00 00 00 00 00 00 00 98 00 02 00 85 08  // ..#.............
    AE70: 00 00 30 00 00 00 AA AA AA 00 00 00 00 00 0C 01  // ..0.............
    AE80: 03 06 38 C1 01 00 F8 24 01 00 38 00 06 0A 6A 24  // ..8....$..8...j$
    AE90: 09 00 80 1A 06 00 E8 03 00 00 0C 01 18 08 20 03  // .............. .
    AEA0: 00 00 B0 04 00 00 38 C1 01 00 38 C1 01 00 00 00  // ......8...8.....
    AEB0: 00 00 00 00 00 00 00 00 00 00 34 C4 01 00 43 01  // ..........4...C.
    AEC0: 00 00 00 00 00 00 00 00 00 00 C0 FF 08 0F 08 31  // ...............1
    AED0: AC 10 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    AEE0: 00 00 4B 00 00 00 00 00 00 00 2B 00 00 00 00 00  // ..K.......+.....
    AEF0: 00 00 10 00 00 00 00 00 00 00 9B 02 00 00 03 00  // ................
    AF00: 00 00 5E 01 00 00 08 02 00 00 BC 02 00 00 0C 03  // ..^.............
    AF10: 00 00 5C 03 00 00 C0 03 00 00 10 04 00 00 60 04  // ..\...........`.
    AF20: 00 00 B0 71 0B 00 00 35 0C 00 F8 59 0D 00 F0 7E  // ...q...5...Y...~
    AF30: 0E 00 40 42 0F 00 90 05 10 00 E0 C8 10 00 30 8C  // ..@B..........0.
    AF40: 11 00 29 01 00 00 A2 04 00 00 BE 01 00 00 1B 00  // ..).............
    AF50: B8 0B 00 00 6B B6 43 F8 B5 9C 05 00 7E 28 FF FF  // ....k.C.....~(..
    AF60: 00 00 00 00 F3 0D 03 00 7F 60 FE FF 00 00 00 00  // .........`......
    AF70: 23 FF 58 00 00 00 00 00 00 00 8A 00 EB FF FF FF  // #.X.............
    AF80: 5C 12 00 01 00 01 00 01 00 00 34 00 03 01 01 07  // \.........4.....
    AF90: 0C 00 06 00 00 00 00 00 00 00 04 00 24 00 00 04  // ............$...
    AFA0: 00 00 02 80 10 00 00 00 00 00 20 03 00 00 10 00  // .......... .....
    AFB0: 52 03 02 00 00 00 84 03 02 00 10 00 B6 03 28 00  // R.............(.
    AFC0: 03 01 FF FF FF 00 7D 00 B8 0B 01 00 00 00 FF FF  // ......}.........
    AFD0: FF 00 32 00 4E 0C 02 00 00 00 FF FF FF 00 7C 01  // ..2.N.........|.
    AFE0: 45 0C 07 12 00 00 64 00 02 03 14 00 00 00 4E 2D  // E.....d.......N-
    AFF0: 00 00 70 06 02 06 00 00 00 00 1E 21 52 00 4C 00  // ..p........!R.L.
    B000: 03 FF FF 00 1E 22 55 00 4C 00 09 FF FF 00 20 21  // ....."U.L..... !
    B010: 58 00 4C 00 0A FF FF 00 20 22 5B 00 4C 00 0B FF  // X.L..... "[.L...
    B020: FF 00 21 21 5E 00 4C 00 0C FF FF 00 21 22 61 00  // ..!!^.L.....!"a.
    B030: 4C 00 0D FF FF 00 FF FF 14 04 FF 15 04 FF 16 04  // L...............
    B040: FF 17 04 FF 18 04 FF 19 04 FF 18 00 02 01 02 00  // ................
    B050: 08 00 80 00 00 02 00 04 00 08 40 00 01 00 10 00  // ..........@.....
    B060: FF FF 38 00 02 01 04 4A 03 00 7C 92 00 00 01 04  // ..8....J..|.....
    B070: 1E 00 3C 00 00 00 F8 24 01 00 01 03 1E 00 3C 00  // ..<....$......<.
    B080: 1E 00 F0 49 02 00 01 02 1E 00 3C 00 1E 00 E0 93  // ...I......<.....
    B090: 04 00 01 01 1E 00 00 00 1E 00 55 00 01 01 01 10  // ..........U.....
    B0A0: 02 00 8D 02 10 00 11 02 00 01 00 21 00 01 00 90  // ...........!....
    B0B0: 92 04 00 45 00 02 00 50 00 14 00 70 00 84 00 6C  // ...E...P...p...l
    B0C0: 02 02 00 71 02 01 00 4C 02 02 00 4E 02 02 00 50  // ...q...L...N...P
    B0D0: 02 02 00 52 02 02 00 81 02 40 00 8C 99 02 00 94  // ...R.....@......
    B0E0: 99 01 00 0A 9B 08 00 0A EE F6 01 00 00 00 00 00  // ................
    B0F0: 97 00 01 02 00 08 02 01 02 00 52 47 52 02 02 65  // ..........RGR..e
    B100: 02 07 52 0D 55 00 02 52 0D 52 23 2C 25 02 01 3D  // ..R.U..R.R#,%..=
    B110: 25 02 06 45 17 00 51 02 52 3D 02 05 02 00 00 08  // %..E..Q.R=......
    B120: 09 52 20 52 39 66 04 02 8C 02 2E 00 02 0D 02 01  // .R R9f..........
    B130: 00 52 43 02 05 02 04 00 52 03 52 43 02 0D 02 02  // .RC.....R.RC....
    B140: 03 52 43 02 F9 02 01 52 05 02 01 02 00 0E E5 02  // .RC....R........
    B150: 08 52 0A 02 05 02 02 00 0E 06 52 43 02 05 02 04  // .R........RC....
    B160: 00 20 03 52 43 02 05 02 30 75 00 40 52 0B 02 05  // . .RC...0u.@R...
    B170: 02 04 00 52 03 52 43 02 01 02 01 0E E5 02 08 52  // ...R.RC........R
    B180: 0B 0D 65 D0 05 02 5B 00 57 00 01 02 00 00 37 00  // ..e...[.W.....7.
    B190: 00 52 14 02 08 00 0D 1A 32 08 00 0B 1A 02 88 00  // .R......2.......
    B1A0: 0E 1A 32 88 00 0C 1A 03 00 46 04 1A 09 05 46 FF  // ..2......F....F.
    B1B0: FF FF 02 56 00 40 03 20 40 01 1A 09 25 40 03 75  // ...V.@. @...%@.u
    B1C0: 02 46 40 03 18 40 5C 1B 2D 02 46 40 27 00 46 06  // .F@..@\.-.F@'.F.
    B1D0: 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A 01 40 5B 00  // .-.@\....A...@[.
    B1E0: B7 00 01 01 04 00 37 00 00 01 05 0E 00 02 00 40  // ......7........@
    B1F0: 01 37 03 00 5C 05 02 00 FC 7F FF FF 02 00 00 00  // .7..\...........
    B200: 5C 05 10 00 FF FF 9D FF 00 09 41 00 5C 05 21 00  // \.........A.\.!.
    B210: 7F FF FF FF 80 00 00 00 5C 05 40 00 BE 3F FF FF  // ........\.@..?..
    B220: 40 40 01 00 37 00 00 01 05 0E 00 70 00 01 10 37  // @@..7......p...7
    B230: 03 00 01 05 70 00 00 40 00 01 5C 05 A0 00 0F FF  // ....p..@..\.....
    B240: FE DF 10 00 01 60 5C 05 A2 00 7F F3 97 FF 86 04  // .....`\.........
    B250: 88 5A 5C 05 A4 00 1B F0 FF FF 20 0D 40 04 5C 05  // .Z\....... .@.\.
    B260: B1 00 FF 2D FF FF 80 50 18 96 37 00 00 54 00 06  // ...-...P..7..T..
    B270: 00 01 25 C5 14 02 01 05 C2 14 7F 00 00 00 01 05  // ..%.............
    B280: E8 15 70 3D 29 0A 01 05 E9 15 9C A4 0D 20 01 05  // ..p=)........ ..
    B290: EA 15 20 95 87 00 5B 00 13 01 01 01 04 00 37 00  // .. ...[.......7.
    B2A0: 00 03 01 00 00 54 20 24 15 01 25 00 08 0F 01 25  // .....T $..%....%
    B2B0: 28 08 0F 5C 25 2B 08 F8 01 55 00 00 52 34 52 3E  // (..\%+...U..R4R>
    B2C0: 03 24 40 0C 00 15 25 40 04 5C 62 01 08 0F 40 01  // .$@...%@.\b...@.
    B2D0: 04 D7 09 24 00 01 04 02 08 00 00 01 04 1C 08 20  // ...$........... 
    B2E0: 00 66 18 2D 0C 42 10 00 56 00 40 03 0C 40 00 00  // .f.-.B..V.@..@..
    B2F0: 3E 0D 40 00 00 44 73 00 01 02 00 00 40 01 04 01  // >.@..Ds.....@...
    B300: 00 02 00 2D 0D 42 06 00 43 53 00 0D 25 68 15 03  // ...-.B..CS..%h..
    B310: 54 00 34 FE 01 05 35 FE 03 0A 03 0A 01 05 35 FE  // T.4...5.......5.
    B320: 04 0A 04 0A 01 00 03 0A 69 15 01 00 04 0A 69 15  // ........i.....i.
    B330: 5C 25 D5 09 FB 01 0D 05 D5 09 00 08 00 40 54 00  // \%...........@T.
    B340: 34 FE 01 05 35 FE 03 0A 0C 00 01 05 35 FE 04 0A  // 4...5.......5...
    B350: 0C 00 52 0F 66 1C 2D 0C 42 0A 00 55 00 00 52 12  // ..R.f.-.B..U..R.
    B360: 66 1C 2D 0C 42 0C 00 02 0D 00 01 00 52 1F 52 1E  // f.-.B.......R.R.
    B370: 02 05 00 30 75 00 00 52 10 4C E5 00 20 44 ED 00  // ...0u..R.L.. D..
    B380: 0D 25 80 0A 18 02 25 00 FF 52 40 4A 65 80 0A 0F  // .%....%..R@Je...
    B390: 49 0E 01 52 03 03 20 00 80 0A 09 25 00 FC 52 1E  // I..R.. ....%..R.
    B3A0: 5C 22 80 0A 03 00 52 07 52 48 5B 00 FF 00 02 01  // \"....R.RH[.....
    B3B0: 00 04 37 00 00 66 0C 03 0C 41 00 00 2D 0A 41 42  // ..7..f...A..-.AB
    B3C0: 2D 0D 42 04 00 3D 24 00 03 00 44 30 00 2D 0D 42  // -.B..=$...D0.-.B
    B3D0: 04 00 3E 0A 42 41 44 FB 00 43 19 00 56 00 43 03  // ..>.BAD..C..V.C.
    B3E0: A4 41 02 00 03 F2 41 41 03 0C 41 00 00 3E 0D 41  // .A....AA..A..>.A
    B3F0: 00 00 44 FB 00 3E 0D 41 61 48 49 6B 00 3E E5 41  // ..D..>.AaHIk.>.A
    B400: 10 46 5F 00 1B 3D 41 01 43 6B 00 09 E5 41 03 15  // .F_..=A.Ck...A..
    B410: 3D 41 02 2D E5 41 0C 03 3A 43 41 54 00 00 00 33  // =A.-.A..:CAT...3
    B420: 0D 41 01 00 01 0A 00 00 41 0D 02 01 00 44 2D 0D  // .A......A....D-.
    B430: 41 02 00 01 0A 00 00 41 03 32 43 41 4B E5 00 01  // A......A.2CAK...
    B440: 49 D7 00 07 02 01 00 45 2D 0D 41 01 00 01 0A 00  // I......E-.A.....
    B450: 00 41 4A 02 01 00 44 44 B9 00 03 29 43 00 0E A2  // .AJ...DD...)C...
    B460: 00 44 43 C1 00 03 29 43 00 08 A2 00 45 33 0D 41  // .DC...)C....E3.A
    B470: 03 00 01 0A 00 00 41 03 3A 43 41 07 02 01 00 45  // ......A.:CA....E
    B480: 43 FA 00 0D 02 01 00 44 33 0D 41 01 00 01 0A 00  // C......D3.A.....
    B490: 00 41 3D A5 00 01 44 F5 00 07 02 01 00 45 43 FA  // .A=...D......EC.
    B4A0: 00 0D 02 01 00 44 5B 55 20 00 5B 00 AC 01 01 02  // .....D[U .[.....
    B4B0: 14 00 37 00 00 4B E5 00 08 44 23 00 01 05 82 00  // ..7..K...D#.....
    B4C0: 70 03 00 80 3C 05 83 00 00 00 02 00 46 68 01 03  // p...<.......Fh..
    B4D0: 01 04 00 02 E5 00 01 52 3C 01 05 82 00 40 01 50  // .......R<....@.P
    B4E0: C0 0D 25 83 00 08 66 FF 2D 0D 42 6C 01 01 05 82  // ..%...f.-.Bl....
    B4F0: 00 40 03 50 C0 4A 25 83 00 01 44 56 00 2D 0D 42  // .@.P.J%...DV.-.B
    B500: 20 00 03 04 00 08 00 03 04 01 0C 00 03 04 02 10  //  ...............
    B510: 00 03 04 03 14 00 01 04 82 00 04 00 4A 05 83 00  // ............J...
    B520: 80 00 00 00 44 97 00 2D 05 00 10 00 00 00 2D 05  // ....D..-......-.
    B530: 01 10 00 00 00 2D 05 02 10 00 00 00 2D 05 03 10  // .....-......-...
    B540: 00 00 00 4A 25 83 00 02 44 B8 00 01 04 82 00 1C  // ...J%...D.......
    B550: 00 0D 25 83 00 10 01 04 82 00 04 00 4A 25 83 00  // ..%.........J%..
    B560: 01 44 AA 00 01 04 82 00 18 00 01 21 83 00 02 01  // .D.........!....
    B570: 02 82 00 00 01 01 83 00 01 56 00 40 03 29 40 02  // .........V.@.)@.
    B580: 15 25 40 06 01 04 82 00 00 00 5C 8A 83 00 3F 00  // .%@.......\...?.
    B590: 40 01 02 82 00 01 01 99 83 00 04 01 02 82 00 03  // @...............
    B5A0: 01 99 83 00 05 01 04 82 00 1C 00 0D A5 83 00 10  // ................
    B5B0: 01 02 82 00 01 0D E5 83 00 04 01 02 82 00 02 01  // ................
    B5C0: 01 83 00 03 01 02 82 00 01 01 09 83 00 05 0D E5  // ................
    B5D0: 83 00 02 01 04 82 00 1C 00 0D 25 83 00 01 01 04  // ..........%.....
    B5E0: 82 00 04 00 4A 25 83 00 02 44 32 01 01 05 82 00  // ....J%...D2.....
    B5F0: 40 01 50 C0 07 25 83 00 F7 02 02 00 04 4C E5 04  // @.P..%.......L..
    B600: 08 49 68 01 52 2F 02 01 01 00 02 02 00 04 02 E5  // .Ih.R/..........
    B610: 00 02 52 3F 5B 7A 40 00 68 02 50 C0 78 02 50 C0  // ..R?[z@.h.P.x.P.
    B620: 8C 02 50 C0 90 02 50 C0 94 02 50 C0 98 02 50 C0  // ..P...P...P...P.
    B630: AC 02 50 C0 B0 02 50 C0 E4 02 50 C0 F4 02 50 C0  // ..P...P...P...P.
    B640: 08 03 50 C0 0C 03 50 C0 10 03 50 C0 14 03 50 C0  // ..P...P...P...P.
    B650: 28 03 50 C0 2C 03 50 C0 22 01 02 01 0C 04 37 00  // (.P.,.P.".....7.
    B660: 00 5C 25 2B 08 F8 01 54 20 24 15 07 25 EB 09 FE  // .\%+...T $..%...
    B670: 4B E5 00 40 44 A1 00 01 05 91 0A 0D 00 00 00 03  // K..@D...........
    B680: B0 01 92 0A 52 3B 03 01 00 00 56 38 00 3E 01 00  // ....R;....V8.>..
    B690: 01 45 62 00 3E 01 00 02 45 53 00 01 05 91 0A 0D  // .Eb.>...ES......
    B6A0: 00 00 00 07 A5 92 0A F7 43 A1 00 01 05 91 0A 0D  // ........C.......
    B6B0: 00 00 00 54 38 92 0A 43 A1 00 03 00 02 96 0A 03  // ...T8..C........
    B6C0: F8 01 99 0A 01 05 91 0A 00 00 00 00 03 08 01 92  // ................
    B6D0: 0A 01 05 91 0A 0D 00 00 00 5C 8D 92 0A 00 00 80  // .........\......
    B6E0: 00 07 E5 99 0A BF 07 65 96 0A F0 01 05 91 0A 00  // .......e........
    B6F0: 00 00 00 01 0D 92 0A 77 77 02 01 01 00 52 10 02  // .......ww....R..
    B700: 01 01 00 02 E5 01 01 52 3F 52 30 02 E5 01 02 02  // .......R?R0.....
    B710: 01 02 00 52 3F 07 25 F3 09 FC 55 00 01 4A 25 80  // ...R?.%...U..J%.
    B720: 0A 08 49 D1 00 02 25 01 07 52 40 4B E5 00 40 44  // ..I...%..R@K..@D
    B730: 12 01 01 05 91 0A 0D 00 00 00 4C A5 01 80 49 ED  // ..........L...I.
    B740: 00 54 38 92 0A 01 B2 92 0A 01 52 3B 3E 01 00 01  // .T8.......R;>...
    B750: 46 12 01 01 FA 99 0A 01 01 6A 96 0A 02 01 05 91  // F........j......
    B760: 0A 00 00 00 00 01 0A 92 0A 01 0D 25 EB 09 01 07  // ...........%....
    B770: 25 2B 08 F8 0D 25 24 15 03 5B CB 04 01 07 08 08  // %+...%$..[......
    B780: 37 00 00 3D 25 01 FF 44 95 04 3D 25 01 19 46 91  // 7..=%..D..=%..F.
    B790: 04 3D 25 01 02 47 91 04 3D 25 01 14 45 95 04 3D  // .=%..G..=%..E..=
    B7A0: 05 00 00 00 00 00 44 43 02 4B E5 01 02 49 61 00  // ......DC.K...Ia.
    B7B0: 02 A9 02 02 55 28 02 0E E5 01 80 3D 05 00 40 4B  // ....U(.....=..@K
    B7C0: 4C 00 45 61 00 0D A5 C2 9D 40 03 21 41 01 33 25  // L.Ea.....@.!A.3%
    B7D0: 41 14 03 22 43 41 0D E2 C1 48 44 66 FF 2D 0D 42  // A.."CA...HDf.-.B
    B7E0: AB 04 03 39 40 01 09 0D 40 30 00 1B 0D 40 02 2D  // ...9@...@0...@.-
    B7F0: 0A 42 40 56 00 00 56 00 01 02 05 03 40 01 00 00  // .B@V..V.....@...
    B800: 02 65 01 01 20 05 00 0A 00 00 00 03 02 46 40 3D  // .e.. ........F@=
    B810: 05 00 80 8D 5B 00 47 A6 00 0E E5 01 08 55 28 01  // ....[.G......U(.
    B820: 4B E5 01 08 44 B1 00 1B 05 46 01 3E 05 46 A0 2F  // K...D....F.>.F./
    B830: C5 01 48 C6 00 2C 65 01 01 15 05 46 01 43 B1 00  // ..H..,e....F.C..
    B840: 14 2D 01 05 03 05 01 00 00 01 00 4B E5 01 02 49  // .-.........K...I
    B850: 33 01 4B E5 01 80 49 DF 00 27 04 46 00 00 3E 05  // 3.K...I..'.F..>.
    B860: 41 00 00 00 00 44 45 01 03 04 40 00 00 03 02 00  // A....DE...@.....
    B870: 41 27 02 40 41 03 02 40 00 3E 05 41 00 00 00 00  // A'.@A..@.>.A....
    B880: 49 F3 00 7C 05 00 00 00 01 00 7E 04 40 00 00 7C  // I..|......~.@..|
    B890: 04 40 00 00 7E 02 40 00 03 02 01 40 3E 05 01 33  // .@..~.@....@>..3
    B8A0: F3 00 00 48 33 01 03 05 01 00 00 01 00 27 04 46  // ...H3........'.F
    B8B0: 00 00 7C 02 01 41 7E 04 40 00 00 03 0A 00 40 27  // ..|..A~.@.....@'
    B8C0: 04 46 00 00 03 8A 00 40 56 18 01 43 AF 01 7C 02  // .F.....@V..C..|.
    B8D0: 40 00 7E 05 40 A0 86 01 00 03 01 41 03 09 05 41  // @.~.@......A...A
    B8E0: 03 00 00 00 6F 02 40 41 7C 05 40 45 0C 00 00 7E  // ....o.@A|.@E...~
    B8F0: 05 40 40 4B 4C 00 3E 05 40 00 00 00 00 49 8A 01  // .@@KL.>.@....I..
    B900: 03 25 40 01 7C 05 40 40 4B 4C 00 7E 05 40 45 0C  // .%@.|.@@KL.~.@E.
    B910: 00 00 03 01 41 03 09 05 41 03 00 00 00 75 02 40  // ....A...A....u.@
    B920: 41 1B 05 40 01 2D 02 00 40 66 FF 2D 0D 42 9F 04  // A..@.-..@f.-.B..
    B930: 56 00 40 03 21 40 01 33 25 40 14 15 25 40 01 2D  // V.@.!@.3%@..%@.-
    B940: 0A 42 40 03 0C 48 00 00 4A 65 E2 48 10 44 FE 02  // .B@..H..Je.H.D..
    B950: 03 39 41 01 09 0D 41 30 00 1B 0D 41 04 3C 22 5E  // .9A...A0...A.<"^
    B960: 49 41 49 22 02 3C 21 23 49 03 49 22 02 3C 29 25  // IAI".<!#I.I".<)%
    B970: 49 03 49 22 02 03 20 41 5F 49 09 25 41 E0 3E 29  // I.I".. A_I.%A.>)
    B980: 41 01 49 22 02 4B E5 01 40 49 F6 02 3C 02 20 49  // A.I".K..@I..<. I
    B990: 00 49 22 02 3C 0A 22 49 01 44 26 02 0E E5 01 01  // .I".<."I.D&.....
    B9A0: 3A 00 00 4B E5 01 01 44 69 04 4B E5 01 02 49 43  // :..K...Di.K...IC
    B9B0: 02 3D 25 02 05 46 43 02 55 28 02 52 23 56 00 40  // .=%..FC.U(.R#V.@
    B9C0: 03 21 40 01 33 25 40 14 03 0A 48 40 07 25 60 01  // .!@.3%@...H@.%`.
    B9D0: FE 66 FF 2D 0D 42 9F 04 56 00 40 03 21 40 01 33  // .f.-.B..V.@.!@.3
    B9E0: 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00  // %@..%@.-.B@..H..
    B9F0: 07 65 23 49 FE 54 00 21 49 54 00 22 49 07 65 E2  // .e#I.T.!IT."I.e.
    BA00: 48 EF 4A 65 E2 48 20 49 88 02 07 65 F2 48 EF 4A  // H.Je.H I...e.H.J
    BA10: 65 F2 48 20 49 95 02 3D 05 00 00 00 00 00 49 FE  // e.H I..=......I.
    BA20: 02 4A A5 C1 48 80 44 D2 02 56 00 41 5C 25 E0 48  // .J..H.D..V.A\%.H
    BA30: F8 06 51 02 4A 65 E0 48 01 44 BA 02 2D A5 41 01  // ..Q.Je.H.D..-.A.
    BA40: 2D 0D 48 10 00 3E A5 41 04 45 B2 02 56 08 48 03  // -.H..>.A.E..V.H.
    BA50: 21 41 01 33 25 41 14 03 22 43 41 07 E2 C1 48 45  // !A.3%A.."CA...HE
    BA60: 4A E5 C1 48 3F 49 91 04 07 A5 C2 9D BF 43 91 04  // J..H?I.......C..
    BA70: 01 02 20 49 00 43 17 04 01 05 DA 48 80 88 01 00  // .. I.C.....H....
    BA80: 3D A5 01 00 49 1F 03 3D 05 00 E0 3B 66 00 45 1F  // =...I..=...;f.E.
    BA90: 03 07 25 DB 48 FE 43 3F 03 0D 25 DB 48 01 3D A5  // ..%.H.C?..%.H.=.
    BAA0: 01 02 49 3F 03 4B E5 01 08 44 3F 03 01 05 7A 49  // ..I?.K...D?...zI
    BAB0: 80 88 01 00 0D 25 7B 49 01 0D 25 5F 49 01 03 39  // .....%{I..%_I..9
    BAC0: 40 01 09 0D 40 30 00 1B 0D 40 04 01 22 5E 49 40  // @...@0...@.."^I@
    BAD0: 0D 65 5F 49 80 3E 25 40 02 44 66 03 03 65 40 04  // .e_I.>%@.Df..e@.
    BAE0: 5C 6A 5F 49 FB 40 66 FF 56 00 40 2D 0D 42 BB 04  // \j_I.@f.V.@-.B..
    BAF0: 03 21 40 03 09 0D 40 03 00 15 0D 40 02 2D 0A 42  // .!@...@....@.-.B
    BB00: 40 01 0C 24 49 00 00 01 E4 26 49 02 00 0D 25 26  // @..$I....&I...%&
    BB10: 49 02 01 21 23 49 03 01 A5 23 49 E8 01 02 20 49  // I..!#I...#I... I
    BB20: 00 54 00 21 49 01 02 22 49 01 4B E5 01 08 44 BF  // .T.!I.."I.K...D.
    BB30: 03 07 65 5F 49 FE 43 C4 03 0D 65 5F 49 01 5C 29  // ..e_I.C...e_I.\)
    BB40: 5F 49 1F 01 01 8D 2B 49 20 03 01 29 25 49 03 07  // _I....+I ..)%I..
    BB50: 65 5F 49 7F 5C 65 E2 48 E3 04 4A 65 E2 48 20 49  // e_I.\e.H..Je.H I
    BB60: E0 03 0D 65 E2 48 10 4A 65 E2 48 20 44 ED 03 4B  // ...e.H.Je.H D..K
    BB70: E5 01 02 49 17 04 5C 65 F2 48 E3 04 4A 65 F2 48  // ...I..\e.H..Je.H
    BB80: 20 49 02 04 0D 65 F2 48 10 4A 65 F2 48 20 44 0F  //  I...e.H.Je.H D.
    BB90: 04 3D A5 01 02 44 25 04 3D A5 01 03 49 2C 04 4B  // .=...D%.=...I,.K
    BBA0: E5 01 80 49 3A 04 03 01 00 02 02 B1 02 01 52 41  // ...I:.........RA
    BBB0: 02 02 02 00 0D 65 5F 49 40 4A 65 5F 49 20 44 3F  // .....e_I@Je_I D?
    BBC0: 04 07 65 5F 49 BF 56 00 40 03 21 40 01 33 25 40  // ..e_I.V.@.!@.3%@
    BBD0: 14 03 0A 48 40 0D 25 60 01 01 51 01 4B E5 01 02  // ...H@.%`..Q.K...
    BBE0: 49 91 04 3A 00 00 3D 25 02 05 46 91 04 02 25 03  // I..:..=%..F...%.
    BBF0: 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08 A5 03  // ......a.........
    BC00: 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00 5B 02  // .........R.:..[.
    BC10: 25 01 0B 43 69 04 7A 2C 00 00 00 A0 00 40 51 E0  // %..Ci.z,.....@Q.
    BC20: 51 80 52 20 53 40 42 0F 00 40 42 0F 00 40 42 0F  // Q.R S@B..@B..@B.
    BC30: 00 40 42 0F 00 A1 83 64 00 24 83 32 00 A3 76 19  // .@B....d.$.2..v.
    BC40: 00 A3 76 0C 00 00 87 01 02 01 00 00 37 00 00 3D  // ..v.........7..=
    BC50: 65 00 07 44 BC 00 56 00 40 20 25 00 03 03 0A 48  // e..D..V.@ %....H
    BC60: 40 3D 65 00 01 44 BB 00 56 08 48 03 21 48 00 01  // @=e..D..V.H.!H..
    BC70: 0D FA 02 02 00 52 14 01 05 8D 1A 00 00 40 00 01  // .....R.......@..
    BC80: 25 BE 1B 02 01 A5 CC 1A C0 01 0D 91 1A 45 01 5C  // %............E.\
    BC90: 05 DA 1A F0 FF FF FF 02 00 00 00 07 25 03 1B FB  // ............%...
    BCA0: 0D 25 7D 1A 01 01 05 34 1B 01 00 00 00 5C 05 36  // .%}....4.....\.6
    BCB0: 1B EE FE 00 00 11 01 FF 7F 01 25 3A 1B 11 5C 05  // ..........%:..\.
    BCC0: 32 1B F8 F8 F8 FF 00 00 00 00 01 0D 33 1B FF 7F  // 2...........3...
    BCD0: 01 05 B3 1B 07 40 00 00 0D A5 B6 1B 01 01 05 31  // .....@.........1
    BCE0: 1B 00 08 00 04 01 0D 86 1B 04 00 01 0D E7 1B 01  // ................
    BCF0: 00 5C 05 00 1B FF FF FD FF 00 00 02 00 3A 00 00  // .\...........:..
    BD00: 5B 5B 5C 05 F6 02 FF 00 FE 9F 04 FC 00 20 01 05  // [[\.......... ..
    BD10: F9 02 10 27 02 00 01 05 14 03 00 08 00 20 01 05  // ...'......... ..
    BD20: 0C 03 00 90 00 10 01 25 09 01 01 01 05 3B 01 64  // .......%.....;.d
    BD30: 02 12 00 01 05 30 01 A0 86 11 00 01 E5 09 17 64  // .....0.........d
    BD40: 01 05 22 17 00 00 9B 02 01 05 06 17 21 84 20 00  // ..".........!. .
    BD50: 01 8D E5 17 64 00 01 25 E4 17 01 01 05 31 01 3C  // ....d..%.....1.<
    BD60: 00 01 08 5C 65 D4 00 FC 02 01 0D FC 00 00 01 01  // ...\e...........
    BD70: 05 2F 48 00 00 00 00 01 05 04 48 00 00 00 00 01  // ./H.......H.....
    BD80: 05 3A 48 0F 00 00 00 0D E5 CB 05 10 01 05 F8 16  // .:H.............
    BD90: 00 00 00 30 01 25 32 01 00 55 00 00 52 4E 02 25  // ...0.%2..U..RN.%
    BDA0: 00 07 52 33 02 05 00 00 07 00 00 52 4D 2C 25 00  // ..R3.......RM,%.
    BDB0: 01 3D 25 00 06 45 65 01 66 16 03 0C 41 04 00 4C  // .=%..Ee.f...A..L
    BDC0: 0D 41 02 00 44 B7 00 0D A5 C9 05 04 5B 00 07 00  // .A..D.......[...
    BDD0: 01 01 00 00 5B 00 8A 00 01 01 00 00 37 00 00 01  // ....[.......7...
    BDE0: 05 03 2B 54 10 76 32 56 00 41 03 50 41 9F 03 56  // ..+T.v2V.A.PA..V
    BDF0: 00 40 66 FF 2D 0D 42 4A 00 4C 65 41 10 44 46 00  // .@f.-.BJ.LeA.DF.
    BE00: 09 65 41 07 03 2A 40 41 15 0D 40 03 2D 0A 42 40  // .eA..*@A..@.-.B@
    BE10: 01 04 02 08 00 00 01 04 03 2B 04 00 5B 7A 40 00  // .........+..[z@.
    BE20: 23 10 54 76 45 10 76 32 32 10 54 76 54 10 76 32  // #.TvE.v22.TvT.v2
    BE30: 03 21 54 76 05 41 76 32 13 20 54 76 15 40 76 32  // .!Tv.Av2. Tv.@v2
    BE40: 32 10 45 76 54 10 67 32 32 10 54 76 54 10 76 32  // 2.EvT.g22.TvT.v2
    BE50: 32 10 65 47 54 10 27 63 32 10 75 46 54 10 37 62  // 2.eGT.'c2.uFT.7b
    BE60: 61 04 01 01 08 00 37 00 00 01 05 82 00 00 00 20  // a.....7........ 
    BE70: C0 07 A5 83 00 FC 01 05 82 00 2C 01 50 C0 37 05  // ..........,.P.7.
    BE80: 00 01 0D 2C 01 06 02 01 05 A4 01 09 00 40 00 01  // ...,.........@..
    BE90: 05 A0 01 03 00 00 00 01 0D B0 01 02 04 01 E5 98  // ................
    BEA0: 01 00 4A 25 00 00 01 49 E6 00 5C 25 0C 00 80 64  // ..J%...I..\%...d
    BEB0: 5C 25 10 00 80 64 5C 25 14 00 80 64 5C 25 18 00  // \%...d\%...d\%..
    BEC0: 80 64 5C 25 1C 00 80 64 5C 25 24 00 80 18 5C 25  // .d\%...d\%$...\%
    BED0: 28 00 80 64 0D 25 2C 00 01 0D 25 20 00 01 0D 25  // (..d.%,...% ...%
    BEE0: 00 00 01 01 05 D8 01 B8 29 E8 00 01 05 DC 01 B8  // ........).......
    BEF0: 29 E8 00 01 05 E0 01 B8 29 E8 00 01 05 E4 01 B8  // ).......).......
    BF00: 29 E8 00 01 E5 14 02 64 01 05 74 01 00 00 24 00  // )......d..t...$.
    BF10: 37 00 00 01 05 82 00 14 00 00 C0 0D 65 83 00 01  // 7...........e...
    BF20: 51 FA 01 05 82 00 00 00 00 C0 0D 25 83 00 01 01  // Q..........%....
    BF30: 05 82 00 70 01 50 C0 37 05 00 54 00 18 01 01 05  // ...p.P.7..T.....
    BF40: A8 01 20 40 00 00 01 E5 60 02 64 01 E5 DC 02 64  // .. @....`.d....d
    BF50: 01 25 44 03 00 37 00 00 07 A5 97 01 F7 54 00 92  // .%D..7.......T..
    BF60: 01 01 05 82 00 78 03 20 C0 01 0D 83 00 19 00 01  // .....x. ........
    BF70: 05 82 00 00 00 60 C0 5C 05 83 00 FD FF FF FF 02  // .....`.\........
    BF80: 00 00 00 01 05 82 00 10 00 00 C0 01 05 83 00 02  // ................
    BF90: 00 80 2A 01 05 82 00 70 03 00 80 3C 05 83 00 00  // ..*....p...<....
    BFA0: 00 02 00 46 35 04 01 05 82 00 60 03 20 C0 37 05  // ...F5.....`. .7.
    BFB0: 00 5C 05 60 03 10 01 18 F0 20 A4 62 00 5C 05 64  // .\.`..... .b.\.d
    BFC0: 03 FF FF 00 FC 00 00 01 01 5C 05 6C 03 10 01 08  // .........\.l....
    BFD0: F0 20 A4 62 00 5C 05 70 03 FF FF 00 FC 00 00 01  // . .b.\.p........
    BFE0: 01 5C 05 50 03 87 00 7C 00 19 52 9D 7F 5C 05 54  // .\.P...|..R..\.T
    BFF0: 03 07 0C 80 FF 38 20 01 00 5C 05 E4 01 BF FF FF  // .....8 ..\......
    C000: DF BF FF 01 20 5C 05 84 00 FF FD FF FF FF 7D A0  // .... \........}.
    C010: 00 37 00 00 01 05 82 00 04 00 30 C0 37 05 00 01  // .7........0.7...
    C020: 05 04 00 02 00 91 06 01 05 0C 00 60 6A 00 08 01  // ...........`j...
    C030: 05 10 00 01 00 00 00 37 00 00 02 05 00 44 00 03  // .......7.....D..
    C040: 05 52 45 03 01 00 00 02 05 00 44 00 18 0C 52 45  // .RE.......D...RE
    C050: 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00 0A 00  // ......0.7..>....
    C060: 44 39 02 3D 0D 00 38 02 44 26 02 3D 0D 00 45 01  // D9.=..8.D&.=..E.
    C070: 44 26 02 01 05 1C 00 4D 00 00 AA 01 05 20 00 DA  // D&.....M..... ..
    C080: A7 8C 31 43 49 02 01 05 1C 00 4D 00 C0 AC 01 05  // ..1CI.....M.....
    C090: 20 00 EC A7 78 31 43 49 02 01 05 1C 00 4D 00 C0  //  ...x1CI.....M..
    C0A0: AC 01 05 20 00 EC A7 78 31 01 05 24 00 00 21 00  // ... ...x1..$..!.
    C0B0: 00 01 05 28 00 FF FF FF FF 01 05 64 00 96 43 81  // ...(.......d..C.
    C0C0: 01 01 05 68 00 87 25 09 40 01 05 6C 00 35 14 BF  // ...h..%.@..l.5..
    C0D0: 02 01 05 70 00 01 80 00 00 01 05 2C 00 00 21 00  // ...p.......,..!.
    C0E0: 00 01 05 30 00 FF FF FF FF 37 05 00 03 F8 00 80  // ...0.....7......
    C0F0: 00 09 E5 00 0C 4C E5 00 04 44 AF 02 4C E5 00 08  // .....L...D..L...
    C100: 49 BD 02 69 E5 00 04 03 0D 00 00 02 43 B6 02 69  // I..i........C..i
    C110: E5 00 08 56 08 00 5C 8A 10 00 0F F0 00 4C E5 00  // ...V..\......L..
    C120: 04 44 D2 02 0D 65 24 00 04 54 00 28 00 0D 25 24  // .D...e$..T.(..%$
    C130: 00 01 4C E5 00 08 44 E7 02 0D 65 2C 00 04 54 00  // ..L...D...e,..T.
    C140: 30 00 0D 25 2C 00 01 37 00 00 02 05 00 44 00 03  // 0..%,..7.....D..
    C150: 05 52 45 03 01 00 00 02 05 00 44 00 18 0C 52 45  // .RE.......D...RE
    C160: 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00 0A 00  // ......0.7..>....
    C170: 44 91 03 3D 0D 00 38 02 44 91 03 3D 0D 00 45 01  // D..=..8.D..=..E.
    C180: 44 91 03 03 F8 00 80 00 09 E5 00 0C 4C E5 00 04  // D...........L...
    C190: 44 44 03 4C E5 00 08 49 91 03 02 05 00 14 01 0B  // DD.L...I........
    C1A0: 06 43 4B 03 02 05 00 14 01 05 06 52 45 08 05 00  // .CK........RE...
    C1B0: 3F 00 00 00 01 05 82 00 04 00 30 C0 37 05 00 56  // ?.........0.7..V
    C1C0: 00 41 03 21 41 00 09 25 41 1F 4B 25 00 20 44 88  // .A.!A..%A.K%. D.
    C1D0: 03 03 A5 41 20 33 8A 41 41 56 08 41 15 1D 41 03  // ...A 3.AAV.A..A.
    C1E0: 31 02 20 00 41 43 91 03 15 05 41 13 2B 02 20 00  // 1. .AC....A.+. .
    C1F0: 41 37 00 00 03 05 00 24 00 30 C0 03 05 01 44 00  // A7.....$.0....D.
    C200: 30 C0 01 05 82 00 80 00 30 C0 03 38 40 83 00 4C  // 0.......0..8@..L
    C210: 25 40 04 49 11 04 01 02 82 00 00 4A 25 83 00 01  // %@.I.......J%...
    C220: 49 11 04 0D 65 83 00 04 66 FF 2D 0D 42 39 04 56  // I...e...f.-.B9.V
    C230: 00 41 01 02 82 00 01 4A 25 83 00 01 49 D2 03 01  // .A.....J%...I...
    C240: 02 82 00 01 01 04 83 00 00 00 2D 0D 42 04 00 2D  // ..........-.B..-
    C250: 25 41 04 3E 25 41 28 45 D2 03 01 02 82 00 01 4A  // %A.>%A(E.......J
    C260: 25 83 00 01 49 FA 03 01 02 82 00 00 07 65 83 00  // %...I........e..
    C270: FB 2D 05 00 08 00 00 00 2D 05 01 08 00 00 00 1B  // .-......-.......
    C280: 05 40 01 3E 05 00 2C 00 30 C0 44 AF 03 01 05 BD  // .@.>..,.0.D.....
    C290: 00 00 93 00 00 5B 7A 28 00 25 00 00 00 49 20 20  // .....[z(.%...I  
    C2A0: 00 4D 60 46 00 6D 40 20 00 71 80 40 00 75 00 00  // .M`F.m@ .q.@.u..
    C2B0: 00 79 00 00 00 7D 00 68 00 01 40 0F 00 0A 00 00  // .y...}.h..@.....
    C2C0: 00 00 52 00 01 01 00 00 37 00 00 52 3E 03 0C 41  // ..R.....7..R>..A
    C2D0: 14 00 01 0A 0A 15 41 33 0D 41 01 00 1B 0D 41 04  // ......A3.A....A.
    C2E0: 15 05 41 10 2D 05 41 00 F4 00 F4 01 02 09 08 41  // ..A.-.A........A
    C2F0: 33 8D 41 00 F4 1B 1D 41 07 01 1A 06 00 41 01 05  // 3.A....A.....A..
    C300: 01 0B 00 00 00 F4 01 25 C9 00 F4 01 05 C4 00 00  // .......%........
    C310: 00 00 00 5B 11 01 01 01 00 04 37 00 00 03 F9 46  // ...[......7....F
    C320: 00 08 E5 00 7F 03 0A 41 42 2D 0D 41 04 00 03 8C  // .......AB-.A....
    C330: 41 02 00 2D 0C 42 00 00 2D 0D 42 04 00 56 30 46  // A..-.B..-.B..V0F
    C340: 03 04 40 00 00 3E 05 40 00 00 00 00 44 49 00 3D  // ..@..>.@....DI.=
    C350: FA 00 40 44 50 00 3E A5 46 01 49 5B 00 33 1A 42  // ..@DP.>.F.I[.3.B
    C360: 41 43 62 00 03 A5 46 01 3D 02 00 40 47 62 00 2D  // ACb...F.=..@Gb.-
    C370: 1A 42 41 43 2C 00 4C E5 46 80 44 6A 00 5B 03 8A  // .BAC,.L.F.Dj.[..
    C380: 41 42 56 00 40 03 0A 42 41 03 8C 40 00 00 3E 8D  // ABV.@..BA..@..>.
    C390: 40 FF FF 44 10 01 03 24 42 02 00 03 22 46 42 09  // @..D...$B..."FB.
    C3A0: 25 42 3F 3E 25 42 05 49 A6 00 03 1A 40 40 03 0D  // %B?>%B.I....@@..
    C3B0: 42 04 00 2D 1A 42 41 43 E1 00 3E 25 42 06 49 CD  // B..-.BAC..>%B.I.
    C3C0: 00 33 0D 41 03 00 56 08 42 2D 0D 40 01 00 3E 1A  // .3.A..V.B-.@..>.
    C3D0: 40 40 47 9F 00 2D 1A 42 41 2D 0D 41 03 00 43 04  // @@G..-.BA-.A..C.
    C3E0: 01 03 1A 40 40 09 0D 42 1F 00 2D 1A 42 41 4C 25  // ...@@..B..-.BAL%
    C3F0: 46 80 49 04 01 56 18 40 4C 25 46 40 49 F9 00 01  // F.I..V.@L%F@I...
    C400: 02 00 00 40 01 04 01 00 00 00 43 04 01 01 02 91  // ...@......C.....
    C410: 0A 40 01 04 92 0A 00 00 2D 0D 41 03 00 03 8A 41  // .@......-.A....A
    C420: 42 43 71 00 5B 00 21 00 02 01 00 04 37 00 00 01  // BCq.[.!.....7...
    C430: 01 A4 00 01 01 01 94 00 00 3C 25 95 00 01 49 13  // .........<%...I.
    C440: 00 02 00 01 A4 00 5B 00 8E 00 01 02 00 04 66 FF  // ......[.......f.
    C450: 56 08 47 2D 0D 42 5C 00 03 21 47 00 09 25 47 F0  // V.G-.B\..!G..%G.
    C460: 42 22 47 63 00 43 00 63 80 36 00 63 60 3E 00 63  // B"Gc.C.c.6.c`>.c
    C470: 20 2E 00 5A 5A 5B 2D 0D 42 26 00 43 43 00 2D 0D  //  ..ZZ[-.B&.CC.-.
    C480: 42 0C 00 43 43 00 2D 0D 42 18 00 03 21 47 00 09  // B..CC.-.B...!G..
    C490: 25 47 07 2D 0A 42 47 2D 0A 42 47 03 0C 48 00 00  // %G.-.BG-.BG..H..
    C4A0: 5B 7A 32 00 00 00 00 02 00 04 00 26 00 28 00 2A  // [z2........&.(.*
    C4B0: 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 00 00 01  // ....,.-.../.....
    C4C0: 00 02 00 03 00 04 00 05 00 0A 00 00 A0 00 40 51  // ..............@Q
    C4D0: E0 51 80 52 20 53 BF 02 02 02 1C 04 20 05 01 64  // .Q.R S...... ..d
    C4E0: 00 00 00 03 02 02 40 66 1F 02 04 01 0C 00 52 45  // ......@f......RE
    C4F0: 08 05 01 FF 03 00 00 3D 0D 01 00 00 49 2F 00 02  // .......=....I/..
    C500: 04 00 28 00 5B 02 04 01 1C 00 52 45 08 05 01 FF  // ..(.[.....RE....
    C510: 00 00 00 20 05 01 A0 86 01 00 7C 04 40 20 00 7E  // ... ......|.@ .~
    C520: 05 40 FF 00 00 00 03 02 01 40 03 04 40 24 00 21  // .@.......@..@$.!
    C530: 05 40 A0 86 01 00 2D 02 01 40 02 E5 00 01 56 00  // .@....-..@....V.
    C540: 03 02 0D 03 02 00 56 00 04 7C 04 02 3C 00 7E 05  // ......V..|..<.~.
    C550: 40 10 27 00 00 02 02 01 40 02 04 02 4C 00 02 A4  // @.'.....@...L...
    C560: 03 56 00 02 E4 03 5A 00 52 37 03 01 05 01 03 71  // .V....Z.R7.....q
    C570: 03 03 03 04 40 64 00 21 05 40 A0 86 01 00 02 02  // ....@d.!.@......
    C580: 01 40 55 18 03 02 04 02 50 00 02 E4 03 5B 00 52  // .@U.....P....[.R
    C590: 37 7C 04 02 40 00 7E 05 40 10 27 00 00 02 02 02  // 7|..@.~.@.'.....
    C5A0: 40 02 E4 03 57 00 52 37 02 E5 03 01 02 02 02 01  // @...W.R7........
    C5B0: 52 37 03 01 06 01 03 B1 03 03 7C 05 06 A0 86 01  // R7........|.....
    C5C0: 00 7E 02 40 05 03 02 03 40 03 02 05 40 43 FA 00  // .~.@....@...@C..
    C5D0: 3D E5 00 00 44 66 02 3E 04 03 04 00 47 21 01 03  // =...Df.>....G!..
    C5E0: 02 03 05 3E 04 03 04 00 47 21 01 03 04 03 04 00  // ...>....G!......
    C5F0: 2D 05 03 71 02 00 00 03 04 40 7C 00 3E 05 40 00  // -..q.....@|.>.@.
    C600: 00 00 00 44 D9 01 33 04 03 7C 00 7C 02 03 03 7E  // ...D..3..|.|...~
    C610: 05 40 A0 86 01 00 03 02 46 40 02 04 01 50 00 03  // .@......F@...P..
    C620: 04 40 64 00 21 05 40 A0 86 01 00 02 02 02 40 02  // .@d.!.@.......@.
    C630: 05 03 02 00 00 00 02 A4 03 5B 00 52 37 7C 04 03  // .........[.R7|..
    C640: 4C 00 7E 05 40 A0 86 01 00 02 02 02 40 02 E4 03  // L.~.@.......@...
    C650: 5A 00 52 37 02 02 02 01 02 E5 03 01 52 37 03 01  // Z.R7........R7..
    C660: 04 01 02 04 01 40 00 02 A4 03 57 00 7C 04 03 3C  // .....@....W.|..<
    C670: 00 7E 05 40 A0 86 01 00 02 02 02 40 02 E4 03 56  // .~.@.......@...V
    C680: 00 52 37 7C 05 04 10 27 00 00 7E 01 40 01 03 02  // .R7|...'..~.@...
    C690: 04 40 03 02 05 02 3E 02 05 04 45 CE 01 33 02 05  // .@....>...E..3..
    C6A0: 04 43 E0 01 33 02 04 05 03 02 05 04 43 E0 01 03  // .C..3.......C...
    C6B0: 02 04 02 56 00 05 7C 04 02 74 00 7E 05 40 10 27  // ...V..|..t.~.@.'
    C6C0: 00 00 03 02 04 40 7C 02 40 40 02 02 01 40 02 02  // .....@|.@@...@..
    C6D0: 02 41 7C 04 02 78 00 7E 05 40 10 27 00 00 7C 02  // .A|..x.~.@.'..|.
    C6E0: 40 40 02 25 03 01 52 37 7C 02 05 05 52 37 02 25  // @@.%..R7|...R7.%
    C6F0: 03 03 52 37 03 04 40 68 00 21 05 40 0A 00 00 00  // ..R7..@h.!.@....
    C700: 2C 02 01 40 7C 04 02 6C 00 7E 05 40 10 27 00 00  // ,..@|..l.~.@.'..
    C710: 2C 02 01 40 7C 04 02 70 00 7E 05 40 10 27 00 00  // ,..@|..p.~.@.'..
    C720: 2C 02 01 40 26 05 01 64 00 00 00 21 05 40 64 00  // ,..@&..d...!.@d.
    C730: 00 00 2D 02 02 40 55 38 00 43 68 00 2D 05 05 70  // ..-..@U8.Ch.-..p
    C740: 02 00 00 27 05 05 71 02 00 00 21 05 40 71 02 00  // ...'..q...!.@q..
    C750: 00 3E 04 40 04 00 47 89 02 02 04 00 2C 00 5B 56  // .>.@..G.....,.[V
    C760: 00 00 03 31 00 00 33 25 00 01 02 02 00 40 03 04  // ...1..3%.....@..
    C770: 46 08 00 03 04 40 80 00 15 25 00 02 2D 0A 42 00  // F....@...%..-.B.
    C780: 21 04 40 84 00 2D 02 46 40 3D 02 00 46 48 BE 02  // !.@..-.F@=..FH..
    C790: 02 02 00 46 5B 00 78 00 01 01 00 00 37 00 00 52  // ...F[.x.....7..R
    C7A0: 14 0D A5 51 1B 01 54 20 54 1B 07 25 44 1B FE 54  // ...Q..T T..%D..T
    C7B0: 20 45 1B 42 29 00 63 00 31 00 63 01 39 00 63 02  //  E.B).c.1.c.9.c.
    C7C0: 4D 00 5A 5A 43 70 00 01 25 45 1B 02 43 3E 00 01  // M.ZZCp..%E..C>..
    C7D0: 25 45 1B 01 54 20 42 1B 54 00 43 1B 54 00 47 1B  // %E..T B.T.C.T.G.
    C7E0: 43 70 00 01 0D 43 1B 01 01 01 05 47 1B 01 00 01  // Cp...C.....G....
    C7F0: 00 0D 65 48 1B 01 0D 65 4B 1B 01 01 0D 53 1B 10  // ..eH...eK....S..
    C800: 10 01 25 42 1B 01 54 30 51 1B 3A 00 00 5B 74 00  // ..%B..T0Q.:..[t.
    C810: 01 01 00 00 37 00 00 4A A5 CB 05 01 44 15 00 02  // ....7..J....D...
    C820: 65 00 01 0E 25 00 80 52 14 03 00 46 CC 00 08 25  // e...%..R...F...%
    C830: 00 0F 52 14 54 30 9D 1B 3C 69 9D 1B 00 44 65 00  // ..R.T0..<i...De.
    C840: 01 69 9D 1B 00 3D 65 00 00 44 65 00 4A A5 9C 1B  // .i...=e..De.J...
    C850: 01 44 65 00 4C 25 46 01 44 69 00 4A 25 A3 1B 01  // .De.L%F.Di.J%...
    C860: 49 4D 00 4A 25 A3 1B 01 44 55 00 4A 25 A3 1B 01  // IM.J%...DU.J%...
    C870: 49 5D 00 3A 00 00 5B 4A 25 9D 1B 01 44 69 00 43  // I].:..[J%...Di.C
    C880: 65 00 3E 00 01 01 00 00 37 00 00 52 14 3D 65 00  // e.>.....7..R.=e.
    C890: 01 44 30 00 0D 65 9C 1B 03 07 25 9C 1B FE 4A A5  // .D0..e....%...J.
    C8A0: 9C 1B 01 49 1C 00 07 E5 00 1B 7F 54 20 A9 1B 43  // ...I.......T ..C
    C8B0: 3A 00 0D E5 00 1B 80 0D 25 9C 1B 01 3A 00 00 5B  // :.......%...:..[
    C8C0: 2C 00 02 01 00 00 37 00 00 3C 21 FC 00 00 49 19  // ,.....7..<!...I.
    C8D0: 00 0D A5 C0 00 01 43 26 00 3C 61 FC 00 00 49 26  // ......C&.<a...I&
    C8E0: 00 0D A5 C0 00 02 0D A5 C1 00 01 5B 22 00 01 01  // ...........["...
    C8F0: 04 04 03 39 00 00 55 38 00 20 02 00 00 03 04 41  // ...9..U8. .....A
    C900: 00 00 56 38 41 27 02 40 41 02 E2 00 40 5B 19 00  // ..V8A'.@A...@[..
    C910: 01 01 00 08 37 00 00 52 14 01 01 5E 1B 00 01 01  // ....7..R...^....
    C920: 5F 1B 01 3A 00 00 5B 00 80 00 02 01 00 00 56 00  // _..:..[.......V.
    C930: 40 03 39 40 00 55 38 00 66 FF 2D 0D 42 50 00 3E  // @.9@.U8.f.-.BP.>
    C940: 0C 40 02 00 47 27 00 2D 0D 42 08 00 43 17 00 33  // .@..G'.-.B..C..3
    C950: 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 56 18  // .@..!.@..-.@..V.
    C960: 40 03 02 46 40 7B 05 00 40 42 0F 00 7E 02 40 46  // @..F@{..@B..~.@F
    C970: 02 02 00 40 5B 7A 30 00 64 00 00 00 00 00 00 00  // ...@[z0.d.......
    C980: FF FF 07 00 01 00 00 00 C8 00 3F 00 08 00 19 00  // ..........?.....
    C990: 40 06 5F 00 40 00 32 00 80 0C 7E 00 60 00 64 00  // @._.@.2...~.`.d.
    C9A0: 00 32 7F 00 7F 00 64 00 C6 00 01 03 04 00 37 00  // .2....d.......7.
    C9B0: 00 56 00 46 56 00 00 03 21 00 00 55 20 00 3D 65  // .V.FV...!..U .=e
    C9C0: 00 03 44 2C 00 3D 65 00 0D 46 BB 00 02 29 00 00  // ..D,.=e..F...)..
    C9D0: 32 25 00 08 0E 25 00 60 52 14 5C 22 00 4A F8 00  // 2%...%.`R.\".J..
    C9E0: 02 22 00 00 52 14 03 08 41 C0 1A 09 0D 41 03 00  // ."..R...A....A..
    C9F0: 66 FF 2D 0D 42 C2 00 2D 0A 42 41 03 24 00 00 00  // f.-.B..-.BA.$...
    CA00: 3D E2 00 00 48 A7 00 3E 25 00 04 44 76 00 03 22  // =...H..>%..Dv.."
    CA10: 46 00 33 25 46 01 15 25 46 04 0F 25 46 01 33 39  // F.3%F..%F..%F.39
    CA20: 00 00 3E 25 00 01 44 93 00 3E 25 00 02 44 8C 00  // ..>%..D..>%..D..
    CA30: 03 25 46 21 03 65 00 2F 43 97 00 03 65 00 13 03  // .%F!.e./C...e...
    CA40: 79 46 00 33 65 46 01 15 2D 46 03 0F 65 46 01 52  // yF.3eF..-F..eF.R
    CA50: 14 01 02 F2 1B 46 01 52 EE 1B 00 54 00 F9 1B 54  // .....F.R...T...T
    CA60: 00 ED 1B 3A 00 00 5B 7A 04 00 03 02 01 04 AF 01  // ...:..[z........
    CA70: 01 04 00 08 37 00 00 3D 65 02 01 49 44 01 4B A5  // ....7..=e..ID.K.
    CA80: 02 03 49 5D 00 02 05 00 00 03 00 05 02 05 01 00  // ..I]............
    CA90: 05 02 00 3C 21 FC 00 02 49 57 00 01 8D C0 00 00  // ...<!...IW......
    CAA0: 02 51 02 01 05 C6 00 00 00 10 00 01 05 C8 00 00  // .Q..............
    CAB0: 00 50 00 01 0D C3 00 02 00 54 20 CA 00 01 05 C2  // .P.......T .....
    CAC0: 00 00 01 00 00 56 20 40 43 83 00 0E 25 02 80 52  // .....V @C...%..R
    CAD0: 14 54 00 CC 00 56 08 48 08 25 02 07 0D 25 CA 00  // .T...V.H.%...%..
    CAE0: 01 01 25 C2 00 01 54 00 C6 00 54 00 C8 00 56 20  // ..%...T...T...V 
    CAF0: 40 3D A5 01 00 49 8F 00 0D 25 C2 00 10 07 65 D0  // @=...I...%....e.
    CB00: 05 FE 3D A5 01 01 47 A0 00 0D 65 D0 05 01 03 A0  // ..=...G...e.....
    CB10: 40 C9 00 03 00 46 C4 00 03 02 41 46 2D 00 46 C6  // @....F....AF-.F.
    CB20: 00 2D 00 41 C8 00 52 14 01 32 07 1A 40 01 32 08  // .-.A..R..2..@.2.
    CB30: 1A 40 01 02 04 1A 46 01 02 05 1A 41 54 30 C1 1A  // .@....F....AT0..
    CB40: 54 00 5C 1B 01 01 5D 1B 00 54 08 09 1A 54 08 0A  // T.\...]..T...T..
    CB50: 1A 54 08 0B 1A 54 08 0C 1A 01 09 0E 1A 00 01 19  // .T...T..........
    CB60: 0D 1A 00 5C 19 01 1A FC F8 01 5C A5 01 1A 0F 10  // ...\......\.....
    CB70: 01 09 06 1A 01 01 25 00 1A 01 0D 25 B3 1B 04 5C  // ......%....%...\
    CB80: 62 B3 1B FE 40 54 20 35 1A 54 20 3C 1A 54 00 CA  // b...@T 5.T <.T..
    CB90: 1B 54 00 C8 1B 54 00 CC 1B 4B A5 02 03 49 40 01  // .T...T...K...I@.
    CBA0: 0E 25 02 80 52 14 01 05 CC 00 01 00 00 00 3A 00  // .%..R.........:.
    CBB0: 00 5B 52 14 3D 65 02 00 49 61 01 54 20 00 1A 3A  // .[R.=e..Ia.T ..:
    CBC0: 00 00 3C 21 FC 00 02 49 60 01 54 08 C1 00 5B 3D  // ..<!...I`.T...[=
    CBD0: 65 02 10 44 6E 01 01 09 06 1A 01 5B 03 00 40 04  // e..Dn......[..@.
    CBE0: 1A 09 05 40 00 00 00 FD 2D 01 40 00 09 0D 40 00  // ...@....-.@...@.
    CBF0: F0 01 02 04 1A 40 08 0D 00 FF 0F 56 00 41 03 31  // .....@.....V.A.1
    CC00: 41 01 74 0A 00 41 2C 09 01 00 08 25 00 FC 14 05  // A.t..A,....%....
    CC10: 00 10 01 01 5C 1B 00 01 09 0D 1A 01 5B 00 49 00  // ....\.......[.I.
    CC20: 01 01 00 00 37 00 00 52 14 07 65 B6 1B FE 3D 65  // ....7..R..e...=e
    CC30: 00 01 44 37 00 54 30 6E 1A 54 30 11 1A 54 20 B5  // ..D7.T0n.T0..T .
    CC40: 1B 54 20 BD 1B 54 30 BD 1B 4A 25 B6 1B 01 49 2B  // .T ..T0..J%...I+
    CC50: 00 3A 00 00 5B 0D 25 BD 1B 01 54 00 9E 1B 07 25  // .:..[.%...T....%
    CC60: C0 1A F4 3A 00 00 5B 00 95 00 01 03 00 00 37 00  // ...:..[.......7.
    CC70: 00 52 14 0D 25 03 1B 04 54 20 78 1A 54 00 80 1A  // .R..%...T x.T...
    CC80: 3D 65 00 01 49 56 00 0D 25 7E 1A 07 01 25 7F 1A  // =e..IV..%~...%..
    CC90: 01 51 01 4A 25 7F 1A 02 44 29 00 54 20 7F 1A 54  // .Q.J%...D).T ..T
    CCA0: 08 81 1A 54 08 82 1A 54 08 83 1A 01 0D 84 1A FF  // ...T...T........
    CCB0: FF 01 0D 85 1A FF FF 01 0D 86 1A FF FF 5B 01 31  // .............[.1
    CCC0: 79 1A 00 56 00 41 03 19 41 01 3B 02 41 3D 65 00  // y..V.A..A.;.A=e.
    CCD0: 02 49 78 00 03 00 40 7C 1A 04 02 00 40 43 81 00  // .Ix...@|....@C..
    CCE0: 03 03 40 00 01 02 7C 1A 40 2D 05 46 04 00 00 00  // ..@...|.@-.F....
    CCF0: 2D 8D 41 01 00 3E 89 41 01 45 65 00 5B 00 3D 00  // -.A..>.A.Ee.[.=.
    CD00: 01 01 00 04 37 00 00 56 00 40 03 38 40 9A 0A 21  // ....7..V.@.8@..!
    CD10: 05 40 E2 04 00 00 02 02 00 40 03 00 40 99 0A 1B  // .@.......@..@...
    CD20: 05 40 14 09 0D 40 07 00 21 05 40 09 3D 00 00 27  // .@...@..!.@.=..'
    CD30: 05 40 64 00 00 00 2C 02 00 40 5B 00 D8 00 01 01  // .@d...,..@[.....
    CD40: 0C 00 37 00 00 01 05 82 00 2C 00 50 C0 4A 25 83  // ..7......,.P.J%.
    CD50: 00 01 49 3B 00 02 05 00 40 7E 05 00 01 05 82 00  // ..I;....@~......
    CD60: B4 00 50 C0 02 E8 00 83 00 52 29 26 05 00 10 27  // ..P......R)&...'
    CD70: 00 00 02 02 00 40 5B 03 05 00 AC 02 50 C0 03 05  // .....@[.....P...
    CD80: 01 8C 02 50 C0 03 05 02 78 02 50 C0 01 05 82 00  // ...P....x.P.....
    CD90: 40 03 50 C0 4A 25 83 00 01 44 75 00 03 05 00 28  // @.P.J%...Du....(
    CDA0: 03 50 C0 03 05 01 08 03 50 C0 03 05 02 F4 02 50  // .P......P......P
    CDB0: C0 01 02 82 00 02 4A 05 83 00 80 00 00 00 44 8C  // ......J.......D.
    CDC0: 00 2D 05 01 10 00 00 00 01 02 82 00 01 56 00 40  // .-...........V.@
    CDD0: 03 18 40 83 00 21 05 40 10 27 00 00 03 02 46 40  // ..@..!.@.'....F@
    CDE0: 56 00 40 03 08 40 83 00 21 05 40 10 27 00 00 27  // V.@..@..!.@.'..'
    CDF0: 05 40 00 00 01 00 2D 02 46 40 01 02 82 00 00 56  // .@....-.F@.....V
    CE00: 00 40 03 20 40 83 00 09 25 40 0F 75 02 46 40 02  // .@. @...%@.u.F@.
    CE10: 02 00 46 5B 53 01 02 03 00 18 37 00 00 66 FF 2D  // ..F[S.....7..f.-
    CE20: 0D 42 47 01 55 28 05 2D 09 42 05 2D 09 42 05 03  // .BG.U(.-.B.-.B..
    CE30: 0C 48 00 00 03 09 41 03 2D 19 41 03 3E 0D 41 03  // .H....A.-.A.>.A.
    CE40: 00 46 3F 00 5C 05 B3 1B FB 0F F0 FF 00 30 00 00  // .F?.\........0..
    CE50: 43 4B 00 5C 05 B3 1B FF 0F F0 FF 04 40 00 00 03  // CK.\........@...
    CE60: 09 41 00 2D 19 41 00 33 0D 41 01 00 01 0A 80 1B  // .A.-.A.3.A......
    CE70: 41 54 08 82 1B 01 99 82 1B 02 03 19 41 00 33 09  // AT..........A.3.
    CE80: 41 02 56 18 41 03 B1 41 04 33 1A 41 41 01 8A 81  // A.V.A..A.3.AA...
    CE90: 1B 41 03 19 41 00 33 09 41 02 2D 1A 41 41 2D 09  // .A..A.3.A.-.AA-.
    CEA0: 41 00 4B 25 04 10 44 99 00 2D 09 41 00 01 0A 81  // A.K%..D..-.A....
    CEB0: 1B 41 03 21 41 04 09 25 41 02 1B 25 41 01 01 22  // .A.!A..%A..%A.."
    CEC0: 83 1B 41 54 00 5E 1B 01 31 5E 1B 04 01 B1 5E 1B  // ..AT.^..1^....^.
    CED0: 04 03 09 41 01 2D 19 41 01 33 0D 41 01 00 01 0A  // ...A.-.A.3.A....
    CEE0: 87 1B 41 54 08 8E 1B 01 99 8E 1B 03 03 19 41 01  // ..AT..........A.
    CEF0: 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41 41 01  // 3.A.V.A..A.3.AA.
    CF00: 8A 8D 1B 41 03 19 41 01 33 09 41 03 2D 1A 41 41  // ...A..A.3.A.-.AA
    CF10: 2D 09 41 01 4B 25 04 20 44 0B 01 2D 09 41 01 01  // -.A.K%. D..-.A..
    CF20: 0A 8D 1B 41 03 21 41 04 09 25 41 04 1B 25 41 02  // ...A.!A..%A..%A.
    CF30: 01 22 8F 1B 41 54 00 5F 1B 01 39 5F 1B 04 01 B9  // ."..AT._..9_....
    CF40: 5F 1B 04 03 21 41 04 09 25 41 80 1B 25 41 07 01  // _...!A..%A..%A..
    CF50: 22 9E 1B 41 3A 00 00 5B 7A 0C 00 00 00 00 02 00  // "..A:..[z.......
    CF60: 04 00 26 00 28 00 2A 00 BE 00 01 01 00 04 37 00  // ..&.(.*.......7.
    CF70: 00 03 A1 40 00 3D A5 00 00 49 49 00 66 04 03 24  // ...@.=...II.f..$
    CF80: 40 58 00 3E 25 40 FF 49 AE 00 55 00 01 02 25 01  // @X.>%@.I..U...%.
    CF90: 28 52 09 02 0D 01 29 01 52 09 02 0D 01 2A 02 52  // (R....).R....*.R
    CFA0: 09 02 0D 01 2B 03 52 09 03 B1 40 01 01 B1 0A 15  // ....+.R...@.....
    CFB0: 01 66 1C 03 64 40 10 00 56 20 40 2D 0D 42 14 00  // .f..d@..V @-.B..
    CFC0: 54 30 CD 05 3E A4 40 0A 00 49 93 00 3D A5 00 00  // T0..>.@..I..=...
    CFD0: 44 AE 00 03 24 41 1C 00 03 71 41 00 09 0D 41 0F  // D...$A...qA...A.
    CFE0: 0F 3E 62 41 41 49 93 00 01 A2 CD 05 40 01 64 80  // .>bAAI......@.d.
    CFF0: 0A 1C 00 3D A4 00 1C 00 44 AE 00 2D 0C 42 04 00  // ...=....D..-.B..
    D000: 2D 25 40 01 3E 62 40 40 49 5C 00 01 F1 0A 15 00  // -%@.>b@@I\......
    D010: 0D A5 0A 15 80 5B 01 A2 CD 05 40 01 64 80 0A 1C  // .....[....@.d...
    D020: 00 54 18 0A 15 5B 9E 00 01 01 08 00 37 00 00 03  // .T...[......7...
    D030: 08 00 28 08 56 30 00 03 05 01 03 00 00 00 52 3E  // ..(.V0........R>
    D040: 4C 0C 01 08 00 49 2D 00 15 05 01 02 2D A5 00 01  // L....I-.....-...
    D050: 43 18 00 5C 72 28 08 F8 00 03 00 40 1F 0A 03 00  // C..\r(.....@....
    D060: 46 93 0A 09 25 46 03 15 25 46 03 75 02 40 46 56  // F...%F..%F.u.@FV
    D070: 38 40 03 65 40 80 1B 25 46 03 03 0A 48 46 03 00  // 8@.e@..%F...HF..
    D080: 41 A3 0A 56 08 48 01 0A 28 08 00 03 A2 40 41 09  // A..V.H..(....@A.
    D090: A5 40 07 03 32 43 40 4C 25 40 01 44 7C 00 0F E2  // .@..2C@L%@.D|...
    D0A0: 40 44 1B 0D 40 01 1B 05 41 03 3E 65 40 00 49 65  // @D..@...A.>e@.Ie
    D0B0: 00 01 7A 80 0A 40 02 BA 00 40 52 3E 02 24 00 0A  // ..z..@...@R>.$..
    D0C0: 00 52 34 5B 1A 00 01 01 00 04 37 00 00 01 05 E5  // .R4[......7.....
    D0D0: 09 FC FD FC FC 01 05 E6 09 FD F8 FC FC 5B 31 02  // .............[1.
    D0E0: 01 01 00 08 37 00 00 0D 25 F4 16 08 07 25 62 18  // ....7...%....%b.
    D0F0: FE 56 00 41 03 39 41 01 09 25 41 0F 03 0A 40 42  // .V.A.9A..%A...@B
    D100: 66 FF 2D 0D 42 11 02 15 25 41 02 2D 0A 42 41 03  // f.-.B...%A.-.BA.
    D110: 0C 41 00 00 01 02 00 00 41 07 A5 01 00 FE 54 08  // .A......A.....T.
    D120: 01 00 01 0C FB 16 02 00 03 0A 42 40 03 05 40 50  // ..........B@..@P
    D130: C3 00 00 56 00 41 03 21 41 00 27 02 40 41 01 8A  // ...V.A.!A.'.@A..
    D140: F7 16 40 01 25 F7 16 02 0D 25 F5 16 02 01 A9 F9  // ..@.%....%......
    D150: 16 01 4B 25 01 01 49 7F 00 54 30 F9 16 01 0D F9  // ..K%..I..T0.....
    D160: 16 00 31 2B A5 F9 16 01 4B 25 01 02 44 96 00 2B  // ..1+....K%..D..+
    D170: A5 F9 16 01 56 00 41 03 71 41 01 0F E5 41 80 01  // ....V.A.qA...A..
    D180: 02 FA 16 41 03 69 41 00 2D A5 41 01 01 02 FA 16  // ...A.iA.-.A.....
    D190: 41 4B 25 01 02 44 C6 00 56 28 41 2D A5 41 01 01  // AK%..D..V(A-.A..
    D1A0: 02 FA 16 41 4B 25 01 01 44 E7 00 03 71 41 00 2D  // ...AK%..D...qA.-
    D1B0: A5 41 01 01 02 FA 16 41 03 79 41 00 2D A5 41 01  // .A.....A.yA.-.A.
    D1C0: 01 02 FA 16 41 0D 25 F4 16 01 03 A5 41 01 43 BA  // ....A.%.....A.C.
    D1D0: 01 03 29 40 01 03 65 40 01 03 99 40 00 56 00 41  // ..)@..e@...@.V.A
    D1E0: 03 71 41 01 0F 65 41 01 0F E5 41 80 01 02 FA 16  // .qA..eA...A.....
    D1F0: 41 01 A5 F9 16 04 3D 65 01 04 47 28 01 01 0D F9  // A.....=e..G(....
    D200: 16 01 13 43 57 01 01 A2 F9 16 40 01 0D F9 16 01  // ...CW.....@.....
    D210: 31 43 57 01 07 65 F9 16 EF 01 A5 F9 16 03 3E 25  // 1CW..e........>%
    D220: 40 04 46 57 01 01 A2 F9 16 40 31 A5 F9 16 01 5C  // @.FW.....@1....\
    D230: 65 F9 16 FD 20 0D 25 F4 16 01 03 A5 41 00 43 BA  // e... .%.....A.C.
    D240: 01 03 05 41 01 00 00 80 03 AA 41 40 01 02 FA 16  // ...A......A@....
    D250: 41 3D 65 01 01 49 82 01 02 A8 00 FA 16 43 F9 01  // A=e..I.......C..
    D260: 56 00 41 03 1A 41 40 3B 02 41 03 28 41 FA 16 03  // V.A..A@;.A.(A...
    D270: 68 41 FA 16 03 A8 41 FA 16 03 E8 41 FA 16 04 02  // hA....A....A....
    D280: 00 41 56 28 40 2D 8D 40 04 00 3E 25 40 04 47 F9  // .AV(@-.@..>%@.G.
    D290: 01 33 25 40 04 43 36 01 02 65 00 02 03 0D 41 64  // .3%@.C6..e....Ad
    D2A0: 00 33 0D 41 01 00 3E 0D 41 00 00 44 F9 01 51 64  // .3.A..>.A..D..Qd
    D2B0: 4A 25 F6 16 10 44 C3 01 4A 65 F6 16 06 49 F9 01  // J%...D..Je...I..
    D2C0: 02 65 00 01 0D 25 F5 16 02 3E A5 41 00 44 63 01  // .e...%...>.A.Dc.
    D2D0: 4B 25 01 01 44 F3 00 0D 25 F5 16 02 01 25 F4 16  // K%..D...%....%..
    D2E0: 02 51 01 54 00 F4 16 54 00 FB 16 5B 7A 20 00 68  // .Q.T...T...[z .h
    D2F0: 48 01 00 6C 48 03 02 70 48 05 04 74 48 42 41 78  // H..lH..pH..tHBAx
    D300: 48 49 48 7C 48 4B 4A 98 48 29 28 80 48 4D 4C 00  // HIH|HKJ.H)(.HML.
    D310: 5F 00 02 02 00 04 37 00 00 3D 65 00 01 44 54 00  // _.....7..=e..DT.
    D320: 55 30 00 3D 25 00 06 46 50 00 32 25 00 01 20 25  // U0.=%..FP.2%.. %
    D330: 00 08 56 08 48 03 22 48 40 0D A5 99 18 01 02 A0  // ..V.H."H@.......
    D340: 00 98 18 08 A5 00 03 4A 25 98 18 02 44 4A 00 5C  // .......J%...DJ.\
    D350: 0D 99 18 FF FE 01 00 43 50 00 0D 0D 99 18 01 01  // .......CP.......
    D360: 3A 00 00 5B 0D 65 CF 05 08 0D 25 80 01 01 5B 00  // :..[.e....%...[.
    D370: 0A 00 01 02 00 00 5B 7A 00 00 0A 00 01 01 00 04  // ......[z........
    D380: 55 00 00 5B 3C 00 01 01 00 00 55 00 00 55 00 01  // U..[<.....U..U..
    D390: 01 05 91 0A 03 00 00 00 02 38 00 92 0A 02 21 01  // .........8....!.
    D3A0: 00 08 25 00 0F 08 25 01 F0 20 05 00 20 4E 00 00  // ..%...%.. .. N..
    D3B0: 02 02 00 40 20 05 01 E2 04 00 00 02 02 01 40 5B  // ...@ .........@[
    D3C0: AF 01 01 06 04 18 03 05 46 00 51 25 02 3D E5 00  // ........F.Q%.=..
    D3D0: 01 49 F3 00 55 38 00 66 08 03 24 41 04 00 2D 0D  // .I..U8.f..$A..-.
    D3E0: 42 08 00 55 00 02 3D 04 00 00 00 47 42 00 2C A5  // B..U..=....GB.,.
    D3F0: 02 01 2D 0D 42 0C 00 3D A2 02 41 45 26 00 55 00  // ..-.B..=..AE&.U.
    D400: 01 5B 02 24 02 05 00 02 64 02 04 00 03 01 46 00  // .[.$....d.....F.
    D410: 56 00 40 03 21 40 02 6F 02 46 40 7C 05 46 00 40  // V.@.!@.o.F@|.F.@
    D420: 00 00 7E 05 40 C4 09 00 00 02 02 01 40 02 E5 02  // ..~.@.......@...
    D430: 01 7B 05 01 32 00 00 00 7E 05 40 10 27 00 00 7C  // .{..2...~.@.'..|
    D440: 05 40 4E 0C 00 00 7E 05 40 40 4B 4C 00 02 0A 05  // .@N...~.@@KL....
    D450: 40 21 05 40 40 4B 4C 00 27 05 40 4E 0C 00 00 02  // @!.@@KL.'.@N....
    D460: 01 03 01 32 02 03 40 21 05 46 D0 07 00 00 27 05  // ...2..@!.F....'.
    D470: 40 10 27 00 00 03 02 00 46 33 02 00 40 27 05 00  // @.'.....F3..@'..
    D480: 10 27 00 00 3E 0C 40 06 00 48 D1 00 03 0C 40 06  // .'..>.@..H....@.
    D490: 00 55 00 04 02 8A 04 40 03 01 40 01 33 01 40 04  // .U.....@..@.3.@.
    D4A0: 21 05 40 32 00 00 00 27 05 40 50 C3 00 00 02 8A  // !.@2...'.@P.....
    D4B0: 05 40 5B 55 38 00 03 05 40 00 32 00 00 3D 05 00  // .@[U8...@.2..=..
    D4C0: 00 00 00 00 44 3C 01 03 02 40 46 2D 01 40 00 33  // ....D<...@F-.@.3
    D4D0: 05 40 01 00 00 00 27 01 40 00 3E 05 40 9C 18 00  // .@....'.@.>.@...
    D4E0: 00 47 2B 01 03 05 40 00 32 00 00 3E 05 40 C8 00  // .G+...@.2..>.@..
    D4F0: 00 00 46 3C 01 03 05 40 C8 00 00 00 66 FF 2D 0D  // ..F<...@....f.-.
    D500: 42 8F 01 3E 0C 40 02 00 47 53 01 2D 0D 42 08 00  // B..>.@..GS.-.B..
    D510: 43 43 01 33 0C 40 00 00 2D 0C 40 06 00 33 0D 40  // CC.3.@..-.@..3.@
    D520: 01 00 27 0C 40 06 00 2D 0C 40 04 00 02 E2 00 40  // ..'.@..-.@.....@
    D530: 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 27  // 3.@..!.@..-.@..'
    D540: 02 46 40 02 0A 00 40 02 B2 00 40 5B 7A 20 00 C8  // .F@...@...@[z ..
    D550: 00 40 06 08 00 19 00 40 06 80 0C 40 00 32 00 80  // .@.....@...@.2..
    D560: 0C 38 18 60 00 64 00 00 32 00 32 7F 00 64 00 00  // .8.`.d..2.2..d..
    D570: 07 00 02 01 00 00 5B 00 70 01 02 01 08 04 37 00  // ......[.p.....7.
    D580: 00 66 1C 2D 0C 42 06 00 3D E5 00 02 44 4B 00 3D  // .f.-.B..=...DK.=
    D590: E5 00 03 44 F7 00 03 38 00 2F 0A 09 25 00 20 02  // ...D...8./..%. .
    D5A0: 01 01 00 02 F0 01 CD 05 52 12 01 08 AB 0A 81 0A  // ........R.......
    D5B0: 01 18 83 0A 81 0A 5C E2 2F 0A DF 00 5C E2 30 0A  // ......\./...\.0.
    D5C0: DF 00 5B 02 F0 01 CD 05 0E E5 01 80 52 12 02 01  // ..[.........R...
    D5D0: 01 00 02 E4 01 2C 00 52 26 01 39 DD 09 01 02 EC  // .....,.R&.9.....
    D5E0: 01 2C 00 52 26 01 79 DD 09 01 02 F4 01 2C 00 52  // .,.R&.y......,.R
    D5F0: 26 01 B9 DD 09 01 02 FC 01 2C 00 52 26 01 F9 DD  // &........,.R&...
    D600: 09 01 02 E4 01 30 00 52 26 01 39 DE 09 01 02 EC  // .....0.R&.9.....
    D610: 01 30 00 52 26 01 79 DE 09 01 02 F4 01 30 00 52  // .0.R&.y......0.R
    D620: 26 01 B9 DE 09 01 02 FC 01 30 00 52 26 01 F9 DE  // &........0.R&...
    D630: 09 01 31 05 DE 09 01 01 01 00 02 E5 01 08 52 26  // ..1...........R&
    D640: 3D E5 01 04 46 D3 00 02 E5 01 04 3D E5 01 08 46  // =...F......=...F
    D650: E1 00 32 E5 01 04 43 F0 00 1A 3D 01 01 3D E5 01  // ..2...C...=..=..
    D660: 12 45 F0 00 02 E5 01 12 5C 39 02 0A E0 01 5B 52  // .E......\9....[R
    D670: 3B 03 05 00 10 00 00 00 03 05 01 2D 00 00 00 55  // ;..........-...U
    D680: 38 00 3D 01 00 01 45 30 01 03 0D 00 18 00 03 05  // 8.=...E0........
    D690: 01 2E 00 00 00 3D 01 00 02 45 30 01 03 0D 00 20  // .....=...E0.... 
    D6A0: 00 03 05 01 2F 00 00 00 02 01 01 00 02 F0 01 CD  // ..../...........
    D6B0: 05 0E E5 01 80 52 12 56 00 41 01 02 91 0A 01 01  // .....R.V.A......
    D6C0: 04 92 0A 0C 00 01 02 91 0A 00 01 04 92 0A 10 00  // ................
    D6D0: 2D 05 00 01 00 00 00 2D 25 41 01 2D 0D 42 04 00  // -......-%A.-.B..
    D6E0: 3E 25 41 07 45 4D 01 5B 00 01 01 02 04 04 37 00  // >%A.EM.[......7.
    D6F0: 00 3D 25 00 FF 49 EC 00 02 20 00 80 0A 4A 25 80  // .=%..I... ...J%.
    D700: 0A 08 49 26 00 08 25 00 10 07 25 80 0A EF 01 05  // ..I&..%...%.....
    D710: 32 0A 08 00 00 00 01 05 32 0A 10 00 00 00 01 05  // 2.......2.......
    D720: 82 00 10 00 60 C0 01 05 83 00 00 80 03 00 01 05  // ....`...........
    D730: 82 00 14 00 60 C0 03 00 40 83 00 66 18 3E 04 40  // ....`...@..f.>.@
    D740: 04 00 49 EB 00 03 00 40 83 00 03 00 00 83 00 03  // ..I....@........
    D750: 00 41 83 00 3E 05 40 00 00 00 00 44 EB 00 01 00  // .A..>.@....D....
    D760: 91 0A 83 00 01 00 92 0A 83 00 33 0D 40 01 00 3E  // ..........3.@..>
    D770: 0D 40 00 00 49 76 00 01 05 64 C0 0C 02 00 00 54  // .@..Iv...d.....T
    D780: 00 65 C0 01 05 66 C0 CC 28 00 00 54 00 67 C0 15  // .e...f..(..T.g..
    D790: 05 00 02 2D 05 00 00 00 00 7C 01 02 E8 C0 00 51  // ...-.....|.....Q
    D7A0: 32 4A E5 A0 21 80 49 B9 00 01 05 32 0A 08 00 00  // 2J..!.I....2....
    D7B0: 00 01 05 32 0A 04 00 00 00 01 05 32 0A 01 00 00  // ...2.......2....
    D7C0: 00 51 32 50 02 4A 25 80 0A 80 44 DD 00 5C 21 80  // .Q2P.J%...D..\!.
    D7D0: 0A EF 00 5B 01 65 E7 0A FF 01 21 E7 0A 00 02 05  // ...[.e....!.....
    D7E0: 01 04 00 00 00 52 1F 5B 8C 00 01 04 00 00 03 05  // .....R.[........
    D7F0: 40 7C 01 00 00 3D A5 00 00 44 15 00 5B 03 00 46  // @|...=...D..[..F
    D800: 20 49 7C 02 40 46 7E 05 40 A0 86 01 00 03 00 41  //  I|.@F~.@......A
    D810: 23 49 09 05 41 03 00 00 00 6F 02 40 41 7C 05 40  // #I..A....o.@A|.@
    D820: 45 0C 00 00 7E 05 40 40 4B 4C 00 3E 05 40 00 00  // E...~.@@KL.>.@..
    D830: 00 00 49 51 00 03 25 40 01 01 8A 22 49 40 7C 05  // ..IQ..%@..."I@|.
    D840: 40 40 4B 4C 00 7E 05 40 45 0C 00 00 03 00 41 23  // @@KL.~.@E.....A#
    D850: 49 09 05 41 03 00 00 00 75 02 40 41 03 00 46 20  // I..A....u.@A..F 
    D860: 49 33 02 46 40 01 02 21 49 46 51 01 0D 65 23 49  // I3.F@..!IFQ..e#I
    D870: 01 51 01 5B 31 00 01 03 04 00 37 00 00 55 38 00  // .Q.[1.....7..U8.
    D880: 26 05 00 E2 04 00 00 01 E2 9A 0A 40 21 05 41 64  // &..........@!.Ad
    D890: 00 00 00 27 05 40 09 3D 00 00 15 25 40 04 5C A2  // ...'.@.=...%@.\.
    D8A0: 99 0A 8F 40 5B 00 10 00 01 03 00 08 37 00 00 55  // ...@[.......7..U
    D8B0: 18 00 55 08 01 5B 71 01 01 04 00 04 37 00 00 3D  // ..U..[q.....7..=
    D8C0: 65 00 08 49 23 00 02 05 01 38 00 06 0A 52 45 08  // e..I#....8...RE.
    D8D0: 0D 01 FF 03 02 89 00 01 5B 3D 65 00 03 44 70 01  // ........[=e..Dp.
    D8E0: 02 01 01 00 02 65 01 07 52 50 3D 05 02 00 00 00  // .....e..RP=.....
    D8F0: 00 44 0B 01 37 00 00 01 05 82 00 7C 02 20 C0 01  // .D..7......|. ..
    D900: 05 82 00 94 02 20 C0 4A A5 83 00 06 49 49 00 01  // ..... .J....II..
    D910: 05 82 00 7C 02 20 C0 0D 65 83 00 04 01 05 82 00  // ...|. ..e.......
    D920: 7C 02 20 C0 03 00 46 83 00 37 00 00 01 05 82 00  // |. ...F..7......
    D930: 80 02 20 C0 5E 65 46 FC 01 3D 25 00 01 44 96 00  // .. .^eF..=%..D..
    D940: 09 65 46 FC 01 05 82 00 84 02 20 C0 3C 0C 83 00  // .eF....... .<...
    D950: 04 00 44 C6 00 07 0D 83 00 9F FF 51 3C 03 0C 41  // ..D........Q<..A
    D960: 04 00 4C 25 41 20 49 BE 00 0F 25 41 20 01 0A 83  // ..L%A I...%A ...
    D970: 00 41 51 3C 01 0C 83 00 04 00 51 3C 56 00 40 03  // .AQ<......Q<V.@.
    D980: 19 40 00 21 05 40 64 00 00 00 03 05 41 78 5D 02  // .@.!.@d.....Ax].
    D990: 00 33 02 41 40 27 05 41 71 02 00 00 03 22 46 40  // .3.A@'.Aq...."F@
    D9A0: 01 05 82 00 7C 02 20 C0 01 02 83 00 46 01 05 82  // ....|. .....F...
    D9B0: 00 94 02 20 C0 4A A5 83 00 02 49 F7 00 37 00 00  // ... .J....I..7..
    D9C0: 5B 02 01 01 00 52 50 3D 05 02 00 00 00 00 44 6C  // [....RP=......Dl
    D9D0: 01 4B E5 02 40 44 2F 01 01 05 82 00 F8 01 60 C0  // .K..@D/.......`.
    D9E0: 0D 25 83 00 1F 4B 25 02 80 44 3B 01 0D A5 90 48  // .%...K%..D;....H
    D9F0: 01 03 05 41 FF FF FF FF 69 01 41 02 01 05 82 00  // ...A....i.A.....
    DA00: E4 01 60 C0 09 00 41 83 00 0F 01 41 01 01 02 83  // ..`...A....A....
    DA10: 00 41 01 05 82 00 F4 01 60 C0 0D 01 83 00 02 51  // .A......`......Q
    DA20: 32 5B 55 00 00 5B 5B 00 83 00 01 03 04 00 37 00  // 2[U..[[.......7.
    DA30: 00 3D 65 00 09 44 80 00 03 0A 00 42 66 20 03 0C  // .=e..D.....Bf ..
    DA40: 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3E 0A 42 41  // A..-.AB-.B..>.BA
    DA50: 44 7C 00 3D 0C 00 00 00 44 3B 00 2D 0C 42 02 00  // D|.=....D;.-.B..
    DA60: 43 24 00 02 0A 01 42 3D 65 00 03 44 7B 00 3D 65  // C$....B=e..D{.=e
    DA70: 00 07 44 7B 00 03 E4 41 05 00 02 04 01 08 00 3E  // ..D{...A.......>
    DA80: E5 41 00 44 7C 00 3D 8C 00 10 00 47 72 00 2D 0D  // .A.D|.=....Gr.-.
    DA90: 42 06 00 33 E5 41 01 43 57 00 02 04 00 0C 00 03  // B..3.A.CW.......
    DAA0: 0A 42 00 5B 55 00 01 5B 52 1B 5B 00 67 02 01 05  // .B.[U..[R.[.g...
    DAB0: 00 00 37 00 00 03 20 46 CF 05 0E 25 00 60 52 14  // ..7... F...%.`R.
    DAC0: 08 25 00 0F 42 29 00 63 0F 58 00 63 11 4E 01 63  // .%..B).c.X.c.N.c
    DAD0: 12 CC 01 63 01 24 02 63 00 4D 02 63 08 18 01 63  // ...c.$.c.M.c...c
    DAE0: 09 F9 00 63 0A 00 01 63 13 08 01 63 14 10 01 63  // ...c...c...c...c
    DAF0: 0B 20 01 63 0C 14 02 63 0D 28 01 63 10 41 01 5A  // . .c...c.(.c.A.Z
    DB00: 5A 43 F5 00 3D A5 00 02 44 E3 00 54 00 72 4A 3D  // ZC..=...D..T.rJ=
    DB10: A5 00 00 44 71 00 3D A5 00 05 49 EB 00 54 08 A1  // ...Dq.=...I..T..
    DB20: 4A 3D 25 02 00 49 80 00 02 25 02 02 32 25 02 01  // J=%..I...%..2%..
    DB30: 01 E1 A1 4A 02 4A 25 A4 4A 01 49 C6 00 7B 05 01  // ...J.J%.J.I..{..
    DB40: 00 80 00 00 7E 05 40 8C 0A 00 00 56 00 46 03 29  // ....~.@....V.F.)
    DB50: 46 02 27 02 40 46 07 65 A8 4A FE 01 05 A9 4A 00  // F.'.@F.e.J....J.
    DB60: 80 00 00 01 02 AA 4A 40 0D E5 AB 4A 10 0D 65 00  // ......J@...J..e.
    DB70: 4A 04 02 20 00 00 4A 08 25 00 07 0E 25 00 00 52  // J.. ..J.%...%..R
    DB80: 14 14 3D 00 04 5C B9 9C 1B 8F 00 3A 00 00 5B 01  // ..=..\.....:..[.
    DB90: 05 72 4A 01 00 00 00 07 E5 00 4A 2F 0D 65 00 4A  // .rJ.......J/.e.J
    DBA0: 04 3A 00 00 5B 54 20 B0 4A 43 F5 00 01 25 B0 4A  // .:..[T .JC...%.J
    DBB0: 01 43 F5 00 01 25 B0 4A 02 43 F5 00 01 25 B0 4A  // .C...%.J.C...%.J
    DBC0: 03 43 F5 00 07 25 A0 4A EF 43 F5 00 0D 25 A0 4A  // .C...%.J.C...%.J
    DBD0: 10 43 F5 00 0D 65 A8 4A 01 51 0A 07 25 A5 4A FE  // .C...e.J.Q..%.J.
    DBE0: 51 0A 01 0D A4 4A 01 02 51 C8 43 F5 00 0D 25 B6  // Q....J..Q.C...%.
    DBF0: 4A 10 01 31 A7 4A 00 43 F5 00 01 0D 03 4A 1F 00  // J..1.J.C.....J..
    DC00: 01 69 47 4A 02 4C 25 46 10 49 77 01 3D A5 00 03  // .iGJ.L%F.Iw.=...
    DC10: 49 77 01 4A 25 0D 4A 10 49 77 01 01 A5 47 4A 02  // Iw.J%.J.Iw...GJ.
    DC20: 43 7C 01 01 B1 47 4A 00 3D 25 02 00 44 91 01 32  // C|...GJ.=%..D..2
    DC30: 25 02 01 14 25 02 04 5C E1 47 4A 8F 02 3D E5 00  // %...%..\.GJ..=..
    DC40: 04 47 A0 01 0D 25 47 4A 01 43 A5 01 07 25 47 4A  // .G...%GJ.C...%GJ
    DC50: FE 3D A5 00 05 44 B3 01 3D A5 00 00 49 C4 01 02  // .=...D..=...I...
    DC60: A5 00 00 03 39 40 00 33 25 40 01 01 22 A3 4A 40  // ....9@.3%@..".J@
    DC70: 02 E0 02 48 4A 43 F5 00 02 E0 02 48 4A 4B E5 02  // ...HJC.....HJK..
    DC80: 01 44 F5 00 02 B0 00 47 4A 02 E5 00 04 4A 25 47  // .D.....GJ....J%G
    DC90: 4A 01 44 ED 01 02 E5 00 08 3D A5 00 02 44 FB 01  // J.D......=...D..
    DCA0: 3D A5 00 03 49 04 02 54 00 48 4A 50 02 43 F5 00  // =...I..T.HJP.C..
    DCB0: 02 A5 00 00 03 31 43 00 4A 62 47 4A 44 44 F5 00  // .....1C.JbGJDD..
    DCC0: 54 08 A4 4A 51 C8 0D 25 A5 4A 01 51 32 43 F5 00  // T..JQ..%.J.Q2C..
    DCD0: 0D 25 48 4A 01 3D A5 00 00 44 39 02 01 0D 79 4A  // .%HJ.=...D9...yJ
    DCE0: 0F 01 43 F5 00 03 39 43 00 03 02 40 44 33 25 40  // ..C...9C...@D3%@
    DCF0: 01 01 0A 79 4A 40 43 F5 00 54 00 79 4A 07 25 48  // ...yJ@C..T.yJ.%H
    DD00: 4A FE 07 0D 47 4A FE 80 54 20 A0 4A 54 20 B0 4A  // J...GJ..T .JT .J
    DD10: 43 F5 00 00 29 00 01 01 00 00 37 00 00 66 1C 2D  // C...).....7..f.-
    DD20: 0D 42 14 00 03 30 40 CD 05 3E 25 40 00 44 28 00  // .B...0@..>%@.D(.
    DD30: 33 25 40 01 2D 0C 42 04 00 43 15 00 5B 00 46 01  // 3%@.-.B..C..[.F.
    DD40: 01 06 00 00 37 00 00 42 29 00 63 07 24 01 63 01  // ....7..B).c.$.c.
    DD50: 25 00 63 00 C0 00 63 0B 27 01 63 04 2C 01 5A 5A  // %.c...c.'.c.,.ZZ
    DD60: 43 3F 01 02 65 00 11 52 04 4B E5 02 01 49 20 01  // C?..e..R.K...I .
    DD70: 02 65 00 0A 55 08 02 52 4D 3D E5 00 04 47 50 00  // .e..U..RM=...GP.
    DD80: 68 25 00 01 02 25 02 01 52 4D 68 25 00 01 3D A5  // h%...%..RMh%..=.
    DD90: 00 00 49 82 00 20 05 01 64 00 00 00 02 05 01 14  // ..I.. ..d.......
    DDA0: 1E 00 02 2C 21 01 00 02 01 02 00 02 02 00 40 52  // ...,!.........@R
    DDB0: 0C 26 05 00 64 00 00 00 02 02 01 40 02 01 00 02  // .&..d......@....
    DDC0: 02 65 00 01 55 08 02 52 4D 3D E5 00 04 47 A0 00  // .e..U..RM=...G..
    DDD0: 68 25 00 01 02 25 02 01 52 4D 68 25 00 01 51 05  // h%...%..RMh%..Q.
    DDE0: 02 65 00 01 52 04 51 0A 02 65 00 09 52 4D 3D E5  // .e..R.Q..e..RM=.
    DDF0: 00 04 47 20 01 68 25 00 01 52 4D 43 20 01 02 65  // ..G .h%..RMC ..e
    DE00: 00 12 52 04 4B E5 02 01 44 20 01 02 65 00 08 52  // ..R.K...D ..e..R
    DE10: 4D 3D E5 00 04 47 E4 00 68 25 00 01 52 4D 68 25  // M=...G..h%..RMh%
    DE20: 00 01 02 65 00 00 52 04 02 65 00 00 52 4D 3D E5  // ...e..R..e..RM=.
    DE30: 00 04 47 01 01 68 25 00 01 52 4D 68 25 00 01 3D  // ..G..h%..RMh%..=
    DE40: A5 00 00 49 20 01 02 01 02 00 02 05 01 14 00 00  // ...I ...........
    DE50: 00 2C 21 01 00 55 00 00 52 0C 02 01 00 02 3A 00  // .,!..U..R.....:.
    DE60: 00 5B 43 20 01 52 4D 43 20 01 66 06 02 29 00 00  // .[C .RMC .f..)..
    DE70: 02 68 00 CB 05 02 8C 00 32 00 52 33 5B 02 29 00  // .h......2.R3[.).
    DE80: 00 52 33 5B 38 03 02 01 00 00 37 00 00 0E 25 00  // .R3[8.....7...%.
    DE90: 20 52 14 08 25 00 0F 42 29 00 63 07 35 00 63 0A  //  R..%..B).c.5.c.
    DEA0: 3D 00 63 01 21 01 63 00 7B 01 63 09 BB 01 63 08  // =.c.!.c.{.c...c.
    DEB0: E9 01 63 0B 01 02 5A 5A 5B 0D 65 C4 48 08 43 AD  // ..c...ZZ[.e.H.C.
    DEC0: 02 03 0A 46 48 66 FF 2D 0D 42 1A 03 56 00 40 20  // ...FHf.-.B..V.@ 
    DED0: 25 00 05 2D 0A 42 40 20 25 00 02 03 0A 48 40 01  // %..-.B@ %....H@.
    DEE0: 04 06 48 00 00 01 64 05 48 04 00 07 E5 05 48 FC  // ..H...d.H.....H.
    DEF0: 07 A5 05 48 8F 03 0A 48 46 56 00 41 3D E5 00 04  // ...H...HFV.A=...
    DF00: 47 96 00 03 05 41 00 80 01 01 4B 25 02 01 44 96  // G....A....K%..D.
    DF10: 00 09 4D 41 7F FF 03 E5 41 02 5C FA D3 48 FC 41  // ..MA....A.\..H.A
    DF20: 5C 52 C5 48 7F FE 41 3D A5 00 00 49 CC 00 07 A5  // \R.H..A=...I....
    DF30: C1 48 7F 66 FF 2D 0D 42 DE 02 2D 0D 42 06 00 56  // .H.f.-.B..-.B..V
    DF40: 00 41 3D A5 02 14 49 49 02 03 25 41 20 43 49 02  // .A=...II..%A CI.
    DF50: 0D A5 C1 48 80 66 FF 2D 0D 42 B6 02 03 04 40 00  // ...H.f.-.B....@.
    DF60: 00 3E 05 40 00 00 00 00 44 AD 02 03 21 43 00 03  // .>.@....D...!C..
    DF70: E2 41 44 4C E4 41 05 00 44 07 01 3D A4 00 04 00  // .ADL.A..D..=....
    DF80: 49 07 01 3D 04 01 00 00 47 0F 01 2D 0D 42 0C 00  // I..=....G..-.B..
    DF90: 43 D8 00 03 04 40 06 00 03 24 41 0A 00 03 64 41  // C....@...$A...dA
    DFA0: 0B 00 43 52 02 07 65 C4 48 F7 03 0A 46 48 56 00  // ..CR..e.H...FHV.
    DFB0: 41 3D E5 00 04 47 3C 01 07 25 E2 48 F9 43 42 01  // A=...G<..%.H.CB.
    DFC0: 5C 25 E2 48 F9 02 4A 65 E0 48 01 44 42 01 07 25  // \%.H..Je.H.DB..%
    DFD0: E0 48 F8 4A 65 E0 48 01 44 4F 01 2D E5 41 01 2D  // .H.Je.H.DO.-.A.-
    DFE0: 0D 48 10 00 3E E5 41 04 45 2D 01 03 0A 48 46 0D  // .H..>.A.E-...HF.
    DFF0: 25 D1 48 02 4A 25 D1 48 04 44 70 01 43 AD 02 07  // %.H.J%.H.Dp.C...
    E000: 25 D1 48 FD 4A 25 D1 48 04 49 80 01 0D 65 C4 48  // %.H.J%.H.I...e.H
    E010: 08 56 00 41 4A 65 E0 48 01 44 90 01 5C 25 E0 48  // .V.AJe.H.D..\%.H
    E020: F8 04 51 02 4A 65 E0 48 01 44 A0 01 2D A5 41 01  // ..Q.Je.H.D..-.A.
    E030: 2D 0D 48 10 00 3E A5 41 04 45 90 01 43 AD 02 03  // -.H..>.A.E..C...
    E040: 0A 46 48 56 08 48 20 25 00 02 03 22 48 40 0D 25  // .FHV.H %..."H@.%
    E050: 05 48 01 0D E5 06 48 10 03 0A 48 46 0D A5 D3 48  // .H....H...HF...H
    E060: 01 51 14 0D 25 D3 48 01 51 14 43 AD 02 07 A5 D3  // .Q..%.H.Q.C.....
    E070: 48 FE 56 00 40 20 25 00 02 03 0A 48 40 07 E5 06  // H.V.@ %....H@...
    E080: 48 EF 43 AD 02 08 A5 00 1B 66 FF 2D 0D 42 DE 02  // H.C......f.-.B..
    E090: 03 21 43 00 03 A2 40 44 03 0C 40 02 00 4C A4 40  // .!C...@D..@..L.@
    E0A0: 00 00 49 29 02 2D 0C 42 04 00 43 14 02 2D 0D 42  // ..I).-.B..C..-.B
    E0B0: 06 00 3D A4 00 00 00 44 49 02 03 24 41 00 00 3E  // ..=....DI..$A..>
    E0C0: 25 41 FF 44 49 02 2D 0A 42 40 43 2E 02 03 04 40  // %A.DI.-.B@C....@
    E0D0: 01 00 03 65 41 08 01 0A C3 48 40 01 05 DA 48 88  // ...eA....H@...H.
    E0E0: 88 01 00 01 F2 DB 48 40 01 BA E2 48 40 01 BA F2  // ......H@...H@...
    E0F0: 48 40 01 BA 02 49 40 01 BA 12 49 40 01 25 E1 48  // H@...I@...I@.%.H
    E100: 20 01 25 F1 48 20 01 25 01 49 20 01 25 11 49 20  //  .%.H .%.I .%.I 
    E110: 01 2A E1 48 41 01 2A F1 48 41 01 2A 01 49 41 01  // .*.HA.*.HA.*.IA.
    E120: 2A 11 49 41 3D 65 00 0B 44 AD 02 5C A2 C8 48 DF  // *.IA=e..D..\..H.
    E130: 41 3A 00 00 5B 7A 84 00 0C 00 FF FF FF 00 02 3F  // A:..[z.........?
    E140: 00 00 00 5F 00 08 40 9C 00 00 03 3F 00 00 00 5F  // ..._..@....?..._
    E150: 00 08 FF FF FF 00 03 3F 00 00 2A 57 20 10 00 00  // .......?..*W ...
    E160: 00 00 3F 00 05 00 39 00 00 4B 00 00 80 01 3A 00  // ..?...9..K....:.
    E170: 00 80 02 1B 00 00 80 03 00 00 00 80 08 34 25 00  // .............4%.
    E180: 80 09 1C 25 00 80 0A 00 1B 00 9F 10 14 3F 00 80  // ...%.........?..
    E190: 11 01 38 00 9F 18 00 4A 00 9F FF 00 00 FF 03 02  // ..8....J........
    E1A0: 01 00 01 03 02 01 00 01 03 02 01 00 01 03 02 01  // ................
    E1B0: 00 01 03 02 01 00 01 03 02 01 00 01 4C 02 01 02  // ............L...
    E1C0: 00 08 37 00 00 3D 0D 00 00 00 44 CE 01 56 00 41  // ..7..=....D..V.A
    E1D0: 03 21 41 01 09 25 41 0F 15 0D 41 02 03 0A 40 42  // .!A..%A...A...@B
    E1E0: 66 FF 2D 0D 42 34 02 2D 0A 42 41 03 0C 48 02 00  // f.-.B4.-.BA..H..
    E1F0: 0D A5 68 48 01 54 08 68 48 03 0C 48 00 00 03 F9  // ..hH.T.hH..H....
    E200: 41 01 15 3D 41 04 5C BA 00 5C 8F 41 03 0A 42 40  // A..=A.\..\.A..B@
    E210: 4A 25 00 5C 01 49 81 00 0D 0D 00 5C 01 01 0D 25  // J%.\.I.....\...%
    E220: 00 5C 10 4A 25 00 5C 20 44 67 00 07 25 00 5C EF  // .\.J%.\ Dg..%.\.
    E230: 4A 25 00 5C 20 49 74 00 0D 25 03 5C 40 56 00 41  // J%.\ It..%.\@V.A
    E240: 03 09 41 00 3B 02 41 03 3B 41 00 1B 25 41 04 01  // ..A.;.A.;A..%A..
    E250: A2 01 5C 41 03 69 41 01 15 2D 41 04 01 2A 01 5C  // ..\A.iA..-A..*.\
    E260: 41 56 00 40 0F E5 40 80 03 73 40 00 01 02 06 5C  // AV.@..@..s@....\
    E270: 40 56 00 40 03 6B 40 00 01 02 06 5C 40 03 63 40  // @V.@.k@....\@.c@
    E280: 00 01 02 06 5C 40 03 7B 40 00 09 65 40 0F 01 02  // ....\@.{@..e@...
    E290: 06 5C 40 3E 25 41 04 47 10 01 33 25 41 04 2D 05  // .\@>%A.G..3%A.-.
    E2A0: 46 04 00 00 00 03 63 40 00 01 02 06 5C 40 03 6B  // F.....c@....\@.k
    E2B0: 40 00 01 02 06 5C 40 03 73 40 00 01 02 06 5C 40  // @....\@.s@....\@
    E2C0: 03 7B 40 00 01 02 06 5C 40 43 D7 00 0D 25 03 5C  // .{@....\@C...%.\
    E2D0: 02 0D 25 01 5C 01 03 29 40 01 21 25 40 0A 2D 25  // ..%.\..)@.!%@.-%
    E2E0: 40 32 4A 25 04 5C 01 49 42 01 51 0A 33 25 40 01  // @2J%.\.IB.Q.3%@.
    E2F0: 3E 25 40 00 49 26 01 02 65 01 01 43 CA 01 4A 05  // >%@.I&..e..C..J.
    E300: 04 5C F0 8F FF 00 44 54 01 02 65 01 02 43 CA 01  // .\....DT..e..C..
    E310: 01 05 06 5C 01 00 00 80 03 00 40 06 5C 02 6A 01  // ...\......@.\.j.
    E320: 40 02 B8 01 04 5C 08 A5 01 1F 3D A5 01 00 46 7C  // @....\....=...F|
    E330: 01 02 65 01 03 43 CA 01 32 A5 01 01 3D 8D 00 00  // ..e..C..2...=...
    E340: 00 44 CA 01 3D A5 01 00 44 CA 01 03 31 41 01 03  // .D..=...D...1A..
    E350: 19 40 00 56 18 40 3B 02 40 03 28 40 06 5C 03 68  // .@.V.@;.@.(@.\.h
    E360: 40 06 5C 03 A8 40 06 5C 03 E8 40 06 5C 04 02 00  // @.\..@.\..@.\...
    E370: 40 3E 25 41 04 47 CA 01 33 25 41 04 2D 05 46 04  // @>%A.G..3%A.-.F.
    E380: 00 00 00 43 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34  // ...C..:..[f.-.B4
    E390: 02 03 0C 48 00 00 01 8D 08 5C 32 00 01 05 09 5C  // ...H.....\2....\
    E3A0: 00 1C 02 00 01 05 0A 5C 10 11 3D 12 2D 0D 42 04  // .......\..=.-.B.
    E3B0: 00 2C 25 00 01 3D 25 00 06 49 D5 01 56 08 48 03  // .,%..=%..I..V.H.
    E3C0: 25 41 10 0D 65 97 48 40 07 65 97 48 BF 33 25 41  // %A..e.H@.e.H.3%A
    E3D0: 01 3E 25 41 00 49 07 02 0D 25 3B 48 01 54 30 3B  // .>%A.I...%;H.T0;
    E3E0: 48 0D 25 3C 48 01 54 30 3C 48 51 32 5B 7A 18 00  // H.%<H.T0<HQ2[z..
    E3F0: 00 00 00 00 1C 00 04 00 38 00 08 00 54 00 0C 00  // ........8...T...
    E400: 70 00 10 00 8C 00 14 00 5C 00 01 02 00 04 02 25  // p.......\......%
    E410: 01 04 03 31 41 00 09 0D 41 0F 00 15 0D 41 01 66  // ...1A...A....A.f
    E420: FF 2D 0D 42 50 00 2D 0A 42 41 03 0C 48 00 00 07  // .-.BP.-.BA..H...
    E430: A5 68 48 FE 01 0D 68 48 11 11 50 02 4A 0D 6B 48  // .hH...hH..P.J.kH
    E440: 01 00 49 41 00 02 25 01 13 54 08 68 48 54 00 6A  // ..IA..%..T.hHT.j
    E450: 48 3A 00 00 5B 7A 0C 00 00 00 04 00 08 00 0C 00  // H:..[z..........
    E460: 10 00 14 00 9F 00 01 01 04 00 37 00 00 52 3E 55  // ..........7..R>U
    E470: 00 00 02 E4 00 16 00 66 1C 2D 0C 42 04 00 52 12  // .......f.-.B..R.
    E480: 52 3E 01 0C D8 09 06 00 01 64 80 0A 1C 00 02 05  // R>.......d......
    E490: 00 08 00 00 00 02 0C 01 08 00 52 1F 03 08 41 80  // ..........R...A.
    E4A0: 0A 09 0D 41 03 00 66 FF 2D 0D 42 9B 00 2D 0A 42  // ...A..f.-.B..-.B
    E4B0: 41 03 24 41 00 00 01 05 82 00 0C 00 20 C0 5C 0A  // A.$A........ .\.
    E4C0: 83 00 00 FC 41 02 05 00 30 75 00 03 52 3F 02 05  // ....A...0u..R?..
    E4D0: 00 A0 86 01 03 52 3F 02 05 00 48 E8 01 03 52 3F  // .....R?...H...R?
    E4E0: 02 05 00 30 75 00 03 52 3F 02 05 00 A0 86 01 03  // ...0u..R?.......
    E4F0: 52 3F 02 05 00 98 AB 02 03 52 3F 5B 7A 04 00 18  // R?.......R?[z...
    E500: 10 08 04 00 AC 01 01 01 08 00 37 00 00 03 88 00  // ..........7.....
    E510: 28 08 03 09 00 00 03 2A 41 00 03 22 43 41 01 22  // (......*A.."CA."
    E520: 28 08 44 5C 62 28 08 F8 41 42 22 00 63 01 39 00  // (.D\b(..AB".c.9.
    E530: 63 08 7E 00 63 04 07 01 5A 5A 43 A6 01 01 24 93  // c.~.c...ZZC...$.
    E540: 0A 00 00 01 24 94 0A 01 00 01 04 A3 0A 02 00 01  // ....$...........
    E550: 04 A4 0A 06 00 01 04 A5 0A 0A 00 01 04 A6 0A 0E  // ................
    E560: 00 01 04 A7 0A 12 00 01 04 A8 0A 16 00 01 04 A9  // ................
    E570: 0A 1A 00 01 04 AA 0A 1E 00 2D 0D 42 22 00 43 9B  // .........-.B".C.
    E580: 01 5B 21 65 00 02 03 22 43 40 03 0A 41 44 56 08  // .[!e..."C@..ADV.
    E590: 40 37 02 00 4C 09 41 01 49 A3 00 54 20 00 00 54  // @7..L.A.I..T ..T
    E5A0: 30 00 00 0F 25 40 01 15 0D 41 01 4C 09 41 01 49  // 0...%@...A.L.A.I
    E5B0: BA 00 0F 25 40 02 54 28 00 00 54 38 00 00 37 00  // ...%@.T(..T8..7.
    E5C0: 00 3E 25 40 03 49 D5 00 03 2A 41 00 2D 25 41 04  // .>%@.I...*A.-%A.
    E5D0: 03 22 43 41 07 0A 52 0D 45 52 3E 03 24 40 16 00  // ."CA..R.ER>.$@..
    E5E0: 21 25 40 04 55 00 00 02 EA 00 00 2C E2 00 40 66  // !%@.U......,..@f
    E5F0: 1C 03 0C 40 08 00 3E 0D 40 00 00 44 01 01 2D 0C  // ...@..>.@..D..-.
    E600: 42 08 00 52 12 37 00 00 43 9B 01 01 05 91 0A 00  // B..R.7..C.......
    E610: 00 00 00 3C 0D 92 0A 00 00 44 9B 01 3C 25 E7 0A  // ...<.....D..<%..
    E620: 07 49 39 01 01 05 91 0A 0E 00 00 00 03 00 01 92  // .I9.............
    E630: 0A 5C 05 92 0A 00 FF 00 FF 0F 00 FF 00 01 05 32  // .\.............2
    E640: 0A 05 00 00 00 51 0A 01 05 32 0A 01 00 00 00 03  // .....Q...2......
    E650: 00 41 E7 0A 3E 62 41 41 49 4B 01 51 0A 3E 25 41  // .A..>bAAIK.Q.>%A
    E660: 00 44 74 01 3E 25 41 07 49 9B 01 01 05 91 0A 0E  // .Dt.>%A.I.......
    E670: 00 00 00 01 02 92 0A 01 01 05 91 0A 03 00 00 00  // ................
    E680: 03 38 41 92 0A 15 25 41 04 3C E2 9A 0A 41 45 9B  // .8A...%A.<...AE.
    E690: 01 4A E5 99 0A 04 44 9B 01 5C 25 F3 09 FE 22 2D  // .J....D..\%..."-
    E6A0: 65 00 01 3E 65 00 04 45 12 00 01 1A 28 08 00 5B  // e..>e..E....(..[
    E6B0: D1 00 01 01 08 00 37 00 00 66 FF 2D 0D 42 BD 00  // ......7..f.-.B..
    E6C0: 56 00 41 03 21 41 00 15 0D 41 02 2D 0A 42 41 03  // V.A.!A...A.-.BA.
    E6D0: 04 01 00 00 66 FF 2D 0D 42 C9 00 03 05 00 00 00  // ....f.-.B.......
    E6E0: 00 40 56 00 40 54 00 00 00 03 4C 00 00 00 01 02  // .@V.@T....L.....
    E6F0: 00 C2 00 01 0A 00 00 01 03 98 41 01 00 56 08 41  // ..........A..V.A
    E700: 03 22 43 41 4C 8A 41 44 49 5F 00 2D 65 41 01 2D  // ."CAL.ADI_.-eA.-
    E710: 25 41 01 3E 39 41 00 45 50 00 3E 71 41 00 47 A1  // %A.>9A.EP.>qA.G.
    E720: 00 33 71 41 00 03 39 41 00 33 25 41 01 03 22 43  // .3qA..9A.3%A.."C
    E730: 41 4C 8A 41 44 49 79 00 0F 8A 41 44 33 65 41 01  // AL.ADIy...AD3eA.
    E740: 3E 65 41 00 49 79 00 01 1A 00 00 01 01 9A 01 00  // >eA.Iy..........
    E750: 41 2D 0D 42 02 00 2D 25 40 01 3E 25 40 04 49 39  // A-.B..-%@.>%@.I9
    E760: 00 01 05 00 C2 00 00 00 E0 5B 7A 14 00 6F 22 70  // .........[z..o"p
    E770: 22 3D 26 DF 26 40 22 41 22 00 00 00 01 00 02 00  // "=&.&@"A".......
    E780: 03 00 E5 00 02 02 14 00 3D 25 02 01 44 1C 00 3D  // ........=%..D..=
    E790: 25 02 02 44 3E 00 3D 25 02 03 44 63 00 5B 2C 02  // %..D>.=%..Dc.[,.
    E7A0: 01 41 03 05 00 FF FF FF FF 33 02 00 40 3E 01 00  // .A.......3..@>..
    E7B0: 00 48 39 00 2C 05 01 01 00 00 00 2C 02 00 40 5B  // .H9.,......,..@[
    E7C0: 3D B9 02 02 44 5E 00 3D 01 00 01 45 51 00 32 01  // =...D^.=...EQ.2.
    E7D0: 00 01 5B 32 01 01 00 02 01 00 01 02 B9 02 02 5B  // ..[2...........[
    E7E0: 2C 01 00 01 5B 3D 05 00 00 00 00 00 49 77 00 3D  // ,...[=......Iw.=
    E7F0: 05 01 00 00 00 00 44 E0 00 56 00 43 03 0D 40 1F  // ......D..V.C..@.
    E800: 00 03 01 00 00 3D 05 01 00 00 00 00 44 95 00 03  // .....=......D...
    E810: 01 00 01 03 65 40 20 03 22 43 40 4C 02 00 44 49  // ....e@ ."C@L..DI
    E820: A7 00 33 25 40 01 43 95 00 2D 2A 40 40 1B 25 40  // ..3%@.C..-*@@.%@
    E830: 01 03 22 43 40 03 02 00 44 03 01 41 01 7D 02 00  // .."C@...D..A.}..
    E840: 00 27 05 40 02 00 00 00 2D 02 41 00 1B 05 41 01  // .'.@....-.A...A.
    E850: 2D 02 41 40 3E 02 00 41 44 E0 00 03 02 00 41 43  // -.A@>..AD.....AC
    E860: B7 00 02 02 00 00 5B 00 D1 01 02 01 04 04 37 00  // ......[.......7.
    E870: 00 42 21 00 63 07 29 00 63 03 66 00 63 02 D5 00  // .B!.c.).c.f.c...
    E880: 63 04 FA 00 63 0C 85 01 63 0D A8 01 5A 5A 43 D0  // c...c...c...ZZC.
    E890: 01 01 0D 1D 48 9F 0F 01 05 1E 48 00 00 00 00 01  // ....H.....H.....
    E8A0: 05 1F 48 7D 00 00 00 66 06 01 4C 1F 48 39 00 03  // ..H}...f..L.H9..
    E8B0: 24 46 42 00 3E 25 46 00 44 58 00 01 25 1F 48 00  // $FB.>%F.DX..%.H.
    E8C0: 4A 25 1B 48 10 49 D0 01 0D E5 1B 48 02 5B 4A A5  // J%.H.I.....H.[J.
    E8D0: CB 05 01 49 D0 01 4A 25 1B 48 01 44 D0 01 4A 25  // ...I..J%.H.D..J%
    E8E0: 1C 48 10 44 76 00 4A E5 1B 48 02 49 91 00 4A 25  // .H.Dv.J..H.I..J%
    E8F0: 1C 48 08 49 D0 01 43 C5 00 4A E5 1B 48 01 49 D0  // .H.I..C..J..H.I.
    E900: 01 4A 25 1B 48 10 44 C5 00 0D A5 1B 48 03 0D 65  // .J%.H.D.....H..e
    E910: 1B 48 03 01 0D 1D 48 00 00 5C 25 1B 48 EF 01 4A  // .H....H..\%.H..J
    E920: 25 1C 48 10 44 B7 00 01 0D 1D 48 9F 0F 07 E5 1B  // %.H.D.....H.....
    E930: 48 FC 0D E5 1F 48 01 0D 25 1B 48 11 5B 66 06 03  // H....H..%.H.[f..
    E940: 24 46 42 00 3E 25 46 00 49 D0 01 4A 25 1B 48 01  // $FB.>%F.I..J%.H.
    E950: 44 D0 01 4A 25 1C 48 10 44 EB 00 5C E5 1B 48 FE  // D..J%.H.D..\..H.
    E960: 02 5B 4A 65 D0 05 02 44 07 01 0D 25 23 48 01 3D  // .[Je...D...%#H.=
    E970: 8D 00 00 00 44 84 01 03 05 46 80 F0 FA 02 56 00  // ....D....F....V.
    E980: 41 03 19 41 00 21 05 41 FF 0F 00 00 27 02 46 40  // A..A.!.A....'.F@
    E990: 3E 05 41 00 00 00 00 44 37 01 2D 0D 40 01 00 01  // >.A....D7.-.@...
    E9A0: 8A 1D 48 40 56 00 41 03 19 41 00 21 02 40 41 27  // ..H@V.A..A.!.@A'
    E9B0: 02 46 40 01 A5 22 48 0C 01 0A 22 48 40 15 05 40  // .F@.."H..."H@..@
    E9C0: 04 56 00 41 03 29 41 00 2D 0D 41 01 00 21 02 40  // .V.A.)A.-.A..!.@
    E9D0: 41 1B 05 40 08 01 0A 20 48 40 0D E5 20 48 C0 07  // A..@... H@.. H..
    E9E0: 25 23 48 FE 4A 65 23 48 01 49 7C 01 5B 4A 25 1B  // %#H.Je#H.I|.[J%.
    E9F0: 48 01 44 9D 01 4A 25 1B 48 10 49 D0 01 4A 25 1C  // H.D..J%.H.I..J%.
    EA00: 48 10 44 95 01 07 E5 1F 48 FE 0D 25 1B 48 11 5B  // H.D.....H..%.H.[
    EA10: 4A 25 1B 48 01 44 D0 01 4A 25 1B 48 10 44 D0 01  // J%.H.D..J%.H.D..
    EA20: 4A 25 1C 48 10 44 B8 01 07 A5 1B 48 FC 07 65 1B  // J%.H.D.....H..e.
    EA30: 48 FC 5C 25 1B 48 EF 01 5B 00 71 00 03 01 08 00  // H.\%.H..[.q.....
    EA40: 37 00 00 56 00 01 3D E5 00 20 48 1B 00 03 39 43  // 7..V..=.. H...9C
    EA50: 00 03 02 01 44 03 05 00 00 00 10 C0 2D 09 00 00  // ....D.......-...
    EA60: 01 02 82 00 00 03 00 40 83 00 56 00 41 03 31 41  // .......@..V.A.1A
    EA70: 00 75 02 40 41 03 25 41 20 33 31 41 00 3D E2 00  // .u.@A.%A 31A.=..
    EA80: 41 47 61 00 2D 0D 00 04 00 01 02 82 00 00 02 00  // AGa.-...........
    EA90: 00 83 00 6E 02 00 41 0F 01 40 00 02 02 00 40 33  // ...n..A..@....@3
    EAA0: 05 01 01 00 00 00 08 02 00 01 5B 00 CE 00 03 01  // ..........[.....
    EAB0: 00 10 37 00 00 56 00 40 4A 25 00 EC 01 44 30 00  // ..7..V.@J%...D0.
    EAC0: 4A 25 05 EC 1E 49 30 00 03 25 40 01 01 05 05 EC  // J%...I0..%@.....
    EAD0: 03 00 00 00 4A 65 05 EC 0F 49 28 00 3D 65 02 00  // ....Je...I(.=e..
    EAE0: 49 3C 00 2C 28 02 09 08 3D E5 02 00 49 48 00 2C  // I<.,(...=...IH.,
    EAF0: A8 02 09 08 3D 65 02 02 49 6B 00 01 05 82 00 10  // ....=e..Ik......
    EB00: 00 60 C0 01 01 83 00 00 01 05 82 00 14 00 60 C0  // .`............`.
    EB10: 02 05 00 0C 02 00 00 3D E5 02 03 49 81 00 01 01  // .......=...I....
    EB20: 82 00 01 02 05 01 0C 02 00 00 43 81 00 54 00 63  // ..........C..T.c
    EB30: C0 01 01 64 C0 00 01 21 65 C0 02 01 01 66 C0 01  // ...d...!e....f..
    EB40: 01 31 67 C0 02 01 01 E8 C0 03 3D 65 02 01 44 AE  // .1g.......=e..D.
    EB50: 00 3D E5 02 01 44 AE 00 51 02 4A E5 A0 21 80 49  // .=...D..Q.J..!.I
    EB60: AE 00 3E 25 40 01 49 CD 00 01 05 05 EC 01 00 00  // ..>%@.I.........
    EB70: 00 4A 65 05 EC 0F 49 C5 00 5B F9 02 02 01 00 00  // .Je...I..[......
    EB80: 37 00 00 3D 25 01 01 44 7B 00 3D 25 01 02 44 68  // 7..=%..D{.=%..Dh
    EB90: 01 3D 25 01 00 49 CA 02 3D 05 00 00 00 00 00 49  // .=%..I..=......I
    EBA0: 39 00 3A 00 00 0D 25 68 18 01 4A 65 68 18 01 44  // 9.:...%h..Jeh..D
    EBB0: 30 00 5B 54 20 68 18 52 3C 03 00 40 24 01 3E 39  // 0.[T h.R<..@$.>9
    EBC0: 40 00 44 77 00 4A A5 24 01 08 44 4B 00 03 39 40  // @.Dw.J.$..DK..9@
    EBD0: 00 3E E5 40 00 49 62 00 03 E5 40 20 01 02 24 01  // .>.@.Ib...@ ..$.
    EBE0: 40 4A A5 24 01 08 44 67 00 4A A5 24 01 10 44 6F  // @J.$..Dg.J.$..Do
    EBF0: 00 55 38 00 5B 3D 65 01 02 44 D7 00 02 05 00 60  // .U8.[=e..D.....`
    EC00: EA 00 00 52 3C 3C F9 24 01 00 44 C1 00 07 25 15  // ...R<<.$..D...%.
    EC10: 01 FE 4A A5 24 01 10 44 98 00 03 00 40 24 01 03  // ..J.$..D....@$..
    EC20: F9 40 00 3E 25 40 00 49 B4 00 03 25 40 68 01 02  // .@.>%@.I...%@h..
    EC30: 24 01 40 4A A5 24 01 10 44 B9 00 5D 05 00 00 00  // $.@J.$..D..]....
    EC40: 00 FF 40 7E 05 00 52 29 07 0D 18 01 F8 FE 43 3A  // ..@~..R)......C:
    EC50: 01 02 05 00 00 46 C3 23 07 25 15 01 FE 4A A5 01  // .....F.#.%...J..
    EC60: 17 03 44 3A 01 56 08 40 03 31 40 01 15 0D 40 0E  // ..D:.V.@.1@...@.
    EC70: 0F 0D 40 0F 04 01 0A 18 17 40 5C B1 19 17 FC 01  // ..@......@\.....
    EC80: 51 05 07 A5 01 17 FC 01 25 05 17 40 01 05 02 17  // Q.......%..@....
    EC90: 00 00 3C 00 01 65 1C 17 01 54 08 04 17 01 A5 05  // ..<..e...T......
    ECA0: 17 E8 0D A5 19 17 10 4A 65 24 17 02 44 2D 01 0D  // .......Je$..D-..
    ECB0: 65 19 17 03 01 01 42 01 00 01 01 46 01 00 01 01  // e.....B....F....
    ECC0: 4A 01 00 01 01 4E 01 00 01 01 52 01 00 01 01 56  // J....N....R....V
    ECD0: 01 00 3D 65 01 02 49 67 01 5C 0D 18 01 F8 FF 01  // ..=e..Ig.\......
    ECE0: 01 5B 56 00 41 03 31 41 01 09 25 41 03 15 25 41  // .[V.A.1A..%A..%A
    ECF0: 02 66 FF 2D 0D 42 D1 02 2D 0A 42 41 26 05 00 0A  // .f.-.B..-.BA&...
    ED00: 00 00 00 03 04 41 00 00 27 02 41 40 3E 05 40 00  // .....A..'.A@>.@.
    ED10: 00 01 00 45 A1 01 03 0D 40 FF FF 66 FF 2D 0D 42  // ...E....@..f.-.B
    ED20: E1 02 56 00 41 03 39 41 01 15 25 41 02 2D 0A 42  // ..V.A.9A..%A.-.B
    ED30: 41 03 0C 48 00 00 01 0A 30 1B 40 3A 00 00 3D 65  // A..H....0.@:..=e
    ED40: 01 0B 49 2C 02 20 05 00 64 00 00 00 03 0C 48 02  // ..I,. ..d.....H.
    ED50: 00 03 00 41 40 01 0F 25 41 10 09 0D 41 DF F7 4B  // ...A@..%A...A..K
    ED60: A5 01 04 44 F0 01 0F 65 41 08 03 0C 48 00 00 4A  // ...D...eA...H..J
    ED70: 05 9C 1B 01 00 00 00 44 15 02 03 0C 48 02 00 3C  // .......D....H..<
    ED80: 02 41 01 40 49 15 02 3C 02 40 01 41 44 CA 02 03  // .A.@I..<.@.AD...
    ED90: 0C 48 02 00 07 25 40 01 EF 01 02 41 01 40 01 0A  // .H...%@....A.@..
    EDA0: 40 01 41 43 CA 02 56 00 40 03 8D 40 0C 00 3D 65  // @.AC..V.@..@..=e
    EDB0: 01 18 44 4F 02 03 8D 40 3E 00 3D 65 01 19 44 4F  // ..DO...@>.=e..DO
    EDC0: 02 03 A9 40 01 33 A5 40 14 03 31 40 01 09 25 40  // ...@.3.@..1@..%@
    EDD0: 03 15 25 40 04 0F 0D 40 01 01 4B A5 01 04 44 6C  // ..%@...@..K...Dl
    EDE0: 02 0F 0D 40 00 02 56 00 41 03 29 41 01 33 25 41  // ...@..V.A.)A.3%A
    EDF0: 14 03 0C 48 00 00 4A 05 9C 1B 01 00 00 00 44 A8  // ...H..J.......D.
    EE00: 02 03 0C 48 02 00 4A 25 40 01 10 49 A8 02 3C 22  // ...H..J%@..I..<"
    EE10: 43 01 41 49 A8 02 03 1A 48 40 3C 0A 00 01 40 44  // C.AI....H@<...@D
    EE20: CA 02 03 1A 48 40 07 25 00 01 FE 03 0C 48 02 00  // ....H@.%.....H..
    EE30: 01 22 43 01 41 07 0D 40 01 EF F7 03 1A 48 40 01  // ."C.A..@.....H@.
    EE40: 0A 00 01 40 3A 00 00 5B 7A 28 00 00 CA 9A 3B 80  // ...@:..[z(....;.
    EE50: 7C 81 4A 00 2F 68 59 00 94 35 77 00 00 00 00 00  // |.J./hY..5w.....
    EE60: 02 04 00 00 04 08 00 00 26 0C 00 00 28 10 00 00  // ........&...(...
    EE70: 2A 14 00 FF FF FF FF FF FF FF FF FF FF FF FF FF  // *...............
    EE80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EE90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EEA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EEB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EEC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EED0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EEE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EEF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EF90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EFA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EFB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EFC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EFD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EFE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EFF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F000: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F020: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F050: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    F060: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    F070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    F080: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Migrations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 88
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000004
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 88 41 4C 41 53 4B 41  // WSMT(.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 04 00 00 00                          // ........


