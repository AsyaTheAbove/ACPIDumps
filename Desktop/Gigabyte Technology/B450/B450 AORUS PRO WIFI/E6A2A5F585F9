
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200925
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000000C8  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000B18  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  PCCT  0x0000006E  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 06)  SSDT  0x00008C98  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 07)  VFCT  0x0000B284  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 09)  IVRS  0x000000D0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 10)  DSDT  0x0000608C  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20190509
 11)  SSDT  0x000000BF  0x01  "AMD   "  "AmdTable"  0x00001000  "INTL"   0x20190509
 12)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 13)  SSDT  0x00002FA1  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 14)  SSDT  0x00003C52  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20190509
 15)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 16)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 17)  SSDT  0x00005EA6  0x02  "GBT   "  "GSWApp  "  0x00000001  "INTL"   0x20190509
 18)  SSDT  0x0000147F  0x01  "AMD   "  "MYRTLE  "  0x00000001  "INTL"   0x20190509
 19)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 20)  SSDT  0x00003A59  0x01  "AMD   "  "MYRTLE  "  0x00000001  "INTL"   0x20190509
 21)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 22)  FACS  0x00000040  0x02
 23)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 23 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 21
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 08
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0A
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 01
[05Fh 0095   1]                Local Apic ID : 01
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 03
[067h 0103   1]                Local Apic ID : 03
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 05
[06Fh 0111   1]                Local Apic ID : 05
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 07
[077h 0119   1]                Local Apic ID : 07
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 09
[07Fh 0127   1]                Local Apic ID : 09
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 00
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 00
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 00
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 00
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 10
[0AFh 0175   1]                Local Apic ID : 00
[0B0h 0176   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 11
[0B7h 0183   1]                Local Apic ID : 00
[0B8h 0184   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 12
[0BFh 0191   1]                Local Apic ID : 00
[0C0h 0192   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 13
[0C7h 0199   1]                Local Apic ID : 00
[0C8h 0200   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 14
[0CFh 0207   1]                Local Apic ID : 00
[0D0h 0208   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 15
[0D7h 0215   1]                Local Apic ID : 00
[0D8h 0216   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 16
[0DFh 0223   1]                Local Apic ID : 00
[0E0h 0224   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 00
[0E8h 0232   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 0D
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 0E
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 21 41 4C 41 53 4B 41  // APIC^....!ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 06 01 00 00 00 00 08 08 08  // ................
    0050: 01 00 00 00 00 08 0A 0A 01 00 00 00 00 08 01 01  // ................
    0060: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    0070: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 09 09  // ................
    0080: 01 00 00 00 00 08 0B 0B 01 00 00 00 00 08 0C 00  // ................
    0090: 00 00 00 00 00 08 0D 00 00 00 00 00 00 08 0E 00  // ................
    00A0: 00 00 00 00 00 08 0F 00 00 00 00 00 00 08 10 00  // ................
    00B0: 00 00 00 00 00 08 11 00 00 00 00 00 00 08 12 00  // ................
    00C0: 00 00 00 00 00 08 13 00 00 00 00 00 00 08 14 00  // ................
    00D0: 00 00 00 00 00 08 15 00 00 00 00 00 00 08 16 00  // ................
    00E0: 00 00 00 00 00 08 17 00 00 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 0D 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 0E 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000B7D2E018
[030h 0048   4]                Image OffsetX : 0000016D
[034h 0052   4]                Image OffsetY : 000000B8

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 EF 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 E0 D2 B7 00 00 00 00  // ................
    0030: 6D 01 00 00 B8 00 00 00                          // m.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000B18
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 2840 (0xB18)

    0000: 43 52 41 54 18 0B 00 00 01 B7 41 4D 44 00 00 00  // CRAT......AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 2C 00 00 00 01 00 00 00 00 00 00 00  // ....,...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 0C 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0060: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0090: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    00E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0110: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0120: 00 00 00 00 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 80 00 00 03 01 40 00 10 00 01 00  // ..........@.....
    0150: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0160: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0190: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    01E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0210: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0220: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0250: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0260: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0290: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    02D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    02E0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0310: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0320: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0350: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0360: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0390: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03A0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    03D0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    03E0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0410: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0420: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0450: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0460: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0490: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04A0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    04E0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0510: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0520: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0550: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0560: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0590: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    05A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    05D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    05E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0610: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0620: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0650: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0660: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0690: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    06A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    06D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    06E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0710: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0720: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0750: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0760: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0790: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    07A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    07D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    07E0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0810: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0820: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0850: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0860: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0890: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    08A0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    08D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    08E0: 06 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0910: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0920: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0950: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0960: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0990: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    09A0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    09D0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    09E0: 08 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0A10: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A20: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A50: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0A60: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0A90: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AA0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0AD0: FF 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0AE0: 0A 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 02 00 00 00 00 00 02 02 00 00 04 02  // ................
    0B10: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (CRBI, UnknownObj)
    External (GSA1.MPTS, MethodObj)    // 1 Arguments
    External (GSA1.MWAK, MethodObj)    // 1 Arguments
    External (MPTS, MethodObj)    // 1 Arguments
    External (MWAK, MethodObj)    // 1 Arguments

    Name (IO1B, 0x0A00)
    Name (IO1L, 0x30)
    Name (IO2B, 0x0A30)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A40)
    Name (IO3L, 0x10)
    Name (H2MB, 0x0A60)
    Name (H2ML, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (HMIO, 0x0A65)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (SSMB, 0xFED80200)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (NBTS, 0x5000)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xBCD7F718)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
    Field (PMRG, AnyAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0x78), 
            ,   20, 
        SI3V,   1, 
        Offset (0x80), 
        SI3R,   1, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        Notify (\_SB.PWRB, 0x02) // Device Wake
        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x20
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PD30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2C
            }
        })
        Name (PD00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PG36, Package (0x00) {})
        Name (AG36, Package (0x00) {})
        Name (PG37, Package (0x00) {})
        Name (AG37, Package (0x00) {})
        Name (PG38, Package (0x00) {})
        Name (AG38, Package (0x00) {})
        Name (PG39, Package (0x00) {})
        Name (AG39, Package (0x00) {})
        Name (PG3A, Package (0x00) {})
        Name (AG3A, Package (0x00) {})
        Name (PG3B, Package (0x00) {})
        Name (AG3B, Package (0x00) {})
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xC0000000)
            Name (MBL, 0x40000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14600000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D002)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D004)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (D012)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D020)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (D022)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00050002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }

                Device (D025)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP13.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP13.APSP.CRS_ */
                    }
                }
            }

            Device (GP30)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR30) /* \_SB_.AR30 */
                    }

                    Return (PD30) /* \_SB_.PD30 */
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP31)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR31) /* \_SB_.AR31 */
                    }

                    Return (PD31) /* \_SB_.PD31 */
                }

                Device (SAT1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (D02C)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1D)
                        IRQNoFlags (_Y1B)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1C)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1B._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y20)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IRQNoFlags (_Y1E)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1F)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1E._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            LDN = 0x06
                            ACTR = Zero
                            LDN = 0x05
                            ACTR = Zero
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        LDN = 0x06
                        ACTR = One
                        LDN = 0x05
                        ACTR = One
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x08)) {}
                        If ((PMFG & 0x10)) {}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (D045)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (D046)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (D047)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (D048)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (D049)
                        {
                            Name (_ADR, 0xFF)  // _ADR: Address
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x0A, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x3,
                                    PLD_GroupPosition      = 0x3,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "VERTICALRECTANGLE",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "LEFT",
                                    PLD_VerticalPosition   = "LOWER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x1,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x1,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP10, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP30, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP31, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.MPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0)
            \_SB.PCI0.SBRG.SIO1.SIOS (Arg0)
            \_SB.PCI0.GPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            SPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        \_SB.MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (IC0I, 0x04)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x0A)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    Name (IC5I, 0x0F)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   4, 
            LPCE,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {14}
                    Memory32Fixed (ReadWrite,
                        0xFEDC6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC4I & 0x0F))
                Return (BUF0) /* \_SB_.I2CE._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDCB000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC5I & 0x0F))
                Return (BUF0) /* \_SB_.I2CF._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y22)
                    IRQNoFlags (_Y23)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y22._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y22._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y23._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y24)
                    IRQNoFlags (_Y25)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y24._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y24._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y25._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2A)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2B)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2C)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2D)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y2E,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2A._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2A._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2B._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2C._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2C._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y2D._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y2D._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y2E._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y2E._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y2E._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)) {}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (_SB)
    {
        Method (MPTS, 1, NotSerialized)
        {
            \GSA1.MPTS (Arg0)
        }

        Method (MWAK, 1, NotSerialized)
        {
            \GSA1.MWAK (Arg0)
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : CD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : BCD67000
[028h 0040   4]                 DSDT Address : BC6C2000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000BC6C2000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 CD 41 4C 41 53 4B 41  // FACP......ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 70 D6 BC 00 20 6C BC 00 01 09 00  // .....p... l.....
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 20 6C BC  // ............. l.
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 7DD87F0B
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 0B 7F D8 7D 00 00 00 00  // FACS@......}....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 50
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 50 41 4C 41 53 4B 41  // FIDT.....PALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 38 41 31 36 42  // ....$FID.x.8A16B
    0030: 47 30 39 00 F4 AC B9 6E 56 47 00 7E 01 5E DB 59  // G09....nVG.~.^.Y
    0040: AF 03 BA 15 30 35 00 31 37 00 4A 31 00 30 30 00  // ....05.17.J1.00.
    0050: E5 07 07 0D 0D 39 01 FF FF 41 4C 41 53 4B 41 41  // .....9...ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D7
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000BC623000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000BC690000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 D7 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 30 62 BC  // .............0b.
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 00 69 BC  // ..............i.
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FD500000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F2E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 0D
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 0E
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FD500000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 058F77EF22294A5A
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                   Entry Type : 03
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1]                 Data Setting : 00

[0A4h 0164   1]                   Entry Type : 04
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1]                 Data Setting : 00

[0A8h 0168   1]                   Entry Type : 43
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1]                 Data Setting : 00
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                   Entry Type : 04
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1]                 Data Setting : 00

[0B4h 0180   1]                   Entry Type : 00
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1]                 Data Setting : 00

[0B8h 0184   1]                   Entry Type : 48
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1]                 Data Setting : 00
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                   Entry Type : 48
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1]                 Data Setting : D7
[0C4h 0196   1]                       Handle : 0D
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                   Entry Type : 48
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1]                 Data Setting : 00
[0CCh 0204   1]                       Handle : 0E
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 E2 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 50 FD 00 00 00 00  // ..H...@...P.....
    0040: 00 00 00 00 2E 8F 04 80 03 08 00 00 04 FE FF 00  // ................
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 0D A0 00 01  // H.......H.......
    0070: 48 00 00 00 0E 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 50 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ..P.............
    0090: 5A 4A 29 22 EF 77 8F 05 00 00 00 00 00 00 00 00  // ZJ)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 0D A0 00 01 48 00 00 00 0E 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


PCCT
----
[000h 0000   4]                    Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 7A
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]        Flags (decoded below) : 00000000
                                    Platform : 0
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Generic Communications Subspace]
[031h 0049   1]                       Length : 3E

[032h 0050   6]                     Reserved : 000000000000
[038h 0056   8]                 Base Address : 00000000BCB40000
[040h 0064   8]               Address Length : 0000000000010000

[048h 0072  12]            Doorbell Register : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 04 [QWord Access:64]
[04Ch 0076   8]                      Address : 00000000FD010540

[054h 0084   8]                Preserve Mask : FFFFFFFF00000000
[05Ch 0092   8]                   Write Mask : 0000000000000001
[064h 0100   4]              Command Latency : 00000FA0
[068h 0104   4]          Maximum Access Rate : 0000EA60
[06Ch 0108   2]      Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 02 7A 41 4D 44 00 00 00  // PCCTn....zAMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 B4 BC 00 00 00 00  // .>..............
    0040: 00 00 01 00 00 00 00 00 00 40 00 04 40 05 01 FD  // .........@..@...
    0050: 00 00 00 00 00 00 00 00 FF FF FF FF 01 00 00 00  // ................
    0060: 00 00 00 00 A0 0F 00 00 60 EA 00 00 00 00        // ........`.....


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06) {}
        Processor (C001, 0x01, 0x00000810, 0x06) {}
        Processor (C002, 0x02, 0x00000810, 0x06) {}
        Processor (C003, 0x03, 0x00000810, 0x06) {}
        Processor (C004, 0x04, 0x00000810, 0x06) {}
        Processor (C005, 0x05, 0x00000810, 0x06) {}
        Processor (C006, 0x06, 0x00000810, 0x06) {}
        Processor (C007, 0x07, 0x00000810, 0x06) {}
        Processor (C008, 0x08, 0x00000810, 0x06) {}
        Processor (C009, 0x09, 0x00000810, 0x06) {}
        Processor (C00A, 0x0A, 0x00000810, 0x06) {}
        Processor (C00B, 0x0B, 0x00000810, 0x06) {}
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x10,  // ........
            /* 0028 */  0x1F, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x00, 0x07, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10530, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B1057C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B109C4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B109C8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B109CC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B109D0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B109D4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B109D8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)) {}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)) {}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)) {}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)) {}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x3D, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x3B, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x3C, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x3E, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x2F, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)) {}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000000C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000001C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000010C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000011C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000020C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000021C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000030C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000031C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000040C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000041C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000050C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000051C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000060C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000061C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000070C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000071C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000800, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000804, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000808, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000080C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000814, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000818, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000081C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000840, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000844, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000848, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000850, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000900, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000904, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000908, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000090C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000914, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000918, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000091C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000940, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000944, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000948, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000950, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E74, 
                0x00000FE6, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0012, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x17)  // _CPC: Continuous Performance Control
        {
            0x17, 
            0x03, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            0x00000226, 
            0x00000E75
        })
    }

    Method (NFPR, 0, NotSerialized)
    {
        Local0 = 0xBCB40000
        OperationRegion (SHRM, SystemMemory, Local0, 0x0C08)
        Field (SHRM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x48), 
            V000,   1, 
            Offset (0x148), 
            V001,   1, 
            Offset (0x248), 
            V002,   1, 
            Offset (0x348), 
            V003,   1, 
            Offset (0x448), 
            V004,   1, 
            Offset (0x548), 
            V005,   1, 
            Offset (0x648), 
            V006,   1, 
            Offset (0x748), 
            V007,   1, 
            Offset (0x848), 
            V008,   1, 
            Offset (0x948), 
            V009,   1, 
            Offset (0xA48), 
            V00A,   1, 
            Offset (0xB48), 
            V00B,   1
        }

        If ((V000 == One))
        {
            Notify (\_PR.C000, 0x84) // Reserved
        }

        If ((V001 == One))
        {
            Notify (\_PR.C001, 0x84) // Reserved
        }

        If ((V002 == One))
        {
            Notify (\_PR.C002, 0x84) // Reserved
        }

        If ((V003 == One))
        {
            Notify (\_PR.C003, 0x84) // Reserved
        }

        If ((V004 == One))
        {
            Notify (\_PR.C004, 0x84) // Reserved
        }

        If ((V005 == One))
        {
            Notify (\_PR.C005, 0x84) // Reserved
        }

        If ((V006 == One))
        {
            Notify (\_PR.C006, 0x84) // Reserved
        }

        If ((V007 == One))
        {
            Notify (\_PR.C007, 0x84) // Reserved
        }

        If ((V008 == One))
        {
            Notify (\_PR.C008, 0x84) // Reserved
        }

        If ((V009 == One))
        {
            Notify (\_PR.C009, 0x84) // Reserved
        }

        If ((V00A == One))
        {
            Notify (\_PR.C00A, 0x84) // Reserved
        }

        If ((V00B == One))
        {
            Notify (\_PR.C00B, 0x84) // Reserved
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemMemory, 0xFED80300, 0x0100)
            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Set VDDIO", 
                "Set VTT", 
                "Command Buffer Start", 
                "Command Buffer End"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                0x00050010, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "Set GFX Curve Optimizer", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xFD)
            {
                0x00020001, 
                0x029B, 
                0x0FA0, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x3F, 
                One, 
                0x00020004, 
                0x08, 
                0x3F, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x3F, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x0FA0, 
                0x21, 
                0x00020036, 
                0x0640, 
                0x1F40, 
                One, 
                0x00020037, 
                0x04B0, 
                0x09C4, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x03E8, 
                0x05DC, 
                0x0A, 
                0x00030002, 
                0x01F4, 
                0x02EE, 
                0x05, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x15)
            {
                0x0005000A, 
                Zero, 
                0x1E, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050010, 
                Zero, 
                0x1E, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xCC)
            {
                0x00020001, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0xBD)
            {
                0x00020035, 
                0x47, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x0BEA, 
                0x0C1C, 
                0x0C4E, 
                0x0C80, 
                0x0CB2, 
                0x0CE4, 
                0x0D16, 
                0x0D48, 
                0x0D7A, 
                0x0DAC, 
                0x0DDE, 
                0x0E10, 
                0x0E42, 
                0x0E74, 
                0x0EA6, 
                0x0ED8, 
                0x0F0A, 
                0x0F3C, 
                0x0F6E, 
                0x0FA0, 
                0x00030001, 
                0x33, 
                0x03E8, 
                0x03F2, 
                0x03FC, 
                0x0406, 
                0x0410, 
                0x041A, 
                0x0424, 
                0x042E, 
                0x0438, 
                0x0442, 
                0x044C, 
                0x0456, 
                0x0460, 
                0x046A, 
                0x0474, 
                0x047E, 
                0x0488, 
                0x0492, 
                0x049C, 
                0x04A6, 
                0x04B0, 
                0x04BA, 
                0x04C4, 
                0x04CE, 
                0x04D8, 
                0x04E2, 
                0x04EC, 
                0x04F6, 
                0x0500, 
                0x050A, 
                0x0514, 
                0x051E, 
                0x0528, 
                0x0532, 
                0x053C, 
                0x0546, 
                0x0550, 
                0x055A, 
                0x0564, 
                0x056E, 
                0x0578, 
                0x0582, 
                0x058C, 
                0x0596, 
                0x05A0, 
                0x05AA, 
                0x05B4, 
                0x05BE, 
                0x05C8, 
                0x05D2, 
                0x05DC, 
                0x00030002, 
                0x33, 
                0x01F4, 
                0x01F9, 
                0x01FE, 
                0x0203, 
                0x0208, 
                0x020D, 
                0x0212, 
                0x0217, 
                0x021C, 
                0x0221, 
                0x0226, 
                0x022B, 
                0x0230, 
                0x0235, 
                0x023A, 
                0x023F, 
                0x0244, 
                0x0249, 
                0x024E, 
                0x0253, 
                0x0258, 
                0x025D, 
                0x0262, 
                0x0267, 
                0x026C, 
                0x0271, 
                0x0276, 
                0x027B, 
                0x0280, 
                0x0285, 
                0x028A, 
                0x028F, 
                0x0294, 
                0x0299, 
                0x029E, 
                0x02A3, 
                0x02A8, 
                0x02AD, 
                0x02B2, 
                0x02B7, 
                0x02BC, 
                0x02C1, 
                0x02C6, 
                0x02CB, 
                0x02D0, 
                0x02D5, 
                0x02DA, 
                0x02DF, 
                0x02E4, 
                0x02E9, 
                0x02EE, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                Field (PMRG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x00050010))
                {
                    R510 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214) {})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8) {})
            OperationRegion (AODT, SystemMemory, 0xBCD69018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                GPSM,   8, 
                MRSD,   80, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Method (R510, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GPSM = SVAL /* \AOD_.R510.SVAL */
                MBCB = 0x00100038
                ASMI (0x9D)
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "GBT", "GSWApp", 0x00000001)
{
    External (GSA1.M009, MethodObj)    // 1 Arguments
    External (GSA1.M010, MethodObj)    // 2 Arguments
    External (GSA1.M037, DeviceObj)
    External (GSA1.M046, DeviceObj)
    External (GSA1.M047, DeviceObj)
    External (GSA1.M050, DeviceObj)
    External (GSA1.M051, DeviceObj)
    External (GSA1.M052, DeviceObj)
    External (GSA1.M053, DeviceObj)
    External (GSA1.M054, DeviceObj)
    External (GSA1.M055, DeviceObj)
    External (GSA1.M056, DeviceObj)
    External (GSA1.M057, DeviceObj)
    External (GSA1.M058, DeviceObj)
    External (GSA1.M059, DeviceObj)
    External (GSA1.M062, DeviceObj)
    External (GSA1.M068, DeviceObj)
    External (GSA1.M069, DeviceObj)
    External (GSA1.M070, DeviceObj)
    External (GSA1.M071, DeviceObj)
    External (GSA1.M072, DeviceObj)
    External (GSA1.M074, DeviceObj)
    External (GSA1.M075, DeviceObj)
    External (GSA1.M076, DeviceObj)
    External (GSA1.M077, DeviceObj)
    External (GSA1.M078, DeviceObj)
    External (GSA1.M079, DeviceObj)
    External (GSA1.M080, DeviceObj)
    External (GSA1.M081, DeviceObj)
    External (GSA1.M082, FieldUnitObj)
    External (GSA1.M083, FieldUnitObj)
    External (GSA1.M084, FieldUnitObj)
    External (GSA1.M085, FieldUnitObj)
    External (GSA1.M086, FieldUnitObj)
    External (GSA1.M087, FieldUnitObj)
    External (GSA1.M088, FieldUnitObj)
    External (GSA1.M089, FieldUnitObj)
    External (GSA1.M090, FieldUnitObj)
    External (GSA1.M091, FieldUnitObj)
    External (GSA1.M092, FieldUnitObj)
    External (GSA1.M093, FieldUnitObj)
    External (GSA1.M094, FieldUnitObj)
    External (GSA1.M095, FieldUnitObj)
    External (GSA1.M096, FieldUnitObj)
    External (GSA1.M097, FieldUnitObj)
    External (GSA1.M098, FieldUnitObj)
    External (GSA1.M099, FieldUnitObj)
    External (GSA1.M100, FieldUnitObj)
    External (GSA1.M101, FieldUnitObj)
    External (GSA1.M102, FieldUnitObj)
    External (GSA1.M103, FieldUnitObj)
    External (GSA1.M104, FieldUnitObj)
    External (GSA1.M105, FieldUnitObj)
    External (GSA1.M106, FieldUnitObj)
    External (GSA1.M107, FieldUnitObj)
    External (GSA1.M108, FieldUnitObj)
    External (GSA1.M109, FieldUnitObj)
    External (GSA1.M110, FieldUnitObj)
    External (GSA1.M115, BuffObj)
    External (GSA1.M116, BuffFieldObj)
    External (GSA1.M117, BuffFieldObj)
    External (GSA1.M118, BuffFieldObj)
    External (GSA1.M119, BuffFieldObj)
    External (GSA1.M120, BuffFieldObj)
    External (GSA1.M122, FieldUnitObj)
    External (GSA1.M127, DeviceObj)
    External (GSA1.M128, FieldUnitObj)
    External (GSA1.M131, FieldUnitObj)
    External (GSA1.M132, FieldUnitObj)
    External (GSA1.M133, FieldUnitObj)
    External (GSA1.M134, FieldUnitObj)
    External (GSA1.M135, FieldUnitObj)
    External (GSA1.M136, FieldUnitObj)
    External (GSA1.M220, FieldUnitObj)
    External (GSA1.M221, FieldUnitObj)
    External (GSA1.M226, FieldUnitObj)
    External (GSA1.M227, DeviceObj)
    External (GSA1.M229, FieldUnitObj)
    External (GSA1.M231, FieldUnitObj)
    External (GSA1.M233, FieldUnitObj)
    External (GSA1.M235, FieldUnitObj)
    External (MDBG, MethodObj)    // 1 Arguments

    Scope (\)
    {
        Device (GSA1)
        {
            Method (CMN0, 4, Serialized)
            {
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Arg0 & Local2) | Local3)
                Return (Local4)
            }

            Method (CMN1, 3, Serialized)
            {
                Local3 = ((One << Arg2) - One)
                Local2 = ((Arg0 >> Arg1) & Local3)
                Return (Local2)
            }

            OperationRegion (GGGT, SystemMemory, 0xBCD7FB18, 0x0100)
            Field (GGGT, DWordAcc, Lock, Preserve)
            {
                Offset (0x04), 
                CPEX,   32, 
                PGRV,   8, 
                CCNT,   8, 
                E8CV,   8
            }

            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "GSADEV0")  // _UID: Unique ID
            Name (MARK, "Mark Tsai<mark@gigabyte.com><marktsai0316@gmail.com>")
            Method (GIO2, 0, Serialized)
            {
            }

            Method (GIO0, 1, Serialized)
            {
                Return (M009 (Arg0))
            }

            Method (GIO1, 2, Serialized)
            {
                M010 (Arg0, Arg1)
            }

            Method (PIOD, 1, Serialized)
            {
                Local0 = (Arg0 + Zero)
                OperationRegion (VARM, SystemIO, 0x80, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }

            Method (PIOA, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Zero)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (PIOB, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Zero)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                PIO7 (Local0, Zero, Local4)
            }

            Method (PIO0, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, One)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (PIO1, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, One)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                PIO7 (Local0, One, Local4)
            }

            Method (PIO8, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Arg3)
                Local2 = CMN1 (Local1, Arg1, Arg2)
                Return (Local2)
            }

            Method (PIO9, 5, Serialized)
            {
                Local0 = Arg0
                Local1 = PIO6 (Local0, Arg4)
                Local4 = CMN0 (Local1, Arg1, Arg2, Arg3)
                PIO7 (Local0, Arg4, Local4)
            }

            Method (PIO6, 2, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.PIO6.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.PIO6.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.PIO6.VARR */
                    }

                }

                Return (Zero)
            }

            Method (PIO7, 3, Serialized)
            {
                Local0 = Arg0
                OperationRegion (VARM, SystemIO, Local0, 0x04)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }

                }
            }

            Mutex (MEM3, 0x00)
            Method (MEM0, 0, Serialized)
            {
            }

            Method (MEM1, 1, Serialized)
            {
                MEM0 ()
            }

            Method (MEM2, 1, Serialized)
            {
            }

            Method (MEMA, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x02)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (MEMB, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x02)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                MEM5 (Local0, 0x02, Local4)
            }

            Method (MEMC, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x03)
                Local3 = ((One << Arg2) - One)
                Local2 = ((Local1 >> Arg1) & Local3)
                Return (Local2)
            }

            Method (MEMD, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, 0x03)
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Local1 & Local2) | Local3)
                MEM5 (Local0, 0x03, Local4)
            }

            Method (MEM6, 4, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, Arg3)
                Local2 = CMN1 (Local1, Arg1, Arg2)
                Return (Local2)
            }

            Method (MEM7, 5, Serialized)
            {
                Local0 = Arg0
                Local1 = MEM4 (Local0, Arg4)
                Local4 = CMN0 (Local1, Arg1, Arg2, Arg3)
                MEM5 (Local0, Arg4, Local4)
            }

            Method (MEM4, 2, Serialized)
            {
                Local0 = Arg0
                If (((Local0 + 0x08) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARS,   64
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (VARP) /* \GSA1.MEM4.VARP */
                    }
                    Case (One)
                    {
                        Return (VARQ) /* \GSA1.MEM4.VARQ */
                    }
                    Case (0x02)
                    {
                        Return (VARR) /* \GSA1.MEM4.VARR */
                    }
                    Case (0x03)
                    {
                        Return (VARS) /* \GSA1.MEM4.VARS */
                    }

                }

                Return (Zero)
            }

            Method (MEM5, 3, Serialized)
            {
                Local0 = Arg0
                If (((Local0 + 0x08) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARS,   64
                }

                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                Field (VARM, WordAcc, NoLock, Preserve)
                {
                    VARQ,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VARP,   8
                }

                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        VARP = Arg2
                    }
                    Case (One)
                    {
                        VARQ = Arg2
                    }
                    Case (0x02)
                    {
                        VARR = Arg2
                    }
                    Case (0x03)
                    {
                        VARS = Arg2
                    }

                }
            }

            Method (MEM8, 2, Serialized)
            {
                Local0 = Arg0
                Local1 = Arg1
                If (((Local0 + Local1) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, Local1)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR0,   8
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR1,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR2,   32
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR3,   64
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR7,   1024
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR8,   2048
                }

                Return (VAR8) /* \GSA1.MEM8.VAR8 */
            }

            Method (MEM9, 3, Serialized)
            {
                Local0 = Arg0
                Local1 = Arg1
                If (((Local0 + Local1) > 0x0000000100000000))
                {
                    Return (Zero)
                }

                OperationRegion (VARM, SystemMemory, Local0, Local1)
                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR0,   8
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR1,   16
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR2,   32
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR3,   64
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR7,   1024
                }

                Field (VARM, ByteAcc, NoLock, Preserve)
                {
                    VAR8,   2048
                }

                VAR2 = Arg2
            }

            Method (PCI0, 0, Serialized)
            {
            }

            Method (PCI1, 1, Serialized)
            {
                PCI0 ()
            }

            Method (PCI2, 1, Serialized)
            {
            }

            Method (PCI4, 0, Serialized)
            {
                Return (PCIB) /* \GSA1.PCIB */
            }

            Name (PCIB, 0xF0000000)
            Method (PCI9, 5, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                Return (MEM4 (Local0, Arg4))
            }

            Method (PCIA, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += Arg3
                MEM5 (Local0, Arg4, Arg5)
            }

            Method (PCIE, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, Zero))
            }

            Method (PCIF, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, Zero, Arg4)
            }

            Method (PCIG, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, One))
            }

            Method (PCIH, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, One, Arg4)
            }

            Method (PCI7, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x02))
            }

            Method (PCI8, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x02, Arg4)
            }

            Method (PCII, 4, Serialized)
            {
                Return (PCI9 (Arg0, Arg1, Arg2, Arg3, 0x03))
            }

            Method (PCIJ, 5, Serialized)
            {
                PCIA (Arg0, Arg1, Arg2, Arg3, 0x03, Arg4)
            }

            Method (PCI5, 6, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Return (MEMC ((Local0 + Arg3), Arg4, Arg5))
            }

            Method (PCI6, 7, Serialized)
            {
                Local0 = PCIB /* \GSA1.PCIB */
                Local0 += (Arg0 << 0x14)
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                If ((MEMA (Local0, Zero, 0x20) != 0xFFFFFFFF))
                {
                    MEMD ((Local0 + Arg3), Arg4, Arg5, Arg6)
                }
            }

            Method (PCIC, 4, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                Local0 = VAR2 /* \GSA1.PCIC.VAR2 */
                Return (Local0)
            }

            Method (PCID, 5, Serialized)
            {
                Local0 = (PCIB + (Arg0 << 0x14))
                Local0 += (Arg1 << 0x0F)
                Local0 += (Arg2 << 0x0C)
                Local0 += 0xE0
                OperationRegion (VARM, SystemMemory, Local0, 0x08)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VAR1,   32
                }

                BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    VAR2,   32
                }

                VAR2 = Arg4
            }

            Method (PFM8, 4, Serialized)
            {
                Local2 = ((Ones << (Arg1 + Arg2)) | ((One << 
                    Arg1) - One))
                Local3 = ((Arg3 & ((One << Arg2) - One)) << 
                    Arg1)
                Local4 = ((Arg0 & Local2) | Local3)
                Return (Local4)
            }

            Method (PFM9, 3, Serialized)
            {
                Local3 = ((One << Arg2) - One)
                Local2 = ((Arg0 >> Arg1) & Local3)
                Return (Local2)
            }

            Name (GGGD, "AM4: X470/X570/B550/A520")
            Method (PFM0, 0, Serialized)
            {
            }

            Method (PFM1, 1, Serialized)
            {
                PFM0 ()
            }

            Method (PFM2, 1, Serialized)
            {
            }

            Name (PFMH, Package (0x04)
            {
                Buffer (0x03)
                {
                     0x02, 0xA0, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA2, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA4, 0x00                                 // ...
                }, 

                Buffer (0x03)
                {
                     0x02, 0xA6, 0x00                                 // ...
                }
            })
            Method (PFM7, 0, Serialized)
            {
                Return (RefOf (PFMH))
            }

            Method (SMBB, 0, Serialized)
            {
                Return (0x0B00)
            }

            Method (SMB8, 0, Serialized)
            {
            }

            Mutex (SME0, 0x00)
            OperationRegion (SMBI, SystemIO, 0x0B00, 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCNT,   8, 
                HCMD,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8
            }

            Method (SMBG, 1, Serialized)
            {
                SMB8 ()
            }

            Method (SMBH, 1, Serialized)
            {
            }

            Method (KILL, 0, Serialized)
            {
                HCNT |= 0x02
                HSTS |= 0xFF
            }

            Method (CMPL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SRDY, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            HSTS = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMBL, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCNT = 0x40
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMBM, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x40
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB0, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB1, 1, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCNT = 0x44
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB2, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = Arg2
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB3, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x48
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMB4, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = (Arg2 & 0xFF)
                DAT1 = ((Arg2 >> 0x08) & 0xFF)
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB5, 2, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFFFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x4C
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (0xFFFFFFFF)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (((DAT1 << 0x08) | DAT0))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (SMBK, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                Local0 = HCNT /* \GSA1.HCNT */
                Local1 = Zero
                Local5 = SizeOf (Arg2)
                DAT0 = Local5
                While ((Local5 > Local1))
                {
                    HBDR = DerefOf (Arg2 [Local1])
                    Local1++
                }

                HCNT = 0x54
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMB9, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (Zero)
                }

                HSTS = 0xBF
                TXSA = Arg0
                HCMD = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCNT = 0x54
                Local5 = SizeOf (Arg2)
                While ((Local5 > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Local1++
                    If ((Local5 > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }

                    HSTS = 0x80
                }

                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMBA, 3, Serialized)
            {
                If (SRDY ())
                {
                    Return (0xFFFF)
                }

                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCMD = Arg1
                HCNT = 0x54
                If (CMPL ())
                {
                    If ((HSTS & 0x0C))
                    {
                        HSTS |= 0xFF
                        PIOD (0x22)
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Local6 = DAT0 /* \GSA1.DAT0 */
                        Local1 = Zero
                        While ((Local1 < Local6))
                        {
                            Arg2 [Local1] = HBDR /* \GSA1.HBDR */
                            Local1++
                        }

                        HSTS |= 0xFF
                        Return (Local6)
                    }
                }

                PIOD (0x33)
                Return (0xFFFF)
            }

            Method (SMBF, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    SMB2 (0x6C, Zero, Zero)
                }
                Else
                {
                    SMB2 (0x6E, Zero, Zero)
                }
            }

            Method (SMBE, 2, Serialized)
            {
                Local0 = Zero
                While ((Local0 < 0x0200))
                {
                    If ((Local0 == Zero))
                    {
                        SMBF (Arg0, Zero)
                    }

                    If ((Local0 == 0x0100))
                    {
                        SMBF (Arg0, One)
                    }

                    Local1 = SMB3 (Arg0, (Local0 % 0x0100))
                    If ((Local1 == 0xFFFF))
                    {
                        Return (0xFFFF)
                    }
                    Else
                    {
                        Arg1 [Local0] = Local1
                        Local0++
                    }
                }

                SMBF (Arg0, Zero)
                Return (Zero)
            }

            Method (SMAB, 0, Serialized)
            {
                Return (0x0B20)
            }

            Method (SMA8, 0, Serialized)
            {
            }

            Mutex (SME3, 0x00)
            OperationRegion (SMG0, SystemIO, 0x0B20, 0x20)
            Field (SMG0, ByteAcc, NoLock, Preserve)
            {
                SMG1,   8, 
                Offset (0x02), 
                SMG2,   8, 
                SMG3,   8, 
                SMG4,   8, 
                SMG5,   8, 
                SMG6,   8, 
                SMG7,   8
            }

            Method (SMAG, 1, Serialized)
            {
                SMA8 ()
            }

            Method (SMAH, 1, Serialized)
            {
            }

            Method (SMAK, 0, Serialized)
            {
                SMG2 |= 0x02
                SMG1 |= 0xFF
            }

            Method (SMAL, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (SMAM, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((SMG1 & 0x40))
                    {
                        Sleep (One)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMG1 = 0xBF
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((SMG1 & One))
                    {
                        Stall (0x32)
                        Local0--
                        If ((Local0 == Zero))
                        {
                            SMAK ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (SMAO, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG2 = 0x40
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMAP, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG2 = 0x40
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA0, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA1, 1, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG2 = 0x44
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA2, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = Arg2
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA3, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x48
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (SMG5) /* \GSA1.SMG5 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMA4, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = (Arg2 & 0xFF)
                SMG6 = ((Arg2 >> 0x08) & 0xFF)
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA5, 2, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFFFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x4C
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFFFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (((SMG6 << 0x08) | SMG5))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (SMAN, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                Local0 = SMG2 /* \GSA1.SMG2 */
                Local1 = Zero
                Local5 = SizeOf (Arg2)
                SMG5 = Local5
                While ((Local5 > Local1))
                {
                    SMG7 = DerefOf (Arg2 [Local1])
                    Local1++
                }

                SMG2 = 0x54
                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMA9, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (Zero)
                }

                SMG1 = 0xBF
                SMG4 = Arg0
                SMG3 = Arg1
                SMG5 = SizeOf (Arg2)
                Local1 = Zero
                SMG7 = DerefOf (Arg2 [Zero])
                SMG2 = 0x54
                Local5 = SizeOf (Arg2)
                While ((Local5 > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return (Zero)
                    }

                    Local1++
                    If ((Local5 > Local1))
                    {
                        SMG7 = DerefOf (Arg2 [Local1])
                    }

                    SMG1 = 0x80
                }

                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (Zero)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (SMAA, 3, Serialized)
            {
                If (SMAM ())
                {
                    Return (0xFFFF)
                }

                SMG1 = 0xBF
                SMG4 = (Arg0 | One)
                SMG3 = Arg1
                SMG2 = 0x54
                Local0 = 0x0FA0
                While ((!(SMG1 & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    SMAK ()
                    Return (0xFFFF)
                }

                Local6 = SMG5 /* \GSA1.SMG5 */
                Arg2 [Zero] = SMG7 /* \GSA1.SMG7 */
                Local1 = One
                SMG1 = 0x80
                While ((Local1 < Local6))
                {
                    Local0 = 0x0FA0
                    While ((!(SMG1 & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        SMAK ()
                        Return ((SMG5 | 0x8000))
                    }

                    Arg2 [Local1] = SMG7 /* \GSA1.SMG7 */
                    SMG1 = 0x80
                    Local1++
                }

                If (SMAL ())
                {
                    If ((SMG1 & 0x0C))
                    {
                        SMG1 |= 0xFF
                        Return (0xFFFF)
                    }
                    Else
                    {
                        SMG1 |= 0xFF
                        Return (DAT0) /* \GSA1.DAT0 */
                    }
                }

                Return (0xFFFF)
            }

            Method (SMM9, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = Zero
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMA, 1, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMMC, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBL (Arg1)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (Zero)
            }

            Method (SMMD, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBM (Arg1)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (0xFFFF)
            }

            Method (SMM0, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB0 (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (Zero)
            }

            Method (SMM1, 2, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB1 (Arg1)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03)) {}
                Return (0xFFFF)
            }

            Method (SMM2, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB2 (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA2 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM3, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB3 (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA3 (Arg1, Arg2)
                    Release (SME3)
                    Return (Local0)
                }

                Return (0xFFFF)
            }

            Method (SMM4, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB4 (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA4 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM5, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMB5 (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA5 (Arg1, Arg2)
                    Release (SME3)
                    Return (Local0)
                }

                Return (0xFFFFFFFF)
            }

            Method (SMMB, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBK (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMAN (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM6, 4, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Local0 = Zero
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBK (Arg1, Arg2, Arg3)
                    Release (SME0)
                    Return (Local0)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Local0 = Zero
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMA9 (Arg1, Arg2, Arg3)
                    Release (SME3)
                    Return (Local0)
                }

                Return (Zero)
            }

            Method (SMM7, 3, Serialized)
            {
                Name (DATB, Buffer (0x0100) {})
                Name (DATC, Buffer (0x04) {})
                CreateWordField (DATC, Zero, SMD0)
                CreateWordField (DATC, 0x02, SMD1)
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBA (Arg1, Arg2, DATB)
                    Release (SME0)
                    If ((Local0 & 0x8000))
                    {
                        SMD0 = Local0
                        SMD1 = Zero
                        Concatenate (DATC, DATB, Local1)
                    }
                    Else
                    {
                        SMD0 = Zero
                        SMD1 = Local0
                        Concatenate (DATC, DATB, Local1)
                    }

                    Return (Local1)
                }
                ElseIf ((Arg0 == 0x03))
                {
                    Acquire (SME3, 0xFFFF)
                    Local0 = SMAA (Arg1, Arg2, DATB)
                    Release (SME3)
                    If ((Local0 & 0x8000))
                    {
                        SMD0 = Local0
                        SMD1 = Zero
                        Concatenate (DATC, DATB, Local1)
                    }
                    Else
                    {
                        SMD0 = Zero
                        SMD1 = Local0
                        Concatenate (DATC, DATB, Local1)
                    }

                    Return (Local1)
                }

                Return (Ones)
            }

            Method (SMM8, 3, Serialized)
            {
                If ((Arg0 == 0x02))
                {
                    Acquire (SME0, 0xFFFF)
                    Local0 = SMBE (Arg1, Arg2)
                    Release (SME0)
                    Return (Local0)
                }
            }

            Name (SIOG, 0x0A45)
            OperationRegion (SIO1, SystemIO, SIOG, 0x02)
            Field (SIO1, ByteAcc, Lock, WriteAsZeros)
            {
                SIO2,   8, 
                SIO3,   8
            }

            IndexField (SIO2, SIO3, ByteAcc, Lock, Preserve)
            {
                Offset (0x0B), 
                FTD1,   3, 
                FTD2,   3, 
                Offset (0x0D), 
                FTA1,   8, 
                FTA2,   8, 
                FTA3,   8, 
                Offset (0x13), 
                FAE1,   1, 
                FAE2,   1, 
                FAE3,   1, 
                REV1,   1, 
                FTE1,   1, 
                FTE2,   1, 
                FTE3,   1, 
                Offset (0x14), 
                FBE1,   1, 
                FBE2,   1, 
                FBE3,   1, 
                REV2,   4, 
                Offset (0x15), 
                FP10,   7, 
                FP17,   1, 
                FP20,   7, 
                FP27,   1, 
                FP30,   7, 
                FP37,   1, 
                FTB1,   8, 
                FTB2,   8, 
                FTB3,   8, 
                Offset (0x29), 
                FET1,   8, 
                FET2,   8, 
                FET3,   8, 
                FET4,   8, 
                FET5,   8, 
                FET6,   8, 
                Offset (0x44), 
                BEEP,   8, 
                Offset (0x4C), 
                FTA6,   8, 
                FTB6,   8, 
                Offset (0x5C), 
                FBEC,   3, 
                Offset (0x60), 
                FC10,   8, 
                FC11,   8, 
                FC12,   8, 
                FC13,   8, 
                FC14,   8, 
                FC15,   8, 
                FC16,   8, 
                FC17,   8, 
                FC20,   8, 
                FC21,   8, 
                FC22,   8, 
                FC23,   8, 
                FC24,   8, 
                FC25,   8, 
                FC26,   8, 
                FC27,   8, 
                FC30,   8, 
                FC31,   8, 
                FC32,   8, 
                FC33,   8, 
                FC34,   8, 
                FC35,   8, 
                FC36,   8, 
                FC37,   8, 
                FC40,   8, 
                FC41,   8, 
                FC42,   8, 
                FC43,   8, 
                FC44,   8, 
                FC45,   8, 
                FC46,   8, 
                FC47,   8, 
                FTA4,   8, 
                FTB4,   8, 
                FTA5,   8, 
                FTB5,   8, 
                Offset (0xA0), 
                FC50,   8, 
                FC51,   8, 
                FC52,   8, 
                FC53,   8, 
                FC54,   8, 
                FC55,   8, 
                FC56,   8, 
                FC57,   8, 
                FC60,   8, 
                FC61,   8, 
                FC62,   8, 
                FC63,   8, 
                FC64,   8, 
                FC65,   8, 
                FC66,   8, 
                FC67,   8
            }

            Method (SIOE, 0, NotSerialized)
            {
                Return (FBEC) /* \GSA1.FBEC */
            }

            Method (SIOF, 1, NotSerialized)
            {
                FBEC = Arg0
            }

            Method (SIOA, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = Zero
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = Zero
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = Zero
                    }

                }
            }

            Method (SIO9, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FBE1 = Zero
                        FAE1 = One
                    }
                    Case (One)
                    {
                        FBE2 = Zero
                        FAE2 = One
                    }
                    Case (0x02)
                    {
                        FBE3 = Zero
                        FAE3 = One
                    }

                }
            }

            Method (SIOD, 1, Serialized)
            {
                Local1 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (((FBE1 == Zero) && (FAE1 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (One)
                    {
                        If (((FBE2 == Zero) && (FAE2 == Zero)))
                        {
                            Local1 = One
                        }
                    }
                    Case (0x02)
                    {
                        If (((FBE3 == Zero) && (FAE3 == Zero)))
                        {
                            Local1 = One
                        }
                    }

                }

                Return (Local1)
            }

            Method (SIO0, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FET1) /* \GSA1.FET1 */
                    }
                    Case (One)
                    {
                        Return (FET2) /* \GSA1.FET2 */
                    }
                    Case (0x02)
                    {
                        Return (FET3) /* \GSA1.FET3 */
                    }
                    Case (0x03)
                    {
                        Return (FET4) /* \GSA1.FET4 */
                    }
                    Case (0x04)
                    {
                        Return (FET5) /* \GSA1.FET5 */
                    }
                    Case (0x05)
                    {
                        Return (FET6) /* \GSA1.FET6 */
                    }

                }
            }

            Method (SIO4, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (((FTB1 << 0x08) | FTA1))
                    }
                    Case (One)
                    {
                        Return (((FTB2 << 0x08) | FTA2))
                    }
                    Case (0x02)
                    {
                        Return (((FTB3 << 0x08) | FTA3))
                    }
                    Case (0x03)
                    {
                        Return (((FTB4 << 0x08) | FTA4))
                    }
                    Case (0x04)
                    {
                        Return (((FTB5 << 0x08) | FTA5))
                    }
                    Case (0x05)
                    {
                        Return (((FTB6 >> 0x08) | FTA6))
                    }

                }
            }

            Method (SIOC, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FP10 = Arg1
                    }
                    Case (One)
                    {
                        FP20 = Arg1
                    }
                    Case (0x02)
                    {
                        FP30 = Arg1
                    }

                }
            }

            Method (SIOB, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FP10) /* \GSA1.FP10 */
                    }
                    Case (One)
                    {
                        Return (FP20) /* \GSA1.FP20 */
                    }
                    Case (0x02)
                    {
                        Return (FP30) /* \GSA1.FP30 */
                    }

                }

                Return (Zero)
            }

            Method (SIO7, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC10) /* \GSA1.FC10 */
                    }
                    Case (One)
                    {
                        Return (FC20) /* \GSA1.FC20 */
                    }
                    Case (0x02)
                    {
                        Return (FC30) /* \GSA1.FC30 */
                    }
                    Case (0x03)
                    {
                        Return (FC40) /* \GSA1.FC40 */
                    }
                    Case (0x04)
                    {
                        Return (FC50) /* \GSA1.FC50 */
                    }
                    Case (0x05)
                    {
                        Return (FC60) /* \GSA1.FC60 */
                    }

                }

                Return (Zero)
            }

            Method (SIO5, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Return (FC11) /* \GSA1.FC11 */
                    }
                    Case (One)
                    {
                        Return (FC21) /* \GSA1.FC21 */
                    }
                    Case (0x02)
                    {
                        Return (FC31) /* \GSA1.FC31 */
                    }
                    Case (0x03)
                    {
                        Return (FC41) /* \GSA1.FC41 */
                    }
                    Case (0x04)
                    {
                        Return (FC51) /* \GSA1.FC51 */
                    }
                    Case (0x05)
                    {
                        Return (FC61) /* \GSA1.FC61 */
                    }

                }

                Return (Zero)
            }

            Method (SIO8, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC10 = Arg1
                    }
                    Case (One)
                    {
                        FC20 = Arg1
                    }
                    Case (0x02)
                    {
                        FC30 = Arg1
                    }
                    Case (0x03)
                    {
                        FC40 = Arg1
                    }
                    Case (0x04)
                    {
                        FC50 = Arg1
                    }
                    Case (0x05)
                    {
                        FC60 = Arg1
                    }

                }
            }

            Method (SIO6, 2, Serialized)
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        FC11 = Arg1
                    }
                    Case (One)
                    {
                        FC21 = Arg1
                    }
                    Case (0x02)
                    {
                        FC31 = Arg1
                    }
                    Case (0x03)
                    {
                        FC41 = Arg1
                    }
                    Case (0x04)
                    {
                        FC51 = Arg1
                    }
                    Case (0x05)
                    {
                        FC61 = Arg1
                    }

                }
            }

            Name (DIC3, Package (0x04)
            {
                Buffer (0x04)
                {
                     0x09, 0x09, 0x01, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x04, 0x04, 0x02, 0x07                           // ....
                }, 

                Buffer (0x04)
                {
                     0x01, 0x01, 0x02, 0x01                           // ....
                }, 

                Buffer (0x04)
                {
                     0x00, 0x01, 0x02, 0x01                           // ....
                }
            })
            Method (DIM0, 0, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Local1]) [Zero])
                    Local6 = DerefOf (DerefOf (Local7 [Local1]) [One])
                    Local4 = Zero
                    If ((SMM3 (Local5, Local6, Zero) != 0xFFFF))
                    {
                        Local4 = One
                        If ((SMM3 (Local5, ((Local6 & 0x0F) | 0x30), 
                            Zero) != 0xFFFF))
                        {
                            Local4 |= 0x04
                        }
                    }

                    DerefOf (DerefOf (Local2) [Local1]) [0x02] = Local4
                    Local1++
                }
            }

            Method (DIM6, 1, Serialized)
            {
                Return ("KingStone")
            }

            Method (DIMC, 0, Serialized)
            {
                Name (DIMG, Buffer (0x03) {})
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                Local0 = SizeOf (Local7)
                Local1 = Zero
                While ((Local1 < Local0))
                {
                    Local4 = DerefOf (DerefOf (Local7 [Local1]) [0x02])
                    Local5 = (One << Local1)
                    If ((Local4 & One))
                    {
                        DIMG [Zero] = (DerefOf (DIMG [Zero]) | Local5
                            )
                    }

                    If ((Local4 & 0x02))
                    {
                        DIMG [One] = (DerefOf (DIMG [One]) | Local5
                            )
                    }

                    If ((Local4 & 0x04))
                    {
                        DIMG [0x02] = (DerefOf (DIMG [0x02]) | Local5
                            )
                    }

                    Local1++
                }

                Return (DIMG) /* \GSA1.DIMC.DIMG */
            }

            Method (DIMD, 1, Serialized)
            {
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local5 = DerefOf (DerefOf (Local7 [Arg0]) [Zero])
                    Local6 = ((DerefOf (DerefOf (Local7 [Arg0]) [One]) & 
                        0x0F) | 0x30)
                    Local4 = DerefOf (DerefOf (Local7 [Arg0]) [0x02])
                    If ((Local4 & 0x04))
                    {
                        Return ((SMM5 (Local5, Local6, 0x05) & 0x1FFF))
                    }
                }

                Return (0xFFFFFFFF)
            }

            Method (DIM1, 1, Serialized)
            {
                Name (DATB, Buffer (0x0400) {})
                Name (DATC, Buffer (0x04) {})
                CreateWordField (DATC, Zero, DIM8)
                CreateWordField (DATC, 0x02, DIM9)
                Local2 = PFM7 ()
                Local7 = DerefOf (Local2)
                If ((Arg0 < SizeOf (Local7)))
                {
                    Local0 = SMM8 (DerefOf (DerefOf (Local7 [Arg0]) [Zero]), 
                        DerefOf (DerefOf (Local7 [Arg0]) [One]), DATB)
                    If ((Local0 == Zero))
                    {
                        DIM8 = Zero
                        DIM9 = 0x0200
                        Concatenate (DATC, DATB, Local1)
                        Return (Local1)
                    }
                }

                DIM8 = 0xFFFF
                DIM9 = Zero
                Concatenate (DATC, DATB, Local1)
                Return (Local1)
            }

            Name (EVT1, Zero)
            Method (EVT0, 0, Serialized)
            {
            }

            Method (EVT2, 1, Serialized)
            {
                EVT1 = Arg0
                Notify (\GSA1, 0xE2) // Hardware-Specific
            }

            Name (GGGA, Package (0x05)
            {
                "F61", 
                "B450 AORUS PRO WIFI", 
                "B450AORUSPROWIFI", 
                "8A16BG09", 
                0x01000000
            })
            Name (GGGB, "20210622")
            Name (GGGC, Zero)
            Method (GGG1, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG2, 0, Serialized)
            {
                Return (GGGD) /* \GSA1.GGGD */
            }

            Method (GGG3, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x03]))
            }

            Method (GGG4, 0, Serialized)
            {
                Return (DerefOf (GGGA [Zero]))
            }

            Method (GGG5, 0, Serialized)
            {
                Return (DerefOf (GGGA [One]))
            }

            Method (GGG6, 0, Serialized)
            {
                Return (DerefOf (GGGA [0x04]))
            }

            Method (GGG7, 0, Serialized)
            {
                Return (GGG9 (Zero))
            }

            Method (GGG8, 0, Serialized)
            {
                Return (GGGB) /* \GSA1.GGGB */
            }

            Method (GGG9, 1, Serialized)
            {
                Local0 = Zero
                Switch (ToInteger (Arg0))
                {
                    Case (Zero)
                    {
                        Local0 = GGGC /* \GSA1.GGGC */
                    }
                    Case (0x04)
                    {
                        Local0 = 0x31050607
                    }
                    Case (0x08)
                    {
                        Local0 = 0x0980005F
                    }
                    Case (0x10)
                    {
                        Local0 = CPEX /* \GSA1.CPEX */
                    }
                    Case (0x18)
                    {
                        Local0 = 0xFFE20000
                    }
                    Case (0x1C)
                    {
                        Local0 = 0xFF000000
                    }

                }

                Return (Local0)
            }

            Name (GGGL, Package (0x16)
            {
                0x23A1, 
                0x1FBE, 
                0x1C48, 
                0x1AB1, 
                0x17C8, 
                0x1530, 
                0x12E0, 
                0x11D1, 
                0x0FDF, 
                0x0E24, 
                0x0D59, 
                0x0BE4, 
                0x0A98, 
                0x0970, 
                0x08E8, 
                0x07F0, 
                0x0712, 
                0x06AC, 
                0x05F2, 
                0x054C, 
                0x04B8, 
                0x0474
            })
            Method (GGGH, 3, Serialized)
            {
                Local0 = 0x11D1
                If ((Arg0 == 0x03))
                {
                    Local5 = SizeOf (GGGL)
                    Local0 = Zero
                    If (((Arg1 > Zero) && (Arg1 <= Local5)))
                    {
                        Local0 = DerefOf (GGGL [(Arg1 - One)])
                    }

                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Local0 = Arg1
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == 0x04))
                {
                    Local0 = ((0x001234DE + (Arg1 >> One)) / Arg1)
                    Local1 = Arg2
                }
                ElseIf ((Arg0 == One))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }
                ElseIf ((Arg0 == Zero))
                {
                    Local0 = 0x11D1
                    Local1 = 0x03E8
                }

                If (Local0)
                {
                    PIO7 (0x53, Zero, 0xB6)
                    PIO7 (0x52, Zero, (Local0 & 0xFF))
                    PIO7 (0x52, Zero, ((Local0 >> 0x08) & 0xFF))
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) | 0x03))
                    Sleep (Local1)
                    PIO7 (0x61, Zero, (PIO6 (0x61, Zero) & 0xFC))
                }
                Else
                {
                    Sleep (Local1)
                }
            }

            OperationRegion (DBS0, SystemIO, 0x2E, 0x02)
            Field (DBS0, ByteAcc, NoLock, Preserve)
            {
                DBS1,   8, 
                DBS2,   8
            }

            IndexField (DBS1, DBS2, ByteAcc, NoLock, Preserve)
            {
                Offset (0x07), 
                DBS4,   8, 
                Offset (0xEF), 
                DBS8,   1, 
                DBS9,   1
            }

            Mutex (DBS3, 0x00)
            Method (DBS5, 1, NotSerialized)
            {
                Acquire (DBS3, 0xFFFF)
                DBS1 = 0x87
                DBS1 = One
                DBS1 = 0x55
                If (Ones)
                {
                    DBS1 = 0x55
                }
                Else
                {
                    DBS1 = 0xAA
                }

                DBS4 = Arg0
            }

            Method (DBS6, 0, NotSerialized)
            {
                DBS1 = 0x02
                DBS2 = 0x02
                Release (DBS3)
            }

            Method (GGGG, 0, Serialized)
            {
                DBS5 (0x07)
                Local0 = DBS9 /* \GSA1.DBS9 */
                DBS6 ()
                Return (Local0)
            }

            Method (GGGE, 0, Serialized)
            {
                DBS5 (0x07)
                Local0 = DBS8 /* \GSA1.DBS8 */
                DBS6 ()
                Return (Local0)
            }

            Method (GGGF, 1, Serialized)
            {
                DBS5 (0x07)
                DBS8 = Arg0
                Local0 = DBS8 /* \GSA1.DBS8 */
                DBS6 ()
                Return (Local0)
            }

            Method (MPTS, 1, NotSerialized)
            {
            }

            Method (MWAK, 1, NotSerialized)
            {
                PFM1 (Arg0)
            }

            Method (_INI, 0, Serialized)  // _INI: Initialize
            {
                ADBG ("Hello World!")
                If ((GGGG () == One))
                {
                    GGGC = (GGGC | 0x00040000)
                }

                GGGC = (GGGC | 0x10)
                GGGC = (GGGC | 0x20)
                GGGC = (GGGC | 0x40)
                PFM0 ()
                GGGC = (GGGC | 0x80)
                GGGC = (GGGC | 0x0800)
                EVT0 ()
                DIM0 ()
            }

            Method (_WDG, 0, Serialized)
            {
                Return (QWDG) /* \GSA1.QWDG */
            }

            Name (QWDG, Buffer (0x50)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x43, 0x43, 0x01, 0x00, 0xEF, 0xBE, 0xAD, 0xDE,  // CC......
                /* 0018 */  0x00, 0x10, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // ........
                /* 0020 */  0x29, 0x10, 0x00, 0x00, 0x41, 0x41, 0x01, 0x01,  // )...AA..
                /* 0028 */  0xEF, 0xBE, 0xAD, 0xDE, 0x01, 0x20, 0x00, 0x00,  // ..... ..
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0x42, 0x42, 0x01, 0x02, 0xEF, 0xBE, 0xAD, 0xDE,  // BB......
                /* 0040 */  0x02, 0x40, 0x00, 0x00, 0x00, 0xA0, 0xC9, 0x06,  // .@......
                /* 0048 */  0x29, 0x10, 0x00, 0x00, 0xE2, 0x00, 0x01, 0x08   // ).......
            })
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (WQCC, Buffer (0x29A2)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x92, 0x29, 0x00, 0x00, 0x76, 0xC6, 0x01, 0x00,  // .)..v...
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x98, 0x36, 0x9A, 0x01, 0x01, 0x08, 0x09, 0x42,  // .6.....B
                /* 0020 */  0x58, 0x09, 0x84, 0xC4, 0x39, 0xA0, 0x10, 0x81,  // X...9...
                /* 0028 */  0xE4, 0x13, 0x49, 0x0E, 0x0C, 0x4A, 0x02, 0x88,  // ..I..J..
                /* 0030 */  0xE4, 0x40, 0xC8, 0x05, 0x13, 0x13, 0x20, 0x02,  // .@.... .
                /* 0038 */  0x42, 0x5E, 0x05, 0xD8, 0x14, 0x60, 0x12, 0x44,  // B^...`.D
                /* 0040 */  0xFD, 0xFB, 0x43, 0x94, 0x06, 0x45, 0x09, 0x2C,  // ..C..E.,
                /* 0048 */  0x04, 0x42, 0x32, 0x05, 0xF8, 0x16, 0xE0, 0x58,  // .B2....X
                /* 0050 */  0x80, 0x61, 0x01, 0xB2, 0x05, 0x58, 0x86, 0x22,  // .a...X."
                /* 0058 */  0xA8, 0x9D, 0x0A, 0x90, 0x2B, 0x40, 0x98, 0x00,  // ....+@..
                /* 0060 */  0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0x84, 0x83,  // ...h....
                /* 0068 */  0x46, 0x89, 0x81, 0x90, 0x44, 0x58, 0x39, 0xC7,  // F...DX9.
                /* 0070 */  0x96, 0x72, 0x01, 0xA6, 0x05, 0x08, 0x17, 0x20,  // .r..... 
                /* 0078 */  0x1D, 0x43, 0x23, 0xA8, 0x1B, 0x4C, 0x52, 0x05,  // .C#..LR.
                /* 0080 */  0x88, 0x86, 0x11, 0x5A, 0x41, 0x70, 0x1A, 0xC4,  // ...ZAp..
                /* 0088 */  0x51, 0x44, 0x09, 0xC3, 0xF0, 0x8C, 0x19, 0x28,  // QD.....(
                /* 0090 */  0x5C, 0x90, 0x48, 0x86, 0x09, 0x7A, 0x02, 0x41,  // \.H..z.A
                /* 0098 */  0x4A, 0xC6, 0x90, 0x66, 0x2C, 0x02, 0x71, 0x06,  // J..f,.q.
                /* 00A0 */  0x1C, 0x2B, 0x46, 0xA8, 0x90, 0x98, 0x81, 0x04,  // .+F.....
                /* 00A8 */  0x3F, 0x81, 0xAE, 0x31, 0xE4, 0x19, 0x88, 0x58,  // ?..1...X
                /* 00B0 */  0x9F, 0x80, 0x40, 0xA2, 0x47, 0x09, 0x6E, 0x5C,  // ..@.G.n\
                /* 00B8 */  0xA3, 0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26,  // ..1..n`&
                /* 00C0 */  0x88, 0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40,  // .sx....@
                /* 00C8 */  0xFC, 0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x0C, 0x65,  // .......e
                /* 00D0 */  0x51, 0x80, 0x41, 0x0C, 0x29, 0x04, 0x11, 0x42,  // Q.A.)..B
                /* 00D8 */  0x8D, 0x02, 0x6C, 0x0D, 0x56, 0xC6, 0x20, 0x84,  // ..l.V. .
                /* 00E0 */  0x10, 0xC5, 0x08, 0x0C, 0x85, 0x61, 0x46, 0xB1,  // .....aF.
                /* 00E8 */  0xC3, 0x39, 0x0B, 0xA4, 0x36, 0x01, 0xCA, 0x40,  // .9..6..@
                /* 00F0 */  0x04, 0xCA, 0x10, 0x98, 0xFD, 0x41, 0x90, 0x40,  // .....A.@
                /* 00F8 */  0xE7, 0x01, 0xFD, 0x08, 0x2C, 0x09, 0x44, 0x46,  // ....,.DF
                /* 0100 */  0xB6, 0x94, 0x80, 0x1C, 0x06, 0x12, 0x1C, 0x8E,  // ........
                /* 0108 */  0x27, 0xD2, 0xFC, 0xCC, 0x34, 0x2A, 0x26, 0x01,  // '...4*&.
                /* 0110 */  0x50, 0x1A, 0x40, 0x24, 0x0A, 0x42, 0xBF, 0x03,  // P.@$.B..
                /* 0118 */  0x2A, 0x40, 0xCA, 0xC9, 0x80, 0xD8, 0x1E, 0x97,  // *@......
                /* 0120 */  0xE6, 0x74, 0x80, 0xA7, 0xEE, 0xBB, 0xC1, 0x99,  // .t......
                /* 0128 */  0xF9, 0xAC, 0xE0, 0x2D, 0xF8, 0xFF, 0x7F, 0x46,  // ...-...F
                /* 0130 */  0xE0, 0x63, 0xF0, 0x50, 0x0F, 0x21, 0xE0, 0x11,  // .c.P.!..
                /* 0138 */  0xB2, 0x43, 0x82, 0x01, 0xF1, 0xDE, 0x6F, 0x05,  // .C....o.
                /* 0140 */  0x64, 0x2E, 0x06, 0x64, 0x07, 0x85, 0xE7, 0x03,  // d..d....
                /* 0148 */  0xB0, 0x4C, 0xF2, 0x34, 0x8F, 0xA1, 0xE2, 0xA9,  // .L.4....
                /* 0150 */  0x21, 0x8E, 0x04, 0x7C, 0x2A, 0x27, 0xC5, 0x08,  // !..|*'..
                /* 0158 */  0x7C, 0x8C, 0xF0, 0xE8, 0xF8, 0x28, 0x7C, 0x76,  // |....(|v
                /* 0160 */  0x38, 0xED, 0x62, 0x8F, 0x10, 0x54, 0xD6, 0x31,  // 8.b..T.1
                /* 0168 */  0x02, 0x3D, 0xF7, 0x23, 0x0C, 0xF8, 0xD2, 0xD0,  // .=.#....
                /* 0170 */  0xAC, 0x00, 0xA1, 0xF7, 0x00, 0x11, 0xBC, 0x0E,  // ........
                /* 0178 */  0xF8, 0xC6, 0x60, 0x71, 0x30, 0x3A, 0x51, 0xE0,  // ..`q0:Q.
                /* 0180 */  0x87, 0x6E, 0xBF, 0x02, 0x10, 0x42, 0x9F, 0xDB,  // .n...B..
                /* 0188 */  0x49, 0x3C, 0x50, 0x44, 0x48, 0xD0, 0x23, 0x86,  // I<PDH.#.
                /* 0190 */  0x60, 0xCE, 0x2A, 0xD6, 0x01, 0x3C, 0x09, 0x24,  // `.*..<.$
                /* 0198 */  0x28, 0x70, 0x88, 0x68, 0x68, 0xAE, 0x13, 0x53,  // (p.hh..S
                /* 01A0 */  0x43, 0x39, 0x91, 0xB8, 0x41, 0xA3, 0x9C, 0xC0,  // C9..A...
                /* 01A8 */  0xB1, 0x78, 0x9C, 0xC7, 0xF7, 0xD8, 0xE0, 0x23,  // .x.....#
                /* 01B0 */  0xC6, 0x39, 0xBF, 0x05, 0x78, 0x70, 0x9C, 0xC0,  // .9..xp..
                /* 01B8 */  0x12, 0x1F, 0x1E, 0x3E, 0x7B, 0x50, 0x51, 0x30,  // ...>{PQ0
                /* 01C0 */  0xA8, 0xE3, 0x07, 0xE0, 0xE6, 0xFF, 0x7F, 0xFC,  // ........
                /* 01C8 */  0x00, 0x2C, 0x41, 0x3C, 0x7E, 0x80, 0x33, 0x96,  // .,A<~.3.
                /* 01D0 */  0x82, 0xF3, 0x00, 0x3B, 0x7E, 0x00, 0xDC, 0xF8,  // ...;~...
                /* 01D8 */  0xFF, 0x1F, 0x3F, 0xB8, 0x8C, 0x91, 0x1B, 0x96,  // ..?.....
                /* 01E0 */  0x8E, 0xDC, 0xC0, 0xBE, 0x4D, 0x9C, 0x89, 0x21,  // ....M..!
                /* 01E8 */  0x1E, 0x14, 0x4C, 0xE0, 0xD0, 0x10, 0xB2, 0x30,  // ..L....0
                /* 01F0 */  0x74, 0xD0, 0x7C, 0x07, 0x34, 0x74, 0x40, 0xC6,  // t.|.4t@.
                /* 01F8 */  0x09, 0x06, 0xB8, 0x61, 0x3C, 0xC1, 0x00, 0x93,  // ...a<...
                /* 0200 */  0xF0, 0x67, 0x04, 0x54, 0x5C, 0x18, 0x14, 0x81,  // .g.T\...
                /* 0208 */  0xA3, 0x1E, 0x07, 0xE8, 0xC8, 0x3C, 0x30, 0xF8,  // .....<0.
                /* 0210 */  0x07, 0x19, 0x36, 0x97, 0xDA, 0x27, 0xAD, 0x61,  // ..6..'.a
                /* 0218 */  0x9A, 0xC0, 0x23, 0x83, 0xF3, 0xFF, 0x1F, 0x19,  // ..#.....
                /* 0220 */  0xB8, 0xE6, 0x7E, 0x00, 0x98, 0xE3, 0x84, 0x07,  // ..~.....
                /* 0228 */  0xC0, 0xC1, 0x5B, 0xBD, 0x01, 0x10, 0xA5, 0x13,  // ..[.....
                /* 0230 */  0x42, 0x12, 0x84, 0x33, 0xD6, 0xDB, 0xCD, 0x19,  // B..3....
                /* 0238 */  0xBC, 0x1C, 0xF8, 0x28, 0x63, 0x8C, 0xF7, 0x83,  // ...(c...
                /* 0240 */  0xA3, 0xC2, 0x9E, 0x7F, 0x10, 0x47, 0x39, 0x94,  // .....G9.
                /* 0248 */  0xA8, 0xD3, 0x1C, 0x40, 0xA4, 0xCB, 0x0F, 0xEE,  // ...@....
                /* 0250 */  0xFC, 0x03, 0xEB, 0xFF, 0x7F, 0xFE, 0x81, 0x78,  // .......x
                /* 0258 */  0x9A, 0x03, 0xA8, 0x72, 0x0C, 0xC1, 0x1D, 0x5E,  // ...r...^
                /* 0260 */  0xC0, 0x71, 0x61, 0xC0, 0x1D, 0x4B, 0x80, 0xC3,  // .qa..K..
                /* 0268 */  0x09, 0x04, 0xDC, 0xFF, 0xFF, 0x13, 0x08, 0xC0,  // ........
                /* 0270 */  0x92, 0x03, 0x1D, 0x68, 0x4F, 0x20, 0x54, 0xD0,  // ...hO T.
                /* 0278 */  0x09, 0x04, 0xFA, 0xB3, 0xC3, 0x27, 0x10, 0xE0,  // .....'..
                /* 0280 */  0x2A, 0x72, 0xC4, 0xA8, 0xFF, 0xFF, 0xF9, 0x00,  // *r......
                /* 0288 */  0xAE, 0xB5, 0x51, 0x6A, 0x9A, 0x6F, 0x20, 0xD8,  // ..Qj.o .
                /* 0290 */  0x03, 0x08, 0x38, 0xDE, 0x6B, 0x3E, 0x80, 0x80,  // ..8.k>..
                /* 0298 */  0x6B, 0x40, 0x0F, 0x20, 0xE0, 0x02, 0x39, 0xB2,  // k@. ..9.
                /* 02A0 */  0x33, 0x3A, 0x2E, 0x36, 0x6E, 0x7E, 0x02, 0x01,  // 3:.6n~..
                /* 02A8 */  0x26, 0x82, 0x1E, 0x7A, 0x3E, 0x7E, 0x70, 0x18,  // &..z>~p.
                /* 02B0 */  0xDC, 0x09, 0x04, 0xD0, 0xFA, 0xFF, 0x3F, 0x81,  // ......?.
                /* 02B8 */  0x00, 0xD3, 0xBB, 0xC1, 0x13, 0x08, 0x38, 0x43,  // ......8C
                /* 02C0 */  0x3C, 0x24, 0xF4, 0x23, 0x70, 0xF0, 0x73, 0x3D,  // <$.#p.s=
                /* 02C8 */  0x3D, 0x58, 0xC2, 0x8D, 0x79, 0xB0, 0x04, 0xD5,  // =X..y...
                /* 02D0 */  0x11, 0x04, 0x38, 0x9C, 0x34, 0x70, 0x07, 0x04,  // ..8.4p..
                /* 02D8 */  0xB8, 0x04, 0x3E, 0x4A, 0xFB, 0xD0, 0x01, 0x8E,  // ..>J....
                /* 02E0 */  0xE3, 0x95, 0x09, 0x3C, 0x58, 0x38, 0xA7, 0x88,  // ...<X8..
                /* 02E8 */  0xC7, 0x3F, 0xDF, 0x05, 0x5E, 0x0B, 0x3C, 0x58,  // .?..^.<X
                /* 02F0 */  0xF0, 0x1D, 0x4A, 0xE1, 0xFD, 0xFF, 0x07, 0x0B,  // ..J.....
                /* 02F8 */  0x78, 0x38, 0xF9, 0x00, 0x97, 0xD3, 0x10, 0x39,  // x8.....9
                /* 0300 */  0xF9, 0x00, 0x3A, 0x4F, 0x72, 0x60, 0x9B, 0x7E,  // ..:Or`.~
                /* 0308 */  0xF8, 0x77, 0x95, 0x08, 0xE7, 0xE5, 0x83, 0x00,  // .w......
                /* 0310 */  0x3B, 0xF8, 0xC0, 0xFB, 0xFF, 0x1F, 0x7C, 0x00,  // ;.....|.
                /* 0318 */  0x26, 0x3A, 0x3B, 0xF8, 0x00, 0xE9, 0xFF, 0xFF,  // &:;.....
                /* 0320 */  0xC1, 0x07, 0xE0, 0xFF, 0xFF, 0xFF, 0xE0, 0x03,  // ........
                /* 0328 */  0xFC, 0x2E, 0x17, 0xBE, 0x5E, 0x3C, 0xA5, 0xBC,  // ....^<..
                /* 0330 */  0xF8, 0xC0, 0x3B, 0xF8, 0x40, 0x7C, 0xC4, 0xE8,  // ..;.@|..
                /* 0338 */  0xE0, 0x03, 0x0C, 0xE7, 0xC5, 0x06, 0x80, 0x3F,  // .......?
                /* 0340 */  0xF8, 0x00, 0xAE, 0xFF, 0xFF, 0x07, 0x1F, 0xC0,  // ........
                /* 0348 */  0xD4, 0x70, 0x1F, 0x7C, 0x00, 0x4E, 0xFD, 0xFF,  // .p.|.N..
                /* 0350 */  0x0F, 0x3E, 0x00, 0xFF, 0xEE, 0x28, 0x6C, 0x84,  // .>...(l.
                /* 0358 */  0x0F, 0x3E, 0x20, 0x5C, 0xB5, 0x0E, 0x3E, 0xC0,  // .> \..>.
                /* 0360 */  0xE1, 0xFF, 0x7F, 0xF0, 0x81, 0x3D, 0xAF, 0x97,  // .....=..
                /* 0368 */  0x10, 0x76, 0xF0, 0x01, 0x26, 0x12, 0xD7, 0x48,  // .v..&..H
                /* 0370 */  0x4F, 0x3D, 0x16, 0x05, 0x83, 0x3A, 0xF8, 0x00,  // O=...:..
                /* 0378 */  0x0C, 0x3A, 0xAB, 0x3E, 0xF8, 0x80, 0xF3, 0xFF,  // .:.>....
                /* 0380 */  0x1F, 0xEB, 0x3C, 0xA0, 0x1F, 0x81, 0x25, 0x1D,  // ..<...%.
                /* 0388 */  0x40, 0xA0, 0x4B, 0x38, 0x80, 0x80, 0xEA, 0xDC,  // @.K8....
                /* 0390 */  0x03, 0x1C, 0x0E, 0x0A, 0xCF, 0x07, 0x60, 0x99,  // ......`.
                /* 0398 */  0xE5, 0xE1, 0xBE, 0x7F, 0xE0, 0xAF, 0x04, 0xEC,  // ........
                /* 03A0 */  0x04, 0x02, 0x8A, 0xA5, 0xE9, 0x04, 0x02, 0x0C,  // ........
                /* 03A8 */  0x27, 0xC6, 0x4E, 0xC4, 0x80, 0x97, 0xFF, 0xFF,  // '.N.....
                /* 03B0 */  0x09, 0x04, 0x60, 0xC3, 0xD1, 0xE0, 0x49, 0x0E,  // ..`...I.
                /* 03B8 */  0xF0, 0xFD, 0xFF, 0x3F, 0xC9, 0x01, 0x1C, 0x3F,  // ...?...?
                /* 03C0 */  0xF9, 0xC0, 0xB9, 0xF7, 0xF0, 0xFF, 0x3F, 0x81,  // ......?.
                /* 03C8 */  0x0F, 0x3E, 0xC0, 0x7F, 0x5C, 0xAF, 0x04, 0x3E,  // .>..\..>
                /* 03D0 */  0xF8, 0x00, 0x93, 0x35, 0xF2, 0x53, 0x8F, 0x23,  // ...5.S.#
                /* 03D8 */  0xBF, 0x22, 0x7C, 0xF0, 0x01, 0xA8, 0xF1, 0xFF,  // ."|.....
                /* 03E0 */  0x3F, 0xF8, 0x80, 0xCD, 0xDB, 0xC1, 0x07, 0xA4,  // ?.......
                /* 03E8 */  0xA2, 0x4F, 0x72, 0x34, 0x34, 0x84, 0x8C, 0x1C,  // .Or44...
                /* 03F0 */  0x5E, 0x50, 0xC3, 0xF1, 0x91, 0x02, 0x17, 0xF2,  // ^P......
                /* 03F8 */  0xDC, 0x03, 0xA8, 0x39, 0x72, 0x80, 0x0B, 0xC2,  // ...9r...
                /* 0400 */  0x47, 0x0E, 0x30, 0xCD, 0xCE, 0x07, 0x10, 0x18,  // G.0.....
                /* 0408 */  0x07, 0x37, 0x90, 0x1F, 0x43, 0x71, 0x27, 0x51,  // .7..Cq'Q
                /* 0410 */  0xE8, 0xFF, 0xFF, 0x03, 0x07, 0xC0, 0x96, 0x9B,  // ........
                /* 0418 */  0xC1, 0x83, 0x1B, 0x48, 0x0F, 0x1C, 0xF4, 0x04,  // ...H....
                /* 0420 */  0xEA, 0x03, 0x14, 0xFE, 0xC0, 0x81, 0x8B, 0x0C,  // ........
                /* 0428 */  0xA1, 0x93, 0x28, 0x70, 0x3D, 0x65, 0xF8, 0xFF,  // ..(p=e..
                /* 0430 */  0x7F, 0xE0, 0x00, 0xCF, 0xC9, 0x09, 0xDE, 0x3F,  // .......?
                /* 0438 */  0xC8, 0xE7, 0x0E, 0x70, 0xC9, 0x3B, 0x77, 0x80,  // ...p.;w.
                /* 0440 */  0xF2, 0x40, 0xC6, 0x0F, 0x1E, 0xC0, 0x43, 0xC4,  // .@....C.
                /* 0448 */  0xA9, 0x03, 0x15, 0xFB, 0xE0, 0x04, 0xE8, 0xFF,  // ........
                /* 0450 */  0xFF, 0x1F, 0x3C, 0x80, 0xCD, 0x68, 0x1F, 0x3C,  // ..<..h.<
                /* 0458 */  0xC0, 0x29, 0xFC, 0xE0, 0x41, 0x63, 0x43, 0xC8,  // .)..AcC.
                /* 0460 */  0xC9, 0xC1, 0x09, 0xEA, 0xF9, 0x13, 0x70, 0xE8,  // ......p.
                /* 0468 */  0x6C, 0xC4, 0x22, 0xF0, 0x91, 0x03, 0x9C, 0xF0,  // l.".....
                /* 0470 */  0xFC, 0xC8, 0x01, 0x3C, 0xB2, 0x1B, 0x9F, 0xF9,  // ...<....
                /* 0478 */  0xFF, 0x3F, 0x81, 0x63, 0x70, 0x48, 0xDC, 0x23,  // .?.cpH.#
                /* 0480 */  0x80, 0xC2, 0xF8, 0x44, 0xE3, 0x23, 0x07, 0x5C,  // ...D.#.\
                /* 0488 */  0x49, 0x70, 0xA8, 0xF1, 0x79, 0xD8, 0x8F, 0x91,  // Ip..y...
                /* 0490 */  0xC7, 0xF9, 0x1A, 0x70, 0x20, 0x9E, 0xF7, 0xB3,  // ...p ...
                /* 0498 */  0x07, 0x8C, 0x93, 0x81, 0x27, 0x75, 0x4A, 0xD6,  // ....'uJ.
                /* 04A0 */  0x7E, 0x82, 0x20, 0x97, 0x09, 0x13, 0xF8, 0x78,  // ~. ....x
                /* 04A8 */  0xC0, 0xD0, 0xF8, 0x41, 0x04, 0xAC, 0x47, 0x82,  // ...A..G.
                /* 04B0 */  0x27, 0x03, 0xB0, 0xCC, 0xF9, 0x2D, 0x04, 0x73,  // '....-.s
                /* 04B8 */  0xE4, 0xC0, 0x00, 0xC6, 0x7B, 0xE4, 0x30, 0xEA,  // ....{.0.
                /* 04C0 */  0x51, 0xF9, 0x00, 0xE1, 0xA3, 0x87, 0xC7, 0x1F,  // Q.......
                /* 04C8 */  0x36, 0x42, 0x90, 0xF3, 0x7A, 0x1B, 0xF0, 0xC5,  // 6B..z...
                /* 04D0 */  0x23, 0x60, 0xD8, 0xE0, 0x26, 0xF0, 0xB1, 0x03,  // #`..&...
                /* 04D8 */  0x7C, 0x97, 0x83, 0x47, 0x0D, 0x9F, 0x10, 0x1E,  // |..G....
                /* 04E0 */  0x3B, 0xC0, 0x19, 0xEB, 0x54, 0x43, 0x23, 0x8D,  // ;...TC#.
                /* 04E8 */  0x06, 0x75, 0x56, 0xF0, 0xB9, 0xC0, 0x67, 0x82,  // .uV...g.
                /* 04F0 */  0x87, 0x16, 0x1F, 0x36, 0x0C, 0x72, 0xAE, 0x87,  // ...6.r..
                /* 04F8 */  0xF6, 0xBC, 0xF0, 0x40, 0xE0, 0xA1, 0x33, 0xAC,  // ...@..3.
                /* 0500 */  0x07, 0x0F, 0x76, 0x42, 0xC0, 0x5F, 0x59, 0x02,  // ..vB._Y.
                /* 0508 */  0xBE, 0x1A, 0x3C, 0x6F, 0x60, 0xFF, 0xFF, 0xE7,  // ..<o`...
                /* 0510 */  0x0E, 0x78, 0x87, 0x0C, 0xF8, 0xE3, 0xF1, 0x49,  // .x.....I
                /* 0518 */  0xC0, 0x67, 0x65, 0x1F, 0x80, 0xC8, 0x20, 0x50,  // .ge... P
                /* 0520 */  0x67, 0x66, 0x3E, 0xD2, 0xD3, 0x7A, 0x21, 0xF0,  // gf>..z!.
                /* 0528 */  0x39, 0xE1, 0xB0, 0xD8, 0xE1, 0x89, 0x8F, 0x07,  // 9.......
                /* 0530 */  0xFC, 0x47, 0xDC, 0xA7, 0x0C, 0xDF, 0x1A, 0x3C,  // .G.....<
                /* 0538 */  0x5F, 0x9F, 0x16, 0x7C, 0x06, 0x01, 0xD7, 0xB5,  // _..|....
                /* 0540 */  0xC3, 0x43, 0x38, 0x09, 0xDF, 0x13, 0x30, 0xA7,  // .C8...0.
                /* 0548 */  0x10, 0x60, 0x90, 0x4A, 0xF7, 0xDB, 0x20, 0xD4,  // .`.J.. .
                /* 0550 */  0x23, 0x88, 0x16, 0x2A, 0x1B, 0x27, 0x35, 0x3A,  // #..*.'5:
                /* 0558 */  0x26, 0x8B, 0x3D, 0x21, 0x68, 0x3C, 0xE7, 0x7E,  // &.=!h<.~
                /* 0560 */  0x6A, 0x07, 0xF8, 0x5A, 0xE1, 0x73, 0x81, 0x45,  // j..Z.s.E
                /* 0568 */  0x42, 0xE9, 0x3A, 0x62, 0x08, 0xCB, 0x3B, 0x8F,  // B.:b..;.
                /* 0570 */  0x18, 0x42, 0x83, 0xF1, 0x51, 0x8C, 0xC0, 0x51,  // .B..Q..Q
                /* 0578 */  0x10, 0x8F, 0xDD, 0x51, 0x21, 0x64, 0xE3, 0xD4,  // ...Q!d..
                /* 0580 */  0x83, 0xBE, 0xEA, 0x70, 0x02, 0x47, 0x3B, 0xC6,  // ...p.G;.
                /* 0588 */  0xF9, 0xAC, 0x00, 0x65, 0x4C, 0x8F, 0x15, 0xC7,  // ...eL...
                /* 0590 */  0xE2, 0x23, 0x0E, 0xFC, 0xFF, 0xFF, 0x51, 0x0D,  // .#....Q.
                /* 0598 */  0xFE, 0xD0, 0xDF, 0x03, 0x4C, 0xC0, 0x0E, 0xD3,  // ....L...
                /* 05A0 */  0xB8, 0x63, 0x01, 0x9C, 0x19, 0xBC, 0x16, 0x54,  // .c.....T
                /* 05A8 */  0x3D, 0x0E, 0xDD, 0x16, 0xAC, 0xEE, 0x32, 0x80,  // =.....2.
                /* 05B0 */  0xC2, 0x7B, 0xA4, 0xC2, 0x1D, 0x9D, 0xC1, 0x02,  // .{......
                /* 05B8 */  0xE4, 0xCB, 0x80, 0x95, 0x1E, 0x08, 0xE8, 0x4C,  // .......L
                /* 05C0 */  0x42, 0x84, 0x89, 0x66, 0x78, 0xCC, 0xA1, 0x89,  // B..fx...
                /* 05C8 */  0x0F, 0xD4, 0xA3, 0xE3, 0x03, 0xF5, 0x31, 0x86,  // ......1.
                /* 05D0 */  0x1D, 0x14, 0x70, 0xA7, 0x26, 0x0C, 0xAC, 0x87,  // ..p.&...
                /* 05D8 */  0xCE, 0x61, 0x8D, 0x16, 0xF6, 0x88, 0x9F, 0x21,  // .a.....!
                /* 05E0 */  0x7C, 0xFF, 0xF0, 0xC5, 0xC8, 0xD7, 0x16, 0x9F,  // |.......
                /* 05E8 */  0x3C, 0xC0, 0x72, 0x80, 0x02, 0x2E, 0xD2, 0x8E,  // <.r.....
                /* 05F0 */  0x0F, 0xA8, 0x83, 0x90, 0xA5, 0x1E, 0x1F, 0x10,  // ........
                /* 05F8 */  0x18, 0x87, 0xE8, 0xF3, 0xC0, 0x59, 0x3E, 0x13,  // .....Y>.
                /* 0600 */  0x78, 0xC2, 0x8F, 0x23, 0x58, 0x61, 0x67, 0x08,  // x..#Xag.
                /* 0608 */  0x94, 0x24, 0x0A, 0x9D, 0xEC, 0x7D, 0x86, 0xE0,  // .$...}..
                /* 0610 */  0x87, 0x49, 0x83, 0x19, 0xC4, 0x67, 0x08, 0xC7,  // .I...g..
                /* 0618 */  0x3B, 0xC2, 0xA0, 0x47, 0xE7, 0xFF, 0xBF, 0xD6,  // ;..G....
                /* 0620 */  0x83, 0x10, 0x39, 0x3B, 0x1C, 0x9D, 0xE3, 0x9C,  // ..9;....
                /* 0628 */  0x21, 0x80, 0xEA, 0x41, 0x06, 0x7C, 0xA7, 0x07,  // !..A.|..
                /* 0630 */  0xE0, 0x7D, 0xD0, 0xE4, 0xA7, 0x07, 0xC0, 0xD9,  // .}......
                /* 0638 */  0x81, 0xEA, 0x2C, 0x8F, 0xF8, 0x6D, 0xC4, 0xB7,  // ..,..m..
                /* 0640 */  0x07, 0xEC, 0xE9, 0x01, 0xF7, 0xFF, 0x3F, 0x3D,  // ......?=
                /* 0648 */  0x00, 0x9C, 0x82, 0xF4, 0xE9, 0x01, 0xF0, 0xF4,  // ........
                /* 0650 */  0xFF, 0x3F, 0x3D, 0xC0, 0x39, 0x28, 0xBC, 0xF3,  // .?=.9(..
                /* 0658 */  0xF9, 0xF4, 0x00, 0xB0, 0x6D, 0xD0, 0x3E, 0x3D,  // ....m.>=
                /* 0660 */  0x00, 0xE7, 0xFF, 0xFF, 0xE9, 0x01, 0x78, 0xDC,  // ......x.
                /* 0668 */  0x50, 0x7D, 0x5E, 0x7B, 0x7A, 0x00, 0xD8, 0x06,  // P}^{z...
                /* 0670 */  0xCB, 0x4F, 0x0F, 0xE0, 0xFE, 0xFF, 0x1F, 0xBA,  // .O......
                /* 0678 */  0x81, 0xD8, 0xE9, 0x01, 0xC5, 0x61, 0xA1, 0xA7,  // .....a..
                /* 0680 */  0x07, 0x08, 0x87, 0x62, 0x36, 0xC8, 0x23, 0x0E,  // ...b6.#.
                /* 0688 */  0x5E, 0xFD, 0x48, 0xC8, 0xE1, 0x01, 0x7C, 0x67,  // ^.H...|g
                /* 0690 */  0x77, 0xFC, 0xE1, 0x01, 0xF0, 0x72, 0x5E, 0xC7,  // w....r^.
                /* 0698 */  0x1F, 0x1E, 0x80, 0xF7, 0x31, 0xDD, 0x87, 0x07,  // ....1...
                /* 06A0 */  0xFC, 0xFF, 0xFF, 0xF0, 0x00, 0x78, 0x38, 0xFE,  // .....x8.
                /* 06A8 */  0xE2, 0x44, 0x1D, 0x7F, 0x91, 0x87, 0x07, 0x36,  // .D.....6
                /* 06B0 */  0xEE, 0x28, 0xA1, 0x43, 0xBC, 0xC8, 0xC6, 0x3E,  // .(.C...>
                /* 06B8 */  0xB7, 0x33, 0xF1, 0x15, 0xFB, 0x20, 0x5E, 0x07,  // .3... ^.
                /* 06C0 */  0x7C, 0x7C, 0x00, 0xD8, 0xF3, 0xFF, 0x3F, 0x3E,  // ||....?>
                /* 06C8 */  0x80, 0xC3, 0xC3, 0xB9, 0x0A, 0x50, 0x77, 0xA3,  // .....Pw.
                /* 06D0 */  0x66, 0x97, 0x3C, 0x86, 0x15, 0x1D, 0x73, 0xAE,  // f.<...s.
                /* 06D8 */  0x02, 0x78, 0xF0, 0xFF, 0x3F, 0x3D, 0x00, 0x2F,  // .x..?=./
                /* 06E0 */  0x70, 0x9F, 0x1E, 0x00, 0x2F, 0xB2, 0x4E, 0x0F,  // p.../.N.
                /* 06E8 */  0xA8, 0xB3, 0x80, 0x65, 0x1E, 0x15, 0x34, 0xD9,  // ...e..4.
                /* 06F0 */  0x6A, 0x4F, 0x09, 0x3A, 0x3D, 0xB0, 0xBB, 0x03,  // jO.:=...
                /* 06F8 */  0xFE, 0xEC, 0x00, 0xB8, 0xFD, 0xFF, 0x9F, 0x1D,  // ........
                /* 0700 */  0x00, 0x07, 0x26, 0xCE, 0x0E, 0x80, 0x1A, 0x7D,  // ..&....}
                /* 0708 */  0x0B, 0xD4, 0x11, 0x0F, 0xA7, 0xF7, 0xA5, 0xA0,  // ........
                /* 0710 */  0x83, 0x0C, 0x4E, 0xE4, 0x2C, 0x35, 0xF0, 0xC0,  // ..N.,5..
                /* 0718 */  0xD6, 0x0C, 0xAE, 0x23, 0x00, 0xD3, 0x07, 0xA9,  // ...#....
                /* 0720 */  0x53, 0x83, 0x0F, 0x0D, 0x56, 0x46, 0x21, 0x1D,  // S...VF!.
                /* 0728 */  0x87, 0x07, 0x54, 0xF2, 0x23, 0x04, 0x05, 0x31,  // ..T.#..1
                /* 0730 */  0xA0, 0x63, 0x1D, 0xAA, 0xD0, 0x27, 0x33, 0x0F,  // .c...'3.
                /* 0738 */  0xE1, 0x18, 0x9D, 0xE4, 0xEA, 0x40, 0x27, 0xE6,  // .....@'.
                /* 0740 */  0x39, 0x72, 0x3C, 0x36, 0x2E, 0xA3, 0x56, 0x35,  // 9r<6..V5
                /* 0748 */  0x43, 0x10, 0xA9, 0x39, 0x12, 0xA0, 0x26, 0xE0,  // C..9..&.
                /* 0750 */  0x93, 0x03, 0x46, 0x97, 0x80, 0xFF, 0xFF, 0x85,  // ..F.....
                /* 0758 */  0x0A, 0x5C, 0xFA, 0x0E, 0x0E, 0x20, 0x47, 0xE7,  // .\... G.
                /* 0760 */  0xF7, 0x32, 0xC0, 0xD1, 0xA8, 0x7C, 0x2F, 0x03,  // .2...|/.
                /* 0768 */  0x3C, 0xA9, 0xB8, 0x7F, 0x80, 0xFC, 0xFF, 0x7F,  // <.......
                /* 0770 */  0x63, 0x05, 0xF6, 0xF0, 0x15, 0xCE, 0x5B, 0xC0,  // c.....[.
                /* 0778 */  0xF1, 0x23, 0x9D, 0x08, 0xBB, 0x23, 0x02, 0x0C,  // .#...#..
                /* 0780 */  0x1B, 0xB2, 0x0F, 0x0F, 0x98, 0xFF, 0xFF, 0x5D,  // .......]
                /* 0788 */  0x08, 0xF0, 0x34, 0xDA, 0x87, 0x07, 0x78, 0x77,  // ..4...xw
                /* 0790 */  0x21, 0x60, 0x30, 0x1F, 0xDF, 0x85, 0x00, 0xEF,  // !`0.....
                /* 0798 */  0xFF, 0xFF, 0xBB, 0x10, 0xC0, 0x97, 0x91, 0xFB,  // ........
                /* 07A0 */  0xFE, 0x01, 0x78, 0x89, 0x75, 0xFF, 0x40, 0xC7,  // ..x.u.@.
                /* 07A8 */  0xBC, 0x7F, 0xA0, 0x60, 0x0F, 0xC7, 0xAE, 0xAF,  // ...`....
                /* 07B0 */  0x99, 0xE4, 0x04, 0x12, 0x23, 0x42, 0xA4, 0x04,  // ....#B..
                /* 07B8 */  0xFE, 0xFF, 0xC7, 0xBA, 0x7F, 0x50, 0x08, 0x07,  // .....P..
                /* 07C0 */  0x82, 0x51, 0x1C, 0x08, 0x1D, 0x1E, 0x78, 0x00,  // .Q....x.
                /* 07C8 */  0x38, 0x0A, 0xE2, 0x23, 0x83, 0x0F, 0x0F, 0x56,  // 8..#...V
                /* 07D0 */  0x72, 0x78, 0x40, 0x4F, 0xE9, 0xB8, 0x7D, 0x25,  // rx@O..}%
                /* 07D8 */  0x61, 0x87, 0x07, 0x78, 0x27, 0x10, 0x76, 0x17,  // a..x'.v.
                /* 07E0 */  0x02, 0xD6, 0xC6, 0x04, 0x68, 0x83, 0x24, 0xE3,  // ....h.$.
                /* 07E8 */  0x83, 0xA3, 0xFD, 0xAC, 0x01, 0x8A, 0xF1, 0x01,  // ........
                /* 07F0 */  0x9F, 0xB3, 0x06, 0xB8, 0xC6, 0xC7, 0x03, 0x8E,  // ........
                /* 07F8 */  0x0F, 0x0D, 0xED, 0xD3, 0x40, 0xCC, 0xC3, 0x39,  // ....@..9
                /* 0800 */  0x1A, 0xCC, 0x00, 0xC1, 0xFB, 0xFF, 0x1F, 0x20,  // ....... 
                /* 0808 */  0xF8, 0x8E, 0x2F, 0x1E, 0x20, 0xF8, 0xCE, 0x26,  // ../. ..&
                /* 0810 */  0xC0, 0xDB, 0xC6, 0xD9, 0x04, 0x50, 0x23, 0xE7,  // .....P#.
                /* 0818 */  0xDA, 0x87, 0x1A, 0xB5, 0xE5, 0x5D, 0xFB, 0x10,  // .....]..
                /* 0820 */  0x33, 0x3E, 0xDE, 0xC3, 0x65, 0xB2, 0xAE, 0x7C,  // 3>..e..|
                /* 0828 */  0xA8, 0x23, 0x92, 0xE5, 0x9C, 0x91, 0x50, 0x54,  // .#....PT
                /* 0830 */  0x06, 0x33, 0x85, 0x4F, 0x05, 0x0E, 0x77, 0x46,  // .3.O..wF
                /* 0838 */  0x42, 0x9F, 0x17, 0xD8, 0xF8, 0xD8, 0xB9, 0x01,  // B.......
                /* 0840 */  0xEE, 0xFF, 0xFF, 0x58, 0x02, 0xBC, 0x8F, 0x48,  // ...X...H
                /* 0848 */  0xC0, 0x5F, 0xC7, 0xB9, 0x01, 0x90, 0x36, 0xC7,  // ._....6.
                /* 0850 */  0x13, 0xEE, 0xF2, 0xDC, 0x00, 0x64, 0xFE, 0xFF,  // .....d..
                /* 0858 */  0xE7, 0x06, 0x80, 0x13, 0x3E, 0xCE, 0x0D, 0x80,  // ....>...
                /* 0860 */  0x1A, 0x41, 0xE7, 0x06, 0xB4, 0xC0, 0x93, 0x82,  // .A......
                /* 0868 */  0x26, 0xD8, 0xFC, 0x1C, 0x08, 0xF4, 0xD3, 0x90,  // &.......
                /* 0870 */  0x2F, 0xC0, 0x60, 0xFB, 0xFF, 0x1F, 0xBB, 0x3C,  // /.`....<
                /* 0878 */  0x1E, 0x7E, 0x01, 0x06, 0xFC, 0x0C, 0xD4, 0xA3,  // .~......
                /* 0880 */  0xF0, 0x18, 0x7A, 0x3E, 0x38, 0x00, 0xF9, 0x41,  // ..z>8..A
                /* 0888 */  0x3C, 0x38, 0x00, 0xE6, 0xAE, 0x21, 0x3E, 0x38,  // <8...!>8
                /* 0890 */  0xE0, 0xFE, 0xFF, 0x07, 0x07, 0x80, 0x53, 0x46,  // ......SF
                /* 0898 */  0x0F, 0x0E, 0x80, 0xAA, 0xFF, 0xFF, 0xC1, 0x01,  // ........
                /* 08A0 */  0x7F, 0x1E, 0x7A, 0x70, 0x00, 0x18, 0x36, 0x80,  // ..zp..6.
                /* 08A8 */  0x07, 0x07, 0xC0, 0xC4, 0xFF, 0xFF, 0x20, 0x80,  // ...... .
                /* 08B0 */  0x17, 0x78, 0x82, 0x46, 0x0B, 0x7E, 0x29, 0x68,  // .x.F.~)h
                /* 08B8 */  0x5C, 0x6F, 0x2F, 0x47, 0xFD, 0xF6, 0x7C, 0x34,  // \o/G..|4
                /* 08C0 */  0xB1, 0xA3, 0x1F, 0xA4, 0x47, 0x76, 0xCE, 0x07,  // ....Gv..
                /* 08C8 */  0x14, 0xE1, 0x04, 0x42, 0x93, 0xA3, 0x33, 0x3D,  // ...B..3=
                /* 08D0 */  0x34, 0x58, 0x1A, 0x85, 0x84, 0x1C, 0x1E, 0x50,  // 4X.....P
                /* 08D8 */  0xD1, 0x8F, 0x10, 0x14, 0xC4, 0x80, 0xCE, 0x05,  // ........
                /* 08E0 */  0x21, 0x23, 0x87, 0x07, 0x94, 0x8A, 0xF1, 0x92,  // !#......
                /* 08E8 */  0x81, 0x9C, 0x53, 0x9D, 0x28, 0x0A, 0x72, 0x77,  // ..S.(.rw
                /* 08F0 */  0xA0, 0x33, 0xF3, 0x24, 0xB9, 0x86, 0x3B, 0x1D,  // .3.$..;.
                /* 08F8 */  0x02, 0xB7, 0xAA, 0x29, 0x82, 0x48, 0xCD, 0x99,  // ...).H..
                /* 0900 */  0x00, 0x35, 0x01, 0x1F, 0x1D, 0x30, 0x73, 0xC6,  // .5...0s.
                /* 0908 */  0xDD, 0xE8, 0xE0, 0x8A, 0x83, 0x91, 0xBE, 0x8B,  // ........
                /* 0910 */  0x03, 0xC8, 0xD1, 0xF9, 0x01, 0x04, 0xFE, 0xB9,  // ........
                /* 0918 */  0x10, 0x77, 0x40, 0xF0, 0x31, 0xE0, 0x55, 0xE0,  // .w@.1.U.
                /* 0920 */  0x80, 0x42, 0x3C, 0x18, 0xC2, 0x3D, 0x80, 0x00,  // .B<..=..
                /* 0928 */  0x8F, 0xFF, 0xFF, 0xB1, 0x1A, 0x9C, 0x07, 0x43,  // .......C
                /* 0930 */  0xE0, 0x2F, 0xF7, 0x00, 0x02, 0xA8, 0x49, 0xF8,  // ./....I.
                /* 0938 */  0x36, 0xD0, 0x01, 0x84, 0xC3, 0x3A, 0xF1, 0x22,  // 6....:."
                /* 0940 */  0x75, 0x00, 0xE1, 0x07, 0x80, 0xD8, 0x07, 0xFC,  // u.......
                /* 0948 */  0x28, 0xC4, 0x08, 0x9C, 0x12, 0x4E, 0xC7, 0x0F,  // (....N..
                /* 0950 */  0x9E, 0x0F, 0x46, 0x19, 0x48, 0x74, 0x74, 0xE0,  // ..F.Htt.
                /* 0958 */  0xAA, 0x4F, 0x21, 0x14, 0xC4, 0x07, 0x06, 0xC7,  // .O!.....
                /* 0960 */  0x3A, 0x7E, 0xA0, 0x07, 0x65, 0xC5, 0x93, 0x20,  // :~..e.. 
                /* 0968 */  0xB7, 0x0F, 0xB0, 0xFF, 0xFF, 0x6F, 0x1F, 0xC0,  // .....o..
                /* 0970 */  0xE9, 0xA4, 0x02, 0xE7, 0x30, 0xE0, 0xC3, 0x0B,  // ....0...
                /* 0978 */  0x9B, 0x1B, 0xF0, 0x9B, 0xBD, 0xE7, 0x06, 0xAE,  // ........
                /* 0980 */  0x94, 0x73, 0xF3, 0xE5, 0x80, 0xCE, 0x8D, 0x5F,  // .s....._
                /* 0988 */  0x48, 0x30, 0xC7, 0x01, 0x9F, 0x2B, 0x3C, 0x37,  // H0...+<7
                /* 0990 */  0x60, 0x70, 0x1D, 0xC1, 0x0F, 0xEA, 0xA5, 0xA3,  // `p......
                /* 0998 */  0xD8, 0x2B, 0x0B, 0x9D, 0x22, 0xAC, 0x63, 0x83,  // .+..".c.
                /* 09A0 */  0xEF, 0x36, 0xC0, 0xEF, 0xFF, 0x7F, 0xB7, 0x81,  // .6......
                /* 09A8 */  0x21, 0xED, 0x6E, 0x83, 0x12, 0x73, 0xB7, 0xA1,  // !.n..s..
                /* 09B0 */  0x20, 0x9E, 0x93, 0x83, 0x42, 0xC8, 0xC6, 0x8D,  //  ...B...
                /* 09B8 */  0x02, 0x7D, 0x07, 0xF1, 0x21, 0xC3, 0xD1, 0xAE,  // .}..!...
                /* 09C0 */  0x36, 0x40, 0x13, 0xCA, 0x22, 0x67, 0x0D, 0x7D,  // 6@.."g.}
                /* 09C8 */  0x06, 0xCF, 0x1D, 0x55, 0x8F, 0x43, 0xD3, 0x38,  // ...U.C.8
                /* 09D0 */  0x8A, 0xEA, 0xCE, 0xDF, 0x1A, 0xE8, 0xB9, 0xBE,  // ........
                /* 09D8 */  0xF6, 0x9E, 0xEE, 0x13, 0x89, 0x35, 0x23, 0xE8,  // .....5#.
                /* 09E0 */  0x50, 0x52, 0xDB, 0x5D, 0x87, 0x5C, 0x70, 0x80,  // PR.].\p.
                /* 09E8 */  0xB7, 0xDD, 0x0B, 0x0E, 0x20, 0xE2, 0xFF, 0x7F,  // .... ...
                /* 09F0 */  0x1C, 0x80, 0x91, 0xFE, 0xC2, 0x86, 0x3A, 0x11,  // ......:.
                /* 09F8 */  0x58, 0xCD, 0x05, 0x07, 0x31, 0xC7, 0xB3, 0xE0,  // X...1...
                /* 0A00 */  0x03, 0x3E, 0x20, 0x4C, 0xFE, 0xFB, 0x1A, 0x2A,  // .> L...*
                /* 0A08 */  0x39, 0x85, 0xF2, 0x1D, 0x20, 0x50, 0x89, 0x0E,  // 9... P..
                /* 0A10 */  0x10, 0x14, 0xC4, 0xC3, 0xF6, 0x7D, 0x0D, 0xB0,  // .....}..
                /* 0A18 */  0x75, 0xC4, 0x01, 0x6C, 0xDD, 0x57, 0xC0, 0xFA,  // u..l.W..
                /* 0A20 */  0xFF, 0xBF, 0xAF, 0xE0, 0xCF, 0xAB, 0xBE, 0x1F,  // ........
                /* 0A28 */  0x70, 0x29, 0xF7, 0x03, 0x0A, 0xE2, 0x7B, 0x82,  // p)....{.
                /* 0A30 */  0x6F, 0x1A, 0xBE, 0xAF, 0xC0, 0x0B, 0x76, 0x5F,  // o.....v_
                /* 0A38 */  0x01, 0x9A, 0x43, 0x32, 0x8A, 0xEF, 0x2B, 0xE0,  // ..C2..+.
                /* 0A40 */  0x1C, 0x1B, 0xBB, 0xDF, 0xB1, 0xEB, 0x0A, 0xF0,  // ........
                /* 0A48 */  0x9E, 0xC4, 0xEB, 0x0A, 0x60, 0xE3, 0xFF, 0x7F,  // ....`...
                /* 0A50 */  0x1A, 0xC0, 0x29, 0x38, 0xDF, 0xA1, 0x24, 0x41,  // ..)8..$A
                /* 0A58 */  0x48, 0xD1, 0x75, 0x05, 0xEA, 0x15, 0xE8, 0xE0,  // H.u.....
                /* 0A60 */  0xA2, 0x1F, 0x42, 0xD7, 0x17, 0x16, 0x80, 0xBE,  // ..B.....
                /* 0A68 */  0xFF, 0xFF, 0x0B, 0x0B, 0xC0, 0x38, 0xC1, 0x17,  // .....8..
                /* 0A70 */  0x16, 0x40, 0xC6, 0xFF, 0xFF, 0x34, 0x80, 0xD5,  // .@...4..
                /* 0A78 */  0x76, 0x5E, 0x43, 0xC1, 0x5A, 0xEB, 0x5B, 0x40,  // v^C.Z.[@
                /* 0A80 */  0x73, 0x3D, 0xC2, 0x77, 0x95, 0xF7, 0x75, 0x7E,  // s=.w..u~
                /* 0A88 */  0x5C, 0xC7, 0xE8, 0xBB, 0xAD, 0xA0, 0x94, 0x51,  // \......Q
                /* 0A90 */  0x48, 0xC7, 0xF1, 0x01, 0x95, 0xFC, 0x7E, 0x41,  // H.....~A
                /* 0A98 */  0x41, 0x0C, 0xE8, 0xFB, 0x2D, 0xE0, 0xEA, 0xB4,  // A...-...
                /* 0AA0 */  0x0E, 0x2C, 0xAD, 0x9C, 0xD6, 0x01, 0x0D, 0xFF,  // .,......
                /* 0AA8 */  0xFF, 0xD3, 0x3A, 0x78, 0x0E, 0x9F, 0xA5, 0x9D,  // ..:x....
                /* 0AB0 */  0xD6, 0x81, 0xFC, 0xB4, 0x7D, 0xFB, 0x00, 0xBC,  // ....}...
                /* 0AB8 */  0x84, 0xBF, 0x7C, 0xA2, 0xC5, 0x00, 0xE9, 0xF6,  // ..|.....
                /* 0AC0 */  0xC1, 0x8C, 0x1E, 0x00, 0xC8, 0xCD, 0xCB, 0x17,  // ........
                /* 0AC8 */  0x30, 0x0C, 0xC1, 0xF8, 0xD7, 0x0F, 0x54, 0x70,  // 0.....Tp
                /* 0AD0 */  0x0A, 0xC5, 0x3B, 0x3B, 0xA0, 0x02, 0x9D, 0x1D,  // ..;;....
                /* 0AD8 */  0x28, 0x88, 0x87, 0xED, 0xEB, 0x07, 0xF0, 0xFB,  // (.......
                /* 0AE0 */  0xFF, 0xDF, 0xBD, 0x00, 0xFE, 0xFF, 0xFF, 0xEF,  // ........
                /* 0AE8 */  0x5E, 0x80, 0x9F, 0x69, 0x3D, 0xAE, 0x00, 0xF6,  // ^..i=...
                /* 0AF0 */  0xAE, 0xDE, 0xB8, 0xE3, 0x0A, 0xE0, 0xE4, 0xFF,  // ........
                /* 0AF8 */  0x7F, 0x5C, 0x01, 0xF8, 0xFF, 0xFF, 0x3F, 0xAE,  // .\....?.
                /* 0B00 */  0x00, 0x5E, 0x46, 0xF5, 0xB8, 0x02, 0x98, 0x91,  // .^F.....
                /* 0B08 */  0xF5, 0x0E, 0xD0, 0x71, 0x05, 0x27, 0xF3, 0xB8,  // ...q.'..
                /* 0B10 */  0xA0, 0xE3, 0x0A, 0x9B, 0x58, 0xCC, 0x57, 0x4F,  // ....X.WO
                /* 0B18 */  0x18, 0x67, 0x07, 0x1F, 0x1C, 0x0C, 0x61, 0x49,  // .g....aI
                /* 0B20 */  0x14, 0x3A, 0x37, 0xC2, 0x57, 0x72, 0x6E, 0x04,  // .:7.Wrn.
                /* 0B28 */  0xAA, 0xFF, 0xFF, 0x03, 0x04, 0xBC, 0x93, 0x06,  // ........
                /* 0B30 */  0xB9, 0x85, 0x80, 0xE6, 0xF4, 0xF0, 0xDE, 0xF8,  // ........
                /* 0B38 */  0xDC, 0x08, 0xDC, 0x21, 0x7C, 0x76, 0x00, 0xBC,  // ...!|v..
                /* 0B40 */  0x24, 0x7A, 0x1B, 0xE8, 0x12, 0x8C, 0x4B, 0x78,  // $z....Kx
                /* 0B48 */  0x72, 0x42, 0x60, 0x1C, 0x96, 0x67, 0x13, 0xA5,  // rB`..g..
                /* 0B50 */  0xF9, 0x71, 0xD0, 0x54, 0x70, 0x3A, 0x38, 0xF1,  // .q.Tp:8.
                /* 0B58 */  0x3C, 0x30, 0x52, 0x4D, 0xA2, 0xA3, 0x03, 0xD7,  // <0RM....
                /* 0B60 */  0x79, 0x7E, 0xA2, 0x20, 0x3E, 0x30, 0xF8, 0xE0,  // y~. >0..
                /* 0B68 */  0x04, 0x3C, 0xFE, 0xFF, 0x07, 0x27, 0x80, 0x11,  // .<...'..
                /* 0B70 */  0x73, 0x83, 0x73, 0x21, 0xC1, 0xCC, 0x0D, 0xF8,  // s.s!....
                /* 0B78 */  0x9D, 0x17, 0x7C, 0xC7, 0x02, 0xAE, 0xFF, 0xFF,  // ..|.....
                /* 0B80 */  0x3B, 0x16, 0x60, 0x09, 0xCA, 0x77, 0x2C, 0xC0,  // ;.`..w,.
                /* 0B88 */  0xDD, 0x3D, 0xC5, 0x17, 0x1B, 0xC0, 0xCA, 0xFF,  // .=......
                /* 0B90 */  0xFF, 0x56, 0xA9, 0x1B, 0x26, 0x8A, 0xC3, 0x72,  // .V..&..r
                /* 0B98 */  0x2E, 0x36, 0x88, 0xF3, 0xA5, 0xA1, 0x43, 0xC4,  // .6....C.
                /* 0BA0 */  0xAD, 0x1D, 0x43, 0x47, 0x1B, 0xCC, 0x15, 0x13,  // ..CG....
                /* 0BA8 */  0xE0, 0xF2, 0xFF, 0xFF, 0x8A, 0x09, 0x30, 0x4C,  // ......0L
                /* 0BB0 */  0xF3, 0x79, 0x05, 0x50, 0xA3, 0xD4, 0xC2, 0xFF,  // .y.P....
                /* 0BB8 */  0xFF, 0x8A, 0x89, 0x55, 0xFE, 0x48, 0xD0, 0x79,  // ...U.H.y
                /* 0BC0 */  0x85, 0xCD, 0xF1, 0x2C, 0xF8, 0x71, 0x05, 0xA7,  // ...,.q..
                /* 0BC8 */  0x15, 0x50, 0xC7, 0x15, 0xAE, 0x12, 0x46, 0x5A,  // .P....FZ
                /* 0BD0 */  0x16, 0xAC, 0xF3, 0x03, 0x4F, 0x7F, 0x6A, 0xA1,  // ....O.j.
                /* 0BD8 */  0x20, 0x1E, 0xB8, 0x8F, 0x2B, 0x00, 0xB3, 0xAE,  //  ...+...
                /* 0BE0 */  0x01, 0x70, 0xE6, 0xF2, 0x0A, 0xF1, 0xE4, 0xE0,  // .p......
                /* 0BE8 */  0xB1, 0x81, 0xEF, 0xFF, 0x7F, 0xB0, 0x03, 0x7E,  // .......~
                /* 0BF0 */  0x77, 0x40, 0x60, 0x8F, 0xE4, 0x4B, 0x10, 0xC0,  // w@`..K..
                /* 0BF8 */  0x88, 0x91, 0xF8, 0x12, 0xC4, 0xFF, 0xFF, 0x97,  // ........
                /* 0C00 */  0x20, 0xC0, 0x99, 0xE7, 0x4B, 0x10, 0xA0, 0x26,  //  ...K..&
                /* 0C08 */  0xD0, 0x61, 0x19, 0x1D, 0xF0, 0x0E, 0x88, 0x9C,  // .a......
                /* 0C10 */  0x8D, 0x0F, 0x41, 0x98, 0x50, 0x87, 0x65, 0x54,  // ..A.P.eT
                /* 0C18 */  0x1C, 0x18, 0x89, 0x3E, 0x2C, 0xA3, 0x64, 0xDE,  // ...>,.d.
                /* 0C20 */  0x81, 0x28, 0x88, 0x0F, 0xCB, 0xC0, 0xED, 0xFF,  // .(......
                /* 0C28 */  0x7F, 0x07, 0x02, 0xD8, 0x7A, 0xB0, 0x01, 0x46,  // ....z..F
                /* 0C30 */  0xFF, 0xFF, 0xBB, 0x32, 0xC0, 0x29, 0x98, 0x07,  // ...2.)..
                /* 0C38 */  0x1B, 0xC0, 0x8C, 0xD4, 0xCB, 0x22, 0xFA, 0xFF,  // ....."..
                /* 0C40 */  0x2F, 0xFD, 0xB2, 0x08, 0x05, 0x25, 0x70, 0x98,  // /....%p.
                /* 0C48 */  0x03, 0x62, 0x62, 0x2F, 0x8B, 0x28, 0x99, 0x30,  // .bb/.(.0
                /* 0C50 */  0x12, 0x73, 0x59, 0x44, 0xDD, 0x98, 0x39, 0x88,  // .sYD..9.
                /* 0C58 */  0x2F, 0x8B, 0x00, 0x6F, 0xFF, 0xFF, 0x27, 0x1B,  // /..o..'.
                /* 0C60 */  0x60, 0x74, 0x73, 0xB1, 0x92, 0xCB, 0x22, 0xC4,  // `ts...".
                /* 0C68 */  0x24, 0x97, 0x45, 0xA0, 0xA8, 0x6B, 0x6E, 0xA0,  // $.E..kn.
                /* 0C70 */  0x39, 0xBC, 0xD4, 0x76, 0x5A, 0x04, 0x08, 0xF0,  // 9..vZ...
                /* 0C78 */  0xFF, 0x3F, 0x05, 0x01, 0x9E, 0xA0, 0x9E, 0x16,  // .?......
                /* 0C80 */  0x01, 0x77, 0x97, 0x20, 0xCC, 0x69, 0x11, 0xF0,  // .w. .i..
                /* 0C88 */  0xF1, 0xFF, 0x3F, 0x2D, 0x02, 0xFC, 0xFF, 0xFF,  // ..?-....
                /* 0C90 */  0x9F, 0x16, 0x01, 0x1E, 0x0D, 0xEB, 0xC1, 0x06,  // ........
                /* 0C98 */  0x30, 0xA3, 0xFB, 0xB4, 0x88, 0xCE, 0x71, 0x5A,  // 0.....qZ
                /* 0CA0 */  0x44, 0x20, 0xFC, 0xFF, 0xCF, 0x2B, 0x68, 0xEC,  // D ...+h.
                /* 0CA8 */  0xAE, 0xEF, 0x8B, 0xA8, 0x31, 0xE9, 0xB4, 0x88,  // ....1...
                /* 0CB0 */  0xD2, 0x0C, 0x23, 0x65, 0xA7, 0x45, 0x94, 0x96,  // ..#e.E..
                /* 0CB8 */  0x03, 0x0E, 0x05, 0xF1, 0x69, 0x11, 0xE0, 0xF0,  // ....i...
                /* 0CC0 */  0xFF, 0xFF, 0x64, 0x03, 0x2C, 0x52, 0x8E, 0xCD,  // ..d.,R..
                /* 0CC8 */  0x17, 0x09, 0x7A, 0x5A, 0x84, 0x31, 0x45, 0x9F,  // ..zZ.1E.
                /* 0CD0 */  0x1D, 0x3C, 0x37, 0x60, 0x70, 0x7F, 0xC1, 0x0F,  // .<7`p...
                /* 0CD8 */  0xEA, 0x05, 0xA5, 0xD8, 0x31, 0xFB, 0x1D, 0xA0,  // ....1...
                /* 0CE0 */  0x43, 0x23, 0xCC, 0xBB, 0x10, 0xC0, 0x88, 0x3B,  // C#.....;
                /* 0CE8 */  0x23, 0xE6, 0xFF, 0x7F, 0x17, 0x02, 0xAC, 0x1D,  // #.......
                /* 0CF0 */  0x6E, 0xDE, 0x85, 0x00, 0x33, 0xA1, 0xEE, 0x8C,  // n...3...
                /* 0CF8 */  0xA8, 0x03, 0x81, 0x43, 0xDE, 0x19, 0x11, 0x77,  // ...C...w
                /* 0D00 */  0x21, 0xCC, 0xB1, 0x91, 0x13, 0x38, 0xD6, 0xA5,  // !....8..
                /* 0D08 */  0x11, 0x15, 0xE8, 0xD2, 0x08, 0x84, 0xFF, 0xFF,  // ........
                /* 0D10 */  0x97, 0x46, 0x80, 0xF9, 0xD2, 0x4E, 0x36, 0xE4,  // .F...N6.
                /* 0D18 */  0xFF, 0x7F, 0x94, 0x60, 0x62, 0x4E, 0x36, 0x14,  // ...`bN6.
                /* 0D20 */  0xC4, 0x73, 0x72, 0xD0, 0x93, 0x0D, 0xD4, 0x68,  // .sr....h
                /* 0D28 */  0x97, 0x46, 0xA0, 0x2A, 0xF2, 0x64, 0x03, 0xDA,  // .F.*.d..
                /* 0D30 */  0xAB, 0xC8, 0x31, 0xD5, 0x8C, 0xA0, 0x93, 0xCD,  // ..1.....
                /* 0D38 */  0x8B, 0x7A, 0x61, 0x47, 0x1B, 0xA0, 0x7E, 0x58,  // .zaG..~X
                /* 0D40 */  0x79, 0xB4, 0x01, 0xCC, 0x68, 0xBF, 0x35, 0x92,  // y...h.5.
                /* 0D48 */  0xFF, 0x3F, 0x0C, 0x93, 0x04, 0xA1, 0x2C, 0xB7,  // .?....,.
                /* 0D50 */  0x46, 0xC8, 0x63, 0x7E, 0x59, 0x32, 0xDA, 0x7B,  // F.c~Y2.{
                /* 0D58 */  0x23, 0xC0, 0xE7, 0xFF, 0xFF, 0xBD, 0x11, 0xE0,  // #.......
                /* 0D60 */  0xFF, 0xFF, 0xFF, 0xDE, 0x08, 0x38, 0xC5, 0x7A,  // .....8.z
                /* 0D68 */  0x1B, 0x02, 0xCC, 0xDC, 0x7D, 0x7C, 0x1B, 0xE2,  // ....}|..
                /* 0D70 */  0x52, 0x20, 0xA4, 0xF4, 0xB5, 0xA0, 0x01, 0x9F,  // R ......
                /* 0D78 */  0x57, 0x9F, 0xA7, 0x46, 0xC4, 0x51, 0xC2, 0x57,  // W..F.Q.W
                /* 0D80 */  0x09, 0x5D, 0x17, 0xE9, 0xA9, 0xC1, 0xCA, 0x28,  // .].....(
                /* 0D88 */  0xA4, 0xE4, 0xF4, 0x80, 0xCA, 0x7E, 0x78, 0xA1,  // .....~x.
                /* 0D90 */  0x20, 0x06, 0xF4, 0xB1, 0xC1, 0x4A, 0xAE, 0x37,  //  ....J.7
                /* 0D98 */  0xE8, 0xE1, 0x1C, 0xCD, 0x01, 0xBD, 0x35, 0x38,  // ......58
                /* 0DA0 */  0xC9, 0x9D, 0x05, 0xF2, 0xFF, 0xFF, 0x28, 0x04,  // ......(.
                /* 0DA8 */  0x2C, 0x74, 0x9D, 0x40, 0x40, 0x73, 0x71, 0x78,  // ,t.@@sqx
                /* 0DB0 */  0x28, 0x7B, 0x03, 0x01, 0x1E, 0x72, 0x26, 0x8D,  // ({...r&.
                /* 0DB8 */  0xDA, 0xB3, 0x27, 0x6D, 0x0A, 0x4F, 0xDA, 0xE1,  // ..'m.O..
                /* 0DC0 */  0xEE, 0x3D, 0xE8, 0xDB, 0x81, 0x2F, 0x33, 0x18,  // .=.../3.
                /* 0DC8 */  0x82, 0x61, 0xAE, 0x20, 0x40, 0xF3, 0x96, 0x04,  // .a. @...
                /* 0DD0 */  0xBE, 0xCB, 0x07, 0x30, 0xFE, 0xFF, 0x5F, 0x3E,  // ...0.._>
                /* 0DD8 */  0xD8, 0x10, 0x7D, 0xF9, 0x00, 0xBC, 0xC4, 0x7D,  // ..}....}
                /* 0DE0 */  0x24, 0xE8, 0xF2, 0x81, 0x8B, 0xFF, 0x0A, 0xD0,  // $.......
                /* 0DE8 */  0xE5, 0x83, 0xDD, 0xEB, 0x30, 0xE3, 0x77, 0xE8,  // ....0.w.
                /* 0DF0 */  0x13, 0x03, 0x85, 0x70, 0x5C, 0x0A, 0x85, 0x3D,  // ...p\..=
                /* 0DF8 */  0x38, 0xA0, 0xE2, 0xC1, 0x51, 0x10, 0x0F, 0xDA,  // 8...Q...
                /* 0E00 */  0xF1, 0x2E, 0x1F, 0xE8, 0x91, 0xF9, 0xF2, 0x81,  // ........
                /* 0E08 */  0x21, 0x18, 0xE7, 0xE0, 0x00, 0xED, 0xF4, 0xC1,  // !.......
                /* 0E10 */  0x0E, 0x0E, 0xC0, 0xE4, 0xCE, 0x44, 0xCE, 0x1F,  // .....D..
                /* 0E18 */  0x20, 0x3B, 0x67, 0x80, 0x79, 0x7C, 0xB0, 0xFE,  //  ;g.y|..
                /* 0E20 */  0xFF, 0xE7, 0x0C, 0xC0, 0x30, 0xCA, 0x73, 0x06,  // ....0.s.
                /* 0E28 */  0x60, 0x46, 0xDB, 0x9D, 0x09, 0xAD, 0xF5, 0xCE,  // `F......
                /* 0E30 */  0x04, 0xE1, 0xB6, 0xC0, 0x14, 0xDE, 0x99, 0x50,  // .......P
                /* 0E38 */  0xDA, 0xEE, 0x4C, 0x40, 0xE6, 0xFF, 0x7F, 0x67,  // ..L@...g
                /* 0E40 */  0x02, 0x3C, 0x0A, 0x9A, 0x34, 0xEA, 0xB0, 0xE8,  // .<..4...
                /* 0E48 */  0x49, 0x1B, 0xC4, 0x93, 0xF6, 0x5D, 0x05, 0xCE,  // I....]..
                /* 0E50 */  0xE5, 0x03, 0x77, 0x57, 0x81, 0x77, 0x67, 0x02,  // ..wW.wg.
                /* 0E58 */  0x4E, 0x77, 0x15, 0xF0, 0xDD, 0x3E, 0x80, 0xDF,  // Nw...>..
                /* 0E60 */  0xFF, 0xFF, 0xF6, 0x01, 0x6F, 0x94, 0x6F, 0x1F,  // ....o.o.
                /* 0E68 */  0x80, 0x99, 0xC8, 0x97, 0x26, 0x14, 0xAC, 0x25,  // ....&..%
                /* 0E70 */  0xDC, 0x3E, 0x10, 0x97, 0x26, 0xCC, 0x01, 0x80,  // .>..&...
                /* 0E78 */  0xC7, 0xBE, 0x35, 0xA1, 0x02, 0x53, 0xE8, 0xDA,  // ..5..S..
                /* 0E80 */  0xE4, 0xA3, 0x03, 0x0F, 0x08, 0x47, 0x41, 0x7C,  // .....GA|
                /* 0E88 */  0x6B, 0x02, 0xFC, 0x9D, 0x34, 0xC0, 0xFB, 0xFF,  // k...4...
                /* 0E90 */  0xBF, 0x35, 0x01, 0xA7, 0x93, 0x06, 0xE0, 0xC9,  // .5......
                /* 0E98 */  0xF8, 0xB5, 0x09, 0x90, 0x77, 0x12, 0x66, 0xD7,  // ....w.f.
                /* 0EA0 */  0x26, 0xF0, 0xFF, 0xFF, 0xAF, 0x4D, 0x00, 0x03,  // &....M..
                /* 0EA8 */  0x9C, 0x5C, 0x9B, 0x00, 0x5D, 0xC7, 0x05, 0x76,  // .\..]..v
                /* 0EB0 */  0xFB, 0x00, 0x1E, 0xFF, 0xFF, 0xDB, 0x07, 0x18,  // ........
                /* 0EB8 */  0x87, 0xF9, 0xDA, 0x04, 0xD8, 0x3B, 0x00, 0xF0,  // .....;..
                /* 0EC0 */  0x6B, 0x13, 0xE0, 0xFA, 0xA4, 0x01, 0xF3, 0xFF,  // k.......
                /* 0EC8 */  0x7F, 0x6D, 0x02, 0xAC, 0x9C, 0x34, 0x80, 0xFF,  // .m...4..
                /* 0ED0 */  0x38, 0x9F, 0x34, 0x00, 0x33, 0x02, 0x4F, 0x1A,  // 8.4.3.O.
                /* 0ED8 */  0xA8, 0x43, 0x80, 0x05, 0x1F, 0xBA, 0xC9, 0x15,  // .C......
                /* 0EE0 */  0xC0, 0x1E, 0x87, 0x48, 0x60, 0x82, 0x07, 0x8E,  // ...H`...
                /* 0EE8 */  0x72, 0x96, 0xC7, 0x69, 0xF0, 0x0A, 0xA7, 0xA4,  // r..i....
                /* 0EF0 */  0x31, 0x04, 0x3A, 0xEF, 0x83, 0x8A, 0xF0, 0x7E,  // 1.:....~
                /* 0EF8 */  0x62, 0x70, 0x9D, 0x37, 0x10, 0xFF, 0x7F, 0x82,  // bp.7....
                /* 0F00 */  0x92, 0x28, 0x74, 0xF2, 0x81, 0x6F, 0xE5, 0xE4,  // .(t..o..
                /* 0F08 */  0x03, 0x28, 0x38, 0x6F, 0x80, 0xEB, 0xBA, 0x51,  // .(8o...Q
                /* 0F10 */  0xDA, 0x01, 0x02, 0xC8, 0x8B, 0x3F, 0x40, 0x00,  // .....?@.
                /* 0F18 */  0x6A, 0x54, 0x2E, 0x51, 0xD7, 0x38, 0xCC, 0xFF,  // jT.Q.8..
                /* 0F20 */  0x9F, 0xA0, 0xEA, 0xF7, 0x81, 0x0E, 0x10, 0xEC,  // ........
                /* 0F28 */  0x1A, 0xC7, 0xEF, 0xE6, 0xBE, 0xCC, 0x09, 0x4C,  // .......L
                /* 0F30 */  0xD7, 0x38, 0xAE, 0x12, 0x46, 0xAA, 0x96, 0xAB,  // .8..F...
                /* 0F38 */  0x93, 0x03, 0xD7, 0x01, 0x23, 0x38, 0x83, 0x78,  // ....#8.x
                /* 0F40 */  0xD8, 0x8E, 0x75, 0xAA, 0x47, 0x8F, 0xC9, 0x8A,  // ..u.G...
                /* 0F48 */  0xEF, 0x04, 0x3A, 0x82, 0x38, 0xC8, 0x31, 0x0E,  // ..:.8.1.
                /* 0F50 */  0x28, 0x1E, 0xE9, 0xC1, 0x95, 0x6D, 0x6C, 0xE8,  // (....ml.
                /* 0F58 */  0x63, 0x92, 0x35, 0x23, 0x0A, 0xF0, 0x68, 0xCE,  // c.5#..h.
                /* 0F60 */  0x05, 0x33, 0x3B, 0xE0, 0x77, 0xFF, 0x07, 0x5F,  // .3;.w.._
                /* 0F68 */  0xB2, 0xD9, 0xA1, 0x75, 0xDC, 0x48, 0xC8, 0x68,  // ...u.H.h
                /* 0F70 */  0x6A, 0x87, 0xD4, 0x6C, 0x1E, 0x19, 0x3C, 0x39,  // j..l..<9
                /* 0F78 */  0xB0, 0xFE, 0xFF, 0x27, 0x07, 0xA6, 0x23, 0x83,  // ...'..#.
                /* 0F80 */  0x27, 0x07, 0xAE, 0x68, 0xA7, 0x2F, 0xF4, 0xE4,  // '..h./..
                /* 0F88 */  0x3C, 0x91, 0x57, 0x81, 0x08, 0xEF, 0x34, 0xBE,  // <.W...4.
                /* 0F90 */  0x4C, 0x02, 0x47, 0x24, 0x5F, 0x26, 0x81, 0xB3,  // L.G$_&..
                /* 0F98 */  0x9C, 0x3B, 0x10, 0xEA, 0xA9, 0xE0, 0xB3, 0x82,  // .;......
                /* 0FA0 */  0x29, 0x7C, 0x01, 0x70, 0xB8, 0x23, 0x02, 0xFA,  // )|.p.#..
                /* 0FA8 */  0x0E, 0x84, 0x0F, 0x73, 0x07, 0x02, 0x9A, 0x23,  // ...s...#
                /* 0FB0 */  0xF1, 0x10, 0xFC, 0xFF, 0xBF, 0x23, 0x80, 0xE7,  // .....#..
                /* 0FB8 */  0x0A, 0x04, 0xBC, 0xCD, 0x5F, 0x81, 0x00, 0x35,  // ...._..5
                /* 0FC0 */  0x42, 0xAE, 0x40, 0x68, 0x61, 0x57, 0x20, 0xC4,  // B.@haW .
                /* 0FC8 */  0x5D, 0x12, 0x33, 0x7E, 0xCB, 0xB9, 0x02, 0x51,  // ].3~...Q
                /* 0FD0 */  0x08, 0x0B, 0x81, 0x91, 0x0C, 0x08, 0x1D, 0x1C,  // ........
                /* 0FD8 */  0x78, 0xF0, 0x2B, 0x10, 0x05, 0xF1, 0xF5, 0xC2,  // x.+.....
                /* 0FE0 */  0xB7, 0x0F, 0x5F, 0x81, 0xE0, 0x9D, 0x1B, 0xE0,  // .._.....
                /* 0FE8 */  0x5D, 0x0D, 0xC1, 0xFD, 0xFF, 0xBF, 0x8A, 0xC1,  // ].......
                /* 0FF0 */  0x3B, 0x37, 0x80, 0x2B, 0xE0, 0xE8, 0xD0, 0x63,  // ;7.+...c
                /* 0FF8 */  0xF6, 0x25, 0x08, 0xC6, 0x00, 0x81, 0xE9, 0x39,  // .%.....9
                /* 1000 */  0x08, 0x7C, 0x17, 0x3D, 0x0F, 0x10, 0x07, 0xEC,  // .|.=....
                /* 1008 */  0x73, 0x10, 0x76, 0x7C, 0xC0, 0xF4, 0x26, 0x04,  // s.v|..&.
                /* 1010 */  0xBE, 0xF3, 0x80, 0x6F, 0x42, 0x38, 0x60, 0xDF,  // ...oB8`.
                /* 1018 */  0x84, 0xB0, 0x17, 0x55, 0xD8, 0xFF, 0xFF, 0xF1,  // ...U....
                /* 1020 */  0x01, 0x17, 0x28, 0xDF, 0x6B, 0xC1, 0x77, 0xE8,  // ..(.k.w.
                /* 1028 */  0x01, 0xEF, 0xF8, 0x80, 0xCF, 0xA1, 0x07, 0xF0,  // ........
                /* 1030 */  0xA4, 0xFE, 0xD0, 0x03, 0x74, 0xFE, 0xFF, 0x87,  // ....t...
                /* 1038 */  0x1E, 0xE0, 0xA2, 0xF3, 0xD0, 0x83, 0xD6, 0x7D,  // .......}
                /* 1040 */  0x8D, 0x84, 0x70, 0x5B, 0x60, 0x6A, 0xAF, 0x91,  // ..p[`j..
                /* 1048 */  0x28, 0x9D, 0xD7, 0x48, 0x80, 0x7E, 0xFF, 0xFF,  // (..H.~..
                /* 1050 */  0x6B, 0x24, 0xC0, 0xD6, 0xA3, 0x39, 0xFC, 0x59,  // k$...9.Y
                /* 1058 */  0xE3, 0x8E, 0xE6, 0x60, 0xF9, 0xFF, 0x5F, 0x23,  // ...`.._#
                /* 1060 */  0x81, 0xD5, 0x8D, 0x09, 0x7C, 0x77, 0x20, 0xE0,  // ....|w .
                /* 1068 */  0xED, 0xFE, 0x0E, 0x04, 0xA8, 0x11, 0x73, 0x07,  // ......s.
                /* 1070 */  0x42, 0xC1, 0x5A, 0xDC, 0x3D, 0x12, 0xCA, 0x01,  // B.Z.=...
                /* 1078 */  0x80, 0x0B, 0xBA, 0x48, 0xA2, 0xA4, 0xC0, 0xE8,  // ...H....
                /* 1080 */  0x26, 0xE9, 0xA3, 0x03, 0x8F, 0x7E, 0x09, 0xA2,  // &....~..
                /* 1088 */  0x20, 0xBE, 0x48, 0xC2, 0xF8, 0xFF, 0x5F, 0x24,  //  .H..._$
                /* 1090 */  0x01, 0xFE, 0xFF, 0xFF, 0x2F, 0x92, 0x80, 0xE1,  // ..../...
                /* 1098 */  0x63, 0x0F, 0x78, 0x2F, 0x92, 0xC0, 0xE9, 0xD8,  // c.x/....
                /* 10A0 */  0x03, 0x18, 0xF9, 0xFF, 0x1F, 0x7B, 0x60, 0xC9,  // .....{`.
                /* 10A8 */  0xBF, 0x49, 0x02, 0xF2, 0x9C, 0x09, 0x50, 0x76,  // .I....Pv
                /* 10B0 */  0x93, 0x04, 0x88, 0xF2, 0xFF, 0xBF, 0x49, 0x02,  // ......I.
                /* 10B8 */  0xFC, 0xFF, 0xFF, 0xDF, 0x24, 0xC1, 0xE9, 0xE4,  // ....$...
                /* 10C0 */  0x26, 0x09, 0xE8, 0x3A, 0xB4, 0xB0, 0x3B, 0x10,  // &..:..;.
                /* 10C8 */  0x30, 0xB7, 0x7F, 0x07, 0x02, 0xD4, 0xFC, 0xFF,  // 0.......
                /* 10D0 */  0x6F, 0x92, 0xE0, 0x38, 0x00, 0xF0, 0x9B, 0x24,  // o..8...$
                /* 10D8 */  0xC0, 0xE9, 0xFF, 0xFF, 0x4D, 0x12, 0xE0, 0xD2,  // ....M...
                /* 10E0 */  0xB1, 0x07, 0x9C, 0x37, 0x49, 0xE0, 0x7E, 0x4C,  // ...7I.~L
                /* 10E8 */  0xF1, 0xFF, 0xFF, 0xD8, 0x03, 0xDC, 0xF5, 0xDF,  // ........
                /* 10F0 */  0x24, 0x01, 0x79, 0xC7, 0x85, 0xD2, 0x6E, 0x92,  // $.y...n.
                /* 10F8 */  0x80, 0xC2, 0xFF, 0xFF, 0x4D, 0x12, 0xE0, 0xFF,  // ....M...
                /* 1100 */  0xFF, 0xFF, 0x26, 0x09, 0x98, 0xB1, 0x72, 0x93,  // ..&...r.
                /* 1108 */  0x04, 0x74, 0x1D, 0x5A, 0xD8, 0x1D, 0x08, 0x98,  // .t.Z....
                /* 1110 */  0xFB, 0xBF, 0x03, 0x81, 0xF4, 0xFF, 0x7F, 0x93,  // ........
                /* 1118 */  0x04, 0x4C, 0x1C, 0x00, 0xF8, 0x4D, 0x12, 0x60,  // .L...M.`
                /* 1120 */  0xDB, 0xFF, 0xFF, 0x26, 0x09, 0x30, 0xF6, 0xD8,  // ...&.0..
                /* 1128 */  0x03, 0xCE, 0xF1, 0xC1, 0xFC, 0xFF, 0x1F, 0x7B,  // .......{
                /* 1130 */  0x00, 0xC3, 0x01, 0x8E, 0x3D, 0x80, 0x9A, 0x6C,  // ....=..l
                /* 1138 */  0x2F, 0x1C, 0x1D, 0x7B, 0xF8, 0x59, 0xC0, 0x59,  // /..{.Y.Y
                /* 1140 */  0x97, 0xA9, 0x9B, 0x24, 0x0C, 0x85, 0x03, 0x21,  // ...$...!
                /* 1148 */  0xA7, 0x1C, 0xA7, 0x03, 0xD4, 0x5D, 0x92, 0xE7,  // .....]..
                /* 1150 */  0x82, 0x51, 0x8A, 0x73, 0x0F, 0xEA, 0x62, 0x69,  // .Q.s..bi
                /* 1158 */  0x38, 0x83, 0xD8, 0xC3, 0x5D, 0x12, 0x44, 0xFF,  // 8...].D.
                /* 1160 */  0xFF, 0xBB, 0x24, 0xC0, 0xFF, 0xFF, 0xFF, 0x5D,  // ..$....]
                /* 1168 */  0x12, 0x30, 0x14, 0xEC, 0x26, 0x80, 0x3E, 0x8D,  // .0..&.>.
                /* 1170 */  0x78, 0x32, 0x2F, 0x3B, 0x1E, 0xCD, 0xC9, 0xF9,  // x2/;....
                /* 1178 */  0x24, 0x00, 0xFC, 0xC6, 0xE1, 0x93, 0x00, 0xB8,  // $.......
                /* 1180 */  0x06, 0x07, 0xE7, 0xE4, 0x12, 0xF0, 0xB5, 0xE1,  // ........
                /* 1188 */  0xB1, 0xC6, 0x83, 0x03, 0x86, 0xE7, 0x1E, 0x3E,  // .......>
                /* 1190 */  0x38, 0xB0, 0xFC, 0xFF, 0xEF, 0xA8, 0x80, 0xEB,  // 8.......
                /* 1198 */  0x91, 0xFB, 0x76, 0x05, 0x78, 0x2A, 0x70, 0xBB,  // ..v.x*p.
                /* 11A0 */  0x02, 0x9A, 0xFF, 0xFF, 0xDB, 0x15, 0x38, 0x83,  // ......8.
                /* 11A8 */  0xDC, 0xAE, 0x50, 0x1C, 0x0E, 0x76, 0xBB, 0x42,  // ..P..v.B
                /* 11B0 */  0xDC, 0x51, 0xB1, 0xC7, 0x2B, 0x0C, 0xB4, 0xAE,  // .Q..+...
                /* 11B8 */  0x57, 0x14, 0xC2, 0x11, 0x60, 0x14, 0x00, 0x42,  // W...`..B
                /* 11C0 */  0x87, 0x07, 0x2E, 0x19, 0x8E, 0x82, 0x78, 0x44,  // ......xD
                /* 11C8 */  0xBE, 0xA5, 0x02, 0x5C, 0xFB, 0xFF, 0xDF, 0x52,  // ...\...R
                /* 11D0 */  0x01, 0x0E, 0x86, 0xBB, 0x68, 0x41, 0x3F, 0x0E,  // ....hA?.
                /* 11D8 */  0x00, 0xB7, 0xFF, 0xFF, 0x2D, 0x15, 0x7F, 0x1C,  // ....-...
                /* 11E0 */  0x00, 0xD7, 0xF0, 0xE0, 0x5C, 0xB5, 0x70, 0xC3,  // ....\.p.
                /* 11E8 */  0x03, 0x9E, 0x97, 0x2D, 0xF0, 0xDD, 0x80, 0x01,  // ...-....
                /* 11F0 */  0x0F, 0x87, 0x2A, 0xC0, 0xC1, 0xFF, 0xFF, 0x50,  // ..*....P
                /* 11F8 */  0x05, 0x9E, 0x04, 0x87, 0x2A, 0x40, 0x8D, 0xB2,  // ....*@..
                /* 1200 */  0x05, 0xEA, 0x50, 0xC5, 0x8F, 0x43, 0x56, 0xFA,  // ..P..CV.
                /* 1208 */  0x80, 0xD1, 0x70, 0x0D, 0xF1, 0x06, 0xCC, 0x6F,  // ..p....o
                /* 1210 */  0x0B, 0xBE, 0xEA, 0x09, 0x4C, 0xF7, 0x5F, 0xAE,  // ....L._.
                /* 1218 */  0x8C, 0x42, 0x4A, 0x4E, 0x77, 0xA8, 0xEC, 0xA7,  // .BJNw...
                /* 1220 */  0x1F, 0x0A, 0x62, 0x40, 0xDF, 0x10, 0x7D, 0x72,  // ..b@..}r
                /* 1228 */  0xC0, 0xA9, 0x00, 0xD1, 0x14, 0x8C, 0x70, 0x42,  // ......pB
                /* 1230 */  0x6F, 0x9E, 0xC0, 0x90, 0xC0, 0x37, 0x4F, 0xF0,  // o....7O.
                /* 1238 */  0x5C, 0x1B, 0xD8, 0x0D, 0x11, 0xBC, 0xFF, 0xFF,  // \.......
                /* 1240 */  0x1B, 0x22, 0x56, 0xCE, 0xA4, 0x51, 0x7B, 0xF6,  // ."V..Q{.
                /* 1248 */  0xA4, 0x4D, 0xE1, 0x49, 0xFB, 0xAE, 0x02, 0xE7,  // .M.I....
                /* 1250 */  0xF6, 0x81, 0xBB, 0xAB, 0xC0, 0xBB, 0x21, 0x02,  // ......!.
                /* 1258 */  0x9F, 0x6B, 0x16, 0xF8, 0x2E, 0x1F, 0xC0, 0x3B,  // .k.....;
                /* 1260 */  0xC6, 0xE5, 0x03, 0x50, 0x13, 0xF7, 0x91, 0xA0,  // ...P....
                /* 1268 */  0xCB, 0x07, 0xFB, 0xFF, 0x5F, 0x3E, 0x58, 0xFC,  // ...._>X.
                /* 1270 */  0x57, 0x80, 0x2E, 0x1F, 0xEC, 0x82, 0x88, 0x19,  // W.......
                /* 1278 */  0xBF, 0x43, 0x9F, 0x18, 0x28, 0x84, 0xE3, 0x52,  // .C..(..R
                /* 1280 */  0x28, 0xEC, 0xC1, 0x01, 0x15, 0x0F, 0x8E, 0x82,  // (.......
                /* 1288 */  0x78, 0xD0, 0xBE, 0x05, 0xC1, 0xB9, 0x7C, 0x60,  // x.....|`
                /* 1290 */  0x6E, 0x41, 0xC0, 0x94, 0xC0, 0xB7, 0x20, 0xF0,  // nA.... .
                /* 1298 */  0x9D, 0x33, 0xC0, 0x7B, 0x3B, 0x04, 0xFE, 0xE7,  // .3.{;...
                /* 12A0 */  0x0C, 0x60, 0xF0, 0xFF, 0x3F, 0x67, 0x80, 0xB5,  // .`..?g..
                /* 12A8 */  0xC6, 0x39, 0x03, 0x50, 0xA3, 0xED, 0xCE, 0x84,  // .9.P....
                /* 12B0 */  0xD6, 0x7A, 0x67, 0x82, 0x70, 0x1C, 0x64, 0x0A,  // .zg.p.d.
                /* 12B8 */  0xEF, 0x4C, 0x28, 0x6D, 0x77, 0x26, 0x40, 0xFC,  // .L(mw&@.
                /* 12C0 */  0xFF, 0xFF, 0x94, 0x0E, 0xEE, 0xD3, 0x28, 0xEE,  // ......(.
                /* 12C8 */  0x94, 0x0E, 0xBC, 0x47, 0xE5, 0xC3, 0x28, 0xF8,  // ...G..(.
                /* 12D0 */  0x6E, 0x1F, 0xC0, 0x3B, 0xC7, 0xED, 0x03, 0x50,  // n..;...P
                /* 12D8 */  0xF2, 0xFF, 0x3F, 0x08, 0xF0, 0xC8, 0x97, 0x26,  // ..?....&
                /* 12E0 */  0x14, 0xAC, 0x25, 0xDC, 0x3E, 0x10, 0x97, 0x26,  // ..%.>..&
                /* 12E8 */  0xCC, 0x01, 0x80, 0xC7, 0xBE, 0x35, 0xA1, 0x02,  // .....5..
                /* 12F0 */  0x53, 0xE8, 0xDA, 0xE4, 0xA3, 0x03, 0x0F, 0x08,  // S.......
                /* 12F8 */  0x47, 0x41, 0x7C, 0x6B, 0x02, 0xFC, 0x9D, 0x34,  // GA|k...4
                /* 1300 */  0xC0, 0x7B, 0x6B, 0x02, 0x4E, 0x27, 0x0D, 0xE0,  // .{k.N'..
                /* 1308 */  0xF5, 0xFF, 0x3F, 0x69, 0x00, 0x9F, 0x1E, 0xD7,  // ..?i....
                /* 1310 */  0x26, 0x40, 0x9E, 0xB3, 0x63, 0xEB, 0x6B, 0x13,  // &@..c.k.
                /* 1318 */  0xA0, 0xFB, 0xFF, 0x7F, 0x6D, 0x02, 0x56, 0x4E,  // ....m.VN
                /* 1320 */  0xAE, 0x4D, 0x80, 0xAE, 0xE3, 0x02, 0xBB, 0x7D,  // .M.....}
                /* 1328 */  0x00, 0xF3, 0x20, 0xB7, 0x0F, 0x20, 0xFE, 0xFF,  // .. .. ..
                /* 1330 */  0xBF, 0x36, 0x01, 0x8B, 0x03, 0x00, 0xBF, 0x36,  // .6.....6
                /* 1338 */  0x01, 0xAE, 0x4F, 0x1A, 0xE0, 0xBC, 0x36, 0x01,  // ..O...6.
                /* 1340 */  0xF7, 0x93, 0x06, 0xAC, 0xFF, 0xFF, 0x49, 0x03,  // ......I.
                /* 1348 */  0x98, 0x16, 0xB9, 0x36, 0x01, 0xF2, 0xAE, 0x0B,  // ...6....
                /* 1350 */  0xEC, 0xDA, 0x04, 0x18, 0xFD, 0xFF, 0x5F, 0x9B,  // ......_.
                /* 1358 */  0x80, 0xEF, 0x65, 0x05, 0x7F, 0x6D, 0x02, 0xFC,  // ..e..m..
                /* 1360 */  0x5C, 0x56, 0xF8, 0xED, 0x03, 0x78, 0x1F, 0x1D,  // \V...x..
                /* 1368 */  0x7C, 0xFB, 0x00, 0x6E, 0xFF, 0xFF, 0x6B, 0x13,  // |..n..k.
                /* 1370 */  0xF0, 0x3B, 0x00, 0xF0, 0x6B, 0x13, 0xE0, 0xFA,  // .;..k...
                /* 1378 */  0xA4, 0x01, 0xCE, 0x6B, 0x13, 0xF0, 0xFE, 0xFF,  // ...k....
                /* 1380 */  0x9F, 0x34, 0x00, 0x07, 0x4D, 0x4E, 0x1A, 0x80,  // .4..MN..
                /* 1388 */  0x9A, 0x3C, 0x6F, 0x03, 0x9D, 0x34, 0xF8, 0x59,  // .<o..4.Y
                /* 1390 */  0xC0, 0xF9, 0x16, 0xA9, 0x6B, 0x13, 0x0C, 0x85,  // ....k...
                /* 1398 */  0x03, 0x21, 0x23, 0x48, 0x30, 0x11, 0xA0, 0x2E,  // .!#H0...
                /* 13A0 */  0x4E, 0x3C, 0x0B, 0x8C, 0x94, 0x93, 0xE8, 0xA8,  // N<......
                /* 13A8 */  0xC1, 0x6F, 0x51, 0x86, 0x33, 0x88, 0x4F, 0x0C,  // .oQ.3.O.
                /* 13B0 */  0xBE, 0x38, 0x01, 0x0E, 0xFE, 0xFF, 0x17, 0x07,  // .8......
                /* 13B8 */  0x70, 0x0D, 0xCE, 0x46, 0xCE, 0x19, 0xE8, 0xC9,  // p..F....
                /* 13C0 */  0xBC, 0x66, 0x78, 0x34, 0x0F, 0x46, 0xBE, 0x61,  // .fx4.F.a
                /* 13C8 */  0x7A, 0x72, 0xC0, 0x6D, 0xFC, 0x3E, 0x1F, 0xE0,  // zr.m.>..
                /* 13D0 */  0x26, 0x07, 0x57, 0xDC, 0xE0, 0xA0, 0x9D, 0x19,  // &.W.....
                /* 13D8 */  0x02, 0x3E, 0x08, 0x3C, 0x50, 0x78, 0x70, 0xC0,  // .>.<Pxp.
                /* 13E0 */  0xF0, 0xC4, 0xE0, 0xC1, 0x81, 0xEB, 0x42, 0x06,  // ......B.
                /* 13E8 */  0x9C, 0xFF, 0xFF, 0x17, 0x32, 0x60, 0x0D, 0xE5,  // ....2`..
                /* 13F0 */  0x7B, 0x0D, 0xE0, 0x29, 0xCA, 0xBD, 0x06, 0x50,  // {..)...P
                /* 13F8 */  0x23, 0xF7, 0x5E, 0x83, 0xE2, 0xB0, 0xFC, 0x7B,  // #.^....{
                /* 1400 */  0x0D, 0xE2, 0x42, 0x86, 0x3D, 0xD8, 0x60, 0xA0,  // ..B.=.`.
                /* 1408 */  0x75, 0xB1, 0xA1, 0x10, 0x16, 0xEA, 0xE0, 0xFF,  // u.......
                /* 1410 */  0x0F, 0x51, 0x26, 0x84, 0x0E, 0x0F, 0x5C, 0x18,  // .Q&...\.
                /* 1418 */  0x1C, 0x05, 0xF1, 0xC8, 0x7D, 0x25, 0x03, 0xDC,  // ....}%..
                /* 1420 */  0x85, 0xBB, 0xDB, 0x40, 0x0F, 0x73, 0x25, 0x03,  // ...@.s%.
                /* 1428 */  0xAA, 0x37, 0x16, 0x70, 0x0D, 0x0F, 0xCE, 0xED,  // .7.p....
                /* 1430 */  0x06, 0x37, 0x3C, 0x60, 0xF3, 0xFF, 0x1F, 0x1E,  // .7<`....
                /* 1438 */  0xCC, 0xFB, 0x0D, 0xF8, 0xAE, 0x7B, 0x80, 0x87,  // .....{..
                /* 1440 */  0x73, 0x0C, 0xE0, 0xAA, 0xCA, 0x39, 0x06, 0x10,  // s....9..
                /* 1448 */  0xF0, 0xFF, 0x3F, 0x08, 0xC0, 0x14, 0x77, 0x4F,  // ..?...wO
                /* 1450 */  0x45, 0x89, 0x82, 0x90, 0xD8, 0x27, 0x86, 0x8E,  // E....'..
                /* 1458 */  0x30, 0x27, 0xDB, 0xE7, 0x80, 0x05, 0x7E, 0xDA,  // 0'....~.
                /* 1460 */  0x87, 0xED, 0x11, 0x1F, 0x75, 0x8C, 0x33, 0xF3,  // ....u.3.
                /* 1468 */  0x88, 0xCE, 0xB9, 0xF6, 0xC1, 0xD1, 0x03, 0x81,  // ........
                /* 1470 */  0xEE, 0xAA, 0x28, 0x49, 0x14, 0x3A, 0x55, 0xC1,  // ..(I.:U.
                /* 1478 */  0x77, 0x72, 0x7C, 0x40, 0x4F, 0xE1, 0x2C, 0x4F,  // wr|@O.,O
                /* 1480 */  0xF8, 0xCD, 0xE0, 0xF0, 0x7C, 0xAA, 0x02, 0x9E,  // ....|...
                /* 1488 */  0x27, 0x19, 0x70, 0x39, 0x13, 0xA0, 0xEC, 0xF8,  // '.p9....
                /* 1490 */  0x00, 0xE4, 0xF3, 0x1D, 0x1F, 0x80, 0xC8, 0xFF,  // ........
                /* 1498 */  0xFF, 0xF8, 0x00, 0x8C, 0x44, 0xDD, 0x9A, 0xD1,  // ....D...
                /* 14A0 */  0x22, 0x8F, 0x0A, 0xBA, 0x3C, 0x58, 0xA5, 0x00,  // "...<X..
                /* 14A8 */  0x8F, 0x43, 0x24, 0xD3, 0x7D, 0x69, 0xB1, 0xE7,  // .C$.}i..
                /* 14B0 */  0x71, 0x90, 0xA3, 0x03, 0xF8, 0x94, 0x1C, 0x1D,  // q.......
                /* 14B8 */  0x00, 0x5D, 0xC6, 0x2E, 0x32, 0x3A, 0x3A, 0x00,  // .]..2::.
                /* 14C0 */  0xF7, 0xB8, 0x47, 0x07, 0x10, 0xFC, 0xFF, 0x8F,  // ..G.....
                /* 14C8 */  0x0E, 0xC0, 0x5C, 0xD2, 0xD1, 0x01, 0x2D, 0xF1,  // ..\...-.
                /* 14D0 */  0xE8, 0x80, 0x16, 0x39, 0x0F, 0xCD, 0x90, 0x0D,  // ...9....
                /* 14D8 */  0x43, 0x47, 0x07, 0xD4, 0xC9, 0xC1, 0x72, 0x8E,  // CG....r.
                /* 14E0 */  0x0E, 0x28, 0x2A, 0x83, 0x99, 0xC2, 0x47, 0x07,  // .(*...G.
                /* 14E8 */  0x1F, 0xC0, 0xE0, 0x1C, 0x1D, 0x70, 0x07, 0x30,  // .....p.0
                /* 14F0 */  0x78, 0x47, 0x07, 0xE0, 0x74, 0x00, 0x03, 0xD7,  // xG..t...
                /* 14F8 */  0xC9, 0x01, 0x58, 0xFF, 0xFF, 0x09, 0xD6, 0x3D,  // ..X....=
                /* 1500 */  0x39, 0x00, 0x6A, 0x04, 0x9D, 0x1C, 0x50, 0x52,  // 9.j...PR
                /* 1508 */  0x46, 0xEE, 0x93, 0x82, 0x66, 0xEB, 0x23, 0x55,  // F...f.#U
                /* 1510 */  0x8C, 0x90, 0x67, 0x53, 0xF1, 0xC8, 0xC8, 0xC1,  // ..gS....
                /* 1518 */  0x01, 0x58, 0x9E, 0x32, 0x81, 0xD3, 0xC1, 0x01,  // .X.2....
                /* 1520 */  0x30, 0xF0, 0xFF, 0x3F, 0x38, 0x80, 0x21, 0xF3,  // 0..?8.!.
                /* 1528 */  0x09, 0x06, 0xD0, 0x75, 0x70, 0x60, 0x27, 0x18,  // ...up`'.
                /* 1530 */  0x36, 0xC7, 0x43, 0xF4, 0x34, 0x7C, 0x82, 0x01,  // 6.C.4|..
                /* 1538 */  0x78, 0xF1, 0xFF, 0x3F, 0x39, 0x00, 0x8B, 0xCE,  // x..?9...
                /* 1540 */  0x27, 0x07, 0x40, 0xDA, 0xF5, 0xD2, 0x27, 0x07,  // '.@...'.
                /* 1548 */  0x60, 0x7C, 0x84, 0x01, 0x6C, 0xFC, 0xFF, 0x4F,  // `|..l..O
                /* 1550 */  0x0E, 0xC0, 0x34, 0xF4, 0x11, 0x06, 0x50, 0x77,  // ..4...Pw
                /* 1558 */  0xA6, 0x03, 0xCC, 0xFE, 0xFF, 0x4F, 0x0E, 0x80,  // .....O..
                /* 1560 */  0x8D, 0xD2, 0xC7, 0x5C, 0x40, 0xD3, 0x51, 0xC0,  // ...\@.Q.
                /* 1568 */  0xC7, 0x5C, 0x5B, 0x1D, 0xAC, 0xC6, 0xF8, 0x98,  // .\[.....
                /* 1570 */  0x8B, 0x83, 0x78, 0x04, 0x38, 0x81, 0x47, 0x07,  // ..x.8.G.
                /* 1578 */  0xC0, 0xD4, 0xFF, 0xFF, 0xE8, 0x00, 0x58, 0x0B,  // ......X.
                /* 1580 */  0x7E, 0x74, 0x00, 0xA4, 0x1D, 0xA6, 0xD8, 0xD1,  // ~t......
                /* 1588 */  0x01, 0x38, 0x9F, 0xA6, 0x60, 0xFE, 0xFF, 0x8F,  // .8..`...
                /* 1590 */  0x0E, 0x80, 0xDD, 0xE2, 0xA7, 0x29, 0x40, 0xD7,  // .....)@.
                /* 1598 */  0x21, 0x06, 0x77, 0x9A, 0x02, 0x96, 0xFF, 0xFF,  // !.w.....
                /* 15A0 */  0x33, 0x0C, 0xC0, 0x80, 0xE4, 0x27, 0x07, 0x40,  // 3....'.@
                /* 15A8 */  0x8D, 0xC0, 0x05, 0xEA, 0xE4, 0xC0, 0x39, 0x2C,  // ......9,
                /* 15B0 */  0xF8, 0xA1, 0x20, 0x9D, 0x93, 0xD6, 0x70, 0x9F,  // .. ...p.
                /* 15B8 */  0x1C, 0x18, 0xCA, 0x29, 0xC6, 0xF6, 0xE0, 0x22,  // ...)..."
                /* 15C0 */  0xD7, 0x0C, 0x2E, 0x68, 0x02, 0xA9, 0x43, 0x83,  // ...h..C.
                /* 15C8 */  0xCF, 0x0C, 0x96, 0x46, 0x21, 0x21, 0x67, 0x07,  // ...F!!g.
                /* 15D0 */  0x54, 0xF4, 0x13, 0x04, 0x05, 0x31, 0xA0, 0x73,  // T....1.s
                /* 15D8 */  0x09, 0xF8, 0xFF, 0x9F, 0x1D, 0xB0, 0x2A, 0x40,  // ......*@
                /* 15E0 */  0x74, 0x0D, 0x38, 0xC6, 0x08, 0xE7, 0x94, 0x60,  // t.8....`
                /* 15E8 */  0x90, 0xAB, 0x03, 0x9D, 0x99, 0x27, 0xC9, 0x35,  // .....'.5
                /* 15F0 */  0xDC, 0x61, 0x10, 0xB8, 0x55, 0x4D, 0x11, 0x44,  // .a..UM.D
                /* 15F8 */  0x6A, 0xCE, 0x04, 0xA8, 0x09, 0xF8, 0xE4, 0x80,  // j.......
                /* 1600 */  0xB9, 0x38, 0x80, 0x4B, 0xDF, 0xC5, 0x01, 0xE4,  // .8.K....
                /* 1608 */  0xE8, 0xFC, 0x00, 0xE2, 0x41, 0x73, 0x09, 0xE7,  // ....As..
                /* 1610 */  0x0F, 0x0A, 0xE2, 0x41, 0x3B, 0x1E, 0x84, 0x94,  // ...A;...
                /* 1618 */  0x9C, 0x3F, 0xA0, 0xC6, 0x39, 0x7F, 0x00, 0xCD,  // .?..9...
                /* 1620 */  0x51, 0x59, 0xD8, 0xB4, 0x41, 0x63, 0x4C, 0x80,  // QY..AcL.
                /* 1628 */  0xB6, 0xE3, 0x02, 0x9B, 0x37, 0x48, 0xFF, 0xFF,  // ....7H..
                /* 1630 */  0x07, 0x10, 0x60, 0x90, 0xFE, 0x00, 0x02, 0xA8,  // ..`.....
                /* 1638 */  0x91, 0xF2, 0x36, 0xD0, 0x99, 0x0C, 0x27, 0x62,  // ..6...'b
                /* 1640 */  0x91, 0x3A, 0x80, 0xE0, 0xB4, 0xCE, 0x57, 0x1A,  // .:....W.
                /* 1648 */  0x21, 0x04, 0xD3, 0x33, 0x24, 0x89, 0x7D, 0xFE,  // !..3$.}.
                /* 1650 */  0x40, 0x05, 0xA6, 0x50, 0xC0, 0xB3, 0x03, 0x2A,  // @..P...*
                /* 1658 */  0xD2, 0xD9, 0x81, 0x82, 0x78, 0xD8, 0x3E, 0x7F,  // ....x.>.
                /* 1660 */  0x00, 0xB6, 0x82, 0xDD, 0x9A, 0xA0, 0xDC, 0x5E,  // .......^
                /* 1668 */  0xFC, 0xFF, 0xBF, 0x6E, 0x5B, 0xFC, 0xE0, 0x80,  // ...n[...
                /* 1670 */  0xE2, 0xF4, 0x7D, 0x56, 0x01, 0xC6, 0x47, 0x2F,  // ..}V..G/
                /* 1678 */  0xF0, 0x1D, 0x1A, 0x1E, 0xBD, 0x80, 0xF1, 0x98,  // ........
                /* 1680 */  0x7C, 0xF4, 0x02, 0xCE, 0xE1, 0x8F, 0x2A, 0xE4,  // |.....*.
                /* 1688 */  0xFF, 0x7F, 0x54, 0x01, 0x53, 0xFB, 0xA3, 0x0A,  // ..T.S...
                /* 1690 */  0xD0, 0x15, 0x7B, 0x0E, 0x00, 0x0D, 0xC6, 0xEB,  // ..{.....
                /* 1698 */  0x56, 0x84, 0xD3, 0x0A, 0x75, 0xE6, 0xA7, 0x14,  // V...u...
                /* 16A0 */  0x31, 0x66, 0x98, 0x63, 0x8E, 0x15, 0x26, 0x44,  // 1f.c..&D
                /* 16A8 */  0xD8, 0x33, 0x09, 0xD3, 0x3C, 0xB6, 0x46, 0xE6,  // .3..<.F.
                /* 16B0 */  0xF9, 0xF9, 0x98, 0xA0, 0x53, 0x18, 0xEA, 0x54,  // ....S..T
                /* 16B8 */  0xE0, 0x70, 0xA7, 0x30, 0xC4, 0xC1, 0x94, 0x9D,  // .p.0....
                /* 16C0 */  0x5A, 0xF0, 0x71, 0x4E, 0x2D, 0x14, 0xC2, 0x41,  // Z.qN-..A
                /* 16C8 */  0x60, 0x14, 0x03, 0x42, 0xA7, 0x08, 0x2E, 0x1C,  // `..B....
                /* 16D0 */  0x8E, 0x82, 0xF8, 0xEC, 0xE0, 0x53, 0x04, 0x9C,  // .....S..
                /* 16D8 */  0x53, 0x0B, 0xE6, 0x60, 0x0A, 0x38, 0xF9, 0xFF,  // S..`.8..
                /* 16E0 */  0x9F, 0x22, 0xD8, 0xF0, 0xE0, 0xDC, 0x5B, 0x70,  // ."....[p
                /* 16E8 */  0xC3, 0x03, 0x9E, 0x37, 0x17, 0xF0, 0x9D, 0x50,  // ...7...P
                /* 16F0 */  0xC0, 0x3B, 0x3C, 0xE0, 0x73, 0x42, 0x01, 0xDE,  // .;<.sB..
                /* 16F8 */  0x67, 0x33, 0xF0, 0xC5, 0x3F, 0xA1, 0x40, 0xF8,  // g3..?.@.
                /* 1700 */  0xFF, 0x9F, 0xCD, 0x00, 0x13, 0xEA, 0x8E, 0x25,  // .......%
                /* 1708 */  0x68, 0xB5, 0xAF, 0x00, 0x4D, 0xB6, 0xDA, 0x43,  // h...M..C
                /* 1710 */  0x82, 0xCE, 0x66, 0xFC, 0x94, 0xE2, 0xF3, 0xB7,  // ..f.....
                /* 1718 */  0x8F, 0x25, 0x07, 0x62, 0x7D, 0x67, 0x33, 0x94,  // .%.b}g3.
                /* 1720 */  0x32, 0x0A, 0xE9, 0x38, 0x2B, 0xA1, 0x4E, 0xA9,  // 2..8+.N.
                /* 1728 */  0x86, 0x33, 0x88, 0x01, 0x1D, 0x6B, 0xE0, 0x28,  // .3...k.(
                /* 1730 */  0x48, 0x1F, 0xAB, 0xD8, 0x10, 0x9D, 0xE4, 0x68,  // H......h
                /* 1738 */  0x06, 0x14, 0x75, 0x5D, 0x1B, 0xA0, 0x0F, 0xE2,  // ..u]....
                /* 1740 */  0xB5, 0x81, 0x39, 0x1B, 0xE2, 0x9B, 0x26, 0x10,  // ..9...&.
                /* 1748 */  0x9D, 0x1A, 0xFF, 0xFF, 0xDF, 0x3E, 0xE0, 0xDC,  // .....>..
                /* 1750 */  0x34, 0x01, 0x17, 0xE3, 0xC6, 0x5E, 0x3F, 0x80,  // 4....^?.
                /* 1758 */  0xB9, 0x98, 0xB5, 0xE9, 0xFA, 0x01, 0x78, 0x89,  // ......x.
                /* 1760 */  0x7C, 0x85, 0x47, 0x9D, 0x05, 0x2C, 0xE1, 0xFA,  // |.G..,..
                /* 1768 */  0x81, 0xB8, 0x64, 0xF1, 0xEB, 0x07, 0x36, 0xF4,  // ..d...6.
                /* 1770 */  0x1D, 0x1E, 0xF5, 0xFF, 0x8F, 0x4B, 0xA1, 0xB0,  // .....K..
                /* 1778 */  0x67, 0x07, 0x54, 0x3C, 0x38, 0x0A, 0xE2, 0x61,  // g.T<8..a
                /* 1780 */  0xFB, 0x22, 0xE4, 0xB3, 0x03, 0xEE, 0x80, 0xC0,  // ."......
                /* 1788 */  0x86, 0xC8, 0x8E, 0x0E, 0xF0, 0xEE, 0x58, 0xC0,  // ......X.
                /* 1790 */  0xE9, 0xE8, 0x00, 0xBE, 0x93, 0x06, 0x78, 0x2F,  // ......x/
                /* 1798 */  0x59, 0xC0, 0xE9, 0xA4, 0x01, 0xB8, 0xF9, 0xFF,  // Y.......
                /* 17A0 */  0x9F, 0x34, 0x70, 0x66, 0x4E, 0x1A, 0x80, 0x1A,  // .4pfN...
                /* 17A8 */  0x49, 0x27, 0x0D, 0x14, 0x2C, 0x19, 0x9B, 0xEE,  // I'..,...
                /* 17B0 */  0x4D, 0x38, 0x91, 0xF3, 0xD0, 0xB1, 0x82, 0xCB,  // M8......
                /* 17B8 */  0x3A, 0x68, 0xA0, 0x8E, 0x3C, 0xBE, 0xB1, 0x82,  // :h..<...
                /* 17C0 */  0xEF, 0xB2, 0x8E, 0xBB, 0xB1, 0x02, 0xCF, 0xCB,  // ........
                /* 17C8 */  0x21, 0xF8, 0x4E, 0x0E, 0xC0, 0xE3, 0xFF, 0x7F,  // !.N.....
                /* 17D0 */  0x72, 0x00, 0x9F, 0x9A, 0x93, 0x03, 0xA0, 0x26,  // r......&
                /* 17D8 */  0xFC, 0x05, 0x0E, 0x05, 0x6E, 0x31, 0x40, 0x3A,  // ....n1@:
                /* 17E0 */  0x39, 0xB0, 0x7B, 0x83, 0xEF, 0x2B, 0x98, 0x9B,  // 9.{..+..
                /* 17E8 */  0xC8, 0xC9, 0x9D, 0x88, 0xE7, 0xF6, 0xD2, 0x82,  // ........
                /* 17F0 */  0xBB, 0xAF, 0xC3, 0x38, 0xF1, 0xF8, 0xF8, 0xC0,  // ...8....
                /* 17F8 */  0x03, 0x1D, 0x1F, 0x28, 0x88, 0x87, 0xEE, 0x4B,  // ...(...K
                /* 1800 */  0x1C, 0xE0, 0xEA, 0x6A, 0x6F, 0x27, 0x27, 0x24,  // ...jo''$
                /* 1808 */  0x08, 0x80, 0xE7, 0x9B, 0xE0, 0xFF, 0x7F, 0x6E,  // .......n
                /* 1810 */  0xC0, 0x6F, 0xF4, 0x9E, 0x1B, 0xFC, 0x63, 0x06,  // .o....c.
                /* 1818 */  0x3F, 0xF0, 0x01, 0xF7, 0xD3, 0x0A, 0xEE, 0xC0,  // ?.......
                /* 1820 */  0x07, 0x3C, 0xC7, 0xE4, 0x73, 0x13, 0xF0, 0xFF,  // .<..s...
                /* 1828 */  0xFF, 0x1F, 0x57, 0xC0, 0xE3, 0xE6, 0xB8, 0x02,  // ..W.....
                /* 1830 */  0x48, 0x3B, 0xAA, 0xC0, 0xB8, 0x01, 0x3C, 0xB3,  // H;....<.
                /* 1838 */  0x60, 0x8F, 0x2B, 0x80, 0xDF, 0xF3, 0x21, 0x8C,  // `.+...!.
                /* 1840 */  0xE3, 0x0A, 0xF6, 0xFF, 0x7F, 0x5C, 0x01, 0xEE,  // .....\..
                /* 1848 */  0xC7, 0x5D, 0xE0, 0x7C, 0xE4, 0xC1, 0x1D, 0x57,  // .].|...W
                /* 1850 */  0x00, 0x37, 0xA7, 0x1E, 0xEC, 0x71, 0x05, 0x98,  // .7...q..
                /* 1858 */  0xFD, 0xFF, 0x8F, 0x2B, 0xF0, 0xCF, 0x7F, 0xBE,  // ...+....
                /* 1860 */  0xBC, 0x03, 0xDE, 0xAC, 0x4E, 0x4D, 0x87, 0x0D,  // ....NM..
                /* 1868 */  0x6B, 0x86, 0x16, 0x81, 0x2F, 0xEF, 0x00, 0x27,  // k.../..'
                /* 1870 */  0xFE, 0xFF, 0xD7, 0x0F, 0x30, 0x81, 0xF2, 0xEB,  // ....0...
                /* 1878 */  0x07, 0x70, 0xBF, 0x03, 0x83, 0x65, 0x0C, 0x47,  // .p...e.G
                /* 1880 */  0xE1, 0x31, 0xBC, 0x6B, 0xBF, 0x7E, 0x00, 0x77,  // .1.k.~.w
                /* 1888 */  0x3B, 0xD7, 0x0F, 0x40, 0x4D, 0xF4, 0xEB, 0x07,  // ;..@M...
                /* 1890 */  0xE2, 0xFF, 0x4F, 0x50, 0x14, 0x84, 0xA4, 0x5C,  // ..OP...\
                /* 1898 */  0x3D, 0x41, 0x30, 0xE6, 0xB7, 0x00, 0xDF, 0x3C,  // =A0....<
                /* 18A0 */  0x01, 0x46, 0xFF, 0xFF, 0x4F, 0x2B, 0x80, 0xA1,  // .F..O+..
                /* 18A8 */  0x9B, 0x27, 0x58, 0x4E, 0x2B, 0x80, 0x05, 0x3D,  // .'XN+..=
                /* 18B0 */  0xA7, 0x15, 0x40, 0xD8, 0xFF, 0xFF, 0xE6, 0x89,  // ..@.....
                /* 18B8 */  0x3B, 0xA9, 0xB0, 0x8B, 0x27, 0xE0, 0xFB, 0xA4,  // ;...'...
                /* 18C0 */  0x81, 0xBB, 0x78, 0x02, 0x46, 0x8E, 0x19, 0xB8,  // ..x.F...
                /* 18C8 */  0xD3, 0x0A, 0x70, 0xFA, 0xFF, 0x5F, 0x3C, 0x01,  // ..p.._<.
                /* 18D0 */  0x06, 0xF9, 0x39, 0xAD, 0x00, 0x6A, 0xB4, 0x9D,  // ..9..j..
                /* 18D8 */  0x56, 0x50, 0xB0, 0xD6, 0x7A, 0xF1, 0x44, 0x0F,  // VP..z.D.
                /* 18E0 */  0xED, 0xFF, 0xFF, 0xBA, 0xC2, 0xEE, 0x9D, 0x00,  // ........
                /* 18E8 */  0xA3, 0x0E, 0x40, 0xB8, 0x7B, 0x27, 0xE0, 0xE6,  // ..@.{'..
                /* 18F0 */  0xFF, 0x7F, 0xFB, 0x00, 0xDE, 0x87, 0x00, 0xDF,  // ........
                /* 18F8 */  0x3E, 0x00, 0x2F, 0x17, 0x2D, 0xDF, 0x3E, 0x70,  // >./.-.>p
                /* 1900 */  0x2F, 0x05, 0xDF, 0x3E, 0xD8, 0x68, 0xDF, 0x3E,  // /..>.h.>
                /* 1908 */  0xF0, 0xA1, 0xCF, 0x0C, 0x14, 0xC2, 0x71, 0x29,  // ......q)
                /* 1910 */  0x14, 0xF6, 0xE8, 0x80, 0xBA, 0x79, 0x19, 0xCC,  // .....y..
                /* 1918 */  0x20, 0x1E, 0xB5, 0xC3, 0xDD, 0x3E, 0xD0, 0xE7,  //  ....>..
                /* 1920 */  0x03, 0x36, 0x42, 0x76, 0x72, 0x80, 0x77, 0xFC,  // .6Bvr.w.
                /* 1928 */  0x60, 0x27, 0x07, 0x60, 0x42, 0xE0, 0x93, 0x03,  // `'.`B...
                /* 1930 */  0xEE, 0xFF, 0x7F, 0x00, 0x01, 0xC3, 0x41, 0x03,  // ......A.
                /* 1938 */  0xCC, 0xE3, 0x03, 0x3E, 0x07, 0x0D, 0xC0, 0x95,  // ...>....
                /* 1940 */  0xA1, 0x83, 0x06, 0xA0, 0x26, 0xEC, 0x41, 0x03,  // ....&.A.
                /* 1948 */  0xF5, 0xFF, 0x1F, 0xB5, 0xC3, 0x8F, 0x4D, 0x07,  // ......M.
                /* 1950 */  0x0D, 0x36, 0xE0, 0x08, 0x3E, 0x66, 0x00, 0x5C,  // .6..>f.\
                /* 1958 */  0xFF, 0xFF, 0x1F, 0x33, 0xC0, 0x17, 0x9A, 0x52,  // ...3...R
                /* 1960 */  0xC7, 0x0C, 0xC0, 0x8B, 0xA4, 0xE3, 0x11, 0x5A,  // .......Z
                /* 1968 */  0xE2, 0x33, 0x40, 0xB7, 0x8C, 0x1A, 0x47, 0xAD,  // .3@...G.
                /* 1970 */  0xBB, 0x1E, 0x3B, 0xE6, 0xFA, 0x58, 0xC1, 0x65,  // ..;..X.e
                /* 1978 */  0x1D, 0x34, 0x50, 0x67, 0x2A, 0xCB, 0x39, 0x68,  // .4Pg*.9h
                /* 1980 */  0xA0, 0xA8, 0x0C, 0x66, 0x0A, 0x1F, 0xD4, 0x7C,  // ...f...|
                /* 1988 */  0xD0, 0xB0, 0x91, 0x5B, 0x27, 0xD4, 0x30, 0x07,  // ...['.0.
                /* 1990 */  0x35, 0xA0, 0x39, 0x3C, 0x72, 0xEB, 0x04, 0x8D,  // 5.9<r...
                /* 1998 */  0xB8, 0x93, 0x03, 0x68, 0xFE, 0xFF, 0x27, 0x07,  // ...h..'.
                /* 19A0 */  0xE0, 0xA4, 0xE8, 0xBC, 0x03, 0xA8, 0x11, 0x78,  // .......x
                /* 19A8 */  0xE3, 0x46, 0x0B, 0x7E, 0x28, 0xE8, 0xE4, 0x80,  // .F.~(...
                /* 19B0 */  0x43, 0x39, 0x9D, 0xB0, 0xAF, 0xDC, 0x86, 0x0E,  // C9......
                /* 19B8 */  0x1F, 0xC4, 0x40, 0x21, 0xDE, 0x02, 0x0E, 0x22,  // ..@!..."
                /* 19C0 */  0x41, 0x71, 0x17, 0x4F, 0x94, 0x2C, 0x0A, 0xC9,  // Aq.O.,..
                /* 19C8 */  0x38, 0x3D, 0xA0, 0x82, 0x9F, 0x21, 0x28, 0x88,  // 8=...!(.
                /* 19D0 */  0x01, 0x9D, 0xEA, 0xF4, 0x80, 0x3E, 0x71, 0xB2,  // .....>q.
                /* 19D8 */  0x51, 0x3A, 0xC8, 0xC5, 0x13, 0x28, 0xDE, 0x1C,  // Q:...(..
                /* 19E0 */  0xC0, 0xF4, 0xFF, 0x3F, 0x78, 0x02, 0x8F, 0x03,  // ...?x...
                /* 19E8 */  0x08, 0xF8, 0x06, 0x74, 0x94, 0x87, 0xC8, 0x0F,  // ...t....
                /* 19F0 */  0x20, 0xC0, 0x73, 0x54, 0x3E, 0x80, 0x00, 0x8E,  //  .sT>...
                /* 19F8 */  0x1C, 0x1D, 0x40, 0x80, 0xEA, 0xFF, 0xFF, 0x1C,  // ..@.....
                /* 1A00 */  0x00, 0xBE, 0xD0, 0x27, 0x21, 0xD4, 0x01, 0xC4,  // ...'!...
                /* 1A08 */  0x22, 0x0E, 0x20, 0x88, 0x73, 0x27, 0x3B, 0x80,  // ". .s';.
                /* 1A10 */  0xC0, 0x0D, 0x7C, 0x1A, 0x42, 0x45, 0xA5, 0x50,  // ..|.BE.P
                /* 1A18 */  0xD0, 0xD3, 0x03, 0x2A, 0x1A, 0x1C, 0x05, 0xF1,  // ...*....
                /* 1A20 */  0xC8, 0x1D, 0xED, 0xF4, 0x80, 0x3E, 0x8E, 0xB1,  // .....>..
                /* 1A28 */  0x51, 0xB2, 0xC3, 0x03, 0xBC, 0x53, 0x1C, 0x70,  // Q....S.p
                /* 1A30 */  0x3A, 0x3C, 0x80, 0xEB, 0xA8, 0x01, 0xDE, 0x43,  // :<.....C
                /* 1A38 */  0x1C, 0x70, 0x1A, 0x1E, 0x78, 0xFE, 0xFF, 0x47,  // .p..x..G
                /* 1A40 */  0x0D, 0xE0, 0x2E, 0xE9, 0xA8, 0x01, 0xA8, 0x91,  // ........
                /* 1A48 */  0x77, 0x74, 0x42, 0x49, 0x82, 0x90, 0xDC, 0xA3,  // wtBI....
                /* 1A50 */  0x13, 0x1A, 0xE4, 0x05, 0x20, 0xF8, 0x09, 0x79,  // .... ..y
                /* 1A58 */  0x64, 0x9E, 0xF3, 0xC1, 0x79, 0x04, 0x4F, 0x4E,  // d...y.ON
                /* 1A60 */  0x80, 0xB1, 0xFF, 0xFF, 0xC9, 0x09, 0x70, 0x73,  // ......ps
                /* 1A68 */  0x12, 0x04, 0xCE, 0xE7, 0x0F, 0xC0, 0x93, 0xA5,  // ........
                /* 1A70 */  0xF3, 0x07, 0xD0, 0xF8, 0xFF, 0x9F, 0x3F, 0x80,  // ......?.
                /* 1A78 */  0x93, 0xB0, 0x93, 0x13, 0xEA, 0xFC, 0x61, 0xA1,  // ......a.
                /* 1A80 */  0x47, 0x52, 0xC4, 0xC9, 0x89, 0x9D, 0x84, 0xE3,  // GR......
                /* 1A88 */  0x06, 0x7F, 0x6B, 0xF2, 0x41, 0xC1, 0xE7, 0x0F,  // ..k.A...
                /* 1A90 */  0xCC, 0xA9, 0x14, 0x38, 0x9E, 0x9C, 0x80, 0xFF,  // ...8....
                /* 1A98 */  0xE1, 0x01, 0x78, 0x6B, 0x3A, 0x3C, 0x40, 0xFB,  // ..xk:<@.
                /* 1AA0 */  0xFF, 0x1F, 0x1E, 0x00, 0x07, 0x12, 0x4F, 0xA5,  // ......O.
                /* 1AA8 */  0x68, 0xC9, 0xA7, 0x52, 0x48, 0x33, 0x8E, 0x11,  // h..RH3..
                /* 1AB0 */  0xFF, 0x7D, 0x3B, 0x92, 0x4F, 0x0F, 0x18, 0x79,  // .};.O..y
                /* 1AB8 */  0x87, 0x21, 0xD4, 0x71, 0xC2, 0x87, 0x21, 0x80,  // .!.q..!.
                /* 1AC0 */  0x0B, 0x27, 0x10, 0x8F, 0x99, 0x4B, 0x38, 0x80,  // .'...K8.
                /* 1AC8 */  0x50, 0x10, 0x8F, 0xD9, 0xE7, 0x7D, 0x8F, 0xD9,  // P....}..
                /* 1AD0 */  0xFF, 0xFF, 0x31, 0xF3, 0x99, 0xF8, 0x7E, 0xE0,  // ..1...~.
                /* 1AD8 */  0x5B, 0x80, 0x8F, 0x82, 0xF0, 0x4F, 0x43, 0x80,  // [....OC.
                /* 1AE0 */  0x77, 0x4F, 0x27, 0x10, 0x40, 0x4D, 0xEC, 0x63,  // wO'.@M.c
                /* 1AE8 */  0x29, 0x5A, 0xC6, 0xB1, 0x14, 0xD2, 0x09, 0x04,  // )Z......
                /* 1AF0 */  0xC6, 0xFF, 0xFF, 0x04, 0xE2, 0xC8, 0xC7, 0x21,  // .......!
                /* 1AF8 */  0x54, 0x58, 0x0A, 0x9D, 0x4B, 0x7D, 0x7C, 0xE0,  // TX..K}|.
                /* 1B00 */  0xE1, 0xE0, 0x28, 0x88, 0x8F, 0xA5, 0x80, 0xB7,  // ..(.....
                /* 1B08 */  0xB3, 0x06, 0xB8, 0xCF, 0xA5, 0x80, 0xDF, 0xFF,  // ........
                /* 1B10 */  0xFF, 0x59, 0x03, 0x9E, 0xA8, 0xB3, 0x06, 0xA0,  // .Y......
                /* 1B18 */  0x26, 0xF8, 0xE1, 0x09, 0x2D, 0x04, 0x48, 0x87,  // &...-.H.
                /* 1B20 */  0x27, 0x38, 0x17, 0x05, 0x36, 0xF4, 0xF0, 0x47,  // '8..6..G
                /* 1B28 */  0xEA, 0xCB, 0x8D, 0x0F, 0xD8, 0xEC, 0xF0, 0xC4,  // ........
                /* 1B30 */  0xE3, 0x1E, 0x9E, 0x00, 0x0A, 0xFC, 0xFF, 0x0F,  // ........
                /* 1B38 */  0x4F, 0xB8, 0x98, 0x63, 0x46, 0x05, 0x3B, 0xAE,  // O..cF.;.
                /* 1B40 */  0x50, 0x10, 0x1F, 0x57, 0xE0, 0x8D, 0xB0, 0x66,  // P..W...f
                /* 1B48 */  0x04, 0x1D, 0x9D, 0x00, 0x33, 0xA3, 0x83, 0x75,  // ....3..u
                /* 1B50 */  0x26, 0x87, 0x3D, 0x3A, 0xE0, 0x73, 0x64, 0x26,  // &.=:.sd&
                /* 1B58 */  0x87, 0x15, 0x40, 0xCD, 0xFF, 0xFF, 0xB0, 0xC2,  // ..@.....
                /* 1B60 */  0x4D, 0x1D, 0x56, 0x00, 0x35, 0x69, 0x9E, 0x06,  // M.V.5i..
                /* 1B68 */  0x3A, 0xAC, 0xE0, 0xD2, 0x1D, 0x56, 0x10, 0xE7,  // :....V..
                /* 1B70 */  0x2C, 0xEC, 0x61, 0x05, 0x4E, 0x12, 0x58, 0x1D,  // ,.a.N.X.
                /* 1B78 */  0x56, 0x78, 0x06, 0x18, 0x29, 0x26, 0xD1, 0x49,  // Vx..)&.I
                /* 1B80 */  0x83, 0x6B, 0x3C, 0xB3, 0x50, 0x10, 0x9F, 0x19,  // .k<.P...
                /* 1B88 */  0x7C, 0x58, 0x01, 0x4C, 0xC5, 0xBA, 0x93, 0x40,  // |X.L...@
                /* 1B90 */  0x1D, 0x1B, 0xD8, 0xFE, 0xFF, 0x63, 0x03, 0xE3,  // .....c..
                /* 1B98 */  0x8D, 0x04, 0x7C, 0xB7, 0x00, 0x38, 0x13, 0x61,  // ..|..8.a
                /* 1BA0 */  0x53, 0x03, 0x7E, 0xE7, 0x11, 0xF0, 0xDD, 0x46,  // S.~....F
                /* 1BA8 */  0x81, 0x25, 0x28, 0xBF, 0x5D, 0xC3, 0x89, 0x73,  // .%(.]..s
                /* 1BB0 */  0xAB, 0x01, 0x9A, 0x50, 0x16, 0x06, 0x45, 0xFE,  // ...P..E.
                /* 1BB8 */  0xFF, 0xD3, 0x86, 0x39, 0x8A, 0x63, 0x38, 0x0A,  // ...9.c8.
                /* 1BC0 */  0x8F, 0xE1, 0xE1, 0x31, 0x81, 0xAF, 0x35, 0xC0,  // ...1..5.
                /* 1BC8 */  0x5B, 0xD5, 0xB5, 0x06, 0x50, 0x13, 0xF6, 0x36,  // [...P..6
                /* 1BD0 */  0x8A, 0x82, 0x75, 0xF8, 0xAB, 0x3E, 0xE2, 0x54,  // ..u..>.T
                /* 1BD8 */  0xC3, 0x7C, 0x42, 0x90, 0x63, 0x09, 0x0B, 0x7C,  // .|B.c..|
                /* 1BE0 */  0x13, 0x45, 0x5D, 0x44, 0x1D, 0xF4, 0xE8, 0x80,  // .E]D....
                /* 1BE8 */  0x8A, 0x06, 0x47, 0x41, 0x7C, 0x13, 0x05, 0xB6,  // ..GA|...
                /* 1BF0 */  0xFF, 0xFF, 0x9B, 0x28, 0x30, 0x09, 0x37, 0x3A,  // ...(0.7:
                /* 1BF8 */  0xF4, 0x39, 0xC0, 0xC3, 0x7D, 0x32, 0x38, 0xE4,  // .9..}28.
                /* 1C00 */  0x07, 0x08, 0x76, 0x11, 0x05, 0xF8, 0xE0, 0xEA,  // ..v.....
                /* 1C08 */  0x98, 0x01, 0x48, 0xF8, 0xFF, 0x9F, 0x03, 0x60,  // ..H....`
                /* 1C10 */  0x05, 0xB9, 0x88, 0xA2, 0x8E, 0x02, 0x0E, 0x76,  // .......v
                /* 1C18 */  0xD4, 0x10, 0x70, 0x84, 0xA3, 0x7D, 0x11, 0x65,  // ..p..}.e
                /* 1C20 */  0xE3, 0x3E, 0x9D, 0xD0, 0x21, 0x2A, 0x1E, 0x1B,  // .>..!*..
                /* 1C28 */  0x21, 0x18, 0xE5, 0x0A, 0x46, 0x21, 0x1C, 0x02,  // !...F!..
                /* 1C30 */  0x46, 0x11, 0x6E, 0x62, 0x28, 0xD1, 0x70, 0x14,  // F.nb(.p.
                /* 1C38 */  0xC4, 0x07, 0x06, 0x9F, 0x33, 0xE0, 0x0C, 0xE9,  // ....3...
                /* 1C40 */  0x1C, 0x4E, 0xD1, 0xB7, 0x42, 0xE0, 0x79, 0xCE,  // .N..B.y.
                /* 1C48 */  0x00, 0xDF, 0xE8, 0xE0, 0x1C, 0xC1, 0x3D, 0xE0,  // ......=.
                /* 1C50 */  0xF7, 0x4D, 0xC0, 0xCC, 0xA1, 0x04, 0xCE, 0x6D,  // .M.....m
                /* 1C58 */  0x9B, 0x1F, 0x4A, 0x30, 0xFF, 0xFF, 0x0B, 0x27,  // ..J0...'
                /* 1C60 */  0xC0, 0x04, 0x59, 0x87, 0x12, 0x40, 0x8D, 0xDA,  // ..Y..@..
                /* 1C68 */  0x43, 0x09, 0x5A, 0xFD, 0xA1, 0x04, 0x3D, 0xDD,  // C.Z...=.
                /* 1C70 */  0x07, 0x10, 0x03, 0x1D, 0x50, 0x98, 0x10, 0x09,  // ....P...
                /* 1C78 */  0xEA, 0xBD, 0x69, 0xA3, 0x94, 0x52, 0x48, 0xC9,  // ..i..RH.
                /* 1C80 */  0x59, 0x0A, 0x95, 0xFD, 0x0C, 0x41, 0x41, 0xCC,  // Y....AA.
                /* 1C88 */  0xF6, 0xFF, 0x7F, 0x4E, 0xD1, 0xD1, 0x01, 0xCA,  // ...N....
                /* 1C90 */  0x70, 0x4F, 0xE7, 0x20, 0x4E, 0xA3, 0xF8, 0xB3,  // pO. N...
                /* 1C98 */  0x36, 0x20, 0x56, 0xDE, 0xA4, 0x51, 0x97, 0x43,  // 6 V..Q.C
                /* 1CA0 */  0x4F, 0xDA, 0x20, 0x9E, 0xB4, 0xC3, 0x42, 0xC8,  // O. ...B.
                /* 1CA8 */  0xC6, 0xA4, 0xD1, 0x73, 0x7E, 0x0E, 0xE0, 0xD7,  // ...s~...
                /* 1CB0 */  0x10, 0x76, 0x59, 0x01, 0x9E, 0xA3, 0x3C, 0x6D,  // .vY...<m
                /* 1CB8 */  0xD8, 0x33, 0x78, 0xA2, 0xA9, 0x7A, 0x1C, 0x9A,  // .3x..z..
                /* 1CC0 */  0xC6, 0x51, 0x54, 0x77, 0x67, 0xD0, 0x48, 0x4F,  // .QTwg.HO
                /* 1CC8 */  0xB6, 0xB1, 0xF9, 0x4A, 0xE1, 0x98, 0x74, 0x9C,  // ...J..t.
                /* 1CD0 */  0x33, 0xCC, 0xA3, 0x62, 0x65, 0xC3, 0x27, 0xD7,  // 3..be.'.
                /* 1CD8 */  0x10, 0x58, 0xFF, 0xFF, 0x6B, 0x08, 0x70, 0xD4,  // .X..k.p.
                /* 1CE0 */  0x76, 0x41, 0x04, 0x74, 0x8D, 0x2B, 0x60, 0xCC,  // vA.t.+`.
                /* 1CE8 */  0x33, 0x7E, 0x9A, 0xF0, 0x1C, 0x0F, 0xD1, 0xD3,  // 3~......
                /* 1CF0 */  0xF0, 0x05, 0x11, 0x18, 0x8C, 0xE7, 0xE9, 0x83,  // ........
                /* 1CF8 */  0x5D, 0x10, 0x01, 0x17, 0xFF, 0xFF, 0xCB, 0x13,  // ].......
                /* 1D00 */  0xFC, 0x7B, 0xC1, 0x01, 0x63, 0x2E, 0x88, 0x00,  // .{..c...
                /* 1D08 */  0x1F, 0x04, 0x1E, 0x33, 0x00, 0x35, 0x81, 0x8F,  // ...3.5..
                /* 1D10 */  0x19, 0x28, 0x0E, 0x02, 0xA4, 0x63, 0x06, 0xC3,  // .(...c..
                /* 1D18 */  0x0E, 0xFA, 0x7A, 0x77, 0x18, 0x3E, 0x4E, 0xFB,  // ..zw.>N.
                /* 1D20 */  0xFF, 0x3F, 0xCE, 0x23, 0xC1, 0x1C, 0x34, 0x00,  // .?.#..4.
                /* 1D28 */  0xE7, 0xF7, 0x71, 0xDC, 0x41, 0x03, 0x70, 0xFE,  // ..q.A.p.
                /* 1D30 */  0xFF, 0x3F, 0x68, 0xC0, 0x35, 0x78, 0xD0, 0x00,  // .?h.5x..
                /* 1D38 */  0xD4, 0xA8, 0xBB, 0xF4, 0xA1, 0x38, 0xAC, 0xF6,  // .....8..
                /* 1D40 */  0xA0, 0x01, 0x6D, 0xC4, 0x47, 0x84, 0x51, 0x77,  // ..m.G.Qw
                /* 1D48 */  0xEB, 0x43, 0xE9, 0xA2, 0x90, 0x8E, 0x83, 0x06,  // .C......
                /* 1D50 */  0x2A, 0xF9, 0xB1, 0x80, 0x82, 0x18, 0xD0, 0xB1,  // *.......
                /* 1D58 */  0x0E, 0x1A, 0x50, 0x2F, 0x7D, 0x80, 0xCB, 0xFF,  // ..P/}...
                /* 1D60 */  0x3F, 0x3A, 0x46, 0xCE, 0x9C, 0x51, 0x5B, 0xF6,  // ?:F..Q[.
                /* 1D68 */  0x9C, 0x4D, 0xE1, 0x39, 0xFB, 0xFA, 0x01, 0xDE,  // .M.9....
                /* 1D70 */  0x13, 0x2F, 0xF0, 0xBF, 0x7E, 0x00, 0x6F, 0x85,  // ./..~.o.
                /* 1D78 */  0xD7, 0x0F, 0x40, 0x8D, 0xB4, 0xEB, 0x07, 0x0A,  // ..@.....
                /* 1D80 */  0xF6, 0xFF, 0x9F, 0xA0, 0xD4, 0x87, 0x82, 0x06,  // ........
                /* 1D88 */  0x1C, 0xF9, 0x15, 0x96, 0x1F, 0x3F, 0x0C, 0xF1,  // .....?..
                /* 1D90 */  0x06, 0x70, 0x00, 0x6F, 0x9E, 0xBA, 0x7C, 0xA0,  // .p.o..|.
                /* 1D98 */  0x84, 0x51, 0x48, 0xC8, 0xC9, 0x01, 0x15, 0xFD,  // .QH.....
                /* 1DA0 */  0x50, 0x40, 0x41, 0x0C, 0xE8, 0x5C, 0x27, 0x07,  // P@A..\'.
                /* 1DA8 */  0xB4, 0x8A, 0xCB, 0x07, 0x19, 0xCE, 0x11, 0xBD,  // ........
                /* 1DB0 */  0x30, 0xF8, 0xF4, 0x01, 0xF0, 0xF2, 0xFF, 0x7F,  // 0.......
                /* 1DB8 */  0xFA, 0x00, 0x4C, 0x58, 0x3C, 0x7D, 0x00, 0x6A,  // ..LX<}.j
                /* 1DC0 */  0xE2, 0xDE, 0x5C, 0xD1, 0xF1, 0xC7, 0xA6, 0xD3,  // ..\.....
                /* 1DC8 */  0x87, 0x27, 0xFB, 0xF4, 0x01, 0x23, 0xF2, 0x0D,  // .'...#..
                /* 1DD0 */  0x10, 0x15, 0x96, 0x42, 0x57, 0x40, 0x9F, 0x1C,  // ...BW@..
                /* 1DD8 */  0x78, 0x38, 0x38, 0x0A, 0xE2, 0x51, 0xFB, 0xE4,  // x88..Q..
                /* 1DE0 */  0x00, 0xE7, 0xF4, 0x81, 0xB9, 0xD4, 0x01, 0xC7,  // ........
                /* 1DE8 */  0xFF, 0xFF, 0x15, 0x10, 0x60, 0x99, 0xC6, 0x73,  // ....`..s
                /* 1DF0 */  0x06, 0x20, 0xE6, 0xFF, 0x3F, 0x06, 0x9D, 0x33,  // . ..?..3
                /* 1DF8 */  0x50, 0x52, 0x6E, 0xB9, 0xF4, 0xD0, 0x84, 0x11,  // PRn.....
                /* 1E00 */  0x39, 0x0E, 0x8D, 0x90, 0xC9, 0x3A, 0x66, 0xA0,  // 9....:f.
                /* 1E08 */  0xAE, 0xFE, 0x3E, 0xEF, 0x00, 0x8E, 0x8E, 0x19,  // ..>.....
                /* 1E10 */  0xE0, 0x3B, 0x38, 0x00, 0x6F, 0x8F, 0x07, 0x07,  // .;8.o...
                /* 1E18 */  0x20, 0xFE, 0xFF, 0x3F, 0x07, 0x80, 0x41, 0xDE,  //  ..?..A.
                /* 1E20 */  0xE1, 0x0D, 0x75, 0x14, 0xB0, 0xDC, 0xC3, 0x1B,  // ..u.....
                /* 1E28 */  0x12, 0xE5, 0xDD, 0x86, 0xCD, 0x2D, 0x70, 0xCD,  // .....-p.
                /* 1E30 */  0x30, 0x3A, 0x01, 0xE8, 0xF4, 0x86, 0x92, 0x76,  // 0:.....v
                /* 1E38 */  0x7A, 0x03, 0x28, 0x71, 0xFE, 0xF0, 0xA0, 0xB9,  // z.(q....
                /* 1E40 */  0x84, 0xE3, 0x07, 0x05, 0xF1, 0xA0, 0x1D, 0x0F,  // ........
                /* 1E48 */  0x14, 0x75, 0xFC, 0x80, 0x13, 0xE7, 0xF8, 0x01,  // .u......
                /* 1E50 */  0x84, 0xFE, 0xFF, 0xC7, 0x20, 0x98, 0xC2, 0xA6,  // .... ...
                /* 1E58 */  0x0D, 0x7D, 0x14, 0xC7, 0x70, 0x14, 0x1E, 0xC3,  // .}..p...
                /* 1E60 */  0xBB, 0x70, 0x02, 0x9F, 0x3F, 0x80, 0xB7, 0xC8,  // .p..?...
                /* 1E68 */  0xF3, 0x07, 0xA0, 0x46, 0xD6, 0x39, 0x08, 0xC5,  // ...F.9..
                /* 1E70 */  0x61, 0x99, 0xE7, 0x20, 0xE4, 0xF9, 0x83, 0x4F,  // a.. ...O
                /* 1E78 */  0xFC, 0x01, 0xC1, 0x33, 0x33, 0x34, 0x39, 0x0A,  // ...3349.
                /* 1E80 */  0x01, 0xD9, 0xFF, 0xFF, 0x51, 0x08, 0xB0, 0x6D,  // ....Q..m
                /* 1E88 */  0xF2, 0xEC, 0x00, 0xA8, 0x09, 0x7B, 0x24, 0x43,  // .....{$C
                /* 1E90 */  0x87, 0x3F, 0x49, 0x22, 0xC7, 0x78, 0x86, 0x1E,  // .?I".x..
                /* 1E98 */  0x86, 0x0F, 0x92, 0xC0, 0xE6, 0xFF, 0x7F, 0x90,  // ........
                /* 1EA0 */  0x04, 0x58, 0xAC, 0xF2, 0x98, 0x01, 0xE2, 0xFF,  // .X......
                /* 1EA8 */  0xFF, 0x31, 0x03, 0x18, 0x0A, 0x3B, 0xC0, 0xA1,  // .1...;..
                /* 1EB0 */  0x8E, 0x19, 0x16, 0x7A, 0x80, 0x43, 0x1E, 0x33,  // ...z.C.3
                /* 1EB8 */  0x30, 0x67, 0x79, 0x80, 0x75, 0xFF, 0xFF, 0xB3,  // 0gy.u...
                /* 1EC0 */  0x3C, 0x60, 0xDD, 0xE5, 0xE1, 0x03, 0x50, 0x23,  // <`....P#
                /* 1EC8 */  0xE7, 0xC8, 0x84, 0x1A, 0xB5, 0xE5, 0x1D, 0x99,  // ........
                /* 1ED0 */  0xA8, 0xCF, 0x83, 0xA8, 0x10, 0x62, 0x04, 0xF5,  // .....b..
                /* 1ED8 */  0xC9, 0x0D, 0xFC, 0x67, 0x0F, 0xCC, 0xFF, 0xFF,  // ...g....
                /* 1EE0 */  0xC4, 0x04, 0x98, 0x39, 0x37, 0x00, 0xEF, 0x93,  // ...97...
                /* 1EE8 */  0xA1, 0xCF, 0xE6, 0x80, 0xAB, 0x4B, 0xC3, 0x09,  // .....K..
                /* 1EF0 */  0x57, 0x38, 0x5C, 0x41, 0x9E, 0x4D, 0xC5, 0x23,  // W8\A.M.#
                /* 1EF8 */  0x23, 0x07, 0x07, 0x70, 0xFD, 0xFF, 0xCF, 0x62,  // #..p...b
                /* 1F00 */  0x80, 0x89, 0x83, 0x03, 0xE0, 0xC9, 0xE7, 0xC1,  // ........
                /* 1F08 */  0x01, 0x50, 0x23, 0xE9, 0xE0, 0x80, 0x82, 0x25,  // .P#....%
                /* 1F10 */  0x07, 0x07, 0xC4, 0x5D, 0x8C, 0x89, 0x9C, 0x87,  // ...]....
                /* 1F18 */  0x66, 0xC8, 0x4E, 0x0E, 0xFC, 0xFF, 0x7F, 0x94,  // f.N.....
                /* 1F20 */  0x05, 0x58, 0x25, 0xF4, 0xE4, 0x00, 0xA8, 0x89,  // .X%.....
                /* 1F28 */  0xF7, 0x34, 0xF0, 0x19, 0xDE, 0x23, 0x53, 0x20,  // .4...#S 
                /* 1F30 */  0x09, 0xFF, 0x7F, 0x18, 0xCC, 0x41, 0xCF, 0x07,  // .....A..
                /* 1F38 */  0x04, 0xFC, 0x40, 0x8F, 0xF3, 0xF0, 0x8E, 0x84,  // ..@.....
                /* 1F40 */  0x49, 0x82, 0x43, 0x9D, 0x01, 0x3C, 0x92, 0xE6,  // I.C..<..
                /* 1F48 */  0x4F, 0x33, 0x64, 0xC2, 0x9E, 0x4A, 0x48, 0x26,  // O3d..JH&
                /* 1F50 */  0x6D, 0x48, 0xA8, 0xB3, 0x22, 0x99, 0x90, 0xA6,  // mH.."...
                /* 1F58 */  0xF3, 0xEA, 0x10, 0xF1, 0x49, 0xD1, 0x30, 0x09,  // ....I.0.
                /* 1F60 */  0x3C, 0x7A, 0x86, 0xC6, 0x09, 0x06, 0x18, 0x1F,  // <z......
                /* 1F68 */  0x68, 0x4E, 0x07, 0xC7, 0x7F, 0x2E, 0xD1, 0x22,  // hN....."
                /* 1F70 */  0x9C, 0x73, 0xBC, 0x50, 0x86, 0x0B, 0xF4, 0xAC,  // .s.P....
                /* 1F78 */  0xE0, 0x13, 0x3D, 0xC3, 0x0A, 0x7E, 0x10, 0xAF,  // ..=..~..
                /* 1F80 */  0x01, 0x0C, 0x26, 0x50, 0x14, 0x8F, 0xC6, 0x90,  // ..&P....
                /* 1F88 */  0xAF, 0x02, 0x0C, 0xAA, 0xD5, 0xDB, 0x82, 0xC0,  // ........
                /* 1F90 */  0x0D, 0x6B, 0xA0, 0x60, 0x86, 0x38, 0x3A, 0xEC,  // .k.`.8:.
                /* 1F98 */  0x30, 0x0D, 0xE9, 0x81, 0x3C, 0x67, 0xF8, 0x1E,  // 0...<g..
                /* 1FA0 */  0x60, 0x82, 0x13, 0x7E, 0x66, 0x28, 0xF7, 0xCE,  // `..~f(..
                /* 1FA8 */  0x2F, 0xF1, 0xA8, 0xC2, 0x68, 0x0E, 0x8A, 0xC0,  // /...h...
                /* 1FB0 */  0x85, 0xC6, 0x1C, 0x0A, 0x3C, 0x89, 0xB7, 0x09,  // ....<...
                /* 1FB8 */  0x1F, 0x0E, 0x98, 0xFB, 0x09, 0xEA, 0x02, 0xF1,  // ........
                /* 1FC0 */  0x0C, 0x11, 0xE3, 0xAD, 0xC8, 0x08, 0x35, 0x0A,  // ......5.
                /* 1FC8 */  0xB0, 0x85, 0x4E, 0x10, 0x8C, 0x12, 0x84, 0xA1,  // ..N.....
                /* 1FD0 */  0x70, 0xCC, 0x28, 0x9E, 0xE6, 0x59, 0x04, 0xA9,  // p.(..Y..
                /* 1FD8 */  0x4D, 0x80, 0x32, 0x10, 0x19, 0x43, 0x44, 0x20,  // M.2..CD 
                /* 1FE0 */  0xB4, 0x3F, 0x08, 0x22, 0xE1, 0x31, 0xA1, 0x73,  // .?.".1.s
                /* 1FE8 */  0x81, 0x23, 0x8D, 0x06, 0x75, 0xC4, 0xF0, 0xD9,  // .#..u...
                /* 1FF0 */  0xC0, 0xE7, 0x82, 0x73, 0x3C, 0xE8, 0x43, 0x34,  // ...s<.C4
                /* 1FF8 */  0xC8, 0xD1, 0x1D, 0x5C, 0x9D, 0x87, 0x02, 0x32,  // ...\...2
                /* 2000 */  0x3C, 0x76, 0x1C, 0xF1, 0xD9, 0xC2, 0xA7, 0x04,  // <v......
                /* 2008 */  0xBC, 0x6B, 0x40, 0x5D, 0x0F, 0x1E, 0x23, 0xF8,  // .k@]..#.
                /* 2010 */  0xFF, 0xFF, 0x38, 0x01, 0x7B, 0x44, 0xCF, 0x22,  // ..8.{D."
                /* 2018 */  0xB0, 0xC7, 0xE3, 0xA3, 0x81, 0x4F, 0x01, 0x26,  // .....O.&
                /* 2020 */  0xB0, 0xFC, 0x41, 0xA0, 0x46, 0x66, 0x68, 0x8F,  // ..A.Ffh.
                /* 2028 */  0xF4, 0xB4, 0xDE, 0x10, 0x7C, 0x2E, 0x30, 0x81,  // ....|.0.
                /* 2030 */  0xC5, 0x9E, 0x50, 0xE9, 0x78, 0xC0, 0x7F, 0xD6,  // ..P.x...
                /* 2038 */  0x7A, 0x34, 0x88, 0xF0, 0x66, 0xE0, 0xF9, 0xFA,  // z4..f...
                /* 2040 */  0x6C, 0xC3, 0x9C, 0x9C, 0x6C, 0xD0, 0x97, 0x05,  // l...l...
                /* 2048 */  0x0C, 0xC1, 0xC0, 0x27, 0x14, 0x2A, 0xEA, 0x84,  // ...'.*..
                /* 2050 */  0x82, 0x3A, 0x59, 0xF8, 0x50, 0xC1, 0xEE, 0x06,  // .:Y.P...
                /* 2058 */  0x0F, 0x0D, 0xEC, 0x80, 0xC2, 0x4E, 0x3D, 0xE4,  // .....N=.
                /* 2060 */  0x54, 0x02, 0xFA, 0xF3, 0x0C, 0xEE, 0x98, 0x01,  // T.......
                /* 2068 */  0xF7, 0x56, 0x81, 0x9B, 0x11, 0x3F, 0xFE, 0x92,  // .V...?..
                /* 2070 */  0xA3, 0x0E, 0x68, 0x9C, 0x1D, 0x1F, 0x74, 0x0C,  // ..h...t.
                /* 2078 */  0xE0, 0x67, 0x1D, 0xF8, 0x37, 0xA6, 0x18, 0x61,  // .g..7..a
                /* 2080 */  0x9E, 0x24, 0x62, 0xC5, 0x38, 0x9C, 0x73, 0x39,  // .$b.8.s9
                /* 2088 */  0x89, 0xFF, 0xFF, 0x7B, 0x53, 0x95, 0x30, 0x82,  // ...{S.0.
                /* 2090 */  0xEC, 0xF2, 0xC6, 0x43, 0x0E, 0x49, 0x1E, 0xD2,  // ...C.I..
                /* 2098 */  0x79, 0x3C, 0x82, 0x70, 0x02, 0x0F, 0x11, 0x3F,  // y<.p...?
                /* 20A0 */  0x0C, 0x7E, 0x96, 0x78, 0xF8, 0x61, 0x93, 0x78,  // .~.x.a.x
                /* 20A8 */  0xFF, 0xF1, 0x04, 0x8E, 0xCA, 0xA7, 0x14, 0x23,  // .......#
                /* 20B0 */  0x04, 0x7F, 0xF8, 0x38, 0xE7, 0xB7, 0x00, 0x13,  // ...8....
                /* 20B8 */  0xF8, 0x7A, 0xE4, 0x13, 0x2E, 0x62, 0x00, 0x28,  // .z...b.(
                /* 20C0 */  0xF0, 0x13, 0x3A, 0x45, 0x9F, 0x85, 0x4E, 0x0C,  // ..:E..N.
                /* 20C8 */  0x77, 0x28, 0xE0, 0x23, 0xC2, 0x0E, 0x80, 0x9F,  // w(.#....
                /* 20D0 */  0x6F, 0x00, 0x46, 0xFD, 0xFF, 0xCF, 0x37, 0xE0,  // o.F...7.
                /* 20D8 */  0x39, 0x3D, 0x3C, 0xDF, 0x00, 0xAC, 0xFE, 0xFF,  // 9=<.....
                /* 20E0 */  0x9F, 0x6F, 0x00, 0x67, 0x13, 0x08, 0xF6, 0x78,  // .o.g...x
                /* 20E8 */  0x73, 0x0E, 0xE7, 0xF3, 0xFC, 0xF2, 0x68, 0x11,  // s.....h.
                /* 20F0 */  0x25, 0x44, 0x94, 0x38, 0x11, 0xA2, 0x3C, 0x41,  // %D.8..<A
                /* 20F8 */  0xC4, 0xF3, 0xF5, 0x05, 0x73, 0xBE, 0x01, 0x5C,  // ....s..\
                /* 2100 */  0x44, 0x3B, 0xDC, 0xA0, 0xC2, 0x9C, 0x6F, 0x00,  // D;....o.
                /* 2108 */  0x11, 0xFF, 0xFF, 0xF3, 0x0D, 0xE0, 0xF8, 0x24,  // .......$
                /* 2110 */  0xF1, 0x7C, 0x03, 0xCE, 0xF8, 0x4F, 0x15, 0x9D,  // .|...O..
                /* 2118 */  0x6F, 0x00, 0xC3, 0xFF, 0xFF, 0xF3, 0x0D, 0xC0,  // o.......
                /* 2120 */  0x20, 0xAC, 0xE7, 0x1B, 0x70, 0x9D, 0x2B, 0x9E,  //  ...p.+.
                /* 2128 */  0x5E, 0x1E, 0x6D, 0xDE, 0x2C, 0x0C, 0x18, 0xCF,  // ^.m.,...
                /* 2130 */  0xC3, 0x78, 0xB9, 0xC1, 0x9E, 0x6E, 0x80, 0xEF,  // .x...n..
                /* 2138 */  0xFF, 0xFF, 0x30, 0x08, 0xF0, 0xF2, 0x1E, 0xF1,  // ..0.....
                /* 2140 */  0x30, 0x08, 0x2C, 0xFF, 0xFF, 0x87, 0x41, 0x80,  // 0.,...A.
                /* 2148 */  0xFF, 0xFF, 0xFF, 0xD3, 0x0D, 0x38, 0x0E, 0x37,  // .....8.7
                /* 2150 */  0xC1, 0x9E, 0x66, 0x7C, 0x79, 0x38, 0x86, 0x80,  // ..f|y8..
                /* 2158 */  0xEF, 0x82, 0x30, 0xCF, 0x37, 0x80, 0x0D, 0x85,  // ..0.7...
                /* 2160 */  0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0, 0x4C,  // 6}j4j..L
                /* 2168 */  0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4, 0x18,  // .2.j....
                /* 2170 */  0xC1, 0x27, 0x84, 0x22, 0x41, 0xE8, 0x90, 0xE0,  // .'."A...
                /* 2178 */  0xB8, 0xEF, 0x04, 0x81, 0x38, 0xF4, 0xDB, 0x43,  // ....8..C
                /* 2180 */  0x20, 0x16, 0xF3, 0x2E, 0x10, 0x88, 0xC5, 0xEA,  //  .......
                /* 2188 */  0x00, 0x61, 0xA2, 0x8D, 0x00, 0x51, 0x25, 0x20,  // .a...Q% 
                /* 2190 */  0x4C, 0xFE, 0xDB, 0x41, 0x20, 0x0E, 0xA1, 0x05,  // L..A ...
                /* 2198 */  0x84, 0x89, 0xF7, 0x02, 0xC2, 0xE2, 0xAC, 0x54,  // .......T
                /* 21A0 */  0x20, 0x0E, 0xE5, 0x06, 0x84, 0x85, 0x59, 0x9D,  //  .....Y.
                /* 21A8 */  0x40, 0x1C, 0xCF, 0xCE, 0xF1, 0x81, 0x1A, 0x02,  // @.......
                /* 21B0 */  0x61, 0x32, 0x1E, 0x3D, 0x02, 0x71, 0x7C, 0x10,  // a2.=.q|.
                /* 21B8 */  0x2A, 0x48, 0x13, 0x08, 0x13, 0x65, 0x0A, 0x84,  // *H...e..
                /* 21C0 */  0x49, 0x94, 0x05, 0xC2, 0x44, 0xFA, 0x1A, 0x14,  // I...D...
                /* 21C8 */  0xFD, 0x19, 0x08, 0xC4, 0x51, 0x40, 0xA8, 0x90,  // ....Q@..
                /* 21D0 */  0xE7, 0x8C, 0x36, 0x25, 0x01, 0xB2, 0x40, 0x04,  // ..6%..@.
                /* 21D8 */  0x64, 0xB9, 0x0F, 0x96, 0x40, 0x44, 0x3C, 0x88,  // d...@D<.
                /* 21E0 */  0x80, 0x1C, 0x44, 0x1C, 0x10, 0x8B, 0x05, 0x22,  // ..D...."
                /* 21E8 */  0x20, 0x47, 0x54, 0x07, 0xC4, 0x02, 0x83, 0x08,  //  GT.....
                /* 21F0 */  0xC8, 0xE1, 0xE5, 0x01, 0x31, 0x29, 0xF6, 0x86,  // ....1)..
                /* 21F8 */  0x43, 0xFD, 0x01, 0x31, 0x89, 0xFE, 0xFE, 0xFF,  // C..1....
                /* 2200 */  0x40, 0x4C, 0xF0, 0x27, 0x20, 0x10, 0x91, 0x0F,  // @L.' ...
                /* 2208 */  0xA2, 0xE1, 0x90, 0x9F, 0x40, 0x20, 0x12, 0x0C,  // ....@ ..
                /* 2210 */  0x44, 0x40, 0x0E, 0xF8, 0x38, 0x10, 0x90, 0xE3,  // D@..8...
                /* 2218 */  0x82, 0x08, 0xC8, 0x91, 0xDF, 0x0D, 0x81, 0x48,  // .......H
                /* 2220 */  0x7E, 0x10, 0x01, 0x39, 0xBF, 0x48, 0x20, 0xA6,  // ~..9.H .
                /* 2228 */  0xE6, 0xC1, 0x24, 0x20, 0xEB, 0xFA, 0xC3, 0x07,  // ..$ ....
                /* 2230 */  0x22, 0x2A, 0x41, 0x04, 0x64, 0xA5, 0xEF, 0x85,  // "*A.d...
                /* 2238 */  0x40, 0x44, 0x36, 0x88, 0x80, 0x2C, 0xFB, 0xD1,  // @D6..,..
                /* 2240 */  0x10, 0x88, 0x84, 0x00, 0xD1, 0x11, 0x80, 0xBC,  // ........
                /* 2248 */  0xC0, 0x04, 0xE4, 0x70, 0x20, 0x3A, 0x0E, 0x10,  // ...p :..
                /* 2250 */  0xA3, 0x40, 0x4C, 0x3A, 0x88, 0x06, 0x4D, 0x9E,  // .@L:..M.
                /* 2258 */  0x0B, 0x81, 0x88, 0x34, 0x10, 0x01, 0x59, 0xDA,  // ...4..Y.
                /* 2260 */  0x7F, 0x22, 0x10, 0x11, 0x0A, 0x22, 0x20, 0x0B,  // ."..." .
                /* 2268 */  0xD5, 0x3A, 0x10, 0x0A, 0x22, 0x20, 0x0B, 0x7F,  // .:.." ..
                /* 2270 */  0x68, 0x08, 0xC8, 0x31, 0x40, 0x34, 0x70, 0xA2,  // h..1@4p.
                /* 2278 */  0x76, 0xE0, 0x14, 0x44, 0x40, 0x0E, 0xF6, 0x9A,  // v..D@...
                /* 2280 */  0x08, 0x44, 0x62, 0x82, 0x08, 0xC8, 0x61, 0xF5,  // .Db...a.
                /* 2288 */  0x02, 0xB1, 0xE4, 0x20, 0x02, 0x72, 0xF0, 0xCF,  // ... .r..
                /* 2290 */  0x44, 0x20, 0x22, 0x43, 0x30, 0x10, 0xD3, 0xF1,  // D "C0...
                /* 2298 */  0x80, 0x09, 0x44, 0x44, 0x81, 0xE8, 0xA0, 0x40,  // ..DD...@
                /* 22A0 */  0x80, 0x68, 0x56, 0x20, 0x9A, 0xE1, 0x95, 0x25,  // .hV ...%
                /* 22A8 */  0x20, 0x07, 0x02, 0x11, 0x90, 0xD3, 0x7C, 0x57,  //  .....|W
                /* 22B0 */  0x04, 0xE4, 0x6C, 0x20, 0x02, 0x72, 0x56, 0xCD,  // ..l .rV.
                /* 22B8 */  0x40, 0x2C, 0x38, 0x88, 0x80, 0x1C, 0xE1, 0x25,  // @,8....%
                /* 22C0 */  0x23, 0x20, 0xE7, 0x01, 0xD1, 0xF1, 0x81, 0x88,  // # ......
                /* 22C8 */  0x06, 0x62, 0xD1, 0x40, 0x34, 0x28, 0xA2, 0x7A,  // .b.@4(.z
                /* 22D0 */  0x50, 0x14, 0x44, 0x03, 0x21, 0x4F, 0xA2, 0x03,  // P.D.!O..
                /* 22D8 */  0x61, 0x20, 0x1A, 0x08, 0x79, 0x45, 0x69, 0x20,  // a ..yEi 
                /* 22E0 */  0x04, 0x44, 0x40, 0x8E, 0xF9, 0x6E, 0x11, 0x90,  // .D@..n..
                /* 22E8 */  0x33, 0x83, 0xE8, 0x60, 0x40, 0x9E, 0x21, 0x81,  // 3..`@.!.
                /* 22F0 */  0xC8, 0xFB, 0x45, 0x40, 0x44, 0xC3, 0x1F, 0x4C,  // ..E@D..L
                /* 22F8 */  0x40, 0x16, 0x04, 0x22, 0x20, 0x47, 0x03, 0xA2,  // @.." G..
                /* 2300 */  0x39, 0x95, 0xFF, 0xFF, 0x81, 0x58, 0xC8, 0xB7,  // 9....X..
                /* 2308 */  0x4C, 0x20, 0x12, 0x19, 0x44, 0x87, 0x04, 0xF2,  // L ..D...
                /* 2310 */  0x78, 0x09, 0x44, 0xC4, 0xBC, 0xC6, 0x04, 0xE4,  // x.D.....
                /* 2318 */  0x58, 0x20, 0x02, 0x72, 0x46, 0x20, 0x1A, 0xF0,  // X .rF ..
                /* 2320 */  0x73, 0xF2, 0xD0, 0xC0, 0x40, 0x74, 0xD4, 0x20,  // s...@t. 
                /* 2328 */  0xEA, 0x81, 0x98, 0x1C, 0x10, 0x01, 0x59, 0xCF,  // ......Y.
                /* 2330 */  0x3B, 0x49, 0x40, 0x16, 0x07, 0xA2, 0x81, 0x11,  // ;I@.....
                /* 2338 */  0x20, 0x9A, 0x19, 0x88, 0xAA, 0xFF, 0x5B, 0x09,  //  .....[.
                /* 2340 */  0xC8, 0x51, 0x40, 0x04, 0xE4, 0x1C, 0xFA, 0x81,  // .Q@.....
                /* 2348 */  0x58, 0x2A, 0x10, 0x0D, 0x8A, 0x3C, 0xD5, 0x04,  // X*...<..
                /* 2350 */  0xE4, 0xC4, 0x20, 0x02, 0xB2, 0xF6, 0x02, 0x40,  // .. ....@
                /* 2358 */  0x2C, 0x08, 0x88, 0x80, 0x9C, 0x22, 0x01, 0x10,  // ,...."..
                /* 2360 */  0xCB, 0x04, 0xA2, 0x41, 0x91, 0x08, 0x40, 0x2C,  // ...A..@,
                /* 2368 */  0x2D, 0x88, 0x80, 0xAC, 0xBB, 0xC2, 0x41, 0x82,  // -.....A.
                /* 2370 */  0x82, 0x08, 0xC8, 0x6A, 0x32, 0x1C, 0x20, 0x28,  // ...j2. (
                /* 2378 */  0x88, 0x06, 0x42, 0x80, 0x68, 0x62, 0x20, 0x1A,  // ..B.hb .
                /* 2380 */  0xB7, 0x03, 0x10, 0x0B, 0x0F, 0xA2, 0xC3, 0x02,  // ........
                /* 2388 */  0x49, 0x71, 0x58, 0xA0, 0x20, 0x3A, 0x2C, 0x10,  // IqX. :,.
                /* 2390 */  0x20, 0x9A, 0x15, 0x88, 0x8A, 0x6E, 0x01, 0xC4,  //  ....n..
                /* 2398 */  0x12, 0x80, 0xE8, 0xE0, 0x42, 0x62, 0x00, 0xB1,  // ....Bb..
                /* 23A0 */  0x30, 0x20, 0x02, 0x72, 0xB2, 0x1C, 0x07, 0x09,  // 0 .r....
                /* 23A8 */  0x0A, 0xA2, 0x83, 0x08, 0xE9, 0x01, 0xC4, 0xD4,  // ........
                /* 23B0 */  0x83, 0xE8, 0xD0, 0x42, 0x82, 0x00, 0x31, 0x4D,  // ...B..1M
                /* 23B8 */  0x20, 0x02, 0x72, 0x3A, 0x20, 0x1A, 0x15, 0x88,  //  .r: ...
                /* 23C0 */  0x06, 0x2D, 0x02, 0xC4, 0x62, 0x83, 0x08, 0xC8,  // .-..b...
                /* 23C8 */  0x0A, 0xA2, 0x1C, 0x04, 0x28, 0x88, 0x0E, 0x18,  // ....(...
                /* 23D0 */  0x04, 0x88, 0xA6, 0x04, 0xA2, 0x72, 0xAB, 0x00,  // .....r..
                /* 23D8 */  0x31, 0xED, 0x20, 0x3A, 0x70, 0x90, 0x2C, 0x07,  // 1. :p.,.
                /* 23E0 */  0x0E, 0x0A, 0x22, 0x20, 0x67, 0x0A, 0x03, 0xC4,  // .." g...
                /* 23E8 */  0x02, 0x82, 0x08, 0xC8, 0x52, 0xCB, 0x00, 0x31,  // ....R..1
                /* 23F0 */  0xDD, 0x65, 0xFE, 0xFF, 0x07, 0x04, 0x9A, 0xE6,  // .e......
                /* 23F8 */  0x80, 0x42, 0x41, 0x04, 0xE4, 0x94, 0x40, 0x34,  // .BA...@4
                /* 2400 */  0x32, 0x10, 0xCD, 0xDB, 0x06, 0x88, 0xA5, 0x07,  // 2.......
                /* 2408 */  0x11, 0x90, 0xA5, 0xE4, 0x01, 0x62, 0xBA, 0x40,  // .....b.@
                /* 2410 */  0x04, 0xE4, 0x84, 0x40, 0x34, 0x2E, 0x10, 0xD5,  // ...@4...
                /* 2418 */  0xDD, 0xE7, 0x40, 0x40, 0x41, 0x04, 0xE4, 0x04,  // ..@@A...
                /* 2420 */  0x81, 0x0E, 0x1B, 0x14, 0x44, 0x07, 0x1B, 0x92,  // ....D...
                /* 2428 */  0x08, 0x88, 0xE5, 0x05, 0x11, 0x90, 0x95, 0x37,  // .......7
                /* 2430 */  0x1A, 0x1C, 0x05, 0xD1, 0x01, 0x82, 0x3C, 0xF0,  // ......<.
                /* 2438 */  0x74, 0x80, 0x20, 0x20, 0x3A, 0x1A, 0x11, 0x20,  // t.  :.. 
                /* 2440 */  0xAA, 0xA0, 0xD2, 0x11, 0x88, 0x82, 0xE8, 0x60,  // .......`
                /* 2448 */  0x41, 0x32, 0x01, 0x31, 0x59, 0xA1, 0x80, 0x98,  // A2.1Y...
                /* 2450 */  0x46, 0x10, 0x01, 0x59, 0x63, 0x29, 0x20, 0xA6,  // F..Yc) .
                /* 2458 */  0x18, 0x44, 0x40, 0xD6, 0xDC, 0xEA, 0x70, 0x40,  // .D@...p@
                /* 2460 */  0x41, 0x04, 0x64, 0x45, 0xB1, 0x80, 0x98, 0x3E,  // A.dE...>
                /* 2468 */  0x10, 0x01, 0x59, 0x5D, 0x2E, 0x20, 0x26, 0x15,  // ..Y]. &.
                /* 2470 */  0x44, 0x03, 0x27, 0xBD, 0x80, 0x98, 0x70, 0x10,  // D.'...p.
                /* 2478 */  0x1D, 0x14, 0x48, 0xB1, 0x83, 0x02, 0x05, 0x11,  // ..H.....
                /* 2480 */  0x90, 0xC5, 0x25, 0x03, 0xA6, 0x20, 0x02, 0x26,  // ..%.. .&
                /* 2488 */  0xD1, 0x0E, 0x01, 0x14, 0x44, 0x03, 0x26, 0xD5,  // ....D.&.
                /* 2490 */  0x80, 0x58, 0x0A, 0x10, 0x01, 0x39, 0x4B, 0x37,  // .X...9K7
                /* 2498 */  0x20, 0x96, 0x0C, 0x44, 0x87, 0x1E, 0x12, 0x0E,  //  ..D....
                /* 24A0 */  0x98, 0x82, 0x08, 0xC8, 0x49, 0xD2, 0x01, 0xB1,  // ....I...
                /* 24A8 */  0x5C, 0x20, 0x3A, 0x8C, 0x90, 0x78, 0x87, 0x11,  // \ :..x..
                /* 24B0 */  0x0A, 0x22, 0x20, 0x2B, 0xAE, 0x77, 0x30, 0xA2,  // ." +.w0.
                /* 24B8 */  0x20, 0x3A, 0x10, 0x90, 0x7C, 0x07, 0x02, 0x0A,  //  :..|...
                /* 24C0 */  0x22, 0x20, 0x67, 0x04, 0xA2, 0x81, 0x81, 0x68,  // " g....h
                /* 24C8 */  0xE0, 0x7E, 0x40, 0x2C, 0x3E, 0x88, 0x06, 0x4F,  // .~@,>..O
                /* 24D0 */  0x0A, 0x0E, 0x9E, 0x26, 0x3C, 0x64, 0x50, 0x10,  // ...&<dP.
                /* 24D8 */  0x01, 0x39, 0x6C, 0xC2, 0xFF, 0xFF, 0x21, 0x8B,  // .9l...!.
                /* 24E0 */  0x36, 0x3C, 0x94, 0x50, 0x10, 0x1D, 0x84, 0x48,  // 6<.P...H
                /* 24E8 */  0xC4, 0x83, 0x10, 0x05, 0xD1, 0xA1, 0x87, 0x00,  // ........
                /* 24F0 */  0x51, 0x19, 0x15, 0x0F, 0x31, 0xB4, 0xE3, 0x21,  // Q...1..!
                /* 24F8 */  0x86, 0x82, 0x68, 0x10, 0x04, 0x88, 0x66, 0x05,  // ..h...f.
                /* 2500 */  0xA2, 0xBA, 0x43, 0x1E, 0x18, 0x28, 0x88, 0x0E,  // ..C..(..
                /* 2508 */  0x5B, 0xA4, 0x24, 0x10, 0x53, 0x07, 0xA2, 0xC3,  // [.$.S...
                /* 2510 */  0x00, 0x49, 0x09, 0xC4, 0xB4, 0x82, 0x08, 0xC8,  // .I......
                /* 2518 */  0x7A, 0x63, 0x1E, 0x3C, 0x28, 0x88, 0x0E, 0x0C,  // zc.<(...
                /* 2520 */  0xA4, 0x26, 0x30, 0x05, 0x11, 0x90, 0xD3, 0x02,  // .&0.....
                /* 2528 */  0xD1, 0xEC, 0x40, 0x34, 0x4B, 0xCE, 0x43, 0x00,  // ..@4K.C.
                /* 2530 */  0x05, 0xD1, 0x21, 0x80, 0xF4, 0x3C, 0x04, 0x50,  // ..!..<.P
                /* 2538 */  0x10, 0x1D, 0xA4, 0x48, 0x51, 0x20, 0x96, 0x01,  // ...HQ ..
                /* 2540 */  0x44, 0x87, 0x05, 0x92, 0x14, 0x88, 0xC9, 0x03,  // D.......
                /* 2548 */  0x11, 0x90, 0xA3, 0x02, 0xD1, 0xDC, 0x40, 0x34,  // ......@4
                /* 2550 */  0x43, 0xD3, 0x83, 0x10, 0x05, 0x11, 0x90, 0x03,  // C.......
                /* 2558 */  0x45, 0x05, 0x62, 0xF1, 0x40, 0x74, 0xB8, 0x20,  // E.b.@t. 
                /* 2560 */  0x59, 0x0F, 0x02, 0x14, 0x44, 0x07, 0x24, 0xD2,  // Y...D.$.
                /* 2568 */  0x15, 0x98, 0x82, 0x08, 0xC8, 0x02, 0xC3, 0x02,  // ........
                /* 2570 */  0x31, 0xB9, 0x20, 0x3A, 0x0C, 0x10, 0x20, 0x2A,  // 1. :.. *
                /* 2578 */  0xA6, 0x2C, 0x10, 0x0B, 0x07, 0xA2, 0x83, 0x0A,  // .,......
                /* 2580 */  0x01, 0xA2, 0x49, 0xDB, 0x1E, 0x54, 0x28, 0x88,  // ..I..T(.
                /* 2588 */  0x8E, 0x71, 0x24, 0x2E, 0x10, 0x4B, 0x04, 0xA2,  // .q$..K..
                /* 2590 */  0x81, 0x93, 0xBA, 0x07, 0x09, 0x0A, 0x22, 0x20,  // ......" 
                /* 2598 */  0xC7, 0x06, 0xA2, 0x1A, 0xF2, 0x1E, 0x08, 0x68,  // .......h
                /* 25A0 */  0x5F, 0x20, 0xA6, 0x08, 0x44, 0x40, 0x56, 0x55,  // _ ..D@VU
                /* 25A8 */  0xF8, 0xC0, 0x41, 0x41, 0x04, 0xE4, 0xD4, 0x40,  // ..AA...@
                /* 25B0 */  0x54, 0x43, 0xE2, 0x03, 0x0B, 0x05, 0x11, 0x90,  // TC......
                /* 25B8 */  0x13, 0x02, 0x51, 0xC5, 0x8D, 0x81, 0x98, 0xFE,  // ..Q.....
                /* 25C0 */  0xC6, 0xFF, 0xFF, 0xC3, 0x00, 0x8D, 0x7C, 0x18,  // ......|.
                /* 25C8 */  0xA0, 0x20, 0x1A, 0x24, 0xC9, 0x0C, 0xC4, 0xD4,  // . .$....
                /* 25D0 */  0x82, 0x08, 0xC8, 0xD9, 0x81, 0xA8, 0x90, 0xCE,  // ........
                /* 25D8 */  0x87, 0x3D, 0x0A, 0xA2, 0x41, 0x10, 0x20, 0xAA,  // .=..A. .
                /* 25E0 */  0x36, 0xF4, 0xE1, 0x8C, 0x82, 0xE8, 0xA0, 0x43,  // 6......C
                /* 25E8 */  0x4A, 0x1F, 0x74, 0x28, 0x88, 0x0E, 0x0E, 0x04,  // J.t(....
                /* 25F0 */  0x88, 0x66, 0x05, 0xA2, 0x51, 0x53, 0x1F, 0xBA,  // .f..QS..
                /* 25F8 */  0x28, 0x88, 0x0E, 0x34, 0xA4, 0xF6, 0x41, 0x87,  // (..4..A.
                /* 2600 */  0x82, 0xE8, 0x90, 0x44, 0x80, 0x68, 0x5C, 0x20,  // ...D.h\ 
                /* 2608 */  0x2A, 0x3F, 0xF7, 0x81, 0x84, 0x82, 0xE8, 0x40,  // *?.....@
                /* 2610 */  0x42, 0x7A, 0x0F, 0x9C, 0x82, 0x08, 0xC8, 0xD1,  // Bz......
                /* 2618 */  0x81, 0xA8, 0x90, 0xE0, 0x07, 0x10, 0x0A, 0x22,  // ......."
                /* 2620 */  0x20, 0x87, 0x04, 0xA2, 0x92, 0x8B, 0x03, 0xB1,  //  .......
                /* 2628 */  0x00, 0x20, 0x02, 0x72, 0x80, 0xE6, 0x40, 0x2C,  // . .r..@,
                /* 2630 */  0x0D, 0x88, 0x0E, 0x61, 0x24, 0xFA, 0x21, 0x8C,  // ...a$.!.
                /* 2638 */  0x82, 0xE8, 0x50, 0x44, 0xB2, 0x0F, 0x8E, 0x82,  // ..PD....
                /* 2640 */  0xE8, 0x40, 0x45, 0xBA, 0x03, 0xB1, 0x24, 0x20,  // .@E...$ 
                /* 2648 */  0x3A, 0x5C, 0x91, 0xF2, 0x40, 0x2C, 0x14, 0x88,  // :\..@,..
                /* 2650 */  0x06, 0x4D, 0xD2, 0x03, 0xB1, 0x88, 0x20, 0x3A,  // .M.... :
                /* 2658 */  0x20, 0x91, 0xF8, 0x07, 0x05, 0x0A, 0x22, 0x20,  //  ....." 
                /* 2660 */  0xC7, 0xA8, 0x0F, 0x4C, 0x41, 0x04, 0x4C, 0x4E,  // ...LA.LN
                /* 2668 */  0xAB, 0x3A, 0x00, 0x10, 0x10, 0x1D, 0x80, 0xC8,  // .:......
                /* 2670 */  0x0D, 0x56, 0x87, 0x1E, 0x02, 0xA2, 0x03, 0x02,  // .V......
                /* 2678 */  0x51, 0x00, 0xC4, 0x34, 0x38, 0x00, 0x62, 0x99,  // Q..48.b.
                /* 2680 */  0x40, 0x04, 0x4C, 0x80, 0x68, 0x42, 0x0B, 0x40,  // @.L.hB.@
                /* 2688 */  0xEC, 0x88, 0x19, 0x88, 0xC5, 0xD5, 0x00, 0xC4,  // ........
                /* 2690 */  0xC2, 0x83, 0x08, 0xC8, 0x12, 0x4C, 0x00, 0x31,  // .....L.1
                /* 2698 */  0x41, 0x20, 0x3A, 0x04, 0x10, 0x20, 0x1A, 0x17,  // A :.. ..
                /* 26A0 */  0x88, 0x46, 0x76, 0x01, 0xC4, 0xF2, 0xBB, 0xF8,  // .Fv.....
                /* 26A8 */  0xFF, 0x03, 0xB1, 0x2C, 0x32, 0x80, 0x58, 0x30,  // ...,2.X0
                /* 26B0 */  0x10, 0x1D, 0x80, 0x88, 0x0D, 0x20, 0x26, 0x18,  // ..... &.
                /* 26B8 */  0x44, 0x07, 0x13, 0xA2, 0x03, 0x88, 0xA9, 0x07,  // D.......
                /* 26C0 */  0xD1, 0x80, 0x89, 0x10, 0x20, 0x96, 0x0A, 0x44,  // .... ..D
                /* 26C8 */  0x40, 0x56, 0x69, 0x04, 0x88, 0x69, 0x06, 0xD1,  // @Vi..i..
                /* 26D0 */  0xE1, 0x8A, 0x28, 0x01, 0x62, 0x7A, 0x40, 0x74,  // ..(.bz@t
                /* 26D8 */  0x08, 0x20, 0x40, 0x34, 0x2B, 0x10, 0x4D, 0x2E,  // . @4+.M.
                /* 26E0 */  0x05, 0x88, 0xE9, 0xB0, 0x02, 0xC4, 0xD4, 0x78,  // .......x
                /* 26E8 */  0x01, 0x62, 0xDA, 0x40, 0x04, 0x64, 0x85, 0x66,  // .b.@.d.f
                /* 26F0 */  0x80, 0x98, 0x5E, 0x10, 0x1D, 0x2E, 0x88, 0x1B,  // ..^.....
                /* 26F8 */  0x20, 0xA6, 0x1F, 0x44, 0x87, 0x13, 0x62, 0x07,  //  ..D..b.
                /* 2700 */  0x88, 0x25, 0x02, 0x11, 0x90, 0x53, 0xF9, 0x01,  // .%...S..
                /* 2708 */  0x62, 0x19, 0x41, 0x04, 0xE4, 0x9C, 0x86, 0x80,  // b.A.....
                /* 2710 */  0x58, 0x6A, 0x10, 0x1D, 0x30, 0x88, 0x23, 0x20,  // Xj..0.# 
                /* 2718 */  0xA6, 0x44, 0x12, 0x10, 0xD3, 0xA3, 0x09, 0x88,  // .D......
                /* 2720 */  0xA9, 0x03, 0xD1, 0x60, 0x88, 0xA8, 0xC1, 0x50,  // ...`...P
                /* 2728 */  0x10, 0x1D, 0x9E, 0x88, 0x2A, 0x20, 0x16, 0x00,  // ....* ..
                /* 2730 */  0x44, 0x40, 0xD6, 0xEF, 0x0A, 0x88, 0xA5, 0x01,  // D@......
                /* 2738 */  0x11, 0x90, 0x13, 0xD9, 0x02, 0x62, 0xF1, 0x40,  // .....b.@
                /* 2740 */  0x74, 0xA0, 0x21, 0xBA, 0x80, 0x98, 0x6C, 0x10,  // t.!...l.
                /* 2748 */  0x01, 0x59, 0xB5, 0x2F, 0x20, 0x96, 0x01, 0x44,  // .Y./ ..D
                /* 2750 */  0x40, 0xCE, 0x67, 0x0C, 0x88, 0xA5, 0x05, 0xD1,  // @.g.....
                /* 2758 */  0x21, 0x82, 0x28, 0x03, 0x62, 0x49, 0x40, 0x74,  // !.(.bI@t
                /* 2760 */  0xF8, 0x24, 0xCE, 0x80, 0x98, 0x4A, 0x10, 0x1D,  // .$...J..
                /* 2768 */  0x02, 0x88, 0x35, 0x20, 0x26, 0x19, 0x44, 0x07,  // ..5 &.D.
                /* 2770 */  0x0C, 0xA2, 0x6D, 0x50, 0x14, 0x44, 0x87, 0x08,  // ..mP.D..
                /* 2778 */  0x22, 0x0E, 0x88, 0x85, 0x02, 0xD1, 0xF1, 0x95,  // ".......
                /* 2780 */  0x98, 0x03, 0xA6, 0x20, 0x3A, 0xB0, 0x11, 0x77,  // ... :..w
                /* 2788 */  0x40, 0x2C, 0x06, 0x88, 0x0E, 0xA2, 0xC4, 0x1E,  // @,......
                /* 2790 */  0x10, 0xCB, 0x06, 0xA2, 0x81, 0x10, 0x7D, 0xC0,  // ......}.
                /* 2798 */  0x54, 0xDF, 0xFF, 0x7F, 0x20, 0xD4, 0xDF, 0x40,  // T... ..@
                /* 27A0 */  0x28, 0x88, 0x0E, 0xAC, 0xC4, 0x20, 0x10, 0xCB,  // (.... ..
                /* 27A8 */  0x05, 0xA2, 0x81, 0x13, 0x85, 0x40, 0x4C, 0x2E,  // .....@L.
                /* 27B0 */  0x88, 0x0E, 0x73, 0xC4, 0x21, 0x10, 0x13, 0x0F,  // ..s.!...
                /* 27B8 */  0xA2, 0x83, 0x09, 0xB1, 0x08, 0xC4, 0xB2, 0x80,  // ........
                /* 27C0 */  0xE8, 0x10, 0x41, 0x34, 0x02, 0xB1, 0x64, 0x20,  // ..A4..d 
                /* 27C8 */  0x3A, 0x5C, 0x10, 0x91, 0x07, 0x0A, 0x0A, 0xA2,  // :\......
                /* 27D0 */  0x81, 0x11, 0x93, 0x40, 0x2C, 0x05, 0x88, 0x0E,  // ...@,...
                /* 27D8 */  0x89, 0x44, 0x25, 0x10, 0xCB, 0x04, 0x22, 0x20,  // .D%..." 
                /* 27E0 */  0x67, 0x93, 0x09, 0xC4, 0x82, 0x82, 0x68, 0x60,  // g.....h`
                /* 27E8 */  0xC4, 0xE6, 0x81, 0x81, 0x82, 0xE8, 0x50, 0x40,  // ......P@
                /* 27F0 */  0x74, 0x1E, 0x0A, 0x28, 0x88, 0x0E, 0x28, 0x44,  // t..(..(D
                /* 27F8 */  0x28, 0x10, 0x8B, 0x06, 0xA2, 0x83, 0x26, 0x31,  // (.....&1
                /* 2800 */  0x3A, 0x00, 0x0A, 0xA2, 0x43, 0x28, 0x71, 0x0A,  // :...C(q.
                /* 2808 */  0xC4, 0xA2, 0x83, 0x68, 0xA0, 0x44, 0xEA, 0x61,  // ...h.D.a
                /* 2810 */  0x83, 0x82, 0xE8, 0x10, 0x48, 0xB4, 0x02, 0xB1,  // ....H...
                /* 2818 */  0x98, 0x20, 0x3A, 0x40, 0x11, 0xAF, 0x40, 0x2C,  // . :@..@,
                /* 2820 */  0x04, 0x88, 0x80, 0x89, 0x59, 0x60, 0x0A, 0xA2,  // ....Y`..
                /* 2828 */  0x43, 0x0E, 0x71, 0x7B, 0xC8, 0xA0, 0x20, 0x3A,  // C.q{.. :
                /* 2830 */  0xE4, 0x10, 0xB9, 0x40, 0x2C, 0x38, 0x88, 0x0E,  // ...@,8..
                /* 2838 */  0x24, 0xC4, 0xEF, 0x81, 0x84, 0x82, 0x08, 0x98,  // $.......
                /* 2840 */  0x00, 0xD1, 0xB0, 0x40, 0x34, 0xB0, 0x61, 0x20,  // ...@4.a 
                /* 2848 */  0x96, 0x1E, 0x44, 0x07, 0x63, 0xA2, 0x18, 0x88,  // ..D.c...
                /* 2850 */  0x49, 0x71, 0x0C, 0xC4, 0x44, 0x59, 0x06, 0x62,  // Iq..DY.b
                /* 2858 */  0x12, 0x41, 0x74, 0xD0, 0x25, 0x9E, 0x81, 0x98,  // .At.%...
                /* 2860 */  0x6A, 0x10, 0x0D, 0x8C, 0x88, 0x1E, 0x18, 0x05,  // j.......
                /* 2868 */  0xD1, 0x41, 0x81, 0xA8, 0x06, 0x62, 0xE1, 0x40,  // .A...b.@
                /* 2870 */  0x74, 0x00, 0x26, 0xAE, 0x81, 0x98, 0x74, 0x10,  // t.&...t.
                /* 2878 */  0x1D, 0x76, 0x88, 0xED, 0xC1, 0x53, 0x10, 0x0D,  // .v...S..
                /* 2880 */  0x92, 0xE8, 0x1E, 0x24, 0xD5, 0xFD, 0xFF, 0x3F,  // ...$...?
                /* 2888 */  0x40, 0x50, 0xDF, 0x87, 0x06, 0x0A, 0xA2, 0x83,  // @P......
                /* 2890 */  0x01, 0x31, 0x7E, 0x30, 0xA0, 0x20, 0x02, 0xB2,  // .1~0. ..
                /* 2898 */  0x1C, 0xE5, 0x07, 0x13, 0x0A, 0xA2, 0xC3, 0x1C,  // ........
                /* 28A0 */  0x01, 0xA2, 0x81, 0x81, 0x68, 0x5E, 0xE7, 0x83,  // ....h^..
                /* 28A8 */  0xA4, 0x20, 0x3A, 0xB0, 0x10, 0xED, 0x07, 0x16,  // . :.....
                /* 28B0 */  0x0A, 0xA2, 0x03, 0x0B, 0x01, 0xA2, 0x59, 0x81,  // ......Y.
                /* 28B8 */  0x68, 0x5E, 0xF1, 0xC0, 0x14, 0x44, 0x07, 0x3E,  // h^...D.>
                /* 28C0 */  0x62, 0xFE, 0x30, 0x41, 0x41, 0x74, 0xB0, 0x20,  // b.0AAt. 
                /* 28C8 */  0xEA, 0x0F, 0x31, 0x14, 0x44, 0x83, 0x25, 0xF2,  // ..1.D.%.
                /* 28D0 */  0x0F, 0x21, 0x14, 0x44, 0x07, 0x32, 0x62, 0x1F,  // .!.D.2b.
                /* 28D8 */  0x88, 0x05, 0x02, 0xD1, 0xC1, 0x8C, 0xF8, 0x1F,  // ........
                /* 28E0 */  0x14, 0x05, 0xD1, 0xA1, 0x82, 0x04, 0x00, 0x62,  // .......b
                /* 28E8 */  0x61, 0x40, 0x04, 0xE4, 0x48, 0x09, 0x80, 0x58,  // a@..H..X
                /* 28F0 */  0x40, 0x10, 0x1D, 0x30, 0x48, 0x83, 0x03, 0x06,  // @..0H...
                /* 28F8 */  0x05, 0xD1, 0x21, 0x82, 0x54, 0x00, 0xA6, 0x20,  // ..!.T.. 
                /* 2900 */  0x3A, 0x60, 0x90, 0x0C, 0x07, 0x0C, 0x0A, 0xA2,  // :`......
                /* 2908 */  0x43, 0x2A, 0x09, 0x71, 0x70, 0xA0, 0x20, 0x3A,  // C*.qp. :
                /* 2910 */  0x78, 0x92, 0x12, 0x40, 0x2C, 0x33, 0x88, 0x80,  // x..@,3..
                /* 2918 */  0x9C, 0xBB, 0x05, 0x10, 0x53, 0x11, 0xE3, 0x70,  // ....S..p
                /* 2920 */  0x44, 0x41, 0x74, 0x38, 0x22, 0x40, 0x34, 0x63,  // DAt8"@4c
                /* 2928 */  0x0E, 0x20, 0x96, 0x18, 0x44, 0x40, 0xCE, 0x1C,  // . ..D@..
                /* 2930 */  0x04, 0x88, 0x09, 0x28, 0x02, 0xC4, 0xF2, 0x83,  // ...(....
                /* 2938 */  0xE8, 0x40, 0x4A, 0x92, 0x1C, 0x5A, 0x68, 0x94,  // .@J..Zh.
                /* 2940 */  0x43, 0x0B, 0x05, 0x11, 0x90, 0x75, 0x66, 0x39,  // C....uf9
                /* 2948 */  0x30, 0x50, 0x10, 0x1D, 0xD8, 0x48, 0x17, 0x20,  // 0P...H. 
                /* 2950 */  0xA6, 0x08, 0x44, 0x87, 0x1C, 0x52, 0x06, 0x88,  // ..D..R..
                /* 2958 */  0x89, 0x03, 0x11, 0x90, 0xB5, 0xA5, 0x01, 0x62,  // .......b
                /* 2960 */  0x4A, 0x41, 0x74, 0xB0, 0x21, 0x71, 0x80, 0x98,  // JAt.!q..
                /* 2968 */  0x6E, 0x10, 0x1D, 0x46, 0x49, 0x1E, 0x20, 0x96,  // n..FI. .
                /* 2970 */  0x23, 0xCF, 0xFF, 0x7F, 0xB0, 0x34, 0xD0, 0x60,  // #....4.`
                /* 2978 */  0x29, 0x88, 0x0E, 0xA4, 0xEC, 0x18, 0x42, 0x41,  // ).....BA
                /* 2980 */  0x78, 0x25, 0x10, 0x96, 0x36, 0x14, 0x08, 0xD3,  // x%..6...
                /* 2988 */  0x5A, 0x0A, 0x84, 0xA6, 0x1A, 0x00, 0xAD, 0x05,  // Z.......
                /* 2990 */  0xC2, 0x94, 0xE4, 0x02, 0xA1, 0xBD, 0x8E, 0x08,  // ........
                /* 2998 */  0x34, 0xD9, 0x80, 0x29, 0x08, 0x6F, 0x06, 0xC2,  // 4..).o..
                /* 29A0 */  0xFE, 0xFF                                       // ..
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If (Zero) {}
                ElseIf ((Arg0 == 0xE2))
                {
                    Return (EVT1) /* \GSA1.EVT1 */
                }

                Return (Zero)
            }

            Name (SAA0, Buffer (0x10)
            {
                /* 0000 */  0xF0, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00   // ........
            })
            Name (CCAA, Zero)
            Name (CCAB, Zero)
            Name (CCAC, Zero)
            Name (ECD0, Zero)
            Name (ECD1, Zero)
            Name (ECD2, Zero)
            Method (WCAA, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCAA == Zero)) {}
                }
                ElseIf ((CCAA != Zero)) {}
                CCAA = Arg0
            }

            Method (WED0, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD0 == Zero)) {}
                }
                ElseIf ((ECD0 != Zero)) {}
                ECD0 = Arg0
            }

            Method (WED1, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD1 == Zero)) {}
                }
                ElseIf ((ECD1 != Zero)) {}
                ECD1 = Arg0
            }

            Method (WED2, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((ECD2 == Zero)) {}
                }
                ElseIf ((ECD2 != Zero)) {}
                ECD2 = Arg0
            }

            Method (GETA, 1, NotSerialized)
            {
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WQAA, 1, NotSerialized)
            {
                Return (GETA (Arg0))
            }

            Method (SETA, 2, NotSerialized)
            {
                SAA0 = Arg1
                Return (SAA0) /* \GSA1.SAA0 */
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (SETA (Arg0, Arg1))
            }

            Method (WMBB, 3, Serialized)
            {
                If (Zero) {}
                ElseIf ((Arg1 == One))
                {
                    Return (GGG1 ())
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Return (GGG2 ())
                }
                ElseIf ((Arg1 == 0x03))
                {
                    Return (GGG3 ())
                }
                ElseIf ((Arg1 == 0x04))
                {
                    Return (GGG4 ())
                }
                ElseIf ((Arg1 == 0x05))
                {
                    Return (GGG5 ())
                }
                ElseIf ((Arg1 == 0x06))
                {
                    Return (GGG6 ())
                }
                ElseIf ((Arg1 == 0x07))
                {
                    Return (GGG7 ())
                }
                ElseIf ((Arg1 == 0x08))
                {
                    Return (GGG8 ())
                }
                ElseIf ((Arg1 == 0x0A))
                {
                    Return (GGG9 (Arg2))
                }
                ElseIf ((Arg1 == 0x0B))
                {
                    Return (GGGE ())
                }
                ElseIf ((Arg1 == 0x0C))
                {
                    Return (GGGF (Arg2))
                }
                ElseIf ((Arg1 == 0x0D))
                {
                    CreateWordField (Arg2, Zero, GGGI)
                    CreateWordField (Arg2, 0x02, GGGJ)
                    CreateWordField (Arg2, 0x04, GGGK)
                    GGGH (GGGI, GGGJ, GGGK)
                }
                ElseIf ((Arg1 == 0x0E))
                {
                    \GSA1.MPTS (ToInteger (Arg2))
                }
                ElseIf ((Arg1 == 0x0F))
                {
                    \GSA1.MWAK (ToInteger (Arg2))
                }
                ElseIf (((Arg1 >= 0x61) && (Arg1 <= 0x6D)))
                {
                    Name (SMD9, Buffer (0x04) {})
                    CreateWordField (SMD9, Zero, SMDA)
                    CreateDWordField (SMD9, Zero, SMDB)
                    CreateByteField (Arg2, Zero, SMD7)
                    CreateByteField (Arg2, One, SMD2)
                    CreateByteField (Arg2, 0x02, SMD3)
                    CreateByteField (Arg2, 0x03, SMD4)
                    CreateWordField (Arg2, 0x04, SMD5)
                    If ((Arg1 == 0x61))
                    {
                        Local0 = Zero
                        If ((SMD7 == 0x02))
                        {
                            Local0 = SMBB ()
                        }

                        Return (ToBuffer (Local0))
                    }
                    ElseIf ((Arg1 == 0x62))
                    {
                        Local0 = SMMC (SMD7, SMD2)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x63))
                    {
                        Local0 = SMMD (SMD7, SMD2)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x64))
                    {
                        Local0 = SMBB ()
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x65))
                    {
                        Local0 = SMM0 (SMD7, SMD2, SMD3)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x66))
                    {
                        Local0 = SMM1 (SMD7, SMD2)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x67))
                    {
                        Local0 = SMM2 (SMD7, SMD2, SMD3, SMD4)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x68))
                    {
                        Local0 = SMM3 (SMD7, SMD2, SMD3)
                        SMDA = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x69))
                    {
                        Local0 = SMM4 (SMD7, SMD2, SMD3, SMD5)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x6A))
                    {
                        Local0 = SMM5 (SMD7, SMD2, SMD3)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x6B))
                    {
                        CreateDWordField (Arg2, 0x03, SMD8)
                        CreateField (Arg2, 0x38, (SMD8 * 0x08), SMD6)
                        Local0 = SMM6 (SMD7, SMD2, SMD3, SMD6)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                    ElseIf ((Arg1 == 0x6C))
                    {
                        Local0 = SMM7 (SMD7, SMD2, SMD3)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6D))
                    {
                        CreateDWordField (Arg2, 0x03, SMDC)
                        CreateField (Arg2, 0x38, (SMDC * 0x08), SMDD)
                        Local0 = SMMB (SMD7, SMD2, SMD3, SMDD)
                        SMDB = Local0
                        Return (SMD9) /* \GSA1.WMBB.SMD9 */
                    }
                }
                ElseIf (((Arg1 >= 0x6E) && (Arg1 <= 0x75)))
                {
                    CreateWordField (Arg2, Zero, PID0)
                    CreateByteField (Arg2, 0x02, PID1)
                    CreateWordField (Arg2, 0x02, PID2)
                    CreateDWordField (Arg2, 0x02, PID3)
                    If ((Arg1 == 0x6E))
                    {
                        Local0 = PIO6 (PID0, Zero)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x6F))
                    {
                        PIO7 (PID0, Zero, PID1)
                    }
                    ElseIf ((Arg1 == 0x70))
                    {
                        Local0 = PIO6 (PID0, One)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x71))
                    {
                        PIO7 (PID0, One, PID2)
                    }
                    ElseIf ((Arg1 == 0x72))
                    {
                        Local0 = PIO6 (PID0, 0x02)
                        Return (Local0)
                    }
                    ElseIf ((Arg1 == 0x73))
                    {
                        PIO7 (PID0, 0x02, PID3)
                    }
                }
                ElseIf ((Arg1 == 0x76)) {}
                ElseIf ((Arg1 == 0x77)) {}
                ElseIf (((Arg1 >= 0x78) && (Arg1 <= 0x8B)))
                {
                    CreateByteField (Arg2, Zero, PCE0)
                    CreateByteField (Arg2, One, PCE1)
                    CreateByteField (Arg2, 0x02, PCE2)
                    CreateWordField (Arg2, 0x04, PCE3)
                    CreateByteField (Arg2, 0x06, PCE4)
                    CreateWordField (Arg2, 0x06, PCE5)
                    CreateDWordField (Arg2, 0x08, PCE6)
                    CreateQWordField (Arg2, 0x08, PCE7)
                    If ((Arg1 == 0x78))
                    {
                        Local0 = PCI4 ()
                        Return (ToBuffer (Local0))
                    }
                    ElseIf ((Arg1 == 0x79))
                    {
                        Return (PCIE (PCE0, PCE1, PCE2, PCE3))
                    }
                    ElseIf ((Arg1 == 0x7A))
                    {
                        PCIF (PCE0, PCE1, PCE2, PCE3, PCE4)
                    }
                    ElseIf ((Arg1 == 0x7B))
                    {
                        Return (PCIG (PCE0, PCE1, PCE2, PCE3))
                    }
                    ElseIf ((Arg1 == 0x7C))
                    {
                        PCIH (PCE0, PCE1, PCE2, PCE3, PCE5)
                    }
                    ElseIf ((Arg1 == 0x7D))
                    {
                        Return (PCI7 (PCE0, PCE1, PCE2, PCE3))
                    }
                    ElseIf ((Arg1 == 0x7E))
                    {
                        PCI8 (PCE0, PCE1, PCE2, PCE3, PCE6)
                    }
                    ElseIf ((Arg1 == 0x7F))
                    {
                        Local2 = PCII (PCE0, PCE1, PCE2, PCE3)
                        Return (ToBuffer (Local2))
                    }
                    ElseIf ((Arg1 == 0x80))
                    {
                        PCIJ (PCE0, PCE1, PCE2, PCE3, PCE7)
                    }

                    CreateByteField (Arg2, 0x06, PCE8)
                    CreateByteField (Arg2, 0x07, PCE9)
                    CreateDWordField (Arg2, 0x08, PCEA)
                    CreateQWordField (Arg2, 0x08, PCEB)
                    If ((Arg1 == 0x81))
                    {
                        If (((((((PCE8 + PCE9) <= 0x40) && 
                            (PCE0 <= 0xFF)) && (PCE1 <= 0x1F)) && (PCE2 <= 0x07)) && 
                            (PCE3 <= 0x03FF)))
                        {
                            Return (ToBuffer (PCI5 (PCE0, PCE1, PCE2, PCE3, PCE8, PCE9)))
                        }
                        Else
                        {
                            Return (Ones)
                        }
                    }
                    ElseIf ((Arg1 == 0x82))
                    {
                        If (((((((PCE8 + PCE9) <= 0x40) && 
                            (PCE0 <= 0xFF)) && (PCE1 <= 0x1F)) && (PCE2 <= 0x07)) && 
                            (PCE3 <= 0x03FF)))
                        {
                            PCI6 (PCE0, PCE1, PCE2, PCE3, PCE8, PCE9, PCEB)
                        }
                    }
                }
                ElseIf (((Arg1 >= 0x8C) && (Arg1 <= 0x9F)))
                {
                    CreateQWordField (Arg2, Zero, MED0)
                    CreateByteField (Arg2, 0x08, MED1)
                    CreateWordField (Arg2, 0x08, MED2)
                    CreateDWordField (Arg2, 0x08, MED3)
                    CreateQWordField (Arg2, 0x08, MED4)
                    CreateQWordField (Arg2, Zero, MED5)
                    CreateByteField (Arg2, 0x08, MED6)
                    CreateByteField (Arg2, 0x09, MED7)
                    CreateDWordField (Arg2, 0x0C, MED8)
                    CreateQWordField (Arg2, Zero, MED9)
                    CreateByteField (Arg2, 0x08, MEDA)
                    CreateByteField (Arg2, 0x09, MEDB)
                    CreateQWordField (Arg2, 0x10, MEDC)
                    If ((Arg1 == 0x8C))
                    {
                        Return (MEM4 (MED0, Zero))
                    }
                    ElseIf ((Arg1 == 0x8D))
                    {
                        MEM5 (MED0, Zero, MED1)
                    }
                    ElseIf ((Arg1 == 0x8E))
                    {
                        Return (MEM4 (MED0, One))
                    }
                    ElseIf ((Arg1 == 0x8F))
                    {
                        MEM5 (MED0, One, MED2)
                    }
                    ElseIf ((Arg1 == 0x90))
                    {
                        Return (MEM4 (MED0, 0x02))
                    }
                    ElseIf ((Arg1 == 0x91))
                    {
                        MEM5 (MED0, 0x02, MED3)
                    }
                    ElseIf ((Arg1 == 0x92))
                    {
                        Return (ToBuffer (MEM4 (MED0, 0x03)))
                    }
                    ElseIf ((Arg1 == 0x93))
                    {
                        MEM5 (MED0, 0x03, MED4)
                    }
                    ElseIf ((Arg1 == 0x94))
                    {
                        If (((MEDA + MEDB) <= 0x40))
                        {
                            Return (ToBuffer (MEMC (MED9, MEDA, MEDB)))
                        }
                        Else
                        {
                            Return (Ones)
                        }
                    }
                    ElseIf ((Arg1 == 0x95))
                    {
                        If (((MEDA + MEDB) <= 0x40))
                        {
                            MEMD (MED9, MEDA, MEDB, MEDC)
                        }
                    }
                }
                ElseIf ((Arg1 == 0xBE))
                {
                    EVT2 (Arg2)
                }
                ElseIf ((Arg1 == 0x012C))
                {
                    Return (DIMC ())
                }
                ElseIf ((Arg1 == 0x0130))
                {
                    Return (DIMD (DerefOf (Arg2 [Zero])))
                }
                ElseIf ((Arg1 == 0x0136))
                {
                    Return (DIM1 (DerefOf (Arg2 [Zero])))
                }
            }

            Method (WMBC, 3, NotSerialized)
            {
            }
        }

        Method (ADBG, 1, Serialized)
        {
            If (CondRefOf (\MDBG))
            {
                Return (\MDBG (Arg0))
            }

            Return (Zero)
        }
    }

    Scope (\)
    {
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "MYRTLE", 0x00000001)
{
    External (_SB_.I2CA, DeviceObj)
    External (_SB_.I2CB, DeviceObj)
    External (_SB_.I2CC, DeviceObj)
    External (_SB_.I2CD, DeviceObj)
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)
    External (M444, FieldUnitObj)

    Name (MWTT, 0xFF)
    Scope (\_SB.I2CA)
    {
        Device (WT1A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1A)
        {
            Name (_HID, "STK0001A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT1A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2A)
        {
            Name (_HID, "STK0002A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT2A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3A)
        {
            Name (_HID, "STK0003A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT3A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4A)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFA")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.WT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4A)
        {
            Name (_HID, "STK0004A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT4A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5A)
        {
            Name (_HID, "STK0005A")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CA",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CA.MT5A._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CB)
    {
        Device (WT1B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1B)
        {
            Name (_HID, "STK0001B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT1B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2B)
        {
            Name (_HID, "STK0002B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT2B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3B)
        {
            Name (_HID, "STK0003B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT3B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4B)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFB")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.WT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4B)
        {
            Name (_HID, "STK0004B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT4B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5B)
        {
            Name (_HID, "STK0005B")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CB",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CB.MT5B._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CC)
    {
        Device (WT1C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1C)
        {
            Name (_HID, "STK0001C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT1C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2C)
        {
            Name (_HID, "STK0002C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT2C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3C)
        {
            Name (_HID, "STK0003C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT3C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4C)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFC")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.WT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4C)
        {
            Name (_HID, "STK0004C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT4C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5C)
        {
            Name (_HID, "STK0005C")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CC.MT5C._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.I2CD)
    {
        Device (WT1D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x007F, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT1D)
        {
            Name (_HID, "STK0001D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT1D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT2D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0011, ControllerInitiated, 0x000186A0,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT2D)
        {
            Name (_HID, "STK0002D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT2D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT3D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0012, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT3D)
        {
            Name (_HID, "STK0003D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT3D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (WT4D)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "SPBTestKMDFD")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0013, ControllerInitiated, 0x000F4240,
                        AddressingMode7Bit, "\\_SB.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.WT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT4D)
        {
            Name (_HID, "STK0004D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0014, ControllerInitiated, 0x000222E0,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT4D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (MT5D)
        {
            Name (_HID, "STK0005D")  // _HID: Hardware ID
            Name (_CID, "WITTTest")  // _CID: Compatible ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00053020,
                        AddressingMode7Bit, "\\_SB_.I2CD",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.I2CD.MT5D._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((MWTT == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "MYRTLE", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.GPXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCXX.SAXX.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xBCD6E018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        Name (M450, Buffer (0x05)
        {
             0x00, 0x96, 0x05, 0x00, 0x00                     // .....
        })
        CreateDWordField (M450, Zero, M452)
        CreateByteField (M450, 0x04, M451)
        Local0 = (Arg0 + 0xB0000000)
        If ((ToInteger (M286) == One))
        {
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }

        If ((ToInteger (M451) == One))
        {
            Local2 = ToInteger (M452)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x0B, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x1D, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // ........
        /* 0010 */  0x17, 0x20, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // . T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 < 0x02))
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
        ElseIf (((M085 > 0x02) && (M085 < 0x08)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x09) || (M085 == 0x0A)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0B) || (M085 == 0x0C)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf (((M085 == 0x0D) || (M085 == 0x0E)))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x0F))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                0x04), Zero, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
            Local3 = 0x14301000
        }
        ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
        {
            Local2 = 0x10
            Local3 = 0x14601000
        }
        ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
        {
            Local2 = 0x0A
            Local3 = 0x14301000
        }
        ElseIf ((M085 == 0x0F))
        {
            Local2 = 0x0B
            Local3 = 0x14301000
        }
        Else
        {
            Local2 = 0x10
            Local3 = 0x14301000
        }

        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local6 = (0x11840294 + ((Local4 - 0x08) << 0x0C))
                    Local7 = 0x11880188
                }
                Else
                {
                    Local6 = (0x11440294 + (Local4 << 0x0C))
                    Local7 = 0x11480188
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local6 = (0x11240294 + ((Local4 - 0x05) << 0x0C))
                    Local7 = 0x11280188
                }
                Else
                {
                    Local6 = (0x11140294 + (Local4 << 0x0C))
                    Local7 = 0x11180188
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local6 = (0x11240294 + ((Local4 - 0x08) << 0x0C))
                Local7 = 0x11280188
            }
            Else
            {
                Local6 = (0x11140294 + (Local4 << 0x0C))
                Local7 = 0x11180188
            }

            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, Local7)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, Local7, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            Local3 = M249 (Zero, Zero, Zero, Local6)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local6)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, Local7, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x09) && (M085 <= 0x0A)))
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }
            ElseIf (((M085 >= 0x0B) && (M085 <= 0x0C)))
            {
                If ((Local4 >= 0x08))
                {
                    Local2 = (0x11840280 + ((Local4 - 0x08) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11440280 + (Local4 << 0x0C))
                }
            }
            ElseIf (((M085 >= 0x0D) && (M085 <= 0x0E)))
            {
                If ((Local4 >= 0x03))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((M085 == 0x0F))
            {
                If ((Local4 >= 0x05))
                {
                    Local2 = (0x11240280 + ((Local4 - 0x05) << 0x0C))
                }
                Else
                {
                    Local2 = (0x11140280 + (Local4 << 0x0C))
                }
            }
            ElseIf ((Local4 >= 0x08))
            {
                Local2 = (0x11240280 + ((Local4 - 0x08) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M409.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = One
            Local4 = 0x03E8
            While (((Local4 > Zero) && ((Local1 & 0x0E) == Zero)))
            {
                Local2 = 0x03E8
                While (((Local2 > Zero) && ((Local1 & One) != Zero)))
                {
                    Local2 = (Local2 - One)
                    Stall (0x05)
                    Local1 = SMB0 /* \M410.SMB0 */
                }

                If ((Local2 == Zero))
                {
                    SMB2 = 0x02
                    If ((Arg0 == One))
                    {
                        SMB2 = Local6
                    }

                    M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                    Release (M408)
                    Return (Zero)
                }

                Local4 = (Local4 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TPTS))
                {
                    \_SB.PCXX.GPXX.SAXX.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TPTS))
            {
                \_SB.PCXX.SAXX.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCXX.GPXX.SAXX.TWAK))
                {
                    \_SB.PCXX.GPXX.SAXX.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCXX.SAXX.TWAK))
            {
                \_SB.PCXX.SAXX.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xEE)
        Method (_L0A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Name (M448, Package (0x02)
            {
                One, 
                One
            })
            Local0 = M04A (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08) {}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                If ((M085 == 0x0E))
                {
                    If (CondRefOf (\_SB.ALIB))
                    {
                        Local4 = \_SB.ALIB (0x0C, Local3)
                    }
                }
                ElseIf (CondRefOf (\_SB.ALIB))
                {
                    M448 = \_SB.ALIB (0x0C, Local3)
                }

                If (CondRefOf (\_SB.APAD))
                {
                    If ((M085 == 0x0E))
                    {
                        \_SB.APAD.M446 [One] = Local4
                        Notify (\_SB.APAD, 0x80) // Status Change
                    }
                    Else
                    {
                        Local1 = Zero
                        Local2 = Zero
                        Local1 = M448 [Zero]
                        Local2 = M448 [One]
                        \_SB.APAD.M446 [One] = Local2
                        If ((Local1 == 0x02))
                        {
                            Notify (\_SB.APAD, 0x85) // Device-Specific
                        }
                        ElseIf ((Local1 == One))
                        {
                            Notify (\_SB.APAD, 0x84) // Reserved
                        }
                        Else
                        {
                            Notify (\_SB.APAD, 0x80) // Status Change
                        }
                    }
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M04A (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Local0 = M04A (M128, 0x91)
                If (((Local0 & 0xC0) == 0xC0))
                {
                    Local3 = Buffer (0x08) {}
                    CreateWordField (Local3, Zero, M254)
                    CreateByteField (Local3, 0x02, M255)
                    CreateDWordField (Local3, 0x03, M256)
                    M256 = (Local0 >> 0x08)
                    M254 = 0x07
                    M255 = 0x31
                    If (CondRefOf (\_SB.ALIB))
                    {
                        \_SB.ALIB (0x0C, Local3)
                    }
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000B284
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AF
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 45700 (0xB284)

    0000: 56 46 43 54 84 B2 00 00 01 AF 41 4C 41 53 4B 41  // VFCT......ALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 0C 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 FF 73 00 00 00 00  // ...........s....
    0060: 01 00 00 00 00 B2 00 00 55 AA 59 E9 C2 2A 00 00  // ........U.Y..*..
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 6C 03 00 00 00 00 49 42 4D CE 18 A6 00 00 00 00  // l.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 3E 03 00 00 00 00 00 00 31 31 2F 30 34 2F 32 31  // >.......11/04/21
    00C0: 20 32 32 3A 35 30 00 00 36 00 00 00 E9 B5 2B 00  //  22:50..6.....+.
    00D0: E9 BF 2B 00 00 00 10 02 0A 00 00 00 01 02 40 00  // ..+...........@.
    00E0: 00 C7 FF 73 00 00 00 00 6E 00 64 00 64 00 00 00  // ...s....n.d.d...
    00F0: 50 00 78 05 34 08 AC 0D 7C 99 05 00 00 00 00 00  // P.x.4...|.......
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0160: 00 00 00 00 16 00 34 03 0F FC 40 01 00 00 00 00  // ......4...@.....
    0170: 08 00 08 00 08 80 41 CD F3 28 42 CD A3 10 80 E8  // ......A..(B.....
    0180: 0D 7E E3 78 CE FF FF 00 00 00 00 00 00 20 7E C5  // .~.x......... ~.
    0190: FF 01 00 00 00 30 03 20 00 40 F3 3F 87 B2 6A 3E  // .....0. .@.?..j>
    01A0: 47 3E C7 00 70 00 00 33 00 EE 73 53 05 80 0F 08  // G>..p..3..sS....
    01B0: 21 04 FF 3C 00 C0 22 02 02 E2 42 0A 65 D5 7C 0E  // !..<.."...B.e.|.
    01C0: 00 E0 81 0A 00 1E 90 08 F0 3E A7 68 94 84 21 00  // .........>.h..!.
    01D0: 21 00 21 00 01 00 C0 02 4C 02 91 01 02 00 18 80  // !.!.....L.......
    01E0: 01 40 06 06 1E 11 07 52 80 18 0C 0E 12 00 00 00  // .@.....R........
    01F0: 0E F0 02 00 00 00 08 00 80 01 06 00 08 40 18 10  // .............@..
    0200: F0 01 00 00 20 00 00 00 04 00 00 00 1C 04 00 00  // .... ...........
    0210: C8 00 00 00 30 00 00 00 00 00 F8 08 40 00 00 00  // ....0.......@...
    0220: 00 00 00 04 00 00 00 00 1C 32 00 24 61 5C 48 01  // .........2.$a\H.
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E4  // ................
    0240: 27 09 40 10 18 00 64 00 00 00 00 C0 98 07 00 00  // '.@...d.........
    0250: 40 FA 01 A0 00 24 00 00 00 80 10 90 01 18 00 00  // @....$..........
    0260: 08 00 80 81 47 01 00 F0 A0 1F 11 30 00 00 00 00  // ....G......0....
    0270: 02 FC CF C1 85 94 00 04 31 31 33 2D 45 58 54 38  // ........113-EXT8
    0280: 30 30 32 39 36 2D 4C 30 34 00 4E 41 56 49 32 33  // 00296-L04.NAVI23
    0290: 00 50 43 49 5F 45 58 50 52 45 53 53 00 47 44 44  // .PCI_EXPRESS.GDD
    02A0: 52 36 00 0D 0A 4E 41 56 49 32 33 20 58 4C 20 41  // R6...NAVI23 XL A
    02B0: 30 20 38 47 42 20 35 30 30 65 2F 35 30 30 6D 20  // 0 8GB 500e/500m 
    02C0: 30 2E 39 56 2F 31 2E 33 35 56 20 20 20 20 20 20  // 0.9V/1.35V      
    02D0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02E0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    02F0: 20 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20 31 39  //  ..... ...(C) 19
    0300: 38 38 2D 32 30 32 30 2C 20 41 64 76 61 6E 63 65  // 88-2020, Advance
    0310: 64 20 4D 69 63 72 6F 20 44 65 76 69 63 65 73 2C  // d Micro Devices,
    0320: 20 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53 42 4B  //  Inc..ATOMBIOSBK
    0330: 2D 41 4D 44 20 56 45 52 30 32 30 2E 30 30 33 2E  // -AMD VER020.003.
    0340: 30 30 30 2E 30 33 30 2E 38 30 30 32 39 36 00 36  // 000.030.800296.6
    0350: 36 58 4C 38 47 43 4C 44 5F 4C 30 00 32 33 37 35  // 6XL8GCLD_L0.2375
    0360: 31 37 39 20 00 35 39 32 38 30 33 20 20 00 20 20  // 179 .592803  .  
    0370: 20 20 20 20 20 20 00 41 53 52 4F 43 4B 5F 4E 41  //       .ASROCK_NA
    0380: 56 49 32 33 5F 44 35 33 34 30 31 5F 58 4C 5F 47  // VI23_D53401_XL_G
    0390: 44 52 36 5F 38 47 5F 43 4C 44 5C 63 6F 6E 66 69  // DR6_8G_CLD\confi
    03A0: 67 2E 68 00 00 00 2C 00 02 03 41 54 4F 4D 00 C0  // g.h...,...ATOM..
    03B0: C7 2B E7 02 91 03 3B 02 FA 2B 00 00 00 00 49 18  // .+....;..+....I.
    03C0: 17 52 6C 03 64 A9 C4 03 00 00 CC 0A 00 00 00 00  // .Rl.d...........
    03D0: 03 00 00 00 50 43 49 52 02 10 FF 73 00 00 18 00  // ....PCIR...s....
    03E0: 00 00 00 03 59 00 03 14 00 00 00 00 41 4D 44 20  // ....Y.......AMD 
    03F0: 41 54 4F 4D 42 49 4F 53 00 38 37 4E 9C 00 00 00  // ATOMBIOS.87N....
    0400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0410: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 4A 00 02 01  // ............J...
    0430: 00 00 00 00 9C 08 A0 1F 30 08 68 20 10 04 6C 04  // ........0.h ..l.
    0440: C4 09 B8 0A 00 00 A4 0C 68 06 9C 20 B0 0C 24 21  // ........h.. ..$!
    0450: 00 00 10 21 08 0D 00 00 28 0D 3C 0D A8 07 98 1F  // ...!....(.<.....
    0460: 48 0D 00 00 00 00 D4 06 98 0D 00 00 00 00 00 00  // H...............
    0470: 24 1F 00 00 00 00 00 00 5C 00 02 01 00 00 00 00  // $.......\.......
    0480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0490: 00 00 00 00 06 00 00 00 C8 00 00 00 00 00 34 21  // ..............4!
    04A0: 00 00 B8 0B 00 00 00 00 7D 00 00 01 00 00 00 00  // ........}.......
    04B0: 00 FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04D0: 00 00 00 00 FC 01 05 04 10 00 38 00 4C 00 60 01  // ..........8.L.`.
    04E0: 9C 01 48 00 30 75 00 00 0C 00 3F 05 3E 00 00 00  // ..H.0u....?.>...
    04F0: 40 9C 00 00 0C 00 3F 05 3E 00 00 00 FF FF FF 00  // @.....?.>.......
    0500: 0C 00 3F 05 77 21 00 00 00 00 00 00 FF FF FF 00  // ..?.w!..........
    0510: 0C 00 3F 04 3E 00 00 00 00 00 00 00 00 00 00 00  // ..?.>...........
    0520: 48 3F 00 00 3F 00 44 00 00 16 00 00 00 04 01 1F  // H?..?.D.........
    0530: 00 00 00 04 02 2C 00 00 00 04 03 3E 00 00 00 04  // .....,.....>....
    0540: 08 1B 50 00 00 04 09 25 60 00 00 04 0A 35 90 00  // ..P....%`....5..
    0550: 00 04 10 21 B0 00 00 04 11 2F F0 00 00 04 18 2A  // ...!...../.....*
    0560: 40 01 00 04 78 69 00 00 3F 00 44 00 00 16 00 00  // @...xi..?.D.....
    0570: 00 04 01 1F 00 00 00 04 02 2C 00 00 00 04 03 3E  // .........,.....>
    0580: 00 00 00 04 08 1B 50 00 00 04 09 25 60 00 00 04  // ......P....%`...
    0590: 0A 35 90 00 00 04 10 21 B0 00 00 04 11 2F F0 00  // .5.....!...../..
    05A0: 00 04 18 2A 40 01 00 04 F0 D2 00 00 3F 00 44 00  // ...*@.......?.D.
    05B0: 00 1D 00 00 00 04 01 26 00 00 00 04 02 30 00 00  // .......&.....0..
    05C0: 00 04 03 3E 00 00 00 04 08 22 40 00 00 04 09 2C  // ...>....."@....,
    05D0: 60 00 00 04 0A 37 70 00 00 04 10 27 90 00 00 04  // `....7p....'....
    05E0: 11 32 C0 00 00 04 18 2E 00 01 00 04 68 3C 01 00  // .2..........h<..
    05F0: 3F 00 44 00 00 1D 00 00 00 04 01 26 00 00 00 04  // ?.D........&....
    0600: 02 30 00 00 00 04 03 3E 00 00 00 04 08 22 40 00  // .0.....>....."@.
    0610: 00 04 09 2C 60 00 00 04 0A 37 70 00 00 04 10 27  // ...,`....7p....'
    0620: 90 00 00 04 11 32 C0 00 00 04 18 2E 00 01 00 04  // .....2..........
    0630: 00 00 00 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0640: 00 01 02 03 02 03 00 01 00 07 05 00 00 01 02 03  // ................
    0650: 02 03 00 01 00 07 05 00 00 01 02 03 02 03 00 01  // ................
    0660: 00 07 05 00 00 01 02 03 02 03 00 01 00 07 05 00  // ................
    0670: 08 30 00 00 9B 00 00 00 07 30 00 00 46 25 00 00  // .0.......0..F%..
    0680: 08 31 00 00 9B 00 00 00 07 31 00 00 46 25 00 00  // .1.......1..F%..
    0690: 08 32 00 00 9B 00 00 00 07 32 00 00 46 25 00 00  // .2.......2..F%..
    06A0: 08 33 00 00 9B 00 00 00 07 33 00 00 46 25 00 00  // .3.......3..F%..
    06B0: 56 00 00 00 05 00 00 00 46 00 00 00 30 00 00 00  // V.......F...0...
    06C0: 50 00 00 00 30 00 00 00 FF FF FF FF 00 00 00 00  // P...0...........
    06D0: 6C 00 02 01 B5 5D 00 00 00 00 01 00 B5 5D 00 00  // l....].......]..
    06E0: 08 08 02 00 B5 5D 00 00 10 10 03 00 B5 5D 00 00  // .....].......]..
    06F0: 18 14 04 00 B5 5D 00 00 1A 18 05 00 B5 5D 00 00  // .....].......]..
    0700: 1C 1C 06 00 91 5D 00 00 08 08 90 00 95 5D 00 00  // .....].......]..
    0710: 08 08 91 00 99 5D 00 00 08 08 92 00 9D 5D 00 00  // .....].......]..
    0720: 08 08 93 00 A1 5D 00 00 08 08 94 00 A5 5D 00 00  // .....].......]..
    0730: 08 08 95 00 A9 5D 00 00 08 08 97 00 D4 00 04 04  // .....]..........
    0740: 00 00 00 00 24 F4 00 00 10 27 88 13 00 00 00 00  // ....$....'......
    0750: 00 00 00 00 5E 01 4E 0C 01 01 00 00 55 00 00 00  // ....^.N.....U...
    0760: 10 27 FF 73 00 03 05 01 00 05 05 00 C8 91 05 00  // .'.s............
    0770: 80 EA 82 2B 00 00 00 00 00 00 00 00 00 00 00 00  // ...+............
    0780: 54 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // T...............
    0790: 10 11 3D 10 4D 1C 02 00 00 45 00 00 00 00 00 00  // ..=.M....E......
    07A0: 00 00 00 00 00 00 00 00 00 00 AA 0A 22 22 02 00  // ............""..
    07B0: AA FA 03 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0810: 88 00 01 04 88 06 04 00 13 31 48 00 1E 22 00 00  // .........1H.."..
    0820: 6C 00 00 00 08 00 00 00 13 32 51 00 21 21 00 00  // l........2Q.!!..
    0830: 73 00 00 00 80 00 00 00 13 33 5A 00 20 22 00 00  // s........3Z. "..
    0840: 7A 00 00 00 00 02 00 00 0C 31 63 00 1E 21 00 00  // z........1c..!..
    0850: 81 00 00 00 00 04 00 00 01 04 91 00 02 04 02 00  // ................
    0860: FF 01 04 93 00 02 04 04 00 FF 01 04 94 00 02 04  // ................
    0870: 05 00 FF 01 04 92 00 02 04 03 00 FF 14 06 0F 0E  // ................
    0880: 00 00 FF 14 06 0F 0E 00 00 FF 14 06 0F 0E 00 00  // ................
    0890: FF 14 06 0F 0E 00 00 FF 6C 00 03 04 1E 00 03 14  // ........l.......
    08A0: 50 C3 00 00 E4 25 00 00 01 54 04 00 00 00 00 00  // P....%...T......
    08B0: 4C 00 00 00 20 03 A3 02 E2 04 20 03 02 00 00 00  // L... ..... .....
    08C0: 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08D0: 00 00 00 00 00 00 00 00 DC 05 00 00 84 03 84 03  // ................
    08E0: 46 05 84 03 00 00 00 00 00 00 00 00 00 0C 00 00  // F...............
    08F0: 61 60 01 00 00 00 00 80 80 8D 5B 00 00 00 00 00  // a`........[.....
    0900: 00 00 00 00 28 01 04 09 01 01 E0 00 00 01 01 00  // ....(...........
    0910: 01 01 E0 00 01 02 01 00 00 01 00 00 02 03 01 00  // ................
    0920: 00 01 00 00 03 04 01 00 00 01 00 00 04 05 00 00  // ................
    0930: 00 01 00 00 05 06 00 00 00 00 00 00 06 07 00 00  // ................
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 FF FF 00 00 00 02 01 03  // ................
    0990: 00 00 C0 30 25 01 00 00 3F 00 00 00 1E 00 00 00  // ...0%...?.......
    09A0: 1E 00 00 00 00 80 01 00 FF 00 05 00 05 00 FF 00  // ................
    09B0: FF FF FF 00 FF FF 00 00 01 08 1F 00 01 08 1F 00  // ................
    09C0: 01 10 21 00 00 00 1F 00 FF 00 00 00 10 00 00 00  // ..!.............
    09D0: 64 00 00 00 00 00 00 00 00 00 00 00 E2 04 E2 04  // d...............
    09E0: E2 04 E2 04 A0 0F A0 0F A0 0F A0 0F 01 00 00 00  // ................
    09F0: 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10  // ................
    0A00: 20 4E 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  N..............
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 F4 00 03 05  // ................
    0A30: 01 0B 00 00 F4 01 4E 0C 00 00 4E 0C 10 27 00 00  // ......N...N..'..
    0A40: C8 91 05 00 20 A1 07 00 04 00 00 00 00 53 07 00  // .... ........S..
    0A50: 30 75 00 00 00 77 01 00 B0 81 00 00 B0 CC 00 00  // 0u...w..........
    0A60: CC F1 00 00 48 A3 00 00 00 00 00 00 20 30 05 00  // ....H....... 0..
    0A70: 00 00 00 00 48 E8 01 00 D4 30 00 00 12 00 00 00  // ....H....0......
    0A80: 00 00 00 00 28 1D 01 00 A0 09 01 00 00 00 00 00  // ....(...........
    0A90: 33 33 81 01 7D 1A 09 96 30 14 C9 02 64 00 64 00  // 33..}...0...d.d.
    0AA0: 28 84 1C 00 28 1D 01 00 88 13 00 00 02 00 00 00  // (...(...........
    0AB0: 02 00 00 00 02 00 00 00 02 00 00 00 01 00 00 00  // ................
    0AC0: 01 00 00 00 01 80 00 00 7D 1F 1E 96 05 80 00 00  // ........}.......
    0AD0: FF FF 0F 00 71 00 FF 2F 4D 00 00 A5 00 00 00 00  // ....q../M.......
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: EC 01 02 06 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 24 50 53 50 49 32 E5 C3 1B 00 00 00  // ....$PSPI2......
    0B40: 00 00 00 00 00 00 00 00 40 04 00 00 00 00 03 00  // ........@.......
    0B50: 00 00 00 00 01 00 00 00 00 30 00 00 00 00 05 00  // .........0......
    0B60: 00 00 00 00 03 00 00 00 00 30 00 00 00 30 05 00  // .........0...0..
    0B70: 00 00 00 00 04 00 00 00 00 B2 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 05 00 00 00 00 01 00 00 00 0A 03 00  // ................
    0B90: 00 00 00 00 06 00 00 00 00 B0 00 00 00 F4 09 00  // ................
    0BA0: 00 00 00 00 07 00 00 00 40 04 00 00 C0 0B 03 00  // ........@.......
    0BB0: 00 00 00 00 09 00 00 00 08 00 00 00 8C 0C 00 00  // ................
    0BC0: 00 00 00 00 11 00 00 00 00 C2 00 00 00 20 06 00  // ............. ..
    0BD0: 00 00 00 00 12 00 00 00 00 50 00 00 00 A4 07 00  // .........P......
    0BE0: 00 00 00 00 14 00 00 00 00 30 00 00 00 10 03 00  // .........0......
    0BF0: 00 00 00 00 21 00 00 00 C0 00 00 00 00 0B 03 00  // ....!...........
    0C00: 00 00 00 00 23 00 00 00 00 50 00 00 00 E4 0A 00  // ....#....P......
    0C10: 00 00 00 00 2D 00 00 00 00 A0 00 00 00 40 03 00  // ....-........@..
    0C20: 00 00 00 00 2E 00 00 00 00 C0 00 00 00 60 05 00  // .............`..
    0C30: 00 00 00 00 33 00 00 00 00 60 00 00 00 E0 03 00  // ....3....`......
    0C40: 00 00 00 00 35 00 00 00 10 00 00 00 94 0C 00 00  // ....5...........
    0C50: 00 00 00 00 36 00 00 00 00 40 00 00 00 F4 07 00  // ....6....@......
    0C60: 00 00 00 00 37 00 00 00 00 10 00 00 00 34 08 00  // ....7........4..
    0C70: 00 00 00 00 38 00 00 00 40 04 00 00 00 05 03 00  // ....8...@.......
    0C80: 00 00 00 00 3D 00 00 00 00 20 00 00 00 C4 09 00  // ....=.... ......
    0C90: 00 00 00 00 40 00 00 00 00 30 00 00 00 A4 0A 00  // ....@....0......
    0CA0: 00 00 00 00 42 00 00 00 00 10 00 00 00 E4 09 00  // ....B...........
    0CB0: 00 00 00 00 49 00 00 00 00 C0 00 00 00 40 04 00  // ....I........@..
    0CC0: 00 00 00 00 4A 00 00 00 00 C2 00 00 00 E2 06 00  // ....J...........
    0CD0: 00 00 00 00 4C 00 00 00 00 10 00 00 00 D4 0A 00  // ....L...........
    0CE0: 00 00 00 00 71 00 00 00 00 80 01 00 00 44 08 00  // ....q........D..
    0CF0: 00 00 00 00 01 00 00 00 00 00 00 00 03 01 00 00  // ................
    0D00: 00 0C 00 00 00 00 00 00 00 00 00 00 0C 00 02 01  // ................
    0D10: 00 00 00 00 00 00 00 00 58 00 02 06 03 0A 02 00  // ........X.......
    0D20: 08 02 04 02 64 C0 00 00 65 C0 00 00 66 C0 00 00  // ....d...e...f...
    0D30: 67 C0 00 00 E8 C0 00 00 A0 21 00 00 03 6B 01 00  // g........!...k..
    0D40: 10 27 00 00 07 04 02 00 00 00 00 00 9F 30 00 00  // .'...........0..
    0D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 20 00 02 02 00 00 00 00 00 00 00 00 08 00 00 00  //  ...............
    0D80: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D90: 14 00 02 02 00 00 00 00 00 00 00 00 00 00 10 00  // ................
    0DA0: 00 00 00 00 0C 00 02 02 08 00 00 00 00 00 00 00  // ................
    0DB0: 50 00 03 03 00 00 00 00 00 20 06 00 00 C2 00 00  // P........ ......
    0DC0: 00 00 00 00 64 00 E4 0C 08 08 70 00 10 27 00 00  // ....d.....p..'..
    0DD0: A0 86 01 00 10 08 01 00 84 B2 00 00 E4 25 00 00  // .............%..
    0DE0: 00 00 00 00 2B F1 08 00 00 00 00 00 00 00 00 00  // ....+...........
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 8C 11 02 05 ED 00 61 02 65 0B A1 0C 9D 10 00 00  // ......a.e.......
    0E10: 00 00 00 00 04 08 08 04 00 20 00 00 FF 00 00 00  // ......... ......
    0E20: 00 00 2D 00 00 70 08 04 72 00 00 00 00 00 00 00  // ..-..p..r.......
    0E30: 00 00 00 08 00 00 00 04 00 00 04 00 00 00 0A 08  // ................
    0E40: 00 00 40 00 00 00 20 00 00 FF 00 00 00 00 00 37  // ..@... ........7
    0E50: 00 00 70 08 04 72 00 00 00 00 00 00 00 00 00 81  // ..p..r..........
    0E60: 08 00 00 00 04 00 00 04 00 C0 00 0A 08 00 00 40  // ...............@
    0E70: 00 4B 34 5A 41 46 33 32 35 42 4D 00 00 20 00 00  // .K4ZAF325BM.. ..
    0E80: FF 00 00 00 00 00 38 00 00 70 08 04 72 01 00 00  // ......8..p..r...
    0E90: 00 00 00 00 00 00 06 08 00 00 00 04 00 00 04 00  // ................
    0EA0: C0 00 0A 08 00 00 40 00 48 35 36 43 42 4D 32 34  // ......@.H56CBM24
    0EB0: 4D 49 52 00 00 20 00 00 FF 00 00 00 00 00 39 00  // MIR.. ........9.
    0EC0: 00 70 08 04 72 02 00 00 00 00 00 00 00 00 1F 08  // .p..r...........
    0ED0: 00 00 00 04 00 00 0D 00 C0 00 0A 08 00 00 40 00  // ..............@.
    0EE0: 4D 54 36 31 4B 35 31 32 4D 33 32 43 00 16 00 00  // MT61K512M32C....
    0EF0: 00 50 50 01 00 52 50 01 00 5E 50 01 00 60 50 01  // .PP..RP..^P..`P.
    0F00: 00 72 50 01 00 00 7E 01 01 04 7E 01 01 08 7E 01  // .rP...~...~...~.
    0F10: 01 10 7E 01 01 14 7E 01 01 20 7E 01 01 44 7E 01  // ..~...~.. ~..D~.
    0F20: 01 48 7E 01 01 4C 7E 01 01 50 7E 01 01 54 7E 01  // .H~..L~..P~..T~.
    0F30: 01 58 7E 01 01 78 7E 01 01 80 7E 01 01 88 7E 01  // .X~..x~...~...~.
    0F40: 01 A8 7E 01 01 BC 7E 01 01 FF FF FF 00 05 00 1B  // ..~...~.........
    0F50: 00 00 00 07 07 00 00 13 00 0C 00 14 00 08 00 17  // ................
    0F60: 00 06 00 03 00 00 00 03 04 00 00 03 05 9C 00 F4  // ................
    0F70: 02 46 04 48 44 17 10 60 00 00 00 00 00 38 38 2A  // .F.HD..`.....88*
    0F80: 43 05 05 10 6B 77 00 00 1B 2A 88 07 00 00 00 00  // C...kw...*......
    0F90: 00 00 D1 38 80 00 00 00 90 00 00 00 01 00 00 00  // ...8............
    0FA0: 00 4A A5 4A 05 FF FF FF 01 05 00 1B 00 00 00 06  // .J.J............
    0FB0: 06 01 00 13 00 00 00 00 00 08 00 17 00 06 00 03  // ................
    0FC0: 00 00 00 03 04 00 00 03 05 9C 00 B4 02 46 04 48  // .............F.H
    0FD0: 44 17 10 80 00 00 00 00 00 38 38 2A 43 03 03 10  // D........88*C...
    0FE0: 6B 66 00 00 1B 2A 88 09 00 00 00 00 00 00 E1 28  // kf...*.........(
    0FF0: 86 00 00 05 90 00 00 05 01 00 00 00 00 4A 25 87  // .............J%.
    1000: 03 FF FF FF 02 05 00 00 00 00 00 08 08 00 00 13  // ................
    1010: 00 00 00 00 00 08 01 17 00 06 00 85 00 00 00 81  // ................
    1020: 04 00 00 81 05 9C 0C F4 02 46 04 48 84 17 10 60  // .........F.H...`
    1030: 00 02 03 00 00 38 38 24 43 08 08 10 6C 77 00 00  // .....88$C...lw..
    1040: 1B 2A 88 07 00 49 49 00 20 C2 D0 2C 80 00 00 02  // .*...II. ..,....
    1050: 90 00 00 02 01 00 40 00 00 4A A5 4A 05 00 00 00  // ......@..J.J....
    1060: 00 A8 61 00 01 09 05 09 0D DB 01 1E 0F 03 05 03  // ..a.............
    1070: 05 02 02 05 03 05 08 02 03 01 0A 0A 0A 0A 02 04  // ................
    1080: 0A 0A 1E 03 1E 48 E8 01 00 03 0C 0A 02 02 04 0A  // .....H..........
    1090: 10 15 01 02 09 04 04 01 00 00 00 00 00 00 00 00  // ................
    10A0: 00 50 C3 00 01 0A 05 0F 17 B6 03 3C 1E 04 08 05  // .P.........<....
    10B0: 08 02 02 08 04 06 08 02 03 01 0A 0A 0A 0A 02 04  // ................
    10C0: 0A 0A 3C 05 3C 90 D0 03 00 05 0C 0A 02 02 04 0A  // ..<.<...........
    10D0: 11 1B 01 02 09 04 07 01 00 00 00 00 00 00 00 00  // ................
    10E0: 00 CC 55 01 01 0F 05 1B 29 7F 06 69 35 07 0E 08  // ..U.....)..i5...
    10F0: 0E 04 04 0E 06 08 10 02 03 02 0B 0A 0A 0A 02 04  // ................
    1100: 0A 0A 69 09 69 FC AC 06 00 09 0C 0A 02 02 04 0A  // ..i.i...........
    1110: 17 28 01 02 0A 04 0C 01 00 00 00 00 00 00 00 00  // .(..............
    1120: 00 A0 86 01 01 10 05 1E 2D 6C 07 78 3C 08 0F 09  // ........-l.x<...
    1130: 0F 04 04 10 06 08 10 02 03 02 0C 0A 0A 0A 02 04  // ................
    1140: 0A 0A 78 0A 78 20 A1 07 00 0A 0C 0A 02 02 04 0A  // ..x.x ..........
    1150: 18 2B 01 02 0A 04 0D 01 00 00 00 00 00 00 00 00  // .+..............
    1160: 00 48 E8 01 01 14 06 26 39 47 09 96 4B 0A 13 0C  // .H.....&9G..K...
    1170: 13 05 05 14 07 09 14 02 03 03 0D 0D 0A 0A 02 04  // ................
    1180: 0D 0D 96 0D 96 68 89 09 00 0D 0C 0A 02 02 05 0D  // .....h..........
    1190: 1D 33 01 02 0A 04 10 01 00 00 00 00 00 00 00 00  // .3..............
    11A0: 00 40 13 02 01 15 07 2D 44 18 0A B4 5A 0C 17 0E  // .@.....-D...Z...
    11B0: 17 06 06 18 08 0A 18 02 03 03 0E 0F 0A 0A 02 04  // ................
    11C0: 0F 0F B4 0F B4 B0 71 0B 00 0F 0C 0A 02 02 06 0F  // ......q.........
    11D0: 1F 3C 01 02 0B 04 13 01 00 00 00 00 00 00 00 00  // .<..............
    11E0: 00 78 5D 02 01 16 07 2D 44 81 0B B4 5A 0C 17 0E  // .x]....-D...Z...
    11F0: 17 06 06 18 08 0A 18 02 03 03 0E 0F 0A 0A 02 04  // ................
    1200: 0F 0F B4 0F B4 B0 71 0B 00 0F 0C 0A 02 02 06 0F  // ......q.........
    1210: 1F 3C 01 02 0B 04 13 01 00 00 00 00 00 00 00 00  // .<..............
    1220: 00 20 BF 02 01 18 07 34 4E 5C 0D D2 69 0E 1A 10  // . .....4N\..i...
    1230: 1A 08 08 1C 09 0B 20 02 03 03 0F 12 0A 0A 02 04  // ...... .........
    1240: 12 12 D2 12 D2 F8 59 0D 00 12 0C 0A 02 02 07 12  // ......Y.........
    1250: 21 43 01 02 0B 04 16 01 00 00 00 00 00 00 00 00  // !C..............
    1260: 00 B0 24 03 01 1A 08 3C 5A 4A 0F F0 78 10 1E 12  // ..$....<ZJ..x...
    1270: 1E 08 08 1F 0A 0C 20 02 03 03 10 14 0A 0A 02 04  // ...... .........
    1280: 14 14 F0 14 F0 40 42 0F 00 14 0C 0A 02 02 08 14  // .....@B.........
    1290: 23 4C 01 02 0C 04 19 01 00 00 00 00 00 00 00 00  // #L..............
    12A0: 00 58 86 03 01 1C 08 44 66 25 11 0E 87 12 24 15  // .X.....Df%....$.
    12B0: 22 09 09 22 0C 0E 24 02 03 03 11 17 0A 0A 02 04  // ".."..$.........
    12C0: 17 17 0E 17 0E 88 2A 11 00 17 0C 0A 02 02 09 17  // ......*.........
    12D0: 26 54 01 02 0C 04 1C 01 01 01 01 00 00 00 00 00  // &T..............
    12E0: 00 20 A0 03 01 1D 08 48 6C A2 11 1D 8E 13 24 16  // . .....Hl.....$.
    12F0: 24 09 09 24 0D 0F 24 02 04 03 11 18 0B 0B 02 04  // $..$..$.........
    1300: 18 18 1D 18 1D 9D 1A 12 00 18 0D 0B 02 02 09 18  // ................
    1310: 28 59 02 02 0D 04 1E 01 01 01 01 00 00 00 00 00  // (Y..............
    1320: 00 58 B8 03 01 1E 08 4A 70 18 12 25 93 14 26 17  // .X.....Jp..%..&.
    1330: 26 0A 0A 26 0D 10 28 02 04 03 11 1A 0B 0B 02 04  // &..&..(.........
    1340: 1A 1A 25 1A 25 F5 94 12 00 1A 0D 0B 02 02 0A 1A  // ..%.%...........
    1350: 29 5B 02 02 0D 04 1F 01 01 01 01 00 00 00 00 00  // )[..............
    1360: 00 74 27 00 02 09 05 03 05 C0 00 0B 0B 02 02 02  // .t'.............
    1370: 02 02 02 04 03 03 08 02 03 01 0A 02 0A 0A 02 03  // ................
    1380: 04 08 0D 02 0E 44 C5 00 00 04 05 0A 02 02 04 04  // .....D..........
    1390: 0D 0E 01 02 08 04 02 06 00 00 00 00 00 00 00 00  // ................
    13A0: 00 20 4E 00 02 09 05 05 08 7C 01 14 14 02 03 03  // . N......|......
    13B0: 03 02 02 04 03 03 08 02 03 01 0A 03 0A 0A 02 03  // ................
    13C0: 04 08 18 03 1B A0 86 01 00 04 05 0A 02 02 04 04  // ................
    13D0: 0D 0F 01 02 08 04 04 06 00 00 00 00 00 00 00 00  // ................
    13E0: 00 4C 4F 00 02 09 05 06 09 82 01 15 15 03 04 03  // .LO.............
    13F0: 04 02 02 04 04 04 08 02 03 01 0A 03 0A 0A 02 03  // ................
    1400: 04 08 19 03 1C 7C 8C 01 00 04 05 0A 02 02 04 04  // .....|..........
    1410: 0D 10 01 02 09 04 04 06 00 00 00 00 00 00 00 00  // ................
    1420: 00 E4 57 00 02 0B 05 06 09 AC 01 17 17 03 04 03  // ..W.............
    1430: 04 02 02 04 04 04 08 02 03 01 0A 0C 0C 0C 02 03  // ................
    1440: 04 08 1B 04 1F 74 B7 01 00 04 05 0A 02 02 04 08  // .....t..........
    1450: 10 14 01 02 0B 04 05 06 00 00 00 00 00 00 00 00  // ................
    1460: 00 C8 AF 00 02 0E 05 0C 12 57 03 2D 2D 05 07 06  // .........W.--...
    1470: 07 02 02 08 05 05 08 02 03 01 0A 0C 0C 0C 02 03  // ................
    1480: 04 08 36 05 3E E8 6E 03 00 05 05 0A 02 02 04 08  // ..6.>.n.........
    1490: 13 17 01 02 0C 04 09 06 00 00 00 00 00 00 00 00  // ................
    14A0: 00 08 4C 01 02 0F 06 16 22 50 06 55 55 09 0D 0B  // ..L....."P.UU...
    14B0: 0D 03 03 0E 07 07 0C 02 03 02 0A 0D 0D 0D 02 03  // ................
    14C0: 04 08 66 09 74 0E 7E 06 00 09 09 0A 02 02 04 08  // ..f.t.~.........
    14D0: 15 24 01 02 0E 04 11 06 00 00 00 00 00 00 00 00  // .$..............
    14E0: 00 A0 86 01 02 0F 06 19 28 6C 07 64 64 0A 0F 0C  // ........(l.dd...
    14F0: 0F 03 03 0F 07 07 0C 02 03 02 0A 0D 0D 0D 02 03  // ................
    1500: 04 08 78 0A 87 20 A1 07 00 0A 0A 0A 02 02 04 08  // ..x.. ..........
    1510: 15 27 01 02 0E 04 13 06 00 00 00 00 00 00 00 00  // .'..............
    1520: 00 48 E8 01 02 14 07 20 32 47 09 7D 7D 0D 14 0F  // .H..... 2G.}}...
    1530: 14 04 04 14 08 08 10 02 03 02 0A 0D 0D 0D 02 03  // ................
    1540: 05 0A 96 0D AA 68 89 09 00 0D 0D 0A 02 02 05 0A  // .....h..........
    1550: 1A 32 01 02 10 04 19 06 00 00 00 00 00 00 00 00  // .2..............
    1560: 00 F0 49 02 02 16 07 26 3C 22 0B 96 96 0F 17 12  // ..I....&<"......
    1570: 17 05 05 17 0A 0A 14 02 03 02 0B 0F 0F 0F 02 03  // ................
    1580: 06 0C B4 0F CB B0 71 0B 00 0F 0F 0A 02 02 06 0C  // ......q.........
    1590: 1C 38 01 02 11 04 1D 06 00 00 00 00 00 00 00 00  // .8..............
    15A0: 00 20 BF 02 02 18 07 2C 46 5C 0D AF AF 12 1B 15  // . .....,F\......
    15B0: 1B 05 05 1C 0A 0A 14 02 03 02 0C 12 12 12 02 03  // ................
    15C0: 07 0E D2 12 EC A0 BB 0D 00 12 12 0A 02 02 07 0E  // ................
    15D0: 1E 41 01 02 12 04 22 06 00 00 00 00 00 00 00 00  // .A....".........
    15E0: 00 6C DC 02 02 1A 07 2F 4B EB 0D BC BC 13 1D 17  // .l...../K.......
    15F0: 1D 06 06 1D 0C 0C 18 02 03 03 0E 13 0A 0A 02 03  // ................
    1600: 08 0F E1 13 FE 1C 4E 0E 00 1D 13 0A 02 02 08 0F  // ......N.........
    1610: 21 44 01 02 12 04 23 06 00 00 00 00 00 00 00 00  // !D....#.........
    1620: 00 40 0D 03 02 1C 07 32 50 D8 0E C8 C8 14 1E 18  // .@.....2P.......
    1630: 1E 06 06 1E 0C 0C 18 02 03 03 0E 14 0A 0A 02 03  // ................
    1640: 08 10 F0 14 0E 40 42 0F 00 1E 14 0A 02 02 08 10  // .....@B.........
    1650: 23 46 01 02 13 04 26 06 00 00 01 00 00 00 00 00  // #F....&.........
    1660: 00 D4 30 00 03 09 05 04 06 EE 00 14 08 04 03 01  // ..0.............
    1670: 02 02 02 04 03 04 08 02 03 02 0A 14 0A 0A 02 03  // ................
    1680: 0A 12 14 02 0F 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..... ..........
    1690: 0B 0D 01 02 03 04 03 0F 00 00 00 00 00 00 00 00  // ................
    16A0: 00 20 4E 00 03 09 05 05 09 7C 01 20 0A 04 04 01  // . N......|. ....
    16B0: 04 02 02 04 03 04 08 02 03 02 0A 14 0A 0A 02 03  // ................
    16C0: 0A 12 20 02 18 20 A1 07 00 0A 0A 04 01 01 01 0A  // .. .. ..........
    16D0: 0B 0F 01 02 03 04 03 0F 00 00 00 00 00 00 00 00  // ................
    16E0: 00 A8 61 00 03 0A 05 07 0B DB 01 28 0E 04 04 01  // ..a........(....
    16F0: 04 02 02 04 03 04 08 02 03 02 0A 14 04 04 02 03  // ................
    1700: 0A 12 28 03 1E 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..(.. ..........
    1710: 0C 11 01 02 02 04 04 0F 00 00 00 00 00 00 00 00  // ................
    1720: 00 50 C3 00 03 0B 05 0D 15 B6 03 50 1A 05 08 02  // .P.........P....
    1730: 08 02 02 08 04 05 08 02 03 02 0A 14 04 04 02 03  // ................
    1740: 0A 12 50 05 3C 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..P.< ..........
    1750: 0F 17 01 02 02 04 06 0F 00 00 00 00 00 00 00 00  // ................
    1760: 00 F8 24 01 03 0D 05 13 1F 91 05 78 26 08 0C 06  // ..$........x&...
    1770: 0C 02 03 0C 05 06 08 02 03 02 0A 14 04 04 02 03  // ................
    1780: 0A 12 78 08 5A 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..x.Z ..........
    1790: 11 1F 01 02 02 04 09 0F 00 00 00 00 00 00 00 00  // ................
    17A0: 00 CC 55 01 03 0F 05 16 24 7F 06 8C 2C 09 0E 08  // ..U.....$...,...
    17B0: 0E 02 04 0E 06 07 08 02 03 02 0A 14 04 04 02 03  // ................
    17C0: 0A 12 8C 09 69 20 A1 07 00 0A 0A 04 01 01 01 0A  // ....i ..........
    17D0: 13 23 01 02 02 04 0A 0F 00 00 00 00 00 00 00 00  // .#..............
    17E0: 00 A0 86 01 03 10 05 19 28 6C 07 A0 32 0A 10 0A  // ........(l..2...
    17F0: 0F 02 04 10 06 07 08 02 03 02 0B 14 04 04 02 03  // ................
    1800: 0A 12 A0 0A 78 20 A1 07 00 0A 0A 04 01 01 01 0A  // ....x ..........
    1810: 14 26 01 02 02 04 0B 0F 00 00 00 00 00 00 00 00  // .&..............
    1820: 00 48 E8 01 03 12 05 20 33 47 09 C8 40 0D 14 0E  // .H..... 3G..@...
    1830: 13 03 05 14 07 08 0C 02 03 02 0C 14 04 04 02 03  // ................
    1840: 0A 12 C8 0D 96 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..... ..........
    1850: 16 2E 01 02 02 04 0E 0F 00 00 00 00 00 00 00 00  // ................
    1860: 00 F0 49 02 03 15 05 26 3D 22 0B F0 4C 0F 18 12  // ..I....&="..L...
    1870: 17 03 06 18 08 09 0C 02 03 03 0C 14 04 04 02 03  // ................
    1880: 0A 12 F0 0F B4 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..... ..........
    1890: 1A 36 01 02 02 04 10 0F 00 00 00 00 00 00 00 00  // .6..............
    18A0: 00 20 BF 02 03 17 05 2C 47 5C 0D 18 58 12 1C 16  // . .....,G\..X...
    18B0: 1B 04 07 1C 09 0A 10 02 03 03 0D 14 04 04 02 03  // ................
    18C0: 0A 12 18 12 D2 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..... ..........
    18D0: 1C 3E 01 02 02 04 13 0F 01 01 00 00 00 00 00 00  // .>..............
    18E0: 00 6C DC 02 03 18 07 2F 4C EB 0D 2C 5E 13 1E 16  // .l...../L..,^...
    18F0: 1D 04 08 1E 0A 0B 10 02 03 03 0E 14 04 04 02 03  // ................
    1900: 0A 12 2C 13 E1 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..,.. ..........
    1910: 1D 44 01 02 02 04 14 0F 01 01 00 00 00 00 00 00  // .D..............
    1920: 00 40 0D 03 03 18 07 32 50 D8 0E 40 64 14 20 18  // .@.....2P..@d. .
    1930: 1E 04 08 20 0A 0B 10 02 03 03 0E 14 04 04 02 03  // ... ............
    1940: 0A 12 40 14 F0 20 A1 07 00 0A 0A 04 01 01 01 0A  // ..@.. ..........
    1950: 1D 47 01 02 02 04 15 0F 01 01 00 00 00 00 00 00  // .G..............
    1960: 00 00 00 00 00 05 00 00 00 55 50 01 00 A0 7E 01  // .........UP...~.
    1970: 01 A4 7E 01 01 7C 7E 01 01 2C 7E 01 01 FF FF FF  // ..~..|~..,~.....
    1980: 00 00 1E 00 00 00 00 00 00 00 01 00 01 E1 49 8C  // ..............I.
    1990: 40 30 83 01 00 FF FF FF 01 00 1E 00 00 00 00 00  // @0..............
    19A0: 00 00 01 00 01 E9 49 8C 40 50 85 01 00 FF FF FF  // ......I.@P......
    19B0: 02 00 1E 00 00 00 00 00 00 00 01 00 01 E9 49 8C  // ..............I.
    19C0: 40 50 85 01 00 FF FF FF 03 00 1E 00 00 00 00 00  // @P..............
    19D0: 00 00 01 00 01 E1 49 8C 40 30 83 01 00 FF FF FF  // ......I.@0......
    19E0: 04 00 1E 00 00 00 00 00 00 01 00 01 00 E1 49 8C  // ..............I.
    19F0: 40 30 83 01 00 FF FF FF 05 00 1E 00 00 00 00 00  // @0..............
    1A00: 00 01 00 01 00 E9 49 8C 40 50 85 01 00 FF FF FF  // ......I.@P......
    1A10: 06 00 1E 00 00 00 00 00 00 01 00 01 00 E9 49 8C  // ..............I.
    1A20: 40 50 85 01 00 FF FF FF 07 00 1E 00 00 00 00 00  // @P..............
    1A30: 00 01 00 01 00 E1 49 8C 40 30 83 01 00 FF FF FF  // ......I.@0......
    1A40: 08 00 1E 00 00 00 00 00 00 00 01 00 01 E1 49 8C  // ..............I.
    1A50: 60 30 83 01 00 FF FF FF 09 00 1E 00 00 00 00 00  // `0..............
    1A60: 00 00 01 00 01 E9 49 8C 60 50 85 01 00 FF FF FF  // ......I.`P......
    1A70: 0A 00 1E 00 00 00 00 00 00 00 01 00 01 E9 49 8C  // ..............I.
    1A80: 60 50 85 01 00 FF FF FF 0B 00 1E 00 00 00 00 00  // `P..............
    1A90: 00 00 01 00 01 E1 49 8C 60 30 83 01 00 00 00 00  // ......I.`0......
    1AA0: 00 7E 00 00 00 4F 50 01 00 51 50 01 00 53 50 01  // .~...OP..QP..SP.
    1AB0: 00 54 50 01 00 56 50 01 00 57 50 01 00 58 50 01  // .TP..VP..WP..XP.
    1AC0: 00 73 50 01 00 76 50 01 00 5D 50 01 00 64 50 01  // .sP..vP..]P..dP.
    1AD0: 00 6B 50 01 00 78 50 01 00 0C 7E 01 01 18 7E 01  // .kP..xP...~...~.
    1AE0: 01 1C 7E 01 01 24 7E 01 01 28 7E 01 01 30 7E 01  // ..~..$~..(~..0~.
    1AF0: 01 34 7E 01 01 38 7E 01 01 3C 7E 01 01 40 7E 01  // .4~..8~..<~..@~.
    1B00: 01 5C 7E 01 01 60 7E 01 01 64 7E 01 01 68 7E 01  // .\~..`~..d~..h~.
    1B10: 01 6C 7E 01 01 70 7E 01 01 74 7E 01 01 84 7E 01  // .l~..p~..t~...~.
    1B20: 01 8C 7E 01 01 90 7E 01 01 94 7E 01 01 98 7E 01  // ..~...~...~...~.
    1B30: 01 9C 7E 01 01 AC 7E 01 01 B0 7E 01 01 B4 7E 01  // ..~...~...~...~.
    1B40: 01 B8 7E 01 01 C0 7E 01 01 C4 7E 01 01 C8 7E 01  // ..~...~...~...~.
    1B50: 01 CC 7E 01 01 D0 7E 01 01 D4 7E 01 01 D8 7E 01  // ..~...~...~...~.
    1B60: 01 DC 7E 01 01 E0 7E 01 01 E4 7E 01 01 E8 7E 01  // ..~...~...~...~.
    1B70: 01 EC 7E 01 01 F0 7E 01 01 F4 7E 01 01 F8 7E 01  // ..~...~...~...~.
    1B80: 01 FC 7E 01 01 00 7F 01 01 04 7F 01 01 08 7F 01  // ..~.............
    1B90: 01 0C 7F 01 01 10 7F 01 01 14 7F 01 01 18 7F 01  // ................
    1BA0: 01 1C 7F 01 01 20 7F 01 01 24 7F 01 01 28 7F 01  // ..... ...$...(..
    1BB0: 01 2C 7F 01 01 30 7F 01 01 34 7F 01 01 38 7F 01  // .,...0...4...8..
    1BC0: 01 3C 7F 01 01 40 7F 01 01 44 7F 01 01 48 7F 01  // .<...@...D...H..
    1BD0: 01 4C 7F 01 01 50 7F 01 01 54 7F 01 01 58 7F 01  // .L...P...T...X..
    1BE0: 01 5C 7F 01 01 60 7F 01 01 64 7F 01 01 68 7F 01  // .\...`...d...h..
    1BF0: 01 6C 7F 01 01 70 7F 01 01 74 7F 01 01 78 7F 01  // .l...p...t...x..
    1C00: 01 7C 7F 01 01 80 7F 01 01 84 7F 01 01 88 7F 01  // .|..............
    1C10: 01 8C 7F 01 01 90 7F 01 01 94 7F 01 01 98 7F 01  // ................
    1C20: 01 9C 7F 01 01 A0 7F 01 01 A4 7F 01 01 A8 7F 01  // ................
    1C30: 01 AC 7F 01 01 B0 7F 01 01 B4 7F 01 01 B8 7F 01  // ................
    1C40: 01 BC 7F 01 01 C0 7F 01 01 C4 7F 01 01 C8 7F 01  // ................
    1C50: 01 CC 7F 01 01 D0 7F 01 01 D4 7F 01 01 D8 7F 01  // ................
    1C60: 01 DC 7F 01 01 E0 7F 01 01 E4 7F 01 01 E8 7F 01  // ................
    1C70: 01 EC 7F 01 01 F0 7F 01 01 F4 7F 01 01 F8 7F 01  // ................
    1C80: 01 FC 7F 01 01 02 1D 00 03 03 1D 00 03 8C 1C 00  // ................
    1C90: 03 A1 04 00 05 18 04 00 05 55 02 00 05 FF FF FF  // .........U......
    1CA0: 00 1A 27 20 00 00 00 2A 00 00 04 00 00 F4 25 E5  // ..' ...*......%.
    1CB0: 0F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 13  // ................
    1CC0: 00 40 00 18 00 00 00 17 00 00 00 17 00 00 00 17  // .@..............
    1CD0: 00 04 20 00 F0 00 00 00 00 00 00 08 00 00 00 08  // .. .............
    1CE0: 00 13 30 80 00 2E 0A 4C 52 1C 0F DE 00 20 40 04  // ..0....LR.... @.
    1CF0: 70 00 00 F0 01 01 10 86 00 00 00 00 00 00 00 00  // p...............
    1D00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D10: 00 00 00 00 00 00 00 00 00 C0 04 00 00 00 00 00  // ................
    1D20: 00 03 00 00 00 00 00 00 00 00 14 1A 1B 1B 1B 1C  // ................
    1D30: 1C 00 00 00 00 00 00 00 00 08 00 C0 02 00 08 00  // ................
    1D40: 00 00 00 00 00 18 00 04 50 00 00 00 00 00 00 00  // ........P.......
    1D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E00: 00 00 00 00 00 1C 03 8E 03 AA 02 8E 03 E3 00 AA  // ................
    1E10: 02 E3 00 71 00 E3 00 71 00 55 01 71 00 1C 03 55  // ...q...q.U.q...U
    1E20: 01 1C 03 8E 03 CF 00 30 FF FF 0C 00 F3 00 80 01  // .......0........
    1E30: 90 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 80  // ................
    1E70: 01 05 00 00 00 0E 10 00 40 3F FF 3F 0F 00 00 00  // ........@?.?....
    1E80: 00 2B 00 00 00 22 00 00 00 10 00 00 00 10 00 00  // .+..."..........
    1E90: 00 00 00 00 00 14 00 00 00 00 00 00 00 EC 00 00  // ................
    1EA0: 00 00 00 01 01 00 00 00 00 04 00 00 00 01 53 24  // ..............S$
    1EB0: 76 10 32 54 76 88 00 00 00 12 38 50 76 A9 04 00  // v.2Tv.....8Pv...
    1EC0: 00 00 00 00 00 01 00 00 00 10 32 54 76 10 32 54  // ..........2Tv.2T
    1ED0: 76 88 00 00 00 10 32 58 76 94 0A 00 00 00 00 00  // v.....2Xv.......
    1EE0: 00 04 00 00 00 10 32 56 74 12 30 54 76 88 00 00  // ......2Vt.0Tv...
    1EF0: 00 10 32 54 76 98 0A 00 00 00 00 00 00 01 00 00  // ..2Tv...........
    1F00: 00 10 32 64 75 10 32 64 75 88 00 00 00 10 32 54  // ..2du.2du.....2T
    1F10: 76 98 0A 00 00 00 00 00 00 04 00 00 00 10 32 56  // v.............2V
    1F20: 74 12 30 54 76 88 00 00 00 10 32 54 76 98 0A 00  // t.0Tv.....2Tv...
    1F30: 00 00 00 00 00 01 00 00 00 10 32 64 75 10 32 64  // ..........2du.2d
    1F40: 75 88 00 00 00 10 32 54 76 98 0A 00 00 00 00 00  // u.....2Tv.......
    1F50: 00 04 00 00 00 01 53 24 76 10 32 54 76 88 00 00  // ......S$v.2Tv...
    1F60: 00 12 38 50 76 A9 04 00 00 00 00 00 00 01 00 00  // ..8Pv...........
    1F70: 00 10 32 54 76 10 32 54 76 88 00 00 00 10 32 58  // ..2Tv.2Tv.....2X
    1F80: 76 94 0A 00 00 00 00 00 00 00 00 00 74 00 04 02  // v...........t...
    1F90: 05 03 12 00 1A 06 60 00 00 00 00 00 94 00 5A 00  // ......`.......Z.
    1FA0: FF 00 05 07 0C 00 0E 00 00 00 08 00 00 00 01 03  // ................
    1FB0: 12 00 1A 06 60 00 00 00 00 00 94 00 5A 00 FF 00  // ....`.......Z...
    1FC0: 01 07 0C 00 0E 00 00 02 08 00 00 00 04 03 0E 00  // ................
    1FD0: 10 06 44 00 00 00 00 00 FF 00 04 07 0C 00 0E 00  // ..D.............
    1FE0: 00 03 08 00 00 00 02 03 0E 00 10 06 44 00 00 00  // ............D...
    1FF0: 00 00 FF 00 02 07 0C 00 0E 00 00 01 08 00 00 00  // ................
    2000: 08 00 01 01 00 00 00 00 C8 00 02 01 D6 09 80 02  // ................
    2010: A0 00 E0 01 2D 00 10 00 60 00 0A 00 02 00 00 00  // ....-...`.......
    2020: 00 00 08 08 06 00 12 3C A0 0F 20 03 00 01 58 02  // .......<.. ...X.
    2030: 1C 00 28 00 80 00 01 00 04 00 00 00 00 00 00 00  // ..(.............
    2040: 00 00 6A 3C 64 19 00 04 40 01 00 03 26 00 18 00  // ..j<d...@...&...
    2050: 88 00 03 00 06 00 00 00 00 00 00 00 06 00 55 3C  // ..............U<
    2060: 30 2A 00 05 08 02 C0 03 28 00 60 00 70 00 01 00  // 0*......(.`.p...
    2070: 03 00 00 00 00 00 00 00 00 00 E9 3C 30 2A 00 05  // ...........<0*..
    2080: 98 01 00 04 2A 00 30 00 70 00 01 00 03 00 00 00  // ....*.0.p.......
    2090: 00 00 00 00 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04  // .......<./x.....
    20A0: 27 00 58 00 90 00 03 00 04 00 00 00 00 00 00 00  // '.X.............
    20B0: 02 00 EB 3C 48 3F 40 06 30 02 B0 04 32 00 40 00  // ...<H?@.0...2.@.
    20C0: C0 00 01 00 03 00 00 00 00 00 00 00 00 00 EC 3C  // ...............<
    20D0: 34 00 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // 4........*.*..**
    20E0: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    20F0: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    2100: 15 3F 3F 3F 74 00 01 01 10 01 06 12 11 01 16 12  // .???t...........
    2110: 13 01 06 6A 14 01 16 6A 16 01 06 55 17 01 16 55  // ...j...j...U...U
    2120: 19 01 06 EA 1A 01 16 EA 65 01 16 E9 66 01 0A E9  // ........e...f...
    2130: 21 01 0A 12 22 01 0A 6A 23 01 0A 55 24 01 0A EA  // !..."..j#..U$...
    2140: 45 01 16 EB 46 01 0A EB 75 01 16 EC 76 01 0A EC  // E...F...u...v...
    2150: D2 01 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71  // ...p...p...q...q
    2160: E2 01 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73  // ...r...r...s...s
    2170: F5 01 16 74 F6 01 0A 74 14 00 02 01 02 00 08 00  // ...t...t........
    2180: 80 00 00 02 00 04 00 08 40 00 FF FF A6 09 12 00  // ........@.......
    2190: 02 22 03 C4 09 00 00 93 43 00 00 83 00 08 00 00  // ."......C.......
    21A0: 00 1C 00 00 00 00 00 00 76 00 00 00 00 00 00 00  // ........v.......
    21B0: 00 00 00 00 00 00 01 00 00 00 01 00 00 00 0D 00  // ................
    21C0: 00 00 BE 0A 00 00 00 05 00 00 6B 03 00 00 08 07  // ..........k.....
    21D0: 00 00 E2 04 00 00 95 05 00 00 E2 04 00 00 95 05  // ................
    21E0: 00 00 B0 04 00 00 C1 04 00 00 C1 04 00 00 2A 03  // ..............*.
    21F0: 00 00 C1 04 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2200: 00 00 F4 01 00 00 A2 01 00 00 61 00 00 00 F4 01  // ..........a.....
    2210: 00 00 3C 02 00 00 B2 02 00 00 3C 02 00 00 B2 02  // ..<.......<.....
    2220: 00 00 A2 01 00 00 E7 01 00 00 E7 01 00 00 2C 01  // ..............,.
    2230: 00 00 E7 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2240: 00 00 81 00 00 00 10 00 00 00 1E 00 00 00 01 01  // ................
    2250: 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00  // ................
    2260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 54 0B  // ..............T.
    2270: 00 00 54 0B 00 00 00 00 00 00 00 00 00 00 00 00  // ..T.............
    2280: 00 00 54 0B 00 00 B6 03 00 00 B6 03 00 00 14 00  // ..T.............
    2290: 00 00 E4 0C 00 00 E4 0C 00 00 64 00 00 00 6E 00  // ..........d...n.
    22A0: 00 00 01 00 00 00 01 00 00 00 01 00 00 00 01 00  // ................
    22B0: 00 00 01 00 00 00 64 00 00 00 64 00 00 00 64 00  // ......d...d...d.
    22C0: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 64 00  // ..d...d...d...d.
    22D0: 00 00 64 00 00 00 64 00 00 00 64 00 00 00 00 00  // ..d...d...d.....
    22E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    22F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F4 01  // ................
    2370: 00 00 F4 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2380: 00 00 F4 01 00 00 A2 02 00 00 A2 02 00 00 06 00  // ................
    2390: 00 00 19 00 00 00 E8 03 00 00 19 00 00 00 32 00  // ..............2.
    23A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23B0: 00 00 00 00 00 00 19 00 00 00 0A 00 00 00 19 00  // ................
    23C0: 00 00 0A 00 00 00 19 00 00 00 0A 00 00 00 19 00  // ................
    23D0: 00 00 0A 00 00 00 19 00 00 00 0A 00 00 00 00 00  // ................
    23E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    23F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00  // ................
    2470: 00 00 06 00 00 00 50 00 50 00 5F 00 5F 00 78 05  // ......P.P._._.x.
    2480: 78 05 D6 06 D6 06 34 08 34 08 CA 08 CA 08 00 00  // x.....4.4.......
    2490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    24A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00  // ................
    24B0: 00 00 FF FD 7F A3 E3 37 04 00 64 00 00 00 00 00  // .......7..d.....
    24C0: 00 00 00 00 00 00 00 00 00 00 64 00 00 00 00 00  // ..........d.....
    24D0: 00 00 00 00 00 00 00 00 00 00 64 00 12 00 00 00  // ..........d.....
    24E0: 00 00 64 00 6E 00 64 00 73 00 73 00 73 00 73 00  // ..d.n.d.s.s.s.s.
    24F0: 00 00 00 00 00 00 00 00 00 00 01 00 00 00 0A 00  // ................
    2500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 B8 0B  // ................
    2510: 48 0D D8 0E 68 10 C0 12 00 00 0C 38 00 00 FF 3F  // H...h......8...?
    2520: 00 00 32 00 64 00 00 00 B8 0B B8 0B 32 00 00 00  // ..2.d.......2...
    2530: 00 00 16 0C EA 0B F8 11 68 10 80 00 00 01 37 00  // ........h.....7.
    2540: 37 00 16 0C 16 0C EA 0B EA 0B 05 00 05 00 00 00  // 7...............
    2550: 02 00 00 00 80 3F 00 00 00 00 38 15 09 3E F8 C2  // .....?....8..>..
    2560: E4 BD 2E 1C 28 3F A1 01 00 00 00 00 02 00 BE 9F  // ....(?..........
    2570: 8A 3F 48 E1 7A 3E F7 58 FA 3A 56 0E ED 3E EF 55  // .?H.z>.X.:V..>.U
    2580: AB 3E A2 01 00 00 00 01 04 00 71 3D 9A 3F C3 F5  // .>........q=.?..
    2590: 28 3E 00 52 1B 3B 0A D7 03 3F C3 47 94 3E 61 00  // (>.R.;...?.G.>a.
    25A0: 00 00 00 00 02 00 00 00 80 3F 00 00 00 00 B9 A5  // .........?......
    25B0: D5 3A BE 9F DA 3E 5C 8F 82 3E F4 01 00 00 00 00  // .:...>\..>......
    25C0: 02 00 F6 28 9C 3F 08 AC 1C 3E A3 40 1F 3B 42 60  // ...(.?...>.@.;B`
    25D0: 05 3F EE 5A 82 3E 3C 02 00 00 00 00 02 00 D3 4D  // .?.Z.><........M
    25E0: 82 3F 83 C0 4A 3E FD 82 DD 3A 52 B8 DE 3E 8D 5D  // .?..J>...:R..>.]
    25F0: 82 3E B2 02 00 00 00 00 02 00 F6 28 9C 3F 08 AC  // .>.........(.?..
    2600: 1C 3E A3 40 1F 3B 42 60 05 3F EE 5A 82 3E 3C 02  // .>.@.;B`.?.Z.><.
    2610: 00 00 00 00 02 00 D3 4D 82 3F 83 C0 4A 3E FD 82  // .......M.?..J>..
    2620: DD 3A 52 B8 DE 3E 8D 5D 82 3E B2 02 00 00 00 00  // .:R..>.].>......
    2630: 02 00 F9 0F 99 3F 9A 99 99 3E 89 0C 2B 3B 71 3D  // .....?...>..+;q=
    2640: 0A 3F 1B 64 82 3E A2 01 00 00 00 00 02 00 EC 51  // .?.d.>.........Q
    2650: 98 3F 73 68 11 3E 17 F1 1D 3B 2F DD 04 3F 8D 5D  // .?sh.>...;/..?.]
    2660: 82 3E E7 01 00 00 00 00 02 00 EC 51 98 3F 73 68  // .>.........Q.?sh
    2670: 11 3E 17 F1 1D 3B 2F DD 04 3F 8D 5D 82 3E E7 01  // .>...;/..?.].>..
    2680: 00 00 00 00 02 00 D9 CE 37 3F AC 1C 3A 3F 00 00  // ........7?..:?..
    2690: 00 00 44 69 8F 3E C1 39 13 3F 2C 01 00 00 00 00  // ..Di.>.9.?,.....
    26A0: 02 00 EC 51 98 3F 73 68 11 3E 17 F1 1D 3B 2F DD  // ...Q.?sh.>...;/.
    26B0: 04 3F 8D 5D 82 3E E7 01 00 00 F4 01 BE 0A 00 00  // .?.].>..........
    26C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    26D0: 00 00 00 00 00 00 00 00 00 00 B2 02 95 05 00 00  // ................
    26E0: 00 00 00 00 00 00 00 00 00 00 3C 02 E2 04 00 00  // ..........<.....
    26F0: 00 00 00 00 00 00 00 00 00 00 A2 01 00 05 00 00  // ................
    2700: 00 00 00 00 00 00 00 00 00 00 61 00 1E 02 A4 02  // ..........a.....
    2710: 6B 03 A2 01 B0 04 00 00 00 00 00 00 00 00 00 00  // k...............
    2720: 00 00 E7 01 C1 04 00 00 00 00 00 00 00 00 00 00  // ................
    2730: 00 00 E7 01 C1 04 00 00 00 00 00 00 00 00 00 00  // ................
    2740: 00 00 2C 01 2A 03 00 00 00 00 00 00 00 00 00 00  // ..,.*...........
    2750: 00 00 E7 01 C1 04 00 00 00 00 00 00 00 00 00 00  // ................
    2760: 00 00 F4 01 08 07 00 00 00 00 00 00 00 00 00 00  // ................
    2770: 00 00 00 00 00 00 BE 30 81 3F 16 FB 4B 3D 9B 20  // .......0.?..K=. 
    2780: 6A BD BE 30 81 3F 16 FB 4B 3D 9B 20 6A BD BE 30  // j..0.?..K=. j..0
    2790: 81 3F 16 FB 4B 3D 9B 20 6A BD 54 1D 62 3F D5 78  // .?..K=. j.T.b?.x
    27A0: E9 3D A3 92 BA BD 1F D7 26 3F 6D E7 FB 3D D3 A4  // .=......&?m..=..
    27B0: 34 3E BE 0A 00 00 00 05 00 00 6B 03 00 00 08 07  // 4>........k.....
    27C0: 00 00 E2 04 00 00 95 05 00 00 E2 04 00 00 95 05  // ................
    27D0: 00 00 B0 04 00 00 C1 04 00 00 C1 04 00 00 2A 03  // ..............*.
    27E0: 00 00 C1 04 00 00 00 03 03 03 08 07 00 00 4C 01  // ..............L.
    27F0: FA 01 F0 0A 80 0C 8C 0A 48 0D 48 0D 48 0D 88 13  // ........H.H.H...
    2800: 18 15 18 15 18 15 BC 02 20 03 BC 02 01 00 01 02  // ........ .......
    2810: 5D 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // ]...............
    2820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EC 10  // ................
    2850: 84 10 1C 10 B5 0F 4D 0F E5 0E 7E 0E 16 0E AE 0D  // ......M...~.....
    2860: 47 0D DF 0C 77 0C 5A 0B 3D 0A 20 09 03 08 00 00  // G...w.Z.=. .....
    2870: 00 00 03 02 01 00 00 00 00 00 00 00 00 00 00 00  // ................
    2880: 00 00 00 03 01 04 51 00 6B 02 37 00 3C 00 90 01  // ......Q.k.7.<...
    2890: 90 01 90 01 90 01 90 01 90 01 90 01 90 01 90 01  // ................
    28A0: 90 01 14 00 78 05 34 08 AC 0D 00 00 50 00 F4 01  // ....x.4.....P...
    28B0: 00 00 01 00 01 02 00 00 00 00 00 00 00 00 00 00  // ................
    28C0: 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    28D0: 00 00 00 00 00 00 00 00 00 00 6F F0 85 3D FC A9  // ..........o..=..
    28E0: 71 BD 06 0D BD 3D 00 00 00 00 00 00 00 00 00 00  // q....=..........
    28F0: 00 00 4D 2D 1B 3E 75 02 1A 3D F3 54 87 BC 00 00  // ..M-.>u..=.T....
    2900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E1 00  // ................
    2950: E1 00 01 01 00 00 00 00 00 00 E1 00 E1 00 19 00  // ................
    2960: 19 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2990: 00 00 00 00 00 00 00 00 00 00 00 01 54 0B 34 00  // ............T.4.
    29A0: 00 00 8E 75 45 40 B0 72 68 3E 66 66 84 41 C3 D3  // ...uE@.rh>ff.A..
    29B0: CB 3E 00 00 00 00 B8 0B B8 0B 80 0C 80 0C C8 00  // .>..............
    29C0: E1 00 E1 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    29D0: 00 00 00 00 00 00 35 07 00 00 FC 07 00 00 BB 09  // ......5.........
    29E0: 00 00 35 07 00 00 FC 07 00 00 BB 09 00 00 00 00  // ..5.............
    29F0: 00 00 00 00 00 00 00 00 00 00 00 00 1A 01 01 F5  // ................
    2A00: AD 80 19 08 68 01 01 05 48 1C DC 03 0B 00 00 00  // ....h...H.......
    2A10: C0 D0 E0 F0 A5 01 01 AA 19 00 00 00 74 01 01 05  // ............t...
    2A20: FF FF FF FF 32 01 01 AF 00 00 00 8E 01 00 00 00  // ....2...........
    2A30: 17 00 00 00 17 00 00 00 92 57 2B 05 00 00 01 00  // .........W+.....
    2A40: 65 00 6E 00 74 00 01 00 6F 00 69 00 64 00 01 00  // e.n.t...o.i.d...
    2A50: 67 00 61 00 69 00 01 00 20 00 61 00 74 00 01 00  // g.a.i... .a.t...
    2A60: 4D 00 65 00 6D 00 01 00 72 00 79 00 00 00 6E 00  // M.e.m...r.y...n.
    2A70: 00 00 00 00 24 6D 4C AF 00 01 00 8E 04 00 00 00  // ....$mL.........
    2A80: 17 00 00 00 17 00 00 00 E2 01 2B 05 00 00 54 00  // ..........+...T.
    2A90: 5F 00 4D 00 45 00 4D 00 31 00 20 00 01 00 01 00  // _.M.E.M.1. .....
    2AA0: 6E 00 01 00 43 00 01 00 6E 00 01 00 72 00 6F 00  // n...C...n...r.o.
    2AB0: 6C 00 20 00 01 00 61 00 01 00 6E 00 00 00 6E 00  // l. ...a...n...n.
    2AC0: 00 00 00 00 DE 6C 5A AF 00 02 00 8C 01 00 00 00  // .....lZ.........
    2AD0: 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    2B30: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    2B40: 0E 1F A3 14 00 8C 0E 08 00 B2 20 E8 20 1C 0B C0  // .......... . ...
    2B50: 75 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66  // u....f_f^f]f[fZf
    2B60: 59 66 58 07 1F CB E8 3A 1D E8 0C 1B 32 D2 8D 3E  // YfX....:....2..>
    2B70: 3E 03 89 55 16 E8 C3 0C E8 86 0C E8 1C 1A 75 19  // >..U..........u.
    2B80: E8 D1 0D E8 B0 02 E8 09 18 0B C0 74 0C E8 39 00  // ...........t..9.
    2B90: E8 3B 43 E8 7D 0C E8 90 43 E8 A9 00 B4 80 E8 01  // .;C.}...C.......
    2BA0: 1B 8A C7 66 C1 E0 10 8A E3 B0 20 66 A3 18 A6 E8  // ...f...... f....
    2BB0: B0 02 E8 90 0C E8 2E 1D 66 5F 66 5E 66 5D 66 5B  // ........f_f^f]f[
    2BC0: 66 5A 66 59 66 58 07 1F CB 2E 8B 1E 08 00 83 3E  // fZfYfX.........>
    2BD0: D9 2B 00 75 04 89 1E D7 2B 1E 2E 8E 1E CF 2B 9C  // .+.u....+.....+.
    2BE0: FA 66 C7 06 08 01 65 F0 00 F0 C7 06 40 00 FA 2B  // .f....e.....@..+
    2BF0: 89 1E 42 00 C7 06 B4 01 FA 2B 89 1E B6 01 C7 06  // ..B......+......
    2C00: 7C 00 FA 73 89 1E 7E 00 C7 06 0C 01 0D 78 89 1E  // |..s..~......x..
    2C10: 0E 01 C7 06 A8 04 2C 6E 89 1E AA 04 2E 8E 1E D7  // ......,n........
    2C20: 2B 8B C3 A3 2E 6E A3 3E 6E A3 50 6E 9D 1F C3 50  // +....n.>n.Pn...P
    2C30: 4D 49 44 FA 2B 5E 5E 00 00 00 A0 00 B0 00 B8 00  // MID.+^^.........
    2C40: C0 00 00 00 00 BB 00 00 E8 E3 0B 66 C1 E8 10 A3  // ...........f....
    2C50: 72 03 BB 0B 00 E8 D6 0B 8D 3E 3E 03 66 89 45 18  // r........>>.f.E.
    2C60: C3 00 E8 5C 1C 80 FC A0 75 05 E8 3D 00 EB 11 80  // ...\....u..=....
    2C70: FC 4F 75 05 E8 75 31 EB 07 E8 CA 36 EB 02 B4 01  // .Ou..u1....6....
    2C80: E8 63 1C CF E8 3A 1C E8 20 00 EB 02 B4 01 E8 55  // .c...:.. ......U
    2C90: 1C CB E8 2C 1C 80 FC 4F 75 05 E8 4F 31 EB 07 E8  // ...,...Ou..O1...
    2CA0: A4 36 EB 02 B4 01 E8 3D 1C CB 1E 06 66 50 66 51  // .6.....=....fPfQ
    2CB0: 66 52 66 53 66 55 66 56 66 57 0E 1F 3C 04 75 29  // fRfSfUfVfW..<.u)
    2CC0: 2E A1 1A 00 66 C1 E0 10 2E A1 18 00 8D 36 38 02  // ....f........68.
    2CD0: 8A 3C 80 EF 30 B3 02 8B EC 89 5E 0C 89 46 04 66  // .<..0.....^..F.f
    2CE0: C1 E8 10 89 46 00 E9 2B 01 3C 05 75 18 E8 B2 19  // ....F..+.<.u....
    2CF0: E8 85 19 2E A1 08 00 8B EC 89 56 10 89 46 00 89  // ..........V..F..
    2D00: 5E 04 E9 0F 01 3C 06 75 32 E8 0A 0B 66 D1 E0 8B  // ^....<.u2...f...
    2D10: EC 89 46 14 BB 02 00 E8 14 0B 88 46 18 E8 FE 0A  // ..F........F....
    2D20: 66 89 46 0C BB 09 00 E8 04 0B 33 C0 66 89 46 00  // f.F.......3.f.F.
    2D30: 2E 8B 16 72 03 89 56 10 E9 D9 00 3C 0B 75 24 0A  // ...r..V....<.u$.
    2D40: DB 75 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E  // .u..........^..N
    2D50: 14 E9 C0 00 8A C7 E8 D3 00 E8 38 01 0F 84 AC 00  // ..........8.....
    2D60: E9 B1 00 3C 17 75 1D E8 91 0D 74 06 E8 83 09 E8  // ...<.u....t.....
    2D70: 87 12 E8 13 07 E8 78 0A 33 C9 8B C8 8B EC 89 4E  // ......x.3......N
    2D80: 14 E9 90 00 3C 18 75 45 0A FF 75 10 E8 18 0D 8B  // ....<.uE..u.....
    2D90: EC 89 46 0C E8 4F 07 89 4E 10 EB 78 E8 5C 0D 75  // ..F..O..N..x.\.u
    2DA0: 6B BB 00 4C E8 B8 1A 66 0B C0 74 60 23 C9 74 5C  // k..L...f..t`#.t\
    2DB0: E8 30 0D BE 00 4C E8 A2 0A 74 51 BE 00 4C B0 40  // .0...L...tQ..L.@
    2DC0: E8 F1 0A E8 E1 0C 8B EC 89 46 0C EB 47 3C 82 75  // .........F..G<.u
    2DD0: 1A 80 FB 05 75 15 0A FF 75 0A E8 26 0C 8B EC 89  // ....u...u..&....
    2DE0: 46 14 EB 30 E8 03 0C 74 1B EB 29 3C 8E 75 15 80  // F..0...t..)<.u..
    2DF0: FF 01 74 08 80 FF 02 75 0B 80 C1 02 80 C1 02 E8  // ..t....u........
    2E00: 4D 0C EB 10 8B EC C6 46 19 02 EB 0F 8B EC C6 46  // M......F.......F
    2E10: 19 01 EB 07 32 E4 8B EC 88 66 19 66 5F 66 5E 66  // ....2....f.f_f^f
    2E20: 5D 66 5B 66 5A 66 59 66 58 07 1F C3 51 8A C8 B8  // ]f[fZfYfX...Q...
    2E30: 01 00 D3 E0 59 C3 E8 D3 1A C3 0C 01 C3 00 50 51  // ....Y.........PQ
    2E40: B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61 8A E0  // ...C.3.B...B.a..
    2E50: 0C 03 E6 61 8A C4 B9 C8 00 E8 C7 16 E6 61 59 58  // ...a.........aYX
    2E60: C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6 06 02  // ...V...>...v....
    2E70: 00 80 8A 0E 02 00 C1 E1 09 FC C6 06 21 00 00 33  // ............!..3
    2E80: F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26 21 00  // .2...........&!.
    2E90: 5E 1F C3 00 57 0B C0 75 0F E8 1E 08 74 25 E8 24  // ^...W..u....t%.$
    2EA0: 00 F6 C3 04 74 F3 EB 11 8B C8 E8 E5 14 23 C1 74  // ....t........#.t
    2EB0: 12 E8 11 00 F6 C3 04 74 0A 5F 8D 5C 28 E8 91 05  // .......t._.\(...
    2EC0: 0B F6 C3 5F C3 50 E8 D3 07 E8 37 14 0A C9 74 11  // ..._.P....7...t.
    2ED0: E8 C2 11 3C 00 75 1F E8 CB 01 8A EB F6 C5 04 74  // ...<.u.........t
    2EE0: 15 8D 9C A6 00 E8 77 19 0A C0 74 0A E8 88 04 74  // ......w...t....t
    2EF0: 05 33 C9 E8 51 05 E8 AC 01 58 C3 51 B9 5F 00 E8  // .3..Q....X.Q._..
    2F00: D0 15 59 C3 51 E8 1A 00 75 14 E8 69 01 3C 01 75  // ..Y.Q...u..i.<.u
    2F10: 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33 C9  // .. ..'.u......3.
    2F20: 59 C3 53 E8 39 19 66 3D 00 FF FF FF 75 0E 83 C3  // Y.S.9.f=....u...
    2F30: 04 E8 2B 19 66 3D FF FF FF 00 75 00 5B C3 50 52  // ..+.f=....u.[.PR
    2F40: 32 D2 E8 1A 19 02 D0 02 D4 66 C1 E8 10 02 D0 02  // 2........f......
    2F50: D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 3E 07 8D 9C  // ........ZX..>...
    2F60: A4 01 E8 E9 00 A9 DD 0F 74 52 E8 38 01 F6 C3 08  // ........tR.8....
    2F70: 74 0C 8D 5C 28 E8 DD 00 75 04 E8 62 00 C3 B5 02  // t..\(...u..b....
    2F80: E8 FC 00 E8 1F 01 F6 C3 04 74 21 8D 5C 28 E8 22  // .........t!.\(."
    2F90: 01 E8 6D 03 74 05 B5 03 E8 E4 00 E8 41 04 E8 FA  // ..m.t.......A...
    2FA0: 00 80 FD 00 75 38 B5 02 E8 E6 00 C3 8D 9C C0 01  // ....u8..........
    2FB0: B8 00 55 E8 5C 0D B5 02 E8 D6 00 C3 A9 02 00 74  // ..U.\..........t
    2FC0: 1D B5 04 E8 B9 00 E8 DC 00 8D 5C 28 E8 E4 00 E8  // ..........\(....
    2FD0: 2A 16 E8 BC 00 8D 5C 28 E8 D8 00 E8 01 04 C3 B5  // *.....\(........
    2FE0: 01 E8 9B 00 B5 02 E8 A8 00 E8 B9 00 F6 C3 04 75  // ...............u
    2FF0: 10 8D 9C C0 01 B8 00 55 E8 17 0D B5 02 E8 17 00  // .......U........
    3000: C3 E8 AF 00 B5 02 8D 5C 28 E8 57 00 75 02 B5 01  // .......\(.W.u...
    3010: E8 04 00 E8 C9 03 C3 8D 9C AC 02 B1 02 E8 E3 17  // ................
    3020: B5 02 E8 6C 00 C3 8D 9C A4 01 E8 21 00 E8 75 00  // ...l.......!..u.
    3030: F6 C3 04 74 12 8D 5C 28 E8 78 00 E8 5D 00 E8 59  // ...t..\(.x..]..Y
    3040: 07 8D 5C 28 E8 BE 15 B8 02 00 E8 0E FF C3 B9 48  // ..\(...........H
    3050: 00 E8 7E 14 C3 53 81 C3 05 01 E8 02 18 24 06 3C  // ..~..S.......$.<
    3060: 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8  // .[....=..u.S....
    3070: ED 17 5B A8 01 C3 53 83 C3 12 E8 E2 17 5B C3 8D  // ..[...S......[..
    3080: 9C AC 02 32 C9 E8 7B 17 C3 8D 9C AC 02 E8 CF 17  // ...2..{.........
    3090: C3 8D 9C AC 02 B1 01 E8 69 17 C3 8D 9C AC 02 B1  // ........i.......
    30A0: 01 E8 77 17 C3 66 50 8D 9C A0 01 E8 B1 17 8A D8  // ..w..fP.........
    30B0: 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00 2B  // fX.UWQ.........+
    30C0: D9 D1 E3 8D 58 4E E8 96 17 E8 E3 01 E2 EE 8D 5C  // ....XN.........\
    30D0: 4B E8 8B 17 B9 03 00 8B D0 BF 2B 31 85 55 06 74  // K.........+1.U.t
    30E0: 17 66 8B 05 8D 9A 4C 02 E8 D4 16 8B 45 04 8D 9A  // .f....L.....E...
    30F0: 50 02 E8 E2 16 83 C5 08 83 C7 08 E2 DF 8D 7C 5E  // P.............|^
    3100: B9 04 00 33 ED 8B DF E8 55 17 0B C0 74 09 E8 5D  // ...3....U...t..]
    3110: 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED E8  // ............U2..
    3120: 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3 14  // o..\(.N.=..u....
    3130: E8 2C 17 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D 9C  // .,.$p......T.]..
    3140: A6 00 E8 1A 17 0A C0 74 46 8D 9C A8 00 E8 0F 17  // .......tF.......
    3150: 3C 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8 00  // <.u;f...<.r3....
    3160: 32 E4 03 D8 8B FB B9 04 00 8B DF E8 F1 16 0B C0  // 2...............
    3170: 74 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5 1C  // t.......u.......
    3180: 55 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA 59  // UX..ps....I..u.Y
    3190: 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03 3C  // _]. .X.<.......<
    31A0: 00 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8 AE  // .......<. .Q....
    31B0: 16 8D 9A C0 01 E8 1F 16 8D 5D 02 E8 A1 16 8D 9A  // .........]......
    31C0: C2 01 E8 89 00 8D 5D 05 E8 94 16 8D 9A C6 01 E8  // ......].........
    31D0: 7C 00 8D 5D 08 E8 87 16 8B C8 8A DC 66 C1 C8 10  // |..]........f...
    31E0: 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06 8A  // ................
    31F0: FC C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80  // ................
    3200: E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A CC 01  // .?..............
    3210: E8 C4 15 8D 9A CA 01 8B C1 E8 BB 15 8D 9A CE 01  // ................
    3220: 33 C0 8A C6 E8 B0 15 8D 9A D0 01 33 C0 8A C2 E8  // 3..........3....
    3230: A5 15 8D 5D 0C E8 27 16 8D 9A D2 01 E8 0F 00 8D  // ...]..'.........
    3240: 5D 0F E8 1A 16 8D 9A D6 01 E8 8B 15 59 C3 8B C8  // ]...........Y...
    3250: 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04  // ..f.............
    3260: 8B C1 E8 72 15 83 C3 02 8B C2 E8 6A 15 C3 8D 5D  // ...r.......j...]
    3270: 11 E8 EB 15 8A E0 BA 06 00 C0 E8 07 74 03 80 CA  // ............t...
    3280: 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C  // ......$.<.u...@<
    3290: 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02  // .u.......t......
    32A0: 74 03 80 E2 FB 8B C2 8D 9A D8 01 E8 29 15 C3 3C  // t...........)..<
    32B0: 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A 50 02  // .t=.....$?.<..P.
    32C0: E8 14 15 0F B6 C2 83 C0 1F C1 E0 03 8D 9A 4C 02  // ..............L.
    32D0: E8 04 15 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 8B  // ................
    32E0: 32 2E F7 B7 89 32 8D 9A 4E 02 E8 EA 14 83 C5 08  // 2....2..N.......
    32F0: C3 10 00 0A 00 04 00 03 00 05 00 04 00 10 00 09  // ................
    3300: 00 8D 9C A6 00 E8 57 15 0A C0 74 1F 8D 9C A8 00  // ......W...t.....
    3310: 51 B1 03 E8 18 00 59 0B DB 74 10 E8 41 15 32 C0  // Q.....Y..t..A.2.
    3320: 66 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3 66 50  // f=....u....3..fP
    3330: 52 E8 2B 15 3C 02 75 39 80 FC 03 72 34 66 C1 E8  // R.+.<.u9...r4f..
    3340: 10 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B DA  // .2.<.v*.......;.
    3350: 73 1F E8 0A 15 8A E0 80 E4 E0 C0 EC 05 24 1F 38  // s............$.8
    3360: CC 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66 58  // .t.2.........ZfX
    3370: C3 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 E0 14 0A  // .3.ZfX.Q........
    3380: C0 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8 CE  // .t..........t...
    3390: 14 66 C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32 C0  // .f......u.....2.
    33A0: 0A C0 59 C3 66 50 52 E8 B5 14 3C 70 75 2B 66 C1  // ..Y.fPR...<pu+f.
    33B0: E8 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A E8  // ..2........;.s..
    33C0: 9D 14 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03 03  // ..8.t.f...2.....
    33D0: D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3 57  // .....ZfX.3.ZfX.W
    33E0: 66 51 8D 9C C0 01 8B FB 8B DF E8 3D 00 0B C9 74  // fQ.........=...t
    33F0: 0B 66 8B D1 E8 C9 0B 83 C7 1C EB EC 66 59 5F C3  // .f..........fY_.
    3400: 50 53 51 B9 07 00 53 8B DA E8 53 14 83 F8 00 5B  // PSQ...S...S....[
    3410: 74 09 66 C1 E3 10 8B DA E8 CC 10 59 5B 58 C3 51  // t.f........Y[X.Q
    3420: 53 B9 07 00 E8 D9 10 5B 59 C3 66 50 53 83 C3 06  // S......[Y.fPS...
    3430: E8 2C 14 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 1E  // .,.[..f...S.....
    3440: 14 8B C8 5B 66 58 C3 8D 9C A0 01 32 C9 E8 B3 13  // ...[fX.....2....
    3450: C3 57 B9 20 00 E8 B4 10 5F C3 53 51 E8 19 00 32  // .W. ...._.SQ...2
    3460: E4 8A C5 C1 E0 02 59 8D 9C 78 01 03 D8 E8 EF 13  // ......Y..x......
    3470: 5B C3 B1 02 E8 07 00 C3 B1 01 E8 01 00 C3 53 8D  // [.............S.
    3480: 9C 98 01 E8 95 13 5B C3 33 C9 E8 0D 11 75 3C 66  // ......[.3....u<f
    3490: BA 22 F0 FF FF 66 33 C0 E8 3C 03 33 C0 E8 1A 02  // ."...f3..<.3....
    34A0: 74 1C A9 DD 0F 74 F6 E8 1B FA F6 C3 04 75 05 F6  // t....t.......u..
    34B0: C3 18 74 E9 E8 1F 00 50 E8 A0 FA 58 EB DF E8 0B  // ..t....P...X....
    34C0: 00 75 08 E8 20 00 8B C1 E8 90 FA C3 66 50 E8 1F  // .u.. .......fP..
    34D0: 03 8B C8 66 58 C3 66 52 66 BA FF FF FF FF 33 D0  // ...fX.fRf.....3.
    34E0: E8 F4 02 66 5A C3 50 53 52 E8 E0 FF 75 09 33 C0  // ...fZ.PSR...u.3.
    34F0: E8 C7 01 8B C8 EB 10 83 F9 02 74 0B E8 7B 06 80  // ..........t..{..
    3500: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66  // ..u....Z[X.Vf3.f
    3510: BA 00 F0 FF FF E8 9E 05 66 C1 E6 10 E8 A8 01 0B  // ........f.......
    3520: C0 74 03 E8 05 00 E8 7E 05 5E C3 50 51 E8 6C 01  // .t.....~.^.PQ.l.
    3530: 50 32 C0 E8 90 02 E8 CC 00 E8 7F 00 8D 9C 08 03  // P2..............
    3540: E8 1C 13 38 E8 74 0A 8A C5 E8 73 12 B0 02 E8 75  // ...8.t....s....u
    3550: 02 58 E8 79 00 66 51 8D 9C A4 01 E8 01 13 66 8B  // .X.y.fQ.......f.
    3560: C8 8B D3 8D 9C D0 02 E8 F5 12 66 3B C1 75 16 53  // ..........f;.u.S
    3570: 8D 9C AA 01 E8 E8 12 8B C8 8D 9C D6 02 E8 DF 12  // ................
    3580: 3B C1 5B 74 05 B0 02 E8 3C 02 66 59 E8 71 FE E8  // ;.[t....<.fY.q..
    3590: FF 01 66 25 FF 0F 00 00 59 58 66 BA FF FF FF FF  // ..f%....YXf.....
    35A0: 33 D0 E8 11 05 33 D2 C3 53 66 50 8D 9C C8 02 E8  // 3....3..SfP.....
    35B0: AD 12 8A C4 E8 08 12 66 58 5B C3 53 66 50 8D 9C  // .......fX[.SfP..
    35C0: C8 02 E8 9A 12 8A E0 E8 F5 11 66 58 5B C3 8D 9C  // ..........fX[...
    35D0: C8 02 E8 8A 12 32 C0 E8 E5 11 C3 66 52 52 32 ED  // .....2.....fRR2.
    35E0: 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66  // ........f3...ZQf
    35F0: 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66  // ....f..f...Yf..f
    3600: 8B C8 66 5A C3 53 E8 48 01 66 C1 E2 10 E8 36 01  // ..fZ.S.H.f....6.
    3610: 8D 9C 98 01 E8 48 12 8A E8 8D 9C AC 02 E8 3F 12  // .....H........?.
    3620: 8A C8 E8 8E 0B 8A EB 5B C3 57 53 53 E8 D6 FF E8  // .......[.WSS....
    3630: 14 01 5B E8 A0 0B 74 61 80 FD 00 75 29 53 E8 19  // ..[...ta...u)S..
    3640: FE 66 8B D0 E8 54 FA 8A CD 51 E8 25 FE 8A FD 59  // .f...T...Q.%...Y
    3650: E8 88 FF 5B E8 08 12 66 25 FF FF 00 00 66 3B C8  // ...[...f%....f;.
    3660: 73 34 32 DB EB 33 80 FD 02 75 11 E8 2C 01 8D 1F  // s42..3...u..,...
    3670: E8 EC 11 3D 74 40 76 1E 32 DB EB 1D 80 FD 03 75  // ...=t@v.2......u
    3680: 15 53 E8 C1 00 B3 03 E8 08 0B 5B E8 D1 11 3B C2  // .S........[...;.
    3690: 76 04 32 DB EB 03 80 CB 01 5B 5F C3 53 8B F0 E8  // v.2......[_.S...
    36A0: F0 0C 23 F0 74 09 8B C6 E8 74 0B 8B F3 0B DB 5B  // ..#.t....t.....[
    36B0: C3 51 E8 31 FE E8 0F 00 59 C3 51 50 E8 D3 0C 8B  // .Q.1....Y.QP....
    36C0: C8 58 E8 02 00 59 C3 57 53 E8 04 0D 0B C0 74 09  // .X...Y.WS.....t.
    36D0: 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B  // .....;.u......t.
    36E0: 83 C7 02 85 D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B  // .....t.....3...[
    36F0: 5F C3 33 C0 E8 C3 FF 74 13 E8 A0 FF 8B DE B9 00  // _.3....t........
    3700: 01 E8 CE 0D 83 C6 08 E8 38 0C EB E8 BB F0 46 B8  // ........8.....F.
    3710: 5A A5 E8 C2 10 C3 53 66 50 8D 9C 08 03 E8 3F 11  // Z.....SfP.....?.
    3720: 8A E8 66 58 5B C3 53 66 50 8D 9C C8 02 E8 2F 11  // ..fX[.SfP...../.
    3730: 8A C8 66 58 5B C3 53 66 50 8D 9C C9 02 E8 1F 11  // ..fX[.SfP.......
    3740: 8A C8 66 58 5B C3 53 8D 5C 14 E8 12 11 8B D0 5B  // ..fX[.S.\......[
    3750: C3 53 66 50 8D 5C 16 E8 05 11 8B D0 66 58 5B C3  // .SfP.\......fX[.
    3760: 53 66 50 8D 9C 18 03 E8 F5 10 66 8B D0 66 58 5B  // SfP.......f..fX[
    3770: C3 53 66 50 8D 9C 1C 03 E8 E4 10 66 8B D0 66 58  // .SfP.......f..fX
    3780: 5B C3 53 66 50 8D 5C 10 E8 D4 10 8B C8 66 58 5B  // [.SfP.\......fX[
    3790: C3 53 8D 5C 08 E8 C7 10 5B C3 53 66 50 8D 5C 0C  // .S.\....[.SfP.\.
    37A0: E8 BC 10 8B D0 66 58 5B C3 8D 5C 04 E8 B0 10 C3  // .....fX[..\.....
    37B0: 51 8D 5C 04 32 C9 E8 4A 10 59 C3 8D 9C 18 03 66  // Q.\.2..J.Y.....f
    37C0: 8B C2 E8 FA 0F C3 53 51 8A E8 E8 DC FF 24 FD 0A  // ......SQ.....$..
    37D0: E8 E8 DC FF 59 5B C3 53 66 50 51 66 8B C8 BB 00  // ....Y[.SfPQf....
    37E0: 00 E8 1C 0A 23 C2 0B C1 E8 1E 0A 59 66 58 5B C3  // ....#......YfX[.
    37F0: BB 00 00 E8 0A 0A 66 25 DF 0F 00 00 C3 80 FA 14  // ......f%........
    3800: C3 E8 AC 0C E8 3A 0C E8 18 0C 75 06 E8 95 0B E8  // .....:....u.....
    3810: 1C 0C C3 B0 01 C3 55 B3 01 E8 02 0E 5D C3 66 53  // ......U.....].fS
    3820: 66 BB 04 00 00 00 E8 05 00 33 C0 66 5B C3 55 66  // f........3.f[.Uf
    3830: C1 E3 10 BB 00 00 E8 E5 0D 5D C3 E8 3A 0D BB 0A  // .........]..:...
    3840: 00 E8 C5 09 C3 BB 0A 00 E8 B5 09 66 8B C8 E8 27  // ...........f...'
    3850: 0D BB 0A 00 66 2B C1 E8 AF 09 C3 E8 29 00 0B C9  // ....f+......)...
    3860: 74 22 E8 A6 FC E8 1D 07 66 51 66 8B C8 BB 07 00  // t"......fQf.....
    3870: E8 8D 09 66 25 00 FE 00 00 66 0B C1 E8 8A 09 66  // ...f%....f.....f
    3880: 59 0C 01 C3 32 C0 C3 E8 49 02 0B C9 75 06 E8 55  // Y...2...I...u..U
    3890: FC E8 4F 02 51 E8 4E FC 66 C1 E6 10 33 C0 E8 10  // ..O.Q.N.f...3...
    38A0: FE 74 09 E8 E7 02 75 F6 33 C8 EB F2 58 23 C8 66  // .t....u.3...X#.f
    38B0: C1 EE 10 C3 A8 10 75 63 E8 DC 06 66 C1 E6 10 33  // ......uc...f...3
    38C0: C0 E8 F6 FD 74 35 E8 D3 FD 50 51 8B C8 E8 D7 01  // ....t5...PQ.....
    38D0: 85 C1 59 58 74 0D 50 E8 CF FE 24 03 3C 03 58 75  // ..YXt.P...$.<.Xu
    38E0: E0 EB 0C 50 E8 C2 FE A8 01 58 74 D5 E8 CC FC 50  // ...P.....Xt....P
    38F0: E8 83 07 58 B5 00 E8 B7 FE EB C6 E8 A9 01 E8 9B  // ...X............
    3900: FD E8 13 01 B1 00 E8 3D 07 66 C1 EE 10 E8 80 06  // .......=.f......
    3910: A8 20 75 3B A8 40 75 03 E8 0F 08 E8 67 06 0A C0  // . u;.@u.....g...
    3920: 75 00 E8 82 01 E8 74 FD E8 6F FE E8 CF FE 75 14  // u.....t..o....u.
    3930: E8 47 02 0A DB 74 0D E8 81 FC E8 39 07 B5 00 E8  // .G...t.....9....
    3940: 6E FE EB 08 E8 20 07 B5 01 E8 64 FE E8 CE 00 C3  // n.... ....d.....
    3950: E8 3F 0A C3 E8 9B FD E8 9F 06 33 C9 E8 84 01 66  // .?........3....f
    3960: 33 D2 66 33 C0 E8 6F FE E8 73 07 E8 52 00 B1 FF  // 3.f3..o..s..R...
    3970: E8 77 00 33 C0 E8 42 FD 74 0A E8 1F FD 50 E8 13  // .w.3..B.t....P..
    3980: 07 58 EB F1 32 C9 E8 A6 01 E8 06 0A 0B C0 C3 E8  // .X..2...........
    3990: 60 FD E8 64 06 66 33 C0 66 BA 00 F0 FF FF E8 15  // `..d.f3.f.......
    39A0: 01 51 B1 01 E8 6E 01 59 E8 46 07 33 C0 E8 0A FD  // .Q...n.Y.F.3....
    39B0: 74 0A E8 E7 FC 50 E8 CC 06 58 EB F1 E8 F2 06 C3  // t....P...X......
    39C0: B8 02 00 E8 D6 FC 74 21 B8 02 00 E8 F7 F4 F6 C3  // ......t!........
    39D0: 04 75 0A E8 BC 09 83 E0 FD E8 BF 09 C3 66 B8 02  // .u...........f..
    39E0: 00 00 00 E8 F1 FD E8 3D F6 C3 E8 25 08 74 13 BB  // .......=...%.t..
    39F0: 02 00 E8 0B 08 8A E1 E8 0F 08 E8 CC 06 0C 01 C3  // ................
    3A00: 0C 01 C3 51 E8 0B 08 74 0C 8A CC BB 02 00 E8 EF  // ...Q...t........
    3A10: 07 8A C4 8A E1 59 C3 B0 01 E8 08 06 C3 B0 00 E8  // .....Y..........
    3A20: 02 06 C3 E8 74 0B 75 18 E8 7C 00 E8 6E FC 80 F9  // ....t.u..|..n...
    3A30: 01 75 0E 51 E8 30 06 B5 01 E8 74 FD 59 E8 DD FF  // .u.Q.0....t.Y...
    3A40: C3 E8 D3 FF 51 E8 3D 06 B5 00 E8 63 FD 59 C3 B8  // ....Q.=....c.Y..
    3A50: 02 00 E8 47 FC 74 03 E8 61 06 C3 E8 C6 04 3B C1  // ...G.t..a.....;.
    3A60: 7C 35 8B C1 E8 06 05 E8 19 07 8B C8 51 E8 36 05  // |5..........Q.6.
    3A70: E8 FA 04 59 E8 0C 07 3B C8 72 02 8B C1 8D 5C 04  // ...Y...;.r....\.
    3A80: E8 54 0D 32 C9 E8 41 0A FE C1 38 C1 72 F7 8D 5C  // .T.2..A...8.r..\
    3A90: 04 E8 CB 0D 0B C0 C3 33 C0 C3 BB 00 48 33 C0 8A  // .......3....H3..
    3AA0: C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8 52 07 66 25  // .......S....R.f%
    3AB0: FF 0F 00 00 5B C3 53 66 50 66 51 66 8B C8 BB 03  // ....[.SfPfQf....
    3AC0: 00 E8 3C 07 66 23 C2 66 0B C1 E8 3C 07 66 59 66  // ..<.f#.f...<.fYf
    3AD0: 58 5B C3 66 50 BB 05 00 E8 25 07 25 FF 0F 8B C8  // X[.fP....%.%....
    3AE0: 66 58 C3 E8 AC 08 23 C8 66 50 BB 05 00 E8 10 07  // fX....#.fP......
    3AF0: 25 00 F0 0B C1 E8 11 07 66 58 C3 66 50 53 BB 06  // %.......fX.fPS..
    3B00: 00 E8 FC 06 A8 10 75 09 BB F0 46 E8 51 0D 3D 5A  // ......u...F.Q.=Z
    3B10: A5 5B 66 58 C3 66 50 53 BB 06 00 E8 E2 06 80 F1  // .[fX.fPS........
    3B20: 01 C0 E1 04 24 EF 0A C1 E8 DE 06 5B 66 58 C3 53  // ....$......[fX.S
    3B30: 66 50 BB F8 46 E8 27 0D 8A C1 E8 82 0C 66 58 5B  // fP..F.'......fX[
    3B40: C3 53 BB F8 46 E8 17 0D 83 E0 01 5B C3 53 66 50  // .S..F......[.SfP
    3B50: BB 07 00 E8 AA 06 F6 C4 01 66 58 B0 06 74 02 B0  // .........fX..t..
    3B60: 08 5B C3 53 BB 07 00 E8 96 06 80 E4 FE 80 FD 06  // .[.S............
    3B70: 74 03 80 CC 01 E8 91 06 5B C3 66 50 BB 06 00 E8  // t.......[.fP....
    3B80: 7E 06 24 40 C0 E8 06 8A D8 66 58 C3 C3 50 66 51  // ~.$@.....fX..PfQ
    3B90: E8 09 FB 83 EC 04 8B EC 66 33 C0 66 89 46 00 33  // ........f3.f.F.3
    3BA0: D2 8D BC C0 01 8D 1D E8 B5 0C 0B C0 74 3D 8B DF  // ............t=..
    3BB0: B0 00 E8 2D 01 74 2F 8B DF E8 6E F8 66 8B 46 00  // ...-.t/...n.f.F.
    3BC0: 3B C8 7F 10 72 20 66 C1 C8 10 66 C1 C9 10 3B C8  // ;...r f...f...;.
    3BD0: 7F 0E EB 12 66 C1 C8 10 66 C1 C9 10 3B C8 72 06  // ....f...f...;.r.
    3BE0: 8B D7 66 89 4E 00 83 C7 1C EB BA 0B D2 74 0A 8D  // ..f.N........t..
    3BF0: 9C A4 01 E8 0A F8 E9 88 00 66 33 C0 66 89 46 00  // .........f3.f.F.
    3C00: 8D BC 4C 02 33 D2 8D 1D E8 54 0C 0B C0 74 58 66  // ..L.3....T...tXf
    3C10: 50 E8 75 F4 3C 01 66 58 74 05 3D 40 06 73 43 66  // P.u.<.fXt.=@.sCf
    3C20: 52 66 8B D0 8D 5D 04 E8 35 0C E8 5D 00 8B CA 66  // Rf...]..5..]...f
    3C30: 5A 74 2F 56 8D 9C A4 01 8B F1 E8 E2 F7 5E B0 00  // Zt/V.........^..
    3C40: E8 9F 00 74 1D 8D 1D E8 15 0C 8B D9 8B 47 06 66  // ...t.........G.f
    3C50: C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B D1 66 89  // ....G.f;F.r...f.
    3C60: 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D 9C A4 01  // F........t.V....
    3C70: 8B F2 E8 AA F7 5E 53 8D 9C BA 01 33 C0 E8 57 0B  // .....^S....3..W.
    3C80: 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51 E8 5E 07  // [.....fYX.WSQ.^.
    3C90: 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1 CA 10 3B  // ;U.u.f.....f...;
    3CA0: 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C  // ].u...t.:E.t....
    3CB0: E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F C3 51 66  // ..3.......Y[_.Qf
    3CC0: 52 E8 2A 07 3A 65 1A 75 09 0A C0 74 0E 3A 45 1B  // R.*.:e.u...t.:E.
    3CD0: 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF 66 5A 59  // t......3.....fZY
    3CE0: C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B DE 66 C1  // ..fQfRSSf.....f.
    3CF0: CE 10 E8 6A 0B 5B 66 8B D0 E8 2E F7 3B CA 72 0A  // ...j.[f.....;.r.
    3D00: 66 3B CA 72 05 E8 21 F9 75 02 32 C0 5B 66 5A 66  // f;.r..!.u.2.[fZf
    3D10: 59 C3 56 57 E8 A7 FF 8B F7 E8 03 F7 5F 5E C3 66  // Y.VW........_^.f
    3D20: 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8 A2 07  // PSfQRWVQ........
    3D30: 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 80 0A F6  // Y.\...f.........
    3D40: C2 03 75 24 8B C1 24 7F BF 02 3E 80 3D FF 0F 84  // ..u$..$...>.=...
    3D50: 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05 02 00  // ..:.u.f.E.f.....
    3D60: E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B C1 E8  // ...........t%...
    3D70: 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0 75 12  // p.....3.......u.
    3D80: 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8 2F 0A  // .\.f%....f..../.
    3D90: EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0  // ................
    3DA0: EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25 80 EC  // ......pr*..us%..
    3DB0: 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38 D8 72 05  // p..2.P.0...X8.r.
    3DC0: 33 C0 E9 9C 00 E8 28 02 E8 94 0A 0B C0 0F 84 90  // 3.....(.........
    3DD0: 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D 5C 16 8B  // ...2.........\..
    3DE0: 05 E8 F3 09 8B 45 06 66 C1 E0 10 8B 45 02 50 E8  // .....E.f....E.P.
    3DF0: 91 03 66 C1 E1 10 8B C8 58 8D 1C E8 C1 09 66 50  // ..f.....X.....fP
    3E00: 8D 5C 04 66 8B C1 E8 B6 09 66 58 66 C1 E8 10 66  // .\.f.....fXf...f
    3E10: 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06 E8 3E  // ......f..fP.\..>
    3E20: 0A 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14  // ...fXf..f...@.\.
    3E30: E8 A4 09 BF 62 3E 83 F9 01 74 11 BF 6A 3E 81 F9  // ....b>...t..j>..
    3E40: 01 01 74 08 BF 72 3E 83 F9 02 75 15 8D 5C 0C 66  // ..t..r>...u..\.f
    3E50: 8B 05 E8 6A 09 8D 5C 10 66 8B 45 04 E8 60 09 0B  // ...j..\.f.E..`..
    3E60: DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90 01 01  // .^_ZfY[fX..@....
    3E70: 40 01 90 01 02 80 02 90 01 03 80 02 90 01 04 40  // @..............@
    3E80: 01 90 01 05 40 01 90 01 06 80 02 90 01 07 D0 02  // ....@...........
    3E90: 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80 02 5E  // ^..@...........^
    3EA0: 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02 E0 01  // ....^...........
    3EB0: 13 80 02 90 01 23 20 04 90 01 32 20 04 B0 02 33  // .....# ...2 ...3
    3EC0: 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05 05 05 00  //  ...b...........
    3ED0: 00 00 05 0B 06 05 05 00 00 00 08 10 08 08 08 00  // ................
    3EE0: 00 00 56 E8 07 07 80 E4 01 3B 04 74 09 83 C6 04  // ..V......;.t....
    3EF0: E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53 50  // ..3....D...^.WSP
    3F00: E8 EA 06 83 E9 0A E8 E0 00 83 F8 05 76 03 B8 05  // ............v...
    3F10: 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF AB  // ................
    3F20: 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77 00 66  // X[_.fSQfR.A..w.f
    3F30: C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3 E8  // ...f...f.....f..
    3F40: 66 33 D2 66 F7 F3 E8 3A 02 66 5A 59 66 5B C3 53  // f3.f...:.fZYf[.S
    3F50: 66 50 BB 07 00 E8 A8 02 0A C0 66 58 5B C3 53 66  // fP........fX[.Sf
    3F60: 50 BB 07 00 E8 99 02 A8 01 66 58 5B C3 53 66 50  // P........fX[.SfP
    3F70: 8D 5C 06 E8 E9 08 8A C8 66 58 5B C3 51 B9 08 00  // .\......fX[.Q...
    3F80: E8 64 05 59 C3 53 8D 5C 08 E8 D3 08 24 03 5B C3  // .d.Y.S.\....$.[.
    3F90: 8D 5C 09 E8 C9 08 C3 51 53 B1 01 8A E8 8D 5C 08  // .\.....QS.....\.
    3FA0: E8 60 08 5B 59 C3 53 8D 1C E8 B3 08 5B C3 53 8D  // .`.[Y.S.....[.S.
    3FB0: 5C 04 E8 AA 08 5B C3 53 8D 5C 16 E8 A1 08 5B C3  // \....[.S.\....[.
    3FC0: 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8 34 00 74  // SfR3....fZu..4.t
    3FD0: 16 E8 15 00 40 83 F8 05 73 0D E8 E2 07 48 E8 0F  // ....@...s....H..
    3FE0: 00 66 8B C2 E8 D8 07 5B C3 BB 00 4E E8 70 08 C3  // .f.....[...N.p..
    3FF0: BB 08 4E C1 E0 03 03 D8 C3 BB 00 4E B9 32 00 E8  // ..N........N.2..
    4000: D0 04 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08 4E  // ...Q.....t.....N
    4010: E8 4C 08 66 3B C2 74 07 83 C3 08 E2 F3 0B DB 59  // .L.f;.t........Y
    4020: C3 C3 C3 00 8A E8 BB 20 DF 3C 01 74 02 32 DB E8  // ....... .<.t.2..
    4030: 19 28 E8 F1 F6 66 B8 80 06 00 08 66 33 DB 8A D9  // .(...f.....f3...
    4040: 8A CD E8 B6 00 C3 66 51 66 52 66 57 66 B8 80 05  // ......fQfRfWf...
    4050: 00 08 66 BB 00 4C 00 00 66 33 C9 8B CE E8 9B 00  // ..f..L..f3......
    4060: 66 5F 66 5A 66 59 C3 66 B8 80 07 00 04 66 33 DB  // f_fZfY.f.....f3.
    4070: 8B DE E8 86 00 C3 66 B8 80 08 00 04 66 33 DB 8B  // ......f.....f3..
    4080: DE E8 77 00 C3 66 B8 80 09 00 04 66 33 DB 8B DE  // ..w..f.....f3...
    4090: E8 68 00 C3 C3 66 B8 80 0A 00 04 66 33 DB 8B DE  // .h...f.....f3...
    40A0: E8 58 00 E8 FF EF F6 C3 02 74 03 B0 00 C3 B0 01  // .X.......t......
    40B0: C3 66 B8 80 0D 00 00 E8 41 00 C3 66 B8 80 0F 00  // .f......A..f....
    40C0: 04 66 33 DB 8A D9 E8 32 00 66 B8 80 0F 00 04 66  // .f3....2.f.....f
    40D0: 33 DB 56 E8 F1 02 8B 5C 20 5E E8 1E 00 C3 66 B8  // 3.V....\ ^....f.
    40E0: 00 00 00 00 E8 14 00 66 B8 80 0C 00 04 E8 0B 00  // .......f........
    40F0: C3 66 B8 00 01 00 00 E8 01 00 C3 83 EC 1C 8B EC  // .f..............
    4100: 66 89 46 00 66 89 5E 04 66 89 4E 08 66 89 56 0C  // f.F.f.^.f.N.f.V.
    4110: 66 89 7E 10 66 89 76 14 8C D0 66 C1 E0 10 8B C4  // f.~.f.v...f.....
    4120: BB 42 00 E8 DB 02 83 C4 1C C3 51 8D 5C 14 E8 2E  // .B........Q.\...
    4130: 07 66 C1 E0 10 E8 02 00 59 C3 83 EC 10 8B EC 66  // .f......Y......f
    4140: 3D F0 FF FF 03 76 06 66 B8 F0 FF FF 03 66 8B C8  // =....v.f.....f..
    4150: 66 33 C0 66 89 46 04 66 89 46 00 66 89 46 08 B0  // f3.f.F.f.F.f.F..
    4160: 01 88 46 09 66 B8 00 00 00 D0 66 0B C1 66 89 46  // ..F.f.....f..f.F
    4170: 0C 8C D0 66 C1 E0 10 8B C4 BB 35 00 E8 82 02 83  // ...f......5.....
    4180: C4 10 C3 3D C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24  // ...=..v.......?$
    4190: C0 C3 53 51 66 50 B9 68 74 80 FB 03 74 0B B9 A0  // ..SQfP.ht...t...
    41A0: 8C 80 FB 00 75 03 B9 78 69 66 33 D2 8B D1 66 58  // ....u..xif3...fX
    41B0: 59 5B C3 66 52 B3 00 66 F7 C2 00 00 FF FF 75 13  // Y[.fR..f......u.
    41C0: 80 FD 13 74 0E 80 FD 14 74 09 B3 03 80 F9 03 74  // ...t....t......t
    41D0: 02 B3 02 66 5A C3 E8 86 06 66 C1 E8 10 0B C0 74  // ...fZ....f.....t
    41E0: 1C 53 83 C3 06 E8 77 06 5B 3D E0 01 72 0F 53 83  // .S....w.[=..r.S.
    41F0: C3 18 E8 6A 06 5B A8 80 75 03 0C 01 C3 32 C0 C3  // ...j.[..u....2..
    4200: 53 83 C3 4C E8 26 06 5B C3 53 83 C3 4C E8 78 05  // S..L.&.[.S..L.x.
    4210: 5B C3 56 E8 B1 01 8B 44 38 83 7C 20 00 5E C3 BB  // [.V....D8.| .^..
    4220: 00 50 83 F8 02 74 32 BB 00 54 83 F8 08 74 2A BB  // .P...t2..T...t*.
    4230: 00 58 3D 80 00 74 22 BB 00 5C 3D 00 02 74 1A BB  // .X=..t"..\=..t..
    4240: 00 60 3D 00 04 74 12 BB 00 64 3D 00 08 74 0A BB  // .`=..t...d=..t..
    4250: 00 68 83 F8 40 74 02 33 DB C3 57 E8 56 00 74 0A  // .h..@t.3..W.V.t.
    4260: 8B 5D 02 E8 08 00 0B DB 5F C3 33 DB 5F C3 52 51  // .]......_.3._.RQ
    4270: 0B DB 74 1B 56 E8 36 01 03 DE 5E 33 C9 8A 4F 01  // ..t.V.6...^3..O.
    4280: 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB 0B  // .?.t.:.t.....3..
    4290: DB 59 5A C3 56 51 E8 15 01 32 C9 8D 7C 08 3B 5D  // .YZ.VQ...2..|.;]
    42A0: 04 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B  // .t......:L.r.3..
    42B0: FF 59 5E C3 56 51 E8 F5 00 32 C9 8D 7C 08 3B 1D  // .Y^.VQ...2..|.;.
    42C0: 74 0C 83 C7 10 FE C1 3A 4C 06 72 F2 33 FF 0B FF  // t......:L.r.3...
    42D0: 59 5E C3 56 51 E8 D6 00 32 C9 8D 7C 08 3B 45 0C  // Y^.VQ...2..|.;E.
    42E0: 74 0C 83 C7 10 FE C1 3A 4C 06 72 F1 33 FF 0B FF  // t......:L.r.3...
    42F0: 59 5E C3 57 50 E8 DB FF 8A C3 8B 5D 02 E8 6E FF  // Y^.WP......]..n.
    4300: 58 5F C3 53 32 C9 B3 01 E8 E8 FF 74 03 8A 4F 02  // X_.S2......t..O.
    4310: 0A C9 5B C3 53 32 ED B3 02 E8 D7 FF 74 03 8A 6F  // ..[.S2......t..o
    4320: 02 0A ED 5B C3 50 57 8B DA E8 68 FF 75 04 33 DB  // ...[.PW...h.u.3.
    4330: EB 0D B0 14 8B 5D 08 E8 34 FF 74 F2 8B 5F 02 5F  // .....]..4.t.._._
    4340: 58 C3 66 50 53 51 57 8D 1C 66 25 FF FF 00 00 E8  // X.fPSQW..f%.....
    4350: 6D 04 8B D8 E8 3B 00 23 C3 74 31 E8 75 FF 0B FF  // m....;.#.t1.u...
    4360: 74 2A 66 50 66 8B 45 04 8D 5C 0C E8 51 04 66 33  // t*fPf.E..\..Q.f3
    4370: C0 8B 05 8D 5C 04 E8 46 04 66 58 E8 85 FF E8 93  // ....\..F.fX.....
    4380: FF 8D 5C 08 66 33 C0 8B C1 E8 33 04 5F 59 5B 66  // ..\.f3....3._Y[f
    4390: 58 C3 56 E8 18 00 8B 44 04 5E C3 56 E8 0F 00 89  // X.V....D.^.V....
    43A0: 44 04 5E C3 C3 BF 5E 03 8B 3D 8B 7D 0C C3 BE 5E  // D.^...^..=.}...^
    43B0: 03 8B 34 8B 74 30 C3 1E 0E 1F BF 5E 03 8B 3D 8B  // ..4.t0.....^..=.
    43C0: 7D 0E 83 C7 04 1F C3 BE 5E 03 8B 34 8B 74 10 C3  // }.......^..4.t..
    43D0: BF 5E 03 8B 3D 8B 7D 26 83 C7 04 C3 BE 5E 03 8B  // .^..=.}&.....^..
    43E0: 34 8B 74 1A C3 BE 5E 03 8B 34 8B 74 3A C3 BF 5E  // 4.t...^..4.t:..^
    43F0: 03 8B 3D 8B 7D 0A 83 C7 04 B9 07 00 C3 E8 01 00  // ..=.}...........
    4400: CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6 46 04 00  // .......F.f3..F..
    4410: 89 46 02 06 52 8A D3 8B C5 E8 B1 16 5A 07 83 C4  // .F..R.......Z...
    4420: 06 C3 E8 80 FF 66 F7 45 10 01 00 00 00 C3 50 E8  // .....f.E......P.
    4430: 73 FF B8 01 00 09 45 10 58 C3 E8 68 FF 88 45 10  // s.....E.X..h..E.
    4440: C3 66 53 83 EC 48 8B EC 66 89 5E 00 66 89 4E 04  // .fS..H..f.^.f.N.
    4450: 8C D0 66 C1 E0 10 8B C4 BB 00 00 E8 A3 FF 83 C4  // ..f.............
    4460: 48 66 5B E8 49 01 E8 83 01 E8 0E 00 BB 04 00 E8  // Hf[.I...........
    4470: 8E FD 66 C1 E8 10 E8 C1 FF C3 83 EC 0C 8B EC 8C  // ..f.............
    4480: D0 66 C1 E0 10 8B C4 BB 16 00 E8 74 FF 66 BB 00  // .f.........t.f..
    4490: 00 00 00 83 C4 0C E8 0C FF 66 8B C3 66 C1 E8 08  // .........f..f...
    44A0: 66 89 45 28 66 8B C3 66 C1 E0 18 66 89 45 2C C3  // f.E(f..f...f.E,.
    44B0: E8 F2 FE 66 8B 5D 08 66 8B 4D 0C C3 56 E8 25 FF  // ...f.].f.M..V.%.
    44C0: 66 8B 44 08 5E C3 B0 05 C3 B0 01 C3 B0 05 C3 B0  // f.D.^...........
    44D0: 08 C3 53 66 50 66 33 C0 E8 E4 02 83 C3 04 E2 F8  // ..SfPf3.........
    44E0: 66 58 5B C3 32 C0 C3 FC E8 74 03 66 C1 CB 10 E8  // fX[.2....t.f....
    44F0: CD 02 66 C1 CB 10 66 81 C3 04 00 04 00 E2 E9 C3  // ..f...f.........
    4500: FC 66 AD E8 B9 02 83 C3 04 E2 F6 C3 FC E8 4F 03  // .f............O.
    4510: 66 AB 83 C3 04 E2 F6 C3 66 50 B8 64 00 E8 10 00  // f.......fP.d....
    4520: 66 58 C3 66 50 B8 50 C3 D1 E1 E8 03 00 66 58 C3  // fX.fP.P......fX.
    4530: 52 F7 E1 8B CA E8 40 01 66 53 8B D9 66 C1 E3 10  // R.....@.fS..f...
    4540: 8B D8 66 B8 0C AC 05 00 B2 00 66 EF B2 04 66 ED  // ..f.......f...f.
    4550: 33 C9 66 03 D8 73 0A 66 ED 66 A9 00 00 00 80 75  // 3.f..s.f.f.....u
    4560: F6 66 ED 66 3B C3 73 0C 66 C1 E8 10 3B C1 72 04  // .f.f;.s.f...;.r.
    4570: 8B C8 EB ED 66 5B 5A C3 66 52 E8 FB 00 66 B8 0C  // ....f[Z.fR...f..
    4580: AC 05 00 B2 00 66 EF B2 04 66 ED 66 33 D2 66 BB  // .....f...f.f3.f.
    4590: 64 00 00 00 66 F7 F3 66 5A C3 66 50 53 BB 07 00  // d...f..fZ.fPS...
    45A0: E8 5D FC 25 00 02 35 00 02 0B C0 5B 66 58 C3 66  // .].%..5....[fX.f
    45B0: 51 B3 01 E8 68 00 E8 23 FE 66 33 C9 8B 4C 08 66  // Q...h..#.f3..L.f
    45C0: C1 E0 0A 0B C9 75 03 B9 00 0C 66 2B C1 E8 0C FE  // .....u....f+....
    45D0: 66 89 44 04 89 4C 08 66 59 C3 56 1E 0E 1F E8 FB  // f.D..L.fY.V.....
    45E0: FD 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 BE 5E 03  // .f.D.f....^...^.
    45F0: 8B 34 8B 74 1E 83 C6 04 B9 1C 00 C3 56 E8 C7 FD  // .4.t........V...
    4600: 8A 6C 33 5E C3 56 E8 BE FD 8A 44 24 80 FD 00 74  // .l3^.V....D$...t
    4610: 05 88 6C 33 0C 02 88 44 24 5E C3 32 C0 C3 66 53  // ..l3...D$^.2..fS
    4620: 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B C4 66 89 5E  // .......f.....f.^
    4630: 00 BB 06 00 E8 CA FD 8B EC 66 8B 46 00 83 C4 04  // .........f.F....
    4640: 66 5B C3 83 EC 0C 8B EC 8C D0 66 C1 E0 10 8B C4  // f[........f.....
    4650: BB 16 00 E8 AB FD 8B EC 66 8B 5E 00 66 8B 4E 00  // ........f.^.f.N.
    4660: 66 8B 56 08 83 C4 0C C3 66 B8 C8 91 05 00 C3 BF  // f.V.....f.......
    4670: 5E 03 8B 3D 8B 7D 12 C3 66 50 8C C8 3D 00 C0 75  // ^..=.}..fP..=..u
    4680: 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B  // .........t...S..
    4690: 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66  // .... .....[2.f.f
    46A0: 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74 16 43  // X.........u.Kt.C
    46B0: 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B  // ;.w.....+.......
    46C0: DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77 0C  // ...+..;.r.u.;.w.
    46D0: 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB  // +...+.+.....+.+.
    46E0: 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72 11  // ....UV+.......r.
    46F0: 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D 78  // E;.r.w.;.v....Mx
    4700: 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78  //  ....+....r...Mx
    4710: 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3 13  // .........s......
    4720: D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92 0B  // .......3.^]..P..
    4730: C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58 F7  // .t......t.....X.
    4740: E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10 8A  // ....RfP....f....
    4750: E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52 BA  // ...$....f.fXZ.R.
    4760: FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31  // ..f.Z.R...f.Z..1
    4770: FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA  // ............$...
    4780: E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06 00  // ........RfSfP...
    4790: 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7  // fXf[Z.f...f.....
    47A0: FE E8 BF 01 C3 66 50 66 C1 E3 10 66 C1 EB 10 E8  // .....fPf...f....
    47B0: 28 FE 66 03 D8 66 81 CB 00 00 00 80 66 58 C3 52  // (.f..f......fX.R
    47C0: 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE E8 D4  // fS...f[Z.fP.....
    47D0: FF E8 8F 01 66 58 C3 52 51 66 53 66 50 8A CB 80  // ....fX.RQfSfP...
    47E0: E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF E8 59  // ...............Y
    47F0: 01 66 D3 C8 58 50 66 D3 C0 E8 67 01 66 58 66 5B  // .f..XPf...g.fXf[
    4800: 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A  // YZ.fPQ....S.f...
    4810: C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0 E1  // .f.....YfX.fPQ..
    4820: 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00  // ..;.f..Y..fX.._.
    4830: C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 0B 01 C3  // ..D.f...f.......
    4840: E8 35 FE 66 C1 E3 02 E8 00 01 C3 52 66 53 E8 04  // .5.f.......RfS..
    4850: 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 EC 00 C3 51  // .f[Z.. ..J.....Q
    4860: 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8  // fR..............
    4870: D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB FF  // .....t.f........
    4880: 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3 52  // ...f.f.....fZY.R
    4890: 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1 FF 66  // fS...f[Z.RfS...f
    48A0: 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // [Z.fPURfP...V..V
    48B0: 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58 5A 5D  // ......f.f.F.fXZ]
    48C0: C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8  // .fPURfP...V..V..
    48D0: A6 FD 2E A1 B1 03 B2 18 EF B2 00 66 ED 66 89 46  // ...........f.f.F
    48E0: 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89 FD B2  // .fXZ].fPUR......
    48F0: 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46  // .f.F.f..V..V.f.F
    4900: 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8  // .f.F.Z]fXfX.fPR.
    4910: 66 FD B2 18 66 ED 2E A3 B1 03 5A 66 58 C3 66 52  // f...f.....ZfX.fR
    4920: 66 53 E8 53 FD 66 81 CB 00 00 00 80 E8 1B 00 66  // fS.S.f.........f
    4930: 5B 66 5A C3 66 52 66 53 E8 3D FD 66 81 CB 00 00  // [fZ.fRfS.=.f....
    4940: 00 80 E8 1E 00 66 5B 66 5A C3 66 81 FB FF 00 00  // .....f[fZ.f.....
    4950: 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66 EF B2 04  // .w.....f....f...
    4960: 66 ED C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 0A  // f..f......w.....
    4970: 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3 C3 C3 55  // f...f.f...f....U
    4980: 8B EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28  // ..SQ..&.\.&.L..(
    4990: 00 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24  // ..f.Y[].SQ..&.\$
    49A0: 33 C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26  // 3....Y[.U..SQ..&
    49B0: 8B 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00  // .\.&.L...RVW....
    49C0: 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01  // ...N.....&.|&.E.
    49D0: 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA  // 2.. .+..........
    49E0: D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1  // .....M.2........
    49F0: D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C  // .......&!D.&!|..
    4A00: D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B  // ...&.|&.M.2.. .+
    4A10: C1 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC  // ...f.F........n.
    4A20: D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3  // .^....M.2....V..
    4A30: 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03  // .......#F.#V..M.
    4A40: 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09  // 2.........&.D.&.
    4A50: 54 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B  // T.._^Z.U..SQRWP.
    4A60: D8 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8  // .&..&.E.2.. .+..
    4A70: FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88  // .............M..
    4A80: 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1  // N..F.....N......
    4A90: D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A  // ...&.G.&....f._Z
    4AA0: E9 F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77  // ...SQRW......&.w
    4AB0: 26 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF  // &.L.2.. .+......
    4AC0: 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D  // ..........&..&.M
    4AD0: 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // .2..............
    4AE0: D2 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B  // .&!G.&!W._...SV.
    4AF0: D8 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C  // .....&.w&.<.ts.<
    4B00: 01 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26  // .uX.D.2.&....uL&
    4B10: 3B 47 1C 75 46 8A 04 6B F0 03 8A 84 4C A7 26 01  // ;G.uF..k....L.&.
    4B20: 47 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A  // G&....&.w&.<.t..
    4B30: 04 32 E4 6B F0 03 8B C3 FF 94 4A A7 26 8B 77 26  // .2.k......J.&.w&
    4B40: 8A 04 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47  // ..2....D.&)G&&.G
    4B50: 26 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A  // &&.G.&.w...&.w&.
    4B60: 04 32 E4 6B F0 03 8A 84 4C A7 26 01 47 26 E9 80  // .2.k....L.&.G&..
    4B70: FF 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8  // .3.3...^[.SQRV..
    4B80: 8D 77 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00  // .w5&.T.&.W.&.G..
    4B90: 00 8B F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54  // ...&.G 3.&.G.&.T
    4BA0: 16 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80  // .....&.G/.....&.
    4BB0: 7F 34 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26  // .4.u"&.w.&.w.u.&
    4BC0: D1 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B  // .g.&.W.&.g.&.W..
    4BD0: C3 E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00  // ..y....&.G42....
    4BE0: 99 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7  // .&.G.&.W........
    4BF0: 04 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0  // .SV...w5&.D.2...
    4C00: 02 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F  // .&.7&.4..&.G.&._
    4C10: 0A 26 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8  // .&..&.\.^[.SRV..
    4C20: 8C D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21  // ...w5..&.T...@s!
    4C30: 26 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26  // &.w.2....&.t...&
    4C40: 8B 57 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F  // .W.&.G.&..&.D...
    4C50: 00 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89  // ...Au.&.G.&.W.&.
    4C60: 47 10 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47  // G.&.W..h..@u.&.G
    4C70: 08 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80  // .&.W.&.G.&.W..Q.
    4C80: FA 42 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA  // .Bu.&.G.&.G".B..
    4C90: 43 75 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46  // Cu.&.G.&.G3.3..F
    4CA0: 75 12 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89  // u.&.W.&.G.&.W.&.
    4CB0: 47 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47  // G.....Gu.&.G.&.G
    4CC0: 24 EB 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20  // $....Hu.&.G.&.G 
    4CD0: 5E 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32  // ^Z[.SV...w5&.D.2
    4CE0: E4 26 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56  // .&.G.&.G...^[.SV
    4CF0: 8B D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89  // ..&.w.&.t...2.&.
    4D00: 47 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02  // G.&.G...&._.&.G.
    4D10: 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B  // ^[.SV..&.w.&.t..
    4D20: 34 26 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26  // 4&.w.&.G...&._.&
    4D30: 83 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // .G..^[.SV..&.w.&
    4D40: 8B 74 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16  // .t....t.&.G.&.w.
    4D50: 26 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B  // &._.&.G..^[.SRV.
    4D60: D8 E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA  // ..p...&.G.&.W...
    4D70: D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3  // ......&.G.&.T...
    4D80: E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47  // .+..J.S..&._.&.G
    4D90: 02 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B  // .[.S..&._.&.G..[
    4DA0: C3 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0  // .SV...k...&.W 3.
    4DB0: 26 01 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E  // &.W.&.D.....&.G.
    4DC0: 32 C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B  // 2....=..u.2.3.^[
    4DD0: C3 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26  // .&.G.2....=..t.&
    4DE0: 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A  // ..4.u..../.^[.&.
    4DF0: 47 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3  // G42.&.G.&.G.....
    4E00: E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14  // ...^[.S.....&.G.
    4E10: C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B  // ...&..&....&..&.
    4E20: 57 02 5B C3 2A 4E 1F 4E 35 4E 84 4E 3B 4E 53 4E  // W.[.*N.N5N.N;NSN
    4E30: 6D 4E 78 4E 7E 4E 53 51 56 8B D8 E8 B0 FE 8C D2  // mNxN~NSQV.......
    4E40: 8E C2 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B  // ..&....u"&...@s.
    4E50: 26 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03  // &.w.&._....&.D..
    4E60: D8 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26  // .&..&.W..{.&.w.&
    4E70: 8B 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C  // .G.......uq...wl
    4E80: 03 F6 2E FF A4 BC 4D 26 8B 47 10 26 8B 57 12 E9  // ......M&.G.&.W..
    4E90: 54 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47  // T.&.G.&.W..I.&.G
    4EA0: 22 EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06  // ".K&.O32....3...
    4EB0: D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32  // .........+.&.O32
    4EC0: ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ....3...........
    4ED0: F7 D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05  // .....&.G.&.W....
    4EE0: 26 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2  // &.G$..&.G ..3.3.
    4EF0: E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18  // ...SV.......&.G.
    4F00: 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14  // &.W.........&.G.
    4F10: 26 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2  // &.T......^[.3.3.
    4F20: C3 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22  // .SV.....&.w.&.w"
    4F30: 8B 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04  // ...T.^[.S..&.G+.
    4F40: E8 AB FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8  // ...&.G.&.W.[.S..
    4F50: 26 C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47  // &.G+......S..&.G
    4F60: 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F  // +......S....5&._
    4F70: 01 C0 EB 03 80 E3 07 32 FF 03 DB FF 97 DA A6 5B  // .......2.......[
    4F80: C3 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .SRV..&.G,2.....
    4F90: 8B C3 FF 94 F6 A6 26 89 47 08 26 89 57 0A 26 8A  // ......&.G.&.W.&.
    4FA0: 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 0E A7 26 89  // G-2...........&.
    4FB0: 47 04 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A  // G.&.W....SQV..&.
    4FC0: 4F 2B 32 ED 8B F1 8A 8C 3E A7 E3 0A 26 D1 6F 06  // O+2.....>...&.o.
    4FD0: 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6  // &._...&.O+2.....
    4FE0: 02 8B 8C 1E A7 8B B4 20 A7 26 21 4F 04 26 21 77  // ....... .&!O.&!w
    4FF0: 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 46 A7 E3 0A 26  // .&.O*2.....F...&
    5000: D1 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77  // .g.&.W...&.O.&.w
    5010: 0A 26 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56  // .&.O.&.w....SQRV
    5020: 57 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // W......&.G+2....
    5030: E6 02 26 8A 47 2A 8B F8 8A 8D 46 A7 32 ED 8B 84  // ..&.G*....F.2...
    5040: 1E A7 8B 94 20 A7 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // .... ...........
    5050: F7 D2 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4  // ..&!G.&!W.&.G*2.
    5060: 8B F0 8A 8C 46 A7 32 ED E3 0A 26 D1 6F 0A 26 D1  // ....F.2...&.o.&.
    5070: 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 1E  // _...&.G+........
    5080: A7 8B 94 20 A7 26 21 47 08 26 21 57 0A 26 8A 47  // ... .&!G.&!W.&.G
    5090: 2A 32 E4 8B F0 8A 8C 46 A7 32 ED E3 0A 26 D1 67  // *2.....F.2...&.g
    50A0: 08 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26  // .&.W...&.G.&.W.&
    50B0: 09 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56  // .G.&.W._^ZY[.SQV
    50C0: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 3E A7 E3 0A  // ..&.O+2.....>...
    50D0: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    50E0: 8B F1 C1 E6 02 8B 8C 1E A7 8B B4 20 A7 26 21 4F  // ........... .&!O
    50F0: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 46  // .&!w.&.O*2.....F
    5100: A7 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F  // ...&.o.&._...&.O
    5110: 2B 32 ED 8B F1 C1 E6 02 8B 8C 1E A7 8B B4 20 A7  // +2............ .
    5120: 26 21 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8  // &!O.&!w....QRW..
    5130: 8C D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32  // ....&..+.t.&.G,2
    5140: E4 8B F0 03 F0 8B C3 FF 94 F6 A6 26 89 47 08 26  // ...........&.G.&
    5150: 89 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .W...&.G,2......
    5160: C3 FF 94 02 A7 26 8A 47 2D 32 E4 8B F0 03 F0 8B  // .....&.G-2......
    5170: C3 FF 94 0E A7 26 89 47 04 26 89 57 06 8C D2 8E  // .....&.G.&.W....
    5180: C2 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0  // .&..+.tJ&.G+2...
    5190: C1 E6 02 26 8A 47 2A 8B F8 8A 8D 46 A7 32 ED 8B  // ...&.G*....F.2..
    51A0: 84 1E A7 8B 94 20 A7 E3 06 D1 E0 D1 D2 E2 FA F7  // ..... ..........
    51B0: D0 F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD  // ...&!G.&!W......
    51C0: 26 8B 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A  // &.G.&.W.&.G.&.W.
    51D0: EB 10 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89  // ..&.W.&.G.&.W.&.
    51E0: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    51F0: EA A6 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47  // .._ZY.SQRVW..&.G
    5200: 2A 32 E4 8B F0 8A 8C 46 A7 32 ED E3 0A 26 D1 67  // *2.....F.2...&.g
    5210: 04 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32  // .&.W.......&.G+2
    5220: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 46 A7  // ......&.G*....F.
    5230: 32 ED 8B 84 1E A7 8B 94 20 A7 E3 06 D1 E0 D1 D2  // 2....... .......
    5240: E2 FA F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B  // ......&.G.&.W.&.
    5250: 47 04 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56  // G.&.W.&!G.&!W..V
    5260: FE 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B  // .U..QRP..&.G,2..
    5270: F0 03 F0 8B C3 FF 94 F6 A6 26 89 47 08 26 89 57  // .........&.G.&.W
    5280: 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47  // .&.G+.F......&.G
    5290: 04 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B  // .&.W.&.O-2......
    52A0: C3 FF 94 0E A7 26 89 47 14 26 89 57 16 8B C3 E8  // .....&.G.&.W....
    52B0: 44 FF 8A 46 FA 32 E4 8B F0 8A 8C 3E A7 E3 0A 26  // D..F.2.....>...&
    52C0: D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B  // .o.&._...&.W+2..
    52D0: F2 C1 E6 02 8B 84 1E A7 8B 94 20 A7 26 21 47 14  // .......... .&!G.
    52E0: 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 46 A7  // &!W.&.G*2.....F.
    52F0: 32 ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B  // 2...&.g.&.W...&.
    5300: 47 14 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A  // G.&.W.&.G.&.W.&.
    5310: 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EA A6 8D 66  // G,2............f
    5320: FC 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32  // .ZY].Q...V.&.O+2
    5330: ED 8B F1 8A 8C 3E A7 E3 0A 26 D1 6F 06 26 D1 5F  // .....>...&.o.&._
    5340: 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1  // ........&.O,2...
    5350: 03 F1 8B C3 FF 94 EA A6 59 C3 8B D8 E8 22 FC 8B  // ........Y...."..
    5360: C3 E8 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08  // ..U.&.G.&.w.&.G.
    5370: 26 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // &.w.&.G,2.......
    5380: FF 94 EA A6 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28  // .....SV........(
    5390: FC 26 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77  // .&.G.&.w.&1G.&1w
    53A0: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EA  // .&.G,2..........
    53B0: A6 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8  // .^[.SQV.........
    53C0: FB 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2  // .&.O...&.g.&.W..
    53D0: F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1  // ....F.&.O,2.....
    53E0: 8B C3 FF 94 EA A6 5E 59 5B C3 53 51 56 8B D8 E8  // ......^Y[.SQV...
    53F0: 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F  // .......&.O...&.o
    5400: 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B  // .&._.....R...r..
    5410: C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01  // ......&.G.&.W.&.
    5420: 47 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32  // G.&.T......&.G,2
    5430: E4 8B F0 03 F0 8B C3 FF 94 EA A6 5A C3 52 8B D8  // ...........Z.R..
    5440: E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B  // .>....q...&.G.&.
    5450: 57 06 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0  // W.&)G.&.T...QR..
    5460: E8 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A  // ......U.&.D.&.T.
    5470: 26 8B 5C 04 26 8B 4C 06 E8 B1 F2 26 89 44 0C 26  // &.\.&.L....&.D.&
    5480: 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C  // .T.ZY.R........,
    5490: FC 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA  // ....\.Z.QRW.....
    54A0: 8B C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C  // .....&.D.&.T.&.\
    54B0: 04 26 8B 4C 06 E8 F0 F1 26 89 44 0C 26 89 54 0E  // .&.L....&.D.&.T.
    54C0: 8C D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ....&.D.&.T.&.\.
    54D0: 26 8B 4C 06 E8 D1 F1 26 89 5C 10 26 89 4C 12 E9  // &.L....&.\.&.L..
    54E0: 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8  // ..R.............
    54F0: D3 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB  // ..Z.QR..........
    5500: 8C D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06  // ....&.G.&.W.&;W.
    5510: 75 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3  // u.&;G.u.&.G0.ZY.
    5520: 8B D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B  // ..&.G.&;G.r.u.&;
    5530: 57 04 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A  // W.s.3......&.G0Z
    5540: 59 C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03  // Y.QRW..&.G,2....
    5550: F0 8B C3 FF 94 F6 A6 26 89 47 08 26 89 57 0A 8C  // .......&.G.&.W..
    5560: D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8  // ...&.G+2........
    5570: 8A 8D 3E A7 32 ED 8B 84 1E A7 8B 94 20 A7 E3 06  // ..>.2....... ...
    5580: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21  // ..........&!G.&!
    5590: 57 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8  // W..M.U..QRW.....
    55A0: 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 3E  // &.G+2..........>
    55B0: A7 32 ED 8B 84 1E A7 89 46 F4 8B 84 20 A7 89 46  // .2......F... ..F
    55C0: F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46  // ....f..V....~..F
    55D0: F6 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // ..F.&.G,2.......
    55E0: FF 94 F6 A6 26 89 47 08 26 89 57 0A 8B C3 E8 47  // ....&.G.&.W....G
    55F0: F9 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6  // .&.G.&.W......V.
    5600: F7 D2 26 23 47 08 26 23 57 0A 26 89 47 14 26 89  // ..&#G.&#W.&.G.&.
    5610: 57 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D  // W.&!...F.&!G....
    5620: 77 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A  // w5..&.<.s.&.O...
    5630: 26 D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04  // &.g.&.W.....&.O.
    5640: E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08  // ..&.o.&._...&!..
    5650: 8B 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26  // .F.&!G.&.W.&.G.&
    5660: 09 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03  // .W.&.G.&.G,2....
    5670: F0 8B C3 FF 94 EA A6 8D 66 FA 5F E9 A3 FC 52 8B  // ........f._...R.
    5680: D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57  // .......4.&.G.&.W
    5690: 0A 26 85 57 06 75 06 26 85 47 04 74 05 B8 03 00  // .&.W.u.&.G.t....
    56A0: EB 03 B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B  // .....&.G0Z.SQRV.
    56B0: D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 0E A7 26  // .&.O-2.........&
    56C0: 89 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A  // .G.&.W.&.G+2....
    56D0: 8C 3E A7 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26  // .>...&.o.&._...&
    56E0: 8A 47 2B 8B F0 C1 E6 02 8B 84 1E A7 8B 94 20 A7  // .G+........... .
    56F0: 26 21 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA  // &!G.&!W....R....
    5700: FF 26 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57  // .&.G.&.W.&.G.&.W
    5710: 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B  // .Z.QR.........&.
    5720: 77 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02  // w.&.t..<ZZt[&.w.
    5730: 26 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44  // &.t..<cu.&.w.&.D
    5740: 02 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3  // ....!.&.G.&.W...
    5750: E8 FA F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26  // ...&.G.&.W.....&
    5760: 8B 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57  // .W.&.G.&;G.u.&;W
    5770: 08 75 A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE  // .u.&.w.&..&.G...
    5780: 26 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02  // &.G.ZY.&._.&.G..
    5790: 5A 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26  // ZY.RW......&.w.&
    57A0: 8B 74 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00  // .t..T...u.&.G"..
    57B0: EB 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B  // ./...u.&.w.&.?&.
    57C0: 34 26 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3  // 4&+u.&.w"..&....
    57D0: 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47  // .....2.......&.G
    57E0: 22 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26  // "&._.&.G.._Z...&
    57F0: 80 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26  // .g/.&.w.&.t..D.&
    5800: 88 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26  // .G4&._.&.G.....&
    5810: 8B 77 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3  // .w.&.t..t.&.w ..
    5820: 53 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9  // S..&.G,2.$.&.g/.
    5830: C1 E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02  // ...&.G..O...&.w.
    5840: 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47  // &.t..D.2.&.G.&.G
    5850: 06 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02  // ......@.&._.&.G.
    5860: 02 C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // ....&.w.&.t..D.2
    5870: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04  // .&.G.&.G........
    5880: EB D6 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44  // ..SV..&.w.&.t..D
    5890: 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8  // .2.&.G.&.G......
    58A0: 06 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74  // .....SV..&.w.&.t
    58B0: 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00  // ..D.2.&.G.&.G...
    58C0: 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02  // ......c.SV..&.w.
    58D0: 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02  // ..&._.._....&.\.
    58E0: 5E 5B C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02  // ^[.QR..&.w.&.D..
    58F0: 26 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32  // &.......&.w(.D.2
    5900: E4 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28  // ........<.tO&.w(
    5910: 8A 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B  // .T.2......&.G1&.
    5920: 77 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1  // w.&.4.D....2.$..
    5930: E8 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09  // ..2.$.&.g/....&.
    5940: 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26  // G.&.7&.G.......&
    5950: 01 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B  // ..&.G2.&.O(ZY.S.
    5960: D8 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26  // .&.G2.[.W......&
    5970: 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E  // ..,.t.&.G,&:G0u.
    5980: 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B  // &.w.&.t.&...&.=.
    5990: 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B  // t...&._.&.w._.&.
    59A0: 5F 02 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6  // _.&.G.._.SVW....
    59B0: 8E C6 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47  // ..&..0.t.&.G0&:G
    59C0: 2C 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26  // ,u &.w.&.t.&...&
    59D0: 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F  // .=.t...&._.&.w._
    59E0: 5E 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56  // ^[.&._.&.G....SV
    59F0: 57 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3  // W......&..0.t...
    5A00: 55 8B EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74  // U..SQRW..&.w.&.t
    5A10: 02 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D  // ...&.G=.....&..=
    5A20: 08 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C  // .s &.w.&.W=2.&.|
    5A30: 02 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47  // .........&.T5&.G
    5A40: 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02  // =..&.....2......
    5A50: 8A 94 6B A7 26 01 55 02 26 8B 7F 28 8A 55 01 80  // ..k.&.U.&..(.U..
    5A60: E2 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03  // ..&.W-&..(.U....
    5A70: 80 E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA  // ...&.W+&..(.U...
    5A80: 06 26 88 57 2A 8A 94 6A A7 26 88 57 2C 8D 66 F8  // .&.W*..j.&.W,.f.
    5A90: 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6  // _ZY[].SV..&.w...
    5AA0: 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0  // .tH.....t.......
    5AB0: 04 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74  // .^[.SV..&.w....t
    5AC0: 48 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55  // H.....t .......U
    5AD0: 8B EC 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3  // ..SQVW..@...F...
    5AE0: FF 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89  // ....F.&.E.._....
    5AF0: 5E DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6  // ^..F........F.2.
    5B00: 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03  // .F......2....^..
    5B10: DA 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6  // ..?...e..F..f...
    5B20: 46 EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00  // F...F...f.F.....
    5B30: C7 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C  // .F....F....<....
    5B40: 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83  // ..V...2....^....
    5B50: 3F 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32  // ?.tu&.E......G.2
    5B60: E4 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07  // ......2.......t.
    5B70: D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0  // ..3.P.......F...
    5B80: 74 41 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B  // tA...&.G...2....
    5B90: 5E E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07  // ^...&.E....^.&..
    5BA0: 8B 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA  // .^.&.....&.G..^.
    5BB0: 8B 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA  // .v.&.w..^..^..F.
    5BC0: 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA  // ....F.....F...F.
    5BD0: 32 E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32  // 2.........f..F.2
    5BE0: E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B  // ..........^...&.
    5BF0: 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75  // _..^..^.&._..?[u
    5C00: 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B  // J.F...^.&._..^..
    5C10: 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32  // ^.&...G.2......2
    5C20: ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC  // .......^..^...t.
    5C30: 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02  // &...G....2.$....
    5C40: C1 E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF  // ....^.&)....F...
    5C50: FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02  // ....F......2....
    5C60: 8D 46 B8 FF 97 68 A7 E9 72 FF 83 7E F6 00 0F 85  // .F...h..r..~....
    5C70: C9 FE 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D  // ...~..t..F...2..
    5C80: 66 F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04  // f._^....SQ..&.O.
    5C90: 32 ED E8 83 E8 59 5B C3 53 51 8B D8 26 8A 4F 04  // 2....Y[.SQ..&.O.
    5CA0: 32 ED E8 7E E8 59 5B C3 53 8B D8 26 8A 47 04 32  // 2..~.Y[.S..&.G.2
    5CB0: E4 E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8  // ...[.SQ..&.O.2..
    5CC0: 60 E3 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26  // `.Y[.S..fPfRfQf&
    5CD0: 8B 47 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1  // .G.f&.W.f&.O.f..
    5CE0: 66 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58  // f&.G.f&.W.fYfZfX
    5CF0: 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08  // [.S..fPfRfQf&.G.
    5D00: 66 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89  // f&.O.f..f&.G.f&.
    5D10: 57 10 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B  // W.fYfZfX[.SW..&.
    5D20: 5F 14 E8 0C EB 8B D0 66 C1 E8 10 92 5F 5B C3 53  // _......f...._[.S
    5D30: 57 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66  // W..&.G.&.W.....f
    5D40: C1 E3 10 8B DA C1 E3 02 E8 0A EB EB D8 53 52 57  // .............SRW
    5D50: 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B  // ..&.G.&.W..f....
    5D60: C2 26 8B 5F 14 E8 2E EA 5F 5A 5B C3 53 52 8B D8  // .&._...._Z[.SR..
    5D70: 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26  // &.G.&.W..f.....&
    5D80: 8B 5F 26 8B 5F 01 E8 0D EA 5A 5B C3 53 52 56 8B  // ._&._....Z[.SRV.
    5D90: F0 26 8B 5C 26 8B 5F 01 E8 96 EA 8B D0 66 C1 E8  // .&.\&._......f..
    5DA0: 10 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51  // ..&.D.&.T.^Z[.SQ
    5DB0: 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0  // RW..&.G.&.W..f..
    5DC0: 10 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87  // .....&.G.&.W....
    5DD0: D3 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 EA E9 5F  // .f............._
    5DE0: 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3 1E 06 66 50  // ZY[...f.......fP
    5DF0: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0  // fQfRfSfUfVfW....
    5E00: 75 06 E8 07 01 E9 A8 00 3C 01 75 06 E8 37 01 E9  // u.......<.u..7..
    5E10: 9E 00 3C 02 75 06 E8 5F 02 E9 94 00 3C 03 75 0B  // ..<.u.._....<.u.
    5E20: E8 91 03 8B EC 89 5E 0C E9 85 00 3C 04 75 02 EB  // ......^....<.u..
    5E30: 7D 3C 05 75 0A E8 0E 04 8B EC 89 56 10 EB 71 3C  // }<.u.......V..q<
    5E40: 06 75 10 E8 8C 03 8B EC 89 5E 0C 89 4E 14 89 56  // .u.......^..N..V
    5E50: 10 EB 5D 3C 07 75 02 EB 55 3C 08 75 0A E8 D0 03  // ..]<.u..U<.u....
    5E60: 8B EC 88 7E 0D EB 49 3C 09 75 02 EB 41 3C 0A 75  // ...~..I<.u..A<.u
    5E70: 10 E8 65 04 8B EC 89 4E 14 89 7E 00 8C 46 1C EB  // ..e....N..~..F..
    5E80: 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8 5A 04 8B EC  // /<.u..'<.u..Z...
    5E90: 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C 15 75 0F E8  // .^...<.u...<.u..
    5EA0: 80 04 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0  // .....^....O...2.
    5EB0: 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...F.f_f^f]f[fZf
    5EC0: 59 66 58 07 1F C3 50 1E 2E 8E 1E D7 2B 8C D8 A3  // YfX...P.....+...
    5ED0: 2E 6E A3 3E 6E A3 50 6E 2E 8E 1E CF 2B A3 AA 04  // .n.>n.Pn....+...
    5EE0: 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41 00 03  // .X..01.00.VESA..
    5EF0: 84 03 00 00 01 00 00 00 00 00 00 00 00 03 03 14  // ................
    5F00: 92 02 00 00 22 02 00 00 7C 5E 00 00 B9 3F 00 8B  // ...."...|^...?..
    5F10: DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 82 5E  // .....f3..f.....^
    5F20: B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18  // ."......O..G..O.
    5F30: 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 BC  // .O..O ..".......
    5F40: DF B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3  // ..O2..VQW...f3..
    5F50: 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07  // f._Y.........E..
    5F60: C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 06 C6 45  // .E.@..E.@..E...E
    5F70: 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84  // ...E...E..f.E>..
    5F80: D7 17 8E DB E8 97 D8 66 0B C0 0F 84 E1 00 06 1F  // .......f........
    5F90: 66 89 45 28 8C C8 66 C1 E0 10 B8 3B 62 66 89 45  // f.E(..f....;bf.E
    5FA0: 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03 B2 01 53 8E  // ..............S.
    5FB0: DB BE 80 4C E8 68 DD 5B 06 1F 0F 84 B1 00 53 E8  // ...L.h.[......S.
    5FC0: E4 DF 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 8E  // ..f.E..E....\...
    5FD0: E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 80 E8 66  // .f.E.f.E6.\....f
    5FE0: 89 45 23 66 89 45 3A 8D 5C 08 E8 72 E8 0A C0 75  // .E#f.E:.\..r...u
    5FF0: 03 5B EB 7B E8 AF DF 66 C1 E8 10 3D 58 02 74 0D  // .[.{...f...=X.t.
    6000: 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45 17  // =^.t.w..E.....E.
    6010: 0E 2E A1 D1 2B 89 45 08 8D 5C 04 E8 41 E8 66 8B  // ....+.E..\..A.f.
    6020: C8 66 C1 E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2  // .f......E..E2...
    6030: E0 88 45 19 8D 5C 14 E8 25 E8 5B 3D 00 03 77 2F  // ..E..\..%.[=..w/
    6040: 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D  // S.....3...[...E.
    6050: 88 45 35 88 45 34 8E DB 57 53 BE 80 4C E8 27 D8  // .E5.E4..WS..L.'.
    6060: 5B 5F 0B C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4  // [_..u....%.2....
    6070: 03 B0 4F 8E DB 5E C3 00 81 FB FF 81 74 68 0A FF  // ..O..^......th..
    6080: 75 04 8B C3 EB 21 F6 C7 08 75 61 8B CB B2 01 BE  // u....!...ua.....
    6090: 20 4C E8 8A DC 74 55 E8 EB DE 0A C0 75 0E 66 C1  //  L...tU.....u.f.
    60A0: E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A E8 4C DA 74  // ...........:.L.t
    60B0: 06 E8 DB D8 E8 D1 D3 BE 20 4C E8 9E D7 74 2D E8  // ........ L...t-.
    60C0: A5 00 E8 2C 00 66 BB 20 4C 00 4C E8 AE DE BE 00  // ...,.f. L.L.....
    60D0: 4C E8 B1 DE 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74  // L...f.....2....t
    60E0: 02 B0 40 E8 CE D7 B0 4F 32 E4 EB 04 B0 4F B4 03  // ..@....O2....O..
    60F0: C3 56 06 33 C0 8E C0 BE 20 4C E8 A9 DE 8B C8 66  // .V.3.... L.....f
    6100: C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04  // ........&..J....
    6110: FE CA 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06  // ..&....&..Q..&..
    6120: 50 04 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0  // P..&..I.b&..L...
    6130: 26 C6 06 85 04 10 26 C7 06 0C 01 0D 78 8C C8 26  // &.....&.....x..&
    6140: A3 0E 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40  // ....^..........@
    6150: 05 0F FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C  // ................
    6160: 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9  // ................
    6170: 04 00 B4 01 BE DE 60 AC 86 E0 EF 8A E0 FE C4 E2  // ......`.........
    6180: F6 B8 00 03 EF B9 09 00 BA CE 03 32 E4 BE E2 60  // ...........2...`
    6190: 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9  // ....B.J.........
    61A0: 14 00 BA C0 03 32 E4 BE EB 60 8A C4 EE AC EE FE  // .....2...`......
    61B0: C4 E2 F7 C3 BE 00 4C E8 CB DD 66 C1 E8 10 8B D8  // ......L...f.....
    61C0: E8 9B DD 75 05 E8 87 DD 75 04 B8 4F 00 C3 B8 4F  // ...u....u..O...O
    61D0: 03 C3 E8 89 DD 74 53 BE 00 4C 80 FB 00 74 18 80  // .....tS..L...t..
    61E0: FB 01 75 05 E8 C7 DD EB 1D 80 FB 02 75 10 8B C1  // ..u.........u...
    61F0: E8 7A DD D3 E8 8B C8 E8 61 D8 74 2E EB 08 80 FB  // .z......a.t.....
    6200: 03 75 24 E8 1E DD E8 64 DD 8B D8 D3 E3 50 33 C0  // .u$....d.....P3.
    6210: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    6220: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    6230: 0A DB 75 07 8A EF E8 2A D9 EB 05 E8 0F D9 8A F8  // ..u....*........
    6240: B0 4F 32 E4 C3 00 E8 15 DD 74 2C BE 00 4C E8 34  // .O2......t,..L.4
    6250: DD 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    6260: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 BF E5 D1 E8  // ......u.........
    6270: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    6280: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    6290: 8B C2 BB 13 00 E8 F0 E4 BB 12 00 E8 EA E4 66 58  // ..............fX
    62A0: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    62B0: 66 56 66 57 0E 1F E8 08 E6 E8 8A FF E8 27 E6 8B  // fVfW.........'..
    62C0: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    62D0: 5A 66 59 66 58 07 1F 9D CB 0E 07 BF 10 A6 2E 8B  // ZfYfX...........
    62E0: 0E 0E A6 B8 4F 00 C3 00 0A DB 75 06 B7 04 B3 10  // ....O.....u.....
    62F0: EB 26 80 FB 01 75 14 E8 01 D8 75 21 53 B1 01 0A  // .&...u....u!S...
    6300: FF 74 02 B1 00 E8 1B D7 5B EB 0D 80 FB 02 75 0D  // .t......[.....u.
    6310: E8 2E D8 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03  // .........O2...O.
    6320: C3 00 80 E3 01 0A DB 75 05 BB 02 01 EB 0E E8 CA  // .......u........
    6330: D7 75 0E 33 C0 53 E8 5B CB 5B 74 05 B0 4F 32 E4  // .u.3.S.[.[t..O2.
    6340: C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD 42 C3 1E 06  // ..O......r..B...
    6350: 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F  // fPfQfRfSfUfVfW..
    6360: 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 28 63 66 5F  // P.......X...(cf_
    6370: 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F C3 0E  // f^f]f[fZfYfX....
    6380: 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94 28 63 C3  // .P.......X...(c.
    6390: 62 63 78 9C 91 9C AE 9C 55 64 B1 93 E3 93 56 94  // bcx.....Ud....V.
    63A0: D9 94 67 96 6B 96 74 99 45 9A C8 9A 2F 9B CA 9C  // ..g.k.t.E.../...
    63B0: 2C 9D D5 9F 6E 66 1C A4 16 63 16 63 16 63 16 63  // ,...nf...c.c.c.c
    63C0: 16 63 16 63 EC A4 EF 88 43 8A 2E 8E 1E CF 2B 80  // .c.c....C.....+.
    63D0: 26 87 04 F3 50 8A E0 80 E4 7F E8 C4 01 3B D3 75  // &...P........;.u
    63E0: 02 58 C3 BA CC 03 EC B2 B4 B1 30 26 F6 47 09 01  // .X........0&.G..
    63F0: 74 0C B2 D4 B1 20 A8 01 75 49 B5 09 EB 06 A8 01  // t.... ..uI......
    6400: 74 41 B5 0B 53 E8 70 41 0A FF 5B 75 0B 80 26 88  // tA..S.pA..[u..&.
    6410: 04 F0 08 2E 88 04 EB 2B 58 80 0E 87 04 08 80 26  // .......+X......&
    6420: 10 04 CF 08 0E 10 04 89 16 63 04 C7 06 85 04 08  // .........c......
    6430: 00 C6 06 84 04 18 C7 06 0C 01 FA 6F 8C 0E 0E 01  // ...........o....
    6440: CD 42 C3 80 26 10 04 CF 08 0E 10 04 58 53 50 0E  // .B..&.......XSP.
    6450: 1F 33 C9 8A C8 E8 A3 D6 74 06 E8 32 D5 E8 28 D0  // .3......t..2..(.
    6460: B2 08 BE 40 4C E8 B7 D8 BE 40 4C E8 ED D3 58 5B  // ...@L....@L...X[
    6470: 0F 84 6E FF 2E 8E 1E CF 2B 0E 07 E8 19 29 0E 1F  // ..n.....+....)..
    6480: 53 66 BB 40 4C 00 4C E8 F2 DA BE 00 4C B0 20 E8  // Sf.@L.L.....L. .
    6490: 22 D4 5B 2E 8E 1E CF 2B 0E 07 E8 22 2E E8 24 00  // ".[....+..."..$.
    64A0: E8 2E 3D E8 D1 01 E8 8E 01 E8 B4 3E 0E 1F BE 00  // ..=........>....
    64B0: 4C B0 10 E8 FE D3 E8 FD 2D E8 F5 2D C3 8B EC C6  // L.......-..-....
    64C0: 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD 00 E8 52 00  // F..../........R.
    64D0: E8 62 0A C3 53 83 C3 0A 8B 16 63 04 B9 19 00 B8  // .b..S.....c.....
    64E0: 11 30 EF 32 C0 26 8A 27 EF 43 FE C0 E2 F7 5B 80  // .0.2.&.'.C....[.
    64F0: C2 06 32 C0 EE C3 53 BA C4 03 83 C3 05 B9 04 00  // ..2...S.........
    6500: B0 01 26 8A 27 3C 01 75 03 80 CC 20 EF 43 FE C0  // ..&.'<.u... .C..
    6510: E2 F0 5B 26 8A 47 09 BA C2 03 EE B2 C4 B8 00 03  // ..[&.G..........
    6520: EF C3 8B F3 83 C6 23 BA DA 03 26 F6 47 09 01 75  // ......#...&.G..u
    6530: 02 B2 BA F6 06 89 04 08 74 1D 83 C6 10 EC B9 04  // ........t.......
    6540: 00 B4 10 B2 C0 80 FC 11 74 07 8A C4 EE 26 8A 04  // ........t....&..
    6550: EE 46 FE C4 E2 EF C3 53 EC 8B DE B9 14 00 32 E4  // .F.....S......2.
    6560: B2 C0 8A C4 EE FE C4 26 8A 07 EE 43 E2 F4 8A C4  // .......&...C....
    6570: EE 32 C0 EE 1E 06 E8 4F 2D 0B ED 74 09 1F 1E B9  // .2.....O-..t....
    6580: 10 00 F3 A4 46 A4 07 1F 5B C3 53 83 C3 37 B9 09  // ....F...[.S..7..
    6590: 00 32 C0 BA CE 03 26 8A 27 EF 43 FE C0 E2 F7 5B  // .2....&.'.C....[
    65A0: C3 BB 2C 68 0E 07 8B D3 0A E4 7D 01 C3 E8 01 00  // ..,h......}.....
    65B0: C3 33 F6 80 FC 03 7F 3C 4A F6 06 89 04 10 75 20  // .3.....<J.....u 
    65C0: A0 88 04 24 0F 3C 02 7E 24 3C 08 74 20 3C 06 74  // ...$.<.~$<.t <.t
    65D0: 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81 C3 00 04 C3  // .<.t..@.........
    65E0: B0 40 D0 EC F6 E4 03 D8 81 C3 80 04 C3 B0 40 F6  // .@............@.
    65F0: E4 03 D8 C3 80 FC 07 75 11 F6 06 89 04 10 75 05  // .......u......u.
    6600: 81 C3 00 01 C3 81 C3 00 05 C3 BF AE 65 BE CF 65  // ............e..e
    6610: 33 C9 E8 4E 00 C3 04 80 00 05 80 00 06 C0 00 0D  // 3..N............
    6620: 80 02 0E C0 02 0F 80 03 10 C0 03 11 40 05 12 80  // ............@...
    6630: 05 13 C0 05 62 40 01 53 8A 1E 49 04 80 FB 07 7F  // ....b@.S..I.....
    6640: 10 32 FF D1 E3 2E 8B 87 EB 65 A2 65 04 88 26 66  // .2.......e.e..&f
    6650: 04 5B C3 2C 30 28 30 2D 30 29 30 2A 30 2E 30 1E  // .[.,0(0-0)0*0.0.
    6660: 3F 29 30 2E 38 25 75 07 2E 03 5D 01 33 F6 C3 83  // ?)0.8%u...].3...
    6670: C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E CF 2B F6 06  // ..;.u........+..
    6680: 87 04 80 75 49 83 3E 4C 04 00 74 42 A0 49 04 B9  // ...uI.>L..tB.I..
    6690: 00 20 2E 8B 3E D5 2B 26 F6 47 33 01 75 0E 26 F6  // . ..>.+&.G3.u.&.
    66A0: 47 09 01 75 1B 2E 8B 3E D3 2B EB 14 3C 06 7E 0B  // G..u...>.+..<.~.
    66B0: 2E 8B 3E D1 2B 26 8A 67 37 B5 40 66 33 C0 EB 06  // ..>.+&.g7.@f3...
    66C0: 66 B8 20 07 20 07 8E C7 66 33 FF F3 66 AB 80 26  // f. . ...f3..f..&
    66D0: 87 04 7F 07 1F C3 2E 8E 1E CF 2B 80 FB 10 75 03  // ..........+...u.
    66E0: E9 7A 01 80 FB 20 75 03 E9 9B 01 80 FB 32 75 1F  // .z... u......2u.
    66F0: BA CC 03 0A C0 75 09 EC 0C 02 B2 C2 EE E9 F3 00  // .....u..........
    6700: FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE E9 E4 00 80  // .......$........
    6710: FB 35 75 28 3C 80 75 08 80 0E 89 04 40 E9 D3 00  // .5u(<.u.....@...
    6720: F6 06 89 04 40 0F 84 D0 00 0A C0 0F 84 CA 00 FE  // ....@...........
    6730: C8 75 06 E8 98 07 E9 BA 00 E9 BD 00 80 FB 30 74  // .u............0t
    6740: 03 E9 96 00 50 E8 30 3E 8A EF BA CC 03 EC 8A C8  // ....P.0>........
    6750: 58 0A C0 75 30 B7 08 F6 C1 01 75 12 0A ED 75 0B  // X..u0.....u...u.
    6760: A0 10 04 24 30 3C 30 75 10 B7 02 E9 8B 00 A0 10  // ...$0<0u........
    6770: 04 24 30 3C 30 75 02 B7 02 80 26 89 04 6F 80 0E  // .$0<0u....&..o..
    6780: 89 04 80 EB 36 3C 01 75 41 80 26 89 04 6F B7 09  // ....6<.uA.&..o..
    6790: F6 C1 01 75 15 B7 0B A0 10 04 24 30 3C 30 74 1B  // ...u......$0<0t.
    67A0: B7 09 0A ED 74 15 B7 05 EB 11 A0 10 04 24 30 3C  // ....t........$0<
    67B0: 30 75 08 B7 0B 0A ED 74 02 B7 03 8A 1E 88 04 80  // 0u.....t........
    67C0: E3 F0 0A DF 88 1E 88 04 EB 29 3C 02 75 2B 80 26  // .........)<.u+.&
    67D0: 89 04 6F 80 0E 89 04 10 EB B4 80 FB 31 75 1B 0A  // ..o.........1u..
    67E0: C0 74 0B 3C 01 75 0C 80 0E 89 04 08 EB 05 80 26  // .t.<.u.........&
    67F0: 89 04 F7 8B EC C6 46 1A 12 C3 80 FB 33 75 16 3C  // ......F.....3u.<
    6800: 00 74 0B 3C 01 75 EC 80 26 89 04 FD EB E5 80 0E  // .t.<.u..&.......
    6810: 89 04 02 EB DE 80 FB 34 75 17 3C 00 75 07 80 26  // .......4u.<.u..&
    6820: 87 04 FE EB CE 3C 01 75 07 80 0E 87 04 01 EB C3  // .....<.u........
    6830: C3 80 FB 36 75 26 BB 20 FF 3C 01 74 09 BB 00 DF  // ...6u&. .<.t....
    6840: 3C 00 74 02 EB AD E8 02 00 EB A8 9C FA BA C4 03  // <.t.............
    6850: B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3 C3 B3 03 B7  // ...B."..........
    6860: 00 BA CC 03 EC A8 01 75 02 B7 01 A0 88 04 8A E0  // .......u........
    6870: B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89 5E 0E 89 4E  // ....%.......^..N
    6880: 16 C6 46 1A 12 C3 9C FA C7 06 14 00 DC 8D 8C 0E  // ..F.............
    6890: 16 00 9D C3 28 18 08 00 08 09 03 00 02 63 2D 27  // ....(........c-'
    68A0: 28 90 2B A0 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // (.+.............
    68B0: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // ................
    68C0: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    68D0: 10 0E 00 FF 50 18 08 00 10 01 03 00 02 63 5F 4F  // ....P........c_O
    68E0: 50 82 55 81 BF 1F 00 C7 06 07 00 00 00 00 9C 8E  // P.U.............
    68F0: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    6900: 11 12 13 14 15 16 17 08 00 0F 00 00 00 00 00 00  // ................
    6910: 10 0E 00 FF 28 18 08 00 40 09 03 00 02 63 2D 27  // ....(...@....c-'
    6920: 28 90 2B 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // (.+.............
    6930: 8F 14 00 96 B9 A2 FF 00 13 15 17 02 04 06 07 10  // ................
    6940: 11 12 13 14 15 16 17 01 00 03 00 00 00 00 00 00  // ................
    6950: 30 0F 00 FF 50 18 08 00 40 01 01 00 06 63 5F 4F  // 0...P...@....c_O
    6960: 50 82 54 80 BF 1F 00 C1 00 00 00 00 00 00 9C 8E  // P.T.............
    6970: 8F 28 00 96 B9 C2 FF 00 17 17 17 17 17 17 17 17  // .(..............
    6980: 17 17 17 17 17 17 17 01 00 01 00 00 00 00 00 00  // ................
    6990: 00 0D 00 FF 50 18 0E 00 10 00 03 00 03 A6 5F 4F  // ....P........._O
    69A0: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    69B0: 5D 28 0D 63 BA A3 FF 00 08 08 08 08 08 08 08 10  // ](.c............
    69C0: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    69D0: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 0A E3 5F 4F  // ....P........._O
    69E0: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    69F0: DF 50 00 E7 04 E3 FF 00 01 02 03 04 05 06 07 08  // .P..............
    6A00: 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10 00 00 00 00  // ................
    6A10: 40 05 0F FF 00 05 11 1C 08 0B 14 28 0E 18 2D 32  // @..........(..-2
    6A20: 20 24 38 3F 00 05 08 0B 0E 11 14 18 1C 20 24 28  //  $8?......... $(
    6A30: 2D 32 38 3F 07 0C 10 15 1A 18 16 15 13 1C 25 2F  // -28?..........%/
    6A40: 38 33 2E 2A 25 27 29 2A 2C 23 19 10 23 25 27 2A  // 83.*%')*,#..#%'*
    6A50: 2C 2B 2A 29 29 2D 32 37 3B 39 37 34 32 33 34 35  // ,+*))-27;9742345
    6A60: 35 31 2C 27 2F 30 32 33 34 34 33 33 32 35 38 3A  // 51,'/0234433258:
    6A70: 3D 3C 3A 39 38 38 39 39 3A 37 34 31 03 05 07 09  // =<:98899:741....
    6A80: 0B 0B 0A 09 08 0D 11 15 19 17 15 13 11 11 12 13  // ................
    6A90: 14 0F 0B 07 10 10 12 13 14 13 13 13 12 14 16 18  // ................
    6AA0: 1A 19 18 17 16 17 17 17 18 15 14 11 15 15 16 17  // ................
    6AB0: 17 17 17 17 16 18 19 1A 1B 1B 1A 19 19 19 19 19  // ................
    6AC0: 1A 18 17 16 02 03 04 05 07 06 06 05 05 07 0A 0C  // ................
    6AD0: 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04 09 09 0A 0B  // ................
    6AE0: 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D  // ................
    6AF0: 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F  // ................
    6B00: 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C 00 00 00 00  // ................
    6B10: 00 00 00 00 28 18 08 00 20 09 0F 00 06 63 2D 27  // ....(... ....c-'
    6B20: 28 90 2B 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // (.+.............
    6B30: 8F 14 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // ................
    6B40: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    6B50: 00 05 0F FF 50 18 08 00 40 01 0F 00 06 63 5F 4F  // ....P...@....c_O
    6B60: 50 82 54 80 BF 1F 00 C0 00 00 00 00 00 00 9C 8E  // P.T.............
    6B70: 8F 28 00 96 B9 E3 FF 00 01 02 03 04 05 06 07 10  // .(..............
    6B80: 11 12 13 14 15 16 17 01 00 0F 00 00 00 00 00 00  // ................
    6B90: 00 05 0F FF 00 05 11 1C 08 0B 25 28 02 07 1B 20  // ..........%(... 
    6BA0: 0F 14 28 2C 0C 11 25 2A 14 1E 32 36 0F 13 27 2C  // ..(,..%*..26..',
    6BB0: 1B 20 34 39 06 0B 1F 24 13 18 2C 30 09 0D 21 26  // . 49...$..,0..!&
    6BC0: 15 1A 2E 33 13 17 2B 30 1F 24 38 3D 0E 18 2D 32  // ...3..+0.$8=..-2
    6BD0: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    6BE0: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    6BF0: 20 24 38 3F 00 05 11 1C 08 0B 14 18 00 05 11 1C  //  $8?............
    6C00: 08 0B 14 18 0E 18 2D 32 20 24 38 3F 0E 18 2D 32  // ......-2 $8?..-2
    6C10: 20 24 38 3F 50 18 0E 00 80 01 0F 00 06 A2 5F 4F  //  $8?P........._O
    6C20: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    6C30: 5D 28 0F 63 BA E3 FF 00 08 00 00 18 18 00 00 00  // ](.c............
    6C40: 08 00 00 00 18 00 00 0B 00 05 00 00 00 00 00 00  // ................
    6C50: 00 05 05 FF 50 18 0E 00 80 01 0F 00 06 A3 5F 4F  // ....P........._O
    6C60: 50 82 54 80 BF 1F 00 40 00 00 00 00 00 00 83 85  // P.T....@........
    6C70: 5D 28 0F 63 BA E3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    6C80: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    6C90: 00 05 0F FF 28 18 0E 00 08 09 03 00 02 A3 2D 27  // ....(.........-'
    6CA0: 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // (.+....M........
    6CB0: 5D 14 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ]..c...........8
    6CC0: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    6CD0: 10 0E 00 FF 50 18 0E 00 10 01 03 00 02 A3 5F 4F  // ....P........._O
    6CE0: 50 82 55 81 BF 1F 00 4D 0B 0C 00 00 00 00 83 85  // P.U....M........
    6CF0: 5D 28 1F 63 BA A3 FF 00 01 02 03 04 05 14 07 38  // ](.c...........8
    6D00: 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    6D10: 10 0E 00 FF 28 18 10 00 08 08 03 00 02 67 2D 27  // ....(........g-'
    6D20: 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // (.+....O........
    6D30: 8F 14 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // ...............8
    6D40: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    6D50: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 67 5F 4F  // ....P........g_O
    6D60: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    6D70: 8F 28 1F 96 B9 A3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    6D80: 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00 00 00 00 00  // 9:;<=>?.........
    6D90: 10 0E 00 FF 50 18 10 00 10 00 03 00 02 66 5F 4F  // ....P........f_O
    6DA0: 50 82 55 81 BF 1F 00 4F 0D 0E 00 00 00 00 9C 8E  // P.U....O........
    6DB0: 8F 28 0F 96 B9 A3 FF 00 08 08 08 08 08 08 08 10  // .(..............
    6DC0: 18 18 18 18 18 18 18 0E 00 0F 08 00 00 00 00 00  // ................
    6DD0: 10 0A 00 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    6DE0: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    6DF0: DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F 3F 3F 3F 3F  // .(......????????
    6E00: 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00 00 00 00 00  // ???????.........
    6E10: 00 05 01 FF 50 1D 10 00 A0 01 0F 00 06 E3 5F 4F  // ....P........._O
    6E20: 50 82 54 80 0B 3E 00 40 00 00 00 00 00 00 EA 8C  // P.T..>.@........
    6E30: DF 28 00 E7 04 E3 FF 00 01 02 03 04 05 14 07 38  // .(.............8
    6E40: 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00 00 00 00 00  // 9:;<=>?.........
    6E50: 00 05 0F FF 28 18 08 00 20 01 0F 00 0E 63 5F 4F  // ....(... ....c_O
    6E60: 50 82 54 80 BF 1F 00 41 00 00 00 00 00 00 9C 8E  // P.T....A........
    6E70: 8F 28 40 96 B9 A3 FF 00 01 02 03 04 05 06 07 08  // .(@.............
    6E80: 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00 00 00 00 00  // .......A........
    6E90: 40 05 0F FF 2C 68 00 C0 00 00 00 00 00 00 00 00  // @...,h..........
    6EA0: 00 00 00 00 4C 6E 00 C0 00 00 00 00 00 00 00 00  // ....Ln..........
    6EB0: 00 00 00 00 1A 00 EA A5 00 C0 00 00 00 00 00 00  // ................
    6EC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 1E E8  // ................
    6ED0: 10 00 2E 8E 1E CF 2B E8 FE 36 E8 D5 36 E8 76 1A  // ......+..6..6.v.
    6EE0: 1F C3 2E 8E 1E CF 2B C7 06 87 04 60 F9 C6 06 8A  // ......+....`....
    6EF0: 04 0B A0 89 04 0C 11 24 17 A2 89 04 B4 01 E8 73  // .......$.......s
    6F00: 1E A0 89 04 80 26 10 04 CF 80 0E 10 04 20 C7 06  // .....&....... ..
    6F10: 63 04 D4 03 0E 1F E8 CD C5 F7 C1 02 00 75 03 E8  // c............u..
    6F20: 66 C5 B8 03 00 E8 57 F4 C3 1E 2E 8E 1E CF 2B 0E  // f.....W.......+.
    6F30: 07 EB 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8  // ..........t..S..
    6F40: 03 EC B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F  // ..........>c..u/
    6F50: BE AE 6F B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1  // ..o.@.3.........
    6F60: EF 03 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04  // ..........B...E.
    6F70: EE 2E 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26  // ...E....J......&
    6F80: 8A 47 2B F6 06 89 04 06 74 31 B9 F8 00 BF AC 69  // .G+.....t1.....i
    6F90: 3C 08 74 11 B9 40 00 BF 2C 6B 3C 38 74 07 3C 3F  // <.t..@..,k<8t.<?
    6FA0: 74 03 BF 6C 6B 33 DB 9C FA 8A C3 EE 2E 8A 01 42  // t..lk3.........B
    6FB0: EE EE EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C  // .....J....I<.t%<
    6FC0: 38 74 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 E7 D3  // 8t.<?t*...3.Q...
    6FD0: B9 08 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59  // .......t.....g.Y
    6FE0: E2 EA EB 20 E8 D0 D3 B9 10 00 33 DB E8 57 00 EB  // ... ......3..W..
    6FF0: 13 B9 40 00 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE  // ..@.3.Q.(...../.
    7000: C3 59 E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F  // .Y..[..*.*.*.*.?
    7010: 15 3F 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A  // .?.?.?.*.?.*.?.*
    7020: 00 3F 8B FB C1 EF 02 83 E7 0F 2E 8A B5 9E 6F 8B  // .?............o.
    7030: FB D1 EF 83 E7 0F 2E 8A AD 9E 6F 8B FB 83 E7 0F  // ..........o.....
    7040: 2E 8A 8D 9E 6F C3 9C 8A C3 FA EE 2E 8A 05 42 EE  // ....o.........B.
    7050: 47 2E 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7  // G....G....G..J..
    7060: 9D C3 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99  // ..........~.....
    7070: 81 7E 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38  // .~|.....|.....|8
    7080: 10 00 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10  // ...8|.|8...8....
    7090: 38 00 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18  // 8.8|..l.8...<~<.
    70A0: 00 00 FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C  // ............<ff<
    70B0: 18 00 FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC  // .............6x.
    70C0: CC 78 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70  // .x~..~.~.......p
    70D0: F0 60 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C  // .`>>66.f...<f.f<
    70E0: DB 00 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06  // .............>..
    70F0: 02 00 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00  // ...<~.~<..fffff.
    7100: 66 00 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38  // f...{;....<f8ll8
    7110: CC 78 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C  // .x.........<~.~<
    7120: 18 7E 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C  // .~.<~.........~<
    7130: 18 00 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30  // ...........0p.p0
    7140: 00 00 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24  // ...........$f.f$
    7150: 00 00 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10  // ....8||.....||8.
    7160: 00 00 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00  // ...........<<...
    7170: 18 00 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C  // ..lll.....ll.l.l
    7180: 6C 00 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60  // l..~.|........0`
    7190: C6 00 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00  // ..8l8v..v...0...
    71A0: 00 00 18 30 60 60 60 30 18 00 60 30 18 18 18 30  // ...0```0..`0...0
    71B0: 60 00 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18  // `...|.|......~..
    71C0: 00 00 00 00 00 00 18 18 30 00 00 00 00 FE 00 00  // ........0.......
    71D0: 00 00 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0  // .......88....0`.
    71E0: 80 00 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18  // ..|.....|..x....
    71F0: 7E 00 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6  // ~.|...0f..|..<..
    7200: 7C 00 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6  // |...<l..........
    7210: 7C 00 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18  // |.|.....|.......
    7220: 18 00 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6  // ..|..|..|.|..~..
    7230: 7C 00 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18  // |...............
    7240: 18 30 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE  // .0..0`0.........
    7250: 00 00 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00  // ..`0...0`.|.....
    7260: 18 00 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6  // ..|.....~.8l....
    7270: C6 00 FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66  // ...ff|ff..<f...f
    7280: 3C 00 F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2  // <..lfffl........
    7290: FE 00 FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6  // ...b`|``..|.....
    72A0: 7C 00 C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18  // |.........<.....
    72B0: 3C 00 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC  // <.<.....p.......
    72C0: C6 00 F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6  // ...````b........
    72D0: C6 00 C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6  // ..........|.....
    72E0: 7C 00 FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6  // |..ff|``..|.....
    72F0: 7C 06 FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6  // |.........|..|..
    7300: 7C 00 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6  // |.~Z....<.......
    7310: 7C 00 C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE  // |.....l8........
    7320: C6 00 C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18  // ...l888l..fff<..
    7330: 3C 00 FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60  // <.....0b..|`````
    7340: 7C 00 C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C  // |..`0.....|.....
    7350: 7C 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // |..8l...........
    7360: 00 FF 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC  // ..00........x.|.
    7370: 7E 00 E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6  // ~..`|fff....|...
    7380: 7C 00 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0  // |...|...~...|...
    7390: 7C 00 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E  // |..60.00x...v..~
    73A0: 06 7C E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18  // .|.`|fff....8...
    73B0: 3C 00 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C  // <........x.`flxl
    73C0: E6 00 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6  // ............l...
    73D0: C6 00 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6  // .....ffff...|...
    73E0: 7C 00 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C  // |....ff|`...v..|
    73F0: 0C 1E 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06  // .....f``....|.|.
    7400: 7C 00 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC  // |.00.006........
    7410: 76 00 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE  // v.....l8........
    7420: 6C 00 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76  // l....l8l.......v
    7430: 06 7C 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18  // .|....0d.....p..
    7440: 0E 00 18 18 18 00 18 18 18 00 70 18 18 0E 18 18  // ..........p.....
    7450: 70 00 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C  // p.v.........88ll
    7460: FE 00 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE  // ..<f.f<..x......
    7470: 76 00 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC  // v...|...|.|.x.|.
    7480: 7E 00 C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC  // ~...x.|.~...x.|.
    7490: 7E 00 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18  // ~.88x.|.~...|.|.
    74A0: 6C 38 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0  // l8|.|...|...|...
    74B0: 7C 00 E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18  // |...|...|.f.8...
    74C0: 3C 00 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18  // <.|.8...<...8...
    74D0: 3C 00 C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE  // <..8l.....88.|..
    74E0: C6 00 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8  // ............l.~.
    74F0: 6E 00 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6  // n.~.......|..|..
    7500: 7C 00 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6  // |....|..|....|..
    7510: 7C 00 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE  // |.|.....v.......
    7520: 76 00 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C  // v...<...<..8l..l
    7530: 38 00 C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E  // 8.......|...~..~
    7540: 18 00 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C  // ..8l`.f.l..f<~.<
    7550: 18 00 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C  // ..>c8.c>...>a<.|
    7560: 00 1C 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18  // ....x.|.~...8...
    7570: 3C 00 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC  // <....|..|.......
    7580: 76 00 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE  // v.....ff........
    7590: C6 00 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E  // ..>.>`gc=.>.v..~
    75A0: 06 7C 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60  // .|...0`f<....|``
    75B0: 00 00 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36  // .....|.......0|6
    75C0: 0C 3E C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C  // .>...0l<~.....<<
    75D0: 18 00 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8  // ...6l.l6....l6l.
    75E0: 00 00 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA  // ..".".".".U.U.U.
    75F0: 55 AA DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18  // U..w.w.w.w......
    7600: 18 18 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18  // ................
    7610: 18 18 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36  // ..6666.666.....6
    7620: 36 36 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36  // 66........66...6
    7630: 36 36 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36  // 6666666666.....6
    7640: 36 36 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00  // 6666......6666..
    7650: 00 00 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18  // ................
    7660: 18 18 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00  // ................
    7670: 00 00 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18  // ................
    7680: 18 18 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18  // ................
    7690: 18 18 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36  // ..........666676
    76A0: 36 36 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36  // 666670?.....?076
    76B0: 36 36 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36  // 6666...........6
    76C0: 36 36 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00  // 6666707666......
    76D0: 00 00 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00  // ..66...666......
    76E0: 00 00 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18  // ..6666..........
    76F0: 18 18 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00  // .......6666666?.
    7700: 00 00 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18  // ................
    7710: 18 18 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36  // ......?6666666.6
    7720: 36 36 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00  // 66..............
    7730: 00 00 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF  // ................
    7740: FF FF 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0  // ................
    7750: F0 F0 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00  // ................
    7760: 00 00 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6  // ....f...f..x....
    7770: CC 00 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C  // ....b```....llll
    7780: 6C 00 FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8  // l...`0`....~....
    7790: 70 00 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18  // p..ffff|...v....
    77A0: 38 00 FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C  // 8..8l.l8..8l...l
    77B0: 38 00 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC  // 8.8l..ll..>`8f..
    77C0: 78 00 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C  // x...~..~...|...|
    77D0: C0 00 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6  // ..8`...`8.|.....
    77E0: C6 00 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00  // ............~...
    77F0: 7E 00 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00  // ~.0...0.~...0...
    7800: 7E 00 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78  // ~..............x
    7810: 30 00 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC  // 0.....~....v..v.
    7820: 00 00 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00  // ..|..|..........
    7830: 00 00 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38  // ...............8
    7840: 18 00 D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00  // ...lll....p.0...
    7850: 00 00 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00  // ....||||........
    7860: 00 00 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    7870: 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7880: 00 00 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81  // .......~........
    7890: 7E 00 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE  // ~......|........
    78A0: 7C 00 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38  // |.......l.....|8
    78B0: 10 00 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00  // .........8|.|8..
    78C0: 00 00 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10  // .........88.l.l.
    78D0: 38 00 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10  // 8.......8||...l.
    78E0: 38 00 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00  // 8..........<<<..
    78F0: 00 00 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF  // ................
    7900: FF FF FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18  // ..........<fff<.
    7910: 00 00 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7  // ................
    7920: FF FF FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC  // ..........6x....
    7930: 78 00 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18  // x......<fff<.~..
    7940: 18 00 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8  // ..............x.
    7950: 70 00 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E  // p......>6>66v.f.
    7960: 1E 0C 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB  // .........~<ff<~.
    7970: 18 00 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0  // ................
    7980: 80 00 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E  // ..........>~.~>.
    7990: 02 00 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C  // ........<~....~<
    79A0: 18 00 00 00 00 00 00 66 66 66 66 66 66 66 00 66  // .......fffffff.f
    79B0: 66 00 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B  // f...........{...
    79C0: 1B 00 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C  // .......|..`|..|.
    79D0: C6 C6 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE  // ..|.............
    79E0: FE 00 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18  // ........<~...~<.
    79F0: 7E 00 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18  // ~.......<~......
    7A00: 18 00 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C  // ..............~<
    7A10: 18 00 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00  // ................
    7A20: 00 00 00 00 00 00 00 00 00 00 30 70 FE 70 30 00  // ..........0p.p0.
    7A30: 00 00 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00  // ................
    7A40: 00 00 00 00 00 00 00 00 00 00 24 66 FF 66 24 00  // ..........$f.f$.
    7A50: 00 00 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE  // .........888||..
    7A60: 00 00 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10  // ..........|||88.
    7A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7A80: 00 00 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18  // ........<<<<....
    7A90: 18 00 00 00 00 00 36 36 36 36 14 00 00 00 00 00  // ......6666......
    7AA0: 00 00 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C  // .......lll.ll.ll
    7AB0: 6C 00 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6  // l........|..x<..
    7AC0: 7C 18 18 00 00 00 00 00 00 00 62 66 0C 18 30 66  // |.........bf..0f
    7AD0: C6 00 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC  // .......8l80v~...
    7AE0: 76 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // v...............
    7AF0: 00 00 00 00 00 00 00 0C 18 30 30 30 30 30 30 18  // .........000000.
    7B00: 0C 00 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18  // .......0........
    7B10: 30 00 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00  // 0.........l8.8l.
    7B20: 00 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00  // ............~...
    7B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C  // ................
    7B40: 0C 18 00 00 00 00 00 00 00 00 00 00 FE 00 00 00  // ................
    7B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    7B60: 18 00 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0  // .............0`.
    7B70: 80 00 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6  // .......|........
    7B80: 7C 00 00 00 00 00 00 18 78 18 18 18 18 18 18 18  // |.......x.......
    7B90: 7E 00 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6  // ~......|.....0`.
    7BA0: FE 00 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6  // .......|...<....
    7BB0: 7C 00 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C  // |........<l.....
    7BC0: 1E 00 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6  // ................
    7BD0: 7C 00 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6  // |......|........
    7BE0: 7C 00 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30  // |...........0000
    7BF0: 30 00 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6  // 0......|...|....
    7C00: 7C 00 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6  // |......|....~...
    7C10: 7C 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // |...............
    7C20: 00 00 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C  // ................
    7C30: 0C 18 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18  // ..........0`.`0.
    7C40: 0C 00 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00  // ................
    7C50: 00 00 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30  // ........`0.....0
    7C60: 60 00 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18  // `......|........
    7C70: 18 00 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0  // .......|........
    7C80: 7E 00 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6  // ~......8l.......
    7C90: C6 00 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66  // ........fff|ffff
    7CA0: FC 00 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66  // .......<f......f
    7CB0: 3C 00 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C  // <.......lffffffl
    7CC0: F8 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66  // ........f`d|d``f
    7CD0: FE 00 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60  // ........f`d|d```
    7CE0: F0 00 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6  // .......|........
    7CF0: 7C 00 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6  // |...............
    7D00: C6 00 00 00 00 00 00 3C 18 18 18 18 18 18 18 18  // .......<........
    7D10: 3C 00 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8  // <......<........
    7D20: 70 00 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6  // p...............
    7D30: C6 00 00 00 00 00 00 F0 60 60 60 60 60 60 62 66  // ........``````bf
    7D40: FE 00 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6  // ................
    7D50: C6 00 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6  // ................
    7D60: C6 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
    7D70: 7C 00 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60  // |.......ffff|```
    7D80: F0 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6  // .......|........
    7D90: 7C 06 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66  // |.......fff|xlff
    7DA0: E6 00 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6  // .......|...p....
    7DB0: 7C 00 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18  // |......~Z.......
    7DC0: 3C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6  // <...............
    7DD0: 7C 00 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38  // |.............l8
    7DE0: 10 00 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6  // ................
    7DF0: C6 00 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6  // ..........l88l..
    7E00: C6 00 00 00 00 00 00 66 66 66 66 66 3C 18 18 18  // .......fffff<...
    7E10: 3C 00 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6  // <...........0`..
    7E20: FE 00 00 00 00 00 00 7C 60 60 60 60 60 60 60 60  // .......|````````
    7E30: 7C 00 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06  // |..........`0...
    7E40: 02 00 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C  // .......|........
    7E50: 7C 00 00 00 00 00 10 38 6C C6 00 00 00 00 00 00  // |......8l.......
    7E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7E70: 00 00 FF 00 00 00 18 18 18 0C 00 00 00 00 00 00  // ................
    7E80: 00 00 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC  // ..........x.|...
    7E90: 76 00 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // v.......``|fffff
    7EA0: FC 00 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6  // ..........|.....
    7EB0: 7C 00 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC  // |.........|.....
    7EC0: 7E 00 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6  // ~.........|.....
    7ED0: 7C 00 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30  // |.......600.0000
    7EE0: 78 00 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76  // x.........v....v
    7EF0: 06 C6 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66  // ..|.....``|fffff
    7F00: E6 00 00 00 00 00 00 18 18 00 38 18 18 18 18 18  // ..........8.....
    7F10: 3C 00 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C  // <...............
    7F20: CC CC 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66  // ..x.....``fflxlf
    7F30: E6 00 00 00 00 00 00 18 18 18 18 18 18 18 18 18  // ................
    7F40: 1C 00 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6  // ..........l.....
    7F50: C6 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 66  // ...........fffff
    7F60: 66 00 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6  // f.........|.....
    7F70: 7C 00 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C  // |..........ffff|
    7F80: 60 60 F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C  // ``........v....|
    7F90: 0C 0C 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60  // ...........f````
    7FA0: F0 00 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6  // ..........|..|..
    7FB0: 7C 00 00 00 00 00 00 30 30 30 FC 30 30 30 30 36  // |......000.00006
    7FC0: 1C 00 00 00 00 00 00 00 00 00 CC CC CC CC CC CC  // ................
    7FD0: 76 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38  // v.............l8
    7FE0: 10 00 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE  // ................
    7FF0: 6C 00 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6  // l...........l8l.
    8000: C6 00 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76  // ...............v
    8010: 06 C6 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62  // ..|...........0b
    8020: FE 00 00 00 00 00 00 0E 18 18 18 70 18 18 18 18  // ...........p....
    8030: 0E 00 00 00 00 00 00 18 18 18 18 00 18 18 18 18  // ................
    8040: 18 00 00 00 00 00 00 70 18 18 18 0E 18 18 18 18  // .......p........
    8050: 70 00 00 00 00 00 00 76 DC 00 00 00 00 00 00 00  // p......v........
    8060: 00 00 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE  // ...........88ll.
    8070: 00 00 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18  // .......<f....f<.
    8080: 0C CC 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE  // ..8.............
    8090: 76 00 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6  // v.......0.|.....
    80A0: 7C 00 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC  // |.....0x..x.|...
    80B0: 76 00 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC  // v.........x.|...
    80C0: 76 00 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC  // v.....`0..x.|...
    80D0: 76 00 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC  // v.....8l8.x.|...
    80E0: 76 00 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18  // v........|....|.
    80F0: 0C 6C 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6  // .l8...0x..|.....
    8100: 7C 00 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6  // |.........|.....
    8110: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6  // |.....0...|.....
    8120: 7C 00 00 00 00 00 00 66 00 00 38 18 18 18 18 18  // |......f..8.....
    8130: 3C 00 00 00 00 00 18 3C 66 00 38 18 18 18 18 18  // <......<f.8.....
    8140: 3C 00 00 00 00 00 00 00 00 00 38 18 18 18 18 18  // <.........8.....
    8150: 3C 00 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6  // <.......8l......
    8160: C6 00 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6  // .....8l8.8l.....
    8170: C6 00 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60  // .......0..``|```
    8180: FE 00 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF  // .........f......
    8190: 76 00 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8  // v......~........
    81A0: DE 00 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6  // ......0x..|.....
    81B0: 7C 00 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6  // |.........|.....
    81C0: 7C 00 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6  // |.....0...|.....
    81D0: 7C 00 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE  // |.....0x........
    81E0: 76 00 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE  // v.....`0........
    81F0: 76 00 00 00 00 00 18 00 3C 18 18 18 18 18 18 18  // v.......<.......
    8200: 3C 00 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6  // <.......|.......
    8210: 7C 00 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6  // |...............
    8220: 7C 00 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18  // |........|....|.
    8230: 18 00 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6  // ......8l``.```f.
    8240: 6C 00 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18  // l.....ffff<.~.<.
    8250: 18 00 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E  // .......>cc0..cc>
    8260: 00 1C 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E  // ..........>c8.c>
    8270: 00 1C 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC  // ........0.x.|...
    8280: 76 00 00 00 00 00 0C 18 30 00 38 18 18 18 18 18  // v.......0.8.....
    8290: 3C 00 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6  // <.......0.|.....
    82A0: 7C 00 00 00 00 00 18 30 60 00 CC CC CC CC CC DC  // |......0`.......
    82B0: 76 00 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66  // v......v...fffff
    82C0: E6 00 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6  // ......v.........
    82D0: C6 00 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33  // ......!...3``gc3
    82E0: 1D 00 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66  // ......B<.;fff>.f
    82F0: 3C 00 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6  // <......00.000`..
    8300: 7C 00 00 00 00 00 00 00 00 00 00 00 7E 60 60 60  // |...........~```
    8310: 00 00 00 00 00 00 00 00 00 00 00 00 7E 06 06 06  // ............~...
    8320: 00 00 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36  // ......``bfl.0`.6
    8330: 0C 18 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36  // ..>...``bfl.6n.6
    8340: 7E 06 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C  // ~...........<<<<
    8350: 18 00 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00  // ..........6l.l6.
    8360: 00 00 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00  // ...........l6l..
    8370: 00 00 00 00 00 11 44 11 44 11 44 11 44 11 44 11  // ......D.D.D.D.D.
    8380: 44 11 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.D.U.U.U.U.U.
    8390: 55 AA 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.U.w.w.w.w.w.
    83A0: 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18 18  // w.w.w...........
    83B0: 18 18 18 18 18 18 18 18 18 18 18 18 F8 18 18 18  // ................
    83C0: 18 18 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    83D0: 18 18 18 18 18 36 36 36 36 36 36 36 F6 36 36 36  // .....6666666.666
    83E0: 36 36 36 36 36 00 00 00 00 00 00 00 FE 36 36 36  // 66666........666
    83F0: 36 36 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18  // 66666...........
    8400: 18 18 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36  // .....66666...666
    8410: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    8420: 36 36 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36  // 66666........666
    8430: 36 36 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00  // 6666666666......
    8440: 00 00 00 00 00 36 36 36 36 36 36 36 FE 00 00 00  // .....6666666....
    8450: 00 00 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00  // ................
    8460: 00 00 00 00 00 00 00 00 00 00 00 00 F8 18 18 18  // ................
    8470: 18 18 18 18 18 18 18 18 18 18 18 18 1F 00 00 00  // ................
    8480: 00 00 00 00 00 18 18 18 18 18 18 18 FF 00 00 00  // ................
    8490: 00 00 00 00 00 00 00 00 00 00 00 00 FF 18 18 18  // ................
    84A0: 18 18 18 18 18 18 18 18 18 18 18 18 1F 18 18 18  // ................
    84B0: 18 18 18 18 18 00 00 00 00 00 00 00 FF 00 00 00  // ................
    84C0: 00 00 00 00 00 18 18 18 18 18 18 18 FF 18 18 18  // ................
    84D0: 18 18 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18  // ................
    84E0: 18 18 18 18 18 36 36 36 36 36 36 36 37 36 36 36  // .....66666667666
    84F0: 36 36 36 36 36 36 36 36 36 36 37 30 3F 00 00 00  // 666666666670?...
    8500: 00 00 00 00 00 00 00 00 00 00 3F 30 37 36 36 36  // ..........?07666
    8510: 36 36 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00  // 6666666666......
    8520: 00 00 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36  // .............666
    8530: 36 36 36 36 36 36 36 36 36 36 37 30 37 36 36 36  // 6666666666707666
    8540: 36 36 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00  // 66666...........
    8550: 00 00 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36  // .....66666...666
    8560: 36 36 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00  // 66666...........
    8570: 00 00 00 00 00 36 36 36 36 36 36 36 FF 00 00 00  // .....6666666....
    8580: 00 00 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18  // ................
    8590: 18 18 18 18 18 00 00 00 00 00 00 00 FF 36 36 36  // .............666
    85A0: 36 36 36 36 36 36 36 36 36 36 36 36 3F 00 00 00  // 666666666666?...
    85B0: 00 00 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00  // ................
    85C0: 00 00 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    85D0: 18 18 18 18 18 00 00 00 00 00 00 00 3F 36 36 36  // ............?666
    85E0: 36 36 36 36 36 36 36 36 36 36 36 36 FF 36 36 36  // 666666666666.666
    85F0: 36 36 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18  // 66666...........
    8600: 18 18 18 18 18 18 18 18 18 18 18 18 F8 00 00 00  // ................
    8610: 00 00 00 00 00 00 00 00 00 00 00 00 1F 18 18 18  // ................
    8620: 18 18 18 18 18 FF FF FF FF FF FF FF FF FF FF FF  // ................
    8630: FF FF FF FF FF 00 00 00 00 00 00 00 00 FF FF FF  // ................
    8640: FF FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    8650: F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    8660: 0F 0F 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00  // ................
    8670: 00 00 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC  // .........v......
    8680: 76 00 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6  // v......x........
    8690: CC 00 00 00 00 00 00 FE 66 62 60 60 60 60 60 60  // ........fb``````
    86A0: 60 00 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C  // `..........lllll
    86B0: 6C 00 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6  // l........b0..0b.
    86C0: FE 00 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8  // ..........~.....
    86D0: 70 00 00 00 00 00 00 00 00 66 66 66 66 66 7C 60  // p........fffff|`
    86E0: C0 80 00 00 00 00 00 00 00 00 76 DC 18 18 18 18  // ..........v.....
    86F0: 18 00 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38  // ........88l..l88
    8700: FE 00 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C  // ........8l.....l
    8710: 38 00 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C  // 8......8l....lll
    8720: EE 00 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC  // .......>``<f....
    8730: 78 00 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00  // x.........~...~.
    8740: 00 00 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60  // .........|....|`
    8750: C0 00 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30  // .........0``|``0
    8760: 1C 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6  // .......|........
    8770: C6 00 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE  // ................
    8780: 00 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00  // ...........~....
    8790: 7E 00 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00  // ~......0.....0..
    87A0: 7E 00 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00  // ~........0`0....
    87B0: 7E 00 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18  // ~...............
    87C0: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 58  // ...............X
    87D0: 78 30 00 00 00 00 00 00 00 18 18 00 7E 00 18 18  // x0..........~...
    87E0: 00 00 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC  // ...........v..v.
    87F0: 00 00 00 00 00 00 00 78 CC CC 78 00 00 00 00 00  // .......x..x.....
    8800: 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00  // ................
    8810: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 00 00  // ................
    8820: 00 00 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78  // ...............x
    8830: 38 18 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00  // 8.......lllll...
    8840: 00 00 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00  // .......p..0`....
    8850: 00 00 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E  // ..........~~~~~~
    8860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    8870: 00 00 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24  // ...........$f.f$
    8880: 00 00 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30  // ....../........0
    8890: 60 C0 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB  // `......0..~.....
    88A0: C3 C3 C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF  // ...~....M.......
    88B0: DB DB C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18  // .........T......
    88C0: 18 18 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3  // .....<....V.....
    88D0: C3 C3 C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3  // ....f<.....W....
    88E0: C3 C3 DB DB DB DB FF 66 00 00 00 00 58 00 00 C3  // .......f....X...
    88F0: C3 C3 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00  // ..f<<f.......Y..
    8900: C3 C3 C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00  // ....f<...<....\.
    8910: 00 00 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D  // ....`0.........m
    8920: 00 00 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00  // .....f..........
    8930: 76 00 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00  // v.........f<....
    8940: 00 77 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00  // .w...........f..
    8950: 00 00 00 00 0D 78 C3 0B DB 74 03 E9 46 01 57 32  // .....x...t..F.W2
    8960: C0 B9 40 00 F3 AA 5F BB DA A5 26 89 1D 26 8C 4D  // ..@..._...&..&.M
    8970: 02 2E 8E 1E CF 2B 57 BE 49 04 B9 1E 00 83 C7 04  // .....+W.I.......
    8980: FC 8A 04 26 88 05 46 47 E2 F7 5F A0 84 04 FE C0  // ...&..FG.._.....
    8990: 26 88 45 22 A1 85 04 26 89 45 23 57 E8 D9 1B 5F  // &.E"...&.E#W..._
    89A0: 26 88 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC 05 74  // &.]%&.}&..I....t
    89B0: 05 80 FB 13 7F 1D 32 FF D1 E3 2E 8A 87 B2 A5 32  // ......2........2
    89C0: E4 0A C0 74 01 40 26 89 45 27 2E 8A 87 B3 A5 26  // ...t.@&.E'.....&
    89D0: 88 45 29 A1 85 04 8A 16 84 04 FE C2 F6 E2 B2 00  // .E).............
    89E0: 3D C8 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90  // =..~...=^.~...=.
    89F0: 01 7E 07 B2 03 3D E0 01 7E 00 26 88 55 2A 8A 26  // .~...=..~.&.U*.&
    8A00: 87 04 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0  // ....$...........
    8A10: 80 F4 10 A0 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0  // ......$.........
    8A20: 30 EE 42 EC 24 08 C0 E0 02 0A C4 0C 01 26 88 45  // 0.B.$........&.E
    8A30: 2D B0 03 26 88 45 31 E8 77 08 1E 06 32 D2 C4 1E  // -..&.E1.w...2...
    8A40: A8 04 8C C1 8C CE 3B CE 74 34 26 C5 77 04 8C D9  // ......;.t4&.w...
    8A50: 0B F1 74 03 80 CA 10 26 C5 77 0C 8C D9 0B F1 74  // ..t....&.w.....t
    8A60: 03 80 CA 08 26 C5 77 08 8C D9 0B F1 74 03 80 CA  // ....&.w.....t...
    8A70: 04 26 C5 77 10 8C D9 0B F1 74 03 80 CA 01 07 1F  // .&.w.....t......
    8A80: 26 88 55 32 B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC  // &.U2............
    8A90: 02 8A D4 8A F2 D0 EE 81 E2 04 04 25 03 03 0B C2  // ...........%....
    8AA0: 26 89 45 2B 8B EC C6 46 1A 1B C3 0A C0 74 0F FE  // &.E+...F.....t..
    8AB0: C8 74 36 FE C8 74 56 8B EC C6 46 1A 00 C3 B8 20  // .t6..tV...F.... 
    8AC0: 00 F6 C1 01 74 03 83 C0 60 F6 C1 02 74 03 83 C0  // ....t...`...t...
    8AD0: 3A F6 C1 04 74 03 05 03 03 83 C0 3F C1 E8 06 8B  // :...t......?....
    8AE0: EC 89 46 0E C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1  // ..F..F....... ..
    8AF0: 01 74 03 E8 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1  // .t.......t......
    8B00: 04 74 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6 C1 01  // .t.......F......
    8B10: 74 06 E8 16 15 E8 25 01 F6 C1 02 74 03 E8 85 01  // t.....%....t....
    8B20: F6 C1 04 74 03 E8 12 02 EB DC 8A C4 EE 42 EC AA  // ...t.........B..
    8B30: FE C4 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15 00 32  // ..J....k.......2
    8B40: E4 EC 87 EA 8A C4 EE 42 EC AA FE C4 4A 87 EA E2  // .......B....J...
    8B50: F0 EC 87 EA B0 20 EE C3 26 8A 05 88 04 47 46 E2  // ..... ..&....GF.
    8B60: F7 C3 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4  // ..&.%.G.........
    8B70: EE 26 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B  // .&..G........QW.
    8B80: C7 2B C3 26 89 07 8B F7 E8 0A 04 EC 26 88 44 01  // .+.&........&.D.
    8B90: 26 89 54 41 B2 CE EC 26 88 44 02 B2 CC EC 26 88  // &.TA...&.D....&.
    8BA0: 44 09 B2 CA EC 26 88 44 04 B2 C4 EC 26 88 04 83  // D....&.D....&...
    8BB0: C7 05 B9 04 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE  // ........p.&.....
    8BC0: 83 C7 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B FF 26  // ...&.TA2.....[.&
    8BD0: 8A 44 01 EE E8 5F FF B2 CE 32 E4 B9 09 00 E8 49  // .D..._...2.....I
    8BE0: FF 26 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B  // .&.D.._Y..`.....
    8BF0: C7 2B C3 26 89 47 02 51 57 2E 8E 1E CF 2B A0 10  // .+.&.G.QW....+..
    8C00: 04 24 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1  // .$0..I..........
    8C10: 07 F3 A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3  // ................
    8C20: A4 BE 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE  // ..t......|......
    8C30: 0C 01 B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26  // ......_Y..:....&
    8C40: 8B 3F 03 FB 8B F7 51 8B FE 83 C7 05 BA C4 03 B8  // .?....Q.........
    8C50: 00 01 EF B0 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A  // ...........G..&.
    8C60: 44 09 EE B2 C4 B8 00 03 EF 26 8A 04 EE 26 8B 54  // D........&...&.T
    8C70: 41 B8 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A 44 01  // A......2....&.D.
    8C80: EE 80 C2 06 26 8A 44 04 EE EC B1 15 32 E4 E8 DB  // ....&.D.....2...
    8C90: FE B0 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44  // .. ...2......&.D
    8CA0: 02 EE 59 9D C3 9C FA 26 8B 7F 02 03 FB 06 51 2E  // ..Y....&......Q.
    8CB0: 8E 1E CF 2B 26 8A 05 80 26 10 04 CF 08 06 10 04  // ...+&...&.......
    8CC0: 47 BE 49 04 B9 1E 00 E8 8E FE BE 84 04 B1 07 E8  // G.I.............
    8CD0: 86 FE BE A8 04 B1 04 E8 7E FE BE 14 00 B1 04 E8  // ........~.......
    8CE0: 76 FE BE 74 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8  // v..t....n..|....
    8CF0: 66 FE BE 0C 01 B1 04 E8 5E FE 59 07 9D C3 9C FA  // f.......^.Y.....
    8D00: 8B C7 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE  // ..+.&.G.......4.
    8D10: 42 EC 26 88 05 BA C8 03 EC 26 88 45 01 50 4A 4A  // B.&......&.E.PJJ
    8D20: EC 26 88 45 02 83 C7 03 B9 00 03 42 32 C0 EE 42  // .&.E.......B2..B
    8D30: 42 EC AA E2 FC 58 4A EE 9D C3 9C FA 26 8B 77 04  // B....XJ.....&.w.
    8D40: 03 F3 E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6  // ...l....4.&.....
    8D50: 03 26 8A 44 02 EE 56 42 42 83 C6 03 32 C0 EE 42  // .&.D..VBB...2..B
    8D60: B9 00 03 26 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44  // ...&...F..^..&.D
    8D70: 01 EE 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3  // ........$.......
    8D80: E8 A8 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4 EE EB  // ................
    8D90: 00 EB 00 B0 20 EE C3 50 8A E0 80 E4 80 80 26 87  // .... ..P......&.
    8DA0: 04 7F 08 26 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6  // ...&..$...<.~.&.
    8DB0: 47 33 01 75 17 3C 23 74 13 3C 32 74 0F 3C 33 74  // G3.u.<#t.<2t.<3t
    8DC0: 0B B4 03 26 F6 47 09 01 75 02 B4 07 88 26 49 04  // ...&.G..u....&I.
    8DD0: BA B4 03 80 0E 87 04 02 26 F6 47 09 01 74 07 B2  // ........&.G..t..
    8DE0: D4 80 26 87 04 FD 89 16 63 04 C7 06 4E 04 00 00  // ..&.....c...N...
    8DF0: C6 06 62 04 00 B9 08 00 BF 50 04 FC 06 1E 07 33  // ..b......P.....3
    8E00: C0 F3 AB 07 26 8A 07 32 E4 A3 4A 04 26 8A 47 01  // ....&..2..J.&.G.
    8E10: A2 84 04 26 8A 47 02 A3 85 04 26 8B 47 03 A3 4C  // ...&.G....&.G..L
    8E20: 04 26 8B 47 14 86 C4 A3 60 04 58 C3 52 32 E4 33  // .&.G....`.X.R2.3
    8E30: D2 B0 0D CD 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A  // .......)u.2.3...
    8E40: CD 17 5A C3 06 1E 60 2E 8E 1E CF 2B 2E 83 0E D9  // ..Z...`....+....
    8E50: 2B 00 75 6E 80 3E 00 05 01 74 67 C6 06 00 05 01  // +.un.>...tg.....
    8E60: 8A 1E 62 04 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E  // ..b.2.......P..>
    8E70: 62 04 50 32 F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A  // b.P2.....2.AQ..J
    8E80: 04 32 D2 E8 A6 FF F6 C4 29 75 3D 51 52 89 95 50  // .2......)u=QR..P
    8E90: 04 B4 08 E8 B0 D4 0A C0 75 02 B0 20 33 D2 32 E4  // ........u.. 3.2.
    8EA0: CD 17 F6 C4 29 75 1F 5A FE C2 59 E2 DE FE C6 59  // ....)u.Z..Y....Y
    8EB0: E2 CA E8 77 FF 32 C0 A2 00 05 58 89 85 50 04 E8  // ...w.2....X..P..
    8EC0: AF 03 61 1F 07 CF 5A 59 59 B0 FF EB EA 52 2A F5  // ..a...ZYY....R*.
    8ED0: 38 C6 7D 02 32 C0 2E 8E 06 D1 2B 5A C3 A0 85 04  // 8.}.2.....+Z....
    8EE0: F6 E3 8A F7 8B D8 8B CA BA C4 03 B8 02 0F EF B4  // ................
    8EF0: 02 E8 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD  // ..m...2.........
    8F00: 8A CA 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E 62 04  // ..Ku.2..W..S..b.
    8F10: 0B C0 75 04 0A DB 74 03 E8 35 03 5B 8B F8 2B D1  // ..u...t..5.[..+.
    8F20: 81 C2 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A  // ......2....2.+..
    8F30: DB 74 2A 2A C3 F6 26 85 04 8B C8 52 B4 01 E8 20  // .t**..&....R... 
    8F40: 00 B2 C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3  // .......Z........
    8F50: A4 03 F5 03 FD 48 75 F5 1F E8 81 FF C3 8A D8 EB  // .....Hu.........
    8F60: F8 BA CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3  // .......B.$....J.
    8F70: 9C FA EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E CF 2B  // ...B...J.......+
    8F80: 8B 16 63 04 80 C2 06 1F C3 1E 2E 8E 1E CF 2B 8B  // ..c...........+.
    8F90: 16 63 04 1F C3 50 BA CC 03 EC B2 D4 A8 01 75 02  // .c...P........u.
    8FA0: B2 B4 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E 1E CF  // ..X.............
    8FB0: 2B 80 3E 49 04 03 74 13 80 3E 49 04 02 74 0C 80  // +.>I..t..>I..t..
    8FC0: 3E 49 04 01 74 05 80 3E 49 04 00 1F C3 50 2E 8E  // >I..t..>I....P..
    8FD0: 06 D3 2B A0 10 04 24 30 3C 30 74 05 2E 8E 06 D5  // ..+...$0<0t.....
    8FE0: 2B 58 0B C0 74 03 E8 E1 01 03 06 4E 04 81 C2 01  // +X..t......N....
    8FF0: 01 2B D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6  // .+.2...J........
    9000: E3 D1 E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E 02 8A  // .......u...8.~..
    9010: DE C3 FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04  // ............:.J.
    9020: 74 06 06 1F E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A  // t..........@....
    9030: D8 8A C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F E8 01  // ..........+.....
    9040: 00 C3 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B EA E3  // ..S..*.2.2.+.+..
    9050: 0E 8A E1 8B CA F3 A5 03 F5 03 FD FE CC 75 F4 58  // .............u.X
    9060: B0 20 8A CA F3 AB 03 FD FE CB 75 F6 C3 53 8A C6  // . ........u..S..
    9070: 2A C3 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91  // *.t.......X.....
    9080: B0 20 F3 AB C3 8B D8 E8 2E 00 2E 8E 1E D5 2B 8A  // . ............+.
    9090: C3 22 DF D3 E3 A8 80 74 03 30 1C C3 F6 D7 8A 34  // .".....t.0.....4
    90A0: 22 F7 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E 1E D5  // "...............
    90B0: 2B 8A 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74  // +...."...(.....t
    90C0: 03 05 D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0  // ................
    90D0: F6 D1 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1  // ................
    90E0: 80 E1 07 B7 01 C3 FC 8A D8 2E 8E 06 D5 2B 8B C1  // .............+..
    90F0: E8 86 00 75 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8  // ...u......$.....
    9100: 2E 8E 06 D5 2B 8A C1 8A E6 E8 6D 00 75 02 8A DE  // ....+.....m.u...
    9110: F7 DD 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01 00 C3  // ..........+.....
    9120: 8A CE 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13  // ..*..,Q..VW.....
    9130: C9 F3 A4 8A CA 2B F1 2B F9 81 C6 00 20 81 C7 00  // .....+.+.... ...
    9140: 20 D1 E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59  //  ........_^....Y
    9150: E2 D4 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3  // ........W.......
    9160: AA 8A CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3  // ...+.... .......
    9170: AA 5F 03 FD FE CB 75 DE C3 E8 B0 00 81 C2 01 01  // ._....u.........
    9180: 2B D1 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59  // +.8.v.2.Q......Y
    9190: 32 ED BD 50 00 80 3E 49 04 06 74 04 D0 E2 D1 E0  // 2..P..>I..t.....
    91A0: 06 1F 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A  // .......P.....RS.
    91B0: DF 32 FF D1 E3 8B 87 50 04 E8 0E 00 50 D1 EB A1  // .2.....P....P...
    91C0: 4C 04 F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04  // L...[..[Z.R...J.
    91D0: F6 E4 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E  // ..2.....Z.......
    91E0: 8A A6 8A 91 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 8A  // ................
    91F0: 91 C3 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3  // ......03<?......
    9200: FC FF 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A  // ..&..........t..
    9210: D6 D0 EE C1 E0 02 75 F2 88 56 00 45 C3 8B 16 63  // ......u..V.E...c
    9220: 04 8A C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A  // ............R...
    9230: C4 F6 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A  // ..&J....2...Z.S.
    9240: DF 32 FF D1 E3 8B 87 50 04 D1 EB E8 02 00 5B C3  // .2.....P......[.
    9250: 52 8B D0 32 F6 52 8A C4 F6 26 85 04 F7 26 4A 04  // R..2.R...&...&J.
    9260: 5A 03 C2 0A DB 74 08 03 06 4C 04 FE CB 75 F8 5A  // Z....t...L...u.Z
    9270: C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03  // .R...J...2......
    9280: 06 4E 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2  // .N..........Z...
    9290: F7 26 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A  // .&J..........t..
    92A0: C7 32 E4 F7 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC  // .2..&L..........
    92B0: C3 E8 F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8  // ............ ...
    92C0: EF FF B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04  // ....2....>..&.}.
    92D0: 8C C5 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8  // .....S..........
    92E0: 8E FC 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E E8 7F  // ..........U.....
    92F0: FC 3C AA 74 0D B0 0F E8 76 FC 3C 55 74 04 32 C0  // .<.t....v.<Ut.2.
    9300: 5B C3 B0 0E 8A E7 EF FE C0 8A E3 EF B0 01 0A C0  // [...............
    9310: 5B C3 8A EE 8A 36 85 04 06 1F 0A DB 74 25 8A C5  // [....6......t%..
    9320: 2A C3 F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2  // *.....R2........
    9330: 2B D5 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8  // +.Q....+.+.Y..Z.
    9340: 05 00 C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A  // ................
    9350: E0 32 F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5 8B CB  // .2..........+...
    9360: F3 AB 2B FA 4E 75 F7 C3 2E 8E 1E CF 2B 89 0E 60  // ..+.Nu......+..`
    9370: 04 8A C5 24 60 A8 20 74 06 B9 00 1E E9 94 00 F6  // ...$`. t........
    9380: 06 87 04 01 0F 85 8B 00 80 3E 49 04 07 74 06 E8  // .........>I..t..
    9390: 19 FC 74 01 C3 F6 06 87 04 08 74 03 CD 42 C3 8A  // ..t.......t..B..
    93A0: 36 85 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A  // 6......8.~...td.
    93B0: E9 8A CE FE C9 EB 5C 38 D1 74 58 8A CE 80 FD 03  // ......\8.tX.....
    93C0: 7C 04 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E 44 8A  // |........I...~D.
    93D0: E1 2A E5 0A E4 75 0A 38 CA 74 38 FE CA 38 CA 74  // .*...u.8.t8..8.t
    93E0: 32 8A C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD  // 2....8.~....~...
    93F0: 02 7F C8 80 FC 03 7D BF 8A D6 FE CA 38 D1 74 13  // ......}.....8.t.
    9400: 8A CE FE C9 FE C9 8A E9 2A EC 80 FE 08 7F 04 FE  // ........*.......
    9410: C1 FE C5 B4 0A E8 05 FE C3 2E 8E 1E CF 2B A2 62  // .............+.b
    9420: 04 32 E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A  // .2....&L..N....z
    9430: FB 74 07 80 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC  // .t..>I..w.......
    9440: FD D1 E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E CF 2B  // .....P..'......+
    9450: 8A 26 49 04 E8 F8 AA 74 07 C7 06 50 04 00 00 C3  // .&I....t...P....
    9460: E8 48 FB 74 0B 80 FC 07 74 06 77 08 E8 77 FC C3  // .H.t....t.w..w..
    9470: E8 9F FB C3 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A  // .......|.t...N..
    9480: D8 8B C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7  // ........J.R.&...
    9490: E5 8B F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B  // .....Z.....0....
    94A0: C1 E8 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7  // ..g....R..J.....
    94B0: 26 85 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E  // &........Z.U....
    94C0: 1E CF 2B 8A 26 49 04 E8 E1 FA 74 0C 80 FC 07 74  // ..+.&I....t....t
    94D0: 07 77 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E FC C3  // .w@......S......
    94E0: E8 EA F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E  // ..............+>
    94F0: 4A 04 C1 E7 03 52 F7 26 85 04 F7 26 4A 04 C1 E0  // J....R.&...&J...
    9500: 03 8B F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8  // ...+.Z..J.......
    9510: 00 FE C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8  // ......|.t.......
    9520: 8A C1 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26  // .........R..J..&
    9530: 85 04 F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9  // ....+...+.Z.....
    9540: C3 2E 8E 1E CF 2B 2E 8E 06 D5 2B E8 5D FA 74 11  // .....+....+.].t.
    9550: 80 3E 49 04 07 7C 18 2E 8E 06 D3 2B 74 03 E9 B1  // .>I..|.....+t...
    9560: 00 E8 49 FC 8B D8 26 8B 07 8B EC 89 46 1A C3 A1  // ..I...&.....F...
    9570: 50 04 E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC 80 3E  // P.........+....>
    9580: 49 04 06 75 1F B9 04 00 26 8A 04 88 46 00 45 26  // I..u....&...F.E&
    9590: 8A 84 00 20 88 46 00 45 83 C6 50 E2 EB B8 00 02  // ... .F.E..P.....
    95A0: B2 80 EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6 00 20  // ..........V.... 
    95B0: E8 4F FC 81 EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C  // .O.........+..>.
    95C0: 01 32 F6 80 FB 0E 75 09 26 83 7D FE 10 75 02 B6  // .2....u.&.}..u..
    95D0: 80 16 1F 8B F5 8B CB F6 C6 80 74 01 47 56 57 F3  // ..........t.GVW.
    95E0: A6 5F 5E 74 23 FE C0 03 FB F6 C6 80 74 01 47 FE  // ._^t#.......t.G.
    95F0: CA 75 E2 FE CC 74 0F 2E 8E 1E CF 2B C4 3E 7C 00  // .u...t.....+.>|.
    9600: B0 80 B2 80 EB CB 32 C0 8B E5 03 E3 8B EC 89 46  // ......2........F
    9610: 1A C3 80 3E 49 04 13 7C 05 75 02 EB 5A C3 2E 8E  // ...>I..|.u..Z...
    9620: 06 D1 2B E8 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC  // ..+.........+...
    9630: B8 05 08 B9 05 00 BA CE 03 80 3E 49 04 0F 72 1A  // ..........>I..r.
    9640: F6 06 87 04 60 75 13 B4 0A F7 C6 01 00 75 02 B4  // ....`u.......u..
    9650: 05 B0 07 EF B8 05 18 B9 05 01 EF 51 8B CB 26 8A  // ...........Q..&.
    9660: 04 F6 D0 88 46 00 45 03 36 4A 04 E2 F1 58 EF B8  // ....F.E.6J...X..
    9670: 00 01 32 D2 E9 44 FF 2E 8E 06 D1 2B A1 50 04 8B  // ..2..D.....+.P..
    9680: D0 32 F6 52 8A C4 32 E4 F7 26 4A 04 F7 26 85 04  // .2.R..2..&J..&..
    9690: 5A 03 C2 8B F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E  // Z........+...S.>
    96A0: 4A 04 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4 26 8A  // J.O.........2.&.
    96B0: 04 D0 E4 0A C0 74 03 80 CC 01 46 E2 F1 88 66 00  // .....t....F...f.
    96C0: 45 03 F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC FE 33  // E..Ku.[...2....3
    96D0: ED EB 03 BD 01 00 2E 8E 1E CF 2B 2E 8E 06 D5 2B  // ..........+....+
    96E0: 8A 26 49 04 E8 C4 F8 74 0F 2E 8E 06 D3 2B 80 FC  // .&I....t.....+..
    96F0: 07 74 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF  // .t.|=.........2.
    9700: D1 E3 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03  // ....P....J...2..
    9710: C2 8B F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04 03 F8  // .......t....L...
    9720: FE CB 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2  // ..u.....u.....G.
    9730: FC C3 50 2E 8E 06 D5 2B A1 50 04 E8 EE FA 8B F8  // ..P....+.P......
    9740: A0 50 04 8A 26 4A 04 8B E8 58 A8 80 74 08 24 7F  // .P..&J...X..t.$.
    9750: C5 36 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0  // .6|....6....2...
    9760: 03 03 F0 80 FF 06 74 69 D1 E7 8A F3 B0 55 80 E3  // ......ti.....U..
    9770: 03 F6 E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6 80 75  // .........P.....u
    9780: 27 AC E8 55 FA 23 C3 AB AC E8 4E FA 23 C3 26 89  // '..U.#....N.#.&.
    9790: 85 FE 1F 83 C7 4E FE CA 75 E7 83 EE 08 81 EF 3E  // .....N..u......>
    97A0: 01 58 E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31  // .X.r........#.&1
    97B0: 05 AC E8 25 FA 23 C3 26 31 85 00 20 83 C7 50 FE  // ...%.#.&1.. ..P.
    97C0: CA 75 E5 83 EE 08 81 EF 3E 01 58 E8 49 00 E2 A9  // .u......>.X.I...
    97D0: C3 8B C5 50 B2 04 F6 C3 80 74 1F AC 26 30 05 AC  // ...P.....t..&0..
    97E0: 26 30 85 00 20 83 C7 50 FE CA 7F EF 83 EE 08 81  // &0.. ..P........
    97F0: EF 3F 01 58 E8 20 00 E2 DA C3 AC AA AC 26 88 85  // .?.X. .......&..
    9800: FF 1F 83 C7 4F FE CA 7F F1 83 EE 08 81 EF 3F 01  // ....O.........?.
    9810: 58 E8 03 00 E2 BD C3 FE C0 38 E0 72 06 32 C0 81  // X........8.r.2..
    9820: C7 F0 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA  // ............2...
    9830: 66 0F B6 06 51 04 F6 E2 66 0F B7 16 4A 04 83 FA  // f...Q...f...J...
    9840: 64 75 03 BA 68 00 83 FA 5A 75 03 BA 60 00 81 FA  // du..h...Zu..`...
    9850: AF 00 75 03 BA B0 00 52 F7 E2 66 0F B7 F8 66 0F  // ..u....R..f...f.
    9860: B6 06 50 04 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7  // ..P.f..f.....f..
    9870: 03 81 CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03  // .....f...Z..J...
    9880: A0 50 04 50 C5 06 0C 01 03 F0 2E 8E 06 D1 2B 58  // .P.P..........+X
    9890: 57 51 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A  // WQP.....;.......
    98A0: C7 D0 E4 73 02 8A C3 26 88 05 66 47 FE CD 75 EF  // ...s...&..fG..u.
    98B0: 66 03 FA E2 E2 9D 58 59 5F 83 C7 08 FE C0 38 E0  // f.....XY_.....8.
    98C0: 72 0E 51 32 C0 8B CD 49 03 FA 83 C7 08 E2 F9 59  // r.Q2...I.......Y
    98D0: 2B F5 E2 BC C3 06 52 33 C0 8E C0 66 C1 C7 10 8B  // +.....R3...f....
    98E0: C7 66 C1 C7 10 E8 67 A6 74 16 38 E0 74 12 0F B6  // .f....g.t.8.t...
    98F0: D0 E8 8B C9 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10  // ......f.....f...
    9900: 5A 07 C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F  // Z.....|.......b.
    9910: 84 11 FF E8 01 00 C3 80 FC 11 75 06 80 E3 80 80  // ..........u.....
    9920: CB 0F 50 53 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E  // ..PS..2.....P.[.
    9930: 8E 06 D1 2B E8 07 F9 8B F8 8B 2E 85 04 58 32 F6  // ...+.........X2.
    9940: 52 8B 36 4A 04 56 8A 26 85 04 C5 36 0C 01 80 FC  // R.6J.V.&...6....
    9950: 0E 75 09 83 7C FE 10 75 03 B4 10 46 F6 E4 03 F0  // .u..|..u...F....
    9960: B6 03 F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A 58 50  // .....um......ZXP
    9970: 52 4A 8A E0 57 51 51 57 8B CD 32 C0 AA 03 FA E2  // RJ..WQQW..2.....
    9980: FB 5F 47 FE C4 38 D4 76 0A 32 E4 8B CD 49 03 FA  // ._G..8.v.2...I..
    9990: 47 E2 FB 59 E2 E0 59 5F BA C4 03 B0 02 8A E3 EF  // G..Y..Y_........
    99A0: 5B 4B 5A 51 57 8B CD AC 26 8A 25 AA 03 FB E2 F7  // [KZQW...&.%.....
    99B0: 5F 47 2B F5 42 3B D3 76 0A 33 D2 8B CD 49 03 FB  // _G+.B;.v.3...I..
    99C0: 47 E2 FB 59 E2 DD BA CE 03 B8 03 00 EF B2 C4 B8  // G..Y............
    99D0: 02 0F EF C3 B2 CE B8 03 18 EF EB BC 2E 8E 1E CF  // ................
    99E0: 2B 80 3E 63 04 B4 74 0B BA CC 03 EC A8 01 75 04  // +.>c..t.......u.
    99F0: CD 42 C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F  // .B.......u......
    9A00: 80 26 66 04 E0 08 26 66 04 E8 2D 00 8A 1E 66 04  // .&f...&f..-...f.
    9A10: 80 E3 20 B1 05 D2 EB E8 91 F5 74 19 A0 66 04 24  // .. .......t..f.$
    9A20: DF 80 E3 01 74 02 0C 20 A2 66 04 24 10 0C 02 0A  // ....t.. .f.$....
    9A30: D8 E8 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB  // ..S...~..SP.....
    9A40: D0 E3 81 E3 10 07 0A DF E8 60 F5 74 0E B4 00 8A  // .........`.t....
    9A50: C3 E8 2C F3 0B ED 74 03 26 88 1D 8A C3 E8 0B 00  // ..,...t.&.......
    9A60: 0B ED 74 04 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E  // ..t.&.].X[......
    9A70: 1E CF 2B 80 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8  // ..+.>I.3........
    9A80: FE F2 C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03  // ....0...........
    9A90: 00 B4 01 8A C4 EE 8A C3 EE 0B ED 74 04 47 26 88  // ...........t.G&.
    9AA0: 1D FE C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E  // ......... ......
    9AB0: CF 2B 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07 77 06  // .+.&I....t....w.
    9AC0: 74 03 E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3 8A D8  // t........|.tL...
    9AD0: E8 BB F7 BA CE 03 B0 08 EF 2E 8E 1E D1 2B F6 C3  // .............+..
    9AE0: 80 75 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00 8A E3  // .u........%.....
    9AF0: EF 8A 25 B4 FF 88 25 EF B2 CE B8 08 FF EF C3 B8  // ..%...%.........
    9B00: 03 18 EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25  // ...........%...%
    9B10: EF B2 CE B8 03 00 EF EB E1 50 2E 8E 06 D1 2B A1  // .........P....+.
    9B20: 4A 04 C1 E0 03 F7 E2 03 C1 8B F8 58 26 88 05 C3  // J..........X&...
    9B30: 2E 8E 1E CF 2B 8A 26 49 04 E8 6F F4 74 0F 80 FC  // ....+.&I..o.t...
    9B40: 07 77 0B 74 08 E8 5F F5 8B EC 89 46 1A C3 80 FC  // .w.t.._....F....
    9B50: 13 7C 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E D1 2B  // .|.t)..5.......+
    9B60: BA CE 03 32 FF B8 04 03 EF D0 E7 8A 1D 22 D9 74  // ...2.........".t
    9B70: 03 80 CF 01 FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A  // ......}....~...J
    9B80: 04 C1 E0 03 F7 E2 03 C1 8B F8 2E 8E 1E D1 2B 8A  // ..............+.
    9B90: 05 8B EC 88 46 1A C3 2E 8E 1E CF 2B 8A 3E 62 04  // ....F......+.>b.
    9BA0: 8A CF D0 E1 32 ED BE 50 04 03 F1 8B 14 8A 0E 49  // ....2..P.......I
    9BB0: 04 3C 0D 76 4A 2E 8E 06 D5 2B E8 EE F3 75 33 8A  // .<.vJ....+...u3.
    9BC0: 1E 4A 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03  // .J..............
    9BD0: 0E 4E 04 8B F9 8A C7 AA D1 E9 41 FE C2 38 DA 73  // .N........A..8.s
    9BE0: 59 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0  // Y....c..........
    9BF0: EF C3 2E 8E 06 D3 2B 80 F9 07 74 C3 E9 83 00 75  // ......+...t....u
    9C00: 04 32 D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9  // .2...<.u.:6..u..
    9C10: 93 00 FE C6 89 14 E8 92 F3 75 05 80 F9 07 7F 05  // .........u......
    9C20: 8B C2 E8 4C F6 C3 3C 07 75 04 E8 11 92 C3 3C 08  // ...L..<.u.....<.
    9C30: 75 83 0A D2 74 DE FE CA EB DA 32 FF 32 D2 2B CB  // u...t.....2.2.+.
    9C40: 3A 36 84 04 74 06 FE C6 03 CB EB 95 89 14 8B 16  // :6..t...........
    9C50: 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB  // c...........+.+.
    9C60: 26 8A 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0  // &.e.P.>N........
    9C70: 84 04 F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3  // ............X. .
    9C80: AB C3 B9 01 00 B4 0A E8 BC C6 FE C2 3A 16 4A 04  // ............:.J.
    9C90: 74 03 89 14 C3 32 FF 32 D2 89 14 3A 36 84 04 74  // t....2.2...:6..t
    9CA0: 2E FE C6 EB ED 89 14 2E 8E 06 D5 2B E8 FC F2 74  // ...........+...t
    9CB0: 0E 2E 8E 06 D3 2B 80 F9 07 74 04 32 FF EB 10 8B  // .....+...t.2....
    9CC0: C2 E8 AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33  // ........O..J...3
    9CD0: C9 8A 36 84 04 8A 16 4A 04 FE CA B0 01 E9 70 F7  // ..6....J......p.
    9CE0: 2E 8E 1E CF 2B F6 06 87 04 08 74 03 CD 42 C3 E8  // ....+.....t..B..
    9CF0: 76 F6 8B EC C6 46 1B 00 C3 2E 8E 1E CF 2B 8A DF  // v....F.......+..
    9D00: 32 FF D1 E3 89 97 50 04 D0 EB 38 1E 62 04 75 05  // 2.....P...8.b.u.
    9D10: 8B C2 E8 5C F5 C3 2E 8E 1E CF 2B 8A DF 32 FF D1  // ...\......+..2..
    9D20: E3 8B 97 50 04 8B 0E 60 04 8B EC 89 4E 16 89 56  // ...P...`....N..V
    9D30: 12 C3 2E 8E 1E CF 2B A0 87 04 24 80 0A 06 49 04  // ......+...$...I.
    9D40: 8A 26 4A 04 F6 06 87 04 08 75 2D E8 5D F2 74 07  // .&J......u-.].t.
    9D50: 80 3E 49 04 07 7F 21 51 8A CC 8A 2E 84 04 BE 23  // .>I...!Q.......#
    9D60: 9D 81 FE 2C 9D 74 10 2E 3B 0C 74 05 83 C6 03 EB  // ...,.t..;.t.....
    9D70: F0 24 80 2E 0A 44 02 59 8A 3E 62 04 8B EC 89 46  // .$...D.Y.>b....F
    9D80: 1A 89 5E 0E 89 4E 16 89 56 12 C3 84 18 23 84 2B  // ..^..N..V....#.+
    9D90: 33 84 2A 32 2E 8E 1E CF 2B 3C 04 7F 1B 50 52 BA  // 3.*2....+<...PR.
    9DA0: CC 03 EC A8 01 5A 58 74 08 80 3E 63 04 D4 74 08  // .....ZXt..>c..t.
    9DB0: C3 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8  // ..>c..u.<.s.2...
    9DC0: D1 E5 2E FF A6 5F 9D 97 9D B7 9D C9 9D FE 9D 48  // ....._.........H
    9DD0: 9D 48 9D 48 9D 23 9E 3B 9E 3F 9E 48 9D 48 9D 48  // .H.H.#.;.?.H.H.H
    9DE0: 9D 48 9D 48 9D 48 9D 6D 9E 48 9D 71 9E 8C 9E 48  // .H.H.H.m.H.q...H
    9DF0: 9D CB 9E 48 9D D9 9E F4 9E FB 9E 07 9F 2B 9F 80  // ...H.........+..
    9E00: 3E 49 04 13 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF  // >I..t.........p.
    9E10: 0B ED 74 07 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8  // ..t...2.&.......
    9E20: A6 F4 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D 11 EB  // .....D...t.&.}..
    9E30: EA 80 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B ED 74  // ..>I..t........t
    9E40: 07 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9  // .............2..
    9E50: 10 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4  // ................
    9E60: AC E8 07 FC EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0  // .........w..C...
    9E70: B0 30 E8 FB F0 24 F7 80 26 65 04 DF 80 FB 00 74  // .0...$..&e.....t
    9E80: 07 0C 08 80 0E 65 04 20 EE EB 90 E8 9D 01 8A C3  // .....e. ........
    9E90: B2 C0 E8 DB F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F  // ......... ....N.
    9EA0: E9 78 FF B3 11 EB E4 8B FA E8 05 F4 B9 10 00 32  // .x.............2
    9EB0: E4 B2 C0 8A C4 9C FA EE 42 EC 26 88 05 FE C4 4A  // ........B.&....J
    9EC0: EE 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26 88 05  // ..G.......B..&..
    9ED0: E8 E3 F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A  // ....Z......Q..&.
    9EE0: 35 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7 03 43  // 5&.m.&.M.......C
    9EF0: 59 E2 E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8  // Y.....u.......0.
    9F00: 6E F0 24 7F F6 C7 01 74 02 0C 80 B4 30 E8 70 EE  // n.$....t....0.p.
    9F10: EB 1D FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0  // ....u.......0.P.
    9F20: EE A8 80 75 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8  // ...u.....4...Q..
    9F30: 7F F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16 88 76 13  // ...........N..v.
    9F40: C3 8B FA 51 8B C3 E8 C3 00 26 88 35 26 88 6D 01  // ...Q.....&.5&.m.
    9F50: 26 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A  // &.M....CY.......
    9F60: C3 EE C3 BA C6 03 EC 32 E4 8B EC 89 46 0E C3 E8  // .......2....F...
    9F70: 3F F3 B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF  // ?....4.......0..
    9F80: EF B3 01 A8 80 75 05 B3 00 C0 EF 02 8B EC 89 5E  // .....u.........^
    9F90: 0E EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52  // ...Q...s..*....R
    9FA0: 00 43 59 E2 EE C3 F6 06 89 04 02 74 03 E8 16 00  // .CY........t....
    9FB0: 8A C3 E8 39 00 C3 F6 06 89 04 02 74 03 E8 06 00  // ...9.......t....
    9FC0: 8A C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5  // ......P....P.;..
    9FD0: 50 B0 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6 F1 80  // P....Y..Y...d...
    9FE0: FC 32 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3 52 E8  // .2|.........X.R.
    9FF0: 39 00 5A 53 8B DA BA C8 03 9C FA EE 42 8A C7 EE  // 9.ZS........B...
    A000: 8A C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA  // .......[....S...
    A010: C7 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB  // ...BB...........
    A020: 00 EB 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2  // .........[.PQ...
    A030: B9 FF 7F EC A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E  // ......u...YX....
    A040: CF 2B 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06  // .+..$...........
    A050: 7F 18 2E FF A5 EF 9F F7 9F 0C A0 AA A0 06 A1 3C  // ...............<
    A060: 03 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03  // .t.<............
    A070: 8A E3 EF C3 3C 04 77 F2 50 53 50 52 8B 16 63 04  // ....<.w.PSPR..c.
    A080: B0 07 E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40 74 03  // .............@t.
    A090: 80 CC 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF  // ........@.......
    A0A0: EE A8 80 74 04 D1 2E 85 04 A1 85 04 8B D0 3D F4  // ...t..........=.
    A0B0: 01 73 1B BA E0 01 3D C2 01 73 13 BA 90 01 3D 7C  // .s....=..s....=|
    A0C0: 01 73 0B BA 5E 01 3D 4A 01 73 03 BA C8 00 89 16  // .s..^.=J.s......
    A0D0: 85 04 5A 58 C6 06 84 04 FF E8 5D 01 5B 58 8A DF  // ..ZX......].[X..
    A0E0: 32 FF 0A C0 74 0E B3 0E 3C 01 74 08 B3 08 3C 02  // 2...t...<.t...<.
    A0F0: 74 02 B3 10 8A CB 8A E9 81 E9 01 02 80 F9 08 7E  // t..............~
    A100: 04 81 E9 01 01 87 1E 85 04 53 E8 5B F2 5B E8 85  // .........S.[.[..
    A110: 02 C3 0A C0 74 11 FE C8 74 1A FE C8 74 38 FE C8  // ....t...t...t8..
    A120: 74 3C FE C8 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3  // t<..t@...|...~..
    A130: 8C C8 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A 97 EA  // ........t.2.....
    A140: A0 89 0E 85 04 88 16 84 04 89 2E 0C 01 8C 06 0E  // ................
    A150: 01 C3 00 0D 18 2A E8 09 03 B9 0E 00 EB D6 BD FA  // .....*..........
    A160: 6F B9 08 00 EB CA BD 0D 78 B9 10 00 EB C2 0A C0  // o.......x.......
    A170: 75 BD 8B 0E 85 04 8A 16 84 04 80 FF 07 77 35 80  // u............w5.
    A180: FF 01 77 10 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E  // ..w...u...|..&..
    A190: 0C 01 EB 20 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E  // ... ...u........
    A1A0: EC 88 EB 10 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E  // ........2.......
    A1B0: 8B AF 5D A1 8B C5 8B EC 89 4E 16 89 56 12 89 46  // ..]......N..V..F
    A1C0: 0A 8C 46 1E C3 0D 78 FA 6F FA 73 FA 77 0D 78 0D  // ..F...x.o.s.w.x.
    A1D0: 88 53 06 8A 26 49 04 E8 C7 C3 26 8A 47 02 26 8A  // .S..&I....&.G.&.
    A1E0: 67 33 F6 C4 01 74 22 BD 0D 78 3C 10 7D 0E E8 71  // g3...t"..x<.}..q
    A1F0: 02 8C 06 0E 01 3C 0E 7D 07 BD FA 6F 8C 0E 0E 01  // .....<.}...o....
    A200: 89 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D 13 B4  // ........-..<.}..
    A210: 81 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05 80 CC 80  // .<.t.....<.t....
    A220: EB 0A 26 F6 47 05 01 74 03 80 E4 7F 86 C4 32 DB  // ..&.G..t......2.
    A230: E8 06 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA CE 03  // .......[........
    A240: EC B8 05 00 EF B8 06 04 EF B2 C4 EC B8 02 04 EF  // ................
    A250: B8 04 07 EF 8B D6 8B C7 50 24 7F 0A C0 74 22 0E  // ........P$...t".
    A260: 07 33 D2 B9 00 01 3C 04 75 07 B7 10 BD 0D 78 EB  // .3....<.u.....x.
    A270: 10 FE C8 75 07 B7 0E E8 E8 01 EB 05 B7 08 BD FA  // ...u............
    A280: 6F E8 2D 00 58 A8 80 74 00 BA C4 03 B8 02 03 EF  // o.-.X..t........
    A290: B8 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A  // ............u...
    A2A0: B2 CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF  // ..P.X....2......
    A2B0: C3 FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE  // ....u.....u.&.~.
    A2C0: 10 75 03 80 CD 80 1E 06 1F 2E 8E 06 D1 2B 8B FA  // .u...........+..
    A2D0: C1 E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74  // ....@S.....[...t
    A2E0: 02 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86  // .. .........(2..
    A2F0: FB 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB  // .2.Q...t.F......
    A300: 20 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01  //  t.. .+...Y...t.
    A310: 46 FE C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E  // F..u....&I.P.W.>
    A320: A8 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7  // ..&.}.....t0....
    A330: 07 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B  // .&..<.t$8.t.G...
    A340: FD 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04  // .&.......&.E....
    A350: 26 C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3  // &.}..>......_.X.
    A360: 26 F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08  // &.G3.t......&._.
    A370: 8C C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15  // ....t....&..<.t.
    A380: 47 38 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04  // G8.I.u.&..2.....
    A390: 8B D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC  // ........c..&....
    A3A0: 80 E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24  // ........t....B.$
    A3B0: E0 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D  // ....J...B.$.....
    A3C0: 8A C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75  // ...........>...u
    A3D0: 07 A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1  // .............t..
    A3E0: E0 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26  // .H......c...J..&
    A3F0: 84 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A  // ............L...
    A400: 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5  // &I.P.W.>..&.}...
    A410: 0B EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E  // ..tJ.....&..<.t>
    A420: 38 E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01  // 8.t.G....&.=&.].
    A430: 26 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02  // &.M.&.U.&.E.<.t.
    A440: FE C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58  // ..P......&.....X
    A450: A2 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07  // ...&.}...2...._.
    A460: 58 C3 50 53 51 52 2E A1 D9 2B 0B C0 74 09 2E 8B  // X.PSQR...+..t...
    A470: 2E EC 88 0E 07 EB 08 B8 30 11 B7 02 E8 C7 BE 5A  // ........0......Z
    A480: 59 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E CF  // Y[X.<.|....S....
    A490: 2B 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B  // +..2.......P..5[
    A4A0: 89 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F  // ..V..QS&.F.E<...
    A4B0: 75 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 7D  // u.2..@<.t2<.u..}
    A4C0: 89 EB 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7  // ..b<.u...tZ...'.
    A4D0: C6 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8  // ...t.&.^.E......
    A4E0: 64 BE FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36  // d...:.J.r.2...:6
    A4F0: 84 04 73 06 FE C6 89 15 EB 2B 50 E8 AD EA 75 08  // ..s......+P...u.
    A500: B8 00 08 E8 40 BE EB 09 80 3E 49 04 07 74 F1 32  // ....@....>I..t.2
    A510: E4 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E  // ..>b.S..U.%.][.>
    A520: 62 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02  // b.X..[Y..Z....u.
    A530: 89 15 8B 05 3A 3E 62 04 75 03 E8 34 ED C3 E9 64  // ....:>b.u..4...d
    A540: FF 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06  // .3..6....J......
    A550: E8 F3 BD C3 2E 8E 1E CF 2B 0A C0 75 0D E8 18 00  // ........+..u....
    A560: 8B EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41  // ...^..F...<.u..A
    A570: 00 8B EC C6 46 1A 1A C3 A0 8A 04 BF EA A5 2E 3A  // ....F..........:
    A580: 05 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D  // .r.....2.......]
    A590: 04 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04  // ...t...u........
    A5A0: 24 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74  // $0<0t....u.....t
    A5B0: E9 C3 BF EA A5 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D  // ........2.....;.
    A5C0: 74 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8  // t....;.t......8.
    A5D0: 7E EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02  // ~...............
    A5E0: 74 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00  // t..........t....
    A5F0: BA B4 03 E8 DF EC 74 21 B7 01 E8 8C E9 80 FA D4  // ......t!........
    A600: 74 17 86 FB C3 BA D4 03 E8 CA EC 74 0C B7 02 E8  // t..........t....
    A610: 77 E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08  // w....t..........
    A620: 0F 08 03 01 03 01 01 01 00 08 01 01 01 01 01 01  // ................
    A630: 01 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01  // ................
    A640: FF 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00  // ................
    A650: 3F 00 10 01 08 00 00 00 00 01 00 02 02 01 00 04  // ?...............
    A660: 04 01 00 05 02 05 00 06 01 06 05 06 00 08 01 08  // ................
    A670: 00 07 02 07 06 07 CA 00 34 00 90 00 96 00 00 00  // ........4.......
    A680: 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF  // ...._W..PfR.....
    A690: 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA  // .........f....f.
    A6A0: FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03  // ...2.f..fZX.f.O.
    A6B0: 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF  // fRfVSWP..uD.....
    A6C0: 66 33 F6 66 BB 53 00 E8 48 00 00 00 C1 E8 10 F6  // f3.f.S..H.......
    A6D0: C4 40 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66  // .@u+f....f..f..f
    A6E0: 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 30 00 00 00  // @...f..f....0...
    A6F0: 66 BB 12 00 E8 27 00 00 00 66 58 32 E4 66 50 58  // f....'...fX2.fPX
    A700: 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 C3 90 66 B8  // _[f^fZ..f.O...f.
    A710: 4F 03 C3 90 66 52 E8 11 00 00 00 ED 66 5A C3 90  // O...fR......fZ..
    A720: 66 52 E8 05 00 00 00 EF 66 5A C3 90 66 8B D7 50  // fR......fZ..f..P
    A730: 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF 66 83 C2 04  // 3.f..f......f...
    A740: 58 C3 F2 4E E5 4E E5 4E E5 4E D0 4E D0 4E D0 4E  // X..N.N.N.N.N.N.N
    A750: D0 4E 12 4B 89 4B B3 4B F4 4C F3 4C F3 4C 39 4D  // .N.K.K.K.L.L.L9M
    A760: 9E 4D CE 4D 8B 4E B4 4E B4 4E 2B 4D 1E 4D 1E 4D  // .M.M.N.N.N+M.M.M
    A770: 1E 4D 1E 4D 1E 4D 39 4D 9E 4D CE 4D 8B 4E B9 4E  // .M.M.M9M.M.M.N.N
    A780: FF 4E B4 4E B4 4E FF FF FF FF FF FF 00 00 FF FF  // .N.N.N..........
    A790: 00 00 FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    A7A0: 00 00 FF 00 00 00 00 00 08 10 00 08 10 18 00 08  // ................
    A7B0: 10 18 16 49 01 16 49 02 24 5D 03 04 5D 03 3B 4A  // ...I..I.$]..].;J
    A7C0: 03 EF 49 03 17 49 04 30 49 04 40 49 04 16 49 03  // ..I..I.0I.@I..I.
    A7D0: 00 00 00 00 C3 50 00 02 C3 50 01 02 C3 50 02 02  // .....P...P...P..
    A7E0: C3 50 03 02 C3 50 04 02 C3 50 05 02 BD 52 00 02  // .P...P...P...R..
    A7F0: BD 52 01 02 BD 52 02 02 BD 52 03 02 BD 52 04 02  // .R...R...R...R..
    A800: BD 52 05 02 F2 52 00 02 F2 52 01 02 F2 52 02 02  // .R...R...R...R..
    A810: F2 52 03 02 F2 52 04 02 F2 52 05 02 2D 55 00 02  // .R...R...R..-U..
    A820: 2D 55 01 02 2D 55 02 02 2D 55 03 02 2D 55 04 02  // -U..-U..-U..-U..
    A830: 2D 55 05 02 2D 55 00 02 2D 55 01 02 2D 55 02 02  // -U..-U..-U..-U..
    A840: 2D 55 03 02 2D 55 04 02 2D 55 05 02 F4 53 00 02  // -U..-U..-U...S..
    A850: F4 53 01 02 F4 53 02 02 F4 53 03 02 F4 53 04 02  // .S...S...S...S..
    A860: F4 53 05 02 30 54 00 02 30 54 01 02 30 54 02 02  // .S..0T..0T..0T..
    A870: 30 54 03 02 30 54 04 02 30 54 05 02 A1 53 00 02  // 0T..0T..0T...S..
    A880: A1 53 01 02 A1 53 02 02 A1 53 03 02 A1 53 04 02  // .S...S...S...S..
    A890: A1 53 05 02 D5 53 00 02 D5 53 01 02 D5 53 02 02  // .S...S...S...S..
    A8A0: D5 53 03 02 D5 53 04 02 D5 53 05 02 85 57 00 00  // .S...S...S...W..
    A8B0: B8 57 01 00 B8 57 02 00 A5 57 00 00 93 56 00 02  // .W...W...W...V..
    A8C0: 8C 54 00 02 8C 54 01 02 8C 54 02 02 8C 54 03 02  // .T...T...T...T..
    A8D0: 8C 54 04 02 8C 54 05 02 AB 56 00 02 00 59 05 00  // .T...T...V...Y..
    A8E0: 00 59 01 00 00 59 00 00 00 59 02 00 41 59 00 00  // .Y...Y...Y..AY..
    A8F0: 41 59 02 00 86 59 00 00 16 56 00 02 16 56 01 02  // AY...Y...V...V..
    A900: 16 56 02 02 16 56 03 02 16 56 04 02 16 56 05 02  // .V...V...V...V..
    A910: D2 57 00 00 FA 57 00 00 7B 58 00 00 F6 58 00 00  // .W...W..{X...X..
    A920: DA 54 00 02 DA 54 01 02 DA 54 02 02 DA 54 03 02  // .T...T...T...T..
    A930: DA 54 04 02 DA 54 05 02 F5 58 00 01 F5 58 00 01  // .T...T...X...X..
    A940: F9 51 00 02 F9 51 01 02 F9 51 02 02 F9 51 03 02  // .Q...Q...Q...Q..
    A950: F9 51 04 02 F9 51 05 02 1A 58 00 00 F6 58 00 00  // .Q...Q...X...X..
    A960: F6 58 00 00 F6 58 00 00 2B 57 00 00 1D 53 00 02  // .X...X..+W...S..
    A970: 1D 53 01 02 1D 53 02 02 1D 53 03 02 1D 53 04 02  // .S...S...S...S..
    A980: 1D 53 05 02 4C 53 00 02 4C 53 01 02 4C 53 02 02  // .S..LS..LS..LS..
    A990: 4C 53 03 02 4C 53 04 02 4C 53 05 02 82 53 00 02  // LS..LS..LS...S..
    A9A0: 82 53 01 02 82 53 02 02 82 53 03 02 82 53 04 02  // .S...S...S...S..
    A9B0: 82 53 05 02 3D 58 00 00 60 58 00 00 1E 54 01 02  // .S..=X..`X...T..
    A9C0: 1E 54 02 02 7A 54 01 02 7A 54 02 02 A6 00 02 01  // .T..zT..zT......
    A9D0: 0A AA 00 00 00 00 00 00 00 00 00 00 6E AA 00 00  // ............n...
    A9E0: 00 00 00 00 00 00 00 00 00 00 F4 AF 00 00 00 00  // ................
    A9F0: 00 00 00 00 00 00 00 00 00 00 00 00 BA AA 00 00  // ................
    AA00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA20: 00 00 12 B0 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA30: 00 00 00 00 00 00 00 00 00 00 E2 AA 00 00 00 00  // ................
    AA40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA50: 00 00 00 00 D2 AB 00 00 00 00 00 00 00 00 00 00  // ................
    AA60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    AA70: 00 00 63 00 02 01 00 00 37 00 00 4B E5 00 04 49  // ..c.....7..K...I
    AA80: 37 00 56 00 40 01 05 00 00 61 60 01 00 3C E5 01  // 7.V.@....a`..<..
    AA90: 00 80 44 37 00 51 14 2D 05 40 01 00 00 00 3E 05  // ..D7.Q.-.@....>.
    AAA0: 40 20 A1 07 00 45 13 00 5B 52 0D 03 00 41 E3 0D  // @ ...E..[R...A..
    AAB0: 3E 05 41 00 00 00 00 44 62 00 33 05 41 01 00 00  // >.A....Db.3.A...
    AAC0: 00 1B 05 41 0B 01 02 06 00 41 0D 25 1F 0E 03 0D  // ...A.....A.%....
    AAD0: 65 53 00 02 5B 00 4B 00 01 01 00 00 37 00 00 42  // eS..[.K.....7..B
    AAE0: 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02  // !.c...c.9.c.?.c.
    AAF0: 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00  // E.ZZ[..@....-.@.
    AB00: 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02  // ..@.....@.....[.
    AB10: 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D  // ....[.....[.....
    AB20: 5B 00 28 00 02 01 00 00 37 00 00 01 05 00 00 6C  // [.(.....7......l
    AB30: A8 01 00 02 00 00 01 00 02 01 01 00 01 05 00 00  // ................
    AB40: 6D A8 01 00 02 00 02 01 00 5B F0 00 03 03 0C 00  // m........[......
    AB50: 37 00 00 66 04 03 04 46 28 00 3E 05 46 00 00 00  // 7..f...F(.>.F...
    AB60: 00 49 3C 00 03 01 00 00 03 01 01 01 03 01 02 02  // .I<.............
    AB70: 52 16 03 01 46 00 1B 05 46 08 02 02 00 00 02 02  // R...F...F.......
    AB80: 01 01 02 02 02 02 3D 65 02 00 49 47 00 2C 22 02  // ......=e..IG.,".
    AB90: 46 3D E5 02 00 49 52 00 2C A2 02 46 3D 65 02 02  // F=...IR.,..F=e..
    ABA0: 49 6D 00 01 05 00 00 E5 68 01 00 01 01 01 00 00  // Im......h.......
    ABB0: 02 05 00 98 A3 05 00 03 01 40 03 09 05 40 00 00  // .........@...@..
    ABC0: 00 FC 3E 05 40 00 00 00 D0 49 90 00 01 05 63 C0  // ..>.@....I....c.
    ABD0: 00 00 00 40 55 20 02 43 94 00 54 00 63 C0 01 01  // ...@U .C..T.c...
    ABE0: 64 C0 00 56 00 40 03 21 40 02 01 02 65 C0 40 01  // d..V.@.!@...e.@.
    ABF0: 01 66 C0 01 03 31 40 02 01 02 67 C0 40 01 01 E8  // .f...1@...g.@...
    AC00: C0 03 3D 65 02 01 44 E7 00 3D E5 02 01 44 E7 00  // ..=e..D..=...D..
    AC10: 51 02 56 00 40 4A E5 A0 21 80 44 EF 00 51 14 2D  // Q.V.@J..!.D..Q.-
    AC20: 05 40 01 00 00 00 3E 05 40 A0 86 01 00 45 CB 00  // .@....>.@....E..
    AC30: 5B 4A E5 A0 21 80 49 E7 00 5B 21 04 01 01 04 00  // [J..!.I..[!.....
    AC40: 37 00 00 3D 25 00 00 44 F5 00 4A 05 A3 36 02 00  // 7..=%..D..J..6..
    AC50: 00 00 44 20 04 03 05 00 32 00 00 00 03 00 40 97  // ..D ....2.....@.
    AC60: 36 03 05 46 00 31 00 00 04 02 04 40 03 03 41 05  // 6..F.1.....@..A.
    AC70: 3E 02 41 40 48 4C 00 33 02 40 41 03 03 41 06 33  // >.A@HL.3.@A..A.3
    AC80: 02 41 40 43 50 00 33 02 41 40 3E 05 41 00 00 00  // .A@CP.3.A@>.A...
    AC90: 00 44 70 00 33 05 00 01 00 00 00 3E 05 00 00 00  // .Dp.3......>....
    ACA0: 00 00 44 20 04 51 14 43 22 00 03 03 40 05 03 02  // ..D .Q.C"...@...
    ACB0: 41 40 2D 05 40 00 00 00 00 03 02 46 40 04 01 00  // A@-.@......F@...
    ACC0: 00 04 01 01 01 04 01 02 02 04 01 03 03 04 01 04  // ................
    ACD0: 04 04 01 05 05 04 01 06 06 2D 05 41 40 00 00 00  // .........-.A@...
    ACE0: 3E 05 41 00 20 00 00 45 B7 00 27 05 41 00 20 00  // >.A. ..E..'.A. .
    ACF0: 00 03 05 46 00 31 00 00 04 02 05 41 01 02 96 36  // ...F.1.....A...6
    AD00: 41 03 05 00 80 1A 06 00 03 00 41 97 36 03 00 40  // A.........A.6..@
    AD10: 96 36 3E 02 41 40 44 20 04 33 05 00 01 00 00 00  // .6>.A@D .3......
    AD20: 3E 05 00 00 00 00 00 44 20 04 51 14 43 CE 00 3D  // >......D .Q.C..=
    AD30: 65 00 01 44 32 01 4A 05 B6 36 00 00 01 00 49 32  // e..D2.J..6....I2
    AD40: 01 4A 05 B6 36 00 00 02 00 44 32 01 01 05 00 00  // .J..6....D2.....
    AD50: 61 60 01 00 01 05 01 00 00 00 00 08 01 05 00 00  // a`..............
    AD60: 61 60 01 00 3C E5 01 00 80 49 2A 01 4A 05 B6 36  // a`..<....I*.J..6
    AD70: 00 00 02 00 49 D1 01 01 05 B8 36 00 00 02 10 03  // ....I.....6.....
    AD80: 05 41 0A 00 00 00 33 05 41 01 00 00 00 3E 05 41  // .A....3.A....>.A
    AD90: 00 00 00 00 44 8F 01 51 0A 3C 05 B8 36 00 00 02  // ....D..Q.<..6...
    ADA0: 00 49 4C 01 03 05 41 04 00 00 00 51 0A 33 05 41  // .IL...A....Q.3.A
    ADB0: 01 00 00 00 3E 05 41 00 00 00 00 44 8F 01 3C 05  // ....>.A....D..<.
    ADC0: AA 36 AD DE AD DE 49 71 01 01 05 B8 36 00 00 00  // .6....Iq....6...
    ADD0: 00 0D 05 B6 36 00 00 02 00 07 05 B6 36 FF FF FE  // ....6.......6...
    ADE0: FF 0D 05 01 38 00 01 00 00 51 0A 01 05 97 36 00  // ....8....Q....6.
    ADF0: 00 00 00 01 05 96 36 00 00 00 00 01 05 A3 36 00  // ......6.......6.
    AE00: 00 00 00 07 05 01 38 FF FE FF FF 66 0B 03 04 00  // ......8....f....
    AE10: 04 00 02 02 04 00 15 05 00 0A 1A 05 04 16 02 05  // ................
    AE20: 00 00 00 00 00 02 02 01 00 2C 05 01 00 00 02 00  // .........,......
    AE30: 55 00 02 02 89 02 04 02 05 03 00 00 05 D0 52 35  // U.............R5
    AE40: 02 05 00 00 00 00 00 02 02 01 00 2C 05 01 00 00  // ...........,....
    AE50: 00 00 55 00 02 02 89 02 04 02 05 03 00 20 00 D0  // ..U.......... ..
    AE60: 52 35 66 16 3E 0D 42 00 00 44 9B 02 56 00 41 03  // R5f.>.B..D..V.A.
    AE70: 0C 41 00 00 2D 05 41 0F 00 00 00 09 05 41 F0 FF  // .A..-.A......A..
    AE80: 00 00 2D 0A 41 42 03 05 46 00 80 00 00 56 08 42  // ..-.AB..F....V.B
    AE90: 04 04 00 00 00 2D 05 46 04 00 00 00 2D 05 42 04  // .....-.F....-.B.
    AEA0: 00 00 00 3E 02 42 41 45 56 02 02 05 00 00 80 00  // ...>.BAEV.......
    AEB0: 00 2C 02 00 00 02 02 01 00 2C 05 01 00 00 02 00  // .,.......,......
    AEC0: 02 89 02 04 02 09 02 04 02 05 03 00 00 00 40 02  // ..............@.
    AED0: 0A 03 41 52 35 52 16 02 01 02 00 14 05 00 18 1A  // ..AR5R..........
    AEE0: 05 02 08 03 02 41 00 2D 05 41 00 00 02 00 2D 01  // .....A.-.A....-.
    AEF0: 41 00 01 02 7B 36 41 03 01 40 04 2D 01 40 02 01  // A...{6A..@.-.@..
    AF00: 02 7C 36 40 01 05 68 36 00 00 00 03 01 05 70 36  // .|6@..h6......p6
    AF10: FF FF 01 83 03 02 41 00 2D 05 41 00 00 04 00 2D  // ......A.-.A....-
    AF20: 01 41 00 01 02 7D 36 41 03 01 40 04 2D 01 40 02  // .A...}6A..@.-.@.
    AF30: 01 02 7E 36 40 01 05 69 36 00 00 00 04 01 05 71  // ..~6@..i6......q
    AF40: 36 FF FF 00 84 03 02 41 00 2D 05 41 00 00 05 00  // 6......A.-.A....
    AF50: 2D 01 41 00 01 02 7F 36 41 03 01 40 04 2D 01 40  // -.A....6A..@.-.@
    AF60: 02 01 02 80 36 40 01 05 6A 36 00 00 00 05 01 05  // ....6@..j6......
    AF70: 72 36 FF FF 00 85 03 02 41 00 2D 05 41 00 00 06  // r6......A.-.A...
    AF80: 00 2D 01 41 00 01 02 81 36 41 03 01 40 04 2D 01  // .-.A....6A..@.-.
    AF90: 40 02 01 02 82 36 40 01 05 6B 36 00 00 00 06 01  // @....6@..k6.....
    AFA0: 05 73 36 FF FF 00 86 03 05 46 00 31 00 00 03 02  // .s6......F.1....
    AFB0: 41 00 2D 05 41 00 00 00 00 2D 01 41 00 03 01 40  // A.-.A....-.A...@
    AFC0: 04 2D 01 40 02 04 02 00 41 04 02 01 40 04 05 04  // .-.@....A...@...
    AFD0: 00 00 00 00 04 05 05 00 00 00 00 04 05 06 00 20  // ............... 
    AFE0: 00 00 01 05 94 36 00 00 00 80 01 05 95 36 00 20  // .....6.......6. 
    AFF0: 00 00 01 02 56 36 41 01 02 57 36 40 01 05 61 36  // ....V6A..W6@..a6
    B000: FF FF 00 80 01 05 97 36 00 00 00 00 01 05 96 36  // .......6.......6
    B010: 00 00 00 00 03 00 41 96 36 01 05 B1 36 00 00 00  // ......A.6...6...
    B020: 00 5C 05 B6 36 00 FF FF FF C6 00 09 00 07 05 B6  // .\..6...........
    B030: 36 FF FF FD FF 03 05 41 50 C3 00 00 4A 05 A3 36  // 6......AP...J..6
    B040: 02 00 00 00 49 20 04 51 14 33 05 41 01 00 00 00  // ....I .Q.3.A....
    B050: 3E 05 41 00 00 00 00 49 02 04 5B 00 1E 00 02 01  // >.A....I..[.....
    B060: 00 04 37 00 00 66 16 03 0C 41 04 00 4C 0D 41 02  // ..7..f...A..L.A.
    B070: 00 44 1D 00 0D A5 4C 00 02 5B 15 00 03 01 04 00  // .D....L..[......
    B080: 37 00 00 03 05 46 10 27 00 00 02 02 00 46 5B FF  // 7....F.'.....F[.
    B090: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B0A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B0B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B0C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B0D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B0E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B0F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B160: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B170: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B180: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B190: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B1A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B1B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B1C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B1D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B1E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B1F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B230: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B240: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B250: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    B260: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    B270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B280: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 68
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000004
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 68 41 4C 41 53 4B 41  // WSMT(....hALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 04 00 00 00                          // ........


