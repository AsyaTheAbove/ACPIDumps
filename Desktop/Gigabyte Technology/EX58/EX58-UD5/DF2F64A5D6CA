
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20180531
Copyright (c) 2000 - 2018 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  EUDS  0x000004B0  0x01  "GBT   "  "        "  0x00000000  "    "   0x00000000
 02)  SSDT  0x00002804  0x01  "INTEL "  "PPM RCM "  0x80000001  "INTL"   0x20061109
 03)  MCFG  0x0000003C  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 04)  APIC  0x0000012C  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 05)  DSDT  0x00004A86  0x01  "GBT   "  "GBTUACPI"  0x00001000  "MSFT"   0x0100000C
 06)  FACP  0x00000074  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 07)  MSDM  0x00000055  0x03  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x01010101
 08)  TAMG  0x00000B2A  0x01  "GBT   "  "GBT   B0"  0x5455312E  "BG  "   0x53450101
 09)  HPET  0x00000038  0x01  "GBT   "  "GBTUACPI"  0x42302E31  "GBTU"   0x00000098
 10)  FACS  0x00000040  0x00

Found 10 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000012C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9D
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 01
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 03
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 05
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 02
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 02 [Interrupt Source Override]
[0B9h 0185   1]                       Length : 0A
[0BAh 0186   1]                          Bus : 00
[0BBh 0187   1]                       Source : 00
[0BCh 0188   4]                    Interrupt : 00000002
[0C0h 0192   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0C2h 0194   1]                Subtable Type : 02 [Interrupt Source Override]
[0C3h 0195   1]                       Length : 0A
[0C4h 0196   1]                          Bus : 00
[0C5h 0197   1]                       Source : 09
[0C6h 0198   4]                    Interrupt : 00000009
[0CAh 0202   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[0CCh 0204   1]                Subtable Type : 04 [Local APIC NMI]
[0CDh 0205   1]                       Length : 06
[0CEh 0206   1]                 Processor ID : 00
[0CFh 0207   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0D1h 0209   1]         Interrupt Input LINT : 01

[0D2h 0210   1]                Subtable Type : 04 [Local APIC NMI]
[0D3h 0211   1]                       Length : 06
[0D4h 0212   1]                 Processor ID : 01
[0D5h 0213   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0D7h 0215   1]         Interrupt Input LINT : 01

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 02
[0DBh 0219   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 03
[0E1h 0225   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 04
[0E7h 0231   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 05
[0EDh 0237   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 06
[0F3h 0243   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 07
[0F9h 0249   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 08
[0FFh 0255   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 09
[105h 0261   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 0A
[10Bh 0267   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 0B
[111h 0273   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0C
[117h 0279   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0D
[11Dh 0285   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0E
[123h 0291   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 0F
[129h 0297   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[12Bh 0299   1]         Interrupt Input LINT : 01

Raw Table Data: Length 300 (0x12C)

    0000: 41 50 49 43 2C 01 00 00 01 9D 47 42 54 20 20 20  // APIC,.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 00 08 02 04  // ................
    0040: 01 00 00 00 00 08 03 06 01 00 00 00 00 08 04 01  // ................
    0050: 01 00 00 00 00 08 05 03 01 00 00 00 00 08 06 05  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 00 00 00 00 00 08 09 09 00 00 00 00 00 08 0A 0A  // ................
    0080: 00 00 00 00 00 08 0B 0B 00 00 00 00 00 08 0C 0C  // ................
    0090: 00 00 00 00 00 08 0D 0D 00 00 00 00 00 08 0E 0E  // ................
    00A0: 00 00 00 00 00 08 0F 0F 00 00 00 00 01 0C 02 00  // ................
    00B0: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    00C0: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 00  // ................
    00D0: 00 01 04 06 01 00 00 01 04 06 02 00 00 01 04 06  // ................
    00E0: 03 00 00 01 04 06 04 00 00 01 04 06 05 00 00 01  // ................
    00F0: 04 06 06 00 00 01 04 06 07 00 00 01 04 06 08 00  // ................
    0100: 00 01 04 06 09 00 00 01 04 06 0A 00 00 01 04 06  // ................
    0110: 0B 00 00 01 04 06 0C 00 00 01 04 06 0D 00 00 01  // ................
    0120: 04 06 0E 00 00 01 04 06 0F 00 00 01              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 1, "GBT   ", "GBTUACPI", 0x00001000)
{
    Scope (\_PR)
    {
        Processor (\_PR.CPU0, 0x00, 0x00000410, 0x06){}
        Processor (\_PR.CPU1, 0x01, 0x00000410, 0x06){}
        Processor (\_PR.CPU2, 0x02, 0x00000410, 0x06){}
        Processor (\_PR.CPU3, 0x03, 0x00000410, 0x06){}
        Processor (\_PR.CPU4, 0x04, 0x00000410, 0x06){}
        Processor (\_PR.CPU5, 0x05, 0x00000410, 0x06){}
        Processor (\_PR.CPU6, 0x06, 0x00000410, 0x06){}
        Processor (\_PR.CPU7, 0x07, 0x00000410, 0x06){}
        Processor (\_PR.CPU8, 0x08, 0x00000410, 0x06){}
        Processor (\_PR.CPU9, 0x09, 0x00000410, 0x06){}
        Processor (\_PR.CPUA, 0x0A, 0x00000410, 0x06){}
        Processor (\_PR.CPUB, 0x0B, 0x00000410, 0x06){}
        Processor (\_PR.CPUC, 0x0C, 0x00000410, 0x06){}
        Processor (\_PR.CPUD, 0x0D, 0x00000410, 0x06){}
        Processor (\_PR.CPUE, 0x0E, 0x00000410, 0x06){}
        Processor (\_PR.CPUF, 0x0F, 0x00000410, 0x06){}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\SS1, Package (0x04)
    {
        0x01, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Name (FLAG, 0x00)
    Name (STAT, 0x00)
    OperationRegion (SMOD, SystemMemory, 0x000FF840, 0x01)
    Field (SMOD, ByteAcc, NoLock, Preserve)
    {
            ,   7, 
        SUSF,   1
    }

    OperationRegion (LBOC, SystemMemory, 0x000FF820, 0x02)
    Field (LBOC, ByteAcc, NoLock, Preserve)
    {
        UBMC,   1, 
        Offset (0x02)
    }

    OperationRegion (\DEBG, SystemIO, 0x80, 0x01)
    Field (\DEBG, ByteAcc, NoLock, Preserve)
    {
        DBG1,   8
    }

    OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
    Field (RCRB, DWordAcc, Lock, Preserve)
    {
        Offset (0x3404), 
            ,   7, 
        HPTF,   1
    }

    OperationRegion (ELKM, SystemMemory, 0x000FFFEA, 0x01)
    Field (ELKM, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
            ,   1, 
        ELSO,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1
    }

    OperationRegion (EXTM, SystemMemory, 0x000FF830, 0x10)
    Field (EXTM, WordAcc, NoLock, Preserve)
    {
        ROM1,   16, 
        RMS1,   16, 
        ROM2,   16, 
        RMS2,   16, 
        ROM3,   16, 
        RMS3,   16, 
        AMEM,   32
    }

    OperationRegion (\SMIC, SystemIO, 0xB2, 0x01)
    Field (\SMIC, ByteAcc, NoLock, Preserve)
    {
        SCP,    8
    }

    OperationRegion (\GP2C, SystemIO, 0x042C, 0x02)
    Field (\GP2C, ByteAcc, NoLock, Preserve)
    {
        G2C1,   8, 
        G2C2,   8
    }

    OperationRegion (APMP, SystemIO, 0xB2, 0x02)
    Field (APMP, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (\AGPS, SystemIO, 0x0438, 0x04)
    Field (\AGPS, ByteAcc, NoLock, Preserve)
    {
        GPSE,   16, 
        GPSS,   16
    }

    OperationRegion (\GPCN, SystemIO, 0x0442, 0x01)
    Field (\GPCN, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SWGC,   1, 
        Offset (0x01)
    }

    Name (OSFX, 0x01)
    Name (LINX, 0x00)
    Name (AMAC, 0x00)
    Name (OSFL, 0x01)
    Method (STRC, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (0x00)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    OperationRegion (INFO, SystemMemory, 0x000FF840, 0x01)
    Field (INFO, ByteAcc, NoLock, Preserve)
    {
        KBDI,   1, 
        RTCW,   1, 
        PS2F,   1, 
        IRFL,   2, 
        DISE,   1, 
        SSHU,   1
    }

    Scope (\)
    {
        Name (PICF, 0x00)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            PICF = Arg0
        }
    }

    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Local0 = (Arg0 | 0xF0)
        DBG1 = Local0
        OSTP ()
        Local0 = (Arg0 | 0xF0)
        DBG1 = Local0
        If ((Arg0 == 0x01)){}
        If ((Arg0 == 0x03)){}
        If ((Arg0 == 0x05))
        {
            SMIP = 0x99
        }

        If ((Arg0 == 0x04))
        {
            If (!PICF)
            {
                Sleep (0x64)
            }
        }
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG1 = 0xFF
        If ((Arg0 == 0x04))
        {
            If ((OSFL == 0x01))
            {
                SMIP = 0x56
            }

            If ((OSFL == 0x02))
            {
                SMIP = 0x57
            }

            If ((OSFL == 0x00))
            {
                Local0 = 0x58
                If ((OSFX == 0x03))
                {
                    Local0 = 0x59
                }

                SMIP = Local0
            }
        }

        If ((Arg0 == 0x01)){}
        If (OSFL)
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
        ElseIf ((RTCW == 0x00))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Notify (\_SB.PCI0.USB0, 0x00) // Bus Check
        Notify (\_SB.PCI0.USB1, 0x00) // Bus Check
        Notify (\_SB.PCI0.USB2, 0x00) // Bus Check
        Notify (\_SB.PCI0.USB3, 0x00) // Bus Check
        Notify (\_SB.PCI0.USB4, 0x00) // Bus Check
        Notify (\_SB.PCI0.USB5, 0x00) // Bus Check
    }

    Scope (\_SI)
    {
        Method (_MSG, 1, NotSerialized)  // _MSG: Message
        {
            Local0 = Local0
        }

        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            Local0 = Local0
        }
    }

    Scope (\_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USBE, 0x02) // Device Wake
            Notify (\_SB.PCI0.USE2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
            Notify (\_SB.PCI0.AZAL, 0x02) // Device Wake
            Notify (\_SB.PCI0.IGBE, 0x02) // Device Wake
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            SWGC = 0x00
            Local0 = (0x01 << 0x09)
            Local2 = 0x02
            Local3 = 0x01
            Local4 = Local3
            While (((Local4 != 0x00) && (Local2 != 0x00)))
            {
                Sleep (0x01)
                Local2--
                Local1 = (GPSS & Local0)
                If ((Local1 != Local0))
                {
                    Local4--
                }
                Else
                {
                    Local4 = Local3
                }
            }

            GPSS &= Local0
            GPSE |= Local0
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.HUB0, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEX1, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEX2, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEX3, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEX4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEX5, 0x02) // Device Wake
        }
    }

    Scope (\_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If ((OSFL == 0x02))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceConsumer, MinNotFixed, MaxNotFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x003F,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0040,             // Length
                        ,, )
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0CF7,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0CF8,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0D00,             // Range Minimum
                        0xFFFF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0xF300,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00100000,         // Range Minimum
                        0xFEBFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xFFF00000,         // Length
                        ,, _Y00, AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y00._MIN, TCMM)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y00._LEN, TOMM)  // _LEN: Length
                TCMM = (AMEM + 0x00010000)
                TCMM += 0x00010000
                TOMM = (0xFEC00000 - TCMM) /* \_SB_.PCI0._CRS.TCMM */
                Return (BUF0) /* \_SB_.PCI0._CRS.BUF0 */
            }

            Name (PICM, Package (0x2B)
            {
                Package (0x04)
                {
                    0x001BFFFF, 
                    0x00, 
                    \_SB.PCI0.LNK0, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x00, 
                    \_SB.PCI0.LNK1, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKD, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    0x00, 
                    \_SB.PCI0.LNKE, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x00, 
                    \_SB.PCI0.LNKA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x01, 
                    \_SB.PCI0.LNKF, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    \_SB.PCI0.LNKC, 
                    0x00
                }
            })
            Name (APIC, Package (0x2F)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    0x00, 
                    0x00, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0007FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0009FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x01, 
                    0x00, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x00, 
                    0x00, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x01, 
                    0x00, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    0x00, 
                    0x00, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x00, 
                    0x00, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x01, 
                    0x00, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    0x00, 
                    0x12
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Return (PICM) /* \_SB_.PCI0.PICM */
                }
                Else
                {
                    Return (APIC) /* \_SB_.PCI0.APIC */
                }
            }

            Device (PEX0)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x05
                    })
                }

                Name (PIC0, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }
                })
                Name (API0, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC0) /* \_SB_.PCI0.PEX0.PIC0 */
                    }
                    Else
                    {
                        Return (API0) /* \_SB_.PCI0.PEX0.API0 */
                    }
                }
            }

            Device (PEX1)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x05
                    })
                }

                Name (PIC1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }
                })
                Name (API1, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC1) /* \_SB_.PCI0.PEX1.PIC1 */
                    }
                    Else
                    {
                        Return (API1) /* \_SB_.PCI0.PEX1.API1 */
                    }
                }
            }

            Device (PEX2)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x05
                    })
                }

                Name (PIC2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }
                })
                Name (API2, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x11
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC2) /* \_SB_.PCI0.PEX2.PIC2 */
                    }
                    Else
                    {
                        Return (API2) /* \_SB_.PCI0.PEX2.API2 */
                    }
                }
            }

            Device (PEX3)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x05
                    })
                }

                Name (PIC3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }
                })
                Name (API3, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC3) /* \_SB_.PCI0.PEX3.PIC3 */
                    }
                    Else
                    {
                        Return (API3) /* \_SB_.PCI0.PEX3.API3 */
                    }
                }
            }

            Device (PEX4)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x05
                    })
                }

                Name (PIC4, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }
                })
                Name (API4, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC4) /* \_SB_.PCI0.PEX4.PIC4 */
                    }
                    Else
                    {
                        Return (API4) /* \_SB_.PCI0.PEX4.API4 */
                    }
                }
            }

            Device (PEX5)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x09, 
                        0x05
                    })
                }

                Name (PIC5, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }
                })
                Name (API5, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x10
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PIC5) /* \_SB_.PCI0.PEX5.PIC5 */
                    }
                    Else
                    {
                        Return (API5) /* \_SB_.PCI0.PEX5.API5 */
                    }
                }
            }

            Device (\_SB.PCI0.PEX1.JMB0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (PIOT, Package (0x05)
                {
                    0x0258, 
                    0x0186, 
                    0x014A, 
                    0xB4, 
                    0x78
                })
                Name (MDMA, Package (0x03)
                {
                    0x01E0, 
                    0x96, 
                    0x78
                })
                Name (UDMA, Package (0x07)
                {
                    0x78, 
                    0x50, 
                    0x3C, 
                    0x28, 
                    0x1E, 
                    0x14, 
                    0x0F
                })
                OperationRegion (CF40, PCI_Config, 0x40, 0x04)
                Field (CF40, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    CAB0,   1, 
                        ,   18, 
                    SWAP,   1, 
                    CHN0,   1, 
                    Offset (0x04)
                }

                OperationRegion (CF80, PCI_Config, 0x80, 0x04)
                Field (CF80, ByteAcc, NoLock, Preserve)
                {
                        ,   19, 
                    CAB1,   1, 
                    Offset (0x03), 
                    CHN1,   1, 
                    Offset (0x04)
                }

                Name (IDEB, Buffer (0x14){})
                CreateDWordField (IDEB, 0x00, GTM0)
                CreateDWordField (IDEB, 0x04, GTM1)
                CreateDWordField (IDEB, 0x08, GTM2)
                CreateDWordField (IDEB, 0x0C, GTM3)
                CreateDWordField (IDEB, 0x10, GTM4)
                Name (PMIO, 0x04)
                Name (PMDM, 0x06)
                Name (PSIO, 0x04)
                Name (PSDM, 0x06)
                Name (SMIO, 0x04)
                Name (SMDM, 0x06)
                Name (SSIO, 0x04)
                Name (SSDM, 0x06)
                Name (MODP, 0x05)
                Name (MODS, 0x05)
                Device (SDE0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = DerefOf (PIOT [PMIO])
                        Local2 = DerefOf (PIOT [PSIO])
                        Local4 = 0x1A
                        If ((MODP && 0x01))
                        {
                            Local1 = DerefOf (UDMA [PMDM])
                            If ((PMDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        PMDM = 0x02
                                        Local1 = DerefOf (UDMA [PMDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        PMDM = 0x02
                                        Local1 = DerefOf (UDMA [PMDM])
                                    }
                                }
                            }

                            Local4 |= 0x01
                        }
                        Else
                        {
                            Local1 = DerefOf (MDMA [PMDM])
                        }

                        If ((MODP && 0x04))
                        {
                            Local3 = DerefOf (UDMA [PSDM])
                            If ((PSDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        PSDM = 0x02
                                        Local3 = DerefOf (UDMA [PSDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        PSDM = 0x02
                                        Local3 = DerefOf (UDMA [PSDM])
                                    }
                                }
                            }

                            Local4 |= 0x04
                        }
                        Else
                        {
                            Local3 = DerefOf (MDMA [PSDM])
                        }

                        GTM0 = Local0
                        GTM1 = Local1
                        GTM2 = Local2
                        GTM3 = Local3
                        GTM4 = Local4
                        Return (IDEB) /* \_SB_.PCI0.PEX1.JMB0.IDEB */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        IDEB = Arg0
                        Local0 = GTM0 /* \_SB_.PCI0.PEX1.JMB0.GTM0 */
                        Local1 = GTM1 /* \_SB_.PCI0.PEX1.JMB0.GTM1 */
                        Local2 = GTM2 /* \_SB_.PCI0.PEX1.JMB0.GTM2 */
                        Local3 = GTM3 /* \_SB_.PCI0.PEX1.JMB0.GTM3 */
                        Local4 = GTM4 /* \_SB_.PCI0.PEX1.JMB0.GTM4 */
                        If (((Local0 != 0xFFFFFFFF) && (Local0 != 0x00)))
                        {
                            PMIO = Match (PIOT, MEQ, Local0, MTR, 0x00, 0x00)
                        }

                        If (((Local1 != 0xFFFFFFFF) && (Local1 != 0x00)))
                        {
                            If ((Local4 && 0x01))
                            {
                                PMDM = Match (UDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                PMDM = Match (MDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                        }

                        If (((Local2 != 0xFFFFFFFF) && (Local2 != 0x00)))
                        {
                            PSIO = Match (PIOT, MEQ, Local2, MTR, 0x00, 0x00)
                        }

                        If (((Local3 != 0xFFFFFFFF) && (Local3 != 0x00)))
                        {
                            If ((Local4 && 0x04))
                            {
                                PSDM = Match (UDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                PSDM = Match (MDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                        }

                        MODP = Local4
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = PMIO /* \_SB_.PCI0.PEX1.JMB0.PMIO */
                            PIOM |= 0x08
                            DMAM = PMDM /* \_SB_.PCI0.PEX1.JMB0.PMDM */
                            If ((MODP && 0x01))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = PSIO /* \_SB_.PCI0.PEX1.JMB0.PSIO */
                            PIOM |= 0x08
                            DMAM = PSDM /* \_SB_.PCI0.PEX1.JMB0.PSDM */
                            If ((MODP && 0x04))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }
                }

                Device (SDE1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = DerefOf (PIOT [SMIO])
                        Local2 = DerefOf (PIOT [SSIO])
                        Local4 = 0x1A
                        If ((MODS && 0x01))
                        {
                            Local1 = DerefOf (UDMA [SMDM])
                            If ((SMDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        SMDM = 0x02
                                        Local1 = DerefOf (UDMA [SMDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        SMDM = 0x02
                                        Local1 = DerefOf (UDMA [SMDM])
                                    }
                                }
                            }

                            Local4 |= 0x01
                        }
                        Else
                        {
                            Local1 = DerefOf (MDMA [SMDM])
                        }

                        If ((MODS && 0x04))
                        {
                            Local3 = DerefOf (UDMA [SSDM])
                            If ((SSDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        SSDM = 0x02
                                        Local3 = DerefOf (UDMA [SSDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        SSDM = 0x02
                                        Local3 = DerefOf (UDMA [SSDM])
                                    }
                                }
                            }

                            Local4 |= 0x04
                        }
                        Else
                        {
                            Local3 = DerefOf (MDMA [SSDM])
                        }

                        GTM0 = Local0
                        GTM1 = Local1
                        GTM2 = Local2
                        GTM3 = Local3
                        GTM4 = Local4
                        Return (IDEB) /* \_SB_.PCI0.PEX1.JMB0.IDEB */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        IDEB = Arg0
                        Local0 = GTM0 /* \_SB_.PCI0.PEX1.JMB0.GTM0 */
                        Local1 = GTM1 /* \_SB_.PCI0.PEX1.JMB0.GTM1 */
                        Local2 = GTM2 /* \_SB_.PCI0.PEX1.JMB0.GTM2 */
                        Local3 = GTM3 /* \_SB_.PCI0.PEX1.JMB0.GTM3 */
                        Local4 = GTM4 /* \_SB_.PCI0.PEX1.JMB0.GTM4 */
                        If (((Local0 != 0xFFFFFFFF) && (Local0 != 0x00)))
                        {
                            SMIO = Match (PIOT, MEQ, Local0, MTR, 0x00, 0x00)
                        }

                        If (((Local1 != 0xFFFFFFFF) && (Local1 != 0x00)))
                        {
                            If ((Local4 && 0x01))
                            {
                                SMDM = Match (UDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                SMDM = Match (MDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                        }

                        If (((Local2 != 0xFFFFFFFF) && (Local2 != 0x00)))
                        {
                            SSIO = Match (PIOT, MEQ, Local2, MTR, 0x00, 0x00)
                        }

                        If (((Local3 != 0xFFFFFFFF) && (Local3 != 0x00)))
                        {
                            If ((Local4 && 0x04))
                            {
                                SSDM = Match (UDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                SSDM = Match (MDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                        }

                        MODS = Local4
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = SMIO /* \_SB_.PCI0.PEX1.JMB0.SMIO */
                            PIOM |= 0x08
                            DMAM = SMDM /* \_SB_.PCI0.PEX1.JMB0.SMDM */
                            If ((MODS && 0x01))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = SSIO /* \_SB_.PCI0.PEX1.JMB0.SSIO */
                            PIOM |= 0x08
                            DMAM = SSDM /* \_SB_.PCI0.PEX1.JMB0.SSDM */
                            If ((MODS && 0x04))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }
                }
            }

            Device (\_SB.PCI0.PEX1.JMB1)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Name (PIOT, Package (0x05)
                {
                    0x0258, 
                    0x0186, 
                    0x014A, 
                    0xB4, 
                    0x78
                })
                Name (MDMA, Package (0x03)
                {
                    0x01E0, 
                    0x96, 
                    0x78
                })
                Name (UDMA, Package (0x07)
                {
                    0x78, 
                    0x50, 
                    0x3C, 
                    0x28, 
                    0x1E, 
                    0x14, 
                    0x0F
                })
                OperationRegion (CF40, PCI_Config, 0x40, 0x04)
                Field (CF40, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    CAB0,   1, 
                        ,   18, 
                    SWAP,   1, 
                    CHN0,   1, 
                    Offset (0x04)
                }

                OperationRegion (CF80, PCI_Config, 0x80, 0x04)
                Field (CF80, ByteAcc, NoLock, Preserve)
                {
                        ,   19, 
                    CAB1,   1, 
                    Offset (0x03), 
                    CHN1,   1, 
                    Offset (0x04)
                }

                Name (IDEB, Buffer (0x14){})
                CreateDWordField (IDEB, 0x00, GTM0)
                CreateDWordField (IDEB, 0x04, GTM1)
                CreateDWordField (IDEB, 0x08, GTM2)
                CreateDWordField (IDEB, 0x0C, GTM3)
                CreateDWordField (IDEB, 0x10, GTM4)
                Name (PMIO, 0x04)
                Name (PMDM, 0x06)
                Name (PSIO, 0x04)
                Name (PSDM, 0x06)
                Name (SMIO, 0x04)
                Name (SMDM, 0x06)
                Name (SSIO, 0x04)
                Name (SSDM, 0x06)
                Name (MODP, 0x05)
                Name (MODS, 0x05)
                Device (SDE0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = DerefOf (PIOT [PMIO])
                        Local2 = DerefOf (PIOT [PSIO])
                        Local4 = 0x1A
                        If ((MODP && 0x01))
                        {
                            Local1 = DerefOf (UDMA [PMDM])
                            If ((PMDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        PMDM = 0x02
                                        Local1 = DerefOf (UDMA [PMDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        PMDM = 0x02
                                        Local1 = DerefOf (UDMA [PMDM])
                                    }
                                }
                            }

                            Local4 |= 0x01
                        }
                        Else
                        {
                            Local1 = DerefOf (MDMA [PMDM])
                        }

                        If ((MODP && 0x04))
                        {
                            Local3 = DerefOf (UDMA [PSDM])
                            If ((PSDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        PSDM = 0x02
                                        Local3 = DerefOf (UDMA [PSDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        PSDM = 0x02
                                        Local3 = DerefOf (UDMA [PSDM])
                                    }
                                }
                            }

                            Local4 |= 0x04
                        }
                        Else
                        {
                            Local3 = DerefOf (MDMA [PSDM])
                        }

                        GTM0 = Local0
                        GTM1 = Local1
                        GTM2 = Local2
                        GTM3 = Local3
                        GTM4 = Local4
                        Return (IDEB) /* \_SB_.PCI0.PEX1.JMB1.IDEB */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        IDEB = Arg0
                        Local0 = GTM0 /* \_SB_.PCI0.PEX1.JMB1.GTM0 */
                        Local1 = GTM1 /* \_SB_.PCI0.PEX1.JMB1.GTM1 */
                        Local2 = GTM2 /* \_SB_.PCI0.PEX1.JMB1.GTM2 */
                        Local3 = GTM3 /* \_SB_.PCI0.PEX1.JMB1.GTM3 */
                        Local4 = GTM4 /* \_SB_.PCI0.PEX1.JMB1.GTM4 */
                        If (((Local0 != 0xFFFFFFFF) && (Local0 != 0x00)))
                        {
                            PMIO = Match (PIOT, MEQ, Local0, MTR, 0x00, 0x00)
                        }

                        If (((Local1 != 0xFFFFFFFF) && (Local1 != 0x00)))
                        {
                            If ((Local4 && 0x01))
                            {
                                PMDM = Match (UDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                PMDM = Match (MDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                        }

                        If (((Local2 != 0xFFFFFFFF) && (Local2 != 0x00)))
                        {
                            PSIO = Match (PIOT, MEQ, Local2, MTR, 0x00, 0x00)
                        }

                        If (((Local3 != 0xFFFFFFFF) && (Local3 != 0x00)))
                        {
                            If ((Local4 && 0x04))
                            {
                                PSDM = Match (UDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                PSDM = Match (MDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                        }

                        MODP = Local4
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = PMIO /* \_SB_.PCI0.PEX1.JMB1.PMIO */
                            PIOM |= 0x08
                            DMAM = PMDM /* \_SB_.PCI0.PEX1.JMB1.PMDM */
                            If ((MODP && 0x01))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = PSIO /* \_SB_.PCI0.PEX1.JMB1.PSIO */
                            PIOM |= 0x08
                            DMAM = PSDM /* \_SB_.PCI0.PEX1.JMB1.PSDM */
                            If ((MODP && 0x04))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }
                }

                Device (SDE1)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = DerefOf (PIOT [SMIO])
                        Local2 = DerefOf (PIOT [SSIO])
                        Local4 = 0x1A
                        If ((MODS && 0x01))
                        {
                            Local1 = DerefOf (UDMA [SMDM])
                            If ((SMDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        SMDM = 0x02
                                        Local1 = DerefOf (UDMA [SMDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        SMDM = 0x02
                                        Local1 = DerefOf (UDMA [SMDM])
                                    }
                                }
                            }

                            Local4 |= 0x01
                        }
                        Else
                        {
                            Local1 = DerefOf (MDMA [SMDM])
                        }

                        If ((MODS && 0x04))
                        {
                            Local3 = DerefOf (UDMA [SSDM])
                            If ((SSDM > 0x02))
                            {
                                If (((SWAP != 0x01) && (CHN0 == 0x01)))
                                {
                                    If (CAB0)
                                    {
                                        SSDM = 0x02
                                        Local3 = DerefOf (UDMA [SSDM])
                                    }
                                }

                                If (((SWAP == 0x01) && (CHN1 == 0x01)))
                                {
                                    If (CAB1)
                                    {
                                        SSDM = 0x02
                                        Local3 = DerefOf (UDMA [SSDM])
                                    }
                                }
                            }

                            Local4 |= 0x04
                        }
                        Else
                        {
                            Local3 = DerefOf (MDMA [SSDM])
                        }

                        GTM0 = Local0
                        GTM1 = Local1
                        GTM2 = Local2
                        GTM3 = Local3
                        GTM4 = Local4
                        Return (IDEB) /* \_SB_.PCI0.PEX1.JMB1.IDEB */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        IDEB = Arg0
                        Local0 = GTM0 /* \_SB_.PCI0.PEX1.JMB1.GTM0 */
                        Local1 = GTM1 /* \_SB_.PCI0.PEX1.JMB1.GTM1 */
                        Local2 = GTM2 /* \_SB_.PCI0.PEX1.JMB1.GTM2 */
                        Local3 = GTM3 /* \_SB_.PCI0.PEX1.JMB1.GTM3 */
                        Local4 = GTM4 /* \_SB_.PCI0.PEX1.JMB1.GTM4 */
                        If (((Local0 != 0xFFFFFFFF) && (Local0 != 0x00)))
                        {
                            SMIO = Match (PIOT, MEQ, Local0, MTR, 0x00, 0x00)
                        }

                        If (((Local1 != 0xFFFFFFFF) && (Local1 != 0x00)))
                        {
                            If ((Local4 && 0x01))
                            {
                                SMDM = Match (UDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                SMDM = Match (MDMA, MEQ, Local1, MTR, 0x00, 0x00)
                            }
                        }

                        If (((Local2 != 0xFFFFFFFF) && (Local2 != 0x00)))
                        {
                            SSIO = Match (PIOT, MEQ, Local2, MTR, 0x00, 0x00)
                        }

                        If (((Local3 != 0xFFFFFFFF) && (Local3 != 0x00)))
                        {
                            If ((Local4 && 0x04))
                            {
                                SSDM = Match (UDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                            Else
                            {
                                SSDM = Match (MDMA, MEQ, Local3, MTR, 0x00, 0x00)
                            }
                        }

                        MODS = Local4
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = SMIO /* \_SB_.PCI0.PEX1.JMB1.SMIO */
                            PIOM |= 0x08
                            DMAM = SMDM /* \_SB_.PCI0.PEX1.JMB1.SMDM */
                            If ((MODS && 0x01))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            Local1 = Buffer (0x07)
                                {
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                                }
                            CreateByteField (Local0, 0x01, PIOM)
                            CreateByteField (Local1, 0x01, DMAM)
                            PIOM = SSIO /* \_SB_.PCI0.PEX1.JMB1.SSIO */
                            PIOM |= 0x08
                            DMAM = SSDM /* \_SB_.PCI0.PEX1.JMB1.SSDM */
                            If ((MODS && 0x04))
                            {
                                DMAM |= 0x40
                            }
                            Else
                            {
                                DMAM |= 0x20
                            }

                            Concatenate (Local0, Local1, Local2)
                            Return (Local2)
                        }
                    }
                }
            }

            Device (HUB0)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (PICM, Package (0x0C)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x00, 
                        \_SB.PCI0.LNKB, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x01, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        \_SB.PCI0.LNKD, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        \_SB.PCI0.LNKA, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x00, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x01, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x02, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x03, 
                        \_SB.PCI0.LNKC, 
                        0x00
                    }
                })
                Name (APIC, Package (0x0C)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        0x00, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x01, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x00, 
                        0x00, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        0x00, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        0x00, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x00, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x01, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x02, 
                        0x00, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0006FFFF, 
                        0x03, 
                        0x00, 
                        0x12
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.HUB0.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.HUB0.APIC */
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x0B, 
                        0x05
                    })
                }
            }

            Device (PX40)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (PREV, PCI_Config, 0x08, 0x01)
                Scope (\)
                {
                    Field (\_SB.PCI0.PX40.PREV, ByteAcc, NoLock, Preserve)
                    {
                        REV0,   8
                    }
                }

                OperationRegion (PIRQ, PCI_Config, 0x60, 0x04)
                Scope (\)
                {
                    Field (\_SB.PCI0.PX40.PIRQ, ByteAcc, NoLock, Preserve)
                    {
                        PIRA,   8, 
                        PIRB,   8, 
                        PIRC,   8, 
                        PIRD,   8
                    }
                }

                OperationRegion (PIR2, PCI_Config, 0x68, 0x04)
                Scope (\)
                {
                    Field (\_SB.PCI0.PX40.PIR2, ByteAcc, NoLock, Preserve)
                    {
                        PIRE,   8, 
                        PIRF,   8, 
                        PIRG,   8, 
                        PIRH,   8
                    }
                }

                OperationRegion (LPIO, PCI_Config, 0x80, 0x0E)
                Scope (\)
                {
                    Field (\_SB.PCI0.PX40.LPIO, ByteAcc, NoLock, Preserve)
                    {
                        UAIO,   8, 
                        PRIO,   8, 
                        LPE1,   8, 
                        LPE2,   8, 
                        GN1L,   8, 
                        GN1H,   8, 
                        GN2L,   8, 
                        GN2H,   8
                    }

                    Method (DISD, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x00))
                        {
                            LPE1 &= 0xFE
                        }

                        If ((Arg0 == 0x01))
                        {
                            LPE1 &= 0xFD
                        }

                        If ((Arg0 == 0x02))
                        {
                            LPE1 &= 0xFB
                        }

                        If ((Arg0 == 0x03))
                        {
                            LPE1 &= 0xF7
                        }

                        If ((Arg0 == 0x04))
                        {
                            LPE2 &= 0xFC
                        }

                        If ((Arg0 == 0x05))
                        {
                            LPE1 &= 0xDF
                        }

                        If ((Arg0 == 0x06))
                        {
                            GN2L &= 0xFE
                        }
                    }

                    Method (CKIO, 2, NotSerialized)
                    {
                        If ((Arg1 == 0x00))
                        {
                            LPE1 |= 0x01
                            Local0 = (UAIO & 0xF0)
                            If ((Arg0 == 0x03F8))
                            {
                                UAIO = (Local0 | 0x00)
                            }

                            If ((Arg0 == 0x02F8))
                            {
                                UAIO = (Local0 | 0x01)
                            }

                            If ((Arg0 == 0x02E8))
                            {
                                UAIO = (Local0 | 0x05)
                            }

                            If ((Arg0 == 0x03E8))
                            {
                                UAIO = (Local0 | 0x07)
                            }
                        }

                        If ((Arg1 == 0x01))
                        {
                            LPE1 |= 0x02
                            Local0 = (UAIO & 0x0F)
                            If ((Arg0 == 0x03F8))
                            {
                                UAIO = (Local0 | 0x00)
                            }

                            If ((Arg0 == 0x02F8))
                            {
                                UAIO = (Local0 | 0x10)
                            }

                            If ((Arg0 == 0x02E8))
                            {
                                UAIO = (Local0 | 0x50)
                            }

                            If ((Arg0 == 0x03E8))
                            {
                                UAIO = (Local0 | 0x70)
                            }
                        }

                        If ((Arg1 == 0x02))
                        {
                            LPE1 |= 0x04
                            Local0 = (PRIO & 0xFC)
                            If ((Arg0 == 0x0378))
                            {
                                PRIO = (Local0 | 0x00)
                            }

                            If ((Arg0 == 0x0278))
                            {
                                PRIO = (Local0 | 0x01)
                            }

                            If ((Arg0 == 0x03BC))
                            {
                                PRIO = (Local0 | 0x02)
                            }
                        }

                        If ((Arg1 == 0x03))
                        {
                            LPE1 |= 0x08
                        }

                        If ((Arg1 == 0x04))
                        {
                            If ((Arg0 == 0x0201))
                            {
                                LPE2 |= 0x01
                            }

                            If ((Arg0 == 0x0209))
                            {
                                LPE2 |= 0x02
                            }
                        }

                        If ((Arg1 == 0x06))
                        {
                            If ((Arg0 != 0xFFFF))
                            {
                                Local0 = (Arg0 & 0xFF)
                                GN2L = (Local0 | 0x01)
                                GN2H = (Arg0 >> 0x08)
                            }
                            Else
                            {
                                GN2H = Zero
                                GN2L = Zero
                            }
                        }
                    }
                }

                Scope (\)
                {
                    Method (SLDM, 2, NotSerialized)
                    {
                    }
                }

                Scope (\_SB.PCI0)
                {
                    Name (SLIC, Buffer (0x9E)
                    {
                        "987134512781Genuine NVIDIA Certified SLI Ready Motherboard for GIGABYTE GA EX58UD4 0101-Copyright 2008 NVIDIA Corporation All Rights Reserved-765289891023(R)"
                    })
                    Device (WMI1)
                    {
                        Name (_HID, "pnp0c14")  // _HID: Hardware ID
                        Name (_UID, "MXM2")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x14)
                        {
                            /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                            /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                            /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
                        })
                        Method (WMMX, 3, NotSerialized)
                        {
                            CreateDWordField (Arg2, 0x00, FUNC)
                            If ((FUNC == 0x41494C53))
                            {
                                Return (\_SB.PCI0.SLIC)
                            }

                            Return (0x00)
                        }
                    }
                }

                Scope (\)
                {
                    OperationRegion (\SCPP, SystemIO, 0xB2, 0x01)
                    Field (\SCPP, ByteAcc, NoLock, Preserve)
                    {
                        SMIP,   8
                    }
                }

                Method (\_SB.PCI0._INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (STRC (\_OS, "Microsoft Windows"))
                    {
                        SMIP = 0x56
                    }
                    ElseIf (STRC (\_OS, "Microsoft Windows NT"))
                    {
                        If (CondRefOf (\_OSI, Local0))
                        {
                            Local2 = 0x00
                            If (\_OSI ("Windows 2001"))
                            {
                                OSFL = 0x00
                                Local1 = 0x59
                                OSFX = 0x03
                                Local2 = 0x01
                            }

                            If (\_OSI ("Windows 2006")){}
                            If (\_OSI ("Windows 2009")){}
                            If ((Local2 != 0x00))
                            {
                                SMIP = Local1
                            }
                        }
                        Else
                        {
                            SMIP = 0x58
                            OSFL = 0x00
                        }
                    }
                    Else
                    {
                        If (CondRefOf (\_OSI, Local0))
                        {
                            If (\_OSI ("Linux"))
                            {
                                LINX = 0x01
                            }

                            If (\_OSI ("Darwin"))
                            {
                                AMAC = 0x01
                            }
                        }

                        SMIP = 0x57
                        OSFL = 0x02
                    }
                }

                Scope (\)
                {
                    Method (OSTP, 0, NotSerialized)
                    {
                        If ((OSFL == 0x01))
                        {
                            SMIP = 0x56
                        }

                        If ((OSFL == 0x02))
                        {
                            SMIP = 0x57
                        }

                        If ((OSFL == 0x00))
                        {
                            Local1 = 0x58
                            If ((OSFX >= 0x03))
                            {
                                Local1 = 0x59
                            }

                            SMIP = Local1
                        }
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x01,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0091,             // Range Minimum
                            0x0091,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0290,             // Range Minimum
                            0x0290,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0290,             // Range Minimum
                            0x0290,             // Range Maximum
                            0x01,               // Alignment
                            0x05,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMA1)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0094,             // Range Minimum
                            0x0094,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (ATT5, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Name (ATT6, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT6) /* \_SB_.PCI0.PX40.TMR_.ATT6 */
                            }
                            Else
                            {
                                Return (ATT5) /* \_SB_.PCI0.PX40.TMR_.ATT5 */
                            }
                        }
                        Else
                        {
                            Return (ATT5) /* \_SB_.PCI0.PX40.TMR_.ATT5 */
                        }
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (ATT3, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (ATT4, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT3) /* \_SB_.PCI0.PX40.HPET.ATT3 */
                            }
                            Else
                            {
                                Return (ATT4) /* \_SB_.PCI0.PX40.HPET.ATT4 */
                            }
                        }
                        Else
                        {
                            Return (ATT4) /* \_SB_.PCI0.PX40.HPET.ATT4 */
                        }
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (ATT0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (ATT1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Name (ATT2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (ATT3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX >= 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT1) /* \_SB_.PCI0.PX40.RTC_.ATT1 */
                            }
                            Else
                            {
                                Return (ATT0) /* \_SB_.PCI0.PX40.RTC_.ATT0 */
                            }
                        }
                        Else
                        {
                            If ((AMAC == 0x01))
                            {
                                Return (ATT2) /* \_SB_.PCI0.PX40.RTC_.ATT2 */
                            }

                            Return (ATT0) /* \_SB_.PCI0.PX40.RTC_.ATT0 */
                        }
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Scope (\)
                {
                    OperationRegion (WIN1, SystemIO, 0x2E, 0x02)
                    Field (WIN1, ByteAcc, NoLock, Preserve)
                    {
                        INDP,   8, 
                        DATP,   8
                    }

                    OperationRegion (GPIO, SystemIO, 0x0800, 0x05)
                    Field (GPIO, ByteAcc, NoLock, Preserve)
                    {
                        GO01,   8, 
                        GO02,   8, 
                        GO03,   8, 
                        GO04,   8, 
                        GO05,   8
                    }

                    IndexField (INDP, DATP, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        CFG,    8, 
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x20), 
                        IDHI,   8, 
                        IDLO,   8, 
                        POWC,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IO2H,   8, 
                        IO2L,   8, 
                        Offset (0x70), 
                        INTR,   8, 
                        Offset (0x72), 
                        INT1,   8, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xC0), 
                        GP40,   8, 
                        Offset (0xF0), 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8
                    }

                    Method (ENFG, 0, NotSerialized)
                    {
                        INDP = 0x87
                        INDP = 0x01
                        INDP = 0x55
                        INDP = 0x55
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        CFG = 0x02
                    }

                    Method (GSRG, 1, NotSerialized)
                    {
                        INDP = Arg0
                        Return (DATP) /* \DATP */
                    }

                    Method (SSRG, 2, NotSerialized)
                    {
                        INDP = Arg0
                        DATP = Arg1
                    }
                }

                Device (FDC0)
                {
                    Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = Zero
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x00
                        ACTR = Zero
                        SLDM (DMCH, 0x04)
                        EXFG ()
                        DISD (0x03)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                _Y01)
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {2}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.PX40.FDC0._CRS._Y01._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOHI)
                        CreateByteField (BUF0, \_SB.PCI0.PX40.FDC0._CRS._Y01._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IORH)
                        ENFG ()
                        EXFG ()
                        Return (BUF0) /* \_SB_.PCI0.PX40.FDC0._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {2}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateWordField (Arg0, 0x19, IRQW)
                        CreateByteField (Arg0, 0x1C, DMAV)
                        ENFG ()
                        LDN = Zero
                        ACTR = One
                        SLDM (DMCH, DMCH)
                        CKIO (IOAD, 0x03)
                        EXFG ()
                    }
                }

                OperationRegion (KBCT, SystemIO, 0x60, 0x05)
                Field (KBCT, ByteAcc, NoLock, Preserve)
                {
                    P060,   8, 
                    Offset (0x04), 
                    P064,   8
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PS2F == 0x00))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF1, ResourceTemplate ()
                        {
                            IRQNoFlags ()
                                {12}
                        })
                        Name (BUF2, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {12}
                        })
                        If ((KBDI == 0x01))
                        {
                            If ((OSFL == 0x02))
                            {
                                Return (BUF1) /* \_SB_.PCI0.PX40.PS2M._CRS.BUF1 */
                            }

                            If ((OSFL == 0x01))
                            {
                                Return (BUF1) /* \_SB_.PCI0.PX40.PS2M._CRS.BUF1 */
                            }
                            Else
                            {
                                Return (BUF2) /* \_SB_.PCI0.PX40.PS2M._CRS.BUF2 */
                            }
                        }
                        Else
                        {
                            Return (BUF1) /* \_SB_.PCI0.PX40.PS2M._CRS.BUF1 */
                        }
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((KBDI == 0x01))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (PSMR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((KBDI == 0x00))
                        {
                            Return (0x00)
                        }

                        If ((PS2F == 0x00))
                        {
                            If ((OSFL == 0x02))
                            {
                                Return (0x0F)
                            }

                            If ((OSFL == 0x01))
                            {
                                Return (0x0F)
                            }

                            Return (0x00)
                        }

                        Return (0x00)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (PMIO)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0400,             // Range Minimum
                                0x0400,             // Range Maximum
                                0x01,               // Alignment
                                0xD0,               // Length
                                )
                            IO (Decode16,
                                0x04D2,             // Range Minimum
                                0x04D2,             // Range Maximum
                                0x01,               // Alignment
                                0x2E,               // Length
                                )
                        })
                        Return (BUF0) /* \_SB_.PCI0.PX40.PMIO._CRS.BUF0 */
                    }
                }
            }

            Device (IGBE)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
            }

            Device (USB0)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x03
                })
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x03
                })
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x03
                })
            }

            Device (USB3)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0E, 
                    0x03
                })
            }

            Device (USB4)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x20, 
                    0x03
                })
            }

            Device (USBE)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (USE2)
            {
                Name (_ADR, 0x001A0007)  // _ADR: Address
                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }

                    Return (0x03)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (IDE1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, 0x40, 0x20)
                Field (PCI, DWordAcc, NoLock, Preserve)
                {
                    ITM0,   16, 
                    ITM1,   16, 
                    SIT0,   4, 
                    SIT1,   4, 
                    Offset (0x08), 
                    UDC0,   2, 
                    UDC1,   2, 
                    Offset (0x0A), 
                    UDT0,   8, 
                    UDT1,   8, 
                    Offset (0x14), 
                    ICF0,   2, 
                    ICF1,   2, 
                        ,   6, 
                    WPPE,   1, 
                        ,   1, 
                    FAS0,   2, 
                    FAS1,   2
                }

                Device (PRIM)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = GTM (ITM0, SIT0, UDC0, UDT0, ICF0, FAS0)
                        Return (Local0)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Local0 = STM (Arg0, Arg1, Arg2)
                        CreateDWordField (Local0, 0x00, ITM)
                        CreateDWordField (Local0, 0x04, SIT)
                        CreateDWordField (Local0, 0x08, UDC)
                        CreateDWordField (Local0, 0x0C, UDT)
                        CreateDWordField (Local0, 0x10, ICF)
                        CreateDWordField (Local0, 0x14, FAS)
                        UDC0 = UDC /* \_SB_.PCI0.IDE1.PRIM._STM.UDC_ */
                        UDT0 = UDT /* \_SB_.PCI0.IDE1.PRIM._STM.UDT_ */
                        ICF0 = ICF /* \_SB_.PCI0.IDE1.PRIM._STM.ICF_ */
                        FAS0 = FAS /* \_SB_.PCI0.IDE1.PRIM._STM.FAS_ */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF0 (ITM0, SIT0, UDC0, UDT0, ICF0, H15F, FAS0)
                            Return (Local0)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF1 (ITM0, SIT0, UDC0, UDT0, ICF0, H15F, FAS0)
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = GTM (ITM1, SIT1, UDC1, UDT1, ICF1, FAS1)
                        Return (Local0)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Local0 = STM (Arg0, Arg1, Arg2)
                        CreateDWordField (Local0, 0x00, ITM)
                        CreateDWordField (Local0, 0x04, SIT)
                        CreateDWordField (Local0, 0x08, UDC)
                        CreateDWordField (Local0, 0x0C, UDT)
                        CreateDWordField (Local0, 0x10, ICF)
                        CreateDWordField (Local0, 0x14, FAS)
                        UDC1 = UDC /* \_SB_.PCI0.IDE1.SECD._STM.UDC_ */
                        UDT1 = UDT /* \_SB_.PCI0.IDE1.SECD._STM.UDT_ */
                        ICF1 = ICF /* \_SB_.PCI0.IDE1.SECD._STM.ICF_ */
                        FAS1 = FAS /* \_SB_.PCI0.IDE1.SECD._STM.FAS_ */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF0 (ITM1, SIT1, UDC1, UDT1, ICF1, H15F, FAS1)
                            Return (Local0)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF1 (ITM1, SIT1, UDC1, UDT1, ICF1, H15F, FAS1)
                            Return (Local0)
                        }
                    }
                }
            }

            Device (IDE2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, 0x40, 0x20)
                Field (PCI, DWordAcc, NoLock, Preserve)
                {
                    ITM0,   16, 
                    ITM1,   16, 
                    SIT0,   4, 
                    SIT1,   4, 
                    Offset (0x08), 
                    UDC0,   1, 
                        ,   1, 
                    UDC1,   1, 
                    Offset (0x0A), 
                    UDT0,   8, 
                    UDT1,   8, 
                    Offset (0x14), 
                    ICF0,   2, 
                    ICF1,   2, 
                        ,   6, 
                    WPPE,   1, 
                        ,   1, 
                    FAS0,   2, 
                    FAS1,   2
                }

                Device (PRIM)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = GTM (ITM0, SIT0, UDC0, UDT0, ICF0, FAS0)
                        Return (Local0)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Local0 = STM (Arg0, Arg1, Arg2)
                        CreateDWordField (Local0, 0x00, ITM)
                        CreateDWordField (Local0, 0x04, SIT)
                        CreateDWordField (Local0, 0x08, UDC)
                        CreateDWordField (Local0, 0x0C, UDT)
                        CreateDWordField (Local0, 0x10, ICF)
                        CreateDWordField (Local0, 0x14, FAS)
                        UDC0 = UDC /* \_SB_.PCI0.IDE2.PRIM._STM.UDC_ */
                        UDT0 = UDT /* \_SB_.PCI0.IDE2.PRIM._STM.UDT_ */
                        ICF0 = ICF /* \_SB_.PCI0.IDE2.PRIM._STM.ICF_ */
                        FAS0 = FAS /* \_SB_.PCI0.IDE2.PRIM._STM.FAS_ */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF0 (ITM0, SIT0, UDC0, UDT0, ICF0, H15F, FAS0)
                            Return (Local0)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF1 (ITM0, SIT0, UDC0, UDT0, ICF0, H15F, FAS0)
                            Return (Local0)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Local0 = GTM (ITM1, SIT1, UDC1, UDT1, ICF1, FAS1)
                        Return (Local0)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Local0 = STM (Arg0, Arg1, Arg2)
                        CreateDWordField (Local0, 0x00, ITM)
                        CreateDWordField (Local0, 0x04, SIT)
                        CreateDWordField (Local0, 0x08, UDC)
                        CreateDWordField (Local0, 0x0C, UDT)
                        CreateDWordField (Local0, 0x10, ICF)
                        CreateDWordField (Local0, 0x14, FAS)
                        UDC1 = UDC /* \_SB_.PCI0.IDE2.SECD._STM.UDC_ */
                        UDT1 = UDT /* \_SB_.PCI0.IDE2.SECD._STM.UDT_ */
                        ICF1 = ICF /* \_SB_.PCI0.IDE2.SECD._STM.ICF_ */
                        FAS1 = FAS /* \_SB_.PCI0.IDE2.SECD._STM.FAS_ */
                    }

                    Device (DRV0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF0 (ITM1, SIT1, UDC1, UDT1, ICF1, H15F, FAS1)
                            Return (Local0)
                        }
                    }

                    Device (DRV1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Name (H15F, Zero)
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF1 (ITM1, SIT1, UDC1, UDT1, ICF1, H15F, FAS1)
                            Return (Local0)
                        }
                    }
                }
            }

            Method (GTM, 6, NotSerialized)
            {
                Local0 = Buffer (0x14){}
                CreateDWordField (Local0, 0x00, PIO0)
                CreateDWordField (Local0, 0x04, DMA0)
                CreateDWordField (Local0, 0x08, PIO1)
                CreateDWordField (Local0, 0x0C, DMA1)
                CreateDWordField (Local0, 0x10, FLAG)
                FLAG = 0x10
                If (((Arg0 & 0x08) || !(Arg0 & 0x01)))
                {
                    PIO0 = 0x0384
                }
                Else
                {
                    Local1 = (((Arg0 & 0x0300) >> 0x08) + ((Arg0 & 
                        0x3000) >> 0x0C))
                    PIO0 = ((0x09 - Local1) * 0x1E)
                }

                If (((Arg0 && 0x4000) || (Arg2 && 0x01)))
                {
                    If (((Arg0 & 0x80) || !(Arg0 & 0x10)))
                    {
                        PIO1 = 0x0384
                    }
                    Else
                    {
                        Local1 = ((Arg1 & 0x03) + ((Arg1 & 0x0C) >> 0x02
                            ))
                        PIO1 = ((0x09 - Local1) * 0x1E)
                    }
                }
                Else
                {
                    PIO1 = PIO0 /* \_SB_.PCI0.GTM_.PIO0 */
                }

                If ((Arg2 & 0x01))
                {
                    Local1 = (0x04 - (Arg3 & 0x03))
                    If ((Arg5 & 0x01))
                    {
                        DMA0 = 0x14
                    }
                    ElseIf ((Arg4 & 0x01))
                    {
                        DMA0 = (Local1 * 0x0F)
                    }
                    Else
                    {
                        DMA0 = (Local1 * 0x1E)
                    }
                }
                Else
                {
                    DMA0 = PIO0 /* \_SB_.PCI0.GTM_.PIO0 */
                }

                If (((Arg0 && 0x4000) || (Arg2 && 0x01)))
                {
                    If ((Arg2 & 0x02))
                    {
                        Local1 = (0x04 - ((Arg3 & 0x30) >> 0x04))
                        If ((Arg5 & 0x02))
                        {
                            DMA1 = 0x14
                        }
                        ElseIf ((Arg4 & 0x02))
                        {
                            DMA1 = (Local1 * 0x0F)
                        }
                        Else
                        {
                            DMA1 = (Local1 * 0x1E)
                        }
                    }
                    Else
                    {
                        DMA1 = PIO1 /* \_SB_.PCI0.GTM_.PIO1 */
                    }
                }
                Else
                {
                    DMA1 = DMA0 /* \_SB_.PCI0.GTM_.DMA0 */
                }

                FLAG = Zero
                If ((Arg0 & 0x01))
                {
                    FLAG |= 0x10
                }

                If ((Arg2 & 0x01))
                {
                    FLAG |= 0x01
                }

                If ((Arg0 & 0x02))
                {
                    FLAG |= 0x02
                }

                If ((Arg2 & 0x02))
                {
                    FLAG |= 0x04
                }

                If ((Arg0 & 0x20))
                {
                    FLAG |= 0x08
                }

                Return (Local0)
            }

            Method (STM, 3, NotSerialized)
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, ITM)
                CreateDWordField (Local7, 0x04, SIT)
                CreateDWordField (Local7, 0x08, UDC)
                CreateDWordField (Local7, 0x0C, UDT)
                CreateDWordField (Local7, 0x10, ICF)
                CreateDWordField (Local7, 0x14, FAS)
                CreateDWordField (Arg0, 0x00, PIO0)
                CreateDWordField (Arg0, 0x04, DMA0)
                CreateDWordField (Arg0, 0x08, PIO1)
                CreateDWordField (Arg0, 0x0C, DMA1)
                CreateDWordField (Arg0, 0x10, FLAG)
                Local4 = FLAG /* \_SB_.PCI0.STM_.FLAG */
                Local0 = 0x8000
                If ((Local4 & 0x02))
                {
                    Local0 |= 0x07
                }

                If ((Local4 & 0x08))
                {
                    Local0 |= 0x4000
                    Local0 |= 0x70
                }

                If (((DMA0 < PIO0) && !(Local4 & 0x01)))
                {
                    Local0 |= 0x08
                }

                If (((DMA1 < PIO1) && !(Local4 & 0x04)))
                {
                    Local0 |= 0x80
                }

                If (PIO0)
                {
                    If ((PIO0 < 0x0384))
                    {
                        Local0 |= 0x01
                    }
                }

                If (PIO1)
                {
                    If ((PIO1 < 0x0384))
                    {
                        Local0 |= 0x10
                    }
                }

                If ((Local4 & 0x01))
                {
                    Local1 = PIO0 /* \_SB_.PCI0.STM_.PIO0 */
                }
                Else
                {
                    Local1 = DMA0 /* \_SB_.PCI0.STM_.DMA0 */
                }

                If (Local1)
                {
                    If ((Local1 <= 0x78))
                    {
                        Local0 |= 0x2300
                    }
                    ElseIf ((Local1 <= 0xB4))
                    {
                        Local0 |= 0x2100
                    }
                    ElseIf ((Local1 <= 0xF0))
                    {
                        Local0 |= 0x1000
                    }
                }

                ITM = Local0
                Local0 = Zero
                If ((Local4 & 0x04))
                {
                    Local1 = PIO1 /* \_SB_.PCI0.STM_.PIO1 */
                }
                Else
                {
                    Local1 = DMA1 /* \_SB_.PCI0.STM_.DMA1 */
                }

                If (Local1)
                {
                    If ((Local1 <= 0x78))
                    {
                        Local0 = 0x0B
                    }
                    ElseIf ((Local1 <= 0xB4))
                    {
                        Local0 = 0x09
                    }
                    ElseIf ((Local1 <= 0xF0))
                    {
                        Local0 = 0x04
                    }
                }

                SIT = Local0
                Local0 = 0x00
                If ((Local4 & 0x01))
                {
                    Local0 |= 0x01
                }

                If ((Local4 & 0x04))
                {
                    Local0 |= 0x02
                }

                UDC = Local0
                Local0 = 0x00
                If ((Local4 & 0x01))
                {
                    If ((DMA0 == 0x14))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        If ((DMA0 < 0x3C))
                        {
                            Local1 = (DMA0 / 0x0F)
                        }
                        Else
                        {
                            Local1 = (DMA0 / 0x1E)
                        }

                        Local0 = (0x04 - Local1)
                    }
                }

                If ((Local4 & 0x04))
                {
                    If ((DMA1 == 0x14))
                    {
                        Local1 = 0x01
                    }
                    Else
                    {
                        If ((DMA1 < 0x3C))
                        {
                            Local1 = (DMA1 / 0x0F)
                        }
                        Else
                        {
                            Local1 = (DMA1 / 0x1E)
                        }

                        Local1 = (0x04 - Local1)
                    }

                    Local1 <<= 0x04
                    Local0 |= Local1
                }

                UDT = Local0
                Local0 = 0x00
                If (DMA0)
                {
                    If ((DMA0 > 0x14))
                    {
                        If ((DMA0 < 0x3C))
                        {
                            Local0 |= 0x01
                        }
                    }
                }

                If (DMA1)
                {
                    If ((DMA1 > 0x14))
                    {
                        If ((DMA1 < 0x3C))
                        {
                            Local0 |= 0x02
                        }
                    }
                }

                ICF = Local0
                Local0 = 0x00
                If ((DMA0 == 0x14))
                {
                    Local0 |= 0x01
                }

                If ((DMA1 == 0x14))
                {
                    Local0 |= 0x02
                }

                FAS = Local0
                Return (Local7)
            }

            Method (H15P, 1, NotSerialized)
            {
                Name (BUFF, Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Local0 = Arg0
                Local1 = BUFF /* \_SB_.PCI0.H15P.BUFF */
                Concatenate (Local0, Local1, Local7)
                CreateWordField (Local7, 0x02, CYL)
                CreateWordField (Local7, 0x06, HEAD)
                CreateWordField (Local7, 0x0C, SPT)
                If (((HEAD >= 0x10) && (CYL >= 0x2000)))
                {
                    Return (SPT) /* \_SB_.PCI0.H15P.SPT_ */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GTF0, 7, NotSerialized)
            {
                Local7 = Buffer (0x07)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                    }
                CreateByteField (Local7, 0x01, MODE)
                If ((Arg2 & 0x01))
                {
                    Local0 = (Arg3 & 0x03)
                    If ((Arg6 & 0x01))
                    {
                        Local0 += 0x04
                    }
                    ElseIf ((Arg4 & 0x01))
                    {
                        Local0 += 0x02
                    }

                    MODE = (Local0 | 0x40)
                }
                Else
                {
                    Local0 = (((Arg0 & 0x0300) >> 0x08) + ((Arg0 & 
                        0x3000) >> 0x0C))
                    If ((Local0 >= 0x05))
                    {
                        MODE = 0x22
                    }
                    ElseIf ((Local0 >= 0x03))
                    {
                        MODE = 0x21
                    }
                    Else
                    {
                        MODE = 0x20
                    }
                }

                Concatenate (Local7, Local7, Local6)
                If (((Arg0 & 0x08) || !(Arg0 & 0x01)))
                {
                    If ((Arg0 & 0x02))
                    {
                        MODE = 0x00
                    }
                    Else
                    {
                        MODE = 0x01
                    }
                }
                Else
                {
                    Local0 = (((Arg0 & 0x0300) >> 0x08) + ((Arg0 & 
                        0x3000) >> 0x0C))
                    If ((Local0 >= 0x05))
                    {
                        MODE = 0x0C
                    }
                    ElseIf ((Local0 >= 0x03))
                    {
                        MODE = 0x0B
                    }
                    Else
                    {
                        MODE = 0x0A
                    }
                }

                Concatenate (Local6, Local7, Local5)
                If (Arg5)
                {
                    Local4 = Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x91         // .......
                        }
                    CreateByteField (Local4, 0x01, SPT)
                    SPT = Arg5
                    Concatenate (Local5, Local4, Local6)
                    Return (Local6)
                }
                Else
                {
                    Return (Local5)
                }
            }

            Method (GTF1, 7, NotSerialized)
            {
                Local7 = Buffer (0x07)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                    }
                CreateByteField (Local7, 0x01, MODE)
                If ((Arg2 & 0x02))
                {
                    Local0 = ((Arg3 & 0x30) >> 0x04)
                    If ((Arg6 & 0x02))
                    {
                        Local0 += 0x04
                    }
                    ElseIf ((Arg4 & 0x02))
                    {
                        Local0 += 0x02
                    }

                    MODE = (Local0 | 0x40)
                }
                Else
                {
                    Local0 = (((Arg1 & 0x03) >> 0x02) + (Arg1 & 0x0C
                        ))
                    If ((Local0 >= 0x05))
                    {
                        MODE = 0x22
                    }
                    ElseIf ((Local0 >= 0x03))
                    {
                        MODE = 0x21
                    }
                    Else
                    {
                        MODE = 0x20
                    }
                }

                Concatenate (Local7, Local7, Local6)
                If (((Arg0 & 0x80) || !(Arg0 & 0x10)))
                {
                    If ((Arg0 & 0x20))
                    {
                        MODE = 0x00
                    }
                    Else
                    {
                        MODE = 0x01
                    }
                }
                Else
                {
                    Local0 = (((Arg1 & 0x03) >> 0x02) + (Arg1 & 0x0C
                        ))
                    If ((Local0 >= 0x05))
                    {
                        MODE = 0x0C
                    }
                    ElseIf ((Local0 >= 0x03))
                    {
                        MODE = 0x0B
                    }
                    Else
                    {
                        MODE = 0x0A
                    }
                }

                Concatenate (Local6, Local7, Local5)
                If (Arg5)
                {
                    Local4 = Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x91         // .......
                        }
                    CreateByteField (Local4, 0x01, SPT)
                    SPT = Arg5
                    Concatenate (Local5, Local4, Local6)
                    Return (Local6)
                }
                Else
                {
                    Return (Local5)
                }
            }

            Device (PX43)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (PBAS, PCI_Config, 0x20, 0x02)
                Field (PBAS, ByteAcc, NoLock, Preserve)
                {
                    BAS0,   16
                }

                Method (SMBB, 0, NotSerialized)
                {
                    Local0 = (BAS0 & 0xFFFE)
                    Return (Local0)
                }
            }

            Device (AZAL)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x0D, 
                        0x05
                    })
                }
            }

            Name (BUFA, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {3,4,5,6,7,9,10,11,12,14,15}
            })
            Name (BUFB, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, _Y02)
                    {}
            })
            CreateWordField (BUFB, \_SB.PCI0._Y02._INT, IRQV)  // _INT: Interrupts
            Device (LNKA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRA & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRA |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRA & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRA = Local0
                }
            }

            Device (LNKB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRB & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRB |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRB & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRB = Local0
                }
            }

            Device (LNKC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRC & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRC |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRC & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRC = Local0
                }
            }

            Device (LNKD)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRD & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRD |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRD & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRD = Local0
                }
            }

            Device (LNKE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRE & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRE |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRE & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRE = Local0
                }
            }

            Device (LNKF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRF & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRF |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRF & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRF = Local0
                }
            }

            Device (LNK0)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRG & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRG |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRG & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRG = Local0
                }
            }

            Device (LNK1)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = (PIRH & 0x80)
                    If ((Local0 == 0x80))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return (0x0B)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PIRH |= 0x80
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Local0 = (PIRH & 0x0F)
                    IRQV = (0x01 << Local0)
                    Return (BUFB) /* \_SB_.PCI0.BUFB */
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    CreateWordField (Arg0, 0x01, IRQ1)
                    FindSetRightBit (IRQ1, Local0)
                    Local0--
                    PIRH = Local0
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x0B, 
                    0x05
                })
            }
        }

        Device (MEM)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x000F0000,         // Address Base
                        0x00004000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x000F4000,         // Address Base
                        0x00004000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x000F8000,         // Address Base
                        0x00004000,         // Address Length
                        _Y06)
                    Memory32Fixed (ReadWrite,
                        0x000FC000,         // Address Base
                        0x00004000,         // Address Length
                        _Y07)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y03)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x000A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00100000,         // Address Base
                        0x00000000,         // Address Length
                        _Y09)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0A)
                    Memory32Fixed (ReadWrite,
                        0xFEC00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED10000,         // Address Base
                        0x0000E000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00070000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEE00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFB00000,         // Address Base
                        0x00080000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFF00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x000E0000,         // Address Base
                        0x00010000,         // Address Length
                        _Y08)
                })
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y03._BAS, ACMM)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y04._BAS, RMA1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y04._LEN, RSS1)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y05._BAS, RMA2)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y05._LEN, RSS2)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y06._BAS, RMA3)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y06._LEN, RSS3)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y07._BAS, RMA4)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y07._LEN, RSS4)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y08._BAS, ERMA)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y08._LEN, ERMS)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y09._LEN, EXTM)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0A._BAS, USMA)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y0A._LEN, USMS)  // _LEN: Length
                USMA = (AMEM + 0x00010000)
                USMS += 0x00010000
                EXTM = (AMEM - 0x00100000)
                If ((ROM1 != Zero))
                {
                    RMA2 = RMA1 /* \_SB_.MEM_._CRS.RMA1 */
                    Local0 = (ROM1 << 0x08)
                    RMA1 = Local0
                    Local0 = (RMS1 << 0x08)
                    RSS1 = Local0
                    RSS2 = 0x8000
                }

                If ((ROM2 != Zero))
                {
                    RMA3 = RMA2 /* \_SB_.MEM_._CRS.RMA2 */
                    Local0 = (ROM2 << 0x08)
                    RMA2 = Local0
                    Local0 = (RMS2 << 0x08)
                    RSS2 = Local0
                    RSS3 = 0xC000
                }

                If ((ROM3 != Zero))
                {
                    RMA4 = RMA3 /* \_SB_.MEM_._CRS.RMA3 */
                    Local0 = (ROM3 << 0x08)
                    RMA3 = Local0
                    Local0 = (RMS3 << 0x08)
                    RSS3 = Local0
                    RSS4 = 0x00010000
                }

                Local1 = ERMA /* \_SB_.MEM_._CRS.ERMA */
                If ((RMA1 > 0x000D0000))
                {
                    If ((RMA1 < 0x000F0000))
                    {
                        Local0 = (RMA1 + RSS1) /* \_SB_.MEM_._CRS.RSS1 */
                        If ((Local0 > 0x000E0000))
                        {
                            If ((Local0 > Local1))
                            {
                                Local1 = Local0
                            }
                        }
                    }
                }

                If ((RMA2 > 0x000D0000))
                {
                    If ((RMA2 < 0x000F0000))
                    {
                        Local0 = (RMA2 + RSS2) /* \_SB_.MEM_._CRS.RSS2 */
                        If ((Local0 > 0x000E0000))
                        {
                            If ((Local0 > Local1))
                            {
                                Local1 = Local0
                            }
                        }
                    }
                }

                If ((RMA3 > 0x000D0000))
                {
                    If ((RMA3 < 0x000F0000))
                    {
                        Local0 = (RMA3 + RSS3) /* \_SB_.MEM_._CRS.RSS3 */
                        If ((Local0 > 0x000E0000))
                        {
                            If ((Local0 > Local1))
                            {
                                Local1 = Local0
                            }
                        }
                    }
                }

                If ((Local1 > ERMA))
                {
                    Local0 = (Local1 - ERMA) /* \_SB_.MEM_._CRS.ERMA */
                    If ((Local0 <= 0x00010000))
                    {
                        ERMA = Local1
                        ERMS = (0x00010000 - Local0)
                    }
                }

                ACMM = AMEM /* \AMEM */
                Return (BUF0) /* \_SB_.MEM_._CRS.BUF0 */
            }
        }

        Device (FWH)
        {
            Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (FWH0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFFB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
                Return (FWH0) /* \_SB_.FWH_._CRS.FWH0 */
            }
        }

        Device (\_SB.PCI0.EXPL)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xF4000000,         // Address Base
                        0x04000000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PCI0.EXPL._CRS.BUF0 */
            }
        }
    }
}



EUDS
----
[000h 0000   4]                    Signature : "EUDS"    
[004h 0004   4]                 Table Length : 000004B0
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 54
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000


**** Unknown ACPI table signature [EUDS]


Raw Table Data: Length 1200 (0x4B0)

    0000: 45 55 44 53 B0 04 00 00 01 54 47 42 54 20 20 20  // EUDS.....TGBT   
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 B2 00 00 00 03 00 00 00 E0 5F EE DF  // ............._..
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 00 00 00 F4 63 EE DF  // .............c..
    0060: 45 55 50 54 5C 01 00 00 43 50 44 44 A4 06 01 00  // EUPT\...CPDD....
    0070: 85 00 28 00 02 00 00 00 18 00 01 00 90 04 00 00  // ..(.............
    0080: 72 00 00 00 73 00 00 00 8E 00 00 00 0C 00 00 00  // r...s...........
    0090: 16 00 00 00 02 00 00 00 02 00 00 00 FF 00 00 00  // ................
    00A0: 28 00 00 00 00 00 00 00 28 00 00 00 4D 46 44 44  // (.......(...MFDD
    00B0: 00 00 00 00 00 00 00 00 00 00 64 00 02 00 90 04  // ..........d.....
    00C0: 00 00 72 00 00 00 73 00 00 00 8C 00 00 00 00 00  // ..r...s.........
    00D0: 00 00 07 00 00 00 01 00 00 00 01 00 00 00 FF 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 91 08  // ................
    00F0: 00 00 72 00 00 00 73 00 00 00 A2 00 00 00 00 00  // ..r...s.........
    0100: 00 00 01 00 00 00 01 00 00 00 01 00 00 00 02 00  // ................
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 46 44  // ..............FD
    0120: 44 44 00 00 00 00 85 00 01 00 03 00 90 04 00 00  // DD..............
    0130: 70 00 00 00 71 00 00 00 63 00 00 00 64 00 00 00  // p...q...c...d...
    0140: BC 02 00 00 01 00 00 00 01 00 00 00 FF 07 00 00  // ................
    0150: 8C 00 00 00 00 00 00 00 85 00 00 00 91 04 00 00  // ................
    0160: 70 00 00 00 71 00 00 00 64 00 00 00 00 00 00 00  // p...q...d.......
    0170: 01 00 00 00 01 00 00 00 01 00 00 00 08 00 00 00  // ................
    0180: 01 00 00 00 00 00 00 00 00 00 00 00 91 08 00 00  // ................
    0190: 72 00 00 00 73 00 00 00 A2 00 00 00 00 00 00 00  // r...s...........
    01A0: 01 00 00 00 01 00 00 00 01 00 00 00 02 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 45 55 50 54  // ............EUPT
    01C0: 5C 01 00 00 43 50 44 44 A4 06 01 00 85 00 28 00  // \...CPDD......(.
    01D0: 02 00 00 00 18 00 01 00 90 04 00 00 72 00 00 00  // ............r...
    01E0: 73 00 00 00 8E 00 00 00 0C 00 00 00 16 00 00 00  // s...............
    01F0: 02 00 00 00 02 00 00 00 FF 00 00 00 28 00 00 00  // ............(...
    0200: 00 00 00 00 28 00 00 00 4D 46 44 44 00 00 00 00  // ....(...MFDD....
    0210: 00 00 00 00 00 00 64 00 02 00 90 04 00 00 72 00  // ......d.......r.
    0220: 00 00 73 00 00 00 8C 00 00 00 00 00 00 00 07 00  // ..s.............
    0230: 00 00 01 00 00 00 01 00 00 00 FF 00 00 00 00 00  // ................
    0240: 00 00 00 00 00 00 00 00 00 00 91 08 00 00 72 00  // ..............r.
    0250: 00 00 73 00 00 00 A2 00 00 00 00 00 00 00 01 00  // ..s.............
    0260: 00 00 01 00 00 00 01 00 00 00 02 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 46 44 44 44 00 00  // ..........FDDD..
    0280: 00 00 85 00 01 00 03 00 90 04 00 00 70 00 00 00  // ............p...
    0290: 71 00 00 00 63 00 00 00 64 00 00 00 BC 02 00 00  // q...c...d.......
    02A0: 01 00 00 00 01 00 00 00 FF 07 00 00 96 00 00 00  // ................
    02B0: 00 00 00 00 85 00 00 00 91 04 00 00 70 00 00 00  // ............p...
    02C0: 71 00 00 00 64 00 00 00 00 00 00 00 01 00 00 00  // q...d...........
    02D0: 01 00 00 00 01 00 00 00 08 00 00 00 01 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 91 08 00 00 72 00 00 00  // ............r...
    02F0: 73 00 00 00 A2 00 00 00 00 00 00 00 01 00 00 00  // s...............
    0300: 01 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00  // ................
    0310: 00 00 00 00 00 00 00 00 45 55 50 54 5C 01 00 00  // ........EUPT\...
    0320: 43 50 44 44 A4 06 01 00 85 00 28 00 02 00 00 00  // CPDD......(.....
    0330: 18 00 01 00 90 04 00 00 72 00 00 00 73 00 00 00  // ........r...s...
    0340: 8E 00 00 00 0C 00 00 00 16 00 00 00 02 00 00 00  // ................
    0350: 02 00 00 00 FF 00 00 00 28 00 00 00 00 00 00 00  // ........(.......
    0360: 28 00 00 00 4D 46 44 44 00 00 00 00 00 00 00 00  // (...MFDD........
    0370: 00 00 64 00 02 00 90 04 00 00 72 00 00 00 73 00  // ..d.......r...s.
    0380: 00 00 8C 00 00 00 00 00 00 00 07 00 00 00 01 00  // ................
    0390: 00 00 01 00 00 00 FF 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 91 08 00 00 72 00 00 00 73 00  // ..........r...s.
    03B0: 00 00 A2 00 00 00 00 00 00 00 01 00 00 00 01 00  // ................
    03C0: 00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 00  // ................
    03D0: 00 00 00 00 00 00 46 44 44 44 00 00 00 00 85 00  // ......FDDD......
    03E0: 01 00 03 00 90 04 00 00 70 00 00 00 71 00 00 00  // ........p...q...
    03F0: 63 00 00 00 64 00 00 00 BC 02 00 00 01 00 00 00  // c...d...........
    0400: 01 00 00 00 FF 07 00 00 A0 00 00 00 00 00 00 00  // ................
    0410: 85 00 00 00 91 04 00 00 70 00 00 00 71 00 00 00  // ........p...q...
    0420: 64 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00  // d...............
    0430: 01 00 00 00 08 00 00 00 01 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 91 08 00 00 72 00 00 00 73 00 00 00  // ........r...s...
    0450: A2 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00  // ................
    0460: 01 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 EE FF 42 51 42 53 00 00 00 00 01 00 90 04  // ....BQBS........
    0480: 00 00 70 00 00 00 71 00 00 00 60 00 00 00 00 00  // ..p...q...`.....
    0490: 00 00 02 00 00 00 01 00 00 00 01 00 00 00 EF FF  // ................
    04A0: FF FF 00 00 00 00 00 00 00 00 00 00 EE FF 45 45  // ..............EE


FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BB
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036   4]                 FACS Address : DFEE0000
[028h 0040   4]                 DSDT Address : DFEE1180
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A1
[035h 0053   1]           ACPI Disable Value : A0
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 34
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0010
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000004A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 BB 47 42 54 20 20 20  // FACPt.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 00 00 EE DF 80 11 EE DF 01 01 09 00  // ................
    0030: B2 00 00 00 A1 A0 00 34 00 04 00 00 00 00 00 00  // .......4........
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 00  //  ...............
    0060: 65 00 E9 03 00 00 00 00 01 03 0D 00 00 10 00 00  // e...............
    0070: A5 04 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E8
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 00000098

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0010
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 E8 47 42 54 20 20 20  // HPET8.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 98 00 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 10 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E0
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F4000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 E0 47 42 54 20 20 20  // MCFG<.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 F4  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 15
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBTUACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "GBTU"
[020h 0032   4]        Asl Compiler Revision : 01010101

[024h 0036  49] Software Licensing Structure : \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF \
    FF 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 15 47 42 54 20 20 20  // MSDMU.....GBT   
    0010: 47 42 54 55 41 43 50 49 31 2E 30 42 47 42 54 55  // GBTUACPI1.0BGBTU
    0020: 01 01 01 01 FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0030: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0050: FF FF FF FF FF                                   // .....


SSDT
----
DefinitionBlock ("", "SSDT", 1, "INTEL", "PPM RCM ", 0x80000001)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU0)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU0._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU0._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU0._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU1._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU1._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU1._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000002, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU2._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU2._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU2._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000004, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU3._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU3._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU3._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000006, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU4._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU4._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU4._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU5._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU5._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU5._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000002, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU6._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU6._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU6._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000004, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Name (TYPE, 0x00000000)
        Name (PSEN, 0x00000001)
        Name (CSEN, 0x00000000)
        Name (MWOS, 0x00000001)
        Name (TSEN, 0x00000001)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAPA)
            TYPE = CAPA /* \_PR_.CPU7._PDC.CAPA */
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x04, CAPA)
            TYPE = CAPA /* \_PR_.CPU7._OSC.CAPA */
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (Arg0, 0x00, EID0)
            CreateDWordField (Arg0, 0x04, EID1)
            CreateDWordField (Arg0, 0x08, EID2)
            CreateDWordField (Arg0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 [0x00] = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 [0x00] = 0x0A
                Return (Arg3)
            }

            If ((STS0 & 0x01))
            {
                CAP0 &= 0x0BFF
                Return (Arg3)
            }

            CAP0 &= 0x0BFF
            TYPE = CAP0 /* \_PR_.CPU7._OSC.CAP0 */
            Return (Arg3)
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (PSEN)
            {
                Return (Package (0x0A)
                {
                    Package (0x06)
                    {
                        0x00000A65, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000015, 
                        0x00000015
                    }, 

                    Package (0x06)
                    {
                        0x00000A64, 
                        0x0001FBD0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000014, 
                        0x00000014
                    }, 

                    Package (0x06)
                    {
                        0x000009DF, 
                        0x0001A9C8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000013, 
                        0x00000013
                    }, 

                    Package (0x06)
                    {
                        0x0000095A, 
                        0x000186A0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000012, 
                        0x00000012
                    }, 

                    Package (0x06)
                    {
                        0x000008D5, 
                        0x00014438, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000011, 
                        0x00000011
                    }, 

                    Package (0x06)
                    {
                        0x00000850, 
                        0x000128E0, 
                        0x0000000A, 
                        0x0000000A, 
                        0x00000010, 
                        0x00000010
                    }, 

                    Package (0x06)
                    {
                        0x000007CB, 
                        0x0000F618, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000F, 
                        0x0000000F
                    }, 

                    Package (0x06)
                    {
                        0x00000746, 
                        0x0000DEA8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000E, 
                        0x0000000E
                    }, 

                    Package (0x06)
                    {
                        0x000006C1, 
                        0x0000B798, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000D, 
                        0x0000000D
                    }, 

                    Package (0x06)
                    {
                        0x0000063C, 
                        0x0000A7F8, 
                        0x0000000A, 
                        0x0000000A, 
                        0x0000000C, 
                        0x0000000C
                    }
                })
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x40,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000199, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000198, // Address
                        ,)
                }
            })
        }

        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((TYPE & 0x00000820))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000000, 
                        0x000000FE, 
                        0x00000008
                    }
                })
            }

            Return (Zero)
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (Zero)
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((TSEN && (TYPE & 0x0004)))
            {
                Return (Package (0x08)
                {
                    Package (0x05)
                    {
                        0x00000064, 
                        0x00000410, 
                        0x00000000, 
                        0x00000000, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000058, 
                        0x0000038E, 
                        0x00000000, 
                        0x0000001E, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000004B, 
                        0x0000030C, 
                        0x00000000, 
                        0x0000001C, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000003F, 
                        0x0000028A, 
                        0x00000000, 
                        0x0000001A, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000032, 
                        0x00000208, 
                        0x00000000, 
                        0x00000018, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000026, 
                        0x00000186, 
                        0x00000000, 
                        0x00000016, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x00000019, 
                        0x00000104, 
                        0x00000000, 
                        0x00000014, 
                        0x00000000
                    }, 

                    Package (0x05)
                    {
                        0x0000000D, 
                        0x00000082, 
                        0x00000000, 
                        0x00000012, 
                        0x00000000
                    }
                })
            }

            Return (Zero)
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If ((TYPE & 0x00000080))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00000006, 
                        0x000000FD, 
                        0x00000002
                    }
                })
            }

            Return (Zero)
        }
    }
}



TAMG
----
[000h 0000   4]                    Signature : "TAMG"    
[004h 0004   4]                 Table Length : 00000B2A
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 13     /* Incorrect checksum, should be 12 */
[00Ah 0010   6]                       Oem ID : "GBT   "
[010h 0016   8]                 Oem Table ID : "GBT   B0"
[018h 0024   4]                 Oem Revision : 5455312E
[01Ch 0028   4]              Asl Compiler ID : "BG  "
[020h 0032   4]        Asl Compiler Revision : 53450101


**** Unknown ACPI table signature [TAMG]


Raw Table Data: Length 2858 (0xB2A)

    0000: 54 41 4D 47 2A 0B 00 00 01 13 47 42 54 20 20 20  // TAMG*.....GBT   
    0010: 47 42 54 20 20 20 42 30 2E 31 55 54 42 47 01 01  // GBT   B0.1UTBG..
    0020: 01 01 45 53 44 54 AF 21 9A 00 08 00 3F 00 2C 01  // ..ESDT.!....?.,.
    0030: 3F 00 04 00 00 00 01 07 00 00 3D 01 95 02 96 02  // ?.........=.....
    0040: 20 00 10 00 26 00 90 64 01 00 00 2C 00 00 01 01  //  ...&..d...,....
    0050: 00 00 3B 04 00 00 00 00 00 00 40 40 01 00 00 05  // ..;.......@@....
    0060: 01 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 01 00 00 00 01 03 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 01 00 00 00 02 08 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 01 00 00 00 03 12 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 01 00 00 00 04 0C 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 02 00 00 00 00 B0 04 64 00 00 00 00 00 00 00 00  // .......d........
    00C0: 00 00 00 00 00 C0 12 C8 00 00 00 01 00 00 00 00  // ................
    00D0: 00 00 24 45 5A 56 4F 4C 54 24 D0 07 01 35 00 00  // ..$EZVOLT$...5..
    00E0: 00 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 44 52 41 4D 20 56 6F 6C 74 61 67 65 20 20  // ..DRAM Voltage  
    0100: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0110: 00 00 03 01 04 00 F0 49 02 00 90 59 02 00 60 02  // .......I...Y..`.
    0120: 00 00 00 00 00 00 04 00 00 00 A0 86 01 00 D0 FB  // ................
    0130: 01 00 10 27 00 00 E0 22 02 00 A0 86 01 00 F0 49  // ...'...".......I
    0140: 02 00 D0 07 00 00 F0 49 02 00 A0 86 01 00 90 59  // .......I.......Y
    0150: 02 00 D0 07 00 00 30 E6 02 00 A0 86 01 00 D0 F5  // ......0.........
    0160: 02 00 D0 07 00 00 A0 F7 03 00 44 52 41 4D 20 54  // ..........DRAM T
    0170: 65 72 6D 69 6E 61 74 69 6F 6E 20 20 20 20 20 20  // ermination      
    0180: 20 20 20 20 20 20 20 20 00 00 05 01 04 00 F8 24  //         .......$
    0190: 01 00 F8 24 01 00 6A 01 00 00 00 00 00 00 03 00  // ...$..j.........
    01A0: 00 00 A0 86 01 00 C8 AF 00 00 D0 07 00 00 28 1D  // ..............(.
    01B0: 01 00 A0 86 01 00 F8 24 01 00 88 13 00 00 F8 24  // .......$.......$
    01C0: 01 00 A0 86 01 00 B0 30 01 00 C4 09 00 00 2C C3  // .......0......,.
    01D0: 01 00 43 68 2D 41 20 44 61 74 61 20 56 52 65 66  // ..Ch-A Data VRef
    01E0: 2E 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // .               
    01F0: 00 00 19 01 04 00 F8 24 01 00 F8 24 01 00 60 01  // .......$...$..`.
    0200: 00 00 00 00 00 00 03 00 00 00 A0 86 01 00 18 F6  // ................
    0210: 00 00 E8 03 00 00 10 21 01 00 A0 86 01 00 F8 24  // .......!.......$
    0220: 01 00 E8 03 00 00 F8 24 01 00 A0 86 01 00 E0 28  // .......$.......(
    0230: 01 00 E8 03 00 00 90 5F 01 00 43 68 2D 42 20 44  // ......._..Ch-B D
    0240: 61 74 61 20 56 52 65 66 2E 20 20 20 20 20 20 20  // ata VRef.       
    0250: 20 20 20 20 20 20 20 20 00 00 1A 01 04 00 F8 24  //         .......$
    0260: 01 00 F8 24 01 00 60 03 00 00 00 00 00 00 03 00  // ...$..`.........
    0270: 00 00 A0 86 01 00 18 F6 00 00 E8 03 00 00 10 21  // ...............!
    0280: 01 00 A0 86 01 00 F8 24 01 00 E8 03 00 00 F8 24  // .......$.......$
    0290: 01 00 A0 86 01 00 E0 28 01 00 E8 03 00 00 90 5F  // .......(......._
    02A0: 01 00 43 68 2D 43 20 44 61 74 61 20 56 52 65 66  // ..Ch-C Data VRef
    02B0: 2E 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // .               
    02C0: 00 00 1B 01 04 00 F8 24 01 00 F8 24 01 00 68 02  // .......$...$..h.
    02D0: 00 00 00 00 00 00 03 00 00 00 A0 86 01 00 18 F6  // ................
    02E0: 00 00 E8 03 00 00 10 21 01 00 A0 86 01 00 F8 24  // .......!.......$
    02F0: 01 00 E8 03 00 00 F8 24 01 00 A0 86 01 00 E0 28  // .......$.......(
    0300: 01 00 E8 03 00 00 90 5F 01 00 43 68 2D 41 20 41  // ......._..Ch-A A
    0310: 64 64 72 65 73 73 20 56 52 65 66 2E 20 20 20 20  // ddress VRef.    
    0320: 20 20 20 20 20 20 20 20 00 00 1D 01 04 00 F8 24  //         .......$
    0330: 01 00 F8 24 01 00 6A 02 00 00 00 00 00 00 03 00  // ...$..j.........
    0340: 00 00 A0 86 01 00 00 FA 00 00 E8 03 00 00 10 21  // ...............!
    0350: 01 00 A0 86 01 00 F8 24 01 00 E8 03 00 00 F8 24  // .......$.......$
    0360: 01 00 A0 86 01 00 E0 28 01 00 E8 03 00 00 90 5F  // .......(......._
    0370: 01 00 43 68 2D 42 20 41 64 64 72 65 73 73 20 56  // ..Ch-B Address V
    0380: 52 65 66 2E 20 20 20 20 20 20 20 20 20 20 20 20  // Ref.            
    0390: 00 00 1E 01 04 00 F8 24 01 00 F8 24 01 00 6A 03  // .......$...$..j.
    03A0: 00 00 00 00 00 00 03 00 00 00 A0 86 01 00 00 FA  // ................
    03B0: 00 00 E8 03 00 00 10 21 01 00 A0 86 01 00 F8 24  // .......!.......$
    03C0: 01 00 E8 03 00 00 F8 24 01 00 A0 86 01 00 E0 28  // .......$.......(
    03D0: 01 00 E8 03 00 00 90 5F 01 00 43 68 2D 43 20 41  // ......._..Ch-C A
    03E0: 64 64 72 65 73 73 20 56 52 65 66 2E 20 20 20 20  // ddress VRef.    
    03F0: 20 20 20 20 20 20 20 20 00 00 1F 01 04 00 F8 24  //         .......$
    0400: 01 00 F8 24 01 00 68 01 00 00 00 00 00 00 03 00  // ...$..h.........
    0410: 00 00 A0 86 01 00 00 FA 00 00 E8 03 00 00 10 21  // ...............!
    0420: 01 00 A0 86 01 00 F8 24 01 00 E8 03 00 00 F8 24  // .......$.......$
    0430: 01 00 A0 86 01 00 E0 28 01 00 E8 03 00 00 90 5F  // .......(......._
    0440: 01 00 50 43 49 45 20 20 20 20 20 20 20 20 20 20  // ..PCIE          
    0450: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 00  //                .
    0460: 00 00 35 02 04 00 F0 49 02 00 F0 49 02 00 64 02  // ..5....I...I..d.
    0470: 00 00 00 00 00 00 04 00 00 00 A0 86 01 00 A0 86  // ................
    0480: 01 00 10 27 00 00 E0 22 02 00 A0 86 01 00 F0 49  // ...'...".......I
    0490: 02 00 D0 07 00 00 F0 49 02 00 A0 86 01 00 90 59  // .......I.......Y
    04A0: 02 00 D0 07 00 00 70 05 03 00 A0 86 01 00 40 0D  // ......p.......@.
    04B0: 03 00 D0 07 00 00 F0 43 03 00 51 50 49 20 50 4C  // .......C..QPI PL
    04C0: 4C 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // L               
    04D0: 20 20 20 20 20 20 20 20 00 00 37 02 04 00 B0 AD  //         ..7.....
    04E0: 01 00 B0 AD 01 00 62 02 00 00 00 00 00 00 04 00  // ......b.........
    04F0: 00 00 A0 86 01 00 80 38 01 00 10 27 00 00 A0 86  // .......8...'....
    0500: 01 00 A0 86 01 00 B0 AD 01 00 D0 07 00 00 B0 AD  // ................
    0510: 01 00 A0 86 01 00 50 BD 01 00 D0 07 00 00 F0 49  // ......P........I
    0520: 02 00 A0 86 01 00 90 59 02 00 D0 07 00 00 00 71  // .......Y.......q
    0530: 02 00 49 4F 48 20 43 6F 72 65 20 20 20 20 20 20  // ..IOH Core      
    0540: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0550: 00 00 08 02 04 00 B0 AD 01 00 B0 AD 01 00 62 03  // ..............b.
    0560: 00 00 00 00 00 00 03 00 00 00 A0 86 01 00 A0 86  // ................
    0570: 01 00 10 27 00 00 A0 86 01 00 A0 86 01 00 B0 AD  // ...'............
    0580: 01 00 D0 07 00 00 B0 AD 01 00 A0 86 01 00 80 B5  // ................
    0590: 01 00 D0 07 00 00 40 0D 03 00 43 50 55 20 50 4C  // ......@...CPU PL
    05A0: 4C 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // L               
    05B0: 20 20 20 20 20 20 20 20 00 00 0B 00 08 00 20 BF  //         ...... .
    05C0: 02 00 20 BF 02 00 62 01 64 03 00 00 00 00 03 00  // .. ...b.d.......
    05D0: 00 00 A0 86 01 00 D0 FB 01 00 10 27 00 00 10 98  // ...........'....
    05E0: 02 00 A0 86 01 00 20 BF 02 00 D0 07 00 00 20 BF  // ...... ....... .
    05F0: 02 00 A0 86 01 00 C0 CE 02 00 D0 07 00 00 60 D8  // ..............`.
    0600: 03 00 51 50 49 2F 56 74 74 20 56 6F 6C 74 61 67  // ..QPI/Vtt Voltag
    0610: 65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // e               
    0620: 00 00 0C 00 04 00 FC CA 01 00 FC CA 01 00 64 01  // ..............d.
    0630: 64 03 00 00 00 00 04 00 00 00 A0 86 01 00 EC A3  // d...............
    0640: 01 00 D0 07 00 00 EC A3 01 00 A0 86 01 00 BC AB  // ................
    0650: 01 00 D0 07 00 00 2C C3 01 00 A0 86 01 00 FC CA  // ......,.........
    0660: 01 00 D0 07 00 00 FC CA 01 00 A0 86 01 00 CC D2  // ................
    0670: 01 00 D0 07 00 00 1C 13 03 00 43 50 55 20 56 63  // ..........CPU Vc
    0680: 6F 72 65 20 20 20 20 20 20 20 20 20 20 20 20 20  // ore             
    0690: 20 20 20 20 20 20 20 20 00 00 10 00 0B 00 66 E3  //         ......f.
    06A0: 01 00 66 E3 01 00 9C 02 66 01 00 00 00 00 11 00  // ..f.....f.......
    06B0: 00 00 A0 86 01 00 50 C3 00 00 71 02 00 00 8F 6E  // ......P...q....n
    06C0: 02 00 A0 86 01 00 00 71 02 00 D0 07 00 00 00 71  // .......q.......q
    06D0: 02 00 A0 86 01 00 7D 71 02 00 71 02 00 00 D0 78  // ......}q..q....x
    06E0: 02 00 A0 86 01 00 4D 79 02 00 71 02 00 00 A0 80  // ......My..q.....
    06F0: 02 00 A0 86 01 00 1D 81 02 00 71 02 00 00 70 88  // ..........q...p.
    0700: 02 00 A0 86 01 00 ED 88 02 00 71 02 00 00 40 90  // ..........q...@.
    0710: 02 00 A0 86 01 00 BD 90 02 00 71 02 00 00 10 98  // ..........q.....
    0720: 02 00 A0 86 01 00 8D 98 02 00 71 02 00 00 E0 9F  // ..........q.....
    0730: 02 00 A0 86 01 00 5D A0 02 00 71 02 00 00 B0 A7  // ......]...q.....
    0740: 02 00 A0 86 01 00 2D A8 02 00 71 02 00 00 80 AF  // ......-...q.....
    0750: 02 00 A0 86 01 00 FD AF 02 00 71 02 00 00 50 B7  // ..........q...P.
    0760: 02 00 A0 86 01 00 CD B7 02 00 71 02 00 00 20 BF  // ..........q... .
    0770: 02 00 A0 86 01 00 9D BF 02 00 71 02 00 00 F0 C6  // ..........q.....
    0780: 02 00 A0 86 01 00 6D C7 02 00 71 02 00 00 C0 CE  // ......m...q.....
    0790: 02 00 A0 86 01 00 3D CF 02 00 71 02 00 00 90 D6  // ......=...q.....
    07A0: 02 00 A0 86 01 00 0D D7 02 00 71 02 00 00 60 DE  // ..........q...`.
    07B0: 02 00 A0 86 01 00 DD DE 02 00 71 02 00 00 30 E6  // ..........q...0.
    07C0: 02 00 49 43 48 20 49 2F 4F 20 20 20 20 20 20 20  // ..ICH I/O       
    07D0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    07E0: 00 00 11 02 07 00 F0 49 02 00 F0 49 02 00 66 02  // .......I...I..f.
    07F0: 66 01 00 00 00 00 04 00 00 00 A0 86 01 00 28 9A  // f.............(.
    0800: 01 00 10 27 00 00 68 36 02 00 A0 86 01 00 F0 49  // ...'..h6.......I
    0810: 02 00 D0 07 00 00 F0 49 02 00 A0 86 01 00 30 69  // .......I......0i
    0820: 02 00 D0 07 00 00 A0 FD 02 00 A0 86 01 00 40 0D  // ..............@.
    0830: 03 00 D0 07 00 00 70 82 03 00 49 43 48 20 43 6F  // ......p...ICH Co
    0840: 72 65 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // re              
    0850: 20 20 20 20 20 20 20 20 00 00 12 02 07 00 B0 AD  //         ........
    0860: 01 00 B0 AD 01 00 66 03 66 01 00 00 00 00 03 00  // ......f.f.......
    0870: 00 00 A0 86 01 00 60 67 01 00 10 27 00 00 70 8E  // ......`g...'..p.
    0880: 01 00 A0 86 01 00 B0 AD 01 00 D0 07 00 00 B0 AD  // ................
    0890: 01 00 A0 86 01 00 50 BD 01 00 D0 07 00 00 B0 A1  // ......P.........
    08A0: 03 00 24 48 45 41 4C 54 48 24 68 02 01 B1 00 00  // ..$HEALTH$h.....
    08B0: 00 00 0B 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 43 61 73 65 00 00 00 00 00 00 00 00 00 00  // ..Case..........
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 08 01 00 00 01 00 00 00 00 00 00 00 01 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 43 50 55 00 00 00  // ..........CPU...
    0900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0910: 00 00 00 00 00 00 00 00 00 00 01 02 00 00 E8 03  // ................
    0920: 00 00 00 00 00 00 B0 04 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 44 52 41 4D 00 00 00 00 00 00 00 00 00 00  // ..DRAM..........
    0940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0950: 00 00 01 04 00 00 E8 03 00 00 00 00 00 00 F0 05  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 2B 35 56 00 00 00  // ..........+5V...
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 00 00 00 00 00 01 20 00 00 E8 03  // ........... ....
    0990: 00 00 00 00 00 00 87 13 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 53 79 73 74 65 6D 00 00 00 00 00 00 00 00  // ..System........
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 02 01 00 00 01 00 00 00 00 00 00 00 2A 00  // ..............*.
    09D0: 00 00 00 00 00 00 00 00 00 00 53 79 73 74 65 6D  // ..........System
    09E0: 20 33 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  3..............
    09F0: 00 00 00 00 00 00 00 00 00 00 02 10 00 00 01 00  // ................
    0A00: 00 00 00 00 00 00 2A 00 00 00 00 00 00 00 00 00  // ......*.........
    0A10: 00 00 43 50 55 00 00 00 00 00 00 00 00 00 00 00  // ..CPU...........
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 02 02 00 00 01 00 00 00 00 00 00 00 23 00  // ..............#.
    0A40: 00 00 00 00 00 00 00 00 00 00 43 50 55 00 00 00  // ..........CPU...
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 04 01 00 00 01 00  // ................
    0A70: 00 00 00 00 00 00 D2 03 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 50 6F 77 65 72 00 00 00 00 00 00 00 00 00  // ..Power.........
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 04 02 00 00 01 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 53 79 73 74 65 6D  // ..........System
    0AC0: 20 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  1..............
    0AD0: 00 00 00 00 00 00 00 00 00 00 04 04 00 00 01 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 53 79 73 74 65 6D 20 32 00 00 00 00 00 00  // ..System 2......
    0B00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B10: 00 00 04 08 00 00 01 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 00 00                    // ..........


