
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20191213
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000001B7  0x01  "GATEWA"  "Cpu2Ist "  0x00000175  "MSFT"   0x01000013
 02)  MCFG  0x0000003C  0x01  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 03)  ASF!  0x000000A6  0x20  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 04)  APIC  0x00000078  0x01  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 05)  SSDT  0x000001B7  0x01  "GATEWA"  "Cpu0Ist "  0x00000175  "MSFT"   0x01000013
 06)  DSDT  0x00003EBB  0x01  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 07)  WDDT  0x00000040  0x01  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 08)  SSDT  0x000001B7  0x01  "GATEWA"  "Cpu3Ist "  0x00000175  "MSFT"   0x01000013
 09)  SSDT  0x000001B7  0x01  "GATEWA"  "Cpu1Ist "  0x00000175  "MSFT"   0x01000013
 10)  FACP  0x00000074  0x01  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 11)  SSDT  0x000001BC  0x01  "GATEWA"  "CpuPm   "  0x00000175  "MSFT"   0x01000013
 12)  HPET  0x00000038  0x01  "GATEWA"  "SYSTEM  "  0x00000175  "MSFT"   0x01000013
 13)  FACS  0x00000040  0x00

Found 13 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000078
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 98
[00Ah 0010   6]                       Oem ID : "GATEWA"
[010h 0016   8]                 Oem Table ID : "SYSTEM  "
[018h 0024   4]                 Oem Revision : 00000175
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 82
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 83
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 02
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 01
[06Fh 0111   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 04 [Local APIC NMI]
[073h 0115   1]                       Length : 06
[074h 0116   1]                 Processor ID : 02
[075h 0117   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0
[077h 0119   1]         Interrupt Input LINT : 01

Raw Table Data: Length 120 (0x78)

    0000: 41 50 49 43 78 00 00 00 01 98 47 41 54 45 57 41  // APICx.....GATEWA
    0010: 53 59 53 54 45 4D 20 20 75 01 00 00 4D 53 46 54  // SYSTEM  u...MSFT
    0020: 13 00 00 01 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 82  // ................
    0040: 00 00 00 00 00 08 04 83 00 00 00 00 01 0C 02 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 01 00  // ................
    0070: 00 01 04 06 02 00 00 01                          // ........


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A6
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 72
[00Ah 0010   6]                       Oem ID : "GATEWA"
[010h 0016   8]                 Oem Table ID : "SYSTEM  "
[018h 0024   4]                 Oem Revision : 00000175
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : FF
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 23 F0 00 00 00 03 F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 57010000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0000
[08Bh 0139   2]                 Boot Options : 0001
[08Dh 0141   2]               Oem Parameters : 0000

[08Fh 0143   1]                Subtable Type : 84 [ASF Address]
[090h 0144   1]                     Reserved : 00
[091h 0145   2]                       Length : 0010
[093h 0147   1]                Eprom Address : 00
[094h 0148   1]                 Device Count : 0A
[095h 0149   1]                    Addresses : A0 A2 A4 A6 5C D2 A0 A2 A4 A6 

[09Fh 0159   1]                Subtable Type : F6 [Unknown Subtable Type]
[0A0h 0160   1]                     Reserved : 70
[0A1h 0161   2]                       Length : 6174

**** Unknown ASF subtable type 0xF6

Raw Table Data: Length 166 (0xA6)

    0000: 41 53 46 21 A6 00 00 00 20 72 47 41 54 45 57 41  // ASF!.... rGATEWA
    0010: 53 59 53 54 45 4D 20 20 75 01 00 00 4D 53 46 54  // SYSTEM  u...MSFT
    0020: 13 00 00 01 00 00 10 00 FF FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 23 F0 00 00  // ............#...
    0080: 00 03 F0 00 00 00 01 57 00 00 00 01 00 00 00 84  // .......W........
    0090: 00 10 00 00 0A A0 A2 A4 A6 5C D2 A0 A2 A4 A6 F6  // .........\......
    00A0: 70 74 61 6C B8 00                                // ptal..


DSDT
----
DefinitionBlock ("", "DSDT", 1, "GATEWA", "SYSTEM  ", 0x00000175)
{
    External (SCIS, UnknownObj)

    Scope (\_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06){}
        Processor (CPU1, 0x02, 0x00000410, 0x06){}
        Processor (CPU2, 0x03, 0x00000410, 0x06){}
        Processor (CPU3, 0x04, 0x00000410, 0x06){}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\NOS1, Package (0x04)
    {
        0x01, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Scope (\_GPE)
    {
        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UHC5, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L06, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.IGFX.GSSE)
            {
                \_SB.PCI0.IGFX.GSCI ()
            }
            Else
            {
                SCIS = 0x01
            }
        }

        Method (_L07, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.PEX0.XPM1 (0x00))
            {
                Notify (\_SB.PCI0.PEX0, 0x02) // Device Wake
            }

            If (\_SB.PCI0.PEX1.XPM1 (0x01))
            {
                Notify (\_SB.PCI0.PEX1, 0x02) // Device Wake
            }

            If (\_SB.PCI0.PEX2.XPM1 (0x02))
            {
                Notify (\_SB.PCI0.PEX2, 0x02) // Device Wake
            }

            If (\_SB.PCI0.PEX3.XPM1 (0x03))
            {
                Notify (\_SB.PCI0.PEX3, 0x02) // Device Wake
            }

            If (\_SB.PCI0.PEX4.XPM1 (0x04))
            {
                Notify (\_SB.PCI0.PEX4, 0x02) // Device Wake
            }

            If (\_SB.PCI0.PEX5.XPM1 (0x05))
            {
                Notify (\_SB.PCI0.PEX5, 0x02) // Device Wake
            }

            If (\_SB.PCI0.PEGP.XPM1 (0x08))
            {
                Notify (\_SB.PCI0.PEGP, 0x02) // Device Wake
            }

            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L0A, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.LPC.IELK, 0x81) // Information Change
            \_SB.PCI0.LPC.IELK.ELPB = 0x01
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P32, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UHC3, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.EHCI, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.AZAL, 0x02) // Device Wake
            Notify (\_SB.PCI0.ILAN, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.UHC4, 0x02) // Device Wake
            Notify (\_SB.PCI0.UH42, 0x02) // Device Wake
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }

        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            ILED = 0x02
            \_SB.PCI0.LPC.WAKE ()
            Notify (\_SB.SLPB, 0x02) // Device Wake
        }
    }

    Device (\_SB.SLPB)
    {
        Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x1D, 
                0x04
            })
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        \_SB.PCI0.LPC.WAK (Arg0)
        If (CondRefOf (_OSI, Local0))
        {
            OSTY = 0x21
        }

        Notify (\_SB.PCI0.UHC1, 0x00) // Bus Check
        Notify (\_SB.PCI0.UHC2, 0x00) // Bus Check
        Notify (\_SB.PCI0.UHC3, 0x00) // Bus Check
        Notify (\_SB.PCI0.UHC4, 0x00) // Bus Check
        Notify (\_SB.PCI0.UH42, 0x00) // Bus Check
        Notify (\_SB.PCI0.UHC5, 0x00) // Bus Check
        Notify (\_SB.PCI0.EHCI, 0x00) // Bus Check
        Notify (\_SB.PCI0.EHC2, 0x00) // Bus Check
        If ((Arg0 == 0x04))
        {
            If ((WAS4 == 0x01))
            {
                Notify (\_SB.SLPB, 0x02) // Device Wake
            }
        }

        Return (0x00)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        \_SB.PCI0.PEX0.XPM1 (0x00)
        \_SB.PCI0.PEX1.XPM1 (0x00)
        \_SB.PCI0.PEX2.XPM1 (0x00)
        \_SB.PCI0.PEX3.XPM1 (0x00)
        \_SB.PCI0.PEX4.XPM1 (0x00)
        \_SB.PCI0.PEX5.XPM1 (0x00)
        \_SB.PCI0.PEGP.XPM1 (0x08)
        While (PXGS)
        {
            PXGS = 0x01
        }

        ILED = 0x01
        \_SB.PCI0.LPC.PTS (Arg0)
    }

    Name (\GPIC, Zero)
    Method (\_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        \GPIC = Arg0
    }

    OperationRegion (DBG0, SystemIO, 0x80, 0x01)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        CMSI,   8, 
        CMSD,   8
    }

    IndexField (CMSI, CMSD, ByteAcc, NoLock, Preserve)
    {
        Offset (0x6E), 
        WAS4,   8, 
        OSTY,   8, 
        Offset (0x7D), 
        HPEE,   1, 
        VOFF,   1, 
        Offset (0x7E), 
            ,   2, 
        MSEP,   1, 
            ,   1, 
        TPME,   1, 
        SPND,   1, 
        KBEP,   1, 
        MSAR,   1
    }

    OperationRegion (GPE0, SystemIO, 0x0428, 0x02)
    Field (GPE0, ByteAcc, NoLock, WriteAsZeros)
    {
            ,   9, 
        PXGS,   1, 
        Offset (0x02)
    }

    OperationRegion (IGPO, SystemIO, 0x050C, 0x04)
    Field (IGPO, ByteAcc, NoLock, Preserve)
    {
        Offset (0x03), 
            ,   3, 
        ILED,   2
    }

    Scope (\_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (_OSI, Local0))
                {
                    OSTY = 0x21
                }
            }

            Name (PBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xF8000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x06B00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (PBRS, \_SB.PCI0._Y00._MIN, TMIN)  // _MIN: Minimum Base Address
                CreateDWordField (PBRS, \_SB.PCI0._Y00._MAX, TMAX)  // _MAX: Maximum Base Address
                CreateDWordField (PBRS, \_SB.PCI0._Y00._LEN, TLEN)  // _LEN: Length
                If ((MDET () != 0xF0000000))
                {
                    TMIN = MDET ()
                    TMAX = 0xEFFFFFFF
                    TLEN = (TMAX - TMIN) /* \_SB_.PCI0._CRS.TMIN */
                    TLEN++
                }

                EROM ()
                Return (PBRS) /* \_SB_.PCI0.PBRS */
            }

            OperationRegion (TMEM, PCI_Config, 0xB0, 0x02)
            Field (TMEM, WordAcc, NoLock, Preserve)
            {
                TOUD,   16
            }

            Method (MDET, 0, NotSerialized)
            {
                Local0 = TOUD /* \_SB_.PCI0.TOUD */
                Local0 <<= 0x10
                Return (Local0)
            }

            OperationRegion (PAMX, PCI_Config, 0x90, 0x07)
            Field (PAMX, ByteAcc, NoLock, Preserve)
            {
                    ,   4, 
                BSEG,   4, 
                PAMS,   48
            }

            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07){})
            Method (EROM, 0, NotSerialized)
            {
                CreateDWordField (PBRS, \_SB.PCI0._Y01._MIN, RMIN)  // _MIN: Minimum Base Address
                CreateDWordField (PBRS, \_SB.PCI0._Y01._MAX, RMAX)  // _MAX: Maximum Base Address
                CreateDWordField (PBRS, \_SB.PCI0._Y01._LEN, RLEN)  // _LEN: Length
                CreateByteField (PAMB, 0x06, BREG)
                PAMB = PAMS /* \_SB_.PCI0.PAMS */
                BREG = BSEG /* \_SB_.PCI0.BSEG */
                RMIN = 0x00
                RMAX = 0x00
                RLEN = 0x00
                Local0 = 0x00
                While ((Local0 < 0x0D))
                {
                    Local1 = (Local0 >> 0x01)
                    Local2 = DerefOf (PAMB [Local1])
                    If ((Local0 & 0x01))
                    {
                        Local2 >>= 0x04
                    }

                    Local2 &= 0x03
                    If (RMIN)
                    {
                        If ((Local2 == 0x03))
                        {
                            RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                            If ((RMAX == 0x000F3FFF))
                            {
                                RMAX = 0x000FFFFF
                            }

                            RLEN = (RMAX - RMIN) /* \_SB_.PCI0.EROM.RMIN */
                            RLEN++
                        }
                        Else
                        {
                            Local0 = 0x0C
                        }
                    }
                    ElseIf ((Local2 == 0x03))
                    {
                        RMIN = DerefOf (ERNG [Local0])
                        RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                        If ((RMAX == 0x000F3FFF))
                        {
                            RMAX = 0x000FFFFF
                        }

                        RLEN = (RMAX - RMIN) /* \_SB_.PCI0.EROM.RMIN */
                        RLEN++
                    }
                    Else
                    {
                    }

                    Local0++
                }
            }

            Device (IOCM)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xF0000000,         // Address Base
                        0x08000000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED13000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED14000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED1C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFED45000,         // Address Base
                        0x00055000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0x000C0000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0x000E0000,         // Address Base
                        0x00020000,         // Address Length
                        )
                })
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((\GPIC == Zero))
                {
                    Return (Package (0x18)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            \_SB.PCI0.LPC.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            \_SB.PCI0.LPC.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            \_SB.PCI0.LPC.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            \_SB.PCI0.LPC.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            \_SB.PCI0.LPC.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKH, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            \_SB.PCI0.LPC.LNKD, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            \_SB.PCI0.LPC.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            \_SB.PCI0.LPC.LNKA, 
                            0x00
                        }
                    })
                }
                Else
                {
                    Return (Package (0x18)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            0x00, 
                            0x00, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x00, 
                            0x00, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x00, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x01, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x00, 
                            0x00, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x01, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x00, 
                            0x00, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x01, 
                            0x00, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            0x00, 
                            0x10
                        }
                    })
                }
            }

            Device (P32)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.P32_.UPS1 */
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x11)
                        {
                            Package (0x04)
                            {
                                0x0008FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKF, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKG, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x11)
                        {
                            Package (0x04)
                            {
                                0x0008FFFF, 
                                0x00, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x17
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x00, 
                                0x00, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x01, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x02, 
                                0x00, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0x0001FFFF, 
                                0x03, 
                                0x00, 
                                0x17
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0x0002FFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x02, 
                                0x00, 
                                0x15
                            }, 

                            Package (0x04)
                            {
                                0x0003FFFF, 
                                0x03, 
                                0x00, 
                                0x16
                            }
                        })
                    }
                }
            }

            Device (LPC)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (PRR0, PCI_Config, 0x60, 0x04)
                Field (PRR0, AnyAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8
                }

                OperationRegion (PRR1, PCI_Config, 0x68, 0x04)
                Field (PRR1, AnyAcc, NoLock, Preserve)
                {
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRA & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRA |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y02)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKA._CRS._Y02._INT, IRQW)  // _INT: Interrupts
                        If ((PIRA & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRA & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKA._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRA = Local0
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRB & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRB |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y03)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKB._CRS._Y03._INT, IRQW)  // _INT: Interrupts
                        If ((PIRB & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRB & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKB._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRB = Local0
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRC |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y04)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKC._CRS._Y04._INT, IRQW)  // _INT: Interrupts
                        If ((PIRC & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRC & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKC._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRC = Local0
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRD & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRD |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y05)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKD._CRS._Y05._INT, IRQW)  // _INT: Interrupts
                        If ((PIRD & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRD & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKD._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRD = Local0
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRE & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y06)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKE._CRS._Y06._INT, IRQW)  // _INT: Interrupts
                        If ((PIRE & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRE & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKE._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRF & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = (PIRB | 0x80)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y07)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKF._CRS._Y07._INT, IRQW)  // _INT: Interrupts
                        If ((PIRF & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRF & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKF._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRF = Local0
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRG & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y08)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKG._CRS._Y08._INT, IRQW)  // _INT: Interrupts
                        If ((PIRG & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRG & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKG._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRG = Local0
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PIRH & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH |= 0x80
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, _Y09)
                                {0}
                        })
                        CreateWordField (BUF0, \_SB.PCI0.LPC.LNKH._CRS._Y09._INT, IRQW)  // _INT: Interrupts
                        If ((PIRH & 0x80))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        IRQW = (Local0 << (PIRH & 0x0F))
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LNKH._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {3,4,5,7,9,10,11,12}
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQW)
                        FindSetRightBit (IRQW, Local0)
                        If ((IRQW != Zero))
                        {
                            Local0 &= 0x7F
                            Local0--
                        }
                        Else
                        {
                            Local0 |= 0x80
                        }

                        PIRH = Local0
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                    })
                }

                OperationRegion (TPMM, SystemMemory, 0xFED40000, 0x01)
                Field (TPMM, AnyAcc, NoLock, Preserve)
                {
                    TPMA,   8
                }

                Device (TPM)
                {
                    Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED40000,         // Address Base
                            0x00005000,         // Address Length
                            )
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((TPMA == 0xFF))
                        {
                            Return (0x00)
                        }
                        ElseIf (TPME)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Name (TPMR, 0x00)
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                        {
                            If ((Arg2 == 0x00))
                            {
                                Return (0x3F)
                            }

                            If ((Arg2 == 0x01))
                            {
                                Return ("1.0")
                            }

                            If ((Arg2 == 0x02))
                            {
                                TPMR = Arg3
                                Return (0x00)
                            }

                            If ((Arg2 == 0x03))
                            {
                                Return (Package (0x02)
                                {
                                    0x00, 
                                    TPMR
                                })
                            }

                            If ((Arg2 == 0x04))
                            {
                                Return (0x02)
                            }

                            If ((Arg2 == 0x05))
                            {
                                Return (Package (0x03)
                                {
                                    0x00, 
                                    0x00, 
                                    0x00
                                })
                            }
                        }

                        If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
                        {
                            If ((Arg2 == 0x00))
                            {
                                Return (0x03)
                            }

                            If ((Arg2 == 0x01))
                            {
                                Return (0x00)
                            }
                        }

                        Return (0x00)
                    }
                }

                Device (XTR2)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((KBEP || MSEP))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMC1, SystemIO, 0x2E, 0x02)
                Field (SMC1, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x20), 
                    DIDR,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x72), 
                    INT1,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    Offset (0xF8), 
                    OPT8,   8
                }

                Mutex (MUT0, 0x00)
                Method (ENFG, 0, NotSerialized)
                {
                    Acquire (MUT0, 0x0FFF)
                    INDX = 0x55
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDX = 0xAA
                    Release (MUT0)
                }

                OperationRegion (RTIO, SystemIO, 0x06C0, 0x20)
                Field (RTIO, ByteAcc, NoLock, Preserve)
                {
                    PSTS,   8, 
                    Offset (0x04), 
                    PMEN,   8, 
                    Offset (0x0A), 
                    PST1,   8, 
                    Offset (0x0E), 
                    PEN1,   8, 
                    Offset (0x10), 
                    LED,    8
                }

                Device (FDC0)
                {
                    Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        INDX = 0x55
                        LDN = 0x00
                        If ((ACTR == 0xFF))
                        {
                            INDX = 0xAA
                            Return (0x00)
                        }

                        If (ACTR)
                        {
                            INDX = 0xAA
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            INDX = 0xAA
                            Return (0x0D)
                        }
                        Else
                        {
                            INDX = 0xAA
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INDX = 0x55
                        LDN = 0x00
                        ACTR = 0x00
                        INDX = 0xAA
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                _Y0A)
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                _Y0B)
                            IRQNoFlags (_Y0C)
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, _Y0D)
                                {2}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.LPC.FDC0._CRS._Y0A._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOHI)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.FDC0._CRS._Y0A._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IORH)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.FDC0._CRS._Y0B._MIN, I2LO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x0B, I2HI)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.FDC0._CRS._Y0B._MAX, I2RL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x0D, I2RH)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.FDC0._CRS._Y0C._INT, IRQL)  // _INT: Interrupts
                        CreateByteField (BUF0, \_SB.PCI0.LPC.FDC0._CRS._Y0D._DMA, DMAV)  // _DMA: Direct Memory Access
                        INDX = 0x55
                        LDN = 0x00
                        IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        I2LO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        I2RL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        I2HI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        I2RH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IRQL = (0x01 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                        DMAV = (0x01 << DMCH) /* \_SB_.PCI0.LPC_.DMCH */
                        INDX = 0xAA
                        Return (BUF0) /* \_SB_.PCI0.LPC_.FDC0._CRS.BUF0 */
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x03F0,             // Range Minimum
                                    0x03F0,             // Range Maximum
                                    0x01,               // Alignment
                                    0x06,               // Length
                                    )
                                IO (Decode16,
                                    0x03F7,             // Range Minimum
                                    0x03F7,             // Range Maximum
                                    0x01,               // Alignment
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {6}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {2}
                            }
                            EndDependentFn ()
                            /*** Disassembler: inserted missing EndDependentFn () ***/
                        })
                        Return (BUF0) /* \_SB_.PCI0.LPC_.FDC0._PRS.BUF0 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateByteField (Arg0, 0x11, IRQL)
                        CreateByteField (Arg0, 0x14, DMAV)
                        INDX = 0x55
                        LDN = 0x00
                        Local0 = (IOLO & 0xF8)
                        IOAL = Local0
                        IOAH = IOHI /* \_SB_.PCI0.LPC_.FDC0._SRS.IOHI */
                        FindSetRightBit (IRQL, INTR) /* \_SB_.PCI0.LPC_.INTR */
                        If ((IRQL != Zero))
                        {
                            INTR--
                        }

                        If ((DMAV == Zero))
                        {
                            DMCH = 0x04
                        }
                        Else
                        {
                            FindSetRightBit (DMAV, DMCH) /* \_SB_.PCI0.LPC_.DMCH */
                            DMCH--
                        }

                        ACTR = 0x01
                        INDX = 0xAA
                    }
                }

                Device (LPT)
                {
                    Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        INDX = 0x55
                        LDN = 0x01
                        Local0 = (OPT8 & 0x0F)
                        If ((Local0 != 0x04))
                        {
                            If ((ACTR == 0xFF))
                            {
                                INDX = 0xAA
                                Return (0x00)
                            }

                            If (ACTR)
                            {
                                INDX = 0xAA
                                Return (0x0F)
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                INDX = 0xAA
                                Return (0x0D)
                            }
                            Else
                            {
                                INDX = 0xAA
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            INDX = 0xAA
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INDX = 0x55
                        LDN = 0x01
                        ACTR = 0x00
                        INDX = 0xAA
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y0E)
                            IRQNoFlags (_Y0F)
                                {7}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.LPC.LPT._CRS._Y0E._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOHI)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.LPT._CRS._Y0E._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IORH)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.LPT._CRS._Y0F._INT, IRQL)  // _INT: Interrupts
                        INDX = 0x55
                        LDN = 0x01
                        IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IRQL = (0x01 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                        INDX = 0xAA
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LPT_._CRS.BUF0 */
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x02, 0x00)
                            {
                                IO (Decode16,
                                    0x0100,             // Range Minimum
                                    0x03FC,             // Range Maximum
                                    0x04,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {1,3,4,5,6,7,8,10,11,12,13,14,15}
                            }
                            EndDependentFn ()
                            /*** Disassembler: inserted missing EndDependentFn () ***/
                        })
                        Return (BUF0) /* \_SB_.PCI0.LPC_.LPT_._PRS.BUF0 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateByteField (Arg0, 0x09, IRQL)
                        INDX = 0x55
                        LDN = 0x01
                        IOAL = IOLO /* \_SB_.PCI0.LPC_.LPT_._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.LPC_.LPT_._SRS.IOHI */
                        FindSetRightBit (IRQL, INTR) /* \_SB_.PCI0.LPC_.INTR */
                        If ((IRQL != Zero))
                        {
                            INTR--
                        }

                        ACTR = 0x01
                        INDX = 0xAA
                    }
                }

                Device (ECP)
                {
                    Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        INDX = 0x55
                        LDN = 0x01
                        Local0 = (OPT8 & 0x0F)
                        If ((Local0 == 0x04))
                        {
                            If ((ACTR == 0xFF))
                            {
                                INDX = 0xAA
                                Return (0x00)
                            }

                            If (ACTR)
                            {
                                INDX = 0xAA
                                Return (0x0F)
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                INDX = 0xAA
                                Return (0x0D)
                            }
                            Else
                            {
                                INDX = 0xAA
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            INDX = 0xAA
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INDX = 0x55
                        LDN = 0x01
                        ACTR = 0x00
                        INDX = 0xAA
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y10)
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y11)
                            IRQNoFlags (_Y12)
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, _Y13)
                                {3}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.LPC.ECP._CRS._Y10._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOHI)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.ECP._CRS._Y10._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IORH)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.ECP._CRS._Y11._MIN, IULO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x0B, IUHI)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.ECP._CRS._Y11._MAX, IURL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x0D, IURH)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.ECP._CRS._Y12._INT, IRQL)  // _INT: Interrupts
                        CreateByteField (BUF0, \_SB.PCI0.LPC.ECP._CRS._Y13._DMA, DMAV)  // _DMA: Direct Memory Access
                        INDX = 0x55
                        LDN = 0x01
                        IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IULO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IURL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IUHI = (IOAH + 0x04)
                        IURH = (IOAH + 0x04)
                        Local0 = 0x01
                        IRQL = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                        If ((DMCH == 0x04))
                        {
                            Local0 = Zero
                        }
                        Else
                        {
                            Local0 = One
                        }

                        DMAV = (Local0 << DMCH) /* \_SB_.PCI0.LPC_.DMCH */
                        INDX = 0xAA
                        Return (BUF0) /* \_SB_.PCI0.LPC_.ECP_._CRS.BUF0 */
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            EndDependentFn ()
                        })
                        Return (BUF0) /* \_SB_.PCI0.LPC_.ECP_._PRS.BUF0 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateByteField (Arg0, 0x11, IRQL)
                        CreateByteField (Arg0, 0x14, DMAV)
                        INDX = 0x55
                        LDN = 0x01
                        IOAL = IOLO /* \_SB_.PCI0.LPC_.ECP_._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.LPC_.ECP_._SRS.IOHI */
                        FindSetRightBit (IRQL, INTR) /* \_SB_.PCI0.LPC_.INTR */
                        If ((IRQL != Zero))
                        {
                            INTR--
                        }

                        If ((DMAV == Zero))
                        {
                            DMCH = 0x04
                        }
                        Else
                        {
                            FindSetRightBit (DMAV, DMCH) /* \_SB_.PCI0.LPC_.DMCH */
                            DMCH--
                        }

                        ACTR = 0x01
                        INDX = 0xAA
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (MSEP)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (KBEP)
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPC_.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPC_.PS2M.CRS2 */
                        }
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (KBEP)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        INDX = 0x55
                        LDN = 0x03
                        If ((ACTR == 0xFF))
                        {
                            INDX = 0xAA
                            Return (0x00)
                        }

                        If (ACTR)
                        {
                            INDX = 0xAA
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            INDX = 0xAA
                            Return (0x0D)
                        }
                        Else
                        {
                            INDX = 0xAA
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INDX = 0x55
                        LDN = 0x03
                        ACTR = 0x00
                        INDX = 0xAA
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x08,               // Alignment
                                0x08,               // Length
                                _Y14)
                            IRQNoFlags (_Y15)
                                {4}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.LPC.UAR1._CRS._Y14._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOHI)
                        CreateByteField (BUF0, \_SB.PCI0.LPC.UAR1._CRS._Y14._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IORH)
                        CreateWordField (BUF0, \_SB.PCI0.LPC.UAR1._CRS._Y15._INT, IRQL)  // _INT: Interrupts
                        INDX = 0x55
                        LDN = 0x03
                        IOLO = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IORL = IOAL /* \_SB_.PCI0.LPC_.IOAL */
                        IOHI = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        IORH = IOAH /* \_SB_.PCI0.LPC_.IOAH */
                        Local0 = 0x01
                        IRQL = (Local0 << INTR) /* \_SB_.PCI0.LPC_.INTR */
                        INDX = 0xAA
                        Return (BUF0) /* \_SB_.PCI0.LPC_.UAR1._CRS.BUF0 */
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x00, 0x02)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x02, 0x00)
                            {
                                IO (Decode16,
                                    0x0100,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {1,3,4,5,6,7,8,10,11,12,13,14,15}
                            }
                            EndDependentFn ()
                            /*** Disassembler: inserted missing EndDependentFn () ***/
                        })
                        Return (BUF0) /* \_SB_.PCI0.LPC_.UAR1._PRS.BUF0 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x09, IRQL)
                        INDX = 0x55
                        LDN = 0x03
                        IOAL = IOLO /* \_SB_.PCI0.LPC_.UAR1._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.LPC_.UAR1._SRS.IOHI */
                        FindSetRightBit (IRQL, INTR) /* \_SB_.PCI0.LPC_.INTR */
                        If ((IRQL != Zero))
                        {
                            INTR--
                        }

                        ACTR = 0x01
                        INDX = 0xAA
                    }

                    Name (CPS4, Package (0x02)
                    {
                        0x1D, 
                        0x04
                    })
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (CPS4) /* \_SB_.PCI0.LPC_.UAR1.CPS4 */
                    }

                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If ((Arg0 == Zero))
                        {
                            PEN1 &= 0xFB
                        }

                        If ((Arg0 == One))
                        {
                            PST1 = PST1 /* \_SB_.PCI0.LPC_.PST1 */
                            PSTS = PSTS /* \_SB_.PCI0.LPC_.PSTS */
                            PEN1 |= 0x04
                        }
                    }
                }

                Method (WAK, 1, Serialized)
                {
                    If (((Arg0 == 0x01) || (Arg0 == 0x03)))
                    {
                        ENFG ()
                        Local0 = (DIDR & 0xFC)
                        If ((Local0 == 0xF0))
                        {
                            LDN = 0x06
                            ACTR = 0x01
                            LDN = 0x05
                            ACTR = 0x01
                        }
                        Else
                        {
                            LDN = 0x06
                            OPT0 = 0x00
                        }

                        EXFG ()
                    }

                    IO80 = (Arg0 << 0x04)
                    PST1 = PST1 /* \_SB_.PCI0.LPC_.PST1 */
                    PSTS = PSTS /* \_SB_.PCI0.LPC_.PSTS */
                    PEN1 = 0x00
                    PMEN = 0x00
                    LED = 0x0F
                    VOFF = 0x00
                }

                Method (PTS, 1, NotSerialized)
                {
                    IO80 = Arg0
                    PST1 = PST1 /* \_SB_.PCI0.LPC_.PST1 */
                    PSTS = PSTS /* \_SB_.PCI0.LPC_.PSTS */
                    If (((Arg0 == 0x01) || (Arg0 == 0x03)))
                    {
                        PEN1 |= 0x18 /* \_SB_.PCI0.LPC_.PEN1 */
                    }

                    PMEN = 0x01
                    If (((Arg0 == 0x01) || (Arg0 == 0x03)))
                    {
                        ENFG ()
                        Local0 = (DIDR & 0xFC)
                        If ((Local0 == 0xF0))
                        {
                            LDN = 0x05
                            ACTR = 0x00
                            LDN = 0x06
                            ACTR = 0x00
                        }
                        Else
                        {
                            LDN = 0x06
                            OPT0 = 0x60
                        }

                        EXFG ()
                        LED = 0x01
                        If (((Arg0 == 0x01) || (Arg0 == 0x03)))
                        {
                            If ((VOFF == 0x01))
                            {
                                LED = 0x00
                            }
                        }
                    }
                }

                Method (WAKE, 0, NotSerialized)
                {
                    If ((PSTS & 0x01))
                    {
                        If (((Local0 = (PST1 & 0x04)) && (Local1 = (PEN1 & 0x04))))
                        {
                            PST1 = Local0
                            Notify (\_SB.PCI0.LPC.UAR1, 0x02) // Device Wake
                        }

                        PST1 = PST1 /* \_SB_.PCI0.LPC_.PST1 */
                        PSTS = PSTS /* \_SB_.PCI0.LPC_.PSTS */
                    }
                }

                Device (IELK)
                {
                    Name (_HID, "AWY0001")  // _HID: Hardware ID
                    OperationRegion (ELR0, PCI_Config, 0x00, 0x0100)
                    Field (ELR0, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0xA0), 
                            ,   9, 
                        PBLV,   1, 
                        Offset (0xA2), 
                        Offset (0xB0), 
                            ,   3, 
                        ELPB,   1, 
                        Offset (0xB1), 
                            ,   2, 
                        ELGN,   2, 
                        ELYL,   2, 
                        PVEV,   1, 
                        PBEN,   1, 
                        Offset (0xB3), 
                        ELEN,   1, 
                        Offset (0xB4)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (ELEN)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (SMOD, 1, NotSerialized)
                    {
                        Name (LDON, 0x03)
                        Name (LDOF, 0x00)
                        If (!Arg0)
                        {
                            LED = LDOF /* \_SB_.PCI0.LPC_.IELK.SMOD.LDOF */
                            ELGN = 0x00
                            ELYL = 0x01
                            VOFF = 0x01
                        }
                        Else
                        {
                            LED = LDON /* \_SB_.PCI0.LPC_.IELK.SMOD.LDON */
                            ELGN = 0x01
                            ELYL = 0x00
                            VOFF = 0x00
                        }

                        Return (Zero)
                    }

                    Method (GPBS, 0, NotSerialized)
                    {
                        Return ((PBLV ^ 0x01))
                    }

                    Method (ARPB, 0, NotSerialized)
                    {
                        Return (0x00)
                    }

                    Method (DAPB, 0, NotSerialized)
                    {
                        Return (0x00)
                    }
                }
            }

            OperationRegion (SRCR, SystemMemory, 0xFED1C000, 0x4000)
            Field (SRCR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x3418), 
                CHPD,   1, 
                    ,   1, 
                SATD,   1, 
                SMBD,   1, 
                AZLD,   1, 
                    ,   2, 
                ILND,   1, 
                UH0D,   1, 
                UH1D,   1, 
                UH2D,   1, 
                UH3D,   1, 
                UH4D,   1, 
                    ,   1, 
                LPCD,   1, 
                EHCD,   1, 
                RP1D,   1, 
                RP2D,   1, 
                RP3D,   1, 
                RP4D,   1, 
                RP5D,   1, 
                RP6D,   1, 
                    ,   3, 
                SAD2,   1, 
                Offset (0x341C)
            }

            Device (ILAN)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0D, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.ILAN.PPS1 */
                }
            }

            Device (PEGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEGP.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEGP.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEGP.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEGP.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEGP.SPME */
                    }

                    Return (Local0)
                }
            }

            Device (PEX0)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEX0.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX0.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX0.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX0.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX0.SPME */
                    }

                    Return (Local0)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (PEX1)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEX1.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX1.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX1.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX1.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX1.SPME */
                    }

                    Return (Local0)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }
            }

            Device (PEX2)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEX2.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX2.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX2.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX2.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX2.SPME */
                    }

                    Return (Local0)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x11
                            }
                        })
                    }
                }
            }

            Device (PEX3)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEX3.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX3.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX3.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX3.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX3.SPME */
                    }

                    Return (Local0)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x12
                            }
                        })
                    }
                }
            }

            Device (PEX4)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEX4.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX4.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX4.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX4.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX4.SPME */
                    }

                    Return (Local0)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x13
                            }
                        })
                    }
                }
            }

            Device (PEX5)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Name (PPS1, Package (0x02)
                {
                    0x0B, 
                    0x04
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (PPS1) /* \_SB_.PCI0.PEX5.PPS1 */
                }

                OperationRegion (ORP0, PCI_Config, 0x00, 0xFF)
                Field (ORP0, AnyAcc, NoLock, Preserve)
                {
                    RPID,   32, 
                    Offset (0x34), 
                    CPLT,   8, 
                    Offset (0x58), 
                    SSLC,   10, 
                    Offset (0x5A), 
                    SSLS,   7, 
                    Offset (0x5C), 
                    Offset (0x60), 
                    SQID,   16, 
                    SPME,   1, 
                    SPMP,   1, 
                    Offset (0x64), 
                    Offset (0xB8), 
                    NSLC,   10, 
                    Offset (0xBA), 
                    NSLS,   7, 
                    Offset (0xBC), 
                    Offset (0xC0), 
                    NQID,   16, 
                    NPME,   1, 
                    NPMP,   1, 
                    Offset (0xC4), 
                    Offset (0xDC), 
                        ,   31, 
                    RPSC,   1
                }

                OperationRegion (PCEW, SystemIO, 0x0401, 0x01)
                Field (PCEW, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    PCWS,   1
                }

                Method (XPM1, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX5.NPME */
                        While (NPME)
                        {
                            NPME = 0x01
                        }
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX5.SPME */
                        While (SPME)
                        {
                            SPME = 0x01
                        }

                        While (RPSC)
                        {
                            RPSC = 0x01
                        }
                    }

                    PCWS = 0x01
                    Return (Local0)
                }

                Method (XRPW, 1, NotSerialized)
                {
                    Local0 = Zero
                    If ((RPID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 >= 0x08))
                    {
                        Local0 = NPME /* \_SB_.PCI0.PEX5.NPME */
                    }
                    Else
                    {
                        Local0 = SPME /* \_SB_.PCI0.PEX5.SPME */
                    }

                    Return (Local0)
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If ((\GPIC == Zero))
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                \_SB.PCI0.LPC.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                \_SB.PCI0.LPC.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                \_SB.PCI0.LPC.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                \_SB.PCI0.LPC.LNKA, 
                                0x00
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x10
                            }
                        })
                    }
                }
            }

            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
            }

            Device (UHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x03, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.UHC1.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0xC4, 0x01)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URES,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URES = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URES = 0x03
                    }
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x04, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.UHC2.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0xC4, 0x01)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URES,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URES = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URES = 0x03
                    }
                }
            }

            Device (UHC3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0C, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.UHC3.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0xC4, 0x01)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URES,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URES = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URES = 0x03
                    }
                }
            }

            Device (UHC4)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0E, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.UHC4.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0xC4, 0x01)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URES,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URES = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URES = 0x03
                    }
                }
            }

            Device (EHCI)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0D, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.EHCI.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0x62, 0x02)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URE2,   9
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URE2 = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URE2 = 0x01FF
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0007)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0D, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.EHC2.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0x62, 0x02)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URE2,   9
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URE2 = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URE2 = 0x01FF
                    }
                }
            }

            Device (UH42)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0E, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.UH42.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0xC4, 0x01)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URES,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URES = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URES = 0x03
                    }
                }
            }

            Device (UHC5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x05, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.UHC5.UPS1 */
                }

                OperationRegion (USBR, PCI_Config, 0xC4, 0x01)
                Field (USBR, AnyAcc, NoLock, Preserve)
                {
                    URES,   8
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        URES = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        URES = 0x03
                    }
                }
            }

            Device (AZAL)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Name (UPS1, Package (0x02)
                {
                    0x0D, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (UPS1) /* \_SB_.PCI0.AZAL.UPS1 */
                }

                OperationRegion (AZPM, PCI_Config, 0x55, 0x01)
                Field (AZPM, ByteAcc, NoLock, Preserve)
                {
                    AZWE,   1
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If ((Arg0 == Zero))
                    {
                        AZWE = 0x00
                    }

                    If ((Arg0 == One))
                    {
                        AZWE = 0x01
                    }
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                            })
                            Return (PIB0) /* \_SB_.PCI0.SAT1.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xF5         // .......
                            })
                            Return (PIB1) /* \_SB_.PCI0.SAT1.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                            })
                            Return (PIB0) /* \_SB_.PCI0.SAT1.SECD.S_D0._GTF.PIB0 */
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xF5         // .......
                            })
                            Return (PIB1) /* \_SB_.PCI0.SAT1.SECD.S_D1._GTF.PIB1 */
                        }
                    }
                }
            }

            Device (SAT2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (P_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                            })
                            Return (PIB0) /* \_SB_.PCI0.SAT2.PRID.P_D0._GTF.PIB0 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Device (S_D0)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x07)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xF5         // .......
                            })
                            Return (PIB0) /* \_SB_.PCI0.SAT2.SECD.S_D0._GTF.PIB0 */
                        }
                    }
                }
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFED00000,         // Address Base
                        0x00004000,         // Address Length
                        )
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (HPEE)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }
            }

            Device (IGFX)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (TCOI, SystemIO, 0x0460, 0x08)
                Field (TCOI, WordAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                        ,   9, 
                    SCIS,   1, 
                    Offset (0x06)
                }

                Name (SUCC, 0x01)
                Name (UNSP, 0x00)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    OperationRegion (IGDM, SystemMemory, ASLS, 0x2004)
                    Field (IGDM, AnyAcc, NoLock, Preserve)
                    {
                        SIGN,   128, 
                        SIZE,   32, 
                        OVER,   32, 
                        SVER,   256, 
                        VVER,   128, 
                        GVER,   128, 
                        MBOX,   32, 
                        Offset (0x200), 
                        SCIE,   1, 
                        GEFC,   4, 
                        GXFC,   3, 
                        GESF,   8, 
                        Offset (0x204), 
                        PARM,   32, 
                        Offset (0x2000), 
                        GMOD,   8, 
                        GSIZ,   8
                    }

                    Method (GBDA, 0, Serialized)
                    {
                        PARM = 0x00
                        If ((GESF == 0x00))
                        {
                            PARM = 0x41
                            GESF = 0x00
                            Return (SUCC) /* \_SB_.PCI0.IGFX.SUCC */
                        }

                        If ((GESF == 0x01))
                        {
                            PARM = 0x00
                            GESF = 0x00
                            Return (SUCC) /* \_SB_.PCI0.IGFX.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM |= GIVD /* \_SB_.PCI0.IGFX.GIVD */
                            PARM ^= 0x01
                            PARM |= (GMFN << 0x01)
                            PARM &= ~0x08
                            PARM |= (0x02 << 0x0B)
                            If ((GMOD == 0x00))
                            {
                                PARM |= (GSIZ << 0x11)
                            }
                            Else
                            {
                                PARM |= (GSIZ << 0x0D)
                            }

                            PARM |= (0x01F4 << 0x15)
                            GESF = 0x01
                            Return (SUCC) /* \_SB_.PCI0.IGFX.SUCC */
                        }

                        GESF = 0x00
                        Return (UNSP) /* \_SB_.PCI0.IGFX.UNSP */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == 0x00))
                        {
                            PARM = 0x00
                            GESF = 0x00
                            Return (SUCC) /* \_SB_.PCI0.IGFX.SUCC */
                        }

                        GXFC = 0x04
                        GESF = 0x00
                        Return (UNSP) /* \_SB_.PCI0.IGFX.UNSP */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = 0x00
                    SCIS = 0x01
                    GSSE = 0x00
                    SCIE = 0x00
                    Return (0x00)
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3B
[00Ah 0010   6]                       Oem ID : "GATEWA"
[010h 0016   8]                 Oem Table ID : "SYSTEM  "
[018h 0024   4]                 Oem Revision : 00000175
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                 FACS Address : DFEAF000
[028h 0040   4]                 DSDT Address : DFEF8000
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E5
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000420
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000428
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0010
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000004A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

    0000: 46 41 43 50 74 00 00 00 01 3B 47 41 54 45 57 41  // FACPt....;GATEWA
    0010: 53 59 53 54 45 4D 20 20 75 01 00 00 4D 53 46 54  // SYSTEM  u...MSFT
    0020: 13 00 00 01 00 F0 EA DF 00 80 EF DF 01 01 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 E5 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 20 04 00 00 08 04 00 00  // ........ .......
    0050: 28 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  // (...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 00 10 00 00  // e...............
    0070: A5 04 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 7C
[00Ah 0010   6]                       Oem ID : "GATEWA"
[010h 0016   8]                 Oem Table ID : "SYSTEM  "
[018h 0024   4]                 Oem Revision : 00000175
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0001
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 7C 47 41 54 45 57 41  // HPET8....|GATEWA
    0010: 53 59 53 54 45 4D 20 20 75 01 00 00 4D 53 46 54  // SYSTEM  u...MSFT
    0020: 13 00 00 01 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 01 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "GATEWA"
[010h 0016   8]                 Oem Table ID : "SYSTEM  "
[018h 0024   4]                 Oem Revision : 00000175
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 95 47 41 54 45 57 41  // MCFG<.....GATEWA
    0010: 53 59 53 54 45 4D 20 20 75 01 00 00 4D 53 46 54  // SYSTEM  u...MSFT
    0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "GATEWA", "Cpu2Ist", 0x00000175)
{
    External (_PR_.CPU2, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC2, UnknownObj)

    Scope (_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If ((!(CFGD & 0x4000) && ((PDC2 & 0x09) == 
                0x09)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!(CFGD & 0x4000) && ((PDC2 & 0x09) == 
                0x09)))
            {
                Return (NPSS) /* \_PR_.CPU2.NPSS */
            }

            Return (SPSS) /* \_PR_.CPU2.SPSS */
        }

        Name (SPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x000000A0, 
                0x0000000A, 
                0x000000CC, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x000000A0, 
                0x0000000A, 
                0x000001CC, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x000000A0, 
                0x0000000A, 
                0x000002CC, 
                0x00000002
            }
        })
        Name (NPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A2A, 
                0x00000A2A
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x0000000A, 
                0x0000000A, 
                0x00000824, 
                0x00000824
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x0000000A, 
                0x0000000A, 
                0x0000061D, 
                0x0000061D
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "GATEWA", "Cpu0Ist", 0x00000175)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If ((!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!(CFGD & 0x4000) && ((PDC0 & 0x09) == 
                0x09)))
            {
                Return (NPSS) /* \_PR_.CPU0.NPSS */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x000000A0, 
                0x0000000A, 
                0x000000CC, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x000000A0, 
                0x0000000A, 
                0x000001CC, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x000000A0, 
                0x0000000A, 
                0x000002CC, 
                0x00000002
            }
        })
        Name (NPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A2A, 
                0x00000A2A
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x0000000A, 
                0x0000000A, 
                0x00000824, 
                0x00000824
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x0000000A, 
                0x0000000A, 
                0x0000061D, 
                0x0000061D
            }
        })
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "GATEWA", "Cpu3Ist", 0x00000175)
{
    External (_PR_.CPU3, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC3, UnknownObj)

    Scope (_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If ((!(CFGD & 0x4000) && ((PDC3 & 0x09) == 
                0x09)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!(CFGD & 0x4000) && ((PDC3 & 0x09) == 
                0x09)))
            {
                Return (NPSS) /* \_PR_.CPU3.NPSS */
            }

            Return (SPSS) /* \_PR_.CPU3.SPSS */
        }

        Name (SPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x000000A0, 
                0x0000000A, 
                0x000000CC, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x000000A0, 
                0x0000000A, 
                0x000001CC, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x000000A0, 
                0x0000000A, 
                0x000002CC, 
                0x00000002
            }
        })
        Name (NPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A2A, 
                0x00000A2A
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x0000000A, 
                0x0000000A, 
                0x00000824, 
                0x00000824
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x0000000A, 
                0x0000000A, 
                0x0000061D, 
                0x0000061D
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "GATEWA", "Cpu1Ist", 0x00000175)
{
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If ((!(CFGD & 0x4000) && ((PDC1 & 0x09) == 
                0x09)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((!(CFGD & 0x4000) && ((PDC1 & 0x09) == 
                0x09)))
            {
                Return (NPSS) /* \_PR_.CPU1.NPSS */
            }

            Return (SPSS) /* \_PR_.CPU1.SPSS */
        }

        Name (SPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x000000A0, 
                0x0000000A, 
                0x000000CC, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x000000A0, 
                0x0000000A, 
                0x000001CC, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x000000A0, 
                0x0000000A, 
                0x000002CC, 
                0x00000002
            }
        })
        Name (NPSS, Package (0x03)
        {
            Package (0x06)
            {
                0x00000A64, 
                0x00015BA8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A2A, 
                0x00000A2A
            }, 

            Package (0x06)
            {
                0x00000850, 
                0x000116D2, 
                0x0000000A, 
                0x0000000A, 
                0x00000824, 
                0x00000824
            }, 

            Package (0x06)
            {
                0x0000063C, 
                0x0000D6DA, 
                0x0000000A, 
                0x0000000A, 
                0x0000061D, 
                0x0000061D
            }
        })
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "GATEWA", "CpuPm", 0x00000175)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x80000000, 
            0x80000000, 
            "CPU1IST ", 
            0x80000000, 
            0x80000000, 
            "CPU2IST ", 
            0x80000000, 
            0x80000000, 
            "CPU3IST ", 
            0x80000000, 
            0x80000000
        })
        Name (CFGD, 0x80000000)
        Name (PDC0, 0x80000000)
        Name (PDC1, 0x80000000)
        Name (PDC2, 0x80000000)
        Name (PDC3, 0x80000000)
    }

    Scope (_PR.CPU0)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP0)
            PDC0 = CAP0 /* \_PR_.CPU0._PDC.CAP0 */
            If ((CFGD & 0x02))
            {
                Name (HI0, 0x00)
                If (((PDC0 & 0x09) == 0x09)){}
            }
        }
    }

    Scope (_PR.CPU1)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP0)
            PDC1 = CAP0 /* \_PR_.CPU1._PDC.CAP0 */
            If ((CFGD & 0x02))
            {
                Name (HI1, 0x00)
                If (((PDC1 & 0x09) == 0x09)){}
            }
        }
    }

    Scope (_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP0)
            PDC2 = CAP0 /* \_PR_.CPU2._PDC.CAP0 */
            If ((CFGD & 0x02))
            {
                Name (HI2, 0x00)
                If (((PDC2 & 0x09) == 0x09)){}
            }
        }
    }

    Scope (_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x08, CAP0)
            PDC3 = CAP0 /* \_PR_.CPU3._PDC.CAP0 */
            If ((CFGD & 0x02))
            {
                Name (HI3, 0x00)
                If (((PDC3 & 0x09) == 0x09)){}
            }
        }
    }
}



WDDT
----
[000h 0000   4]                    Signature : "WDDT"    [Watchdog Description Table]
[004h 0004   4]                 Table Length : 00000040
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4A
[00Ah 0010   6]                       Oem ID : "GATEWA"
[010h 0016   8]                 Oem Table ID : "SYSTEM  "
[018h 0024   4]                 Oem Revision : 00000175
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   2]        Specification Version : 0000
[026h 0038   2]                Table Version : 0100
[028h 0040   2]                PCI Vendor ID : 0100

[02Ah 0042  12]               Timer Register : [Generic Address Structure]
[02Ah 0042   1]                     Space ID : 01 [SystemIO]
[02Bh 0043   1]                    Bit Width : FF
[02Ch 0044   1]                   Bit Offset : 00
[02Dh 0045   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Eh 0046   8]                      Address : 0000000000000000

[036h 0054   2]                    Max Count : 003F
[038h 0056   2]                    Min Count : 0004
[03Ah 0058   2]                       Period : 0258
[03Ch 0060   2]       Status (decoded below) : 0001
                                   Available : 1
                                      Active : 0
                                     OS Owns : 0
                                  User Reset : 0
                               Timeout Reset : 0
                            Power Fail Reset : 0
                               Unknown Reset : 0
[03Eh 0062   2]   Capability (decoded below) : 0000
                                  Auto Reset : 0
                               Timeout Alert : 0

Raw Table Data: Length 64 (0x40)

    0000: 57 44 44 54 40 00 00 00 01 4A 47 41 54 45 57 41  // WDDT@....JGATEWA
    0010: 53 59 53 54 45 4D 20 20 75 01 00 00 4D 53 46 54  // SYSTEM  u...MSFT
    0020: 13 00 00 01 00 00 00 01 00 01 01 FF 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 3F 00 04 00 58 02 01 00 00 00  // ......?...X.....


