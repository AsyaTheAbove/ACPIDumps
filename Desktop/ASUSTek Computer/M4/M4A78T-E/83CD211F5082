
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20150717-64
Copyright (c) 2000 - 2015 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   MCFG   0x0000003C     0x01    "091109"  "OEMMCFG "   0x20090911    "MSFT"     0x00000097
   APIC   0x0000006C     0x01    "091109"  "APIC1219"   0x20090911    "MSFT"     0x00000097
   DSDT   0x0000E774     0x01    "A1152 "  "A1152000"   0x00000000    "INTL"     0x20060113
   FACP   0x00000084     0x01    "091109"  "FACP1219"   0x20090911    "MSFT"     0x00000097
   HPET   0x00000038     0x01    "091109"  "OEMHPET "   0x20090911    "MSFT"     0x00000097
   FACS   0x00000040

Found 6 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000006C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 27
[00Ah 0010   6]                       Oem ID : "091109"
[010h 0016   8]                 Oem Table ID : "APIC1219"
[018h 0024   4]                 Oem Revision : 20090911
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 108 (0x6C)

  0000: 41 50 49 43 6C 00 00 00 01 27 30 39 31 31 30 39  // APICl....'091109
  0010: 41 50 49 43 31 32 31 39 11 09 09 20 4D 53 46 54  // APIC1219... MSFT
  0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
  0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 02  // ................
  0040: 01 00 00 00 00 08 04 03 01 00 00 00 01 0C 04 00  // ................
  0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
  0060: 00 00 02 0A 00 09 09 00 00 00 0F 00              // ............


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "A1152", "A1152000", 0x00000000)
{
    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x04), 
        RMBA,   32, 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x80)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        PCIE,   32, 
        Offset (0x31), 
        TPMR,   1, 
        STHP,   1, 
        SHPG,   1, 
        OSCF,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x38078), 
        Offset (0x3807A), 
        PMS7,   1, 
        Offset (0x50078), 
        Offset (0x5007A), 
        PMSA,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0050), 
            ,   10, 
        GP51,   1, 
        Offset (0xA0052), 
            ,   11, 
        SP56,   1, 
        Offset (0xA0056), 
            ,   11, 
        GP64,   1, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA0090), 
        SM00,   16, 
        Offset (0xA00BA), 
            ,   4, 
        ESMP,   1, 
        Offset (0xA00BB), 
            ,   1, 
        HSMP,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2
    }

    OperationRegion (RMEM, SystemMemory, RMBA, 0x0200)
    Field (RMEM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        RMLN,   32
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        TM1E,   1, 
        TM2E,   1, 
        Offset (0x01), 
            ,   1, 
        TM1S,   1, 
        TM2S,   1, 
        Offset (0x04), 
            ,   7, 
        SLPS,   1, 
        Offset (0x07), 
            ,   7, 
        CLPS,   1, 
        Offset (0x0D), 
        EV0S,   1, 
        EV1S,   1, 
        Offset (0x10), 
            ,   6, 
        PWDE,   1, 
        Offset (0x1C), 
            ,   3, 
        MKME,   1, 
        PI3E,   1, 
        PI2E,   1, 
        PI1E,   1, 
        PI0E,   1, 
            ,   3, 
        MKMS,   1, 
        PI3S,   1, 
        PI2S,   1, 
        PI1S,   1, 
        PI0S,   1, 
        Offset (0x20), 
        P1EB,   16, 
        Offset (0x36), 
            ,   6, 
        GV6P,   1, 
        GV7P,   1, 
            ,   3, 
        GM0P,   1, 
        GM1P,   1, 
        GM2P,   1, 
        GM3P,   1, 
        GM8P,   1, 
            ,   1, 
        GM4P,   1, 
        GM5P,   1, 
            ,   1, 
        GM6P,   1, 
        GM7P,   1, 
        Offset (0x3B), 
        GPX0,   1, 
        GPX4,   1, 
        GPX5,   1, 
        GPX1,   1, 
        GPX6,   1, 
        GPX7,   1, 
        GPX2,   1, 
        GPX3,   1, 
        Offset (0x55), 
        SPRE,   1, 
            ,   1, 
            ,   1, 
        EPNM,   1, 
        DPPF,   1, 
        FNGS,   1, 
        Offset (0x61), 
            ,   7, 
        R617,   1, 
        Offset (0x65), 
            ,   4, 
        RSTU,   1, 
        Offset (0x68), 
            ,   3, 
        TPDE,   1, 
            ,   1, 
        Offset (0x7C), 
            ,   2, 
        BLNK,   2, 
        Offset (0x84), 
        WPNE,   1, 
        WPAG,   1, 
        Offset (0x92), 
            ,   7, 
        GV7S,   1, 
        Offset (0x96), 
        GP8I,   1, 
        GP9I,   1, 
        Offset (0x9A), 
            ,   7, 
        HECO,   1, 
        Offset (0xA8), 
        PI4E,   1, 
        PI5E,   1, 
        PI6E,   1, 
        PI7E,   1, 
        Offset (0xA9), 
        PI4S,   1, 
        PI5S,   1, 
        PI6S,   1, 
        PI7S,   1
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        If ((Arg0 == One))
        {
            BLNK = 0x02
        }

        If ((Arg0 == 0x02))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        CLPS = One
        SLPS = One
        If ((RVID <= 0x13))
        {
            PWDE = Zero
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        HECO = One
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        BLNK = 0x03
        PMS7 = One
        PMSA = One
    }

    Method (TRMD, 1, NotSerialized)
    {
        SPRE = Arg0
        TPDE = Arg0
    }

    Method (NB2S, 1, NotSerialized)
    {
    }

    Method (NB2W, 1, NotSerialized)
    {
    }

    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (SMIO, 0xB0)
    Name (SIOV, 0xFC)
    Name (SPIO, 0x2E)
    Name (IOPB, 0x0230)
    Name (IOPL, 0x10)
    Name (IOEB, 0x0290)
    Name (IOEL, 0x10)
    Name (IOGB, 0x0F40)
    Name (IOGL, 0x10)
    Name (IODB, 0x0A30)
    Name (IODL, 0x10)
    Name (IO1B, 0x0F40)
    Name (IO1L, 0x08)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x80)
    Name (ATSW, 0xE5)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (SMB0, 0x0B00)
    Name (SMBB, 0x0B20)
    Name (SMBM, 0x10)
    Name (SMBL, 0x20)
    Name (APIC, One)
    Name (AODS, 0xF5)
    Name (SMIP, 0xB0)
    Name (ACSS, One)
    Name (SBA1, 0x0B00)
    Name (SBA2, 0x0B20)
    Name (SIOP, 0x2E)
    Name (GIOB, 0x0F40)
    Name (T1OF, Zero)
    Name (T2OF, Zero)
    Name (T3OF, Zero)
    Name (CQST, 0x3C)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (SBRV, 0x0CD0)
    Name (SMBS, 0x0B20)
    OperationRegion (BIOS, SystemMemory, 0xCFFA8064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        OSTP,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
        _T_0 = OSYS ()
        If ((_T_0 == One))
        {
            OSVR = 0x03
        }
        Else
        {
            If ((_T_0 == 0x10))
            {
                OSVR = One
            }
            Else
            {
                If ((_T_0 == 0x11))
                {
                    OSVR = 0x02
                }
                Else
                {
                    If ((_T_0 == 0x12))
                    {
                        OSVR = 0x04
                    }
                    Else
                    {
                        If ((_T_0 == 0x13))
                        {
                            OSVR = Zero
                        }
                        Else
                        {
                            If ((_T_0 == 0x14))
                            {
                                OSVR = Zero
                            }
                            Else
                            {
                                If ((_T_0 == 0x15))
                                {
                                    OSVR = Zero
                                }
                            }
                        }
                    }
                }
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                ))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            Index (PRWP, One) = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, One))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, One))
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                Local0 = 0x12
            }
            Else
            {
                If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    Local0 = 0x11
                }

                If (MCTH (_OS, "Linux"))
                {
                    Local0 = One
                }
            }
        }

        Return (Local0)
    }

    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00000810, 0x06) {}
        Processor (P002, 0x02, 0x00000000, 0x00) {}
        Processor (P003, 0x03, 0x00000000, 0x00) {}
        Processor (P004, 0x04, 0x00000000, 0x00) {}
        Alias (P001, CPU1)
        Alias (P002, CPU2)
        Alias (P003, CPU3)
        Alias (P004, CPU4)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x35)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKG, 
                Zero
            }
        })
        Name (AR00, Package (0x35)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x16
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR0C, Package (0x08)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR0C, Package (0x08)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x14
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (RS78)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x94), 
                    HI,     32, 
                    HD,     32, 
                    Offset (0xE8), 
                    MCI,    32, 
                    MCD,    32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y00)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y01)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y00._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y00._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y01._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RS78.BROD._Y01._LEN, LEN2)  // _LEN: Length
                        MI = 0x3C
                        Local0 = MD /* \_SB_.PCI0.RS78.MD__ */
                        If ((Local0 & 0x40))
                        {
                            MI = 0x3A
                            BAS1 = (MD & 0xFFFFFF00)
                            LEN1 = ((MD & 0xFF) << 0x17)
                        }

                        MCI = 0x11
                        Local1 = MCD /* \_SB_.PCI0.RS78.MCD_ */
                        MCI = 0x12
                        Local2 = MCD /* \_SB_.PCI0.RS78.MCD_ */
                        MCI = 0xF0
                        Local3 = MCD /* \_SB_.PCI0.RS78.MCD_ */
                        If ((Local2 == Zero))
                        {
                            If ((Local3 != Zero))
                            {
                                BAS2 = Local1
                                LEN2 = (Local3 << 0x14)
                            }
                        }

                        Return (CRS) /* \_SB_.PCI0.RS78.BROD.CRS_ */
                    }
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }

                Device (IGFX)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (GPXX, SystemMemory, 0x000EF7F7, 0x0100)
                    Field (GPXX, AnyAcc, NoLock, Preserve)
                    {
                        GPCM,   8, 
                        GPDT,   2040
                    }

                    Name (ATIB, Buffer (0xFF) {})
                    OperationRegion (SM00, SystemIO, 0xB0, One)
                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        SMCM,   8
                    }

                    Method (ATIF, 2, Serialized)
                    {
                        Name (SUPF, Zero)
                        SUPF |= 0x2000
                        If ((Arg0 == 0x0E))
                        {
                            Return (AF0E (Arg1))
                        }

                        If ((Arg0 == Zero))
                        {
                            Return (AF00 (SUPF))
                        }

                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        NMSK = Zero
                        SFUN = Zero
                        Return (ATIB) /* \_SB_.PCI0.P0P1.IGFX.ATIB */
                    }

                    Method (AF00, 1, Serialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        NMSK = Zero
                        SFUN = Arg0
                        Return (ATIB) /* \_SB_.PCI0.P0P1.IGFX.ATIB */
                    }

                    Method (AF0E, 1, NotSerialized)
                    {
                        OperationRegion (^GF00, PCI_Config, Zero, 0x40)
                        Field (GF00, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x18), 
                            MMAR,   32
                        }

                        OperationRegion (GF02, SystemMemory, MMAR, 0x7000)
                        Field (GF02, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x6080), 
                            D1ME,   1, 
                            Offset (0x609C), 
                            D1VB,   1
                        }

                        GPDT = Arg0
                        GPCM = 0x0E
                        If ((D1ME == One))
                        {
                            While ((D1VB != Zero)) {}
                            While ((D1VB != One)) {}
                        }

                        SMCM = 0xE5
                        Return (Zero)
                    }
                }
            }

            Device (PCE2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }
            }

            Device (PCE3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }
            }

            Device (PCE4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (PCE5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (PCE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (PCE9)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PCEA)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PCEB)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PCEC)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SMBS, PCI_Config, Zero, 0x0100)
                Field (SMBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    REV,    8
                }

                OperationRegion (WIDE, PCI_Config, 0xAD, One)
                Field (WIDE, AnyAcc, NoLock, Preserve)
                {
                    DUM1,   4, 
                    SOPT,   1
                }
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (Index (UDMT, (UDMX & 0x0F)))
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (Index (UDMT, (UDMX >> 0x04)))
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Divide (Local0, 0x05, Local0)
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Divide (Local1, 0x05, Local1)
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (Index (PITR, Local0))
                    PIT1 = DerefOf (Index (PITR, Local1))
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Divide (Local0, 0x07, Local0)
                        UDMX |= Local0
                        UDCX |= One
                    }
                    Else
                    {
                        If ((DMA0 != Ones))
                        {
                            Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                            MDT0 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Divide (Local0, 0x07, Local0)
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    Else
                    {
                        If ((DMA1 != Ones))
                        {
                            Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                            MDT1 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDEC.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDEC.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x15)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xF5                     /* ..... */
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CreateByteField (BUF, 0x13, CMDC)
                    CMDA = Arg0
                    CMDB = Arg0
                    CMDC = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }
                        Else
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                        Else
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }
                        Else
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                        Else
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (LPCS, PCI_Config, Zero, 0x0100)
                Field (LPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                        ,   7, 
                    ECEN,   1, 
                    Offset (0xA4), 
                    ECAD,   16
                }

                Name (ECIN, Zero)
                Mutex (ECMU, 0x00)
                Mutex (MLMU, 0x00)
                If (ECEN)
                {
                    ECIN = (ECAD & 0xFFFE)
                    OperationRegion (ECBP, SystemIO, ECIN, 0x02)
                    Field (ECBP, ByteAcc, NoLock, Preserve)
                    {
                        BPIO,   8
                    }

                    OperationRegion (ECIO, SystemIO, ECIN, 0x02)
                    Field (ECIO, ByteAcc, NoLock, Preserve)
                    {
                        IND,    8, 
                        DAT,    8
                    }

                    IndexField (IND, DAT, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDNM,   8, 
                        Offset (0x22), 
                        POW,    8, 
                        Offset (0x30), 
                        ACT,    1, 
                        Offset (0x60), 
                        IOBH,   8, 
                        IOBL,   8, 
                        Offset (0x70), 
                        INT,    4
                    }

                    Method (CFG, 1, NotSerialized)
                    {
                        BPIO = 0x5A
                        BPIO = 0x5A
                        LDNM = Arg0
                    }

                    Method (XCFG, 0, NotSerialized)
                    {
                        BPIO = 0xA5
                    }

                    Method (STA, 1, NotSerialized)
                    {
                        Acquire (ECMU, 0x5000)
                        CFG (Arg0)
                        Local1 = Zero
                        If (ACT)
                        {
                            Local1 = 0x0F
                        }

                        If ((IND == 0xFF))
                        {
                            Local1 = Zero
                        }

                        XCFG ()
                        Release (ECMU)
                        Return (Local1)
                    }

                    Method (RDMB, 1, NotSerialized)
                    {
                        Acquire (ECMU, 0x1388)
                        Acquire (MLMU, 0x1388)
                        CFG (0x05)
                        Name (IOBA, Zero)
                        IOBA = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                        IOBA <<= 0x08
                        IOBA |= IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        OperationRegion (MLIO, SystemIO, IOBA, 0x02)
                        Field (MLIO, ByteAcc, NoLock, Preserve)
                        {
                            MLIN,   8, 
                            MLDA,   8
                        }

                        MLIN = Arg0
                        Return (MLDA) /* \_SB_.PCI0.SBRG.RDMB.MLDA */
                        Release (MLMU)
                        Release (ECMU)
                    }

                    Method (WRMB, 2, NotSerialized)
                    {
                        Acquire (ECMU, 0x1388)
                        Acquire (MLMU, 0x1388)
                        CFG (0x05)
                        Name (IOBA, Zero)
                        IOBA = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                        IOBA <<= 0x08
                        IOBA |= IOBL /* \_SB_.PCI0.SBRG.IOBL */
                        OperationRegion (MLIO, SystemIO, IOBA, 0x02)
                        Field (MLIO, ByteAcc, NoLock, Preserve)
                        {
                            MLIN,   8, 
                            MLDA,   8
                        }

                        MLIN = Arg0
                        MLDA = Arg1
                        Release (MLMU)
                        Release (ECMU)
                    }

                    Name (KBWF, One)
                    Name (MSWF, One)
                    Name (IRWF, One)
                    Device (PSKE)
                    {
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            Local1 = STA (0x07)
                            Return (Local1)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        })
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x03, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                KBWF = One
                            }
                            Else
                            {
                                KBWF = Zero
                            }
                        }
                    }

                    Device (PSMS)
                    {
                        Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            Local1 = STA (0x07)
                            Return (Local1)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IRQNoFlags ()
                                {12}
                        })
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x03, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                MSWF = One
                            }
                            Else
                            {
                                MSWF = Zero
                            }
                        }
                    }

                    Method (KWEN, 0, NotSerialized)
                    {
                        WRMB (0x81, Zero)
                        WRMB (0x82, One)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (KWDS, 0, NotSerialized)
                    {
                        WRMB (0x81, Zero)
                        WRMB (0x82, Zero)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (MWEN, 0, NotSerialized)
                    {
                        WRMB (0x81, One)
                        WRMB (0x82, One)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Method (MWDS, 0, NotSerialized)
                    {
                        WRMB (0x81, One)
                        WRMB (0x82, Zero)
                        WRMB (0x80, Zero)
                        WRMB (0xA0, 0x95)
                    }

                    Device (ECIR)
                    {
                        Name (_HID, EisaId ("AMDC001"))  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Local1 = Zero
                            If ((OSTY == 0x06))
                            {
                                Local1 = STA (0x05)
                            }

                            Return (Local1)
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (RSRC, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y02)
                                IRQNoFlags (_Y03)
                                    {}
                            })
                            CreateByteField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y02._MIN, IO1)  // _MIN: Minimum Base Address
                            CreateByteField (RSRC, 0x03, IO2)
                            CreateByteField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y02._MAX, IO3)  // _MAX: Maximum Base Address
                            CreateByteField (RSRC, 0x05, IO4)
                            CreateWordField (RSRC, \_SB.PCI0.SBRG.ECIR._CRS._Y03._INT, IRQV)  // _INT: Interrupts
                            Acquire (ECMU, 0x1388)
                            CFG (0x05)
                            If (ACT)
                            {
                                IO1 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                                IO2 = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                                IO3 = IOBL /* \_SB_.PCI0.SBRG.IOBL */
                                IO4 = IOBH /* \_SB_.PCI0.SBRG.IOBH */
                                Local0 = One
                                IRQV = (Local0 << INT) /* \_SB_.PCI0.SBRG.INT_ */
                            }

                            XCFG ()
                            Release (ECMU)
                            Return (RSRC) /* \_SB_.PCI0.SBRG.ECIR._CRS.RSRC */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0550,             // Range Minimum
                                    0x0550,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0650,             // Range Minimum
                                    0x0650,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {5}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0550,             // Range Minimum
                                    0x0550,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {3}
                            }
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0650,             // Range Minimum
                                    0x0650,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQ (Edge, ActiveHigh, Shared, )
                                    {3}
                            }
                            EndDependentFn ()
                        })
                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IO1)
                            CreateByteField (Arg0, 0x03, IO2)
                            CreateWordField (Arg0, 0x09, IRQV)
                            Acquire (ECMU, 0x1388)
                            CFG (0x05)
                            IOBL = IO1 /* \_SB_.PCI0.SBRG.ECIR._SRS.IO1_ */
                            IOBH = IO2 /* \_SB_.PCI0.SBRG.ECIR._SRS.IO2_ */
                            FindSetRightBit (IRQV, Local0)
                            INT = (Local0 - One)
                            ACT = One
                            XCFG ()
                            Release (ECMU)
                        }

                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x17, 0x04))
                        }

                        Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                        {
                            If (Arg0)
                            {
                                IRWF = One
                            }
                            Else
                            {
                                IRWF = Zero
                            }
                        }

                        Method (IRCF, 2, NotSerialized)
                        {
                            Name (CONN, Zero)
                            If ((Arg0 == One))
                            {
                                CONN |= RVID /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                CONN |= 0x00013200 /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                            }

                            If ((Arg0 == 0x02))
                            {
                                CONN = (\GP64 << One)
                                CONN |= \GP51 /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                                Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                            }

                            If ((Arg0 == 0x03))
                            {
                                If ((Arg1 == Zero))
                                {
                                    G31O = One
                                }
                                Else
                                {
                                    G31O = Zero
                                    Sleep (0x64)
                                    G31O = One
                                }
                            }

                            If ((Arg0 == 0x04))
                            {
                                If ((Arg1 == Zero))
                                {
                                    ACIR = Zero
                                }
                                Else
                                {
                                    ACIR = One
                                }
                            }

                            If (((Arg0 == Zero) || (Arg0 > 0x05)))
                            {
                                CONN = Ones
                            }

                            Return (CONN) /* \_SB_.PCI0.SBRG.ECIR.IRCF.CONN */
                        }
                    }

                    Method (PPTS, 1, NotSerialized)
                    {
                        If (^PSKE._STA ())
                        {
                            If (KBWF)
                            {
                                KWEN ()
                            }
                            Else
                            {
                                KWDS ()
                            }
                        }

                        If (^PSMS._STA ())
                        {
                            If (MSWF)
                            {
                                MWEN ()
                            }
                            Else
                            {
                                MWDS ()
                            }
                        }
                    }

                    Method (WWAK, 1, NotSerialized)
                    {
                        If (^PSKE._STA ())
                        {
                            KWDS ()
                        }

                        If (^PSMS._STA ())
                        {
                            MWDS ()
                        }
                    }
                }

                Method (EPTS, 1, NotSerialized)
                {
                    If (ECEN)
                    {
                        PPTS (Arg0)
                    }
                }

                Method (EWAK, 1, NotSerialized)
                {
                    If (ECEN)
                    {
                        WWAK (Arg0)
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Scope (\)
                {
                    OperationRegion (RAMW, SystemMemory, 0xCFFF0000, 0x00010000)
                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        PAR0,   32, 
                        PAR1,   32, 
                        PAR2,   32, 
                        PINX,   32
                    }

                    OperationRegion (IOB2, SystemIO, 0xB0, 0x02)
                    Field (IOB2, ByteAcc, NoLock, Preserve)
                    {
                        SMIC,   8, 
                        SMIS,   8
                    }

                    Method (ISMI, 1, Serialized)
                    {
                        SMIC = Arg0
                        Sleep (One)
                    }

                    Method (GNVS, 1, Serialized)
                    {
                        PINX = 0x80000000
                        PAR0 = Arg0
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }

                    Method (SNVS, 2, Serialized)
                    {
                        PINX = 0x80000001
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x70)
                    }

                    Name (ARBF, Buffer (0x10) {})
                    CreateDWordField (ARBF, Zero, REAX)
                    CreateDWordField (ARBF, 0x04, REBX)
                    CreateDWordField (ARBF, 0x08, RECX)
                    CreateDWordField (ARBF, 0x0C, REDX)
                    Method (SMSR, 1, Serialized)
                    {
                        CreateDWordField (Arg0, Zero, AEAX)
                        CreateDWordField (Arg0, 0x04, AEBX)
                        CreateDWordField (Arg0, 0x08, AECX)
                        CreateDWordField (Arg0, 0x0C, AEDX)
                        PINX = 0x80000003
                        PAR0 = AECX /* \SMSR.AECX */
                        PAR1 = AEAX /* \SMSR.AEAX */
                        PAR2 = AEDX /* \SMSR.AEDX */
                        ISMI (0x70)
                    }

                    Method (GMSR, 1, Serialized)
                    {
                        PINX = 0x80000002
                        PAR0 = Arg0
                        ISMI (0x70)
                        RECX = Arg0
                        REAX = PAR1 /* \PAR1 */
                        REDX = PAR2 /* \PAR2 */
                        Return (ARBF) /* \ARBF */
                    }

                    Method (PRID, 1, Serialized)
                    {
                        PINX = 0x80000004
                        PAR0 = Arg0
                        ISMI (0x70)
                        REAX = PAR1 /* \PAR1 */
                        REDX = PAR2 /* \PAR2 */
                        Return (ARBF) /* \ARBF */
                    }

                    Method (SAGP, 2, Serialized)
                    {
                        PINX = 0x80000005
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x70)
                    }

                    Method (GAGP, 1, Serialized)
                    {
                        PINX = 0x80000006
                        PAR0 = Arg0
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }

                    Method (GTBF, 2, Serialized)
                    {
                        PINX = 0x80000007
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }
                }

                Scope (\_SB.PCI0.SBRG)
                {
                    Device (ASOC)
                    {
                        Name (_HID, "ATK0110")  // _HID: Hardware ID
                        Name (_UID, 0x01010110)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            G3UP ()
                            CUPI ()
                            UMVT ()
                        }

                        Method (CUPI, 0, NotSerialized)
                        {
                            Local0 = GNVS (0x37C4)
                            Local0 = GAGP ("CPUN")
                            Index (G3DS, 0x06) = Local0
                            Local0 = GNVS (0xA2B8)
                            Index (G3C0, 0x06) = Local0
                        }

                        Method (UMVT, 0, NotSerialized)
                        {
                        }

                        Name (MBIF, Package (0x08)
                        {
                            0x03, 
                            "M4A78T-E", 
                            0x03010103, 
                            0x01010100, 
                            0xE0010001, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Name (ASBF, Buffer (0x0100) {})
                        CreateDWordField (ASBF, Zero, ASB0)
                        CreateDWordField (ASBF, 0x04, ASB1)
                        Method (GGRP, 1, Serialized)
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            _T_0 = Arg0
                            If ((_T_0 == Zero))
                            {
                                Return (GRP0) /* \_SB_.PCI0.SBRG.ASOC.GRP0 */
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    Return (GRP3) /* \_SB_.PCI0.SBRG.ASOC.GRP3 */
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        Return (GRP4) /* \_SB_.PCI0.SBRG.ASOC.GRP4 */
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            Return (GRP5) /* \_SB_.PCI0.SBRG.ASOC.GRP5 */
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                Return (GRP6) /* \_SB_.PCI0.SBRG.ASOC.GRP6 */
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x09))
                                                {
                                                    Return (GRP9) /* \_SB_.PCI0.SBRG.ASOC.GRP9 */
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x0B))
                                                    {
                                                        Return (GRPB) /* \_SB_.PCI0.SBRG.ASOC.GRPB */
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x0E))
                                                        {
                                                            Return (GRPE) /* \_SB_.PCI0.SBRG.ASOC.GRPE */
                                                        }
                                                        Else
                                                        {
                                                            Return (Zero)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        Method (GITM, 1, Serialized)
                        {
                            CreateDWordField (Arg0, Zero, PRM0)
                            CreateByteField (Arg0, 0x03, GPID)
                            ASB0 = One
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            _T_0 = GPID /* \_SB_.PCI0.SBRG.ASOC.GITM.GPID */
                            If ((_T_0 == Zero))
                            {
                                GIT0 (PRM0)
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    GIT3 (PRM0)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        GIT4 (PRM0)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            CreateDWordField (Arg0, 0x04, PRM1)
                                            GIT5 (PRM0, PRM1)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                GIT6 (PRM0)
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x09))
                                                {
                                                    GIT9 (PRM0)
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x0B))
                                                    {
                                                        GITB (PRM0)
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x0E))
                                                        {
                                                            GITE (PRM0)
                                                        }
                                                        Else
                                                        {
                                                            ASB0 = Zero
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Return (ASBF) /* \_SB_.PCI0.SBRG.ASOC.ASBF */
                        }

                        Method (SITM, 1, Serialized)
                        {
                            CreateDWordField (Arg0, Zero, PRM0)
                            CreateDWordField (Arg0, 0x04, PRM1)
                            CreateDWordField (Arg0, 0x08, PRM2)
                            CreateByteField (Arg0, 0x03, GPID)
                            ASB0 = One
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            _T_0 = GPID /* \_SB_.PCI0.SBRG.ASOC.SITM.GPID */
                            If ((_T_0 == Zero))
                            {
                                SIT0 (PRM0, PRM1, PRM2)
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    SIT3 (PRM0, PRM1, PRM2)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        SIT4 (PRM0, PRM1, PRM2)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            SIT5 (PRM0, PRM1, PRM2)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                SIT6 (PRM0, PRM1, PRM2)
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x09))
                                                {
                                                    SIT9 (PRM0, PRM1, PRM2)
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x0B))
                                                    {
                                                        SITB (PRM0, PRM1, PRM2)
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x0E))
                                                        {
                                                            SITE (PRM0, PRM1, PRM2)
                                                        }
                                                        Else
                                                        {
                                                            ASB0 = Zero
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            Return (ASBF) /* \_SB_.PCI0.SBRG.ASOC.ASBF */
                        }

                        Method (OP2V, 2, NotSerialized)
                        {
                            Local0 = DerefOf (Index (Arg1, 0x04))
                            Local1 = DerefOf (Index (Arg1, 0x05))
                            Local1 *= Arg0
                            Local0 += Local1
                            Return (Local0)
                        }

                        Method (V2OP, 2, NotSerialized)
                        {
                            Local0 = DerefOf (Index (Arg1, 0x04))
                            Local1 = DerefOf (Index (Arg1, 0x05))
                            Local0 = (Arg0 - Local0)
                            Divide (Local0, Local1, Local1, Local0)
                            Return (Local0)
                        }
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.HPET._Y04._BAS, HPT)  // _BAS: Base Address
                        HPT = 0xFED00000
                        Return (CRS) /* \_SB_.PCI0.SBRG.HPET.CRS_ */
                    }
                }

                Scope (\)
                {
                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x28), 
                        AWEN,   1
                    }
                }

                Scope (\_SB)
                {
                    Device (\AWY)
                    {
                        Name (_HID, "AWY0001")  // _HID: Hardware ID
                        Method (SMOD, 1, NotSerialized)
                        {
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (AWEN)
                            {
                                Return (0x0F)
                            }

                            Return (Zero)
                        }
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y05._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y05._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Scope (\_GPE)
                {
                    Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                    {
                        Notify (\_SB.PCI0.SBRG.ASOC, One) // Device Check
                        Sleep (0x03E8)
                    }
                }

                Scope (ASOC)
                {
                    Name (VESL, Zero)
                    Method (SPLV, 1, Serialized)
                    {
                        VESL = (Arg0 & 0xFFFF)
                        PAR0 = VESL /* \_SB_.PCI0.SBRG.ASOC.VESL */
                        ISMI (0x88)
                        Local0 = (PAR0 & 0xFFFF)
                        Return (Local0)
                    }

                    Method (GPLV, 0, Serialized)
                    {
                        Return (VESL) /* \_SB_.PCI0.SBRG.ASOC.VESL */
                    }
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y06)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y08._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y08._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y0B)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0C)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0C._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()) {}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00B1,             // Range Minimum
                            0x00B1,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x00,               // Alignment
                            0x40,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y11)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y12)
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y13)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                        Memory32Fixed (ReadOnly,
                            0xFFB80000,         // Address Base
                            0x00080000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._LEN, GP0L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        GP0L = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._LEN, GP1L)  // _LEN: Length
                            GP10 = SMBB /* \SMBB */
                            GP11 = SMBB /* \SMBB */
                            GP1L = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._MIN, GPB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._MAX, GPB1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._LEN, GPBL)  // _LEN: Length
                            GPB0 = SMB0 /* \SMB0 */
                            GPB1 = SMB0 /* \SMB0 */
                            GPBL = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._LEN, GP2L)  // _LEN: Length
                            GP20 = GPBS /* \GPBS */
                            GP21 = GPBS /* \GPBS */
                            GP2L = GPLN /* \GPLN */
                        }

                        Local0 = (One << 0x0A)
                        Local1 = (One << 0x0C)
                        Local0 = ((IOST & Local0) | (IOST & Local1))
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y12._LEN, KBL0)  // _LEN: Length
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y13._LEN, KBL1)  // _LEN: Length
                        If ((Local0 == Zero))
                        {
                            KBL0 = One
                            KBL1 = One
                        }

                        If (\AOD.RAMS)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y14._BAS, RADB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y14._LEN, RADL)  // _LEN: Length
                            RADB = \AOD.RAMB
                            RADL = \AOD.RAMS
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (UAR1)
                {
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (Zero))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (Zero, One))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, Zero)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR1.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        EndDependentFn ()
                    })
                }

                Method (UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x10, 0x04))
                }

                Device (FDC)
                {
                    Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                    Method (_FDE, 0, NotSerialized)  // _FDE: Floppy Disk Enumerate
                    {
                        Name (FDEP, Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            0x02, 
                            0x02, 
                            0x02
                        })
                        If (_STA ())
                        {
                            Index (FDEP, Zero) = One
                        }

                        Return (FDEP) /* \_SB_.PCI0.SBRG.FDC_._FDE.FDEP */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (0x03))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (0x03, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        DCRS (0x03, One)
                        IRQE = IRQM /* \_SB_.PCI0.SBRG.IRQM */
                        DMAE = DMAM /* \_SB_.PCI0.SBRG.DMAM */
                        IO21 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                        IO22 = IO12 /* \_SB_.PCI0.SBRG.IO12 */
                        LEN2 = 0x06
                        IO31 = (IO21 + 0x07)
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.IO31 */
                        LEN3 = One
                        Return (CRS2) /* \_SB_.PCI0.SBRG.CRS2 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, 0x03)
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        ENFG (CGLD (0x03))
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {2}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0370,             // Range Minimum
                                0x0370,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x0377,             // Range Minimum
                                0x0377,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x04))
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (M2R0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (M2R1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (M2R0) /* \_SB_.PCI0.SBRG.PS2M.M2R0 */
                        }
                        Else
                        {
                            Return (M2R1) /* \_SB_.PCI0.SBRG.PS2M.M2R1 */
                        }
                    }
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x04))
                }

                Device (SIOR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SPIO) /* \SPIO */
                    }

                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y15)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y16)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SPIO != 0x03F0) && (SPIO > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._LEN, GPL1)  // _LEN: Length
                            GP10 = SPIO /* \SPIO */
                            GP11 = SPIO /* \SPIO */
                            GPL1 = 0x02
                        }

                        If (IOPB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._LEN, GPL2)  // _LEN: Length
                            GP20 = IOPB /* \IOPB */
                            GP21 = IOPB /* \IOPB */
                            GPL2 = IOPL /* \IOPL */
                        }

                        If (IOEB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._LEN, GPL3)  // _LEN: Length
                            GP30 = IOEB /* \IOEB */
                            GP31 = IOEB /* \IOEB */
                            GPL3 = IOEL /* \IOEL */
                        }

                        If (IOGB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._LEN, GPL4)  // _LEN: Length
                            GP40 = IOGB /* \IOGB */
                            GP41 = IOGB /* \IOGB */
                            GPL4 = IOGL /* \IOGL */
                        }

                        If (IODB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y19._MIN, GP50)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y19._MAX, GP51)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y19._LEN, GPL5)  // _LEN: Length
                            GP50 = IODB /* \IODB */
                            GP51 = IODB /* \IODB */
                            GPL5 = IODL /* \IODL */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIOR.CRS_ */
                    }
                }

                Name (DCAT, Package (0x16)
                {
                    One, 
                    0x02, 
                    0x03, 
                    Zero, 
                    0xFF, 
                    0x08, 
                    0xFF, 
                    0xFF, 
                    0x09, 
                    0xFF, 
                    0x05, 
                    0x04, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0x0A, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF
                })
                Name (IKEY, Package (0x02)
                {
                    Package (0x04)
                    {
                        0x87, 
                        One, 
                        0x55, 
                        0x55
                    }, 

                    Package (0x04)
                    {
                        0x87, 
                        One, 
                        0x55, 
                        0xAA
                    }
                })
                Name (KBFG, One)
                Name (MSFG, One)
                Name (UR1F, One)
                Method (ENFG, 1, NotSerialized)
                {
                    Local1 = Zero
                    If ((SPIO == 0x2E))
                    {
                        Local1 = Zero
                    }

                    If ((SPIO == 0x4E))
                    {
                        Local1 = One
                    }

                    Local0 = Zero
                    While ((Local0 != 0x04))
                    {
                        INDX = DerefOf (Index (DerefOf (Index (IKEY, Local1)), Local0))
                        Local0++
                    }

                    LDN = Arg0
                }

                Method (ENTR, 0, NotSerialized)
                {
                    INDX = 0x87
                    INDX = One
                    INDX = 0x55
                    If ((SPIO == 0x2E))
                    {
                        INDX = 0x55
                    }
                    Else
                    {
                        INDX = 0xAA
                    }
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDX = 0x02
                    DATA = 0x02
                }

                Method (LPTM, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = (OPT0 & 0x02)
                    EXFG ()
                    Return (Local0)
                }

                Method (UHID, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = (OPT0 & 0x70)
                    EXFG ()
                    If (Local0)
                    {
                        Return (0x1005D041)
                    }

                    Return (0x0105D041)
                }

                Method (ORF0, 1, NotSerialized)
                {
                    ENTR ()
                    OPT0 |= Arg0
                    EXFG ()
                }

                Method (ORF1, 1, NotSerialized)
                {
                    ENTR ()
                    OPT1 |= Arg0
                    EXFG ()
                }

                Method (ORF2, 1, NotSerialized)
                {
                    ENTR ()
                    OPT2 |= Arg0
                    EXFG ()
                }

                Method (ANF0, 1, NotSerialized)
                {
                    ENTR ()
                    OPT0 &= Arg0
                    EXFG ()
                }

                Method (ANF2, 1, NotSerialized)
                {
                    ENTR ()
                    OPT2 &= Arg0
                    EXFG ()
                }

                Method (ANF4, 1, NotSerialized)
                {
                    ENTR ()
                    OPT4 &= Arg0
                    EXFG ()
                }

                Method (STF0, 1, NotSerialized)
                {
                    ENTR ()
                    OPT0 = Arg0
                    EXFG ()
                }

                Method (STF1, 1, NotSerialized)
                {
                    ENTR ()
                    OPT1 = Arg0
                    EXFG ()
                }

                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                    GP22 = Zero
                    If ((Arg0 < 0x05))
                    {
                        ENFG (0x04)
                        ACTR = One
                        EXFG ()
                        ENFG (0x04)
                        ANF4 (0xFC)
                        ORF1 (0x18)
                        If (KBFG)
                        {
                            ORF0 (0x08)
                        }
                        Else
                        {
                            ANF0 (0xF7)
                        }

                        EXFG ()
                        If (MSFG)
                        {
                            If ((Arg0 == One))
                            {
                                ENFG (0x06)
                                ACTR = Zero
                                EXFG ()
                            }

                            ENFG (0x04)
                            ORF0 (0x10)
                            EXFG ()
                        }
                        Else
                        {
                            ENFG (0x04)
                            ANF0 (0xEF)
                            EXFG ()
                            ENFG (0x06)
                            ACTR = Zero
                            EXFG ()
                        }

                        ENFG (0x04)
                        ANF2 (0xF0)
                        EXFG ()
                        ENFG (0x07)
                        If ((Arg0 < 0x04))
                        {
                            OPF9 &= Zero
                            OPF9 |= 0x02
                            OPF8 &= Zero
                            OPF8 |= 0x12
                            OPC1 &= 0xFB
                        }

                        OP29 &= 0xEF
                        EXFG ()
                    }
                    Else
                    {
                        ENFG (0x07)
                        If ((Arg0 < 0x04))
                        {
                            OPF9 &= Zero
                            OPF8 &= Zero
                            OPC1 |= 0x04
                        }

                        OP29 |= 0x10
                        EXFG ()
                    }
                }

                Method (SIOW, 1, NotSerialized)
                {
                    GP22 = One
                    Debug = "SIOW"
                    ENFG (0x04)
                    ACTR = Zero
                    EXFG ()
                    STF0 (Zero)
                    STF1 (0xFF)
                    ENFG (0x07)
                    OPC1 |= 0x04
                    EXFG ()
                    ENFG (0x05)
                    ACTR |= One
                    EXFG ()
                    ENFG (0x06)
                    ACTR |= One
                    EXFG ()
                    ENFG (0x04)
                    ACTR = One
                    EXFG ()
                }

                Method (SIOH, 0, NotSerialized)
                {
                    Debug = "SIOH"
                }

                OperationRegion (IOID, SystemIO, SPIO, 0x02)
                Field (IOID, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x29), 
                    OP29,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IOH2,   8, 
                    IOL2,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xC0), 
                    OPC0,   8, 
                    OPC1,   8, 
                    OPC2,   8, 
                    OPC3,   8, 
                    OPC4,   8, 
                    OPC5,   8, 
                    OPC6,   8, 
                    OPC7,   8, 
                    OPC8,   8, 
                    OPC9,   8, 
                    OPCA,   8, 
                    OPCB,   8, 
                    OPCC,   8, 
                    OPCD,   8, 
                    OPCE,   8, 
                    OPCF,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8, 
                    Offset (0xF8), 
                    OPF8,   8, 
                    OPF9,   8, 
                    OPFA,   8, 
                    OPFB,   8
                }

                OperationRegion (SITE, SystemIO, SMIO, One)
                Field (SITE, ByteAcc, NoLock, Preserve)
                {
                    IOSM,   8
                }

                Method (PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        KBFG = One
                    }
                    Else
                    {
                        KBFG = Zero
                    }
                }

                Method (PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        MSFG = One
                    }
                    Else
                    {
                        MSFG = Zero
                    }
                }

                Method (CGLD, 1, NotSerialized)
                {
                    Return (DerefOf (Index (DCAT, Arg0)))
                }

                Method (DSTA, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = ACTR /* \_SB_.PCI0.SBRG.ACTR */
                    EXFG ()
                    If ((Local0 == 0xFF))
                    {
                        Return (Zero)
                    }

                    Local0 &= One
                    IOST |= (Local0 << Arg0)
                    If (Local0)
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        If (((One << Arg0) & IOST))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Method (DCNT, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    RRIO (Arg0, Arg1, Local1, 0x08)
                    If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                    {
                        RDMA (Arg0, Arg1, Local1++)
                    }

                    ACTR = Arg1
                    EXFG ()
                }

                Name (CRS1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1C)
                    IRQNoFlags (_Y1A)
                        {}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1B)
                        {}
                })
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1A._INT, IRQM)  // _INT: Interrupts
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y1B._DMA, DMAM)  // _DMA: Direct Memory Access
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1C._MIN, IO11)  // _MIN: Minimum Base Address
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1C._MAX, IO12)  // _MAX: Maximum Base Address
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y1C._LEN, LEN1)  // _LEN: Length
                Name (CRS2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1F)
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y20)
                    IRQNoFlags (_Y1D)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1E)
                        {2}
                })
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1D._INT, IRQE)  // _INT: Interrupts
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1E._DMA, DMAE)  // _DMA: Direct Memory Access
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1F._MIN, IO21)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1F._MAX, IO22)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1F._LEN, LEN2)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y20._MIN, IO31)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y20._MAX, IO32)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y20._LEN, LEN3)  // _LEN: Length
                Method (DCRS, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    IO11 = (IOAH << 0x08)
                    IO11 |= IOAL /* \_SB_.PCI0.SBRG.IO11 */
                    IO12 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                    Local0 = (FindSetRightBit (IO11) - One)
                    LEN1 = (One << Local0)
                    If (INTR)
                    {
                        IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.INTR */
                    }
                    Else
                    {
                        IRQM = Zero
                    }

                    If (((DMCH > 0x03) || (Arg1 == Zero)))
                    {
                        DMAM = Zero
                    }
                    Else
                    {
                        Local1 = (DMCH & 0x03)
                        DMAM = (One << Local1)
                    }

                    EXFG ()
                    Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                }

                Method (DSRS, 2, NotSerialized)
                {
                    CreateWordField (Arg0, 0x09, IRQM)
                    CreateByteField (Arg0, 0x0C, DMAM)
                    CreateWordField (Arg0, 0x02, IO11)
                    ENFG (CGLD (Arg1))
                    IOAL = (IO11 & 0xFF)
                    IOAH = (IO11 >> 0x08)
                    If (IRQM)
                    {
                        FindSetRightBit (IRQM, Local0)
                        INTR = (Local0 - One)
                    }
                    Else
                    {
                        INTR = Zero
                    }

                    If (DMAM)
                    {
                        FindSetRightBit (DMAM, Local0)
                        DMCH = (Local0 - One)
                    }
                    Else
                    {
                        DMCH = 0x04
                    }

                    EXFG ()
                    DCNT (Arg1, One)
                }

                OperationRegion (GPIO, SystemIO, IO1B, 0x08)
                Field (GPIO, ByteAcc, NoLock, Preserve)
                {
                    GP10,   1, 
                    GP11,   1, 
                    GP12,   1, 
                    GP13,   1, 
                    GO14,   1, 
                    GO15,   1, 
                    GO16,   1, 
                    GO17,   1, 
                    GP20,   1, 
                    GP21,   1, 
                    GP22,   1, 
                    GP23,   1, 
                    GO24,   1, 
                    GO25,   1, 
                    GO26,   1, 
                    GO27,   1, 
                    GP30,   1, 
                    GP31,   1, 
                    GP32,   1, 
                    GP33,   1, 
                    GO34,   1, 
                    GO35,   1, 
                    GO36,   1, 
                    GO37,   1, 
                    GP40,   1, 
                    GP41,   1, 
                    GP42,   1, 
                    GP43,   1, 
                    GO44,   1, 
                    GO45,   1, 
                    GO46,   1, 
                    GO47,   1, 
                    GP50,   1, 
                    GP51,   1, 
                    GP52,   1, 
                    GP53,   1, 
                    GP54,   1, 
                    GP55,   1, 
                    GP56,   1, 
                    GP57,   1, 
                    GP60,   1, 
                    GP61,   1, 
                    GP62,   1, 
                    GP63,   1, 
                    GP64,   1, 
                    GP65,   1, 
                    GP66,   1, 
                    GP67,   1, 
                    GP70,   1, 
                    GP71,   1, 
                    GP72,   1, 
                    GP73,   1, 
                    GP74,   1, 
                    GP75,   1, 
                    GP76,   1, 
                    GP77,   1, 
                    GP80,   1, 
                    GP81,   1, 
                    GP82,   1, 
                    GP83,   1, 
                    GP84,   1, 
                    GP85,   1, 
                    GP86,   1, 
                    GP87,   1
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (UHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x00120001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC3)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC5)
            {
                Name (_ADR, 0x00130001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC6)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC7)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                If ((STCL == 0x0101))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (SACS, PCI_Config, Zero, 0x40)
                    Field (SACS, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x24), 
                        STB5,   32
                    }

                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (PRIS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1, 
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4, 
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1, 
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4, 
                                Offset (0x2A0), 
                                    ,   7
                            }

                            If (((OSTY <= 0x15) && (OSTY >= 0x12)))
                            {
                                If (PMS1)
                                {
                                    Local0 = 0x32
                                    While (((PMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (PSS1)
                                {
                                    Local0 = 0x32
                                    While (((PSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            PRIS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PRIS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x128), 
                                    PMS0,   4, 
                                    Offset (0x129), 
                                    PMS1,   4
                                }

                                If (~(PMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x120), 
                                        ,   7, 
                                    PMBY,   1
                                }

                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x228), 
                                    PSS0,   4, 
                                    Offset (0x229), 
                                    PSS1,   4
                                }

                                If (~(PSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x220), 
                                        ,   7, 
                                    PSBY,   1
                                }

                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (SECS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1, 
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4, 
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1, 
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4, 
                                Offset (0x2AC)
                            }

                            If (((OSTY <= 0x15) && (OSTY >= 0x12)))
                            {
                                If (SMS1)
                                {
                                    Local0 = 0x32
                                    While (((SMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (SSS1)
                                {
                                    Local0 = 0x32
                                    While (((SSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            SECS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SECS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A8), 
                                    SMS0,   4, 
                                    Offset (0x1A9), 
                                    SMS1,   4
                                }

                                If (~(SMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A0), 
                                        ,   7, 
                                    SMBY,   1
                                }

                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A8), 
                                    SSS0,   4, 
                                    Offset (0x2A9), 
                                    SSS1,   4
                                }

                                If (~(SSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A0), 
                                        ,   7, 
                                    SSBY,   1
                                }

                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                            }
                        }
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PCE2, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE3, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE4, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE5, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE6, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE7, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE9, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEA, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEB, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                \_SB.PCI0.SBRG.SIOH ()
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                \_SB.PCI0.SBRG.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC3, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC5, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC6, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x03, 0x04))
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G0T0, Package (0x07)
        {
            0x00060000, 
            "AP version", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T3, Package (0x07)
        {
            0x00020003, 
            "CnQ Flag", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T7, Package (0x07)
        {
            0x00070007, 
            "P State Control", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T4, Package (0x07)
        {
            0x00070004, 
            "New CPU Installed", 
            One, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T8, Package (0x07)
        {
            0x00060008, 
            "Item capability", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G0T9, Package (0x07)
        {
            0x00060009, 
            "Item control", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRP0, Package (0x06)
        {
            G0T0, 
            G0T3, 
            G0T7, 
            G0T4, 
            G0T8, 
            G0T9
        })
        Method (GIT0, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == Zero)) {}
            Else
            {
                If ((_T_0 == One)) {}
                Else
                {
                    If ((_T_0 == 0x03))
                    {
                        ASB1 = GNVS (0x1703)
                    }
                    Else
                    {
                        If ((_T_0 == 0x04))
                        {
                            ASB1 = GNVS (0x13CA)
                        }
                        Else
                        {
                            If ((_T_0 == 0x08))
                            {
                                Local0 = Zero
                                Local0 |= 0x02
                                Local0 |= One
                                ASB1 = Local0
                            }
                            Else
                            {
                                If ((_T_0 == 0x09))
                                {
                                    Local0 = Zero
                                    Local0 |= 0x02
                                    Local0 |= One
                                    ASB1 = Local0
                                }
                                Else
                                {
                                    ASB0 = Zero
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (SIT0, 3, NotSerialized)
        {
            If ((Arg2 & 0xFFFF))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                _T_0 = (Arg0 & 0xFFFF)
                If ((_T_0 == Zero)) {}
                Else
                {
                    If ((_T_0 == One)) {}
                    Else
                    {
                        If ((_T_0 == 0x03)) {}
                        Else
                        {
                            If ((_T_0 == 0x07))
                            {
                                SNVS (0x1703, Arg1)
                            }
                            Else
                            {
                                If ((_T_0 == 0x04))
                                {
                                    SNVS (0x13CA, Arg1)
                                    ASB0 = 0x03
                                }
                                Else
                                {
                                    ASB0 = Zero
                                }
                            }
                        }
                    }
                }
            }
            Else
            {
                ASB0 = 0x03
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G4T0, Package (0x04)
        {
            0x04070010, 
            "CPU Q-FAN Control", 
            0x80000000, 
            Zero
        })
        Name (G4T1, Package (0x08)
        {
            0x04080011, 
            "CPU Q-FAN Profile", 
            0x00100001, 
            Zero, 
            0x03, 
            "Performance", 
            "Optimal", 
            "Silent"
        })
        Name (G4T2, Package (0x07)
        {
            0x04080012, 
            "CPU FAN Type", 
            0x00100001, 
            Zero, 
            0x02, 
            "PWM", 
            "DC"
        })
        Name (G420, Package (0x04)
        {
            0x04070070, 
            "Chassis Q-FAN Control", 
            0x80000000, 
            Zero
        })
        Name (G421, Package (0x08)
        {
            0x04080071, 
            "Chassis Q-FAN Profile", 
            0x00100001, 
            Zero, 
            0x03, 
            "Performance", 
            "Optimal", 
            "Silent"
        })
        Name (GRP4, Package (0x05)
        {
            G4T0, 
            G4T1, 
            G420, 
            G421, 
            G4T2
        })
        Method (GIT4, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x10))
            {
                ASB1 = GNVS (0x1781)
            }
            Else
            {
                If ((_T_0 == 0x11))
                {
                    ASB1 = GNVS (0x26CA)
                }
                Else
                {
                    If ((_T_0 == 0x12))
                    {
                        ASB1 = GNVS (0x17A0)
                    }
                    Else
                    {
                        If ((_T_0 == 0x70))
                        {
                            ASB1 = GNVS (0x1782)
                        }
                        Else
                        {
                            If ((_T_0 == 0x71))
                            {
                                ASB1 = GNVS (0x26CC)
                            }
                            Else
                            {
                                ASB0 = Zero
                            }
                        }
                    }
                }
            }
        }

        Method (SIT4, 3, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x10))
            {
                If ((GNVS (0x1781) != Arg1))
                {
                    If ((Arg2 & One))
                    {
                        If ((Arg1 == Zero))
                        {
                            QFCS (Zero, Arg1, GNVS (0x17A0))
                        }
                        Else
                        {
                            QFCS (Zero, (GNVS (0x26CA) + One), GNVS (0x17A0))
                        }

                        SNVS (0x1781, Arg1)
                    }
                }
            }
            Else
            {
                If ((_T_0 == 0x11))
                {
                    If ((GNVS (0x26CA) != Arg1))
                    {
                        If ((Arg2 & One))
                        {
                            QFCS (Zero, (Arg1 + One), GNVS (0x17A0))
                            SNVS (0x26CA, Arg1)
                        }
                    }
                }
                Else
                {
                    If ((_T_0 == 0x12))
                    {
                        If ((GNVS (0x17A0) != Arg1))
                        {
                            If ((Arg2 & One))
                            {
                                SNVS (0x17A0, Arg1)
                                QFCS (Zero, (GNVS (0x26CA) + One), GNVS (0x17A0))
                            }
                        }
                    }
                    Else
                    {
                        If ((_T_0 == 0x70))
                        {
                            If ((GNVS (0x1782) != Arg1))
                            {
                                If ((Arg2 & One))
                                {
                                    If ((Arg1 == Zero))
                                    {
                                        QFCS (One, Arg1, One)
                                    }
                                    Else
                                    {
                                        QFCS (One, (GNVS (0x26CC) + One), One)
                                    }

                                    SNVS (0x1782, Arg1)
                                }
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x71))
                            {
                                If ((GNVS (0x26CC) != Arg1))
                                {
                                    If ((Arg2 & One))
                                    {
                                        QFCS (One, (Arg1 + One), One)
                                        SNVS (0x26CC, Arg1)
                                    }
                                }
                            }
                            Else
                            {
                                ASB0 = Zero
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G611, Package (0x07)
        {
            0x06020011, 
            "Vcore Voltage", 
            0x20000000, 
            Zero, 
            0x0320, 
            0x0320, 
            0x02
        })
        Name (G663, Package (0x07)
        {
            0x06020063, 
            "+3.3V Voltage", 
            0x20000000, 
            Zero, 
            0x0B9A, 
            0x0294, 
            0x02
        })
        Name (G662, Package (0x07)
        {
            0x06020062, 
            "+5V Voltage", 
            0x20000000, 
            Zero, 
            0x1194, 
            0x03E8, 
            0x02
        })
        Name (G661, Package (0x07)
        {
            0x06020061, 
            "+12V Voltage", 
            0x20000000, 
            Zero, 
            0x27D8, 
            0x0E10, 
            0x02
        })
        Name (G612, Package (0x07)
        {
            0x06030012, 
            "CPU Temperature", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x015E, 
            0x02
        })
        Name (G614, Package (0x07)
        {
            0x06030014, 
            "MB Temperature", 
            0x20000000, 
            Zero, 
            0x01C2, 
            0x012C, 
            0x02
        })
        Name (G613, Package (0x07)
        {
            0x06040013, 
            "CPU Fan Speed", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x19C8, 
            0x02
        })
        Name (G673, Package (0x07)
        {
            0x06040073, 
            "Chassis Fan Speed", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x19C8, 
            0x02
        })
        Name (G683, Package (0x07)
        {
            0x06040083, 
            "Chassis2 Fan Speed", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x19C8, 
            0x02
        })
        Name (GRP6, Package (0x09)
        {
            G611, 
            G663, 
            G662, 
            G661, 
            G612, 
            G614, 
            G613, 
            G673, 
            G683
        })
        Method (GIT6, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x11))
            {
                ASB1 = RVLT (Zero)
            }
            Else
            {
                If ((_T_0 == 0x63))
                {
                    ASB1 = RVLT (One)
                }
                Else
                {
                    If ((_T_0 == 0x62))
                    {
                        ASB1 = RVLT (0x02)
                    }
                    Else
                    {
                        If ((_T_0 == 0x61))
                        {
                            ASB1 = RVLT (0x03)
                        }
                        Else
                        {
                            If ((_T_0 == 0x12))
                            {
                                ASB1 = ^^SIOR.HWT1 ()
                            }
                            Else
                            {
                                If ((_T_0 == 0x14))
                                {
                                    ASB1 = ^^SIOR.HWT2 ()
                                }
                                Else
                                {
                                    If ((_T_0 == 0x13))
                                    {
                                        ASB1 = ^^SIOR.HWF1 ()
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x73))
                                        {
                                            ASB1 = ^^SIOR.HWF2 ()
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x83))
                                            {
                                                ASB1 = ^^SIOR.HWF3 ()
                                            }
                                            Else
                                            {
                                                ASB0 = Zero
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (SIT6, 3, NotSerialized)
        {
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G9T0, Package (0x07)
        {
            0x09080000, 
            "AI Overclocking", 
            Zero, 
            One, 
            0x02, 
            "Manual", 
            "Auto"
        })
        Name (GRP9, Package (0x01)
        {
            G9T0
        })
        Method (GIT9, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == Zero))
            {
                ASB1 = GNVS (0x360B)
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT9, 3, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == Zero))
            {
                If ((GNVS (0x360B) != Arg1))
                {
                    If ((Arg2 & One))
                    {
                        SNVS (0x360B, Arg1)
                    }

                    ASB0 |= 0x02
                }
            }
            Else
            {
                ASB0 = Zero
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (GBT0, Package (0x07)
        {
            0x0B060001, 
            "System Performance", 
            Zero, 
            Zero, 
            0x03, 
            One, 
            0x04
        })
        Name (GBT1, Package (0x07)
        {
            0x0B060002, 
            "System Performance Control", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GBT2, Package (0x07)
        {
            0x0B060003, 
            "System GUI", 
            0x04, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GBT3, Package (0x07)
        {
            0x0B050006, 
            "AI Gear push up", 
            Zero, 
            One, 
            Zero, 
            One, 
            0x1F
        })
        Name (GBT4, Package (0x07)
        {
            0x0B050007, 
            "AI Gear pop down", 
            Zero, 
            One, 
            Zero, 
            One, 
            0x33
        })
        Name (GBT5, Package (0x07)
        {
            0x0B060010, 
            "Level Switch", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GBT7, Package (0x07)
        {
            0x0B060021, 
            "AI Gear NB voltage", 
            Zero, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (GBT8, Package (0x07)
        {
            0x0B060022, 
            "AI Gear load line select", 
            Zero, 
            Zero, 
            Zero, 
            One, 
            0x03
        })
        Name (GBT9, Package (0x07)
        {
            0x0B060023, 
            "AI Gear CPU voltage", 
            Zero, 
            Zero, 
            Zero, 
            One, 
            0x03
        })
        Name (GBTA, Package (0x07)
        {
            0x0B060080, 
            "EPU version", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRPB, Package (0x0A)
        {
            GBT0, 
            GBT1, 
            GBT2, 
            GBT3, 
            GBT4, 
            GBT5, 
            GBT7, 
            GBT8, 
            GBT9, 
            GBTA
        })
        Method (GITB, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == One))
            {
                ASB1 = (DerefOf (Index (GBT0, 0x02)) & 0xFFFF)
            }
            Else
            {
                If ((_T_0 == 0x02))
                {
                    ASB1 = DerefOf (Index (GBT1, 0x02))
                }
                Else
                {
                    If ((_T_0 == 0x03))
                    {
                        ASB1 = DerefOf (Index (GBT2, 0x02))
                    }
                    Else
                    {
                        If ((_T_0 == 0x06))
                        {
                            ASB1 = GDEF (Zero)
                        }
                        Else
                        {
                            If ((_T_0 == 0x07))
                            {
                                ASB1 = GDEF (0x05)
                            }
                            Else
                            {
                                If ((_T_0 == 0x20))
                                {
                                    ASB1 = GDEF (0x03)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x21))
                                    {
                                        ASB1 = GDEF (One)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x22))
                                        {
                                            ASB1 = GDEF (0x04)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x23))
                                            {
                                                ASB1 = GDEF (0x02)
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x80))
                                                {
                                                    ASB1 = One
                                                }
                                                Else
                                                {
                                                    ASB0 = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (SITB, 3, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == One))
            {
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                _T_1 = (Arg2 & 0xFFFF)
                If ((_T_1 == Zero))
                {
                    If ((GNVS (0x360B) == Zero))
                    {
                        ASB0 = COMS (Arg1, ASB0)
                    }
                    Else
                    {
                        Local0 = (DerefOf (Index (GBT0, 0x02)) & 0xFFFF)
                        If ((Local0 == Zero))
                        {
                            PAR0 = Local0
                        }
                    }
                }
                Else
                {
                    If ((_T_1 == One))
                    {
                        If ((Arg1 & 0x8000))
                        {
                            Local0 = (Arg1 & 0xFF00)
                        }
                        Else
                        {
                            Local0 = (Arg1 & 0xFFFF)
                        }

                        Local1 = (Arg1 & 0xFFFF)
                        Index (GBT0, 0x02) = Local0
                        SICL (Local1)
                        PAR0 = Local0
                    }
                    Else
                    {
                        ASB0 = Zero
                    }
                }
            }
            Else
            {
                If ((_T_0 == 0x02))
                {
                    Local0 = (Arg1 & 0xFF)
                    If ((STCG (Local0) == One))
                    {
                        Index (GBT1, 0x02) = Local0
                    }
                    Else
                    {
                        ASB0 = Zero
                    }
                }
                Else
                {
                    If ((_T_0 == 0x06))
                    {
                        Local0 = (Arg1 + DerefOf (Index (GBT3, 0x04)))
                        AGPU (Local0, DerefOf (Index (GBT3, 0x05)))
                    }
                    Else
                    {
                        If ((_T_0 == 0x07))
                        {
                            Local0 = (Arg1 + DerefOf (Index (GBT4, 0x04)))
                            AGPD (Local0, DerefOf (Index (GBT4, 0x05)))
                        }
                        Else
                        {
                            If ((_T_0 == 0x10))
                            {
                                Local0 = (Arg1 & 0xFF)
                                AGLS (Local0)
                            }
                            Else
                            {
                                If ((_T_0 == 0x20))
                                {
                                    Local0 = (Arg1 & 0xFF)
                                    AGDV (Local0)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x21))
                                    {
                                        Local0 = (Arg1 & 0xFF)
                                        AGNV (Local0)
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x22))
                                        {
                                            Local0 = (Arg1 & 0xFF)
                                            AGLI (Local0)
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x23))
                                            {
                                                Local0 = (Arg1 & 0xFF)
                                                AGCV (Local0)
                                            }
                                            Else
                                            {
                                                ASB0 = Zero
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (GET1, Package (0x07)
        {
            0x0E060001, 
            "OC Status", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRPE, Package (0x01)
        {
            GET1
        })
        Name (OCST, Buffer (0x04)
        {
             0x00, 0x01, 0x02, 0x03                           /* .... */
        })
        Method (GITE, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == One))
            {
                ASB1 = RPSS ()
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SITE, 3, NotSerialized)
        {
        }

        Name (OMNB, Buffer (0x02)
        {
             0x00, 0x00                                       /* .. */
        })
        Name (OMST, Buffer (0x08)
        {
             0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x02, 0x03   /* ........ */
        })
        Name (DFSB, Buffer (0x08)
        {
             0x00, 0x00, 0x0A, 0x0A, 0x01, 0x00, 0x01, 0x01   /* ........ */
        })
        Name (OLTB, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  /* ........ */
            /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00   /* ........ */
        })
        Name (CLKB, Buffer (0x1B)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0018 */  0x00, 0x00, 0x00                                 /* ... */
        })
        Name (FSBT, Zero)
        Name (AIGC, Zero)
        Name (PICL, One)
        Name (LVIC, Zero)
        Name (CDIV, Zero)
        Method (COMS, 2, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x8000))
            {
                Return (Arg1 &= 0xFB)
            }
            Else
            {
                If ((_T_0 == 0x4000))
                {
                    If ((DerefOf (Index (OMST, Zero)) == One))
                    {
                        Return (Arg1 &= 0xFB)
                    }
                }
                Else
                {
                    If ((_T_0 == Zero))
                    {
                        If ((DerefOf (Index (OMST, One)) == One))
                        {
                            Return (Arg1 &= 0xFB)
                        }
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            If ((DerefOf (Index (OMST, 0x02)) == One))
                            {
                                Return (Arg1 &= 0xFB)
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                If ((DerefOf (Index (OMST, 0x03)) == One))
                                {
                                    Return (Arg1 &= 0xFB)
                                }
                            }
                            Else
                            {
                                Return (Arg1 |= 0x04)
                            }
                        }
                    }
                }
            }

            Return (Arg1 |= 0x04)
        }

        Method (GDEF, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFF)
            If ((_T_0 == Zero))
            {
                If ((GNVS (0x360B) == Zero))
                {
                    Local0 = (0x04 * GNVS (0x360B))
                }
                Else
                {
                    Local0 = (0x04 * One)
                }

                Return (DerefOf (Index (DFSB, (LVIC + Local0))))
            }
            Else
            {
                If ((_T_0 == One))
                {
                    Return (GVOT (One, LVIC))
                }
                Else
                {
                    If ((_T_0 == 0x02))
                    {
                        Return (GVOT (0x02, LVIC))
                    }
                    Else
                    {
                        If ((_T_0 == 0x03))
                        {
                            Return (GVOT (0x03, LVIC))
                        }
                        Else
                        {
                            If ((_T_0 == 0x04))
                            {
                                Return (GVOT (0x04, LVIC))
                            }
                            Else
                            {
                                If ((_T_0 == 0x05))
                                {
                                    If ((GNVS (0x360B) == Zero))
                                    {
                                        Local0 = (0x04 * GNVS (0x360B))
                                    }
                                    Else
                                    {
                                        Local0 = (0x04 * One)
                                    }

                                    Return (DerefOf (Index (DFSB, (LVIC + Local0))))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (AGPU, 2, NotSerialized)
        {
            If ((Arg0 > Zero))
            {
                CAMN (CAFS (One, Arg0, Arg1))
            }

            Return (One)
        }

        Method (AGPD, 2, NotSerialized)
        {
            If ((Arg0 > Zero))
            {
                CAMN (CAFS (Zero, Arg0, Arg1))
            }

            Return (One)
        }

        Method (AGLS, 1, NotSerialized)
        {
            LVIC = Arg0
            Return (One)
        }

        Method (AGDV, 1, NotSerialized)
        {
            SVOT (0x03, LVIC, Arg0)
            Return (One)
        }

        Method (AGNV, 1, NotSerialized)
        {
            SVOT (One, LVIC, Arg0)
            Return (One)
        }

        Method (AGLI, 1, NotSerialized)
        {
            SVOT (0x04, LVIC, Arg0)
            Return (One)
        }

        Method (AGCV, 1, NotSerialized)
        {
            SVOT (0x02, LVIC, Arg0)
            Return (One)
        }

        Method (SVOT, 3, NotSerialized)
        {
            Local0 = (Arg0 + (Arg1 * 0x06))
            Index (OLTB, Local0) = Arg2
            Return (One)
        }

        Method (GVOT, 2, NotSerialized)
        {
            Local0 = (Arg0 + (Arg1 * 0x06))
            Local1 = DerefOf (Index (OLTB, Local0))
            Return (Local1)
        }

        Method (CAFS, 3, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFF)
            If ((_T_0 == Zero))
            {
                Local0 = (Arg1 * Arg2)
                Local0 = (0x64 - Local0)
                Local0 *= GNVS (0xA2B8)
                Divide (Local0, 0x64, Local5, Local0)
            }
            Else
            {
                If ((_T_0 == One))
                {
                    Local0 = (Arg1 * Arg2)
                    Local0 += 0x64
                    Local0 *= GNVS (0xA2B8)
                    Divide (Local0, 0x64, Local5, Local0)
                }
            }

            Return (Local0)
        }

        Method (SICL, 1, NotSerialized)
        {
            If ((Arg0 & 0x8000))
            {
                AIGC = One
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                _T_0 = (Arg0 & 0xFF)
                If ((_T_0 == Zero))
                {
                    ITAT ()
                }
                Else
                {
                    If ((_T_0 == 0x10))
                    {
                        SPIC (Zero)
                        PICL = Zero
                    }
                    Else
                    {
                        If ((_T_0 == 0x13))
                        {
                            SPIC (0x03)
                            PICL = 0x03
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
            }
            Else
            {
                AIGC = Zero
                If ((Arg0 & 0x4000))
                {
                    SPIC (Zero)
                    PICL = Zero
                }
                Else
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_1 = (Arg0 & 0xFF)
                    If ((_T_1 == Zero))
                    {
                        SPIC (One)
                        PICL = One
                    }
                    Else
                    {
                        If ((_T_1 == One))
                        {
                            SPIC (0x02)
                            PICL = 0x02
                        }
                        Else
                        {
                            If ((_T_1 == 0x02))
                            {
                                SPIC (0x03)
                                PICL = 0x03
                            }
                            Else
                            {
                                If ((_T_1 == 0xFF))
                                {
                                    SPIC (0x03)
                                    PICL = 0x03
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                    }
                }
            }

            Return (One)
        }

        Method (SPIC, 1, NotSerialized)
        {
            If ((Arg0 <= PICL))
            {
                If (((Arg0 > One) | (AIGC == One)))
                {
                    EQFC (One)
                }
                Else
                {
                    EQFC (Zero)
                }

                If ((GNVS (0x360B) != Zero))
                {
                    If (((Arg0 == 0x03) & (AIGC == Zero)))
                    {
                        TMCL (One)
                    }
                    Else
                    {
                        TMCL (Zero)
                    }

                    SFSB (Arg0)
                }
            }
            Else
            {
                If ((GNVS (0x360B) != Zero))
                {
                    SFSB (Arg0)
                    If (((Arg0 == 0x03) & (AIGC == Zero)))
                    {
                        TMCL (One)
                    }
                    Else
                    {
                        TMCL (Zero)
                    }
                }

                If (((Arg0 > One) | (AIGC == One)))
                {
                    EQFC (One)
                }
                Else
                {
                    EQFC (Zero)
                }
            }

            RCAS ()
        }

        Method (EQFC, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = (GNVS (0x26CA) + One)
                If ((GNVS (0x1781) == Zero))
                {
                    Local0 = Zero
                }

                QFCS (Zero, Local0, GNVS (0x17A0))
            }
            Else
            {
                QFCS (Zero, 0x03, GNVS (0x17A0))
            }

            If ((Arg0 == Zero))
            {
                Local0 = (GNVS (0x26CC) + One)
                If ((GNVS (0x1782) == Zero))
                {
                    Local0 = Zero
                }

                QFCS (One, Local0, One)
            }
            Else
            {
                QFCS (One, 0x03, One)
            }

            Return (One)
        }

        OperationRegion (SIOE, SystemIO, IOEB, 0x20)
        Field (SIOE, ByteAcc, NoLock, Preserve)
        {
            Offset (0x05), 
            GIDX,   8, 
            GDAT,   8
        }

        IndexField (GIDX, GDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x03), 
            SO03,   8, 
            Offset (0x13), 
            SO13,   8, 
            Offset (0x15), 
            SO15,   8, 
            SO16,   8, 
            SO17,   8, 
            Offset (0x45), 
            SO45,   8, 
            Offset (0x60), 
            SO60,   8, 
            SO61,   8, 
            SO62,   8, 
            SO63,   8, 
            SO64,   8, 
            SO65,   8, 
            SO66,   8, 
            SO67,   8, 
            SO68,   8, 
            SO69,   8, 
            SO6A,   8, 
            SO6B,   8, 
            SO6C,   8, 
            SO6D,   8, 
            SO6E,   8, 
            SO6F,   8, 
            SO70,   8, 
            SO71,   8, 
            SO72,   8, 
            SO73,   8, 
            SO74,   8, 
            SO75,   8, 
            SO76,   8, 
            SO77,   8
        }

        Name (SQFM, Package (0x03)
        {
            Package (0x04)
            {
                Package (0x06)
                {
                    Zero, 
                    0x0A, 
                    0x46, 
                    0xFF, 
                    0xFF, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x0A, 
                    0x46, 
                    0x02, 
                    0x10, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x14, 
                    0x46, 
                    0x06, 
                    0x10, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x14, 
                    0x46, 
                    0x1B, 
                    0x08, 
                    0x65
                }
            }, 

            Package (0x04)
            {
                Package (0x06)
                {
                    Zero, 
                    0x18, 
                    0x46, 
                    0xFF, 
                    0xFF, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x18, 
                    0x46, 
                    0x35, 
                    0x10, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x0D, 
                    0x46, 
                    0x35, 
                    0x08, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x1C, 
                    0x46, 
                    0x35, 
                    0x08, 
                    0x65
                }
            }, 

            Package (0x04)
            {
                Package (0x06)
                {
                    Zero, 
                    0x18, 
                    0x46, 
                    0xFF, 
                    0xFF, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x18, 
                    0x46, 
                    0x35, 
                    0x10, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x0D, 
                    0x46, 
                    0x35, 
                    0x08, 
                    0x65
                }, 

                Package (0x06)
                {
                    0x80, 
                    0x1C, 
                    0x46, 
                    0x35, 
                    0x08, 
                    0x65
                }
            }
        })
        Method (QFCS, 3, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                SO60 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, Zero)), Arg1
                    )), Zero))
                SO61 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, Zero)), Arg1
                    )), One))
                SO62 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, Zero)), Arg1
                    )), 0x02))
                SO65 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, Zero)), Arg1
                    )), 0x05))
                Local0 = (DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, Zero)), 
                    Arg1)), 0x03)) & 0x7F)
                If ((Local0 == Zero))
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_0 = (GNVS (0x4568) & 0xFF)
                    If ((_T_0 == Zero))
                    {
                        SO63 = 0x19
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            SO63 = 0x20
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                SO63 = 0x27
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    SO63 = 0x2C
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        SO63 = 0x33
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            SO63 = 0x39
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                SO63 = 0x40
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x07))
                                                {
                                                    SO63 = 0x46
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x08))
                                                    {
                                                        SO63 = 0x4C
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x09))
                                                        {
                                                            SO63 = 0x53
                                                        }
                                                        Else
                                                        {
                                                            SO63 = Local0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Else
                {
                    SO63 = Local0
                }

                Local1 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, Zero)), Arg1
                    )), 0x04))
                If ((Local1 == 0xFF))
                {
                    Local2 = (SO62 - SO61) /* \_SB_.PCI0.SBRG.ASOC.SO61 */
                    If ((Local2 != Zero))
                    {
                        Divide (((0x7F - SO63) << 0x03), Local2, Local3, Local1)
                    }
                    Else
                    {
                        Local1 = One
                    }
                }

                If ((Local1 > 0x3F))
                {
                    SO63 |= 0x80
                }

                SO64 = ((Local1 & 0x3F) | 0x80)
                SO68 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, One)), Arg1
                    )), Zero))
                SO69 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, One)), Arg1
                    )), One))
                SO6A = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, One)), Arg1
                    )), 0x02))
                SO6D = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, One)), Arg1
                    )), 0x05))
                Local0 = (DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, One)), 
                    Arg1)), 0x03)) & 0x7F)
                If ((Local0 == Zero))
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_1 = (GNVS (0x4568) & 0xFF)
                    If ((_T_1 == Zero))
                    {
                        SO6B = 0x19
                    }
                    Else
                    {
                        If ((_T_1 == One))
                        {
                            SO6B = 0x20
                        }
                        Else
                        {
                            If ((_T_1 == 0x02))
                            {
                                SO6B = 0x27
                            }
                            Else
                            {
                                If ((_T_1 == 0x03))
                                {
                                    SO6B = 0x2C
                                }
                                Else
                                {
                                    If ((_T_1 == 0x04))
                                    {
                                        SO6B = 0x33
                                    }
                                    Else
                                    {
                                        If ((_T_1 == 0x05))
                                        {
                                            SO6B = 0x39
                                        }
                                        Else
                                        {
                                            If ((_T_1 == 0x06))
                                            {
                                                SO6B = 0x40
                                            }
                                            Else
                                            {
                                                If ((_T_1 == 0x07))
                                                {
                                                    SO6B = 0x46
                                                }
                                                Else
                                                {
                                                    If ((_T_1 == 0x08))
                                                    {
                                                        SO6B = 0x4C
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_1 == 0x09))
                                                        {
                                                            SO6B = 0x53
                                                        }
                                                        Else
                                                        {
                                                            SO6B = Local0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Else
                {
                    SO6B = Local0
                }

                Local1 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, One)), Arg1
                    )), 0x04))
                If ((Local1 == 0xFF))
                {
                    Local2 = (SO6A - SO69) /* \_SB_.PCI0.SBRG.ASOC.SO69 */
                    If ((Local2 != Zero))
                    {
                        Divide (((0x7F - SO6B) << 0x03), Local2, Local3, Local1)
                    }
                    Else
                    {
                        Local1 = One
                    }
                }

                If ((Local1 > 0x3F))
                {
                    SO6B |= 0x80
                }

                SO6C = ((Local1 & 0x3F) | 0x80)
                If ((Arg2 == Zero))
                {
                    SO15 = 0x80
                    SO16 = 0x7F
                    If ((Arg1 == Zero))
                    {
                        SO13 &= 0xFC
                    }
                    Else
                    {
                        SO13 &= 0xFD
                        SO13 |= One
                    }
                }
                Else
                {
                    SO15 = 0x7F
                    SO16 = 0x80
                    If ((Arg1 == Zero))
                    {
                        SO13 &= 0xFC
                    }
                    Else
                    {
                        SO13 &= 0xFE
                        SO13 |= 0x02
                    }
                }
            }
            Else
            {
                SO70 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, 0x02)), Arg1
                    )), Zero))
                SO71 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, 0x02)), Arg1
                    )), One))
                SO72 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, 0x02)), Arg1
                    )), 0x02))
                SO75 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, 0x02)), Arg1
                    )), 0x05))
                Local0 = (DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, 0x02)), 
                    Arg1)), 0x03)) & 0x7F)
                If ((Local0 == Zero))
                {
                    Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_2 = (GNVS (0x361B) & 0xFF)
                    If ((_T_2 == Zero))
                    {
                        SO73 = 0x19
                    }
                    Else
                    {
                        If ((_T_2 == One))
                        {
                            SO73 = 0x20
                        }
                        Else
                        {
                            If ((_T_2 == 0x02))
                            {
                                SO73 = 0x27
                            }
                            Else
                            {
                                If ((_T_2 == 0x03))
                                {
                                    SO73 = 0x2C
                                }
                                Else
                                {
                                    If ((_T_2 == 0x04))
                                    {
                                        SO73 = 0x33
                                    }
                                    Else
                                    {
                                        If ((_T_2 == 0x05))
                                        {
                                            SO73 = 0x39
                                        }
                                        Else
                                        {
                                            If ((_T_2 == 0x06))
                                            {
                                                SO73 = 0x40
                                            }
                                            Else
                                            {
                                                If ((_T_2 == 0x07))
                                                {
                                                    SO73 = 0x46
                                                }
                                                Else
                                                {
                                                    If ((_T_2 == 0x08))
                                                    {
                                                        SO73 = 0x4C
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_2 == 0x09))
                                                        {
                                                            SO73 = 0x53
                                                        }
                                                        Else
                                                        {
                                                            SO73 = Local0
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Else
                {
                    SO73 = Local0
                }

                Local1 = DerefOf (Index (DerefOf (Index (DerefOf (Index (SQFM, 0x02)), Arg1
                    )), 0x04))
                If ((Local1 == 0xFF))
                {
                    Local2 = (SO72 - SO71) /* \_SB_.PCI0.SBRG.ASOC.SO71 */
                    If ((Local2 != Zero))
                    {
                        Divide (((0x7F - SO73) << 0x03), Local2, Local3, Local1)
                    }
                    Else
                    {
                        Local1 = One
                    }
                }

                If ((Local1 > 0x3F))
                {
                    SO73 |= 0x80
                }

                SO74 = ((Local1 & 0x3F) | 0x80)
                SO17 = 0x80
                If ((Arg1 == Zero))
                {
                    SO13 &= 0xFB
                }
                Else
                {
                    SO13 |= 0x04
                }
            }

            Return (One)
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0xBB), 
            OPBB,   8
        }

        Method (PU47, 1, NotSerialized)
        {
            ENFG (0x07)
            OPBB = ((Arg0 << 0x07) | (OPBB & 0x7F))
            EXFG ()
            Return (One)
        }

        Method (TMCL, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                GO47 = One
            }
            Else
            {
                GO47 = Zero
            }
        }

        Method (RPSS, 0, NotSerialized)
        {
            If ((SP56 == One))
            {
                Local0 = 0x03
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Name (CDTB, Buffer (0x10)
        {
            /* 0000 */  0x02, 0x03, 0x05, 0x09, 0x04, 0x06, 0x0A, 0x12,  /* ........ */
            /* 0008 */  0x08, 0x0C, 0x14, 0x24, 0x10, 0x18, 0x28, 0x48   /* ...$..(H */
        })
        Name (FSBL, Package (0x01)
        {
            Package (0x04)
            {
                0x19, 
                0x19, 
                0x0A, 
                0x0A
            }
        })
        Method (SFSB, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                SDMN ()
            }
            Else
            {
                Local0 = (GVOT (Zero, Arg0) | (GVOT (0x05, Arg0) << 0x08))
                SCMN (Local0)
            }
        }

        Method (ITAT, 0, NotSerialized)
        {
            EQFC (One)
            TMCL (Zero)
        }

        Method (RCAS, 0, NotSerialized)
        {
            Local0 = SO03 /* \_SB_.PCI0.SBRG.ASOC.SO03 */
        }

        Method (DICL, 0, NotSerialized)
        {
            Local4 = BRCD (0x05)
            BWCD (0x05, (Local4 | 0x10))
            Local4 = BRCD (0x0C)
            BWCD (0x0C, (Local4 & 0x7F))
        }

        Method (ENCL, 0, NotSerialized)
        {
            Local4 = BRCD (0x0C)
            BWCD (0x0C, (Local4 | 0x80))
            Local4 = BRCD (0x05)
            BWCD (0x05, (Local4 & 0xEF))
        }

        Method (BWCD, 2, Serialized)
        {
            Arg0 |= 0x80
            WBYT (0xD2, Arg0, Arg1)
        }

        Method (BRCD, 1, Serialized)
        {
            Arg0 |= 0x80
            Return (RBYT (0xD2, Arg0))
        }

        Method (SCMN, 1, NotSerialized)
        {
            Local0 = Arg0
            Local1 = (BRCD (0x11) << 0x03)
            Local2 = ((BRCD (0x10) & 0xC0) >> 0x05)
            Local3 = ((BRCD (0x14) & 0x80) >> 0x07)
            Local3 |= (Local1 | Local2)
            While ((Local0 != Local3))
            {
                If ((Local3 < Local0))
                {
                    Local3++
                }
                Else
                {
                    Local3--
                }

                Local4 = BRCD (0x14)
                BWCD (0x14, ((Local4 & 0x7F) | ((Local3 & One) << 
                    0x07)))
                Sleep (One)
                Local4 = BRCD (0x10)
                BWCD (0x10, ((Local4 & 0x3F) | (((Local3 & 0x06
                    ) >> One) << 0x06)))
                Sleep (One)
                BWCD (0x11, (Local3 >> 0x03))
                Sleep (One)
            }
        }

        Method (SDMN, 0, NotSerialized)
        {
            Local1 = (DerefOf (Index (DerefOf (Index (FSBL, FSBT)), One)) << 0x03)
            Local2 = ((DerefOf (Index (DerefOf (Index (FSBL, FSBT)), Zero)) & 
                0xC0) >> 0x05)
            Local3 = Zero
            Local3 |= (Local1 | Local2)
            SCMN (Local3)
        }

        Method (CAMN, 1, NotSerialized)
        {
            If ((GNVS (0x360B) == Zero))
            {
                Local0 = (DerefOf (Index (OMNB, Zero)) & 0x3F)
                Local1 = DerefOf (Index (OMNB, One))
                Local1 = ((Local2 = (Local1 << 0x03)) | (Local2 = ((Local2 = (DerefOf (Index (
                    OMNB, Zero)) >> 0x06)) << One)))
            }
            Else
            {
                Local0 = (DerefOf (Index (DerefOf (Index (FSBL, FSBT)), Zero)) & 0x3F)
                Local1 = DerefOf (Index (DerefOf (Index (FSBL, FSBT)), One))
                Local1 = ((Local2 = (Local1 << 0x03)) | (Local2 = ((Local2 = (DerefOf (Index (
                    DerefOf (Index (FSBL, FSBT)), Zero)) >> 0x06)) << One)))
            }

            Local2 = GNVS (0xA2B8)
            Local3 = (0x32 * Local1)
            Divide (Local3, Local0, Local5, Local3)
            Local4 = CDIV /* \_SB_.PCI0.SBRG.ASOC.CDIV */
            Local7 = (Arg0 * Local4)
            Local6 = (Local7 * Local0)
            Divide (Local6, 0x32, Local5, Local6)
            SVOT (Zero, LVIC, Local6)
            SVOT (0x05, LVIC, (Local6 >> 0x08))
        }

        Method (STCG, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFF)
            If ((_T_0 == Zero))
            {
                PU47 (Zero)
                If ((GNVS (0x360B) != Zero))
                {
                    SDMN ()
                    DICL ()
                    BWCD (0x10, DerefOf (Index (DerefOf (Index (FSBL, FSBT)), 0x02)))
                    BWCD (0x11, DerefOf (Index (DerefOf (Index (FSBL, FSBT)), 0x03)))
                    ENCL ()
                }
            }
            Else
            {
                If ((_T_0 == One))
                {
                    PU47 (One)
                    If ((((DerefOf (Index (OMNB, Zero)) == Zero) & (DerefOf (
                        Index (OMNB, One)) == Zero)) | (DerefOf (Index (OMNB, Zero)) != 
                        BRCD (0x10))))
                    {
                        Index (OMNB, Zero) = BRCD (0x10)
                        Index (OMNB, One) = BRCD (0x11)
                    }

                    CDIV = DerefOf (Index (CDTB, (BRCD (0x14) & 0x7F)))
                    FSBT = Zero
                    If ((GNVS (0x360B) != Zero))
                    {
                        DICL ()
                        BWCD (0x10, DerefOf (Index (DerefOf (Index (FSBL, FSBT)), Zero)))
                        BWCD (0x11, DerefOf (Index (DerefOf (Index (FSBL, FSBT)), One)))
                        ENCL ()
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Return (One)
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRS,   8, 
            Offset (0x09), 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            PIRA = Zero
            PIRB = Zero
            PIRC = Zero
            PIRD = Zero
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = Zero
            PIRF = Zero
            PIRG = Zero
            PIRH = Zero
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = Zero
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    OperationRegion (SMRG, SystemIO, 0x0B00, 0x30)
    Field (SMRG, ByteAcc, NoLock, Preserve)
    {
        HSTS,   8, 
        SSTS,   8, 
        HSTC,   8, 
        HCMD,   8, 
        HADR,   8, 
        HDT0,   8, 
        HDT1,   8, 
        BLKD,   8, 
        Offset (0x20), 
        H2TS,   8, 
        S2TS,   8, 
        H2TC,   8, 
        H2MD,   8, 
        H2DR,   8, 
        H2T0,   8, 
        H2T1,   8
    }

    Field (SMRG, ByteAcc, NoLock, Preserve)
    {
        Offset (0x05), 
        HDTW,   16
    }

    Method (ASCM, 4, Serialized)
    {
        Local0 = 0x05
        While (Local0--)
        {
            HSTS = 0x1E
            Stall (0x0A)
            While (((HSTS & One) && One))
            {
                HSTS = 0x1E
                Stall (0x0A)
            }

            HCMD = Arg1
            Stall (0x0A)
            HADR = Arg0
            Stall (0x0A)
            Local2 = (Arg0 & One)
            HSTC = Arg3
            Stall (0x0A)
            HDT0 = Arg2
            Stall (0x0A)
            HSTS = 0x1E
            Stall (0x0A)
            While (((HSTS & One) && One))
            {
                HSTS = 0x1E
                Stall (0x0A)
            }

            HSTC |= 0x40
            Stall (0x0A)
            Local1 = 0xFFFF
            While (((HSTS & One) == One))
            {
                Stall (0x14)
            }

            If ((HSTS & 0x1C))
            {
                Return (Ones)
            }

            If (Local2)
            {
                Return (HDT0) /* \HDT0 */
            }
        }

        Return (Ones)
    }

    Method (A2CM, 4, Serialized)
    {
        Local0 = 0x05
        While (Local0--)
        {
            Local1 = 0xFFFF
            While (((H2TS & One) && Local1--))
            {
                Stall (0x0A)
            }

            H2TS = 0x1E
            Stall (0x0A)
            H2MD = Arg1
            Stall (0x0A)
            H2DR = Arg0
            Stall (0x0A)
            H2TC = Arg3
            Stall (0x0A)
            H2T0 = Arg2
            Stall (0x0A)
            H2TC |= 0x40
            Stall (0x0A)
            Local1 = 0xFFFF
            While (Local1--)
            {
                If (((H2TS & 0x7F) == Zero))
                {
                    Stall (0x0A)
                }
                Else
                {
                    Local1 = One
                }
            }

            Local1 = 0xFFFF
            While (Local1--)
            {
                If (((H2TS & One) && One))
                {
                    Stall (0x0A)
                }
                Else
                {
                    Local1 = One
                }
            }

            If ((Arg0 & One))
            {
                Return (H2T0) /* \H2T0 */
            }

            If ((H2TS && 0x02))
            {
                Local0 = One
            }
        }

        Return (Ones)
    }

    Method (WBYT, 3, NotSerialized)
    {
        ASCM (Arg0, Arg1, Arg2, 0x08)
    }

    Method (RBYT, 2, NotSerialized)
    {
        Arg0 |= One
        Return ((ASCM (Arg0, Arg1, Zero, 0x08) & 0xFF))
    }

    Method (W2YT, 3, NotSerialized)
    {
        A2CM (Arg0, Arg1, Arg2, 0x08)
    }

    Method (R2YT, 2, NotSerialized)
    {
        Arg0 |= One
        Return ((A2CM (Arg0, Arg1, Zero, 0x08) & 0xFF))
    }

    Method (SBYT, 2, NotSerialized)
    {
    }

    Method (WWRD, 3, NotSerialized)
    {
    }

    Method (RSBT, 2, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (RWRD, 2, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (WBLK, 4, NotSerialized)
    {
    }

    Method (RBLK, 3, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G3C0, Package (0x07)
        {
            0x03010011, 
            "CPU Frequency", 
            Zero, 
            Zero, 
            0x4E20, 
            0x64, 
            0x0191
        })
        Name (G3C1, Package (0x07)
        {
            0x03020012, 
            "CPU Voltage", 
            Zero, 
            Zero, 
            0xFF001F40, 
            0x7D, 
            0x4A
        })
        Name (G3C2, Package (0x07)
        {
            0x03060013, 
            "CPU Ratio", 
            Zero, 
            0x10, 
            0xFF000028, 
            0x05, 
            0x2B
        })
        Name (G3C3, Package (0x07)
        {
            0x03020015, 
            "CPU/NB Voltage", 
            Zero, 
            Zero, 
            0x04B0, 
            0x14, 
            0x0A
        })
        Name (G3D2, Package (0x07)
        {
            0x03020032, 
            "DRAM Volt.", 
            Zero, 
            Zero, 
            0x05DC, 
            0x14, 
            0x23
        })
        Name (G353, Package (0x07)
        {
            0x03020053, 
            "VDDA Volt.", 
            Zero, 
            Zero, 
            0x09C4, 
            0x64, 
            0x04
        })
        Name (G354, Package (0x07)
        {
            0x03020054, 
            "HT Volt.", 
            Zero, 
            Zero, 
            0x04B0, 
            0x14, 
            0x0A
        })
        Name (G355, Package (0x07)
        {
            0x03020055, 
            "NB Volt.", 
            Zero, 
            Zero, 
            0x044C, 
            0x14, 
            0x0F
        })
        Name (G356, Package (0x07)
        {
            0x03020056, 
            "SB Volt.", 
            Zero, 
            Zero, 
            0x04B0, 
            0x96, 
            0x02
        })
        Name (G3DS, Package (0x07)
        {
            0x030600F0, 
            "Device Select", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRP3, Package (0x0A)
        {
            G3C0, 
            G3C1, 
            G3C2, 
            G3C3, 
            G3D2, 
            G353, 
            G354, 
            G355, 
            G356, 
            G3DS
        })
        Name (GODS, Zero)
        Name (TGRT, Zero)
        Method (G3UP, 0, NotSerialized)
        {
            Local0 = GAGP (0x0313)
            TGRT = Local0
            CPUN ()
            RMIN ()
            RINT ()
            RNUM ()
            C1UP ()
            C3UP ()
            D2UP ()
        }

        Method (CPUN, 0, NotSerialized)
        {
            Local0 = GAGP ("CPUN")
            Index (G3DS, 0x06) = Local0
        }

        Method (RMIN, 0, NotSerialized)
        {
            Index (G3C2, 0x04) = GAGP ("RMIN")
        }

        Method (RINT, 0, NotSerialized)
        {
            Index (G3C2, 0x05) = GAGP ("RINT")
        }

        Method (RNUM, 0, NotSerialized)
        {
            Index (G3C2, 0x06) = GAGP ("RNUM")
        }

        Method (C1UP, 0, NotSerialized)
        {
            Index (G3C1, 0x04) = GAGP ("C1MI")
            Index (G3C1, 0x05) = GAGP ("C1IN")
            Local0 = GAGP ("C1NU")
            Index (G3C1, 0x06) = Local0
            If ((Local0 == Zero))
            {
                Index (G3C1, 0x02) = 0x40000000
            }

            If ((GNVS (0x72B0) == Zero))
            {
                Index (G3C1, 0x03) = GAGP (0x0312)
            }
            Else
            {
                Local0 = GNVS (0x73E8)
                Index (G3C1, 0x03) = (0x3C - Local0)
            }
        }

        Method (C3UP, 0, NotSerialized)
        {
            Index (G3C3, 0x04) = GAGP ("C3MI")
            Index (G3C3, 0x05) = GAGP ("C3IN")
            Local0 = GAGP ("C3NU")
            Index (G3C3, 0x06) = Local0
            If ((Local0 == Zero))
            {
                Index (G3C3, 0x02) = 0x40000000
            }

            If ((GNVS (0x72E0) == Zero))
            {
                Index (G3C3, 0x03) = GAGP (0x0315)
            }
            Else
            {
                Local0 = GNVS (0x73F1)
                Index (G3C3, 0x03) = (0x3C - Local0)
            }
        }

        Method (D2UP, 0, NotSerialized)
        {
            If ((GNVS (0x72F0) == Zero))
            {
                Index (G3D2, 0x03) = R2YT (0x3C, 0x13)
            }
            Else
            {
                Index (G3D2, 0x03) = 0x05
            }
        }

        Method (GIT3, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x11))
            {
                ASB1 = GCMN ()
            }
            Else
            {
                If ((_T_0 == 0x12))
                {
                    ASB1 = GAGP (0x0312)
                }
                Else
                {
                    If ((_T_0 == 0x13))
                    {
                        If ((GODS != 0xFF))
                        {
                            Local1 = GAGP (0x0313)
                            Local5 = (GODS << 0x03)
                            Local0 = (Local1 >> Local5)
                            ASB1 = (Local0 & 0xFF)
                        }
                    }
                    Else
                    {
                        If ((_T_0 == 0x15))
                        {
                            ASB1 = GAGP (0x0315)
                        }
                        Else
                        {
                            If ((_T_0 == 0x32))
                            {
                                ASB1 = GDRV ()
                            }
                            Else
                            {
                                If ((_T_0 == 0x53))
                                {
                                    ASB1 = GCVV ()
                                }
                                Else
                                {
                                    If ((_T_0 == 0x54))
                                    {
                                        ASB1 = GHTV ()
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x55))
                                        {
                                            ASB1 = GNBV ()
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x56))
                                            {
                                                ASB1 = GSBV ()
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0xF0)) {}
                                                Else
                                                {
                                                    ASB0 = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (SIT3, 3, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x11))
            {
                If ((Arg2 & 0x03))
                {
                    DCMN (Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0xA2B8, Arg1)
                }
            }
            Else
            {
                If ((_T_0 == 0x12))
                {
                    If ((GAGP (0x0312) != Arg1))
                    {
                        SAGP (0x0312, Arg1)
                    }
                }
                Else
                {
                    If ((_T_0 == 0x13))
                    {
                        If ((GODS != 0xFF))
                        {
                            Local5 = (GODS << 0x03)
                            Local0 = (Arg1 << Local5)
                            Local1 = (0xFF << Local5)
                            Local1 = ~Local1
                            TGRT &= Local1
                            TGRT |= Local0
                        }
                        Else
                        {
                            Local0 = TGRT /* \_SB_.PCI0.SBRG.ASOC.TGRT */
                            SAGP (0x0313, Local0)
                        }
                    }
                    Else
                    {
                        If ((_T_0 == 0x15))
                        {
                            If ((GAGP (0x0315) != Arg1))
                            {
                                SAGP (0x0315, Arg1)
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x32))
                            {
                                If ((Arg2 & 0x03))
                                {
                                    Local1 = (Arg1 - One)
                                    SDRV (Local1)
                                }

                                If ((Arg2 & One))
                                {
                                    SNVS (0x72F0, Arg1)
                                }
                            }
                            Else
                            {
                                If ((_T_0 == 0x53))
                                {
                                    If ((Arg2 & 0x03))
                                    {
                                        SCVV (Arg1)
                                    }

                                    If ((Arg2 & One))
                                    {
                                        SNVS (0x3613, Arg1)
                                    }
                                }
                                Else
                                {
                                    If ((_T_0 == 0x54))
                                    {
                                        If ((Arg2 & 0x03))
                                        {
                                            SHTV (Arg1)
                                        }

                                        If ((Arg2 & One))
                                        {
                                            SNVS (0x54D0, Arg1)
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x55))
                                        {
                                            If ((Arg2 & 0x03))
                                            {
                                                SNBV (Arg1)
                                            }

                                            If ((Arg2 & One))
                                            {
                                                SNVS (0x54D8, Arg1)
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x56))
                                            {
                                                If ((Arg2 & 0x03))
                                                {
                                                    SSBV (Arg1)
                                                }

                                                If ((Arg2 & One))
                                                {
                                                    SNVS (0x26C6, Arg1)
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0xF0))
                                                {
                                                    GODS = Arg1
                                                }
                                                Else
                                                {
                                                    ASB0 = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Method (GCVV, 0, NotSerialized)
        {
            ENFG (0x07)
            Local0 = (OPCE & 0x10)
            Local0 >>= 0x03
            Local1 = (OPCF & 0x40)
            Local1 >>= 0x06
            Local0 |= Local1
            Return (Local0)
        }

        Method (SCVV, 1, NotSerialized)
        {
            Local0 = (Arg0 & One)
            Local1 = (Arg0 & 0x02)
            If (Local0)
            {
                ENFG (0x07)
                OPCF |= 0x40
                GP86 = Zero
            }
            Else
            {
                ENFG (0x07)
                OPCF &= 0xBF
            }

            If (Local1)
            {
                ENFG (0x07)
                OPCE |= 0x10
                GP74 = Zero
            }
            Else
            {
                ENFG (0x07)
                OPCE &= 0xEF
            }

            Return (One)
        }

        Method (SDRV, 1, NotSerialized)
        {
            W2YT (0x3C, 0x10, Arg0++)
            W2YT (0x3C, 0x11, One)
            W2YT (0x3C, 0x12, One)
            W2YT (0x3C, 0x40, 0x02)
            Return (One)
        }

        Method (GDRV, 0, NotSerialized)
        {
            Local0 = R2YT (0x3C, 0x13)
            Return (Local0)
        }

        Method (SHTV, 1, NotSerialized)
        {
            W2YT (0x3C, Zero, Arg0)
            W2YT (0x3C, One, One)
            W2YT (0x3C, 0x02, One)
            W2YT (0x3C, 0x40, One)
            Return (One)
        }

        Method (GHTV, 0, NotSerialized)
        {
            Local0 = R2YT (0x3C, 0x03)
            Return (Local0)
        }

        Method (SNBV, 1, NotSerialized)
        {
            W2YT (0x3C, 0x30, Arg0)
            W2YT (0x3C, 0x31, One)
            W2YT (0x3C, 0x32, One)
            W2YT (0x3C, 0x40, 0x08)
            Return (One)
        }

        Method (GNBV, 0, NotSerialized)
        {
            Local0 = R2YT (0x3C, 0x33)
            Return (Local0)
        }

        Method (SSBV, 1, NotSerialized)
        {
            ENFG (0x07)
            If (Arg0)
            {
                OPCF = (OPCF | 0x20)
                GP85 = Zero
            }
            Else
            {
                OPCF = (OPCF & 0xDF)
                GP85 = One
            }
        }

        Method (GSBV, 0, NotSerialized)
        {
            ENFG (0x07)
            If (((OPCF & 0x20) == Zero))
            {
                Return (Zero)
            }

            If (GP85)
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }

        Method (GCMN, 0, NotSerialized)
        {
            Local0 = BRCD (0x10)
            Local1 = (Local0 & 0x3F)
            Local2 = ((Local2 = (Local0 & 0xC0)) >> 0x05)
            Local3 = (BRCD (0x11) << 0x03)
            Local4 = ((Local4 = (BRCD (0x14) & 0x80)) >> 0x07)
            Local2 |= Local3
            Local4 |= Local2
            Local4 *= 0x19
            Local4 /= Local1
            Local4 -= 0xC8
            Return (Local4)
        }

        Method (DCMN, 1, NotSerialized)
        {
            Local1 = (Arg0 + 0xC8)
            Local0 = (BRCD (0x10) & 0x3F)
            If ((Local0 == 0x19))
            {
                SVMN (Local1)
            }
            Else
            {
                ADMN ()
                SVMN (Local1)
            }
        }

        Method (SVMN, 1, NotSerialized)
        {
            Local0 = ((Arg0 & One) << 0x07)
            Local1 = ((Local1 = (Arg0 & 0x06)) << 0x05)
            Local2 = (Arg0 >> 0x03)
            BWCD (0x14, ((BRCD (0x14) & 0x7F) | Local0))
            BWCD (0x10, ((BRCD (0x10) & 0x3F) | Local1))
            BWCD (0x11, Local2)
        }

        Method (ADMN, 0, NotSerialized)
        {
            If (((BRCD (0x10) & 0x3F) == 0x0A))
            {
                BWCD (0x05, (BRCD (0x05) | 0x10))
                BWCD (0x0C, (BRCD (0x0C) & 0x7F))
                BWCD (0x14, (BRCD (0x14) & 0x7F))
                BWCD (0x10, 0x19)
                BWCD (0x11, 0x19)
                BWCD (0x0C, (BRCD (0x0C) | 0x80))
                BWCD (0x05, (BRCD (0x05) & 0xEF))
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G5T2, Package (0x08)
        {
            0x05080002, 
            "AI Profile", 
            Zero, 
            Zero, 
            0x03, 
            "Race Car", 
            "Jet Plane", 
            "Rocket"
        })
        Name (GRP5, Package (0x01)
        {
            G5T2
        })
        Name (BUF0, Package (0x18)
        {
            0x03010011, 
            Ones, 
            0x03020012, 
            Ones, 
            0x03060013, 
            Ones, 
            0x03020015, 
            Ones, 
            0x03020016, 
            Ones, 
            0x03020032, 
            Ones, 
            0x03020034, 
            Ones, 
            0x03020035, 
            Ones, 
            0x03020051, 
            Ones, 
            0x03020052, 
            Ones, 
            0x03020053, 
            Ones, 
            0x03020054, 
            Ones
        })
        Name (BUF1, Package (0x18)
        {
            0x03010011, 
            Ones, 
            0x03020012, 
            Ones, 
            0x03060013, 
            Ones, 
            0x03020015, 
            Ones, 
            0x03020016, 
            Ones, 
            0x03020032, 
            Ones, 
            0x03020034, 
            Ones, 
            0x03020035, 
            Ones, 
            0x03020051, 
            Ones, 
            0x03020052, 
            Ones, 
            0x03020053, 
            Ones, 
            0x03020054, 
            Ones
        })
        Name (BUF2, Package (0x18)
        {
            0x03010011, 
            Ones, 
            0x03020012, 
            Ones, 
            0x03060013, 
            Ones, 
            0x03020015, 
            Ones, 
            0x03020016, 
            Ones, 
            0x03020032, 
            Ones, 
            0x03020034, 
            Ones, 
            0x03020035, 
            Ones, 
            0x03020051, 
            Ones, 
            0x03020052, 
            Ones, 
            0x03020053, 
            Ones, 
            0x03020054, 
            Ones
        })
        Method (MVBF, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == Zero))
            {
                Local0 = Zero
                Local2 = 0x08
                Local3 = SizeOf (BUF0)
                While ((Local0 != Local3))
                {
                    Local1 = (Local0 + One)
                    If ((DerefOf (Index (BUF0, Local1)) != Ones))
                    {
                        STBF (DerefOf (Index (BUF0, Local0)), Local2)
                        Local2 += 0x04
                        STBF (DerefOf (Index (BUF0, Local1)), Local2)
                        Local2 += 0x04
                    }

                    STBF (Ones, Local2)
                    Local0 += 0x02
                }
            }
            Else
            {
                If ((_T_0 == One))
                {
                    Local0 = Zero
                    Local2 = 0x08
                    Local3 = SizeOf (BUF1)
                    While ((Local0 != Local3))
                    {
                        Local1 = (Local0 + One)
                        If ((DerefOf (Index (BUF1, Local1)) != Ones))
                        {
                            STBF (DerefOf (Index (BUF1, Local0)), Local2)
                            Local2 += 0x04
                            STBF (DerefOf (Index (BUF1, Local1)), Local2)
                            Local2 += 0x04
                        }

                        STBF (Ones, Local2)
                        Local0 += 0x02
                    }
                }
                Else
                {
                    If ((_T_0 == 0x02))
                    {
                        Local0 = Zero
                        Local2 = 0x08
                        Local3 = SizeOf (BUF2)
                        While ((Local0 != Local3))
                        {
                            Local1 = (Local0 + One)
                            If ((DerefOf (Index (BUF2, Local1)) != Ones))
                            {
                                STBF (DerefOf (Index (BUF2, Local0)), Local2)
                                Local2 += 0x04
                                STBF (DerefOf (Index (BUF2, Local1)), Local2)
                                Local2 += 0x04
                            }

                            STBF (Ones, Local2)
                            Local0 += 0x02
                        }
                    }
                }
            }
        }

        Method (STBF, 2, NotSerialized)
        {
            Local0 = Arg0
            Local1 = Arg1
            Local2 = Zero
            While ((Local2 != 0x20))
            {
                Index (ASBF, Local1) = (Local0 >> Local2)
                Local2 += 0x08
                Local1 += One
            }
        }

        Method (UPBF, 1, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == Zero))
            {
                Local0 = Zero
                Local3 = SizeOf (BUF0)
                While ((Local0 != Local3))
                {
                    Local1 = (Local0 + One)
                    Local4 = DerefOf (Index (BUF0, Local0))
                    Local5 = GTBF (MOBF (Local4), Zero)
                    If ((Local5 != Ones))
                    {
                        Index (BUF0, Local1) = Local5
                    }

                    Local0 += 0x02
                }
            }
            Else
            {
                If ((_T_0 == One))
                {
                    Local0 = Zero
                    Local3 = SizeOf (BUF1)
                    While ((Local0 != Local3))
                    {
                        Local1 = (Local0 + One)
                        Local4 = DerefOf (Index (BUF1, Local0))
                        Local5 = GTBF (MOBF (Local4), One)
                        If ((Local5 != Ones))
                        {
                            Index (BUF1, Local1) = Local5
                        }

                        Local0 += 0x02
                    }
                }
                Else
                {
                    If ((_T_0 == 0x02))
                    {
                        Local0 = Zero
                        Local3 = SizeOf (BUF2)
                        While ((Local0 != Local3))
                        {
                            Local1 = (Local0 + One)
                            Local4 = DerefOf (Index (BUF2, Local0))
                            Local5 = GTBF (MOBF (Local4), 0x02)
                            If ((Local5 != Ones))
                            {
                                Index (BUF2, Local1) = Local5
                            }

                            Local0 += 0x02
                        }
                    }
                }
            }
        }

        Method (MOBF, 1, NotSerialized)
        {
            Local0 = Arg0
            Local1 = (Local0 & 0xFF)
            Local2 = (Local0 >> 0x18)
            Local2 <<= 0x08
            Local1 += Local2
            Return (Local1)
        }

        Method (GIT5, 2, NotSerialized)
        {
            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
            _T_0 = (Arg0 & 0xFFFF)
            If ((_T_0 == 0x02))
            {
                UPBF (Arg1)
                MVBF (Arg1)
                ASB1 = 0x05
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT5, 3, NotSerialized)
        {
            ASB0 = Zero
        }
    }

    Method (NPTS, 1, NotSerialized)
    {
    }

    Method (NWAK, 1, NotSerialized)
    {
    }

    Scope (_SB.PCI0.SBRG.SIOR)
    {
        Method (HSV0, 0, NotSerialized)
        {
            Local0 = SBV0 /* \_SB_.PCI0.SBRG.SIOR.SBV0 */
            If ((Local0 > Zero))
            {
                Local0 *= 0x0BB1
                Local0 /= 0x03E8
            }

            Return (Local0)
        }

        Method (HSV1, 0, NotSerialized)
        {
            Local0 = SBV1 /* \_SB_.PCI0.SBRG.SIOR.SBV1 */
            If ((Local0 > Zero))
            {
                Local0 *= 0x19C8
                Local0 /= 0x03E8
                Local0 *= 0x0BB1
                Local0 /= 0x03E8
            }

            Return (Local0)
        }

        Method (HSV2, 0, NotSerialized)
        {
            Local0 = SBV2 /* \_SB_.PCI0.SBRG.SIOR.SBV2 */
            If ((Local0 > Zero))
            {
                Local0 *= 0x0734
                Local0 /= 0x03E8
                Local0 *= 0x0BB1
                Local0 /= 0x03E8
            }

            Return (Local0)
        }

        Method (HSV3, 0, NotSerialized)
        {
            Local0 = SBV3 /* \_SB_.PCI0.SBRG.SIOR.SBV3 */
            If ((Local0 > Zero))
            {
                Local0 *= 0x0BB1
                Local0 /= 0x03E8
            }

            Return (Local0)
        }

        Method (HWV0, 0, NotSerialized)
        {
            Return ((VIV0 * 0x10))
        }

        Method (HWV1, 0, NotSerialized)
        {
            Return ((VIV1 * 0x10))
        }

        Method (HWV2, 0, NotSerialized)
        {
            Return ((VIV2 * 0x10))
        }

        Method (HWV3, 0, NotSerialized)
        {
            Return ((VIV3 * 0x10))
        }

        Method (HWV4, 0, NotSerialized)
        {
            Return ((VIV4 * 0x10))
        }

        Method (HWV5, 0, NotSerialized)
        {
            Return ((VIV5 * 0x10))
        }

        Method (HWV6, 0, NotSerialized)
        {
            Return ((VIV6 * 0x10))
        }

        Method (HWV7, 0, NotSerialized)
        {
            Return ((VIV7 * 0x10))
        }

        Method (HWT1, 0, NotSerialized)
        {
            Local0 = TPI1 /* \_SB_.PCI0.SBRG.SIOR.TPI1 */
            If ((Local0 > 0x80))
            {
                Local0 = (0x0100 - Local0)
            }

            Local0 += T1OF /* \T1OF */
            Return ((Local0 * 0x0A))
        }

        Method (HWT2, 0, NotSerialized)
        {
            Local0 = TPI2 /* \_SB_.PCI0.SBRG.SIOR.TPI2 */
            If ((Local0 > 0x80))
            {
                Local0 = (0x0100 - Local0)
            }

            Local0 += T2OF /* \T2OF */
            Return ((Local0 * 0x0A))
        }

        Method (HWT3, 0, NotSerialized)
        {
            Local0 = TPI3 /* \_SB_.PCI0.SBRG.SIOR.TPI3 */
            If ((Local0 > 0x80))
            {
                Local0 = (0x0100 - Local0)
            }

            Local0 += T3OF /* \T3OF */
            Return ((Local0 * 0x0A))
        }

        Method (HWF1, 0, NotSerialized)
        {
            If ((ETD1 == One))
            {
                Local0 = ((EFN1 << 0x08) | FTC1) /* \_SB_.PCI0.SBRG.SIOR.FTC1 */
                Return (CF16 (Local0))
            }

            Local0 = FTC1 /* \_SB_.PCI0.SBRG.SIOR.FTC1 */
            Local2 = One
            While ((((Local0 <= FHMT) || (Local0 >= FLMT)) && (
                Local2 == One)))
            {
                If ((Local0 <= FHMT))
                {
                    Local1 = FTD1 /* \_SB_.PCI0.SBRG.SIOR.FTD1 */
                    If ((Local1 > Zero))
                    {
                        Local1--
                        FTD1 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }
                Else
                {
                    Local1 = FTD1 /* \_SB_.PCI0.SBRG.SIOR.FTD1 */
                    If ((Local1 < 0x07))
                    {
                        Local1++
                        FTD1 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }

                Sleep (0x012C)
                Local0 = FTC1 /* \_SB_.PCI0.SBRG.SIOR.FTC1 */
            }

            Return (CF08 (Local0, DerefOf (Index (DTB1, FTD1))))
        }

        Method (HWF2, 0, NotSerialized)
        {
            If ((ETD2 == One))
            {
                Local0 = ((EFN2 << 0x08) | FTC2) /* \_SB_.PCI0.SBRG.SIOR.FTC2 */
                Return (CF16 (Local0))
            }

            Local0 = FTC2 /* \_SB_.PCI0.SBRG.SIOR.FTC2 */
            Local2 = One
            While ((((Local0 <= FHMT) || (Local0 >= FLMT)) && (
                Local2 == One)))
            {
                If ((Local0 <= FHMT))
                {
                    Local1 = FTD2 /* \_SB_.PCI0.SBRG.SIOR.FTD2 */
                    If ((Local1 > Zero))
                    {
                        Local1--
                        FTD2 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }
                Else
                {
                    Local1 = FTD2 /* \_SB_.PCI0.SBRG.SIOR.FTD2 */
                    If ((Local1 < 0x07))
                    {
                        Local1++
                        FTD2 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }

                Sleep (0x012C)
                Local0 = FTC2 /* \_SB_.PCI0.SBRG.SIOR.FTC2 */
            }

            Return (CF08 (Local0, DerefOf (Index (DTB1, FTD2))))
        }

        Method (HWF3, 0, NotSerialized)
        {
            If ((ETD3 == One))
            {
                Local0 = ((EFN3 << 0x08) | FTC3) /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
                Return (CF16 (Local0))
            }

            Local0 = FTC3 /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
            If ((Local0 <= FHM3))
            {
                Local1 = FTD3 /* \_SB_.PCI0.SBRG.SIOR.FTD3 */
                If ((Local1 > Zero))
                {
                    Local1--
                    FTD3 = Local1
                    Sleep (0x012C)
                    Local0 = FTC3 /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
                }
            }
            Else
            {
                If ((Local0 >= FLMT))
                {
                    Local1 = FTD3 /* \_SB_.PCI0.SBRG.SIOR.FTD3 */
                    If ((Local1 < One))
                    {
                        Local1++
                        FTD3 = Local1
                        Sleep (0x012C)
                        Local0 = FTC3 /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
                    }
                }
            }

            Return (CF08 (Local0, DerefOf (Index (DTB1, FTD3))))
        }

        Method (HWF4, 0, NotSerialized)
        {
            Local0 = ((EFN4 << 0x08) | FTC4) /* \_SB_.PCI0.SBRG.SIOR.FTC4 */
            Return (CF16 (Local0))
        }

        Method (HWF5, 0, NotSerialized)
        {
            Local0 = ((EFN5 << 0x08) | FTC5) /* \_SB_.PCI0.SBRG.SIOR.FTC5 */
            Return (CF16 (Local0))
        }

        Method (CF08, 2, NotSerialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0xFF)))
            {
                Return (Zero)
            }

            Local0 = (FTFR / (Arg0 * Arg1))
            Return (Local0)
        }

        Method (CF16, 1, NotSerialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0xFFFF)))
            {
                Return (Zero)
            }

            Local0 = (FTFR / (Arg0 * 0x02))
            Return (Local0)
        }

        Name (FTFR, 0x00149970)
        Name (FHMT, 0x78)
        Name (FHM3, 0x3C)
        Name (FLMT, 0xFE)
        Name (DTB1, Package (0x08)
        {
            One, 
            0x02, 
            0x04, 
            0x08, 
            0x10, 
            0x20, 
            0x40, 
            0x80
        })
        Name (DTB2, Package (0x02)
        {
            0x02, 
            0x08
        })
        OperationRegion (ECRE, SystemIO, IOEB, 0x20)
        Field (ECRE, ByteAcc, NoLock, Preserve)
        {
            Offset (0x05), 
            HIDX,   8, 
            HDAT,   8
        }

        IndexField (HIDX, HDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x0B), 
            FTD1,   3, 
            FTD2,   3, 
            FTD3,   1, 
            Offset (0x0C), 
            ETD1,   1, 
            ETD2,   1, 
            ETD3,   1, 
            Offset (0x0D), 
            FTC1,   8, 
            FTC2,   8, 
            FTC3,   8, 
            Offset (0x18), 
            EFN1,   8, 
            EFN2,   8, 
            EFN3,   8, 
            Offset (0x20), 
            VIV0,   8, 
            VIV1,   8, 
            VIV2,   8, 
            VIV3,   8, 
            VIV4,   8, 
            VIV5,   8, 
            VIV6,   8, 
            VIV7,   8, 
            Offset (0x29), 
            TPI1,   8, 
            TPI2,   8, 
            TPI3,   8, 
            Offset (0x80), 
            FTC4,   8, 
            EFN4,   8, 
            FTC5,   8, 
            EFN5,   8
        }

        OperationRegion (SBHM, SystemIO, SBRV, 0x02)
        Field (SBHM, ByteAcc, NoLock, Preserve)
        {
            SBVX,   8, 
            SBVT,   8
        }

        IndexField (SBVX, SBVT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x59), 
                ,   6, 
            SBV0,   10, 
            Offset (0x5D), 
                ,   6, 
            SBV1,   10, 
            Offset (0x61), 
                ,   6, 
            SBV2,   10, 
            Offset (0x65), 
                ,   6, 
            SBV3,   10
        }
    }

    Scope (\)
    {
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            Offset (0x20), 
            CPUQ,   8, 
            CPVL,   16, 
            CPVH,   16, 
            CPVC,   1
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (CORV, Package (0x05)
        {
            0x06020000, 
            "Vcore Voltage", 
            0x0352, 
            0x06A4, 
            One
        })
        Name (V3VV, Package (0x05)
        {
            0x06020001, 
            " +3.3 Voltage", 
            0x0B9A, 
            0x0E2E, 
            One
        })
        Name (V5VV, Package (0x05)
        {
            0x06020002, 
            " +5 Voltage", 
            0x1194, 
            0x157C, 
            One
        })
        Name (VV12, Package (0x05)
        {
            0x06020003, 
            " +12 Voltage", 
            0x27D8, 
            0x35E8, 
            One
        })
        Name (VPAR, Package (0x04)
        {
            Package (0x03)
            {
                Zero, 
                One, 
                Zero
            }, 

            Package (0x03)
            {
                Zero, 
                One, 
                Zero
            }, 

            Package (0x03)
            {
                0x22, 
                0x32, 
                Zero
            }, 

            Package (0x03)
            {
                Zero, 
                One, 
                Zero
            }
        })
        Name (VBUF, Package (0x05)
        {
            0x04, 
            CORV, 
            V3VV, 
            V5VV, 
            VV12
        })
        Method (VGET, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (^^SIOR.HSV0 ())
            }

            If ((Arg0 == One))
            {
                Return (^^SIOR.HSV2 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (^^SIOR.HWV3 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (^^SIOR.HSV1 ())
            }
        }

        Name (CPUT, Package (0x05)
        {
            0x06030000, 
            "CPU Temperature", 
            0x0258, 
            0x03B6, 
            0x00010001
        })
        Name (MBTP, Package (0x05)
        {
            0x06030001, 
            "MB Temperature", 
            0x01C2, 
            0x02EE, 
            0x00010001
        })
        Name (TBUF, Package (0x03)
        {
            0x02, 
            CPUT, 
            MBTP
        })
        Method (TGET, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (^^SIOR.HWT1 ())
            }

            If ((Arg0 == One))
            {
                Return (^^SIOR.HWT2 ())
            }
        }

        Name (CPUF, Package (0x05)
        {
            0x06040000, 
            "CPU FAN Speed", 
            0x0258, 
            0x1C20, 
            0x00010001
        })
        Name (CHAF, Package (0x05)
        {
            0x06040001, 
            "CHASSIS FAN Speed", 
            0x0258, 
            0x1C20, 
            0x00010001
        })
        Name (CHF2, Package (0x05)
        {
            0x06040002, 
            "CHASSIS FAN 2 Speed", 
            0x0258, 
            0x1C20, 
            0x00010001
        })
        Name (FBUF, Package (0x04)
        {
            0x03, 
            CPUF, 
            CHAF, 
            CHF2
        })
        Method (FGET, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (^^SIOR.HWF1 ())
            }

            If ((Arg0 == One))
            {
                Return (^^SIOR.HWF2 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (^^SIOR.HWF3 ())
            }
        }

        Name (QCFN, Package (0x06)
        {
            0x04060003, 
            "CPU Q-Fan Control", 
            Zero, 
            One, 
            0x02, 
            0x00010000
        })
        Name (QBUF, Package (0x02)
        {
            One, 
            QCFN
        })
        Method (VSIF, 0, NotSerialized)
        {
            Return (VBUF) /* \_SB_.PCI0.SBRG.ASOC.VBUF */
        }

        Method (RVLT, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            Local1 = VGET (Local0)
            Local2 = DerefOf (Index (DerefOf (Index (VPAR, Local0)), Zero))
            Local3 = DerefOf (Index (DerefOf (Index (VPAR, Local0)), One))
            Local4 = DerefOf (Index (DerefOf (Index (VPAR, Local0)), 0x02))
            Local5 = (Local1 * (Local2 + Local3))
            Local5 /= Local3
            Local5 += Local4
            Return (Local5)
        }

        Method (SVLT, 1, NotSerialized)
        {
            Local0 = (DerefOf (Index (Arg0, Zero)) & 0xFFFF)
            Local1 = DerefOf (Index (VBUF, Zero))
            If ((Local0 >= Local1))
            {
                Return (Zero)
            }

            Local0++
            Index (DerefOf (Index (VBUF, Local0)), One) = DerefOf (Index (Arg0, 
                One))
            Index (DerefOf (Index (VBUF, Local0)), 0x02) = DerefOf (Index (Arg0, 
                0x02))
            Index (DerefOf (Index (VBUF, Local0)), 0x03) = DerefOf (Index (Arg0, 
                0x03))
            Index (DerefOf (Index (VBUF, Local0)), 0x04) = DerefOf (Index (Arg0, 
                0x04))
            Return (One)
        }

        Method (TSIF, 0, NotSerialized)
        {
            Return (TBUF) /* \_SB_.PCI0.SBRG.ASOC.TBUF */
        }

        Method (RTMP, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            Local1 = TGET (Local0)
            Return (Local1)
        }

        Method (STMP, 1, NotSerialized)
        {
            Local0 = (DerefOf (Index (Arg0, Zero)) & 0xFFFF)
            Local1 = DerefOf (Index (TBUF, Zero))
            If ((Local0 >= Local1))
            {
                Return (Zero)
            }

            Local0++
            Index (DerefOf (Index (TBUF, Local0)), One) = DerefOf (Index (Arg0, 
                One))
            Index (DerefOf (Index (TBUF, Local0)), 0x02) = DerefOf (Index (Arg0, 
                0x02))
            Index (DerefOf (Index (TBUF, Local0)), 0x03) = DerefOf (Index (Arg0, 
                0x03))
            Index (DerefOf (Index (TBUF, Local0)), 0x04) = DerefOf (Index (Arg0, 
                0x04))
            Return (One)
        }

        Method (FSIF, 0, NotSerialized)
        {
            Return (FBUF) /* \_SB_.PCI0.SBRG.ASOC.FBUF */
        }

        Method (RFAN, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0xFFFF)
            Local1 = FGET (Local0)
            Return (Local1)
        }

        Method (SFAN, 1, NotSerialized)
        {
            Local0 = (DerefOf (Index (Arg0, Zero)) & 0xFFFF)
            Local1 = DerefOf (Index (FBUF, Zero))
            If ((Local0 >= Local1))
            {
                Return (Zero)
            }

            Local0++
            Index (DerefOf (Index (FBUF, Local0)), One) = DerefOf (Index (Arg0, 
                One))
            Index (DerefOf (Index (FBUF, Local0)), 0x02) = DerefOf (Index (Arg0, 
                0x02))
            Index (DerefOf (Index (FBUF, Local0)), 0x03) = DerefOf (Index (Arg0, 
                0x03))
            Index (DerefOf (Index (FBUF, Local0)), 0x04) = DerefOf (Index (Arg0, 
                0x04))
            Return (One)
        }

        Method (QFIF, 0, NotSerialized)
        {
            If ((CPUQ == Zero))
            {
                Local0 = (DerefOf (Index (QCFN, 0x05)) & 0xFFFDFFFF)
                Index (QCFN, 0x05) = Local0
            }
            Else
            {
                Local0 = (DerefOf (Index (QCFN, 0x05)) | 0x00020000)
                Index (QCFN, 0x05) = Local0
            }

            Return (QBUF) /* \_SB_.PCI0.SBRG.ASOC.QBUF */
        }

        Method (GCQV, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (CPVL) /* \CPVL */
            }

            If ((Arg0 == One))
            {
                Return (CPVH) /* \CPVH */
            }

            If ((Arg0 == 0x02))
            {
                Return (CPVC) /* \CPVC */
            }

            Return (Zero)
        }

        Method (QFST, 1, NotSerialized)
        {
            If ((Arg0 == DerefOf (Index (QCFN, Zero))))
            {
                Return (CQST) /* \CQST */
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSTY = 0x10
            If (CondRefOf (_OSI, Local1))
            {
                If (_OSI ("Windows 2000"))
                {
                    OSTY = 0x12
                }

                If (_OSI ("Windows 2001"))
                {
                    OSTY = 0x13
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTY = 0x13
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTY = 0x13
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTY = 0x14
                }

                If (_OSI ("Windows 2001.1 SP1"))
                {
                    OSTY = 0x14
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTY = 0x15
                }
            }
            Else
            {
                If (MCTH (_OS, "Microsoft Windows NT"))
                {
                    Local0 = 0x12
                }
                Else
                {
                    If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
                    {
                        OSTY = 0x11
                    }

                    If (MCTH (_OS, "Linux"))
                    {
                        OSTY = One
                    }
                }
            }

            If ((OSTY >= 0x0F))
            {
                PWDE = One
                DPPF = Zero
            }
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y21, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y22, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y23, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y21._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y21._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y21._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y22._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y22._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y22._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y23._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y23._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y23._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        Index (WAKP, Zero) = Zero
        Index (WAKP, One) = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (IOWK) {}
        Else
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (Index (WAKP, Zero)))
        {
            Index (WAKP, One) = Zero
        }
        Else
        {
            Index (WAKP, One) = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    OperationRegion (IORK, SystemIO, 0xB1, One)
    Field (IORK, ByteAcc, NoLock, Preserve)
    {
        IOWK,   8
    }

    Scope (\)
    {
        OperationRegion (NCLK, SystemMemory, PCIE, 0x02000000)
        Field (NCLK, AnyAcc, NoLock, Preserve)
        {
            Offset (0x4C), 
            CLKE,   1, 
            Offset (0x1048), 
            P3HH,   12, 
            P3II,   1, 
                ,   18, 
            P3EE,   1, 
            P4EN,   1, 
            P4NM,   12, 
            P4HI,   12, 
            P4IO,   1, 
            Offset (0x1050), 
            P5EN,   1, 
            P5NM,   12, 
            P5HI,   12, 
            P5IO,   1, 
            Offset (0x1054), 
            P6EN,   1, 
            P6NM,   12, 
            P6HI,   12, 
            P6IO,   1, 
            Offset (0x1078), 
            B178,   1, 
            Offset (0x10B0), 
            P1NM,   12, 
            P1HI,   12, 
            P1EN,   1, 
            P1IO,   1, 
            Offset (0x10B4), 
            P2NM,   12, 
            P2HI,   12, 
            P2EN,   1, 
            P2IO,   1, 
            Offset (0x10CC), 
            P3EN,   1, 
            P3NM,   12, 
            P3HI,   12, 
            P3IO,   1
        }

        OperationRegion (SOR1, SystemIO, SBA1, 0x10)
        Field (SOR1, ByteAcc, NoLock, Preserve)
        {
            SMSA,   8, 
            SSSA,   8, 
            SBCA,   8, 
            SHCA,   8, 
            SBAA,   8, 
            SD0A,   8, 
            SD1A,   8, 
            SBDA,   8, 
            SSCA,   8, 
            SMCA,   8, 
            SSEA,   16, 
            SSDA,   16, 
            SMTA,   8
        }

        OperationRegion (SOR2, SystemIO, SBA2, 0x10)
        Field (SOR2, ByteAcc, NoLock, Preserve)
        {
            SMSB,   8, 
            SSSB,   8, 
            SBCB,   8, 
            SHCB,   8, 
            SBAB,   8, 
            SD0B,   8, 
            SD1B,   8, 
            SBDB,   8, 
            SSCB,   8, 
            SMCB,   8, 
            SSEB,   16, 
            SSDB,   16, 
            SMTB,   8
        }

        Mutex (MSMB, 0x00)
        Name (SMBF, Zero)
        Method (RWBK, 5, NotSerialized)
        {
            Acquire (MSMB, 0xFFFF)
            If ((Arg0 == Zero))
            {
                Local0 = SMSA /* \SMSA */
                Local0 &= Zero
                Local0 |= 0xFF
                SMSA = Local0
                Sleep (0x02)
                Local0 = SBAA /* \SBAA */
                Local0 &= Zero
                Local0 |= Arg1
                SBAA = Local0
                Sleep (0x02)
                Local0 = SHCA /* \SHCA */
                Local0 &= Zero
                Local0 |= Arg2
                SHCA = Local0
                Sleep (0x02)
                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x14
                SBCA = Local0
                Sleep (0x02)
                Local0 = SD0A /* \SD0A */
                Local0 &= Zero
                Local0 |= Arg3
                SD0A = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local2 = Arg3
                    Local3 = Arg2
                    While (Local2)
                    {
                        Local4 = DerefOf (Index (Arg4, Local3))
                        SBDA = Local4
                        Sleep (0x02)
                        Local2--
                        Local3++
                    }
                }

                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x54
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        Release (MSMB)
                        Return (One)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Local1 = Arg2
                    Local2 = Arg3
                    While (Local2)
                    {
                        Index (Arg4, Local1) = SBDA /* \SBDA */
                        Sleep (0x02)
                        Local1++
                        Local2--
                    }
                }
            }

            If ((Arg0 == One)) {}
            Release (MSMB)
            Return (Zero)
        }

        Name (SMBV, Buffer (One)
        {
             0x00                                             /* . */
        })
        Method (RWSM, 4, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = SHCA /* \SHCA */
                Local0 &= Zero
                Local0 |= Arg2
                SHCA = Local0
                Sleep (0x02)
                Local0 = SBAA /* \SBAA */
                Local0 &= Zero
                Local0 |= Arg1
                SBAA = Local0
                Sleep (0x02)
                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x08
                SBCA = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local0 = SD0A /* \SD0A */
                    Local0 &= Zero
                    Local0 |= DerefOf (Index (Arg3, Zero))
                    SD0A = Local0
                    Sleep (0x02)
                }

                Local0 = SMSA /* \SMSA */
                Local0 &= Zero
                Local0 |= 0x1E
                SMSA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Local1 = SBCA /* \SBCA */
                Sleep (0x02)
                Local0 = (Local1 | 0x40)
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                Sleep (0x02)
                If ((Local1 & 0x1C))
                {
                    Return (One)
                }

                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                    If ((Local1 & 0x1C))
                    {
                        Return (One)
                    }
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Index (Arg3, Zero) = SD0A /* \SD0A */
                    Sleep (0x02)
                }
            }

            If ((Arg0 == One))
            {
                Local0 = SHCB /* \SHCB */
                Local0 &= Zero
                Local0 |= Arg2
                SHCB = Local0
                Sleep (0x02)
                Local0 = SBAB /* \SBAB */
                Local0 &= Zero
                Local0 |= Arg1
                SBAB = Local0
                Sleep (0x02)
                Local0 = SBCB /* \SBCB */
                Local0 &= Zero
                Local0 |= 0x08
                SBCB = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local0 = SD0B /* \SD0B */
                    Local0 &= Zero
                    Local0 |= DerefOf (Index (Arg3, Zero))
                    SD0B = Local0
                    Sleep (0x02)
                }

                Local0 = SMSB /* \SMSB */
                Local0 &= Zero
                Local0 |= 0x1E
                SMSB = Local0
                Sleep (0x02)
                Local1 = SMSB /* \SMSB */
                While ((Local1 & One))
                {
                    Local1 = SMSB /* \SMSB */
                    Sleep (0x02)
                }

                Local1 = SBCB /* \SBCB */
                Sleep (0x02)
                Local0 = (Local1 | 0x40)
                SBCB = Local0
                Sleep (0x02)
                Local1 = SMSB /* \SMSB */
                Sleep (0x02)
                If ((Local1 & 0x1C))
                {
                    Return (One)
                }

                While ((Local1 & One))
                {
                    Local1 = SMSB /* \SMSB */
                    Sleep (0x02)
                    If ((Local1 & 0x1C))
                    {
                        Return (One)
                    }
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Index (Arg3, Zero) = SD0B /* \SD0B */
                    Sleep (0x02)
                }
            }

            Return (Zero)
        }

        Name (BTBF, Zero)
        Method (RWBT, 4, NotSerialized)
        {
            Acquire (MSMB, 0xFFFF)
            If ((Arg0 == Zero))
            {
                SMSA = SMSA /* \SMSA */
                Sleep (0x02)
                SBAA = Arg1
                Sleep (0x02)
                SHCA = Arg2
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    SD0A = Arg3
                }

                SBCA = 0x48
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        Release (MSMB)
                        Return (0xFF)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Arg3 = SD0A /* \SD0A */
            }

            If ((Arg0 == One)) {}
            Release (MSMB)
            Return (Arg3)
        }

        OperationRegion (IOOR, SystemIO, SIOP, 0x02)
        Field (IOOR, ByteAcc, NoLock, Preserve)
        {
            IOID,   8, 
            IODT,   8
        }

        OperationRegion (GBOR, SystemIO, GIOB, 0x08)
        Field (GBOR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x06), 
            GP70,   1, 
            GP71,   1, 
            GP72,   1, 
            GP73,   1, 
            GP74,   1, 
            GP75,   1, 
            GP76,   1, 
            GP77,   1, 
            GP80,   1, 
            GP81,   1, 
            GP82,   1, 
            GP83,   1, 
            GP84,   1, 
            GP85,   1, 
            GP86,   1, 
            GP87,   1
        }

        Method (RSIO, 1, NotSerialized)
        {
            IOID = Arg0
            Return (IODT) /* \IODT */
        }

        Method (WSIO, 2, NotSerialized)
        {
            IOID = Arg0
            IODT = Arg1
        }

        Method (RWIO, 3, NotSerialized)
        {
            WSIO (Arg0, ((RSIO (Arg0) & Arg1) | Arg2))
        }

        Name (IPSW, Package (0x02)
        {
            Package (0x04)
            {
                0x87, 
                One, 
                0x55, 
                0x55
            }, 

            Package (0x04)
            {
                0x87, 
                One, 
                0x55, 
                0xAA
            }
        })
        Method (SLDN, 1, NotSerialized)
        {
            Local1 = Zero
            If ((SIOP == 0x2E))
            {
                Local1 = Zero
            }

            If ((SIOP == 0x4E))
            {
                Local1 = One
            }

            Local0 = Zero
            While ((Local0 != 0x04))
            {
                IOID = DerefOf (Index (DerefOf (Index (IPSW, Local1)), Local0))
                Local0++
            }

            WSIO (0x07, Arg0)
        }

        Method (APTS, 1, NotSerialized)
        {
            \AOD.APTS (Arg0)
        }

        Method (AWAK, 1, NotSerialized)
        {
            \AOD.AWAK (Arg0)
        }

        Device (AOD)
        {
            OperationRegion (\_SB.PCI0.RETO, PCI_Config, 0x6C, 0x20)
            Field (\_SB.PCI0.RETO, ByteAcc, NoLock, Preserve)
            {
                    ,   5, 
                CRST,   1
            }

            Name (DBG, Zero)
            Name (GDBG, One)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            Name (OBID, Package (0x1D)
            {
                0x09, 
                0x01010000, 
                0x01020000, 
                0x01030000, 
                0x02030000, 
                0x02050000, 
                0x02010000, 
                0x02040000, 
                0x02060000, 
                0x02020000, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                "CPU Clock", 
                "PCIE Clock", 
                "South Bridge Clock", 
                "CPU Extra-OV", 
                "VDDNB Extra-OV", 
                "DDR Voltage", 
                "NB Voltage", 
                "HT Voltage", 
                "SB Voltage", 
                ""
            })
            Name (OBIT, Package (0x3B)
            {
                0x01010000, 
                0x000186A0, 
                0x000927C0, 
                Zero, 
                0x03E8, 
                Zero, 
                0x01020000, 
                0x1388, 
                0x0003D090, 
                Zero, 
                0x03E8, 
                Zero, 
                0x01030000, 
                0xC350, 
                0x000186A0, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02030000, 
                Zero, 
                0x9C40, 
                Zero, 
                0x2710, 
                Zero, 
                0x02050000, 
                Zero, 
                0xEA60, 
                Zero, 
                0x2710, 
                Zero, 
                0x02010000, 
                0x000249F0, 
                0x0003C8C0, 
                Zero, 
                0x07D0, 
                Zero, 
                0x02040000, 
                0x0001ADB0, 
                0x000222E0, 
                Zero, 
                0x07D0, 
                Zero, 
                0x02060000, 
                0x0001D4C0, 
                0x000249F0, 
                Zero, 
                0x07D0, 
                Zero, 
                0x02020000, 
                0x0001D4C0, 
                0x00020F58, 
                Zero, 
                0x3A98, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OBDT, Package (0x01)
            {
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
                PWMI ()
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (DISC, 0, NotSerialized)
            {
            }

            Method (CNCT, 0, NotSerialized)
            {
            }

            Name (PWMT, Buffer (0x31)
            {
                /* 0000 */  0x04, 0x04, 0x01, 0x00, 0x0F, 0x00, 0x01, 0x63,  /* .......c */
                /* 0008 */  0x06, 0x06, 0x01, 0x00, 0x0F, 0x00, 0x01, 0x63,  /* .......c */
                /* 0010 */  0x01, 0x01, 0x01, 0x00, 0x23, 0x05, 0x01, 0x63,  /* ....#..c */
                /* 0018 */  0x02, 0x02, 0x01, 0x00, 0x01, 0x00, 0x01, 0x63,  /* .......c */
                /* 0020 */  0x03, 0x03, 0x01, 0x00, 0x03, 0x00, 0x01, 0x63,  /* .......c */
                /* 0028 */  0x05, 0x05, 0x01, 0x00, 0x06, 0x00, 0x01, 0x63,  /* .......c */
                /* 0030 */  0xFF                                             /* . */
            })
            Method (PWMI, 0, NotSerialized)
            {
                Local0 = (0x03 << 0x04)
                Local2 = (A283 + One)
                RWSM (SMBC, Local2, Local0, SMBV)
                Index (PWMT, 0x05) = DerefOf (Index (SMBV, Zero))
                Local0 = (Zero << 0x04)
                Local2 = (A283 + One)
                RWSM (SMBC, Local2, Local0, SMBV)
                Index (PWMT, 0x0D) = DerefOf (Index (SMBV, Zero))
                Local0 = (One << 0x04)
                RWSM (SMBC, (A283 + One), Local0, SMBV)
                Index (PWMT, 0x15) = DerefOf (Index (SMBV, Zero))
                SLDN (0x07)
                Local1 = RSIO (0xCF)
                RWIO (0xCF, 0xDF, 0x20)
                Local0 = GP85 /* \GP85 */
                If ((Local0 == One))
                {
                    Index (PWMT, 0x1D) = Zero
                }
                Else
                {
                    Index (PWMT, 0x1D) = One
                }

                SLDN (0x07)
                Local0 = RSIO (0xCF)
                Local0 &= 0x03
                Index (PWMT, 0x25) = Local0
                SLDN (0x07)
                Local0 = RSIO (0xCF)
                Local0 >>= 0x02
                Local0 &= 0x03
                Local2 = RSIO (0xCE)
                Local2 >>= 0x03
                Local2 &= One
                If ((Local2 == One))
                {
                    Local0 += 0x03
                }

                Index (PWMT, 0x2D) = Local0
                RWIO (0xCF, Zero, Local1)
            }

            Method (VTR, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = Arg0
                If ((PWMX == 0x04))
                {
                    Local0 = (((Local1 - 0x0001ADB0) / 0x07D0) + PMIN)
                    S283 (0x03, Local0)
                }
                Else
                {
                    If ((PWMX == 0x06))
                    {
                        Local0 = (((Local1 - 0x0001D4C0) / 0x07D0) + PMIN)
                        S283 (Zero, Local0)
                    }
                    Else
                    {
                        If ((PWMX == One))
                        {
                            Local0 = (((Local1 - 0x000249F0) / 0x07D0) + PMIN) /* \AOD_.PMIN */
                            S283 (One, Local0)
                        }
                        Else
                        {
                            If ((PWMX == 0x02))
                            {
                                Local0 = (((Local1 - 0x0001D4C0) / 0x3A98) + PMIN) /* \AOD_.PMIN */
                                If ((Local0 == One))
                                {
                                    GP85 = Zero
                                }
                                Else
                                {
                                    RWIO (0xCF, 0xDF, Zero)
                                    GP85 = One
                                }
                            }
                            Else
                            {
                                If ((PWMX == 0x03))
                                {
                                    If ((Local1 == 0x9C40))
                                    {
                                        SLDN (0x07)
                                        RWIO (0xCF, 0xFC, 0x03)
                                        GP80 = Zero
                                        GP81 = Zero
                                    }
                                    Else
                                    {
                                        If ((Local1 > 0x7530))
                                        {
                                            SLDN (0x07)
                                            RWIO (0xCF, 0xFC, 0x02)
                                            GP80 = One
                                            GP81 = Zero
                                        }
                                        Else
                                        {
                                            If ((Local1 > 0x2710))
                                            {
                                                SLDN (0x07)
                                                RWIO (0xCF, 0xFC, One)
                                                GP80 = Zero
                                                GP81 = One
                                            }
                                            Else
                                            {
                                                SLDN (0x07)
                                                RWIO (0xCF, 0xFC, Zero)
                                                GP80 = One
                                                GP81 = One
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((PWMX == 0x05))
                                    {
                                        If ((Local1 == 0xEA60))
                                        {
                                            SLDN (0x07)
                                            RWIO (0xCF, 0xF3, 0x0C)
                                            GP82 = Zero
                                            GP83 = Zero
                                            RWIO (0xCE, 0xF7, 0x08)
                                            GP73 = Zero
                                        }
                                        Else
                                        {
                                            If ((Local1 > 0xC350))
                                            {
                                                SLDN (0x07)
                                                RWIO (0xCF, 0xF3, 0x0C)
                                                GP82 = One
                                                GP83 = Zero
                                                RWIO (0xCE, 0xF7, 0x08)
                                                GP73 = Zero
                                            }
                                            Else
                                            {
                                                If ((Local1 > 0x9C40))
                                                {
                                                    SLDN (0x07)
                                                    RWIO (0xCF, 0xF3, 0x0C)
                                                    GP82 = Zero
                                                    GP83 = One
                                                    RWIO (0xCE, 0xF7, 0x08)
                                                    GP73 = Zero
                                                }
                                                Else
                                                {
                                                    If ((Local1 > 0x7530))
                                                    {
                                                        SLDN (0x07)
                                                        RWIO (0xCF, 0xF3, 0x0C)
                                                        GP82 = Zero
                                                        GP83 = Zero
                                                        RWIO (0xCE, 0xF7, Zero)
                                                        GP73 = One
                                                    }
                                                    Else
                                                    {
                                                        If ((Local1 > 0x4E20))
                                                        {
                                                            SLDN (0x07)
                                                            RWIO (0xCF, 0xF3, 0x08)
                                                            GP82 = One
                                                            GP83 = Zero
                                                            RWIO (0xCE, 0xF7, Zero)
                                                            GP73 = One
                                                        }
                                                        Else
                                                        {
                                                            If ((Local1 > 0x2710))
                                                            {
                                                                SLDN (0x07)
                                                                RWIO (0xCF, 0xF3, 0x04)
                                                                GP82 = Zero
                                                                GP83 = One
                                                                RWIO (0xCE, 0xF7, Zero)
                                                                GP73 = One
                                                            }
                                                            Else
                                                            {
                                                                SLDN (0x07)
                                                                RWIO (0xCF, 0xF3, Zero)
                                                                GP82 = One
                                                                GP83 = One
                                                                RWIO (0xCE, 0xF7, Zero)
                                                                GP73 = One
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                    }
                                }
                            }
                        }
                    }
                }

                Return (Local0)
            }

            Method (RTV, 1, NotSerialized)
            {
                Local0 = Arg0
                If ((PWMX == 0x04))
                {
                    Local1 = (0x0001ADB0 + ((Local0 - PMIN) * 0x07D0))
                }
                Else
                {
                    If ((PWMX == 0x06))
                    {
                        Local1 = (0x0001D4C0 + ((Local0 - PMIN) * 0x07D0))
                    }
                    Else
                    {
                        If ((PWMX == One))
                        {
                            Local1 = (0x000249F0 + ((Local0 - PMIN) * 0x07D0))
                        }
                        Else
                        {
                            If ((PWMX == 0x02))
                            {
                                Local1 = (0x0001D4C0 + ((Local0 - PMIN) * 0x3A98))
                            }
                            Else
                            {
                                If ((PWMX == 0x03))
                                {
                                    Local0 = (PDFT - PMIN)
                                    If ((Local0 > One))
                                    {
                                        Local0 += One
                                    }

                                    Local1 = (Local0 * 0x2710)
                                }
                                Else
                                {
                                    If ((PWMX == 0x05))
                                    {
                                        Local1 = ((PDFT - PMIN) * 0x2710)
                                    }
                                    Else
                                    {
                                        Local1 = Zero
                                    }
                                }
                            }
                        }
                    }
                }

                Return (Local1)
            }

            Name (QLST, Package (0x0F)
            {
                0x0E, 
                Package (0x05)
                {
                    0x2626, 
                    "Memory Clock Mode", 
                    Zero, 
                    0x03, 
                    Package (0x03)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x06)
                        {
                            "Limit"
                        }, 

                        Buffer (0x07)
                        {
                            "Manual"
                        }
                    }
                }, 

                Package (0x06)
                {
                    0x349D, 
                    "Memclock Value", 
                    One, 
                    Buffer (0x05)
                    {
                         0x02, 0x00, 0x01, 0x03, 0x00                     /* ..... */
                    }, 

                    0x08, 
                    Package (0x08)
                    {
                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "400"
                        }, 

                        Buffer (0x04)
                        {
                            "533"
                        }, 

                        Buffer (0x04)
                        {
                            "667"
                        }, 

                        Buffer (0x04)
                        {
                            "800"
                        }, 

                        Buffer (0x05)
                        {
                            "Auto"
                        }
                    }
                }, 

                Package (0x05)
                {
                    0x262E, 
                    "DRAM Timing Mode", 
                    Zero, 
                    0x04, 
                    Package (0x04)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x05)
                        {
                            "Both"
                        }
                    }
                }, 

                Package (0x07)
                {
                    0x4534, 
                    "DCT0 CAS Latency (CL)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x02, 0x00, 0x03, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x02, 0x02, 0x03, 0x03, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Package (0x10)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x06)
                        {
                            "4 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "5 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "6 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "7 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "8 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "9 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "10 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "11 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "12 CLK"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }
                    }
                }, 

                Package (0x07)
                {
                    0x4538, 
                    "DCT1 CAS Latency (CL)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x02, 0x00, 0x03, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x02, 0x01, 0x03, 0x03, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Package (0x10)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x06)
                        {
                            "4 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "5 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "6 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "7 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "8 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "9 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "10 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "11 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "12 CLK"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }
                    }
                }, 

                Package (0x05)
                {
                    0x360B, 
                    "NB FID Control", 
                    Zero, 
                    0x02, 
                    Package (0x02)
                    {
                        Buffer (0x07)
                        {
                            "Manual"
                        }, 

                        Buffer (0x05)
                        {
                            "Auto"
                        }
                    }
                }, 

                Package (0x06)
                {
                    0x5450, 
                    "NBFID ID", 
                    One, 
                    Buffer (0x05)
                    {
                         0x02, 0x01, 0x06, 0x03, 0x00                     /* ..... */
                    }, 

                    0x21, 
                    Package (0x21)
                    {
                        Buffer (0x02)
                        {
                            "3"
                        }, 

                        Buffer (0x02)
                        {
                            "4"
                        }, 

                        Buffer (0x02)
                        {
                            "5"
                        }, 

                        Buffer (0x02)
                        {
                            "6"
                        }, 

                        Buffer (0x02)
                        {
                            "7"
                        }, 

                        Buffer (0x02)
                        {
                            "8"
                        }, 

                        Buffer (0x02)
                        {
                            "9"
                        }, 

                        Buffer (0x03)
                        {
                            "10"
                        }, 

                        Buffer (0x03)
                        {
                            "11"
                        }, 

                        Buffer (0x03)
                        {
                            "12"
                        }, 

                        Buffer (0x03)
                        {
                            "13"
                        }, 

                        Buffer (0x03)
                        {
                            "14"
                        }, 

                        Buffer (0x03)
                        {
                            "15"
                        }, 

                        Buffer (0x03)
                        {
                            "16"
                        }, 

                        Buffer (0x03)
                        {
                            "17"
                        }, 

                        Buffer (0x03)
                        {
                            "18"
                        }, 

                        Buffer (0x03)
                        {
                            "19"
                        }, 

                        Buffer (0x03)
                        {
                            "20"
                        }, 

                        Buffer (0x03)
                        {
                            "21"
                        }, 

                        Buffer (0x03)
                        {
                            "22"
                        }, 

                        Buffer (0x03)
                        {
                            "23"
                        }, 

                        Buffer (0x03)
                        {
                            "24"
                        }, 

                        Buffer (0x03)
                        {
                            "25"
                        }, 

                        Buffer (0x03)
                        {
                            "26"
                        }, 

                        Buffer (0x03)
                        {
                            "27"
                        }, 

                        Buffer (0x03)
                        {
                            "28"
                        }, 

                        Buffer (0x03)
                        {
                            "29"
                        }, 

                        Buffer (0x03)
                        {
                            "30"
                        }, 

                        Buffer (0x03)
                        {
                            "31"
                        }, 

                        Buffer (0x03)
                        {
                            "32"
                        }, 

                        Buffer (0x03)
                        {
                            "33"
                        }, 

                        Buffer (0x03)
                        {
                            "34"
                        }, 

                        Buffer (0x03)
                        {
                            "35"
                        }
                    }
                }, 

                Package (0x05)
                {
                    0x178C, 
                    "DDR3 Memory Profile", 
                    Zero, 
                    0x02, 
                    Package (0x02)
                    {
                        Buffer (0x09)
                        {
                            "Disabled"
                        }, 

                        Buffer (0x08)
                        {
                            "Enabled"
                        }
                    }
                }, 

                Package (0x08)
                {
                    0x26DC, 
                    "Advanced Clock Calibration", 
                    Zero, 
                    0x04, 
                    Buffer (0x09)
                    {
                        "Disabled"
                    }, 

                    Buffer (0x05)
                    {
                        "Auto"
                    }, 

                    Buffer (0x0A)
                    {
                        "All Cores"
                    }, 

                    Buffer (0x09)
                    {
                        "Per Core"
                    }
                }, 

                Package (0x16)
                {
                    0x4574, 
                    "Value (All Cores)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x02, 0x01, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x4578, 
                    "Value (Core 0)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x457C, 
                    "Value (Core 1)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x4580, 
                    "Value (Core 2)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }, 

                Package (0x16)
                {
                    0x4584, 
                    "Value (Core 3)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
                    }, 

                    Buffer (0x05)
                    {
                         0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
                    }, 

                    0x10, 
                    Buffer (0x03)
                    {
                        "0%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "+ 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "+10%"
                    }, 

                    Buffer (0x05)
                    {
                        "+12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }, 

                    Buffer (0x05)
                    {
                        "- 2%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 4%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 6%"
                    }, 

                    Buffer (0x05)
                    {
                        "- 8%"
                    }, 

                    Buffer (0x05)
                    {
                        "-10%"
                    }, 

                    Buffer (0x05)
                    {
                        "-12%"
                    }, 

                    Buffer (0x09)
                    {
                        "RESERVED"
                    }
                }
            })
            OperationRegion (AODT, SystemMemory, 0x000EFC32, 0x0100)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                Offset (0x08), 
                ASBF,   960, 
                GFXO,   1, 
                GMOD,   2, 
                Offset (0x84), 
                RAMB,   32, 
                RAMS,   32
            }

            Name (ID01, Zero)
            Name (ID02, Zero)
            Method (SOID, 1, NotSerialized)
            {
                ID01 = (Arg0 >> 0x18)
                ID02 = ((Arg0 & 0x00FF0000) >> 0x10)
                Return (Zero)
            }

            Method (WROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                CreateDWordField (Arg0, Zero, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                Index (IFPK, Zero) = BUF0 /* \AOD_.WROW.BUF0 */
                Index (IFPK, One) = BUF1 /* \AOD_.WROW.BUF1 */
                Index (IFPK, 0x02) = BUF2 /* \AOD_.WROW.BUF2 */
                Index (IFPK, 0x03) = BUF3 /* \AOD_.WROW.BUF3 */
                Index (IFPK, 0x04) = BUF4 /* \AOD_.WROW.BUF4 */
                Index (IFPK, 0x05) = BUF5 /* \AOD_.WROW.BUF5 */
                Local0 = Arg3
                Local1 = Zero
                While (Local0)
                {
                    Index (Arg1, ((Arg2 * Arg3) + Local1)) = DerefOf (
                        Index (IFPK, Local1))
                    Local1++
                    Local0--
                }
            }

            Method (GROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Arg3
                Local1 = Zero
                While (Local0)
                {
                    Index (IFPK, Local1) = DerefOf (Index (Arg0, ((Arg2 * Arg3
                        ) + Local1)))
                    Local1++
                    Local0--
                }

                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                CreateDWordField (Arg1, 0x14, BUF5)
                BUF0 = DerefOf (Index (IFPK, Zero))
                BUF1 = DerefOf (Index (IFPK, One))
                BUF2 = DerefOf (Index (IFPK, 0x02))
                BUF3 = DerefOf (Index (IFPK, 0x03))
                BUF4 = DerefOf (Index (IFPK, 0x04))
                BUF5 = DerefOf (Index (IFPK, 0x05))
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                Local0 = Zero
                LOID = DerefOf (Index (OBIT, Local0))
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (Index (OBIT, (Local0 + Zero)))
                        BUF1 = DerefOf (Index (OBIT, (Local0 + One)))
                        BUF2 = DerefOf (Index (OBIT, (Local0 + 0x02)))
                        BUF3 = DerefOf (Index (OBIT, (Local0 + 0x03)))
                        BUF4 = DerefOf (Index (OBIT, (Local0 + 0x04)))
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (Index (OBIT, Local0))
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (CBTP, 1, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg0, Zero, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                Local0 = Zero
                LOID = DerefOf (Index (OBIT, Local0))
                While (LOID)
                {
                    If ((LOID == BUF0))
                    {
                        Index (OBIT, (Local0 + Zero)) = BUF0 /* \AOD_.CBTP.BUF0 */
                        Index (OBIT, (Local0 + One)) = BUF1 /* \AOD_.CBTP.BUF1 */
                        Index (OBIT, (Local0 + 0x02)) = BUF2 /* \AOD_.CBTP.BUF2 */
                        Index (OBIT, (Local0 + 0x03)) = BUF3 /* \AOD_.CBTP.BUF3 */
                        Index (OBIT, (Local0 + 0x04)) = BUF4 /* \AOD_.CBTP.BUF4 */
                        Index (OBIT, (Local0 + 0x05)) = BUF5 /* \AOD_.CBTP.BUF5 */
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (Index (OBIT, Local0))
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (ABS, 2, NotSerialized)
            {
                If ((Arg0 < Arg1))
                {
                    Return ((Arg1 - Arg0))
                }
                Else
                {
                    Return ((Arg0 - Arg1))
                }
            }

            Name (DG01, One)
            Name (DG02, 0x02)
            Name (DG03, 0x03)
            Name (DG04, 0x04)
            Method (ADBG, 2, NotSerialized)
            {
                If (DBG)
                {
                    If ((Arg1 == DG01))
                    {
                        If (GDBG)
                        {
                            Debug = "[GEN]"
                            Debug = Arg0
                        }
                    }
                    Else
                    {
                        If ((Arg1 == DG02))
                        {
                            If (CDBG)
                            {
                                Debug = "[CLK]"
                                Debug = Arg0
                            }
                        }
                        Else
                        {
                            If ((Arg1 == DG03))
                            {
                                If (VDBG)
                                {
                                    Debug = "[VOL]"
                                    Debug = Arg0
                                }
                            }
                            Else
                            {
                                If ((Arg1 == DG04))
                                {
                                    If (RDBG)
                                    {
                                        Debug = "[RCMD]"
                                        Debug = Arg0
                                    }
                                }
                                Else
                                {
                                    Debug = "[NULL]"
                                    Debug = Arg0
                                }
                            }
                        }
                    }
                }
            }

            OperationRegion (SMIX, SystemIO, SMIP, One)
            Field (SMIX, ByteAcc, NoLock, Preserve)
            {
                SMIC,   8
            }

            Name (EXBF, Buffer (0x78) {})
            Method (GCMS, 1, NotSerialized)
            {
                Name (TEMP, Buffer (0x06) {})
                CreateDWordField (TEMP, Zero, TMP1)
                CreateWordField (TEMP, 0x04, TMP2)
                ASCD = One
                CreateWordField (EXBF, Zero, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = Zero
                CMSI = Arg0
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                TMP1 = ASTS /* \AOD_.ASTS */
                TMP2 = CMSD /* \AOD_.GCMS.CMSD */
                Return (TEMP) /* \AOD_.GCMS.TEMP */
            }

            Method (SCMS, 2, NotSerialized)
            {
                ASCD = 0x02
                CreateWordField (EXBF, Zero, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = Zero
                CMSI = Arg0
                CMSD = Arg1
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                Return (ASTS) /* \AOD_.ASTS */
            }

            Method (STNV, 2, NotSerialized)
            {
                ASCD = 0x03
                CreateField (EXBF, Zero, Arg1, MOPD)
                EXBF = Zero
                MOPD = Arg0
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                Return (ASTS) /* \AOD_.ASTS */
            }

            Name (CPUD, Zero)
            Name (GFXD, Zero)
            Name (SBCD, Zero)
            Method (GETC, 1, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    GVB2 = One
                    GVB1 = Zero
                    Return (GVBF) /* \AOD_.GVBF */
                }

                GVB2 = Zero
                GVB1 = CCLK (Arg0)
                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (SETC, 2, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    Return (One)
                }

                If ((Arg0 == One))
                {
                    Local0 = GDIV (0x14)
                    Local1 = GCCX (0x10, 0x11, 0x14, 0xC350)
                    Local2 = (Arg1 * Local0)
                    If ((Local1 != Local2))
                    {
                        If (!CFMN (Local2, 0xC350))
                        {
                            SFSB (Arg1)
                        }
                    }

                    Local3 = Zero
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        Local0 = GDIV (0x1C)
                        Local1 = GCCX (0x1A, 0x1B, 0x1C, 0x37EE)
                        Local2 = (Arg1 * Local0)
                        Local3 = RMPC (Local1, Local2, 0x07D0, Arg0)
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            Local0 = GDIV (0x1F)
                            Local1 = GCCX (0x1D, 0x1E, 0x1F, 0x37EE)
                            Local2 = (Arg1 * Local0)
                            Local3 = RMPC (Local1, Local2, 0x2710, Arg0)
                        }
                    }
                }

                Debug = "current target ramp step clkid"
                Debug = Local1
                Debug = Local2
                Debug = 0x07D0
                Debug = Arg0
                If (Local3)
                {
                    Return (Local3)
                }

                Return (Zero)
            }

            Method (CINI, 0, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, 0x07, 0x09, TSBF))
                {
                    Return (One)
                }

                If ((((DerefOf (Index (TSBF, 0x08)) & 0x0F) != 
                    One) || (DerefOf (Index (TSBF, 0x07)) != 0x75)))
                {
                    Return (0x03)
                }

                Index (TSBF, 0x0B) = 0x20
                Index (TSBF, 0x0C) = (DerefOf (Index (TSBF, 0x0C)) | 0xB0)
                Index (TSBF, 0x06) = (DerefOf (Index (TSBF, 0x06)) & 0x1F)
                If (RWBK (Zero, 0xD2, 0x0B, 0x02, TSBF))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (GCCX, 4, NotSerialized)
            {
                Local0 = (DerefOf (Index (TSBF, Arg2)) & 0x80)
                Local0 >>= 0x07
                Local1 = (DerefOf (Index (TSBF, Arg0)) & 0xC0)
                Local1 >>= 0x05
                Local2 = (DerefOf (Index (TSBF, Arg1)) & 0xFF)
                Local2 <<= 0x03
                Local0 += Local1
                Local0 += Local2
                Local1 = (DerefOf (Index (TSBF, Arg0)) & 0x3F)
                Local2 = (Arg3 * Local0)
                Local3 = (Local2 / Local1)
                Local4 = (Local3 / 0x03E8)
                Local4 *= 0x03E8
                Local5 = (Local3 - Local4)
                If ((Local5 > 0x01F4))
                {
                    Local4 += 0x03E8
                }

                Return (Local4)
            }

            Name (VCOM, Zero)
            Name (VCON, Zero)
            Method (CCMN, 2, NotSerialized)
            {
                Local0 = Arg1
                Local1 = ABS (Arg0, Arg1)
                Local2 = 0x13
                While ((Local2 < 0x19))
                {
                    Local3 = (((Arg0 * Local2) / Arg1) + 0x02)
                    If ((Local3 > 0x0800))
                    {
                        Local3 = 0x0800
                    }

                    If ((((Arg0 * Local2) / Arg1) > 0x02))
                    {
                        Local4 = (((Arg0 * Local2) / Arg1) - 0x02)
                        If ((Local4 < 0x02))
                        {
                            Local4 = 0x02
                        }
                    }
                    Else
                    {
                        Local4 = 0x02
                    }

                    While ((Local4 <= Local3))
                    {
                        Local0 = ((Arg1 * Local4) / Local2)
                        Local5 = ABS (Arg0, Local0)
                        If ((Local5 < Local1))
                        {
                            Debug = "N"
                            Debug = Local4
                            Debug = "M"
                            Debug = Local2
                            Debug = "Diff"
                            Debug = Local5
                            VCON = Local4
                            VCOM = Local2
                            Local1 = Local5
                            If ((Local5 < 0x012C))
                            {
                                Break
                            }
                        }

                        Local4++
                    }

                    Local2++
                }
            }

            Method (CCLK, 1, NotSerialized)
            {
                Name (VCOV, Zero)
                Name (VCOD, Zero)
                If ((Arg0 == One))
                {
                    If ((CPUD == Zero))
                    {
                        CPUD = GDIV (0x14)
                    }

                    VCOD = CPUD /* \AOD_.CPUD */
                    VCOV = GCCX (0x10, 0x11, 0x14, 0xC350)
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((GFXD == Zero))
                        {
                            GFXD = GDIV (0x1C)
                        }

                        VCOD = GFXD /* \AOD_.GFXD */
                        VCOV = GCCX (0x1A, 0x1B, 0x1C, 0x37EE)
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            If ((SBCD == Zero))
                            {
                                SBCD = GDIV (0x1F)
                            }

                            VCOD = SBCD /* \AOD_.SBCD */
                            VCOV = GCCX (0x1D, 0x1E, 0x1F, 0x37EE)
                        }
                    }
                }

                Return ((VCOV / VCOD))
            }

            Method (SCCX, 5, NotSerialized)
            {
                VCOM = Zero
                VCON = Zero
                CCMN (Arg0, Arg4)
                Debug = "VCOM"
                Debug = VCOM /* \AOD_.VCOM */
                Debug = "VCON"
                Debug = VCON /* \AOD_.VCON */
                Index (TSBF, Arg1) = (((VCON << 0x05) & 0xC0
                    ) | VCOM)
                Index (TSBF, Arg2) = ((VCON >> 0x03) & 0xFF)
                Index (TSBF, Arg3) = ((DerefOf (Index (TSBF, Arg3)) & 0x7F
                    ) | ((VCON << 0x07) & 0x80))
                Debug = TSBF /* \AOD_.TSBF */
                If (RWBK (Zero, 0xD2, Arg1, ((Arg3 - Arg1) + One), 
                    TSBF))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Name (DIVD, Buffer (0x10)
            {
                /* 0000 */  0x02, 0x03, 0x05, 0x09, 0x04, 0x06, 0x0A, 0x12,  /* ........ */
                /* 0008 */  0x08, 0x0C, 0x14, 0x24, 0x10, 0x18, 0x28, 0x48   /* ...$..(H */
            })
            Method (GDIV, 1, NotSerialized)
            {
                Return (DerefOf (Index (DIVD, (DerefOf (Index (TSBF, Arg0)) & 0x0F)
                    )))
            }

            Method (WTCX, 2, NotSerialized)
            {
                Local0 = Arg1
                If ((Arg0 == One))
                {
                    Return (SCCX (Local0, 0x10, 0x11, 0x14, 0xC350))
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        Return (SCCX (Local0, 0x1A, 0x1B, 0x1C, 0x37EE))
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            Return (SCCX (Local0, 0x1D, 0x1E, 0x1F, 0x37EE))
                        }
                    }
                }

                Return (0x04)
            }

            Method (RMPC, 4, NotSerialized)
            {
                Name (STAT, Zero)
                Local0 = Arg0
                Local1 = Arg1
                While ((ABS (Local1, Local0) > Arg2))
                {
                    If ((Local0 < Local1))
                    {
                        Local0 += Arg2
                    }
                    Else
                    {
                        Local0 -= Arg2
                    }

                    Debug = Local0
                    STAT = WTCX (Arg3, Local0)
                    Sleep (0x01F4)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                If ((Local0 != Local1))
                {
                    STAT = WTCX (Arg3, Local1)
                    Sleep (0x01F4)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                Return (Zero)
            }

            Method (SFSB, 1, NotSerialized)
            {
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                Index (TSBF, 0x0C) = (DerefOf (Index (TSBF, 0x0C)) & 0xEF)
                RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                If ((Arg0 == 0x00030D40))
                {
                    Local2 = One
                    While ((((DerefOf (Index (TSBF, 0x1D)) != 0x19) || 
                        (DerefOf (Index (TSBF, 0x1E)) != 0xDB)) && (Local2 <= 0x0A)))
                    {
                        Index (TSBF, 0x0C) = (DerefOf (Index (TSBF, 0x0C)) & 0xEF)
                        RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                        Index (TSBF, 0x1D) = 0x19
                        Index (TSBF, 0x1E) = 0xDB
                        RWBK (Zero, 0xD2, 0x1D, 0x02, TSBF)
                        Index (TSBF, 0x0C) = (DerefOf (Index (TSBF, 0x0C)) | 0x10)
                        RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                        RWBK (Zero, 0xD3, 0x1D, 0x02, TSBF)
                        Sleep (0x0A)
                        Local2++
                    }
                }
                Else
                {
                    Local2 = One
                    While ((((DerefOf (Index (TSBF, 0x1D)) != 0x8D) || 
                        (DerefOf (Index (TSBF, 0x1E)) != 0x71)) && (Local2 <= 0x0A)))
                    {
                        Index (TSBF, 0x0C) = (DerefOf (Index (TSBF, 0x0C)) & 0xEF)
                        RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                        Index (TSBF, 0x1D) = 0x8D
                        Index (TSBF, 0x1E) = 0x71
                        RWBK (Zero, 0xD2, 0x1D, 0x02, TSBF)
                        Index (TSBF, 0x0C) = (DerefOf (Index (TSBF, 0x0C)) | 0x10)
                        RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                        RWBK (Zero, 0xD3, 0x1D, 0x02, TSBF)
                        Sleep (0x0A)
                        Local2++
                    }
                }

                Local0 = DerefOf (Index (TSBF, 0x0C))
                Local1 = DerefOf (Index (TSBF, 0x05))
                Local2 = (DerefOf (Index (TSBF, 0x14)) & 0x7F)
                Local3 = (DerefOf (Index (TSBF, 0x10)) & 0x3F)
                Local4 = (Local3 * 0x08)
                Local5 = (((Local4 & 0x06) << 0x05) | Local3)
                Local6 = ((Local4 >> 0x03) & 0xFF)
                Local7 = ((Local4 & One) << 0x07)
                Index (TSBF, 0x0C) = (Local0 | 0x80)
                Index (TSBF, 0x05) = (Local1 & 0xEF)
                Index (TSBF, 0x10) = Local5
                Index (TSBF, 0x11) = Local6
                Index (TSBF, 0x14) = (Local2 | Local7)
                RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                RWBK (Zero, 0xD2, 0x05, One, TSBF)
                RWBK (Zero, 0xD2, 0x11, One, TSBF)
                Sleep (0x0A)
                RWBK (Zero, 0xD2, 0x10, One, TSBF)
                Sleep (0x0A)
                RWBK (Zero, 0xD2, 0x14, One, TSBF)
                Sleep (0x14)
                Local3 = (DerefOf (Index (TGMN, Zero)) & 0x3F)
                Local4 = (Local3 * 0x08)
                Local5 = (((Local4 & 0x06) << 0x05) | Local3)
                Local6 = ((Local4 >> 0x03) & 0xFF)
                Local7 = ((Local4 & One) << 0x07)
                Index (TSBF, 0x05) = (Local1 | 0x10)
                Index (TSBF, 0x0C) = (Local0 & 0x7F)
                RWBK (Zero, 0xD2, 0x05, One, TSBF)
                RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                Index (TSBF, 0x10) = Local5
                Index (TSBF, 0x11) = Local6
                Index (TSBF, 0x14) = (Local2 | Local7)
                RWBK (Zero, 0xD2, 0x10, One, TSBF)
                Sleep (0x0A)
                RWBK (Zero, 0xD2, 0x11, One, TSBF)
                Sleep (0x0A)
                RWBK (Zero, 0xD2, 0x14, One, TSBF)
                Sleep (0x0A)
                Index (TSBF, 0x0C) = (Local0 | 0x80)
                Index (TSBF, 0x05) = (Local1 & 0xEF)
                RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                RWBK (Zero, 0xD2, 0x05, One, TSBF)
                Sleep (0x0A)
                Index (TSBF, 0x10) = DerefOf (Index (TGMN, Zero))
                Index (TSBF, 0x11) = DerefOf (Index (TGMN, One))
                Index (TSBF, 0x14) = (Local2 | DerefOf (Index (TGMN, 0x02))
                    )
                RWBK (Zero, 0xD2, 0x11, One, TSBF)
                Sleep (0x0A)
                RWBK (Zero, 0xD2, 0x10, One, TSBF)
                Sleep (0x0A)
                RWBK (Zero, 0xD2, 0x14, One, TSBF)
                Sleep (0x14)
            }

            Name (TGMN, Buffer (0x03)
            {
                 0x00, 0x00, 0x00                                 /* ... */
            })
            Method (CFMN, 2, NotSerialized)
            {
                Local2 = 0x0A
                While ((Local2 <= 0x19))
                {
                    Divide ((Arg0 * Local2), Arg1, Local3)
                    If ((Local3 == Zero))
                    {
                        Local4 = ((Arg0 * Local2) / Arg1)
                        If (((Local4 >> 0x03) < 0x0100))
                        {
                            Index (TGMN, Zero) = (((Local4 & 0x06) << 0x05
                                ) | Local2)
                            Index (TGMN, One) = ((Local4 >> 0x03) & 0xFF)
                            Index (TGMN, 0x02) = ((Local4 & One) << 0x07)
                            Return (Zero)
                        }
                    }

                    Local2++
                }

                Return (One)
            }

            Name (PWIF, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            CreateByteField (PWIF, One, PWMX)
            CreateByteField (PWIF, 0x02, PWEN)
            CreateByteField (PWIF, 0x03, PMIN)
            CreateByteField (PWIF, 0x04, PMAX)
            CreateByteField (PWIF, 0x05, PDFT)
            CreateByteField (PWIF, 0x06, PSTP)
            CreateByteField (PWIF, 0x07, PNMD)
            Name (PXIF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            CreateByteField (PXIF, Zero, PXHI)
            CreateByteField (PXIF, One, PXNM)
            CreateByteField (PXIF, 0x02, PXEN)
            CreateByteField (PXIF, 0x03, PXIO)
            Method (VINI, 0, NotSerialized)
            {
                ADBG ("VINI", DG03)
                Name (LDFT, Zero)
                Local0 = DerefOf (Index (OBID, Zero))
                Local1 = One
                While (Local0)
                {
                    SOID (DerefOf (Index (OBID, Local1)))
                    ADBG ("ID", DG03)
                    ADBG (ID01, DG03)
                    ADBG (ID02, DG03)
                    If ((ID01 == 0x02))
                    {
                        If ((GPIF (ID02) == Zero))
                        {
                            ADBG ("PWIF", DG03)
                            ADBG (PWIF, DG03)
                            If ((PWEN == One))
                            {
                                PWMR (PWMX)
                                If (!(PXEN && PXIO))
                                {
                                    LDFT = One
                                    Break
                                }
                            }
                        }
                    }

                    Local0--
                    Local1++
                }

                ADBG ("LDFT", DG03)
                ADBG (LDFT, DG03)
                If ((LDFT == One))
                {
                    DISC ()
                    Local0 = DerefOf (Index (OBID, Zero))
                    Local1 = One
                    While (Local0)
                    {
                        SOID (DerefOf (Index (OBID, Local1)))
                        ADBG ("ID", DG03)
                        ADBG (ID01, DG03)
                        ADBG (ID02, DG03)
                        If ((ID01 == 0x02))
                        {
                            If ((GPIF (ID02) == Zero))
                            {
                                ADBG ("PWIF", DG03)
                                ADBG (PWIF, DG03)
                                If ((PWEN == One))
                                {
                                    FPDV (PWMX)
                                    PWMW (PWMX, PDFT)
                                }

                                ADBG ("PWMR", DG03)
                                ADBG (PWMR (PWMX), DG03)
                            }
                        }

                        Local0--
                        Local1++
                    }
                }

                ADBG ("PWM Register", DG03)
                ADBG ("PX EN PXNM PXHI PXIO", DG03)
                CLKE = One
                ADBG (P1EN, DG03)
                ADBG (P1NM, DG03)
                ADBG (P1HI, DG03)
                ADBG (P1IO, DG03)
                ADBG (P2EN, DG03)
                ADBG (P2NM, DG03)
                ADBG (P2HI, DG03)
                ADBG (P2IO, DG03)
                ADBG (P3EN, DG03)
                ADBG (P3NM, DG03)
                ADBG (P3HI, DG03)
                ADBG (P3IO, DG03)
                ADBG (P4EN, DG03)
                ADBG (P4NM, DG03)
                ADBG (P4HI, DG03)
                ADBG (P4IO, DG03)
                ADBG (P5EN, DG03)
                ADBG (P5NM, DG03)
                ADBG (P5HI, DG03)
                ADBG (P5IO, DG03)
                ADBG (P6EN, DG03)
                ADBG (P6NM, DG03)
                ADBG (P6HI, DG03)
                ADBG (P6IO, DG03)
                CLKE = Zero
                CNCT ()
            }

            Method (SETV, 2, NotSerialized)
            {
                ADBG ("setv", DG03)
                If ((GPIF (Arg0) == Zero))
                {
                    Local0 = VTR (Arg1)
                    ADBG (PWIF, DG03)
                    ADBG ("seted Regiseter", DG03)
                    ADBG (Local0, DG03)
                    WTVR (Local0, PWMX, PMAX, PMIN, PDFT, PSTP)
                    ADBG ("read REG", DG03)
                    ADBG (PWMR (PWMX), DG03)
                }
            }

            Method (GETV, 1, NotSerialized)
            {
                ADBG ("getv", DG03)
                If ((GPIF (Arg0) == Zero))
                {
                    ADBG ("PWIF", DG03)
                    ADBG (PWIF, DG03)
                    Local0 = PWMR (PWMX)
                    ADBG ("REG value", DG03)
                    ADBG (Local0, DG03)
                    Local1 = RTV (Local0)
                    ADBG ("Voltage value", DG03)
                    ADBG (Local1, DG03)
                    GVB2 = Zero
                    GVB1 = Local1
                }
                Else
                {
                    GVB1 = Zero
                    GVB2 = 0x04
                }

                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (GPIF, 1, NotSerialized)
            {
                PWMI ()
                Local1 = Zero
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (Index (PWMT, Local1)) == 0xFF))
                    {
                        Local0 = 0xFF
                        Break
                    }

                    If ((DerefOf (Index (PWMT, Local1)) == Arg0))
                    {
                        Local2 = 0x08
                        Local3 = Zero
                        While (Local2)
                        {
                            Index (PWIF, Local3) = DerefOf (Index (PWMT, (Local1 + Local3)
                                ))
                            Local3++
                            Local2--
                        }

                        Break
                    }

                    Local1 += 0x08
                }

                If ((Local0 == 0xFF))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (WTVR, 6, NotSerialized)
            {
                Name (PTGT, Zero)
                If (((Arg0 > Arg2) || (Arg0 < Arg3)))
                {
                    PTGT = Arg4
                }
                Else
                {
                    PTGT = Arg0
                }

                Local0 = PWMR (Arg1)
                RMPV (PTGT, Local0, Arg5, Arg1)
                Return (Zero)
            }

            Method (PWMR, 1, NotSerialized)
            {
                CLKE = One
                If ((Arg0 == One))
                {
                    Local0 = P1HI /* \P1HI */
                    PXHI = P1HI /* \P1HI */
                    PXNM = P1NM /* \P1NM */
                    PXEN = P1EN /* \P1EN */
                    PXIO = P1IO /* \P1IO */
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        Local0 = P2HI /* \P2HI */
                        PXHI = P2HI /* \P2HI */
                        PXNM = P2NM /* \P2NM */
                        PXEN = P2EN /* \P2EN */
                        PXIO = P2IO /* \P2IO */
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            Local0 = P3HI /* \P3HI */
                            PXHI = P3HI /* \P3HI */
                            PXNM = P3NM /* \P3NM */
                            PXEN = P3EN /* \P3EN */
                            PXIO = P3IO /* \P3IO */
                        }
                        Else
                        {
                            If ((Arg0 == 0x04))
                            {
                                Local0 = P4HI /* \P4HI */
                                PXHI = P4HI /* \P4HI */
                                PXNM = P4NM /* \P4NM */
                                PXEN = P4EN /* \P4EN */
                                PXIO = P4IO /* \P4IO */
                            }
                            Else
                            {
                                If ((Arg0 == 0x05))
                                {
                                    Local0 = P5HI /* \P5HI */
                                    PXHI = P5HI /* \P5HI */
                                    PXNM = P5NM /* \P5NM */
                                    PXEN = P5EN /* \P5EN */
                                    PXIO = P5IO /* \P5IO */
                                }
                                Else
                                {
                                    If ((Arg0 == 0x06))
                                    {
                                        Local0 = P6HI /* \P6HI */
                                        PXHI = P6HI /* \P6HI */
                                        PXNM = P6NM /* \P6NM */
                                        PXEN = P6EN /* \P6EN */
                                        PXIO = P6IO /* \P6IO */
                                    }
                                    Else
                                    {
                                        Local0 = 0x03
                                    }
                                }
                            }
                        }
                    }
                }

                CLKE = Zero
                Return (Local0)
            }

            Method (PWMW, 2, NotSerialized)
            {
                CLKE = One
                Local1 = Arg1
                If ((Arg0 == One))
                {
                    P1HI = Local1
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        P2HI = Local1
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            P3HI = Local1
                            P3HH = Local1
                        }
                        Else
                        {
                            If ((Arg0 == 0x04))
                            {
                                P4HI = Local1
                            }
                            Else
                            {
                                If ((Arg0 == 0x05))
                                {
                                    P5HI = Local1
                                }
                                Else
                                {
                                    If ((Arg0 == 0x06))
                                    {
                                        P6HI = Local1
                                    }
                                }
                            }
                        }
                    }
                }

                CLKE = Zero
                Return (Zero)
            }

            Method (FPDV, 1, NotSerialized)
            {
                Local2 = PNMD /* \AOD_.PNMD */
                CLKE = One
                If ((Arg0 == One))
                {
                    P1NM = Local2
                }
                Else
                {
                    If ((Arg0 == 0x02))
                    {
                        P2NM = Local2
                        P2EN = One
                        P2IO = One
                    }
                    Else
                    {
                        If ((Arg0 == 0x03))
                        {
                            P3NM = Local2
                            P3EN = One
                            P3IO = One
                            P3EE = One
                            P3II = One
                        }
                        Else
                        {
                            If ((Arg0 == 0x04))
                            {
                                P4NM = Local2
                                P4EN = One
                                P4IO = One
                            }
                            Else
                            {
                                If ((Arg0 == 0x05))
                                {
                                    P5NM = Local2
                                    P5EN = One
                                    P5IO = One
                                }
                                Else
                                {
                                    If ((Arg0 == 0x06))
                                    {
                                        P6NM = Local2
                                        P6EN = One
                                        P6IO = One
                                    }
                                }
                            }
                        }
                    }
                }

                CLKE = Zero
            }

            Method (RMPV, 4, NotSerialized)
            {
                Local0 = Arg0
                Local1 = Arg1
                While (One)
                {
                    If ((ABS (Local0, Local1) < Arg2))
                    {
                        Break
                    }

                    If ((Local0 > Local1))
                    {
                        Local1 += Arg2
                    }

                    If ((Local0 < Local1))
                    {
                        Local1 -= Arg2
                    }

                    PWMW (Arg3, Local1)
                    Sleep (0x64)
                }

                If ((Local0 != Local1))
                {
                    PWMW (Arg3, Local0)
                }

                Sleep (0x02)
            }

            Name (A283, 0x3C)
            Name (SMBC, One)
            Method (S283, 2, NotSerialized)
            {
                Local0 = (Arg0 << 0x04)
                SMBV = Arg1
                RWSM (SMBC, A283, Local0, SMBV)
                Local0 = ((Arg0 << 0x04) + One)
                SMBV = One
                RWSM (SMBC, A283, Local0, SMBV)
                Local0 = ((Arg0 << 0x04) + 0x02)
                Local2 = (A283 + One)
                RWSM (SMBC, Local2, Local0, SMBV)
                Local1 = (DerefOf (Index (SMBV, Zero)) | One)
                Index (SMBV, Zero) = Local1
                Local0 = (Arg0 << 0x04)
                Local0 += 0x02
                RWSM (SMBC, A283, Local0, SMBV)
                Local0 = 0x40
                Local2 = (A283 + One)
                RWSM (SMBC, Local2, Local0, SMBV)
                Local0 = One
                Local0 <<= Arg0
                Local1 = (DerefOf (Index (SMBV, Zero)) | Local0)
                Index (SMBV, Zero) = Local1
                Local0 = 0x40
                RWSM (SMBC, A283, Local0, SMBV)
            }

            Name (GF01, Zero)
            Name (TSBF, Buffer (0x20)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                ADBG ("AM01", DG01)
                If (!GF01)
                {
                    BM01 ()
                    CINI ()
                    VINI ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM02, 0, NotSerialized)
            {
                ADBG ("AM02", DG01)
                ADBG (OBID, DG01)
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM03, 1, NotSerialized)
            {
                ADBG ("AM03", DG01)
                SOID (Arg0)
                If ((ID01 == One))
                {
                    GETC (ID02)
                }
                Else
                {
                    If ((ID01 == 0x02))
                    {
                        GETV (ID02)
                    }
                    Else
                    {
                        GVB1 = Zero
                        GVB2 = 0x04
                        Local0 = GVBF /* \AOD_.GVBF */
                    }
                }

                ADBG ("GVBF", DG01)
                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (AM04, 2, NotSerialized)
            {
                ADBG ("AM04", DG01)
                SOID (Arg0)
                If ((ID01 == One))
                {
                    Local0 = SETC (ID02, Arg1)
                }
                Else
                {
                    If ((ID01 == 0x02))
                    {
                        SETV (ID02, Arg1)
                        Local0 = Zero
                    }
                    Else
                    {
                        Local0 = 0x04
                    }
                }

                Return (Local0)
            }

            Method (AM05, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                })
                CreateDWordField (INFO, Zero, IFID)
                CreateDWordField (INFO, 0x04, IFMI)
                CreateDWordField (INFO, 0x08, IFMX)
                CreateDWordField (INFO, 0x0C, IFSP)
                CreateField (INFO, 0x80, 0x03, IFST)
                ADBG ("AM05", DG01)
                ADBG (OBIT, DG01)
                SOID (Arg0)
                ADBG ("ID", DG01)
                ADBG (ID01, DG01)
                ADBG (ID02, DG01)
                BM05 (Arg0)
                ADBG ("OBIT", DG01)
                ADBG (OBIT, DG01)
                CPTB (Arg0, INFO)
                EM05 (Arg0)
                ADBG ("info", DG01)
                ADBG (INFO, DG01)
                Return (INFO) /* \AOD_.AM05.INFO */
            }

            Method (AM06, 0, NotSerialized)
            {
                HM06 ()
                Return (Zero)
            }

            Method (AM07, 1, NotSerialized)
            {
                HM07 (Arg0)
                Return (Zero)
            }

            Method (AM08, 1, NotSerialized)
            {
                Name (LODT, Package (0x34)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (Index (OBDT, Local0)) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (Index (OBDT, Local0)) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (Index (OBDT, (Local0 + One)))
                    Local0 += 0x02
                }

                If (Local4) {}
                Else
                {
                    Local1 = DerefOf (Index (OBDT, (Local0 + One)))
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        Index (LODT, Local2) = DerefOf (Index (OBDT, Local0))
                        Local1--
                        Local0++
                        Local2++
                    }
                }

                Return (LODT) /* \AOD_.AM08.LODT */
            }

            Name (OBSV, Package (0x09)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (APTS, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (Index (OBID, Zero))
                    Local1 = One
                    Local2 = Zero
                    While (Local0)
                    {
                        SOID (DerefOf (Index (OBID, Local1)))
                        If ((ID01 == One))
                        {
                            GETC (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        Else
                        {
                            If ((ID01 == 0x02))
                            {
                                GETV (ID02)
                                Local3 = GVB1 /* \AOD_.GVB1 */
                            }
                            Else
                            {
                                Local3 = Zero
                            }
                        }

                        Index (OBSV, Local2) = Local3
                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Method (AWAK, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (Index (OBID, Zero))
                    Local1 = One
                    Local2 = Zero
                    While (Local0)
                    {
                        Local3 = DerefOf (Index (OBSV, Local2))
                        SOID (DerefOf (Index (OBID, Local1)))
                        If ((ID01 == One))
                        {
                            SETC (ID02, Local3)
                        }
                        Else
                        {
                            If ((ID01 == 0x02))
                            {
                                SETV (ID02, Local3)
                            }
                            Else
                            {
                            }
                        }

                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Method (AM09, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM10, 1, NotSerialized)
            {
                ADBG ("AM10", DG04)
                CreateDWordField (Arg0, Zero, ACMD)
                ADBG (ACMD, DG04)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateDWordField (OBUF, Zero, CMDS)
                If ((ACMD == 0x00030001))
                {
                    R301 ()
                }
                Else
                {
                    If ((ACMD == 0x00030002))
                    {
                        R302 (Arg0)
                    }
                    Else
                    {
                        If ((ACMD == 0x00030003))
                        {
                            R303 (Arg0)
                        }
                        Else
                        {
                            If ((ACMD == 0x00030004))
                            {
                                R304 (Arg0)
                            }
                            Else
                            {
                                If ((ACMD == 0x00040001))
                                {
                                    R401 (Arg0)
                                }
                                Else
                                {
                                    If ((ACMD == 0x00040002))
                                    {
                                        R402 (Arg0)
                                    }
                                    Else
                                    {
                                        If ((ACMD == 0x00040003))
                                        {
                                            R403 (Arg0)
                                        }
                                        Else
                                        {
                                            If ((ACMD == 0x00040004))
                                            {
                                                R404 (Arg0)
                                            }
                                            Else
                                            {
                                                If ((ACMD == 0x00050001))
                                                {
                                                    R501 (Arg0)
                                                }
                                                Else
                                                {
                                                    CMDS = 0x00010000
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                ADBG (OBUF, DG04)
                Return (OBUF) /* \AOD_.OBUF */
            }

            Name (CMDL, Buffer (0x54) {})
            Method (AM11, 0, NotSerialized)
            {
                Name (TEMP, Zero)
                CreateDWordField (CMDL, Zero, CMDC)
                TEMP += 0x04
                CreateDWordField (CMDL, TEMP, CMD1)
                TEMP += 0x04
                CMD1 = 0x00030001
                CreateDWordField (CMDL, TEMP, CMD2)
                TEMP += 0x04
                CMD2 = 0x00030002
                CreateDWordField (CMDL, TEMP, CMD3)
                TEMP += 0x04
                CMD3 = 0x00030003
                CreateDWordField (CMDL, TEMP, CMD4)
                TEMP += 0x04
                CMD4 = 0x00030004
                CreateDWordField (CMDL, TEMP, CMD5)
                TEMP += 0x04
                CMD5 = 0x00040001
                CreateDWordField (CMDL, TEMP, CMD6)
                TEMP += 0x04
                CMD6 = 0x00040002
                CreateDWordField (CMDL, TEMP, CMD7)
                TEMP += 0x04
                CMD7 = 0x00040003
                CreateDWordField (CMDL, TEMP, CMD8)
                TEMP += 0x04
                CMD8 = 0x00040004
                CreateDWordField (CMDL, TEMP, CMD9)
                TEMP += 0x04
                CMD9 = 0x00050001
                TEMP -= 0x04
                TEMP /= 0x04
                CMDC = TEMP /* \AOD_.AM11.TEMP */
                Return (CMDL) /* \AOD_.CMDL */
            }

            Name (CMDV, One)
            Name (OBUF, Buffer (0x0400) {})
            Method (R301, 0, NotSerialized)
            {
                Local0 = DerefOf (Index (QLST, Zero))
                CreateDWordField (OBUF, Zero, TMP1)
                CreateWordField (OBUF, 0x04, TMP2)
                TMP2 = Local0
                TMP1 = Zero
                Return (Zero)
            }

            Method (R302, 1, NotSerialized)
            {
                Name (CIDX, Zero)
                CreateWordField (Arg0, 0x04, IIDX)
                CIDX = One
                Local0 = DerefOf (Index (DerefOf (Index (QLST, IIDX)), CIDX))
                CIDX++
                Local1 = 0x20
                CreateField (OBUF, Local1, 0x0100, TMP1)
                TMP1 = Local0
                Local1 += 0x0100
                ADBG ("OBUF", DG04)
                ADBG (OBUF, DG04)
                Local0 = DerefOf (Index (DerefOf (Index (QLST, IIDX)), CIDX))
                CIDX++
                CreateField (OBUF, Local1, 0x08, TMP2)
                TMP2 = Local0
                ADBG ("OBUF", DG04)
                ADBG (OBUF, DG04)
                Local1 += 0x08
                Local2 = Local0
                Local5 = (Local1 / 0x08)
                ADBG ("local5", DG04)
                ADBG (Local5, DG04)
                While ((Local2 > Zero))
                {
                    Local0 = DerefOf (Index (DerefOf (Index (QLST, IIDX)), CIDX))
                    ADBG ("IIDX", DG04)
                    ADBG (IIDX, DG04)
                    ADBG ("CIDX", DG04)
                    ADBG (CIDX, DG04)
                    ADBG ("Local0", DG04)
                    DG04 = Local0
                    Local4 = 0x05
                    Local6 = Zero
                    While ((Local4 > Zero))
                    {
                        If ((Local6 < SizeOf (Local0)))
                        {
                            Index (OBUF, Local5) = DerefOf (Index (Local0, Local6))
                        }
                        Else
                        {
                            Index (OBUF, Local5) = Zero
                        }

                        Local6++
                        Local5++
                        Local4--
                    }

                    Local1 += 0x28
                    Local2--
                    CIDX++
                }

                ADBG ("OBUF", DG04)
                ADBG (OBUF, DG04)
                Local1 = 0x0370
                Local0 = DerefOf (Index (DerefOf (Index (QLST, IIDX)), CIDX))
                CIDX++
                CreateField (OBUF, Local1, 0x10, TMP3)
                TMP3 = Local0
                ADBG ("OBUF", DG04)
                ADBG (OBUF, DG04)
                Local1 += 0x10
                Local6 = DerefOf (Index (DerefOf (Index (QLST, IIDX)), CIDX))
                If ((ObjectType (Local6) == 0x04))
                {
                    Local2 = SizeOf (Local6)
                    Local5 = (Local1 / 0x08)
                    ADBG ("local5", DG04)
                    ADBG (Local5, DG04)
                    Local3 = Zero
                    While ((Local2 > Zero))
                    {
                        Local0 = DerefOf (Index (Local6, Local3))
                        Local4 = SizeOf (Local0)
                        Local7 = Zero
                        While ((Local4 > Zero))
                        {
                            Index (OBUF, Local5) = DerefOf (Index (Local0, Local7))
                            Local7++
                            Local5++
                            Local4--
                        }

                        Local2--
                        Local3++
                    }
                }
                Else
                {
                    Local2 = Local0
                    Local5 = (Local1 / 0x08)
                    ADBG ("local5", DG04)
                    ADBG (Local5, DG04)
                    While ((Local2 > Zero))
                    {
                        Local0 = DerefOf (Index (DerefOf (Index (QLST, IIDX)), CIDX))
                        Local4 = SizeOf (Local0)
                        Local6 = Zero
                        While ((Local4 > Zero))
                        {
                            Index (OBUF, Local5) = DerefOf (Index (Local0, Local6))
                            Local6++
                            Local5++
                            Local4--
                        }

                        (Local1 + 0x80)
                        Local2--
                        CIDX++
                    }
                }

                ADBG ("OBUF", DG04)
                ADBG (OBUF, DG04)
                CreateDWordField (OBUF, Zero, TMP4)
                TMP4 = Zero
                Return (Zero)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, IITM)
                CreateDWordField (OBUF, Zero, TMP1)
                CreateWordField (OBUF, 0x04, TMP2)
                Local0 = DerefOf (Index (DerefOf (Index (QLST, IITM)), Zero))
                Local1 = GCMS (Local0)
                CreateDWordField (Local1, Zero, TMP3)
                CreateWordField (Local1, 0x04, TMP4)
                TMP1 = TMP3 /* \AOD_.R303.TMP3 */
                TMP2 = TMP4 /* \AOD_.R303.TMP4 */
                Return (Zero)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, IITM)
                CreateWordField (Arg0, 0x06, CMSD)
                CreateDWordField (OBUF, Zero, TMP1)
                Local0 = DerefOf (Index (DerefOf (Index (QLST, IITM)), Zero))
                TMP1 = SCMS (Local0, CMSD)
                CRST = Zero
                Return (Zero)
            }

            Name (VEND, Buffer (0x05)
            {
                "ASUS"
            })
            Method (R401, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x0200, TMP2)
                TMP2 = VEND /* \AOD_.VEND */
                Return (Zero)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x08, TMP1)
                CreateField (OBUF, 0x28, 0x08, TMP2)
                TMP1 = GMOD /* \AOD_.GMOD */
                TMP2 = GFXO /* \AOD_.GFXO */
                Return (Zero)
            }

            Name (TCIP, Package (0x04)
            {
                Package (0x0A)
                {
                    Zero, 
                    0x04, 
                    Package (0x04)
                    {
                        One, 
                        Zero, 
                        0x0A, 
                        Buffer (0x0A)
                        {
                            "CPU_VCORE"
                        }
                    }, 

                    Package (0x04)
                    {
                        One, 
                        One, 
                        0x42, 
                        Buffer (0x05)
                        {
                            "+12V"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        0x0A, 
                        Buffer (0x04)
                        {
                            "+5V"
                        }
                    }, 

                    Package (0x04)
                    {
                        One, 
                        0x02, 
                        0x12, 
                        Buffer (0x06)
                        {
                            "+3.3V"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_4_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_5_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_6_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_7_FAKED"
                        }
                    }
                }, 

                Package (0x0A)
                {
                    One, 
                    0x02, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Buffer (0x15)
                        {
                            "ASUS_CPU_TEMPERATURE"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x15)
                        {
                            "ASUS_MB_TERMPERATURE"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0xFF, 
                        Buffer (0x0C)
                        {
                            "ASUS_TMPIN2"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN3"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN4"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN5"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN6"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN7"
                        }
                    }
                }, 

                Package (0x0A)
                {
                    0x02, 
                    0x03, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        0xFF, 
                        Buffer (0x0C)
                        {
                            "ASUS_FANIN0"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x0C)
                        {
                            "ASUS_FANIN1"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0xFF, 
                        Buffer (0x0C)
                        {
                            "ASUS_FANIN2"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN3_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN4_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN5_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN6_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN7_FAKED"
                        }
                    }
                }, 

                Package (0x0A)
                {
                    0x03, 
                    Zero, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL0"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL1"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL2"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL3"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL4"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL5"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL6"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL7"
                        }
                    }
                }
            })
            Method (R403, 1, NotSerialized)
            {
                Name (TINX, Zero)
                CreateByteField (Arg0, 0x04, TCOT)
                CreateByteField (OBUF, 0x04, CNTC)
                Local0 = DerefOf (Index (TCIP, TCOT))
                Local1 = DerefOf (Index (Local0, One))
                CNTC = Local1
                Debug = "CNTC"
                Debug = CNTC /* \AOD_.R403.CNTC */
                Debug = "Local1"
                Debug = Local1
                Local2 = 0x05
                TINX = 0x02
                While (Local1)
                {
                    Debug = "Local2"
                    Debug = Local2
                    Local7 = DerefOf (Index (Local0, TINX))
                    Debug = "Local7"
                    Debug = Local7
                    Index (OBUF, Local2) = DerefOf (Index (Local7, Zero))
                    Local2++
                    Index (OBUF, Local2) = DerefOf (Index (Local7, One))
                    Local2++
                    Index (OBUF, Local2) = DerefOf (Index (Local7, 0x02))
                    Local2++
                    Local4 = DerefOf (Index (Local7, 0x03))
                    Debug = "Local4"
                    Debug = Local4
                    Local3 = SizeOf (Local4)
                    If ((Local3 > 0x20))
                    {
                        Local3 = 0x1F
                    }

                    Local6 = (0x20 - Local3)
                    Debug = "Local3"
                    Debug = Local3
                    Local5 = Zero
                    While (Local3)
                    {
                        Index (OBUF, Local2) = DerefOf (Index (Local4, Local5))
                        Local2++
                        Local5++
                        Local3--
                    }

                    Debug = "Local6"
                    Debug = Local6
                    Debug = "OBUF"
                    Debug = OBUF /* \AOD_.OBUF */
                    Local2 += Local6
                    Local1--
                    TINX++
                }

                Return (Zero)
            }

            Method (R404, 1, NotSerialized)
            {
                CreateDWordField (OBUF, 0x04, VDIO)
                GETV (One)
                VDIO = GVB1 /* \AOD_.GVB1 */
                Return (Zero)
            }

            Method (R501, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MOPV)
                If ((MOPV == One))
                {
                    Local0 = 0x1F
                }

                Local1 = (Local0 * 0x08)
                CreateField (Arg0, 0x20, Local1, MOPD)
                STNV (MOPD, Local1)
            }

            Name (WQBA, Buffer (0x0BBB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  /* FOMB.... */
                /* 0008 */  0xAB, 0x0B, 0x00, 0x00, 0x20, 0x4A, 0x00, 0x00,  /* .... J.. */
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  /* DS...}.T */
                /* 0018 */  0x28, 0x5B, 0xA4, 0x00, 0x01, 0x06, 0x18, 0x42,  /* ([.....B */
                /* 0020 */  0x10, 0x15, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  /* ..."!... */
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  /* ..,...8. */
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  /* ..@H..J. */
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  /* ........ */
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  /* ...`P.S. */
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  /* ..*..... */
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  /* ,....... */
                /* 0058 */  0x02, 0xA4, 0xC3, 0x92, 0xAD, 0x08, 0x1C, 0x21,  /* .......! */
                /* 0060 */  0x06, 0x1C, 0xA5, 0x13, 0x5B, 0xB8, 0x61, 0x83,  /* ....[.a. */
                /* 0068 */  0x17, 0x8A, 0xA2, 0x19, 0x44, 0x49, 0x50, 0xB9,  /* ....DIP. */
                /* 0070 */  0x00, 0xDF, 0x08, 0x02, 0x2F, 0x57, 0x80, 0xE4,  /* ..../W.. */
                /* 0078 */  0x09, 0x48, 0xB3, 0x00, 0xC3, 0x02, 0xAC, 0x0B,  /* .H...... */
                /* 0080 */  0x90, 0x3D, 0x04, 0x2A, 0x75, 0x08, 0x28, 0x39,  /* .=.*u.(9 */
                /* 0088 */  0x43, 0x40, 0x0D, 0xA0, 0xD5, 0x09, 0x08, 0xBF,  /* C@...... */
                /* 0090 */  0xD2, 0x29, 0x21, 0x09, 0xC2, 0x19, 0xAB, 0x78,  /* .)!....x */
                /* 0098 */  0x7C, 0xCD, 0xA2, 0xE9, 0x39, 0xC9, 0x39, 0x86,  /* |...9.9. */
                /* 00A0 */  0x1C, 0x8F, 0x0B, 0x3D, 0x08, 0x1E, 0x47, 0x03,  /* ...=..G. */
                /* 00A8 */  0x08, 0x93, 0x3F, 0x64, 0x05, 0x80, 0x41, 0x49,  /* ..?d..AI */
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  /* ..u1j.H. */
                /* 00B8 */  0x80, 0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A,  /* ..Q....: */
                /* 00C0 */  0xBF, 0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04,  /* .#9..;.. */
                /* 00C8 */  0x46, 0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42,  /* F=.c,lFB */
                /* 00D0 */  0x8D, 0xD1, 0x1C, 0x14, 0x09, 0x37, 0x68, 0xB4,  /* .....7h. */
                /* 00D8 */  0x44, 0x58, 0x8D, 0x2B, 0xF6, 0x99, 0x59, 0xF8,  /* DX.+..Y. */
                /* 00E0 */  0xB0, 0x84, 0x71, 0x04, 0x07, 0x76, 0xB0, 0x16,  /* ..q..v.. */
                /* 00E8 */  0x0D, 0x23, 0xB4, 0x82, 0xE0, 0x34, 0x88, 0xA3,  /* .#...4.. */
                /* 00F0 */  0x88, 0x12, 0x86, 0xE1, 0x19, 0x33, 0xD0, 0x51,  /* .....3.Q */
                /* 00F8 */  0x32, 0xA4, 0x30, 0x41, 0x4F, 0x20, 0xC8, 0xC9,  /* 2.0AO .. */
                /* 0100 */  0x33, 0x2C, 0x43, 0x9C, 0x01, 0xC7, 0x8A, 0x11,  /* 3,C..... */
                /* 0108 */  0x2A, 0x24, 0x66, 0x20, 0xC1, 0xFF, 0xFF, 0x27,  /* *$f ...' */
                /* 0110 */  0xD0, 0x35, 0x86, 0x3C, 0x03, 0x91, 0x7B, 0xC0,  /* .5.<..{. */
                /* 0118 */  0x09, 0x04, 0x89, 0x1E, 0x25, 0xB8, 0x71, 0x8D,  /* ....%.q. */
                /* 0120 */  0xCA, 0xC6, 0x74, 0x36, 0xB8, 0x81, 0x99, 0x20,  /* ..t6...  */
                /* 0128 */  0xCE, 0xE1, 0x61, 0x64, 0x40, 0x68, 0x02, 0xF1,  /* ..ad@h.. */
                /* 0130 */  0x63, 0x87, 0x4F, 0x60, 0xF7, 0xC7, 0x01, 0x29,  /* c.O`...) */
                /* 0138 */  0x44, 0xD0, 0x85, 0xE0, 0x4C, 0x6B, 0x14, 0x60,  /* D...Lk.` */
                /* 0140 */  0xED, 0xEC, 0x20, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  /* .. [.:.. */
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  /* j.E...F1 */
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  /* ^.P!.D=. */
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  /*  ..P.".` */
                /* 0160 */  0x46, 0x60, 0xF6, 0x07, 0x41, 0x24, 0x58, 0x80,  /* F`..A$X. */
                /* 0168 */  0xF8, 0x23, 0xB0, 0x84, 0x13, 0x81, 0x8C, 0x8C,  /* .#...... */
                /* 0170 */  0x86, 0x1E, 0x16, 0x7C, 0x12, 0x60, 0x07, 0x04,  /* ...|.`.. */
                /* 0178 */  0xCF, 0xE7, 0xD4, 0x4C, 0xE0, 0xC0, 0x10, 0xE2,  /* ...L.... */
                /* 0180 */  0x95, 0x00, 0x51, 0x47, 0x0B, 0x4A, 0x60, 0x29,  /* ..QG.J`) */
                /* 0188 */  0x47, 0x03, 0x62, 0x7B, 0x60, 0xBA, 0x07, 0x1C,  /* G.b{`... */
                /* 0190 */  0xE1, 0xB9, 0xFB, 0x72, 0x70, 0x6A, 0xFE, 0x69,  /* ...rpj.i */
                /* 0198 */  0x78, 0x9A, 0x0F, 0x09, 0x98, 0x21, 0x7A, 0xAC,  /* x....!z. */
                /* 01A0 */  0x07, 0x11, 0xF0, 0x10, 0xD9, 0x29, 0xC1, 0x80,  /* .....).. */
                /* 01A8 */  0x78, 0xEF, 0xD7, 0x02, 0x32, 0x82, 0x97, 0x04,  /* x...2... */
                /* 01B0 */  0x03, 0x7A, 0x12, 0x0F, 0x08, 0x60, 0x39, 0x68,  /* .z...`9h */
                /* 01B8 */  0x1C, 0xF8, 0x09, 0x55, 0x7C, 0x07, 0xA0, 0x47,  /* ...U|..G */
                /* 01C0 */  0x02, 0x36, 0xA3, 0xF8, 0x26, 0x28, 0xEB, 0xF8,  /* .6..&(.. */
                /* 01C8 */  0x80, 0x9E, 0x73, 0xB4, 0x67, 0x87, 0x97, 0x85,  /* ..s.g... */
                /* 01D0 */  0x66, 0xAF, 0x18, 0x84, 0xE0, 0x35, 0xC0, 0x37,  /* f....5.7 */
                /* 01D8 */  0x05, 0x9F, 0x46, 0x2C, 0x69, 0x75, 0x72, 0xB2,  /* ..F,iur. */
                /* 01E0 */  0x2A, 0x8F, 0x98, 0x82, 0x7B, 0x08, 0x5C, 0x04,  /* *...{.\. */
                /* 01E8 */  0x9C, 0x86, 0xEE, 0xF1, 0x82, 0x43, 0xC1, 0x78,  /* .....C.x */
                /* 01F0 */  0xE9, 0xFF, 0x7F, 0xBC, 0xE0, 0x3E, 0x0F, 0x1C,  /* .....>.. */
                /* 01F8 */  0x2F, 0x58, 0x4E, 0x09, 0x55, 0x5D, 0x36, 0x34,  /* /XN.U]64 */
                /* 0200 */  0x87, 0xF3, 0x6D, 0x1E, 0x9F, 0x1C, 0x2D, 0x3C,  /* ..m...-< */
                /* 0208 */  0x61, 0x36, 0x96, 0xA3, 0x62, 0xC7, 0x10, 0x36,  /* a6..b..6 */
                /* 0210 */  0x3A, 0x3E, 0x0A, 0x0F, 0xF8, 0xB5, 0xA1, 0x58,  /* :>.....X */
                /* 0218 */  0x10, 0x99, 0x80, 0xD0, 0x91, 0xE1, 0xC0, 0xC1,  /* ........ */
                /* 0220 */  0xE2, 0xEC, 0x00, 0x21, 0x02, 0x0B, 0x1B, 0x39,  /* ...!...9 */
                /* 0228 */  0x7A, 0xC4, 0x1E, 0xD4, 0x3B, 0x8C, 0x31, 0x1E,  /* z...;.1. */
                /* 0230 */  0x08, 0x8C, 0x7A, 0x48, 0x07, 0x0F, 0x3E, 0x40,  /* ..zH..>@ */
                /* 0238 */  0x0F, 0x1E, 0x70, 0xFA, 0xFF, 0x27, 0xB0, 0xA0,  /* ..p..'.. */
                /* 0240 */  0x21, 0x4B, 0xC4, 0xE0, 0xD1, 0xA7, 0x08, 0x0F,  /* !K...... */
                /* 0248 */  0xE7, 0xDD, 0x87, 0x1F, 0x44, 0x12, 0x38, 0x3C,  /* ....D.8< */
                /* 0250 */  0x84, 0x06, 0x0F, 0x9E, 0xB3, 0x8F, 0x07, 0x0F,  /* ........ */
                /* 0258 */  0x7E, 0x79, 0x83, 0x07, 0xD1, 0x14, 0x8E, 0x0D,  /* ~y...... */
                /* 0260 */  0x77, 0xB0, 0xF1, 0xC0, 0xC1, 0x3D, 0x5C, 0xFC,  /* w....=\. */
                /* 0268 */  0x90, 0x70, 0x67, 0x2D, 0x78, 0x3E, 0x27, 0x4F,  /* .pg-x>'O */
                /* 0270 */  0x06, 0xF0, 0x12, 0x84, 0x3B, 0x6C, 0x01, 0x97,  /* ....;l.. */
                /* 0278 */  0x11, 0x70, 0x99, 0xAB, 0xA4, 0x87, 0x2A, 0x0B,  /* .p....*. */
                /* 0280 */  0x83, 0x41, 0x9D, 0xAB, 0xC0, 0xFB, 0xFF, 0x3F,  /* .A.....? */
                /* 0288 */  0x57, 0x01, 0xF6, 0x2F, 0x53, 0xEF, 0x53, 0x3E,  /* W../S.S> */
                /* 0290 */  0x57, 0x81, 0x3B, 0xDA, 0x79, 0x40, 0xE7, 0x16,  /* W.;.y@.. */
                /* 0298 */  0x72, 0x9A, 0x41, 0x1F, 0x0A, 0x7C, 0x06, 0x78,  /* r.A..|.x */
                /* 02A0 */  0x92, 0x01, 0xDB, 0xA1, 0x0A, 0x38, 0x9C, 0x64,  /* .....8.d */
                /* 02A8 */  0xC0, 0x73, 0x2B, 0x7B, 0x92, 0x61, 0xFF, 0xFF,  /* .s+{.a.. */
                /* 02B0 */  0x93, 0x0C, 0x38, 0x0F, 0x62, 0x3E, 0xC9, 0x80,  /* ..8.b>.. */
                /* 02B8 */  0xEF, 0xE8, 0x85, 0x3B, 0x81, 0xC0, 0xF3, 0x38,  /* ...;...8 */
                /* 02C0 */  0x24, 0x21, 0x1F, 0x42, 0xF0, 0x43, 0x3A, 0xA6,  /* $!.B.C:. */
                /* 02C8 */  0x67, 0x10, 0x60, 0x28, 0xE4, 0x65, 0xE0, 0x03,  /* g.`(.e.. */
                /* 02D0 */  0x08, 0x8D, 0x7E, 0x06, 0x01, 0xB4, 0xFF, 0xFF,  /* ..~..... */
                /* 02D8 */  0xCF, 0x20, 0xC0, 0xE5, 0xAC, 0xF0, 0x0C, 0x02,  /* . ...... */
                /* 02E0 */  0x76, 0xF1, 0xAF, 0x3A, 0x9D, 0x07, 0x1C, 0x1C,  /* v..:.... */
                /* 02E8 */  0x42, 0x4E, 0x8E, 0x8A, 0xA8, 0xE1, 0x58, 0xEB,  /* BN....X. */
                /* 02F0 */  0x41, 0x80, 0x8C, 0xE7, 0x45, 0xC0, 0x41, 0x4F,  /* A...E.AO */
                /* 02F8 */  0x8A, 0x40, 0xF7, 0xAC, 0x81, 0x3B, 0x1F, 0xC0,  /* .@...;.. */
                /* 0300 */  0x3D, 0x12, 0xF2, 0x73, 0x07, 0xF8, 0xA2, 0x43,  /* =..s...C */
                /* 0308 */  0xE8, 0x98, 0x89, 0x3F, 0x51, 0x79, 0x88, 0x3E,  /* ...?Qy.> */
                /* 0310 */  0x1B, 0x98, 0xC0, 0xA3, 0x05, 0xD7, 0x39, 0x11,  /* ......9. */
                /* 0318 */  0x5C, 0xFF, 0xFF, 0xD1, 0xC2, 0x3B, 0x69, 0xE0,  /* \....;i. */
                /* 0320 */  0x46, 0x0B, 0xF7, 0x00, 0xFC, 0x58, 0x80, 0x39,  /* F....X.9 */
                /* 0328 */  0x62, 0x82, 0xEB, 0xD0, 0x02, 0xA6, 0xEB, 0x02,  /* b....... */
                /* 0330 */  0xE6, 0xD2, 0x82, 0x3F, 0xB4, 0x00, 0x1F, 0xA1,  /* ...?.... */
                /* 0338 */  0x27, 0x16, 0x94, 0xB4, 0x43, 0x0B, 0xA0, 0xF9,  /* '...C... */
                /* 0340 */  0xFF, 0x7F, 0x68, 0x01, 0x6E, 0x73, 0x7D, 0x68,  /* ..h.ns}h */
                /* 0348 */  0x01, 0x7B, 0xB8, 0x73, 0x18, 0x95, 0x73, 0x0E,  /* .{.s..s. */
                /* 0350 */  0x83, 0x76, 0x68, 0xF6, 0x39, 0x0C, 0xB8, 0x1E,  /* .vh.9... */
                /* 0358 */  0x26, 0xF0, 0x87, 0x4A, 0xB8, 0xB3, 0x88, 0x1F,  /* &..J.... */
                /* 0360 */  0x27, 0xDA, 0x5B, 0x80, 0xCF, 0xA7, 0xC0, 0xED,  /* '.[..... */
                /* 0368 */  0xB0, 0x86, 0x3B, 0x82, 0xC0, 0xBB, 0x14, 0x9C,  /* ..;..... */
                /* 0370 */  0x96, 0xA7, 0xF6, 0xD4, 0x7F, 0x70, 0x8D, 0x5F,  /* .....p._ */
                /* 0378 */  0x41, 0xC8, 0x3D, 0xC6, 0x77, 0x10, 0xF6, 0xFF,  /* A.=.w... */
                /* 0380 */  0x3F, 0x88, 0x01, 0x37, 0x19, 0x07, 0x31, 0x54,  /* ?..7..1T */
                /* 0388 */  0xF0, 0x43, 0x08, 0x40, 0xA1, 0xCB, 0xC2, 0x43,  /* .C.@...C */
                /* 0390 */  0x08, 0xD8, 0xA5, 0x1F, 0xC4, 0x68, 0xEC, 0x83,  /* .....h.. */
                /* 0398 */  0x18, 0xEA, 0xFF, 0x7F, 0x82, 0xC7, 0x9F, 0xC3,  /* ........ */
                /* 03A0 */  0x00, 0xA7, 0x67, 0x38, 0xB8, 0x51, 0x8F, 0x61,  /* ..g8.Q.a */
                /* 03A8 */  0x80, 0xA2, 0xB3, 0x28, 0x70, 0x82, 0x78, 0x0E,  /* ...(p.x. */
                /* 03B0 */  0x63, 0xFF, 0xFF, 0x73, 0x18, 0xF0, 0x14, 0xFC,  /* c..s.... */
                /* 03B8 */  0x12, 0xF0, 0x81, 0x85, 0x4A, 0x84, 0x41, 0x9D,  /* ....J.A. */
                /* 03C0 */  0x59, 0x00, 0xDE, 0x1C, 0x90, 0x9F, 0x59, 0xC0,  /* Y.....Y. */
                /* 03C8 */  0x1E, 0xF2, 0xAD, 0xA1, 0x1F, 0x81, 0xFF, 0xFF,  /* ........ */
                /* 03D0 */  0x67, 0x16, 0xC0, 0xF5, 0x99, 0xDC, 0x63, 0xC5,  /* g.....c. */
                /* 03D8 */  0x1D, 0x22, 0xD8, 0x48, 0x42, 0xBE, 0x0A, 0xBC,  /* .".HB... */
                /* 03E0 */  0x15, 0x98, 0xC0, 0x91, 0x0F, 0x2D, 0x40, 0xF7,  /* .....-@. */
                /* 03E8 */  0x6C, 0x82, 0x1B, 0x2D, 0xDC, 0xE3, 0xC8, 0x39,  /* l..-...9 */
                /* 03F0 */  0x9E, 0xD0, 0xBB, 0xF9, 0xEB, 0x03, 0x3B, 0x4D,  /* ......;M */
                /* 03F8 */  0xB0, 0x21, 0x83, 0x57, 0xDE, 0x21, 0x10, 0xF5,  /* .!.W.!.. */
                /* 0400 */  0xFF, 0x1F, 0xB2, 0x0F, 0x24, 0x9E, 0xC2, 0xCB,  /* ....$... */
                /* 0408 */  0x0C, 0x66, 0x26, 0x31, 0x0E, 0x24, 0xC2, 0xB1,  /* .f&1.$.. */
                /* 0410 */  0x78, 0x78, 0xE4, 0x28, 0x08, 0xAA, 0x33, 0x3F,  /* xx.(..3? */
                /* 0418 */  0x19, 0x35, 0xE8, 0x67, 0xF7, 0x84, 0x0F, 0x9E,  /* .5.g.... */
                /* 0420 */  0xE9, 0xBE, 0xE1, 0x83, 0xE1, 0x30, 0x08, 0x73,  /* .....0.s */
                /* 0428 */  0xCE, 0x1E, 0x3F, 0xF8, 0x8E, 0x3D, 0xB8, 0x73,  /* ..?..=.s */
                /* 0430 */  0x10, 0xBC, 0xEB, 0x8A, 0x91, 0x4F, 0xE8, 0x25,  /* .....O.% */
                /* 0438 */  0x00, 0x73, 0x6B, 0xC1, 0x9E, 0x05, 0x81, 0x93,  /* .sk..... */
                /* 0440 */  0xAC, 0x83, 0x20, 0x4A, 0xC8, 0x59, 0x10, 0x54,  /* .. J.Y.T */
                /* 0448 */  0xFF, 0xFF, 0x83, 0x10, 0xC0, 0x04, 0x6F, 0xF7,  /* ......o. */
                /* 0450 */  0x20, 0x5D, 0x83, 0x7C, 0x1B, 0x78, 0x1A, 0x78,  /*  ].|.x.x */
                /* 0458 */  0xF8, 0x89, 0xF2, 0x20, 0xE4, 0x8B, 0xC4, 0x0B,  /* ... .... */
                /* 0460 */  0x41, 0x84, 0x28, 0xC7, 0x7B, 0x02, 0x11, 0x9E,  /* A.(.{... */
                /* 0468 */  0x86, 0x3C, 0xE1, 0x30, 0xE1, 0x4E, 0x36, 0xCA,  /* .<.0.N6. */
                /* 0470 */  0x4B, 0x43, 0x18, 0x43, 0xC7, 0x0A, 0x14, 0x39,  /* KC.C...9 */
                /* 0478 */  0x7E, 0x08, 0x1F, 0x85, 0x7C, 0x10, 0x62, 0x51,  /* ~...|.bQ */
                /* 0480 */  0xCE, 0xB7, 0xF4, 0xFC, 0x61, 0x23, 0x67, 0x11,  /* ....a#g. */
                /* 0488 */  0xD4, 0x49, 0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09,  /* .I...... */
                /* 0490 */  0x01, 0x13, 0x1A, 0x42, 0x47, 0x5C, 0xE0, 0x7A,  /* ...BG\.z */
                /* 0498 */  0xDA, 0xC0, 0xFD, 0xFF, 0x8F, 0x42, 0xE0, 0x38,  /* .....B.8 */
                /* 04A0 */  0x80, 0xC0, 0x7B, 0x47, 0xF8, 0xB4, 0x0E, 0x2E,  /* ..{G.... */
                /* 04A8 */  0x08, 0x9F, 0x3F, 0xE0, 0xFB, 0x44, 0x16, 0xEE,  /* ..?..D.. */
                /* 04B0 */  0x5B, 0xC0, 0x0B, 0x0D, 0xEE, 0xEC, 0x01, 0x7C,  /* [......| */
                /* 04B8 */  0xE4, 0x1E, 0x6B, 0x51, 0x02, 0x61, 0x50, 0x67,  /* ..kQ.aPg */
                /* 04C0 */  0x0F, 0xC0, 0xF9, 0xFF, 0xFF, 0xEC, 0x01, 0xD6,  /* ........ */
                /* 04C8 */  0x81, 0x3E, 0x7A, 0x1C, 0xE8, 0x31, 0x06, 0x89,  /* .>z..1.. */
                /* 04D0 */  0x11, 0xC4, 0x77, 0x0E, 0x1F, 0x7C, 0xE2, 0xBC,  /* ..w..|.. */
                /* 04D8 */  0x11, 0x3C, 0x7B, 0xF8, 0xC8, 0x71, 0x5C, 0x3E,  /* .<{..q\> */
                /* 04E0 */  0x80, 0xF8, 0xEC, 0xE1, 0x2B, 0x88, 0xF1, 0xC2,  /* ....+... */
                /* 04E8 */  0xC4, 0x7C, 0x38, 0xF2, 0x35, 0x21, 0x5E, 0xE4,  /* .|8.5!^. */
                /* 04F0 */  0xB0, 0x61, 0x22, 0xFB, 0xEC, 0xC1, 0x22, 0x1E,  /* .a"...". */
                /* 04F8 */  0x6B, 0xA9, 0x94, 0x83, 0x19, 0xFA, 0x4C, 0xE0,  /* k.....L. */
                /* 0500 */  0x5B, 0xC2, 0x99, 0xBD, 0x71, 0x44, 0x38, 0xAE,  /* [...qD8. */
                /* 0508 */  0x93, 0x3B, 0x9F, 0x38, 0x1E, 0xD2, 0x49, 0xFB,  /* .;.8..I. */
                /* 0510 */  0x6C, 0x06, 0xBE, 0xE3, 0x07, 0x70, 0x38, 0x9B,  /* l....p8. */
                /* 0518 */  0x81, 0x67, 0x74, 0x70, 0x0F, 0x53, 0xE0, 0x93,  /* .gtp.S.. */
                /* 0520 */  0x75, 0x36, 0x43, 0x0F, 0xCB, 0xE7, 0x82, 0x57,  /* u6C....W */
                /* 0528 */  0x07, 0x0F, 0x82, 0x9D, 0xCB, 0xC0, 0x75, 0xB8,  /* ......u. */
                /* 0530 */  0x83, 0xF3, 0xFF, 0x3F, 0x97, 0x01, 0xAF, 0x73,  /* ...?...s */
                /* 0538 */  0xC7, 0x91, 0xB1, 0x53, 0x05, 0x47, 0x3C, 0xA8,  /* ...S.G<. */
                /* 0540 */  0x33, 0x79, 0x77, 0x39, 0x6B, 0x1F, 0x3C, 0x02,  /* 3yw9k.<. */
                /* 0548 */  0x9D, 0xE7, 0x29, 0xFB, 0x1C, 0x03, 0x73, 0x84,  /* ..)...s. */
                /* 0550 */  0x1E, 0x3B, 0xF8, 0x0E, 0x26, 0xF8, 0x83, 0x0C,  /* .;..&... */
                /* 0558 */  0x1C, 0x98, 0x13, 0x38, 0xBA, 0x40, 0xA7, 0x10,  /* ...8.@.. */
                /* 0560 */  0xE7, 0x14, 0x9E, 0x63, 0x80, 0x91, 0x1C, 0x4B,  /* ...c...K */
                /* 0568 */  0x20, 0x2C, 0xC0, 0xB1, 0x40, 0xA2, 0x96, 0x49,  /*  ,..@..I */
                /* 0570 */  0x61, 0x7C, 0x32, 0xF0, 0x39, 0x06, 0xAE, 0x24,  /* a|2.9..$ */
                /* 0578 */  0x38, 0xD4, 0xF8, 0x3C, 0xB2, 0x97, 0xBC, 0xE3,  /* 8..<.... */
                /* 0580 */  0x3C, 0x91, 0x37, 0x04, 0x8F, 0xFF, 0x81, 0x06,  /* <.7..... */
                /* 0588 */  0xC6, 0xC0, 0x3D, 0xAD, 0x93, 0xF2, 0x4D, 0xEE,  /* ..=...M. */
                /* 0590 */  0xB1, 0xC4, 0x67, 0x43, 0x7E, 0x5C, 0x60, 0x68,  /* ..gC~\`h */
                /* 0598 */  0xFC, 0x74, 0x03, 0x86, 0xFF, 0xFF, 0xE9, 0x06,  /* .t...... */
                /* 05A0 */  0xCE, 0x9D, 0xC1, 0x47, 0x0D, 0xB0, 0x5C, 0x6D,  /* ...G..\m */
                /* 05A8 */  0x30, 0x58, 0xA1, 0x62, 0x34, 0x7A, 0xD7, 0x23,  /* 0X.b4z.# */
                /* 05B0 */  0xA0, 0xC7, 0xD7, 0xD7, 0x45, 0x9A, 0x42, 0x45,  /* ....E.BE */
                /* 05B8 */  0x0C, 0xF1, 0x42, 0x60, 0x97, 0xC7, 0x71, 0xE4,  /* ..B`..q. */
                /* 05C0 */  0x59, 0x17, 0x5C, 0xD8, 0xCF, 0xBA, 0x60, 0x0F,  /* Y.\...`. */
                /* 05C8 */  0x75, 0x4E, 0xA2, 0x91, 0x46, 0x83, 0x3A, 0xC8,  /* uN..F.:. */
                /* 05D0 */  0xF0, 0x03, 0xC1, 0x63, 0x90, 0x4F, 0x1E, 0x06,  /* ...c.O.. */
                /* 05D8 */  0x39, 0xD1, 0xD3, 0x7A, 0x5C, 0x78, 0x1A, 0xF0,  /* 9..z\x.. */
                /* 05E0 */  0xB8, 0xD9, 0x35, 0xC1, 0x1F, 0x04, 0x1F, 0x0F,  /* ..5..... */
                /* 05E8 */  0xF0, 0x97, 0xA0, 0x80, 0x27, 0xFA, 0xF0, 0x01,  /* ....'... */
                /* 05F0 */  0xEB, 0x10, 0x82, 0x3F, 0x61, 0xC0, 0x1F, 0x8F,  /* ...?a... */
                /* 05F8 */  0x8F, 0x01, 0x3E, 0xD1, 0xFA, 0x48, 0x45, 0x06,  /* ..>..HE. */
                /* 0600 */  0x81, 0x3A, 0xBC, 0xF1, 0x91, 0x9E, 0xD6, 0xDB,  /* .:...... */
                /* 0608 */  0x80, 0x0F, 0x09, 0x87, 0xC5, 0x0E, 0x1E, 0x3E,  /* .......> */
                /* 0610 */  0xA3, 0x80, 0x63, 0x3C, 0xF0, 0x6F, 0x9F, 0x4F,  /* ..c<.o.O */
                /* 0618 */  0x07, 0xFF, 0xFF, 0x08, 0xAF, 0x0C, 0x9E, 0xAF,  /* ........ */
                /* 0620 */  0x0F, 0x66, 0x60, 0xB9, 0x75, 0xF8, 0xD0, 0x10,  /* .f`.u... */
                /* 0628 */  0xEA, 0xA9, 0xC3, 0x33, 0x78, 0xBF, 0xF0, 0x09,  /* ...3x... */
                /* 0630 */  0x04, 0x98, 0x04, 0x36, 0x34, 0x48, 0x26, 0x73,  /* ...64H&s */
                /* 0638 */  0x9D, 0xB2, 0x71, 0xDA, 0xA1, 0xC3, 0xB4, 0xC8,  /* ..q..... */
                /* 0640 */  0x03, 0x82, 0x8E, 0x06, 0x3E, 0xD2, 0xF8, 0x80,  /* ....>... */
                /* 0648 */  0xCB, 0x0F, 0x49, 0x86, 0xB0, 0x30, 0x0A, 0x9D,  /* ..I..0.. */
                /* 0650 */  0x7C, 0x3C, 0x1A, 0x0F, 0x8F, 0xC0, 0x51, 0x10,  /* |<....Q. */
                /* 0658 */  0x8F, 0xDC, 0x21, 0x21, 0x64, 0xE4, 0x10, 0x80,  /* ..!!d... */
                /* 0660 */  0x3E, 0x2C, 0x30, 0x88, 0x87, 0x2E, 0x13, 0xF8,  /* >,0..... */
                /* 0668 */  0xD8, 0xE0, 0xF3, 0x1A, 0x9C, 0xE3, 0x91, 0x27,  /* .......' */
                /* 0670 */  0xE3, 0x69, 0x78, 0xDC, 0xB8, 0x53, 0x07, 0xDC,  /* .ix..S.. */
                /* 0678 */  0x71, 0xE0, 0x0F, 0x3A, 0xF8, 0x53, 0x20, 0x3F,  /* q..:.S ? */
                /* 0680 */  0x27, 0x91, 0xF3, 0x1F, 0xA8, 0x04, 0x9E, 0x0B,  /* '....... */
                /* 0688 */  0x40, 0x01, 0xE4, 0xAB, 0x80, 0x95, 0x1E, 0x07,  /* @....... */
                /* 0690 */  0xE8, 0x14, 0x42, 0x84, 0x89, 0x66, 0x78, 0x4C,  /* ..B..fxL */
                /* 0698 */  0xF0, 0xD3, 0x17, 0x1D, 0x8F, 0x87, 0xE5, 0xFF,  /* ........ */
                /* 06A0 */  0xFF, 0x20, 0xF9, 0xF1, 0x85, 0x61, 0x3F, 0x9D,  /* . ...a?. */
                /* 06A8 */  0xF8, 0xD4, 0x76, 0x8C, 0xEF, 0x05, 0x8F, 0x5F,  /* ..v...._ */
                /* 06B0 */  0x18, 0x58, 0x0F, 0x9B, 0xC3, 0x1A, 0x2D, 0xEC,  /* .X....-. */
                /* 06B8 */  0xD1, 0x3E, 0x3E, 0xF8, 0xEA, 0xE1, 0x89, 0xF9,  /* .>>..... */
                /* 06C0 */  0x16, 0xE7, 0x43, 0x07, 0x58, 0x0E, 0x52, 0xC0,  /* ..C.X.R. */
                /* 06C8 */  0xE3, 0xFC, 0xC3, 0xE6, 0xF0, 0x02, 0xF1, 0x1C,  /* ........ */
                /* 06D0 */  0xE6, 0x83, 0x07, 0x3B, 0xF1, 0xB1, 0x53, 0x1F,  /* ...;..S. */
                /* 06D8 */  0xD7, 0x75, 0x8E, 0x43, 0x9C, 0x21, 0xF8, 0x20,  /* .u.C.!.  */
                /* 06E0 */  0x1C, 0x67, 0x91, 0xF2, 0x38, 0x53, 0x72, 0x95,  /* .g..8Sr. */
                /* 06E8 */  0x7C, 0xE0, 0xA8, 0x1A, 0x45, 0xF0, 0xBE, 0x15,  /* |...E... */
                /* 06F0 */  0xB0, 0x08, 0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49,  /* .....x.I */
                /* 06F8 */  0x3F, 0x46, 0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x1F,  /* ?F...Q.. */
                /* 0700 */  0x23, 0x7C, 0x90, 0xB0, 0x8D, 0x63, 0x04, 0x6A,  /* #|...c.j */
                /* 0708 */  0x8C, 0x3E, 0x0C, 0xF2, 0xA3, 0x00, 0x3F, 0x45,  /* .>....?E */
                /* 0710 */  0xC0, 0x3F, 0xF1, 0xE0, 0xC6, 0x0A, 0x77, 0x70,  /* .?....wp */
                /* 0718 */  0x6C, 0x85, 0x2F, 0x3D, 0x87, 0x76, 0x76, 0x0F,  /* l./=.vv. */
                /* 0720 */  0x09, 0x51, 0xDE, 0x5F, 0x8D, 0x18, 0x21, 0x60,  /* .Q._..!` */
                /* 0728 */  0xD8, 0x68, 0x1E, 0x23, 0xEE, 0xD8, 0xCE, 0x2E,  /* .h.#.... */
                /* 0730 */  0x45, 0x9E, 0x53, 0xAC, 0x47, 0x25, 0x7E, 0xA4,  /* E.S.G%~. */
                /* 0738 */  0x80, 0xF7, 0xFF, 0x27, 0xF0, 0x31, 0x0F, 0x77,  /* ...'.1.w */
                /* 0740 */  0xA4, 0x80, 0x33, 0x93, 0xF3, 0xC0, 0xA8, 0x1B,  /* ..3..... */
                /* 0748 */  0x8B, 0xE0, 0x8D, 0xF6, 0x92, 0x8D, 0x3D, 0x58,  /* ......=X */
                /* 0750 */  0x00, 0x8F, 0x13, 0xA3, 0x0F, 0x16, 0xE0, 0x3A,  /* .......: */
                /* 0758 */  0x13, 0xF8, 0x60, 0x01, 0x5C, 0xCF, 0x07, 0x3E,  /* ..`.\..> */
                /* 0760 */  0x1D, 0x80, 0xF5, 0xF2, 0xC3, 0xEF, 0x07, 0x30,  /* .......0 */
                /* 0768 */  0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98, 0x1B, 0x86,  /* N.0..... */
                /* 0770 */  0xC3, 0x2C, 0x59, 0x27, 0x0C, 0x7E, 0x5C, 0x73,  /* .,Y'.~\s */
                /* 0778 */  0xA4, 0xD5, 0x6A, 0x20, 0xEC, 0x12, 0x86, 0x23,  /* ..j ...# */
                /* 0780 */  0x18, 0x04, 0x4C, 0x27, 0x0B, 0x8F, 0xDA, 0x11,  /* ..L'.... */
                /* 0788 */  0x28, 0x24, 0xED, 0x80, 0x81, 0x12, 0x73, 0xC0,  /* ($....s. */
                /* 0790 */  0xA0, 0x20, 0x06, 0x74, 0x52, 0x08, 0x9D, 0x45,  /* . .tR..E */
                /* 0798 */  0xFD, 0xFF, 0x3F, 0x60, 0xF0, 0x83, 0x9D, 0x4F,  /* ..?`...O */
                /* 07A0 */  0x0D, 0xEC, 0x72, 0xEB, 0xEB, 0x85, 0xE7, 0xE9,  /* ..r..... */
                /* 07A8 */  0x29, 0x73, 0x3C, 0x1F, 0x43, 0x0C, 0xEB, 0x8B,  /* )s<.C... */
                /* 07B0 */  0x09, 0x78, 0x6E, 0x14, 0xEC, 0x34, 0x8B, 0xB9,  /* .xn..4.. */
                /* 07B8 */  0xB8, 0xB1, 0xB3, 0x1D, 0x3B, 0x15, 0x18, 0xE5,  /* ....;... */
                /* 07C0 */  0x70, 0xDF, 0xC0, 0xAC, 0xE6, 0xAA, 0x80, 0x9A,  /* p....... */
                /* 07C8 */  0x11, 0x86, 0xC0, 0xE3, 0xF5, 0x81, 0x11, 0x4C,  /* .......L */
                /* 07D0 */  0xFA, 0x2E, 0x14, 0x20, 0x47, 0xE7, 0x32, 0x47,  /* ... G.2G */
                /* 07D8 */  0x8F, 0x3A, 0x47, 0xF9, 0x24, 0xC5, 0x47, 0xEF,  /* .:G.$.G. */
                /* 07E0 */  0xA3, 0xB9, 0x4F, 0x2B, 0x70, 0xCF, 0x52, 0x3E,  /* ..O+p.R> */
                /* 07E8 */  0x42, 0x01, 0xDF, 0x81, 0xF9, 0x52, 0x80, 0x3B,  /* B....R.; */
                /* 07F0 */  0xA0, 0x80, 0xE1, 0xFA, 0x80, 0xFD, 0xFF, 0xC3,  /* ........ */
                /* 07F8 */  0xBC, 0xA2, 0xE0, 0xCF, 0x28, 0xC0, 0x24, 0xF0,  /* ....(.$. */
                /* 0800 */  0x59, 0x0A, 0x74, 0x90, 0x3E, 0xA3, 0x00, 0xD7,  /* Y.t.>... */
                /* 0808 */  0xA1, 0xE2, 0xCE, 0x28, 0xE0, 0x38, 0x10, 0x1E,  /* ...(.8.. */
                /* 0810 */  0x3D, 0x3F, 0x47, 0xB1, 0x38, 0xC7, 0x12, 0x74,  /* =?G.8..t */
                /* 0818 */  0xA8, 0x97, 0x83, 0x6E, 0x9B, 0xEC, 0x58, 0x82,  /* ...n..X. */
                /* 0820 */  0x8D, 0x72, 0x2C, 0x41, 0x85, 0xA0, 0xD0, 0x09,  /* .r,A.... */
                /* 0828 */  0xCA, 0x27, 0x09, 0x7E, 0xC6, 0xE3, 0x20, 0x06,  /* .'.~.. . */
                /* 0830 */  0x74, 0xF6, 0x93, 0x04, 0x5A, 0xC5, 0x49, 0x02,  /* t...Z.I. */
                /* 0838 */  0x19, 0xF6, 0x5C, 0x02, 0x84, 0xFE, 0xFF, 0xE7,  /* ..\..... */
                /* 0840 */  0x12, 0xF0, 0x9E, 0x13, 0x9F, 0x26, 0xC0, 0x35,  /* .....&.5 */
                /* 0848 */  0x6B, 0xFC, 0x69, 0x02, 0x7F, 0x3E, 0x01, 0x16,  /* k.i..>.. */
                /* 0850 */  0x47, 0x46, 0xC0, 0xD9, 0x41, 0x90, 0x1F, 0x19,  /* GF..A... */
                /* 0858 */  0x81, 0xEF, 0xB9, 0x84, 0xFF, 0xFF, 0xCF, 0x25,  /* .......% */
                /* 0860 */  0xE0, 0x19, 0xB6, 0xCF, 0x25, 0x80, 0x93, 0x9B,  /* ....%... */
                /* 0868 */  0x34, 0x3F, 0x97, 0xC0, 0x1D, 0xBA, 0xE3, 0x9C,  /* 4?...... */
                /* 0870 */  0xBE, 0x10, 0x57, 0x58, 0xDF, 0x33, 0xE2, 0x27,  /* ..WX.3.' */
                /* 0878 */  0x18, 0xE3, 0x58, 0x82, 0x0A, 0x70, 0xF8, 0x02,  /* ..X..p.. */
                /* 0880 */  0xB4, 0xFF, 0xFF, 0x4F, 0x23, 0xE0, 0x3F, 0x17,  /* ...O#.?. */
                /* 0888 */  0x7B, 0xF4, 0xFC, 0x40, 0xE2, 0x43, 0x06, 0x19,  /* {..@.C.. */
                /* 0890 */  0x3D, 0x8D, 0x7C, 0xF8, 0x82, 0x1E, 0xF1, 0x30,  /* =.|....0 */
                /* 0898 */  0x02, 0xB4, 0x07, 0xFA, 0xF0, 0x05, 0xC6, 0xDB,  /* ........ */
                /* 08A0 */  0x03, 0x3F, 0x6E, 0x02, 0xAF, 0xD8, 0x87, 0x12,  /* .?n..... */
                /* 08A8 */  0xD0, 0xC1, 0xF2, 0x43, 0x09, 0xF8, 0xFF, 0xFF,  /* ...C.... */
                /* 08B0 */  0x87, 0x12, 0xF0, 0x8C, 0x1E, 0x77, 0xF6, 0x02,  /* .....w.. */
                /* 08B8 */  0xC7, 0x55, 0xC2, 0x83, 0x37, 0xE0, 0x31, 0x3D,  /* .U..7.1= */
                /* 08C0 */  0x16, 0x18, 0x90, 0x9D, 0x4B, 0x98, 0xEC, 0x73,  /* ....K..s */
                /* 08C8 */  0x09, 0xFA, 0x3C, 0x62, 0xAB, 0xB7, 0x63, 0x72,  /* ..<b..cr */
                /* 08D0 */  0x52, 0xC7, 0x08, 0x3F, 0x97, 0xA0, 0x24, 0x9F,  /* R..?..$. */
                /* 08D8 */  0x4B, 0x00, 0xDA, 0x1C, 0xBA, 0xC0, 0xF1, 0xFF,  /* K....... */
                /* 08E0 */  0x3F, 0x74, 0x01, 0x3C, 0xB8, 0x06, 0xFA, 0x40,  /* ?t.<...@ */
                /* 08E8 */  0x02, 0xAE, 0x7B, 0x82, 0x0F, 0x24, 0xC0, 0xF5,  /* ..{..$.. */
                /* 08F0 */  0x28, 0x00, 0x9E, 0x23, 0x08, 0xFE, 0xC8, 0xEC,  /* (..#.... */
                /* 08F8 */  0x03, 0x3F, 0xEE, 0xA4, 0xEF, 0x53, 0x75, 0x5C,  /* .?...Su\ */
                /* 0900 */  0xE3, 0x1F, 0xF1, 0x11, 0xFC, 0xFF, 0x1B, 0x3F,  /* .......? */
                /* 0908 */  0x7D, 0x91, 0x7B, 0x81, 0x8F, 0x25, 0x3A, 0xF0,  /* }.{..%:. */
                /* 0910 */  0xA3, 0x04, 0x53, 0x48, 0xEE, 0x01, 0x02, 0x25,  /* ..SH...% */
                /* 0918 */  0x10, 0x8E, 0x82, 0xF8, 0x00, 0xE1, 0xF0, 0xE7,  /* ........ */
                /* 0920 */  0x24, 0xE8, 0x57, 0x4B, 0x7E, 0x7E, 0xC0, 0x5F,  /* $.WK~~._ */
                /* 0928 */  0x47, 0xD8, 0x28, 0xD9, 0x71, 0x1E, 0x37, 0x4A,  /* G.(.q.7J */
                /* 0930 */  0xB8, 0x60, 0xAF, 0x0F, 0x86, 0xB8, 0xC3, 0x13,  /* .`...... */
                /* 0938 */  0xE1, 0x67, 0x5B, 0xCC, 0x31, 0x1F, 0xEE, 0x51,  /* .g[.1..Q */
                /* 0940 */  0xE1, 0x51, 0x09, 0x5C, 0xB3, 0x86, 0x75, 0x58,  /* .Q.\..uX */
                /* 0948 */  0x02, 0x3C, 0x78, 0x38, 0x4C, 0x00, 0xAD, 0xFF,  /* .<x8L... */
                /* 0950 */  0xFF, 0x61, 0x09, 0xFC, 0xB3, 0xE7, 0x83, 0x38,  /* .a.....8 */
                /* 0958 */  0x11, 0x0F, 0x1F, 0x03, 0x74, 0x2C, 0x6F, 0x07,  /* ....t,o. */
                /* 0960 */  0xEC, 0xD8, 0xAB, 0xC3, 0x12, 0x6A, 0x0C, 0x3E,  /* .....j.> */
                /* 0968 */  0xFA, 0xFA, 0xE8, 0xC4, 0x20, 0x1F, 0x0F, 0x31,  /* .... ..1 */
                /* 0970 */  0xC7, 0x16, 0x76, 0xC2, 0x07, 0xF8, 0xF6, 0xFF,  /* ..v..... */
                /* 0978 */  0x3F, 0xE1, 0x03, 0xD6, 0xCE, 0x24, 0xBE, 0x3F,  /* ?....$.? */
                /* 0980 */  0x60, 0xAF, 0x2D, 0xF8, 0xA3, 0x09, 0xF0, 0x06,  /* `.-..... */
                /* 0988 */  0xF7, 0xD1, 0x04, 0x70, 0xF5, 0xFF, 0x3F, 0x9A,  /* ...p..?. */
                /* 0990 */  0xE0, 0x84, 0x9E, 0x9D, 0x50, 0x67, 0x03, 0x1F,  /* ....Pg.. */
                /* 0998 */  0x98, 0x6C, 0x14, 0x95, 0x40, 0xBF, 0x69, 0xBC,  /* .l..@.i. */
                /* 09A0 */  0x9F, 0x07, 0x31, 0xF4, 0x49, 0xF0, 0x53, 0x13,  /* ..1.I.S. */
                /* 09A8 */  0x06, 0xC2, 0x47, 0x13, 0x9F, 0x24, 0x7C, 0x9C,  /* ..G..$|. */
                /* 09B0 */  0xE0, 0x52, 0xE0, 0x28, 0x88, 0x8F, 0x13, 0x8E,  /* .R.(.... */
                /* 09B8 */  0x79, 0x36, 0x41, 0x9F, 0x0A, 0x7C, 0x3F, 0x38,  /* y6A..|?8 */
                /* 09C0 */  0x09, 0x6C, 0xA8, 0xF3, 0x04, 0x50, 0x19, 0x07,  /* .l...P.. */
                /* 09C8 */  0xFE, 0xE8, 0x04, 0x57, 0xD8, 0xC9, 0x04, 0x64,  /* ...W...d */
                /* 09D0 */  0x27, 0x72, 0x60, 0x6E, 0xE2, 0x1C, 0x01, 0x94,  /* 'r`n.... */
                /* 09D8 */  0xFE, 0xFF, 0x27, 0x72, 0xE0, 0x70, 0x5A, 0xE5,  /* ..'r.pZ. */
                /* 09E0 */  0xA7, 0x01, 0x7C, 0xA0, 0xA3, 0x2A, 0x3A, 0xD6,  /* ..|..*:. */
                /* 09E8 */  0x93, 0x41, 0x23, 0x7E, 0x07, 0x08, 0x77, 0xEA,  /* .A#~..w. */
                /* 09F0 */  0xE7, 0xF9, 0x40, 0xC0, 0x8E, 0xE5, 0x3E, 0x2C,  /* ..@...>, */
                /* 09F8 */  0xF1, 0xF3, 0x92, 0x4F, 0x11, 0x3E, 0x41, 0x70,  /* ...O.>Ap */
                /* 0A00 */  0x49, 0x27, 0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3D,  /* I'..b@.= */
                /* 0A08 */  0x5D, 0x7A, 0x10, 0xF4, 0x7C, 0xC3, 0x8F, 0xC5,  /* ]z..|... */
                /* 0A10 */  0xBE, 0xB6, 0x1C, 0xC5, 0x23, 0x51, 0x82, 0xF9,  /* ....#Q.. */
                /* 0A18 */  0x0E, 0x01, 0xF4, 0xB6, 0x04, 0x4F, 0xDE, 0x6D,  /* .....O.m */
                /* 0A20 */  0x09, 0x44, 0x18, 0x77, 0x72, 0x16, 0x0C, 0xE1,  /* .D.wr... */
                /* 0A28 */  0x28, 0x7D, 0x80, 0x80, 0x31, 0xC0, 0xC7, 0x84,  /* (}..1... */
                /* 0A30 */  0x62, 0xDF, 0x37, 0xF4, 0xBE, 0x04, 0xF3, 0x8A,  /* b.7..... */
                /* 0A38 */  0x09, 0xAE, 0xF3, 0x12, 0x30, 0x9E, 0x89, 0xFF,  /* ....0... */
                /* 0A40 */  0xFF, 0x3E, 0xCF, 0x21, 0xE4, 0x02, 0xC0, 0x4F,  /* .>.!...O */
                /* 0A48 */  0xE5, 0x60, 0x39, 0x36, 0x80, 0x67, 0x1C, 0xEC,  /* .`96.g.. */
                /* 0A50 */  0x0A, 0x80, 0x3F, 0x32, 0xC1, 0x3E, 0x35, 0xE2,  /* ..?2.>5. */
                /* 0A58 */  0x8E, 0x4C, 0x60, 0x98, 0x08, 0x3B, 0xE7, 0x1C,  /* .L`..;.. */
                /* 0A60 */  0x08, 0xF6, 0x60, 0x02, 0xBC, 0x55, 0x1C, 0x4C,  /* ..`..U.L */
                /* 0A68 */  0x00, 0x2D, 0xC3, 0x0D, 0x72, 0x3E, 0x8F, 0xE4,  /* .-..r>.. */
                /* 0A70 */  0xC6, 0x79, 0xC3, 0xF3, 0x89, 0x84, 0x9D, 0xC4,  /* .y...... */
                /* 0A78 */  0xD9, 0xFF, 0xFF, 0x60, 0xC2, 0x25, 0x41, 0x48,  /* ...`.%AH */
                /* 0A80 */  0xFE, 0x61, 0x09, 0x89, 0x8D, 0x9D, 0xFE, 0x39,  /* .a.....9 */
                /* 0A88 */  0xBC, 0xB9, 0x32, 0x82, 0x62, 0x8F, 0x4B, 0xA8,  /* ..2.b.K. */
                /* 0A90 */  0xC3, 0x84, 0x45, 0x9E, 0x26, 0x50, 0xA7, 0x69,  /* ..E.&P.i */
                /* 0A98 */  0x9F, 0x90, 0xC9, 0x69, 0x82, 0x46, 0x3E, 0x4D,  /* ...i.F>M */
                /* 0AA0 */  0xA0, 0x87, 0xE6, 0x89, 0x9D, 0x06, 0x6E, 0xDC,  /* ......n. */
                /* 0AA8 */  0xA7, 0xC1, 0x6F, 0x87, 0xFC, 0xC0, 0x04, 0x7C,  /* ..o....| */
                /* 0AB0 */  0x0F, 0x0F, 0xF8, 0xD3, 0x04, 0xEC, 0xF3, 0x0D,  /* ........ */
                /* 0AB8 */  0x1B, 0x74, 0xC8, 0x77, 0x87, 0x17, 0x59, 0x1F,  /* .t.w..Y. */
                /* 0AC0 */  0x26, 0x80, 0xF9, 0xC8, 0x7D, 0x98, 0x00, 0xFF,  /* &...}... */
                /* 0AC8 */  0xFF, 0xFF, 0xD0, 0x04, 0x5C, 0x15, 0xDA, 0xF4,  /* ....\... */
                /* 0AD0 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  /* ...U.25. */
                /* 0AD8 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0xA4,  /* 4...Rc.. */
                /* 0AE0 */  0x9D, 0x54, 0xBD, 0x54, 0x8D, 0xD5, 0x91, 0x9E,  /* .T.T.... */
                /* 0AE8 */  0x0B, 0x02, 0x71, 0xD4, 0x05, 0x0B, 0xC4, 0xD1,  /* ..q..... */
                /* 0AF0 */  0x9F, 0x40, 0x02, 0xB1, 0xB8, 0x57, 0x88, 0x40,  /* .@...W.@ */
                /* 0AF8 */  0x2C, 0xF5, 0x05, 0x21, 0x10, 0xCB, 0xD4, 0x01,  /* ,..!.... */
                /* 0B00 */  0xC2, 0x82, 0xBC, 0xEF, 0x05, 0xE2, 0x60, 0x52,  /* ......`R */
                /* 0B08 */  0x06, 0x40, 0xAD, 0x80, 0xB0, 0x78, 0xCB, 0x12,  /* .@...x.. */
                /* 0B10 */  0x88, 0x23, 0x9A, 0x39, 0x01, 0x50, 0x37, 0x20,  /* .#.9.P7  */
                /* 0B18 */  0x4C, 0xA0, 0x1E, 0x10, 0x26, 0xDC, 0x10, 0x08,  /* L...&... */
                /* 0B20 */  0x8B, 0xA3, 0x08, 0x84, 0x09, 0xB6, 0x04, 0xC2,  /* ........ */
                /* 0B28 */  0xE2, 0x82, 0x50, 0xC1, 0x9E, 0x8E, 0xFD, 0x4C,  /* ..P....L */
                /* 0B30 */  0x3E, 0x88, 0x80, 0x1C, 0xDA, 0x14, 0x10, 0x93,  /* >....... */
                /* 0B38 */  0xA0, 0x0A, 0x88, 0x25, 0x78, 0x0C, 0x08, 0xC8,  /* ...%x... */
                /* 0B40 */  0x71, 0x40, 0x04, 0xE4, 0x50, 0xB6, 0x80, 0x58,  /* q@..P..X */
                /* 0B48 */  0x44, 0x10, 0x01, 0x59, 0xCF, 0x1B, 0x4E, 0x40,  /* D..Y..N@ */
                /* 0B50 */  0x16, 0x07, 0x22, 0x20, 0x8B, 0x36, 0x06, 0xC4,  /* .." .6.. */
                /* 0B58 */  0x22, 0x80, 0x08, 0xC8, 0xC9, 0x5E, 0x70, 0x81,  /* "....^p. */
                /* 0B60 */  0x48, 0x4C, 0x10, 0x01, 0x39, 0xEC, 0x8A, 0x05,  /* HL..9... */
                /* 0B68 */  0xE4, 0xE8, 0x20, 0x02, 0xB2, 0x4E, 0x6F, 0x40,  /* .. ..No@ */
                /* 0B70 */  0x4C, 0x34, 0x88, 0x80, 0x2C, 0xFE, 0xB1, 0x21,  /* L4..,..! */
                /* 0B78 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0x3E, 0x28,  /*  G....>( */
                /* 0B80 */  0x02, 0x91, 0xB8, 0x20, 0x02, 0xB2, 0x46, 0x7B,  /* ... ..F{ */
                /* 0B88 */  0x40, 0x4C, 0x30, 0x88, 0x80, 0x2C, 0xFB, 0x07,  /* @L0..,.. */
                /* 0B90 */  0x25, 0x20, 0x87, 0x00, 0xD1, 0x00, 0xC9, 0xEB,  /* % ...... */
                /* 0B98 */  0x40, 0x03, 0x24, 0xBF, 0x89, 0x40, 0x44, 0xE2,  /* @.$..@D. */
                /* 0BA0 */  0xAB, 0x22, 0x10, 0xD1, 0x0B, 0x22, 0x20, 0xFF,  /* ."..." . */
                /* 0BA8 */  0xFF, 0xA5, 0xFF, 0x38, 0x04, 0xE4, 0x20, 0x20,  /* ...8..   */
                /* 0BB0 */  0x02, 0x26, 0x1A, 0x81, 0xE9, 0x0B, 0x21, 0x10,  /* .&....!. */
                /* 0BB8 */  0xF9, 0xFF, 0x03                                 /* ... */
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  /* j....... */
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  /* ....)... */
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  /* AA..!... */
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  /* f....... */
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   /* ..).BA.. */
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    Else
                    {
                        If ((Arg1 == 0x02))
                        {
                            Return (AM02 ())
                        }
                        Else
                        {
                            If ((Arg1 == 0x03))
                            {
                                Return (AM03 (WIID))
                            }
                            Else
                            {
                                If ((Arg1 == 0x04))
                                {
                                    CreateDWordField (Arg2, 0x04, IVAL)
                                    Return (AM04 (WIID, IVAL))
                                }
                                Else
                                {
                                    If ((Arg1 == 0x05))
                                    {
                                        Return (AM05 (WIID))
                                    }
                                    Else
                                    {
                                        If ((Arg1 == 0x06))
                                        {
                                            Return (AM06 ())
                                        }
                                        Else
                                        {
                                            If ((Arg1 == 0x07))
                                            {
                                                AM07 (Arg2)
                                            }
                                            Else
                                            {
                                                If ((Arg1 == 0x08))
                                                {
                                                    AM08 (WIID)
                                                }
                                                Else
                                                {
                                                    If ((Arg1 == 0x09))
                                                    {
                                                        Return (AM09 ())
                                                    }
                                                    Else
                                                    {
                                                        If ((Arg1 == 0x0A))
                                                        {
                                                            Return (AM10 (Arg2))
                                                        }
                                                        Else
                                                        {
                                                            If ((Arg1 == 0x0B))
                                                            {
                                                                Return (AM11 ())
                                                            }
                                                            Else
                                                            {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Name (QLST, Package (0x0F)
    {
        0x0E, 
        Package (0x05)
        {
            0x2626, 
            "Memory Clock Mode", 
            Zero, 
            0x03, 
            Package (0x03)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x06)
                {
                    "Limit"
                }, 

                Buffer (0x07)
                {
                    "Manual"
                }
            }
        }, 

        Package (0x06)
        {
            0x349D, 
            "Memclock Value", 
            One, 
            Buffer (0x05)
            {
                 0x02, 0x00, 0x01, 0x03, 0x00                     /* ..... */
            }, 

            0x08, 
            Package (0x08)
            {
                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "400"
                }, 

                Buffer (0x04)
                {
                    "533"
                }, 

                Buffer (0x04)
                {
                    "667"
                }, 

                Buffer (0x04)
                {
                    "800"
                }, 

                Buffer (0x05)
                {
                    "Auto"
                }
            }
        }, 

        Package (0x05)
        {
            0x262E, 
            "DRAM Timing Mode", 
            Zero, 
            0x04, 
            Package (0x04)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x05)
                {
                    "Both"
                }
            }
        }, 

        Package (0x07)
        {
            0x4534, 
            "DCT0 CAS Latency (CL)", 
            0x02, 
            Buffer (0x05)
            {
                 0x02, 0x00, 0x03, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x02, 0x02, 0x03, 0x03, 0x00                     /* ..... */
            }, 

            0x10, 
            Package (0x10)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x06)
                {
                    "4 CLK"
                }, 

                Buffer (0x06)
                {
                    "5 CLK"
                }, 

                Buffer (0x06)
                {
                    "6 CLK"
                }, 

                Buffer (0x06)
                {
                    "7 CLK"
                }, 

                Buffer (0x06)
                {
                    "8 CLK"
                }, 

                Buffer (0x06)
                {
                    "9 CLK"
                }, 

                Buffer (0x07)
                {
                    "10 CLK"
                }, 

                Buffer (0x07)
                {
                    "11 CLK"
                }, 

                Buffer (0x07)
                {
                    "12 CLK"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }
            }
        }, 

        Package (0x07)
        {
            0x4538, 
            "DCT1 CAS Latency (CL)", 
            0x02, 
            Buffer (0x05)
            {
                 0x02, 0x00, 0x03, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x02, 0x01, 0x03, 0x03, 0x00                     /* ..... */
            }, 

            0x10, 
            Package (0x10)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x06)
                {
                    "4 CLK"
                }, 

                Buffer (0x06)
                {
                    "5 CLK"
                }, 

                Buffer (0x06)
                {
                    "6 CLK"
                }, 

                Buffer (0x06)
                {
                    "7 CLK"
                }, 

                Buffer (0x06)
                {
                    "8 CLK"
                }, 

                Buffer (0x06)
                {
                    "9 CLK"
                }, 

                Buffer (0x07)
                {
                    "10 CLK"
                }, 

                Buffer (0x07)
                {
                    "11 CLK"
                }, 

                Buffer (0x07)
                {
                    "12 CLK"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }
            }
        }, 

        Package (0x05)
        {
            0x360B, 
            "NB FID Control", 
            Zero, 
            0x02, 
            Package (0x02)
            {
                Buffer (0x07)
                {
                    "Manual"
                }, 

                Buffer (0x05)
                {
                    "Auto"
                }
            }
        }, 

        Package (0x06)
        {
            0x5450, 
            "NBFID ID", 
            One, 
            Buffer (0x05)
            {
                 0x02, 0x01, 0x06, 0x03, 0x00                     /* ..... */
            }, 

            0x21, 
            Package (0x21)
            {
                Buffer (0x02)
                {
                    "3"
                }, 

                Buffer (0x02)
                {
                    "4"
                }, 

                Buffer (0x02)
                {
                    "5"
                }, 

                Buffer (0x02)
                {
                    "6"
                }, 

                Buffer (0x02)
                {
                    "7"
                }, 

                Buffer (0x02)
                {
                    "8"
                }, 

                Buffer (0x02)
                {
                    "9"
                }, 

                Buffer (0x03)
                {
                    "10"
                }, 

                Buffer (0x03)
                {
                    "11"
                }, 

                Buffer (0x03)
                {
                    "12"
                }, 

                Buffer (0x03)
                {
                    "13"
                }, 

                Buffer (0x03)
                {
                    "14"
                }, 

                Buffer (0x03)
                {
                    "15"
                }, 

                Buffer (0x03)
                {
                    "16"
                }, 

                Buffer (0x03)
                {
                    "17"
                }, 

                Buffer (0x03)
                {
                    "18"
                }, 

                Buffer (0x03)
                {
                    "19"
                }, 

                Buffer (0x03)
                {
                    "20"
                }, 

                Buffer (0x03)
                {
                    "21"
                }, 

                Buffer (0x03)
                {
                    "22"
                }, 

                Buffer (0x03)
                {
                    "23"
                }, 

                Buffer (0x03)
                {
                    "24"
                }, 

                Buffer (0x03)
                {
                    "25"
                }, 

                Buffer (0x03)
                {
                    "26"
                }, 

                Buffer (0x03)
                {
                    "27"
                }, 

                Buffer (0x03)
                {
                    "28"
                }, 

                Buffer (0x03)
                {
                    "29"
                }, 

                Buffer (0x03)
                {
                    "30"
                }, 

                Buffer (0x03)
                {
                    "31"
                }, 

                Buffer (0x03)
                {
                    "32"
                }, 

                Buffer (0x03)
                {
                    "33"
                }, 

                Buffer (0x03)
                {
                    "34"
                }, 

                Buffer (0x03)
                {
                    "35"
                }
            }
        }, 

        Package (0x05)
        {
            0x178C, 
            "DDR3 Memory Profile", 
            Zero, 
            0x02, 
            Package (0x02)
            {
                Buffer (0x09)
                {
                    "Disabled"
                }, 

                Buffer (0x08)
                {
                    "Enabled"
                }
            }
        }, 

        Package (0x08)
        {
            0x26DC, 
            "Advanced Clock Calibration", 
            Zero, 
            0x04, 
            Buffer (0x09)
            {
                "Disabled"
            }, 

            Buffer (0x05)
            {
                "Auto"
            }, 

            Buffer (0x0A)
            {
                "All Cores"
            }, 

            Buffer (0x09)
            {
                "Per Core"
            }
        }, 

        Package (0x16)
        {
            0x4574, 
            "Value (All Cores)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x02, 0x01, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x4578, 
            "Value (Core 0)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x457C, 
            "Value (Core 1)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x4580, 
            "Value (Core 2)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }, 

        Package (0x16)
        {
            0x4584, 
            "Value (Core 3)", 
            0x02, 
            Buffer (0x05)
            {
                 0x82, 0x03, 0x01, 0x03, 0x00                     /* ..... */
            }, 

            Buffer (0x05)
            {
                 0x86, 0x10, 0x00, 0x02, 0x00                     /* ..... */
            }, 

            0x10, 
            Buffer (0x03)
            {
                "0%"
            }, 

            Buffer (0x05)
            {
                "+ 2%"
            }, 

            Buffer (0x05)
            {
                "+ 4%"
            }, 

            Buffer (0x05)
            {
                "+ 6%"
            }, 

            Buffer (0x05)
            {
                "+ 8%"
            }, 

            Buffer (0x05)
            {
                "+10%"
            }, 

            Buffer (0x05)
            {
                "+12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }, 

            Buffer (0x05)
            {
                "- 2%"
            }, 

            Buffer (0x05)
            {
                "- 4%"
            }, 

            Buffer (0x05)
            {
                "- 6%"
            }, 

            Buffer (0x05)
            {
                "- 8%"
            }, 

            Buffer (0x05)
            {
                "-10%"
            }, 

            Buffer (0x05)
            {
                "-12%"
            }, 

            Buffer (0x09)
            {
                "RESERVED"
            }
        }
    })
    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.SIOS (Arg0)
            NB2S (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.EPTS (Arg0)
            NPTS (Arg0)
            APTS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.SIOW (Arg0)
        NB2W (Arg0)
        SWAK (Arg0)
        \_SB.PCI0.SBRG.EWAK (Arg0)
        NWAK (Arg0)
        AWAK (Arg0)
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000084
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9B
[00Ah 0010   6]                       Oem ID : "091109"
[010h 0016   8]                 Oem Table ID : "FACP1219"
[018h 0024   4]                 Oem Revision : 20090911
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : CFFA8000
[028h 0040   4]                 DSDT Address : CFF90440
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : E3
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000001A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]                     Reserved : 0000
[083h 0131   1]                     Reserved : 00

// ACPI Warning: FADT revision 1 does not match length: found 84 expected 74

Raw Table Data: Length 132 (0x84)

  0000: 46 41 43 50 84 00 00 00 01 9B 30 39 31 31 30 39  // FACP......091109
  0010: 46 41 43 50 31 32 31 39 11 09 09 20 4D 53 46 54  // FACP1219... MSFT
  0020: 97 00 00 00 00 80 FA CF 40 04 F9 CF 01 00 09 00  // ........@.......
  0030: B0 00 00 00 E1 1E 00 E2 00 08 00 00 00 00 00 00  // ................
  0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
  0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 E3  //  ...............
  0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 03 00 00  // e...........2...
  0070: A5 01 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
  0080: 06 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AD
[00Ah 0010   6]                       Oem ID : "091109"
[010h 0016   8]                 Oem Table ID : "OEMHPET "
[018h 0024   4]                 Oem Revision : 20090911
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : 00008300

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 AD 30 39 31 31 30 39  // HPET8.....091109
  0010: 4F 45 4D 48 50 45 54 20 11 09 09 20 4D 53 46 54  // OEMHPET ... MSFT
  0020: 97 00 00 00 00 83 00 00 00 08 00 00 00 00 D0 FE  // ................
  0030: 00 00 00 00 02 14 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 61
[00Ah 0010   6]                       Oem ID : "091109"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 20090911
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 61 30 39 31 31 30 39  // MCFG<....a091109
  0010: 4F 45 4D 4D 43 46 47 20 11 09 09 20 4D 53 46 54  // OEMMCFG ... MSFT
  0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----
[000h 0000   4]                    Signature : "OEMB"    
[004h 0004   4]                 Table Length : 00000072
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D2     /* Incorrect checksum, should be C9 */
[00Ah 0010   6]                       Oem ID : "091109"
[010h 0016   8]                 Oem Table ID : "OEMB1219"
[018h 0024   4]                 Oem Revision : 20090911
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097


**** OEM-defined ACPI table [OEMB], unknown contents


Raw Table Data: Length 114 (0x72)

  0000: 4F 45 4D 42 72 00 00 00 01 D2 30 39 31 31 30 39  // OEMBr.....091109
  0010: 4F 45 4D 42 31 32 31 39 11 09 09 20 4D 53 46 54  // OEMB1219... MSFT
  0020: 97 00 00 00 0D 09 00 00 00 00 D0 00 00 F0 FF 00  // ................
  0030: 00 0D 00 00 00 01 00 00 00 00 D0 00 00 00 10 00  // ................
  0040: 87 A0 F5 0E 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0060: 00 00 00 00 F0 00 00 C0 0E 00 00 C0 FE 00 00 00  // ................
  0070: 00 00                                            // ..


