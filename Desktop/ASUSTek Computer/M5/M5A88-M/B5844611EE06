
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00001714  0x01  "A M I "  "POWERNOW"  0x00000001  "AMD "   0x00000001
 02)  MCFG  0x0000003C  0x01  "050113"  "OEMMCFG "  0x20130501  "MSFT"   0x00000097
 03)  APIC  0x0000008C  0x01  "050113"  "APIC0946"  0x20130501  "MSFT"   0x00000097
 04)  OEMB  0x00000072  0x01  "050113"  "OEMB0946"  0x20130501  "MSFT"   0x00000097
 05)  DSDT  0x0000EFCE  0x01  "A1874 "  "A1874001"  0x00000001  "INTL"   0x20060113
 06)  FACP  0x000000F4  0x03  "050113"  "FACP0946"  0x20130501  "MSFT"   0x00000097
 07)  HPET  0x00000038  0x01  "050113"  "OEMHPET "  0x20130501  "MSFT"   0x00000097
 08)  FACS  0x00000040  0x01

Found 8 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000008C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2D
[00Ah 0010   6]                       Oem ID : "050113"
[010h 0016   8]                 Oem Table ID : "APIC0946"
[018h 0024   4]                 Oem Revision : 20130501
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 10
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 11
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 12
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 13
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 14
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 15
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 16
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 17
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 18
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 140 (0x8C)

    0000: 41 50 49 43 8C 00 00 00 01 2D 30 35 30 31 31 33  // APIC.....-050113
    0010: 41 50 49 43 30 39 34 36 01 05 13 20 4D 53 46 54  // APIC0946... MSFT
    0020: 97 00 00 00 00 00 E0 FE 01 00 00 00 00 08 01 10  // ................
    0030: 01 00 00 00 00 08 02 11 01 00 00 00 00 08 03 12  // ................
    0040: 01 00 00 00 00 08 04 13 01 00 00 00 00 08 05 14  // ................
    0050: 01 00 00 00 00 08 06 15 01 00 00 00 00 08 07 16  // ................
    0060: 01 00 00 00 00 08 08 17 01 00 00 00 01 0C 18 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0F 00              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 1, "A1874", "A1874001", 0x00000001)
{
    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x04), 
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x0100)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0C), 
        PCIE,   32, 
        Offset (0x7F), 
            ,   5, 
        GGN2,   1, 
        Offset (0x87), 
        GECE,   1, 
        IR_E,   1, 
        Offset (0x93), 
            ,   5, 
        OSCF,   1, 
        Offset (0x9E), 
        PRS0,   1, 
        DET0,   1, 
        Offset (0xA2), 
        PRS1,   1, 
        DET1,   1, 
        Offset (0xA6), 
        PRS2,   1, 
        DET2,   1, 
        Offset (0xAA), 
        PRS3,   1, 
        DET3,   1, 
        Offset (0xB2), 
            ,   6, 
        ABPS,   1, 
            ,   3, 
        GPPS,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0x880FC), 
        RMBA,   32, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (RMEM, SystemMemory, RMBA, 0x0200)
    Field (RMEM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x04), 
        RMLN,   32
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x60), 
        P1EB,   16
    }

    OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13D), 
        GP62,   8, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x1AD), 
            ,   6, 
        G173,   1, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3EF), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F5), 
        GECD,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GENC, 0, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 < 0x04))
        {
            Local1 = RDAB (CABR (0x03, Local0, 0xA4))
            Local1 &= 0x0800
            If ((Local1 != Zero))
            {
                Return (0x0F)
            }

            Local0++
            Stall (0xC8)
        }

        Return (Zero)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                DET0 = One
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                DET2 = One
            }

            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            RWAB (CABR (0x03, Arg1, 0xA2), 0xFFFDFFFF, 0x00020000)
            RWAB (CABR (0x03, Arg1, 0xA2), 0xFFFFFEFF, 0x0100)
            If ((Arg1 == Zero))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                DET0 = Zero
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                DET2 = Zero
            }

            RWAB (CABR (0x03, Arg1, 0xA2), 0xFFFDFFFF, Zero)
            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }

            If ((GENC () == Zero))
            {
                RWAB (CABR (One, Zero, 0x40), 0xFFFFFFF7, 0x08)
            }
            Else
            {
                RWAB (CABR (One, Zero, 0x40), 0xFFFFFFF7, Zero)
            }

            Stall (0xC8)
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80 = Arg0
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (TRMD, 1, NotSerialized)
    {
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    Name (DP80, 0x80)
    Name (DP90, 0x90)
    Name (SPIO, 0x2E)
    Name (IOPB, 0x0230)
    Name (IOPL, 0x10)
    Name (IOEL, 0x10)
    Name (IOGB, 0x0300)
    Name (IOGL, 0x10)
    Name (IOSB, 0x0A30)
    Name (IOSL, 0x10)
    Name (HLWP, Zero)
    Name (ATSW, 0xE5)
    Name (APIC, One)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (SMB0, 0x0B00)
    Name (SMBB, 0x0B20)
    Name (SMBM, 0x20)
    Name (SMBL, 0x20)
    Name (AODS, 0xF5)
    Name (SMIP, 0xB0)
    Name (ACSS, One)
    Name (SBA1, 0x0B00)
    Name (SBA2, 0x0B20)
    Name (SIOP, 0x2E)
    Name (GIOB, 0x0300)
    Name (T1OF, Zero)
    Name (T2OF, Zero)
    Name (T3OF, Zero)
    Name (CQST, 0x3C)
    Name (PCIB, 0xE0000000)
    Name (PCIL, 0x10000000)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (SMIT, 0xB0)
    Name (CMRQ, 0xE0)
    Name (CMER, 0xE1)
    Name (CMOR, 0xE4)
    Name (SMBS, 0x0B20)
    Name (SMIO, 0xB0)
    Name (IOEB, 0x0290)
    Name (ATIE, 0xE0000000)
    Name (IO1B, 0x0300)
    Name (SBRV, 0x0CD0)
    OperationRegion (BIOS, SystemMemory, 0xC7F78064, 0xFF)
    Field (BIOS, ByteAcc, NoLock, Preserve)
    {
        SS1,    1, 
        SS2,    1, 
        SS3,    1, 
        SS4,    1, 
        Offset (0x01), 
        IOST,   16, 
        TOPM,   32, 
        ROMS,   32, 
        MG1B,   32, 
        MG1L,   32, 
        MG2B,   32, 
        MG2L,   32, 
        Offset (0x1C), 
        DMAX,   8, 
        HPTA,   32, 
        CPB0,   32, 
        CPB1,   32, 
        CPB2,   32, 
        CPB3,   32, 
        ASSB,   8, 
        AOTB,   8, 
        AAXB,   32, 
        SMIF,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        MPEN,   8, 
        TPMF,   8, 
        MG3B,   32, 
        MG3L,   32, 
        MH1B,   32, 
        MH1L,   32, 
        SFLG,   8, 
        OSTP,   8
    }

    Method (RRIO, 4, NotSerialized)
    {
        Debug = "RRIO"
    }

    Method (RDMA, 3, NotSerialized)
    {
        Debug = "rDMA"
    }

    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        Name (TTT0, Zero)
        TTT0 = OSYS ()
        If ((TTT0 == One))
        {
            OSVR = 0x03
        }
        ElseIf ((TTT0 == 0x10))
        {
            OSVR = One
        }
        ElseIf ((TTT0 == 0x11))
        {
            OSVR = 0x02
        }
        ElseIf ((TTT0 == 0x12))
        {
            OSVR = 0x04
        }
        ElseIf ((TTT0 == 0x13))
        {
            OSVR = Zero
        }
        ElseIf ((TTT0 == 0x14))
        {
            OSVR = Zero
        }
        ElseIf ((TTT0 == 0x15))
        {
            OSVR = Zero
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, DP80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, DP90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Method (OSYS, 0, NotSerialized)
    {
        Local0 = 0x10
        If (CondRefOf (_OSI, Local1))
        {
            If (_OSI ("Windows 2000"))
            {
                Local0 = 0x12
            }

            If (_OSI ("Windows 2001"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Local0 = 0x13
            }

            If (_OSI ("Windows 2001.1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2001.1 SP1"))
            {
                Local0 = 0x14
            }

            If (_OSI ("Windows 2006"))
            {
                Local0 = 0x15
            }
        }
        ElseIf (MCTH (_OS, "Microsoft Windows NT"))
        {
            Local0 = 0x12
        }
        ElseIf (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
        {
            Local0 = 0x11
        }

        Return (Local0)
    }

    Scope (_PR)
    {
        Processor (P001, 0x01, 0x00000810, 0x06){}
        Processor (P002, 0x02, 0x00000000, 0x00){}
        Processor (P003, 0x03, 0x00000000, 0x00){}
        Processor (P004, 0x04, 0x00000000, 0x00){}
        Processor (P005, 0x05, 0x00000000, 0x00){}
        Processor (P006, 0x06, 0x00000000, 0x00){}
        Processor (P007, 0x07, 0x00000000, 0x00){}
        Processor (P008, 0x08, 0x00000000, 0x00){}
        Alias (P001, CPU1)
        Alias (P002, CPU2)
        Alias (P003, CPU3)
        Alias (P004, CPU4)
        Alias (P005, CPU5)
        Alias (P006, CPU6)
        Alias (P007, CPU7)
        Alias (P008, CPU8)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x33)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x33)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR01, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x17
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,9,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Name (PRSD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,9,10,11,14,15}
        })
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (RS88)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x94), 
                    HI,     32, 
                    HD,     32, 
                    Offset (0xE8), 
                    MCI,    32, 
                    MCD,    32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y00)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y01)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.RS88.BROD._Y00._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RS88.BROD._Y00._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.RS88.BROD._Y01._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.RS88.BROD._Y01._LEN, LEN2)  // _LEN: Length
                        MI = 0x3C
                        Local0 = MD /* \_SB_.PCI0.RS88.MD__ */
                        If ((Local0 & 0x40))
                        {
                            MI = 0x3A
                            BAS1 = (MD & 0xFFFFFF00)
                            LEN1 = ((MD & 0xFF) << 0x17)
                        }

                        MCI = 0x11
                        Local1 = MCD /* \_SB_.PCI0.RS88.MCD_ */
                        MCI = 0x12
                        Local2 = MCD /* \_SB_.PCI0.RS88.MCD_ */
                        MCI = 0xF0
                        Local3 = MCD /* \_SB_.PCI0.RS88.MCD_ */
                        If ((Local2 == Zero))
                        {
                            If ((Local3 != Zero))
                            {
                                BAS2 = Local1
                                LEN2 = (Local3 << 0x14)
                            }
                        }

                        Return (CRS) /* \_SB_.PCI0.RS88.BROD.CRS_ */
                    }
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }

                Device (IGFX)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (GPXX, SystemMemory, 0x000EEF90, 0x0100)
                    Field (GPXX, AnyAcc, NoLock, Preserve)
                    {
                        GPCM,   8, 
                        GPDT,   2040
                    }

                    Name (ATIB, Buffer (0xFF){})
                    OperationRegion (SM00, SystemIO, 0xB0, One)
                    Field (SM00, ByteAcc, NoLock, Preserve)
                    {
                        SMCM,   8
                    }

                    Method (ATIF, 2, Serialized)
                    {
                        Name (SUPF, Zero)
                        SUPF |= 0x2000
                        If ((Arg0 == 0x0E))
                        {
                            Return (AF0E (Arg1))
                        }

                        If ((Arg0 == Zero))
                        {
                            Return (AF00 (SUPF))
                        }

                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = Zero
                        VERN = Zero
                        NMSK = Zero
                        SFUN = Zero
                        Return (ATIB) /* \_SB_.PCI0.P0P1.IGFX.ATIB */
                    }

                    Method (AF00, 1, Serialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        NMSK = Zero
                        SFUN = Arg0
                        Return (ATIB) /* \_SB_.PCI0.P0P1.IGFX.ATIB */
                    }

                    Method (AF0E, 1, NotSerialized)
                    {
                        OperationRegion (^GF00, PCI_Config, Zero, 0x40)
                        Field (GF00, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x18), 
                            MMAR,   32
                        }

                        OperationRegion (GF02, SystemMemory, MMAR, 0x7000)
                        Field (GF02, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x6080), 
                            D1ME,   1, 
                            Offset (0x609C), 
                            D1VB,   1
                        }

                        GPDT = Arg0
                        GPCM = 0x0E
                        If ((D1ME == One))
                        {
                            While ((D1VB != Zero)){}
                            While ((D1VB != One)){}
                        }

                        SMCM = 0xE5
                        Return (Zero)
                    }
                }
            }

            Device (PCE2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }
            }

            Device (PCE3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PR03) /* \_SB_.PR03 */
                }
            }

            Device (PCE4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PCE5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (PCE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }

                Device (ASU3)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (PCE9)
            {
                Name (_ADR, 0x00090000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PCEA)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PR1A) /* \_SB_.PR1A */
                }

                Device (RLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x18, 0x04))
                    }
                }
            }

            Device (PCEB)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (PCEC)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x18, 0x04))
                }
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (PPTM, Buffer (0x14)
                {
                    /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                    /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                    /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                })
                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (PPTM) /* \_SB_.PCI0.IDEC.PPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (PPTM) /* \_SB_.PCI0.IDEC.PPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (GEC)
            {
                Name (_ADR, 0x00140006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x13, 0x04))
                }
            }

            Device (UHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC4)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC6)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (UHC7)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                If ((STCL == 0x0101))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (SACS, PCI_Config, Zero, 0x40)
                    Field (SACS, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x24), 
                        STB5,   32
                    }

                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           // ....
                    })
                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (PRIS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1, 
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4, 
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1, 
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4, 
                                Offset (0x2A0), 
                                    ,   7
                            }

                            If (((OSTY == 0x06) || (OSTY == 0x04)))
                            {
                                If (PMS1)
                                {
                                    Local0 = 0x32
                                    While (((PMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (PSS1)
                                {
                                    Local0 = 0x32
                                    While (((PSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            PRIS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PRIS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x128), 
                                    PMS0,   4, 
                                    Offset (0x129), 
                                    PMS1,   4
                                }

                                If (~(PMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x120), 
                                        ,   7, 
                                    PMBY,   1
                                }

                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x228), 
                                    PSS0,   4, 
                                    Offset (0x229), 
                                    PSS1,   4
                                }

                                If (~(PSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x220), 
                                        ,   7, 
                                    PSBY,   1
                                }

                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (SECS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1, 
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4, 
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1, 
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4, 
                                Offset (0x2AC)
                            }

                            If (((OSTY == 0x06) || (OSTY == 0x04)))
                            {
                                If (SMS1)
                                {
                                    Local0 = 0x32
                                    While (((SMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (SSS1)
                                {
                                    Local0 = 0x32
                                    While (((SSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            SECS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SECS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A8), 
                                    SMS0,   4, 
                                    Offset (0x1A9), 
                                    SMS1,   4
                                }

                                If (~(SMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A0), 
                                        ,   7, 
                                    SMBY,   1
                                }

                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A8), 
                                    SSS0,   4, 
                                    Offset (0x2A9), 
                                    SSS1,   4
                                }

                                If (~(SSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A0), 
                                        ,   7, 
                                    SSBY,   1
                                }

                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                            }
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SMBS, PCI_Config, Zero, 0x0100)
                Field (SMBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    REV,    8, 
                    Offset (0x62), 
                    I1F,    1, 
                    I12F,   1, 
                        ,   2, 
                    MT3A,   1
                }

                OperationRegion (WIDE, PCI_Config, 0xAD, One)
                Field (WIDE, AnyAcc, NoLock, Preserve)
                {
                    DUM1,   4, 
                    SOPT,   1
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            _Y02)
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            _Y03)
                    })
                    CreateWordField (_CRS, \_SB.PCI0.SBRG.EC0._Y02._MIN, DPRT)  // _MIN: Minimum Base Address
                    CreateWordField (_CRS, \_SB.PCI0.SBRG.EC0._Y03._MIN, CPRT)  // _MIN: Minimum Base Address
                    Name (_GPE, 0x0A)  // _GPE: General Purpose Events
                    Name (REGC, Zero)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            REGC = Arg1
                        }
                    }

                    Method (ECAV, 0, NotSerialized)
                    {
                        If ((REGC == Ones))
                        {
                            If ((_REV >= 0x02))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (REGC) /* \_SB_.PCI0.SBRG.EC0_.REGC */
                    }

                    Mutex (MUEC, 0x00)
                    OperationRegion (DLYP, SystemIO, 0xE1, One)
                    Field (DLYP, ByteAcc, NoLock, Preserve)
                    {
                        DELY,   8
                    }

                    OperationRegion (ECOR, EmbeddedControl, Zero, 0xFF)
                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        SB00,   8, 
                        SB01,   8, 
                        SB02,   8, 
                        SB03,   8, 
                        SB04,   8, 
                        SB05,   8, 
                        SB06,   8, 
                        SB07,   8, 
                        SB08,   8, 
                        SB09,   8, 
                        SB10,   8, 
                        SB11,   8, 
                        SB12,   8, 
                        SB13,   8, 
                        SB14,   8, 
                        SB15,   8, 
                        SB16,   8, 
                        SB17,   8, 
                        SB18,   8, 
                        SB19,   8, 
                        SB20,   8, 
                        SB21,   8, 
                        SB22,   8, 
                        SB23,   8, 
                        SB24,   8, 
                        SB25,   8, 
                        SB26,   8, 
                        SB27,   8, 
                        SB28,   8, 
                        SB29,   8, 
                        SB30,   8, 
                        SB31,   8, 
                        SB32,   8, 
                        SB33,   8, 
                        SB34,   8, 
                        SB35,   8, 
                        SB36,   8, 
                        SB37,   8, 
                        SB38,   8, 
                        SB40,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        SBW0,   16
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x29), 
                        DA0S,   8, 
                        DA1S,   8, 
                        DA2S,   8, 
                        DA3S,   8, 
                        DA0C,   8, 
                        DA1C,   8, 
                        DA2C,   8, 
                        DA3C,   8, 
                        OVGC,   8, 
                        VTTC,   8, 
                        OVGS,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x39), 
                        AD00,   8, 
                        AD01,   8, 
                        AD02,   8, 
                        AD03,   8, 
                        AD04,   8, 
                        AD05,   8, 
                        AD06,   8, 
                        AD07,   8, 
                        AD08,   8, 
                        AD09,   8, 
                        AD10,   8, 
                        AD11,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x9B), 
                        EL0M,   8, 
                        EL0N,   8, 
                        EL0P,   8, 
                        EL0C,   8, 
                        EL0D,   8, 
                        EL0X,   8, 
                        EL0L,   8, 
                        EL0S,   8, 
                        EUT0,   8, 
                        ELT0,   8, 
                        EL1M,   8, 
                        EL1N,   8, 
                        EL1P,   8, 
                        EL1C,   8, 
                        EL1D,   8, 
                        EL1X,   8, 
                        EL1L,   8, 
                        EL1S,   8, 
                        EUT1,   8, 
                        ELT1,   8, 
                        EL2M,   8, 
                        EL2N,   8, 
                        EL2P,   8, 
                        EL2C,   8, 
                        EL2D,   8, 
                        EL2X,   8, 
                        EL2L,   8, 
                        EL2S,   8, 
                        EUT2,   8, 
                        ELT2,   8, 
                        EL3M,   8, 
                        EL3N,   8, 
                        EL3P,   8, 
                        EL3C,   8, 
                        EL3D,   8, 
                        EL3X,   8, 
                        EL3L,   8, 
                        EL3S,   8, 
                        EUT3,   8, 
                        ELT3,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xD0), 
                        Offset (0xD1), 
                            ,   6, 
                        FWUP,   1, 
                        FWFA,   1, 
                        SCIE,   1, 
                        SMIE,   1, 
                        SCRE,   1, 
                        EPUE,   1, 
                        HWME,   1, 
                        CRTC,   1, 
                        RCEN,   1, 
                        PTME,   1, 
                            ,   2, 
                        EPUR,   1, 
                            ,   3, 
                        TUBO,   1, 
                        REPU,   1, 
                        FGAM,   1, 
                        FGNE,   1
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xC5), 
                        EBID,   8, 
                        Offset (0xD0), 
                        FGP0,   8, 
                        FGP1,   8, 
                        FGP2,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x91), 
                        EPUM,   8, 
                        RCLE,   8, 
                        Offset (0x94), 
                        FASN,   8, 
                        CRCE,   8, 
                        HMIR,   8, 
                        HMDR,   8, 
                        HMRW,   8, 
                        HMBK,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x7D), 
                        ECWT,   8, 
                        Offset (0x7F), 
                        Offset (0x80), 
                        ECAT,   8, 
                        Offset (0x82), 
                        Offset (0x83), 
                        Offset (0x84), 
                        TVM0,   8, 
                        TVM2,   8
                    }

                    Field (ECOR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0xF4), 
                        ECF4,   8, 
                        ECF5,   8, 
                        ECF6,   8, 
                        ECF7,   8
                    }

                    OperationRegion (IO, SystemIO, DPRT, 0x05)
                    Field (IO, ByteAcc, Lock, Preserve)
                    {
                        ECDA,   8, 
                        Offset (0x04), 
                        ECMD,   8
                    }

                    Field (IO, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        OBFS,   1, 
                        IBFS,   1, 
                        IGN0,   1, 
                        CMDS,   1, 
                        BRST,   1, 
                        SCIS,   1, 
                        SMIS,   1, 
                        IGN1,   1
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x0B) // System Locality Update
                    }

                    Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x0D) // System Resource Affinity Update
                    }

                    Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x0C) // Reserved (was previously Shutdown Request)
                    }

                    Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x0C) // Reserved (was previously Shutdown Request)
                    }

                    Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^ASOC.CAML = 0x03
                        Notify (ASOC, 0x05) // Frequency Mismatch
                    }

                    Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^ASOC.CAML = One
                        Notify (ASOC, 0x05) // Frequency Mismatch
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x86) // Device-Specific
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x87) // Device-Specific
                    }

                    Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x90) // Device-Specific
                    }

                    Method (_Q91, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x91) // Device-Specific
                    }

                    Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x92) // Device-Specific
                    }

                    Method (_Q93, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x93) // Device-Specific
                    }

                    Method (_Q94, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x94) // Device-Specific
                    }

                    Method (_Q95, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x95) // Device-Specific
                    }

                    Method (_Q96, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Notify (ASOC, 0x96) // Device-Specific
                    }

                    Method (ECBR, 2, NotSerialized)
                    {
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                SB01 = Zero
                                SB02 = Arg0
                                SB03 = Arg1
                                SB00 = 0x07
                                Local0 = 0x03E8
                                While (Local0)
                                {
                                    Local0--
                                    Local1 = SB01 /* \_SB_.PCI0.SBRG.EC0_.SB01 */
                                    If (((Local1 & 0x80) == 0x80))
                                    {
                                        Local2 = (Local1 & 0x1A)
                                        If (((Local2 == 0x1A) || (Local2 == 0x18)))
                                        {
                                            Release (MUEC)
                                            ECBR (Arg0, Arg1)
                                        }

                                        If ((Local2 == Zero))
                                        {
                                            Break
                                        }
                                    }
                                }

                                Release (MUEC)
                                Return (SB04) /* \_SB_.PCI0.SBRG.EC0_.SB04 */
                            }
                        }
                    }

                    Method (ECBW, 3, NotSerialized)
                    {
                        If (ECAV ())
                        {
                            If (!Acquire (MUEC, 0xFFFF))
                            {
                                SB01 = Zero
                                SB02 = Arg0
                                SB03 = Arg1
                                SB04 = Arg2
                                SB00 = 0x06
                                Local0 = 0x03E8
                                While (Local0)
                                {
                                    Local0--
                                    Local1 = SB01 /* \_SB_.PCI0.SBRG.EC0_.SB01 */
                                    If (((Local1 & 0x80) == 0x80))
                                    {
                                        Local2 = (Local1 & 0x1A)
                                        If (((Local2 == 0x1A) || (Local2 == 0x18)))
                                        {
                                            Release (MUEC)
                                            Return (Zero)
                                        }

                                        If ((Local2 == Zero))
                                        {
                                            Break
                                        }
                                    }
                                }

                                Release (MUEC)
                                Return (One)
                            }
                        }
                    }

                    Method (RFEC, 1, NotSerialized)
                    {
                    }
                }

                Device (LPTE)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If (LPTM (0x02))
                        {
                            Return (0x0104D041)
                        }
                        Else
                        {
                            Return (0x0004D041)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (0x02))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (0x02, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        DCRS (0x02, One)
                        If (LPTM (0x02))
                        {
                            IRQE = IRQM /* \_SB_.PCI0.SBRG.IRQM */
                            DMAE = DMAM /* \_SB_.PCI0.SBRG.DMAM */
                            IO21 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                            IO22 = IO12 /* \_SB_.PCI0.SBRG.IO12 */
                            LEN2 = LEN1 /* \_SB_.PCI0.SBRG.LEN1 */
                            IO31 = (IO21 + 0x0400)
                            IO32 = IO31 /* \_SB_.PCI0.SBRG.IO31 */
                            LEN3 = LEN2 /* \_SB_.PCI0.SBRG.LEN2 */
                            Return (CRS2) /* \_SB_.PCI0.SBRG.CRS2 */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                        }
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, 0x02)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        If (LPTM (0x02))
                        {
                            Return (EPPR) /* \_SB_.PCI0.SBRG.LPTE.EPPR */
                        }
                        Else
                        {
                            Return (LPPR) /* \_SB_.PCI0.SBRG.LPTE.LPPR */
                        }
                    }

                    Name (LPPR, ResourceTemplate ()
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                    Name (EPPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        EndDependentFn ()
                    })
                }

                Scope (\)
                {
                    OperationRegion (RAMW, SystemMemory, 0xC7FE0000, 0x00010000)
                    Field (RAMW, ByteAcc, NoLock, Preserve)
                    {
                        PAR0,   32, 
                        PAR1,   32, 
                        PAR2,   32, 
                        PINX,   32, 
                        SMBU,   32
                    }

                    OperationRegion (IOB2, SystemIO, 0xB0, 0x02)
                    Field (IOB2, ByteAcc, NoLock, Preserve)
                    {
                        SMIC,   8, 
                        SMIS,   8
                    }

                    Method (ISMI, 1, Serialized)
                    {
                        SMIC = Arg0
                        Sleep (One)
                    }

                    Method (GNVS, 1, Serialized)
                    {
                        PINX = 0x80000000
                        PAR0 = Arg0
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }

                    Method (SNVS, 2, Serialized)
                    {
                        PINX = 0x80000001
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x70)
                    }

                    Name (ARBF, Buffer (0x10){})
                    CreateDWordField (ARBF, Zero, REAX)
                    CreateDWordField (ARBF, 0x04, REBX)
                    CreateDWordField (ARBF, 0x08, RECX)
                    CreateDWordField (ARBF, 0x0C, REDX)
                    Method (SMSR, 1, Serialized)
                    {
                        CreateDWordField (Arg0, Zero, AEAX)
                        CreateDWordField (Arg0, 0x04, AEBX)
                        CreateDWordField (Arg0, 0x08, AECX)
                        CreateDWordField (Arg0, 0x0C, AEDX)
                        PINX = 0x80000003
                        PAR0 = AECX /* \SMSR.AECX */
                        PAR1 = AEAX /* \SMSR.AEAX */
                        PAR2 = AEDX /* \SMSR.AEDX */
                        ISMI (0x70)
                    }

                    Method (GMSR, 1, Serialized)
                    {
                        PINX = 0x80000002
                        PAR0 = Arg0
                        ISMI (0x70)
                        RECX = Arg0
                        REAX = PAR1 /* \PAR1 */
                        REDX = PAR2 /* \PAR2 */
                        Return (ARBF) /* \ARBF */
                    }

                    Method (PRID, 1, Serialized)
                    {
                        PINX = 0x80000004
                        PAR0 = Arg0
                        ISMI (0x70)
                        REAX = PAR1 /* \PAR1 */
                        REDX = PAR2 /* \PAR2 */
                        Return (ARBF) /* \ARBF */
                    }

                    Method (GECR, 1, Serialized)
                    {
                        PINX = 0x80000005
                        PAR0 = Arg0
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }

                    Method (SAGP, 2, Serialized)
                    {
                        PINX = 0x80000007
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x70)
                    }

                    Method (GAGP, 1, Serialized)
                    {
                        PINX = 0x80000008
                        PAR0 = Arg0
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }

                    Method (GTBF, 2, Serialized)
                    {
                        PINX = 0x80000009
                        PAR0 = Arg0
                        PAR1 = Arg1
                        ISMI (0x70)
                        Return (PAR1) /* \PAR1 */
                    }
                }

                Scope (\_SB.PCI0.SBRG)
                {
                    Device (ASOC)
                    {
                        Name (_HID, "ATK0110")  // _HID: Hardware ID
                        Name (_UID, 0x01010110)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_INI, 0, NotSerialized)  // _INI: Initialize
                        {
                            G3UP ()
                            G6UP ()
                            CUPI ()
                        }

                        Method (CUPI, 0, NotSerialized)
                        {
                            G3DS [0x06] = GAGP ("CPUN")
                        }

                        Name (MBIF, Package (0x08)
                        {
                            0x03, 
                            "M5A88-M", 
                            0x04010203, 
                            0x03000100, 
                            0xE0010001, 
                            0x02, 
                            Zero, 
                            Zero
                        })
                        Name (ASBF, Buffer (0x0200){})
                        CreateDWordField (ASBF, Zero, ASB0)
                        CreateDWordField (ASBF, 0x04, ASB1)
                        CreateDWordField (ASBF, 0x08, ASB2)
                        CreateDWordField (ASBF, 0x0C, ASB3)
                        CreateDWordField (ASBF, 0x10, ASB4)
                        CreateDWordField (ASBF, 0x14, ASB5)
                        CreateDWordField (ASBF, 0x18, ASB6)
                        Method (GGRP, 1, Serialized)
                        {
                            Name (TTT0, Zero)
                            TTT0 = Arg0
                            If ((TTT0 == Zero))
                            {
                                Return (GRP0) /* \_SB_.PCI0.SBRG.ASOC.GRP0 */
                            }
                            ElseIf ((TTT0 == 0x03))
                            {
                                Return (GRP3) /* \_SB_.PCI0.SBRG.ASOC.GRP3 */
                            }
                            ElseIf ((TTT0 == 0x04))
                            {
                                Return (GRP4) /* \_SB_.PCI0.SBRG.ASOC.GRP4 */
                            }
                            ElseIf ((TTT0 == 0x05))
                            {
                                Return (GRP5) /* \_SB_.PCI0.SBRG.ASOC.GRP5 */
                            }
                            ElseIf ((TTT0 == 0x06))
                            {
                                Return (GRP6) /* \_SB_.PCI0.SBRG.ASOC.GRP6 */
                            }
                            ElseIf ((TTT0 == 0x08))
                            {
                                Return (Zero)
                            }
                            ElseIf ((TTT0 == 0x09))
                            {
                                Return (GRP9) /* \_SB_.PCI0.SBRG.ASOC.GRP9 */
                            }
                            ElseIf ((TTT0 == 0x0B))
                            {
                                Return (GRPB) /* \_SB_.PCI0.SBRG.ASOC.GRPB */
                            }
                            ElseIf ((TTT0 == 0x0E))
                            {
                                Return (GRPE) /* \_SB_.PCI0.SBRG.ASOC.GRPE */
                            }
                            ElseIf ((TTT0 == 0x0F))
                            {
                                Return (GRPF ())
                            }
                            ElseIf ((TTT0 == 0x11))
                            {
                                Return (GR11) /* \_SB_.PCI0.SBRG.ASOC.GR11 */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GITM, 1, Serialized)
                        {
                            CreateDWordField (Arg0, Zero, PRM0)
                            CreateByteField (Arg0, 0x03, GPID)
                            ASB0 = One
                            Name (TTT0, Zero)
                            TTT0 = GPID /* \_SB_.PCI0.SBRG.ASOC.GITM.GPID */
                            If ((TTT0 == Zero))
                            {
                                GIT0 (PRM0)
                            }
                            ElseIf ((TTT0 == 0x03))
                            {
                                GIT3 (PRM0)
                            }
                            ElseIf ((TTT0 == 0x04))
                            {
                                GIT4 (PRM0)
                            }
                            ElseIf ((TTT0 == 0x05))
                            {
                                CreateDWordField (Arg0, 0x04, PRM1)
                                GIT5 (PRM0, PRM1)
                            }
                            ElseIf ((TTT0 == 0x06))
                            {
                                GIT6 (PRM0)
                            }
                            ElseIf ((TTT0 == 0x08))
                            {
                                GIT8 (PRM0)
                            }
                            ElseIf ((TTT0 == 0x09))
                            {
                                GIT9 (PRM0)
                            }
                            ElseIf ((TTT0 == 0x0B))
                            {
                                GITB (PRM0)
                            }
                            ElseIf ((TTT0 == 0x0E))
                            {
                                GITE (PRM0)
                            }
                            ElseIf ((TTT0 == 0x0F))
                            {
                                GITF (PRM0)
                            }
                            ElseIf ((TTT0 == 0x11))
                            {
                                CreateDWordField (Arg0, 0x04, PR11)
                                If (((PRM0 & 0xFFFF) == 0x09))
                                {
                                    GT11 (PRM0, PR11)
                                }
                                Else
                                {
                                    Local0 = Zero
                                    GT11 (PRM0, Local0)
                                }
                            }
                            Else
                            {
                                ASB0 = Zero
                            }

                            Return (ASBF) /* \_SB_.PCI0.SBRG.ASOC.ASBF */
                        }

                        Method (SITM, 1, Serialized)
                        {
                            CreateDWordField (Arg0, Zero, PRM0)
                            CreateDWordField (Arg0, 0x04, PRM1)
                            CreateDWordField (Arg0, 0x08, PRM2)
                            CreateByteField (Arg0, 0x03, GPID)
                            ASB0 = One
                            Name (TTT0, Zero)
                            TTT0 = GPID /* \_SB_.PCI0.SBRG.ASOC.SITM.GPID */
                            If ((TTT0 == Zero))
                            {
                                SIT0 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x03))
                            {
                                SIT3 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x04))
                            {
                                SIT4 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x05))
                            {
                                SIT5 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x06))
                            {
                                SIT6 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x08))
                            {
                                SIT8 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x09))
                            {
                                SIT9 (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x0B))
                            {
                                SITB (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x0E))
                            {
                                SITE (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x0F))
                            {
                                SITF (PRM0, PRM1, PRM2)
                            }
                            ElseIf ((TTT0 == 0x11))
                            {
                                ST11 (PRM0, PRM1, PRM2)
                            }
                            Else
                            {
                                ASB0 = Zero
                            }

                            Return (ASBF) /* \_SB_.PCI0.SBRG.ASOC.ASBF */
                        }
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y04)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.HPET._Y04._BAS, HPT)  // _BAS: Base Address
                        HPT = 0xFED00000
                        Return (CRS) /* \_SB_.PCI0.SBRG.HPET.CRS_ */
                    }
                }

                Device (^PCIE)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x11)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xE0000000,         // Address Base
                            0x10000000,         // Address Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y05._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.PCIE._Y05._LEN, LEN1)  // _LEN: Length
                        BAS1 = PCIB /* \PCIB */
                        LEN1 = PCIL /* \PCIL */
                        Return (CRS) /* \_SB_.PCI0.PCIE.CRS_ */
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0C)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (M2R0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (M2R1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (M2R0) /* \_SB_.PCI0.SBRG.PS2M.M2R0 */
                        }
                        Else
                        {
                            Return (M2R1) /* \_SB_.PCI0.SBRG.PS2M.M2R1 */
                        }
                    }
                }

                Method (PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x04))
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = (One << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Method (PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x03, 0x04))
                }

                Device (UAR1)
                {
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (UHID (Zero))
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (DCRS (Zero, One))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        DSRS (Arg0, Zero)
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (CMPR) /* \_SB_.PCI0.SBRG.UAR1.CMPR */
                    }

                    Name (CMPR, ResourceTemplate ()
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,6,7,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,2,3}
                        }
                        EndDependentFn ()
                    })
                }

                Method (UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x16, 0x04))
                }

                Device (OMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y06)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y07)
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        FixedIO (
                            0x0060,             // Address
                            0x01,               // Length
                            )
                        FixedIO (
                            0x0064,             // Address
                            0x01,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y08)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y09)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (APIC)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._LEN, ML01)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y06._BAS, MB01)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._LEN, ML02)  // _LEN: Length
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.OMSC._Y07._BAS, MB02)  // _BAS: Base Address
                            MB01 = 0xFEC00000
                            ML01 = 0x1000
                            MB02 = 0xFEE00000
                            ML02 = 0x1000
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y08._LEN, ML03)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y08._BAS, MB03)  // _BAS: Base Address
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._LEN, ML04)  // _LEN: Length
                            CreateDWordField (CRS1, \_SB.PCI0.SBRG.OMSC._Y09._BAS, MB04)  // _BAS: Base Address
                            MB03 = 0xFEC00000
                            ML03 = 0x1000
                            MB04 = 0xFEE00000
                            ML04 = 0x1000
                        }

                        Local0 = (0x05 << 0x0A)
                        If ((IOST & Local0))
                        {
                            Return (CRS) /* \_SB_.PCI0.SBRG.OMSC.CRS_ */
                        }
                        Else
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.OMSC.CRS1 */
                        }
                    }
                }

                Device (^^RMEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x000A0000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0A)
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            _Y0B)
                        Memory32Fixed (ReadWrite,
                            0x00100000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0C)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0D)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0A._LEN, LEN1)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._BAS, BAS2)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0B._LEN, LEN2)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0C._LEN, LEN3)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._BAS, BAS4)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.RMEM._Y0D._LEN, LEN4)  // _LEN: Length
                        If (OSFL ()){}
                        Else
                        {
                            If (MG1B)
                            {
                                If ((MG1B > 0x000C0000))
                                {
                                    BAS1 = 0x000C0000
                                    LEN1 = (MG1B - BAS1) /* \_SB_.RMEM._CRS.BAS1 */
                                }
                            }
                            Else
                            {
                                BAS1 = 0x000C0000
                                LEN1 = 0x00020000
                            }

                            If (Local0 = (MG1B + MG1L) /* \MG1L */)
                            {
                                BAS2 = Local0
                                LEN2 = (0x00100000 - BAS2) /* \_SB_.RMEM._CRS.BAS2 */
                            }
                        }

                        LEN3 = (MG2B - 0x00100000)
                        BAS4 = MH1B /* \MH1B */
                        LEN4 = (Zero - BAS4) /* \_SB_.RMEM._CRS.BAS4 */
                        Return (CRS) /* \_SB_.RMEM.CRS_ */
                    }
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00B1,             // Range Minimum
                            0x00B1,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x00,               // Alignment
                            0x40,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y11)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y12)
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y13)
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                        Memory32Fixed (ReadOnly,
                            0xFFB80000,         // Address Base
                            0x00080000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED40000,         // Address Base
                            0x00005000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._MIN, GP00)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._MAX, GP01)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y0E._LEN, GP0L)  // _LEN: Length
                        GP00 = PMBS /* \PMBS */
                        GP01 = PMBS /* \PMBS */
                        GP0L = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y0F._LEN, GP1L)  // _LEN: Length
                            GP10 = SMBB /* \SMBB */
                            GP11 = SMBB /* \SMBB */
                            GP1L = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._MIN, GPB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._MAX, GPB1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y10._LEN, GPBL)  // _LEN: Length
                            GPB0 = SMB0 /* \SMB0 */
                            GPB1 = SMB0 /* \SMB0 */
                            GPBL = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y11._LEN, GP2L)  // _LEN: Length
                            GP20 = GPBS /* \GPBS */
                            GP21 = GPBS /* \GPBS */
                            GP2L = GPLN /* \GPLN */
                        }

                        Local0 = (One << 0x0A)
                        Local1 = (One << 0x0C)
                        Local0 = ((IOST & Local0) | (IOST & Local1))
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y12._LEN, KBL0)  // _LEN: Length
                        CreateByteField (CRS, \_SB.PCI0.SBRG.RMSC._Y13._LEN, KBL1)  // _LEN: Length
                        If ((Local0 == Zero))
                        {
                            KBL0 = One
                            KBL1 = One
                        }

                        If (\AOD.RAMS)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y14._BAS, RADB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.RMSC._Y14._LEN, RADL)  // _LEN: Length
                            RADB = \AOD.RAMB
                            RADL = \AOD.RAMS
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.RMSC.CRS_ */
                    }
                }

                Device (SIOR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (SPIO) /* \SPIO */
                    }

                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y15)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y16)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SPIO != 0x03F0) && (SPIO > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y15._LEN, GPL1)  // _LEN: Length
                            GP10 = SPIO /* \SPIO */
                            GP11 = SPIO /* \SPIO */
                            GPL1 = 0x02
                        }

                        If (IOPB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y16._LEN, GPL2)  // _LEN: Length
                            GP20 = IOPB /* \IOPB */
                            GP21 = IOPB /* \IOPB */
                            GPL2 = IOPL /* \IOPL */
                        }

                        If (IOEB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y17._LEN, GPL3)  // _LEN: Length
                            GP30 = IOEB /* \IOEB */
                            GP31 = IOEB /* \IOEB */
                            GPL3 = IOEL /* \IOEL */
                        }

                        If (IOGB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y18._LEN, GPL4)  // _LEN: Length
                            GP40 = IOGB /* \IOGB */
                            GP41 = IOGB /* \IOGB */
                            GPL4 = IOGL /* \IOGL */
                        }

                        If (IOSB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y19._MIN, GP50)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIOR._Y19._MAX, GP51)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIOR._Y19._LEN, GPL5)  // _LEN: Length
                            GP50 = IOSB /* \IOSB */
                            GP51 = IOSB /* \IOSB */
                            GPL5 = IOSL /* \IOSL */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIOR.CRS_ */
                    }
                }

                Name (DCAT, Package (0x16)
                {
                    One, 
                    0x02, 
                    0x03, 
                    Zero, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0x05, 
                    0x04, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0x0A, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF, 
                    0xFF
                })
                Name (IKEY, Package (0x02)
                {
                    Package (0x04)
                    {
                        0x87, 
                        One, 
                        0x55, 
                        0x55
                    }, 

                    Package (0x04)
                    {
                        0x87, 
                        One, 
                        0x55, 
                        0xAA
                    }
                })
                Name (KBFG, One)
                Name (MSFG, One)
                Name (UR1F, One)
                Method (ENFG, 1, NotSerialized)
                {
                    Local1 = Zero
                    If ((SPIO == 0x2E))
                    {
                        Local1 = Zero
                    }

                    If ((SPIO == 0x4E))
                    {
                        Local1 = One
                    }

                    Local0 = Zero
                    While ((Local0 != 0x04))
                    {
                        INDX = DerefOf (DerefOf (IKEY [Local1]) [Local0])
                        Local0++
                    }

                    LDN = Arg0
                }

                Method (EXFG, 0, NotSerialized)
                {
                    INDX = 0x02
                    DATA = 0x02
                }

                Method (LPTM, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = (OPT0 & 0x02)
                    EXFG ()
                    Return (Local0)
                }

                Method (UHID, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = (OPT0 & 0x70)
                    EXFG ()
                    If (Local0)
                    {
                        Return (0x1005D041)
                    }

                    Return (0x0105D041)
                }

                Method (ORF0, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT0 |= Arg1
                    EXFG ()
                }

                Method (ORF1, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT1 |= Arg1
                    EXFG ()
                }

                Method (ORF2, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT2 |= Arg1
                    EXFG ()
                }

                Method (ANF0, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT0 &= Arg1
                    EXFG ()
                }

                Method (ANF2, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT2 &= Arg1
                    EXFG ()
                }

                Method (ANF4, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT4 &= Arg1
                    EXFG ()
                }

                Method (STF0, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT0 = Arg1
                    EXFG ()
                }

                Method (STF1, 2, NotSerialized)
                {
                    ENFG (Arg0)
                    OPT1 = Arg1
                    EXFG ()
                }

                Method (SIOS, 1, NotSerialized)
                {
                    Debug = "SIOS"
                    GP20 = One
                    If ((Arg0 < 0x05))
                    {
                        ENFG (0x04)
                        ACTR = One
                        EXFG ()
                        If (KBFG)
                        {
                            ORF1 (0x04, 0x08)
                            ORF0 (0x04, 0x08)
                        }
                        Else
                        {
                            ANF0 (0x04, 0xF7)
                        }

                        If (MSFG)
                        {
                            ORF1 (0x04, 0x10)
                            ORF0 (0x04, 0x10)
                        }
                        Else
                        {
                            ANF0 (0x04, 0xEF)
                        }

                        ORF1 (0x04, 0xFF)
                        ANF2 (0x04, 0xB0)
                        ORF2 (0x04, 0x06)
                        ENFG (0x07)
                        If ((Arg0 < 0x04))
                        {
                            OPF8 |= 0x10
                            OPF9 &= 0xF0
                            OPF9 |= 0x02
                        }

                        OP29 &= 0xEF
                        EXFG ()
                    }

                    ENFG (0x07)
                    OP2C |= 0x10
                    EXFG ()
                }

                Method (SIOW, 1, NotSerialized)
                {
                    GP20 = One
                    Debug = "SIOW"
                    ENFG (0x07)
                    OP2C &= 0xEF
                    OPC1 |= One
                    ENFG (0x05)
                    ACTR |= One
                    ENFG (0x06)
                    ACTR |= One
                    ENFG (0x04)
                    STF0 (0x04, Zero)
                    STF1 (0x04, 0xFF)
                    ANF2 (0x04, 0x40)
                    EXFG ()
                }

                Method (SIOH, 0, NotSerialized)
                {
                    Debug = "SIOH"
                }

                OperationRegion (IOID, SystemIO, SPIO, 0x02)
                Field (IOID, ByteAcc, NoLock, Preserve)
                {
                    INDX,   8, 
                    DATA,   8
                }

                IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x07), 
                    LDN,    8, 
                    Offset (0x25), 
                    OP25,   8, 
                    OP26,   8, 
                    OP27,   8, 
                    OP28,   8, 
                    OP29,   8, 
                    Offset (0x2C), 
                    OP2C,   8, 
                    Offset (0x30), 
                    ACTR,   8, 
                    Offset (0x60), 
                    IOAH,   8, 
                    IOAL,   8, 
                    IOH2,   8, 
                    IOL2,   8, 
                    Offset (0x70), 
                    INTR,   8, 
                    Offset (0x74), 
                    DMCH,   8, 
                    Offset (0xC0), 
                    OPC0,   8, 
                    OPC1,   8, 
                    OPC2,   8, 
                    OPC3,   8, 
                    OPC4,   8, 
                    OPC5,   8, 
                    OPC6,   8, 
                    OPC7,   8, 
                    OPC8,   8, 
                    OPC9,   8, 
                    OPCA,   8, 
                    OPCB,   8, 
                    OPCC,   8, 
                    OPCD,   8, 
                    OPCE,   8, 
                    OPCF,   8, 
                    Offset (0xF0), 
                    OPT0,   8, 
                    OPT1,   8, 
                    OPT2,   8, 
                    OPT3,   8, 
                    OPT4,   8, 
                    Offset (0xF8), 
                    OPF8,   8, 
                    OPF9,   8, 
                    OPFA,   8, 
                    OPFB,   8
                }

                Method (PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        KBFG = One
                    }
                    Else
                    {
                        KBFG = Zero
                    }
                }

                Method (PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        MSFG = One
                    }
                    Else
                    {
                        MSFG = Zero
                    }
                }

                Method (CGLD, 1, NotSerialized)
                {
                    Return (DerefOf (DCAT [Arg0]))
                }

                Method (DSTA, 1, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local0 = ACTR /* \_SB_.PCI0.SBRG.ACTR */
                    EXFG ()
                    If ((Local0 == 0xFF))
                    {
                        Return (Zero)
                    }

                    Local0 &= One
                    IOST |= (Local0 << Arg0)
                    If (Local0)
                    {
                        Return (0x0F)
                    }
                    ElseIf (((One << Arg0) & IOST))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (DCNT, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                    {
                        RDMA (Arg0, Arg1, Local1++)
                    }

                    ACTR = Arg1
                    RRIO (Arg0, Arg1, Local1, 0x08)
                    EXFG ()
                }

                Name (CRS1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1C)
                    IRQNoFlags (_Y1A)
                        {}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1B)
                        {}
                })
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1A._INT, IRQM)  // _INT: Interrupts
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y1B._DMA, DMAM)  // _DMA: Direct Memory Access
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1C._MIN, IO11)  // _MIN: Minimum Base Address
                CreateWordField (CRS1, \_SB.PCI0.SBRG._Y1C._MAX, IO12)  // _MAX: Maximum Base Address
                CreateByteField (CRS1, \_SB.PCI0.SBRG._Y1C._LEN, LEN1)  // _LEN: Length
                Name (CRS2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y1F)
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0x00,               // Length
                        _Y20)
                    IRQNoFlags (_Y1D)
                        {6}
                    DMA (Compatibility, NotBusMaster, Transfer8, _Y1E)
                        {2}
                })
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1D._INT, IRQE)  // _INT: Interrupts
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1E._DMA, DMAE)  // _DMA: Direct Memory Access
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1F._MIN, IO21)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y1F._MAX, IO22)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y1F._LEN, LEN2)  // _LEN: Length
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y20._MIN, IO31)  // _MIN: Minimum Base Address
                CreateWordField (CRS2, \_SB.PCI0.SBRG._Y20._MAX, IO32)  // _MAX: Maximum Base Address
                CreateByteField (CRS2, \_SB.PCI0.SBRG._Y20._LEN, LEN3)  // _LEN: Length
                Method (DCRS, 2, NotSerialized)
                {
                    ENFG (CGLD (Arg0))
                    IO11 = (IOAH << 0x08)
                    IO11 |= IOAL /* \_SB_.PCI0.SBRG.IO11 */
                    IO12 = IO11 /* \_SB_.PCI0.SBRG.IO11 */
                    Local0 = (FindSetRightBit (IO11) - One)
                    LEN1 = (One << Local0)
                    If (INTR)
                    {
                        IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.INTR */
                    }
                    Else
                    {
                        IRQM = Zero
                    }

                    If (((DMCH > 0x03) || (Arg1 == Zero)))
                    {
                        DMAM = Zero
                    }
                    Else
                    {
                        Local1 = (DMCH & 0x03)
                        DMAM = (One << Local1)
                    }

                    EXFG ()
                    Return (CRS1) /* \_SB_.PCI0.SBRG.CRS1 */
                }

                Method (DSRS, 2, NotSerialized)
                {
                    CreateWordField (Arg0, 0x09, IRQM)
                    CreateByteField (Arg0, 0x0C, DMAM)
                    CreateWordField (Arg0, 0x02, IO11)
                    ENFG (CGLD (Arg1))
                    Local1 = (IOAH << 0x08)
                    Local1 |= IOAL
                    RRIO (Arg1, Zero, Local1, 0x08)
                    RRIO (Arg1, One, IO11, 0x08)
                    IOAL = (IO11 & 0xFF)
                    IOAH = (IO11 >> 0x08)
                    If (IRQM)
                    {
                        FindSetRightBit (IRQM, Local0)
                        INTR = (Local0 - One)
                    }
                    Else
                    {
                        INTR = Zero
                    }

                    If (DMAM)
                    {
                        FindSetRightBit (DMAM, Local0)
                        DMCH = (Local0 - One)
                    }
                    Else
                    {
                        DMCH = 0x04
                    }

                    EXFG ()
                    DCNT (Arg1, One)
                }

                OperationRegion (GPIO, SystemIO, IOGB, 0x04)
                Field (GPIO, ByteAcc, NoLock, Preserve)
                {
                    GP10,   1, 
                    GP11,   1, 
                    GP12,   1, 
                    GP13,   1, 
                    GO14,   1, 
                    GO15,   1, 
                    GO16,   1, 
                    GO17,   1, 
                    GP20,   1, 
                    GP21,   1, 
                    GP22,   1, 
                    GP23,   1, 
                    GO24,   1, 
                    GO25,   1, 
                    GO26,   1, 
                    GO27,   1, 
                    GP30,   1, 
                    GP31,   1, 
                    GP32,   1, 
                    GP33,   1, 
                    GO34,   1, 
                    GO35,   1, 
                    GO36,   1, 
                    GO37,   1, 
                    GP40,   1, 
                    GP41,   1, 
                    GP42,   1, 
                    GP43,   1, 
                    GO44,   1, 
                    GO45,   1, 
                    GO46,   1, 
                    GO47,   1
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.PCE2, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE3, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE4, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE5, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE6, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE7, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCE9, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEA, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEA.RLAN, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEB, 0x02) // Device Wake
                Notify (\_SB.PCI0.PCEC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.GEC, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC4, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC6, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.SBRG.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.SBRG.SIOH ()
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G0T0, Package (0x07)
        {
            0x00060000, 
            "AP version", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T3, Package (0x07)
        {
            0x00020003, 
            "CnQ Flag", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T7, Package (0x07)
        {
            0x00070007, 
            "P State Control", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T4, Package (0x07)
        {
            0x00070004, 
            "New CPU Installed", 
            One, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (G0T8, Package (0x07)
        {
            0x00060008, 
            "Item capability", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G0T9, Package (0x07)
        {
            0x00060009, 
            "Item control", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G0TA, Package (0x07)
        {
            0x0006000A, 
            "GPU control", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G0GV, Package (0x07)
        {
            0x0006006F, 
            "GPU Booster Version", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRP0, Package (0x08)
        {
            G0T0, 
            G0T3, 
            G0T7, 
            G0T4, 
            G0T8, 
            G0T9, 
            G0TA, 
            G0GV
        })
        Method (GIT0, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero)){}
            ElseIf ((TTT0 == 0x03))
            {
                ASB1 = GNVS (0x16EF)
            }
            ElseIf ((TTT0 == 0x04))
            {
                ASB1 = GNVS (0x17C3)
            }
            ElseIf ((TTT0 == 0x08))
            {
                Local0 = Zero
                Local0 |= 0x02
                If (IUCP ())
                {
                    Local0 |= 0x10
                }

                Local0 |= 0x40
                ASB1 = Local0
            }
            ElseIf ((TTT0 == 0x09))
            {
                Local0 = Zero
                Local0 |= 0x02
                ASB1 = Local0
            }
            ElseIf ((TTT0 == 0x0A))
            {
                ASB1 = 0x02
            }
            ElseIf ((TTT0 == 0x6F))
            {
                ASB1 = 0x20000000
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT0, 3, NotSerialized)
        {
            If ((Arg2 & 0xFFFF))
            {
                Name (TTT0, Zero)
                TTT0 = (Arg0 & 0xFFFF)
                If ((TTT0 == Zero)){}
                ElseIf ((TTT0 == One)){}
                ElseIf ((TTT0 == 0x03)){}
                ElseIf ((TTT0 == 0x07))
                {
                    SNVS (0x16EF, Arg1)
                }
                ElseIf ((TTT0 == 0x04))
                {
                    SNVS (0x17C3, Arg1)
                    ASB0 = 0x03
                }
                ElseIf ((TTT0 == 0x09))
                {
                    TMCM (((Arg1 & 0x10) >> 0x04))
                }
                Else
                {
                    ASB0 = Zero
                }
            }
            Else
            {
                ASB0 = 0x03
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G3C0, Package (0x07)
        {
            0x03010011, 
            "CPU Frequency", 
            Zero, 
            0x64, 
            0x4E20, 
            0x64, 
            0x01C3
        })
        Name (G3C1, Package (0x07)
        {
            0x03020012, 
            "CPU Voltage", 
            Zero, 
            Zero, 
            0xFF001F40, 
            0x7D, 
            0x4A
        })
        Name (G3C2, Package (0x07)
        {
            0x03060013, 
            "CPU Ratio", 
            Zero, 
            0x10, 
            0xFF000028, 
            0x05, 
            0x2B
        })
        Name (G3C3, Package (0x07)
        {
            0x03020015, 
            "CPU/NB Voltage", 
            Zero, 
            Zero, 
            0x04B0, 
            0x0A, 
            0x13
        })
        Name (G3SF, Package (0x07)
        {
            0x03010017, 
            "CPU Safeboot Frequency", 
            0x40000000, 
            Zero, 
            Zero, 
            One, 
            0x0100
        })
        Name (G3D1, Package (0x0B)
        {
            0x03080031, 
            "DRAM Frequency", 
            0x40000000, 
            Zero, 
            0x06, 
            "Auto", 
            "800 MHz", 
            "1066 MHz", 
            "1333 MHz", 
            "1600 MHz", 
            "1866 MHz"
        })
        Name (G3D2, Package (0x07)
        {
            0x03020032, 
            "DRAM Voltage", 
            Zero, 
            Zero, 
            0xFE01D4C0, 
            0x03E8, 
            0x7D
        })
        Name (G353, Package (0x07)
        {
            0x03020053, 
            "VDDA Voltage", 
            Zero, 
            Zero, 
            0xFE03D090, 
            0x2710, 
            0x04
        })
        Name (G354, Package (0x07)
        {
            0x03020054, 
            "HT Voltage", 
            Zero, 
            Zero, 
            0xFE01D4C0, 
            0x03E8, 
            0x15
        })
        Name (G3EF, Package (0x07)
        {
            0x03010060, 
            "GPU Engine Clock", 
            0x20000000, 
            0x012C, 
            0x4E20, 
            0x64, 
            0x0709
        })
        Name (G361, Package (0x07)
        {
            0x03020061, 
            "GPU Voltage", 
            Zero, 
            Zero, 
            0xFE01ADB0, 
            0x03E8, 
            0x40
        })
        Name (G3SP, Package (0x06)
        {
            0x03010063, 
            "GPU switch Pstate", 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G3SQ, Package (0x07)
        {
            0x03010065, 
            "GPU SidePort Clock", 
            0x40000000, 
            Zero, 
            0x000208B4, 
            0x64, 
            0x029C
        })
        Name (G3SR, Package (0x06)
        {
            0x03010067, 
            "GPU Pstate", 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G356, Package (0x07)
        {
            0x03020056, 
            "SB Voltage", 
            Zero, 
            Zero, 
            0x044C, 
            0x64, 
            0x04
        })
        Name (G357, Package (0x07)
        {
            0x03020057, 
            "NB1.8 Voltage", 
            Zero, 
            Zero, 
            0x0708, 
            0x64, 
            0x02
        })
        Name (G3DS, Package (0x07)
        {
            0x030600F0, 
            "Device Select", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRP3, Package (0x11)
        {
            G3C0, 
            G3C1, 
            G3C2, 
            G3C3, 
            G3SF, 
            G3D1, 
            G3D2, 
            G353, 
            G354, 
            G361, 
            G3EF, 
            G3SP, 
            G3SQ, 
            G3SR, 
            G356, 
            G357, 
            G3DS
        })
        Name (GODS, Zero)
        Name (BODS, Zero)
        Name (TGRT, Zero)
        Name (TGR2, Zero)
        Name (COCS, Zero)
        Name (CDRA, Zero)
        Name (CVID, Zero)
        Name (XMPV, Zero)
        Name (VDDQ, Zero)
        Name (VDCA, Zero)
        Name (CLKB, Buffer (0x24)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x00, 0x00                           // ....
        })
        CreateByteField (CLKB, 0x09, CB09)
        CreateByteField (CLKB, 0x0A, CB10)
        Name (TPBF, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00                                       // ..
        })
        Method (G3UP, 0, NotSerialized)
        {
            G3C0 [0x04] = (0x64 * 0x64)
            Local0 = GAGP (0x0313)
            TGRT = Local0
            Local0 = GAGP (0x03FF)
            TGR2 = Local0
            COCS = GECR (0x33)
            G3C2 [0x03] = (GDCR () - 0x08)
            CPUN ()
            RMIN ()
            RINT ()
            RNUM ()
            C1UP ()
            C3UP ()
            D2UP ()
            GCDR ()
            CVID = GAGP (0x0312)
            UGPS ()
            Local0 = GNBV ()
            TPBF [0x04] = Local0
            GPS0 = Local0
            IGPS = Local0
            INGP ()
            SCLL ()
        }

        OperationRegion (PCAA, SystemMemory, ATIE, 0x02000000)
        Field (PCAA, AnyAcc, NoLock, Preserve)
        {
            Offset (0x8000), 
            GPUE,   32, 
            Offset (0xC0089), 
            HTFQ,   4
        }

        Method (UGPS, 0, NotSerialized)
        {
            If ((GPUE == 0x96021043))
            {
                If ((GNVS (0x1728) == Zero))
                {
                    G3EF [0x02] = 0x20000000
                }
                Else
                {
                    G3EF [0x02] = 0x40000000
                }
            }
            Else
            {
                G3EF [0x02] = 0x40000000
            }
        }

        Method (RDAT, 1, NotSerialized)
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                CVID = GAGP (0x0312)
            }

            If ((Arg0 == 0x03))
            {
                If ((GNVS (0x1779) || !(COCS & 0x20)))
                {
                    If (GNVS (0x92E8))
                    {
                        SSGP (0x72, Zero)
                    }
                }
            }
        }

        Method (CPUN, 0, NotSerialized)
        {
            Local0 = GAGP ("CPUN")
            G3DS [0x06] = Local0
        }

        Method (RMIN, 0, NotSerialized)
        {
            G3C2 [0x04] = GAGP ("RMIN")
        }

        Method (RINT, 0, NotSerialized)
        {
            G3C2 [0x05] = GAGP ("RINT")
        }

        Method (RNUM, 0, NotSerialized)
        {
            G3C2 [0x06] = GAGP ("RNUM")
        }

        Method (C1UP, 0, NotSerialized)
        {
            G3C1 [0x04] = GAGP ("C1MI")
            G3C1 [0x05] = GAGP ("C1IN")
            G3C1 [0x06] = GAGP ("C1NU")
            G3C1 [0x03] = GDVD ()
        }

        Method (GDVD, 0, NotSerialized)
        {
            Local0 = 0x60
            Return (Local0)
        }

        Method (C3UP, 0, NotSerialized)
        {
            G3C3 [0x04] = GAGP ("C3MI")
            G3C3 [0x05] = GAGP ("C3IN")
            G3C3 [0x06] = GAGP ("C3NU")
            G3C3 [0x03] = GDND ()
        }

        Method (GDND, 0, NotSerialized)
        {
            Local0 = 0x60
            Return (Local0)
        }

        Method (D2UP, 0, NotSerialized)
        {
            Local0 = R2YT (0x2A, 0x03)
            If ((Local0 & 0x80))
            {
                Local0 &= 0x7F
                Local0 = (0x1E - Local0)
            }
            Else
            {
                Local0 += 0x1E
            }

            G3D2 [0x03] = Local0
            TPBF [0x02] = Local0
        }

        Method (GCDR, 0, NotSerialized)
        {
            If (GNVS (0x2646))
            {
                Local0 = (GNVS (0x47E0) - 0x02)
            }
            Else
            {
                Name (TTT0, Zero)
                TTT0 = (GNVS (0x47B8) & 0x0F)
                If ((TTT0 == 0x05))
                {
                    Local0 = One
                }
                ElseIf ((TTT0 == 0x0F))
                {
                    Local0 = 0x02
                }
                ElseIf ((TTT0 == 0x0C))
                {
                    Local0 = 0x03
                }
                ElseIf ((TTT0 == 0x0A))
                {
                    Local0 = 0x04
                }
                Else
                {
                    Local0 = Zero
                }
            }

            CDRA = Local0
        }

        Method (GIT3, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x11))
            {
                ASB1 = EFSB (Zero, Zero)
            }
            ElseIf ((TTT0 == 0x12))
            {
                ASB1 = GAGP (0x0312)
            }
            ElseIf ((TTT0 == 0x13))
            {
                If ((GODS != 0xFF))
                {
                    BODS = GODS /* \_SB_.PCI0.SBRG.ASOC.GODS */
                    If ((BODS >= 0x04))
                    {
                        Local1 = GAGP (0x03FF)
                        Local5 = ((BODS - 0x04) << 0x03)
                    }
                    Else
                    {
                        Local1 = GAGP (0x0313)
                        Local5 = (BODS << 0x03)
                    }

                    Local0 = (Local1 >> Local5)
                    ASB1 = (Local0 & 0xFF)
                }
            }
            ElseIf ((TTT0 == 0x15))
            {
                ASB1 = GAGP (0x0315)
            }
            ElseIf ((TTT0 == 0x17))
            {
                ASB1 = GNVS (0x8348)
            }
            ElseIf ((TTT0 == 0x31))
            {
                ASB1 = CDRA /* \_SB_.PCI0.SBRG.ASOC.CDRA */
            }
            ElseIf ((TTT0 == 0x32))
            {
                ASB1 = GDRV ()
                TPBF [0x02] = ASB1 /* \_SB_.PCI0.SBRG.ASOC.ASB1 */
            }
            ElseIf ((TTT0 == 0x53))
            {
                ASB1 = GCVV ()
            }
            ElseIf ((TTT0 == 0x54))
            {
                ASB1 = GHTV ()
                TPBF [0x03] = ASB1 /* \_SB_.PCI0.SBRG.ASOC.ASB1 */
            }
            ElseIf ((TTT0 == 0x61))
            {
                ASB1 = GPS0 /* \_SB_.PCI0.SBRG.ASOC.GPS0 */
            }
            ElseIf ((TTT0 == 0x56))
            {
                ASB1 = GSBV ()
            }
            ElseIf ((TTT0 == 0x57))
            {
                ASB1 = GN18 ()
            }
            ElseIf ((TTT0 == 0xF0)){}
            Else
            {
                ASB0 = Zero
            }
        }

        Name (GPS0, Zero)
        Name (GPS1, 0x85)
        Method (SIT3, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x11))
            {
                If ((Arg2 & 0x02))
                {
                    EFSB (One, Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0xA2B8, (Arg1 + 0x64))
                    If ((GNVS (0x455C) == One))
                    {
                        SNVS (0x455C, Zero)
                    }
                }
            }
            ElseIf ((TTT0 == 0x12))
            {
                If ((Arg2 & 0x02))
                {
                    CVID = Arg1
                    SAGP (0x0312, Arg1)
                }

                If ((Arg2 & One))
                {
                    If ((GNVS (0x1779) || !(COCS & 0x20)))
                    {
                        SNVS (0x92E8, Arg1++)
                    }
                    Else
                    {
                        If ((Arg1 > 0x60))
                        {
                            SNVS (0x8368, (Arg1 - 0x60))
                            Local0 = Zero
                        }
                        Else
                        {
                            SNVS (0x8368, (0x60 - Arg1))
                            Local0 = One
                        }

                        SNVS (0x177A, Local0)
                    }
                }
            }
            ElseIf ((TTT0 == 0x13))
            {
                If ((Arg2 & 0x02))
                {
                    If ((GODS != 0xFF))
                    {
                        If ((GODS >= 0x04))
                        {
                            Local5 = ((GODS - 0x04) << 0x03)
                            Local0 = (Arg1 << Local5)
                            Local1 = (0xFF << Local5)
                            Local1 = ~Local1
                            TGR2 &= Local1
                            TGR2 |= Local0
                        }
                        Else
                        {
                            Local5 = (GODS << 0x03)
                            Local0 = (Arg1 << Local5)
                            Local1 = (0xFF << Local5)
                            Local1 = ~Local1
                            TGRT &= Local1
                            TGRT |= Local0
                        }
                    }
                    Else
                    {
                        Local0 = TGRT /* \_SB_.PCI0.SBRG.ASOC.TGRT */
                        SAGP (0x0313, Local0)
                        Local0 = TGR2 /* \_SB_.PCI0.SBRG.ASOC.TGR2 */
                        SAGP (0x03FF, Local0)
                    }
                }

                If ((Arg2 & One))
                {
                    SNVS (0x63C0, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0x15))
            {
                If ((Arg2 & 0x02))
                {
                    SAGP (0x0315, Arg1)
                }

                If ((Arg2 & One))
                {
                    If ((GNVS (0x1779) || !(COCS & 0x20)))
                    {
                        SNVS (0x9308, Arg1++)
                    }
                    Else
                    {
                        If ((Arg1 > 0x60))
                        {
                            SNVS (0x8370, (Arg1 - 0x60))
                            Local0 = Zero
                        }
                        Else
                        {
                            SNVS (0x8370, (0x60 - Arg1))
                            Local0 = One
                        }

                        SNVS (0x177B, Local0)
                    }
                }
            }
            ElseIf ((TTT0 == 0x17))
            {
                SNVS (0x8348, Arg1)
                If ((Arg1 == 0xFF))
                {
                    If (!Acquire (^^EC0.MUEC, 0xFFFF))
                    {
                        ^^EC0.ECAT = Zero
                        Release (^^EC0.MUEC)
                    }
                }
            }
            ElseIf ((TTT0 == 0x31))
            {
                If ((Arg2 & One))
                {
                    If (Arg1)
                    {
                        SNVS (0x2646, 0x02)
                        SNVS (0x47E0, (Arg1 + 0x02))
                        SNVS (0x4568, (Arg1 + 0x03))
                    }
                    Else
                    {
                        SNVS (0x2646, Zero)
                        SNVS (0x47E0, 0x03)
                        SNVS (0x4568, Zero)
                    }

                    ASB0 |= 0x02
                }
            }
            ElseIf ((TTT0 == 0x32))
            {
                If ((Arg2 & 0x02))
                {
                    SDRV (Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0x8380, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0x53))
            {
                If ((Arg2 & 0x02))
                {
                    SCVV (Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0x7398, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0x54))
            {
                If ((Arg2 & 0x02))
                {
                    SHTV (Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0x8388, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0x61))
            {
                If ((Arg2 & 0x02))
                {
                    If (!Acquire (^^EC0.MUEC, 0xFFFF))
                    {
                        ^^EC0.FGAM = (^^EC0.FGAM & 0xFE)
                        Release (^^EC0.MUEC)
                    }

                    SNBV (Arg1)
                    GPS0 = Arg1
                }

                If ((Arg2 & One))
                {
                    SNVS (0x8390, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0x63)){}
            ElseIf ((TTT0 == 0x67))
            {
                Local0 = Arg1
                If ((Arg1 & 0x1000))
                {
                    (Local0 & 0xFFFEFFFF)
                    GPS1 = Local0
                }
                Else
                {
                    (Local0 & 0xFFFEFFFF)
                    GPS0 = Local0
                }
            }
            ElseIf ((TTT0 == 0x56))
            {
                If ((Arg2 & 0x02))
                {
                    SSBV (Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0x3658, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0x57))
            {
                If ((Arg2 & 0x02))
                {
                    SN18 (Arg1)
                }

                If ((Arg2 & One))
                {
                    SNVS (0x365B, Arg1++)
                }
            }
            ElseIf ((TTT0 == 0xF0))
            {
                GODS = Arg1
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (EFSB, 2, Serialized)
        {
            Local0 = Zero
            If (Arg0)
            {
                DCMN (Arg1)
            }
            Else
            {
                Local0 = GCMN ()
            }

            Return (Local0)
        }

        Name (TFSB, 0xC8)
        Method (IFSB, 0, NotSerialized)
        {
            TFSB = GNVS (0xA2B8)
        }

        Method (GCMN, 0, NotSerialized)
        {
            RSMB (0xD2, Zero, 0x1F)
            CLKB [0x07] = 0x1F
            WSMB (0xD2, Zero, 0x08)
            RSMB (0xD2, Zero, 0x1F)
            Local0 = GVCO (0x0B, 0x0C, 0x1C, 0x00022F4C)
            Divide (Local0, 0x4E20, Local1, Local0)
            If ((Local1 >= 0x2710))
            {
                Local0 += One
            }

            Local0 -= 0x64
            Return (Local0)
        }

        Method (DCMN, 1, NotSerialized)
        {
            Local1 = (Arg0 + 0x64)
            TFSB = Local1
            RSMB (0xD2, Zero, 0x1F)
            Local1 *= 0x07D0
            MNCC (Local1, 0x37EE)
            CLKB [0x05] = (DerefOf (CLKB [0x05]) & 0xDF
                )
            WSMB (0xD2, Zero, 0x06)
            CLKB [0x0B] = (((NVCO << 0x05) & 0xC0
                ) | MVCO)
            CLKB [0x0C] = ((NVCO >> 0x03) & 0xFF)
            CLKB [0x1C] = ((DerefOf (CLKB [0x1C]) & 0x7F
                ) | ((NVCO << 0x07) & 0x80))
            CLKB [0x05] = (DerefOf (CLKB [0x05]) | 0x20
                )
            WSMB (0xD2, Zero, 0x1F)
        }

        Name (NVCO, Zero)
        Name (MVCO, Zero)
        Method (MNCC, 2, NotSerialized)
        {
            Local0 = Arg1
            Local1 = CABS (Arg0, Arg1)
            Local2 = 0x09
            While ((Local2 < 0x3F))
            {
                Local3 = (((Arg0 * Local2) / Arg1) + 0x02)
                If ((Local3 > 0x0800))
                {
                    Local3 = 0x0800
                }

                If ((((Arg0 * Local2) / Arg1) > 0x02))
                {
                    Local4 = (((Arg0 * Local2) / Arg1) - 0x02)
                    If ((Local4 < 0x02))
                    {
                        Local4 = 0x02
                    }
                }
                Else
                {
                    Local4 = 0x02
                }

                While ((Local4 <= Local3))
                {
                    Local0 = ((Arg1 * Local4) / Local2)
                    Local5 = CABS (Arg0, Local0)
                    If ((Local5 < Local1))
                    {
                        Debug = "N"
                        Debug = Local4
                        Debug = "M"
                        Debug = Local2
                        Debug = "Diff"
                        Debug = Local5
                        NVCO = Local4
                        MVCO = Local2
                        Local1 = Local5
                        If ((Local5 < 0x012C))
                        {
                            Break
                        }
                    }

                    Local4++
                }

                Local2++
            }
        }

        Method (GVCO, 4, NotSerialized)
        {
            Local0 = (DerefOf (CLKB [Arg2]) & 0x80)
            Local0 >>= 0x07
            Local1 = (DerefOf (CLKB [Arg0]) & 0xC0)
            Local1 >>= 0x05
            Local2 = (DerefOf (CLKB [Arg1]) & 0xFF)
            Local2 <<= 0x03
            Local0 |= Local1
            Local0 |= Local2
            Local1 = (DerefOf (CLKB [Arg0]) & 0x3F)
            Local2 = (Arg3 * Local0)
            Local3 = (Local2 / Local1)
            Return (Local3)
        }

        Method (CABS, 2, NotSerialized)
        {
            If ((Arg0 < Arg1))
            {
                Return ((Arg1 - Arg0))
            }
            Else
            {
                Return ((Arg0 - Arg1))
            }
        }

        OperationRegion (SIOG, SystemIO, IO1B, 0x08)
        Field (SIOG, ByteAcc, NoLock, Preserve)
        {
            GP1X,   8, 
            GP2X,   8, 
            GP3X,   8, 
            GP4X,   8, 
            GP5X,   8, 
            GP6X,   8, 
            GP7X,   8, 
            GP8X,   8
        }

        Method (SSGP, 2, NotSerialized)
        {
            ENFG (0x07)
            Divide (Arg0, 0x10, Local0, Local1)
            Local0 = (One << Local0)
            Name (TTT0, Zero)
            TTT0 = Local1
            If ((TTT0 == One))
            {
                OPC0 |= Local0
                If (Arg1)
                {
                    OPC8 &= ~Local0
                    GP1X |= Local0
                }
                Else
                {
                    OPC8 |= Local0
                    GP1X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x02))
            {
                OPC1 |= Local0
                If (Arg1)
                {
                    OPC9 &= ~Local0
                    GP2X |= Local0
                }
                Else
                {
                    OPC9 |= Local0
                    GP2X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x03))
            {
                OPC2 |= Local0
                If (Arg1)
                {
                    OPCA &= ~Local0
                    GP3X |= Local0
                }
                Else
                {
                    OPCA |= Local0
                    GP3X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x04))
            {
                OPC3 |= Local0
                If (Arg1)
                {
                    OPCB &= ~Local0
                    GP4X |= Local0
                }
                Else
                {
                    OPCB |= Local0
                    GP4X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x05))
            {
                OPC4 |= Local0
                If (Arg1)
                {
                    OPCC &= ~Local0
                    GP5X |= Local0
                }
                Else
                {
                    OPCC |= Local0
                    GP5X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x06))
            {
                OPC5 |= Local0
                If (Arg1)
                {
                    OPCD &= ~Local0
                    GP6X |= Local0
                }
                Else
                {
                    OPCD |= Local0
                    GP6X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x07))
            {
                OPC6 |= Local0
                If (Arg1)
                {
                    OPCE &= ~Local0
                    GP7X |= Local0
                }
                Else
                {
                    OPCE |= Local0
                    GP7X &= ~Local0
                }
            }
            ElseIf ((TTT0 == 0x08))
            {
                OPC7 |= Local0
                If (Arg1)
                {
                    OPCF &= ~Local0
                    GP8X |= Local0
                }
                Else
                {
                    OPCF |= Local0
                    GP8X &= ~Local0
                }
            }
            Else
            {
                Local0 = 0xFF
            }

            EXFG ()
        }

        Method (GSGP, 1, NotSerialized)
        {
            ENFG (0x07)
            Divide (Arg0, 0x10, Local0, Local1)
            Name (TTT0, Zero)
            TTT0 = Local1
            If ((TTT0 == One))
            {
                Local2 = OPC8 /* \_SB_.PCI0.SBRG.OPC8 */
            }
            ElseIf ((TTT0 == 0x02))
            {
                Local2 = OPC9 /* \_SB_.PCI0.SBRG.OPC9 */
            }
            ElseIf ((TTT0 == 0x03))
            {
                Local2 = OPCA /* \_SB_.PCI0.SBRG.OPCA */
            }
            ElseIf ((TTT0 == 0x04))
            {
                Local2 = OPCB /* \_SB_.PCI0.SBRG.OPCB */
            }
            ElseIf ((TTT0 == 0x05))
            {
                Local2 = OPCC /* \_SB_.PCI0.SBRG.OPCC */
            }
            ElseIf ((TTT0 == 0x06))
            {
                Local2 = OPCD /* \_SB_.PCI0.SBRG.OPCD */
            }
            ElseIf ((TTT0 == 0x07))
            {
                Local2 = OPCE /* \_SB_.PCI0.SBRG.OPCE */
            }
            ElseIf ((TTT0 == 0x08))
            {
                Local2 = OPCF /* \_SB_.PCI0.SBRG.OPCF */
            }
            Else
            {
                Local2 = 0xFF
            }

            EXFG ()
            Return (((Local2 >> Local0) & One))
        }

        Method (SDRV, 1, NotSerialized)
        {
            If (~(Arg0 == DerefOf (TPBF [0x02])))
            {
                TPBF [0x02] = Arg0
                If ((Arg0 >= 0x1E))
                {
                    Local0 = (Arg0 - 0x1E)
                }
                Else
                {
                    Local0 = (0x9E - Local0)
                }

                W2YT (0x2A, 0x03, Local0)
            }

            Return (One)
        }

        Method (GDRV, 0, NotSerialized)
        {
            Local0 = R2YT (0x2A, 0x03)
            Local1 = Local0
            If ((Local0 & 0x80))
            {
                Local0 &= 0x7F
                Local0 = (0x0F - Local0)
            }
            Else
            {
                Local0 += 0x1E
            }

            Return (Local0)
        }

        Method (SHTV, 1, NotSerialized)
        {
            If (~(Arg0 == DerefOf (TPBF [0x03])))
            {
                W2YT (0x2A, 0x02, Arg0)
            }

            Return (One)
        }

        Method (GHTV, 0, NotSerialized)
        {
            Local0 = R2YT (0x2A, 0x02)
            Return (Local0)
        }

        Method (SNBV, 1, NotSerialized)
        {
            If (~(Arg0 == DerefOf (TPBF [0x04])))
            {
                W2YT (0x2A, One, Arg0)
                TPBF [0x04] = Arg0
                Sleep (0x64)
            }

            Return (One)
        }

        Method (GNBV, 0, NotSerialized)
        {
            Local0 = R2YT (0x2A, One)
            Return (Local0)
        }

        Name (TSBV, Package (0x02)
        {
            Package (0x02)
            {
                0x26, 
                One
            }, 

            Package (0x02)
            {
                0x50, 
                0x02
            }
        })
        Method (SSBV, 1, NotSerialized)
        {
            If ((Arg0 > 0x03))
            {
                Arg0 += One
            }

            Local0 = One
            If ((Arg0 & One))
            {
                Local0 = Zero
            }

            SSGP (DerefOf (DerefOf (TSBV [Zero]) [Zero]), Local0)
            Local1 = (Arg0 >> One)
            Local0 = One
            If ((Local1 & One))
            {
                Local0 = Zero
            }

            SSGP (DerefOf (DerefOf (TSBV [One]) [Zero]), Local0)
        }

        Method (GSBV, 0, NotSerialized)
        {
            Local0 = Zero
            If (GSGP (DerefOf (DerefOf (TSBV [Zero]) [Zero])))
            {
                Local0 += DerefOf (DerefOf (TSBV [Zero]) [One])
            }

            If (GSGP (DerefOf (DerefOf (TSBV [One]) [Zero])))
            {
                Local0 += DerefOf (DerefOf (TSBV [One]) [One])
            }

            Return (Local0)
        }

        Name (TN18, Package (0x01)
        {
            Package (0x02)
            {
                0x17, 
                One
            }
        })
        Method (SN18, 1, NotSerialized)
        {
            If ((Arg0 > 0x03))
            {
                Arg0 += One
            }

            Local0 = One
            If ((Arg0 & One))
            {
                Local0 = Zero
            }

            SSGP (DerefOf (DerefOf (TN18 [Zero]) [Zero]), Local0)
        }

        Method (GN18, 0, NotSerialized)
        {
            Local0 = Zero
            If (GSGP (DerefOf (DerefOf (TN18 [Zero]) [Zero])))
            {
                Local0 += DerefOf (DerefOf (TN18 [Zero]) [One])
            }

            Return (Local0)
        }

        Name (GCVT, Package (0x02)
        {
            Package (0x02)
            {
                0x30, 
                One
            }, 

            Package (0x02)
            {
                0x27, 
                0x02
            }
        })
        Method (SCVV, 1, NotSerialized)
        {
            Local0 = One
            If ((Arg0 & One))
            {
                Local0 = Zero
            }

            SSGP (DerefOf (DerefOf (GCVT [Zero]) [Zero]), Local0)
            Local1 = (Arg0 >> One)
            Local0 = One
            If ((Local1 & One))
            {
                Local0 = Zero
            }

            SSGP (DerefOf (DerefOf (GCVT [One]) [Zero]), Local0)
        }

        Method (GCVV, 0, NotSerialized)
        {
            Local0 = Zero
            If (GSGP (DerefOf (DerefOf (GCVT [Zero]) [Zero])))
            {
                Local0 += DerefOf (DerefOf (GCVT [Zero]) [One])
            }

            If (GSGP (DerefOf (DerefOf (GCVT [One]) [Zero])))
            {
                Local0 += DerefOf (DerefOf (GCVT [One]) [One])
            }

            Return (Local0)
        }

        Method (WBYT, 3, NotSerialized)
        {
            Arg0 &= 0xFE
            ASCM (Arg0, Arg1, Arg2, 0x08)
        }

        Method (W2YT, 3, NotSerialized)
        {
            Arg0 &= 0xFE
            A2CM (Arg0, Arg1, Arg2, 0x08)
        }

        Method (RBYT, 2, NotSerialized)
        {
            Arg0 |= One
            Return ((ASCM (Arg0, Arg1, Zero, 0x08) & 0xFF))
        }

        Method (R2YT, 2, NotSerialized)
        {
            Arg0 |= One
            Return ((A2CM (Arg0, Arg1, Zero, 0x08) & 0xFF))
        }

        OperationRegion (SMRG, SystemIO, SMB0, 0x30)
        Field (SMRG, ByteAcc, NoLock, Preserve)
        {
            HSTS,   8, 
            SSTS,   8, 
            HSTC,   8, 
            HCMD,   8, 
            HADR,   8, 
            HDT0,   8, 
            HDT1,   8, 
            BLKD,   8, 
            Offset (0x20), 
            H2TS,   8, 
            S2TS,   8, 
            H2TC,   8, 
            H2MD,   8, 
            H2DR,   8, 
            H2T0,   8, 
            H2T1,   8
        }

        Method (ASCM, 4, Serialized)
        {
            Local0 = 0x05
            While (Local0--)
            {
                HSTS = 0x1E
                Stall (0x0A)
                While (((HSTS & One) && One))
                {
                    HSTS = 0x1E
                    Stall (0x0A)
                }

                HCMD = Arg1
                Stall (0x0A)
                HADR = Arg0
                Stall (0x0A)
                Local2 = (Arg0 & One)
                HSTC = Arg3
                Stall (0x0A)
                HDT0 = Arg2
                Stall (0x0A)
                HSTS = 0x1E
                Stall (0x0A)
                While (((HSTS & One) && One))
                {
                    HSTS = 0x1E
                    Stall (0x0A)
                }

                HSTC |= 0x40
                Stall (0x0A)
                Local1 = 0xFFFF
                While (((HSTS & One) == One))
                {
                    Stall (0x14)
                }

                If ((HSTS & 0x1C))
                {
                    Return (Ones)
                }

                If (Local2)
                {
                    Return (HDT0) /* \_SB_.PCI0.SBRG.ASOC.HDT0 */
                }
            }

            Return (Ones)
        }

        Method (A2CM, 4, Serialized)
        {
            Local0 = 0x05
            While (Local0--)
            {
                Local1 = 0xFFFF
                While (((H2TS & One) && Local1--))
                {
                    Stall (0x0A)
                }

                H2TS = 0x1E
                Stall (0x0A)
                H2MD = Arg1
                Stall (0x0A)
                H2DR = Arg0
                Stall (0x0A)
                H2TC = Arg3
                Stall (0x0A)
                H2T0 = Arg2
                Stall (0x0A)
                H2TC |= 0x40
                Stall (0x0A)
                Local1 = 0xFFFF
                While (Local1--)
                {
                    If (((H2TS & 0x7F) == Zero))
                    {
                        Stall (0x0A)
                    }
                    Else
                    {
                        Local1 = One
                    }
                }

                Local1 = 0xFFFF
                While (Local1--)
                {
                    If (((H2TS & One) && One))
                    {
                        Stall (0x0A)
                    }
                    Else
                    {
                        Local1 = One
                    }
                }

                If ((Arg0 & One))
                {
                    Return (H2T0) /* \_SB_.PCI0.SBRG.ASOC.H2T0 */
                }

                If ((H2TS && 0x02))
                {
                    Local0 = One
                }
            }

            Return (Ones)
        }

        Method (VDLC, 1, Serialized)
        {
            If ((GNVS (0x57F0) == 0x05))
            {
                If ((Arg0 == One))
                {
                    ^^EC0.ECBW (0x40, 0x0A, Zero)
                    ^^EC0.ECBW (0x40, 0x0B, Zero)
                    ^^EC0.ECBW (0x40, 0x0C, Zero)
                    ^^EC0.ECBW (0x40, 0x0D, Zero)
                }
                Else
                {
                    ^^EC0.ECBW (0x40, 0x0A, 0x06)
                    ^^EC0.ECBW (0x40, 0x0B, 0x06)
                    ^^EC0.ECBW (0x40, 0x0C, 0x06)
                    ^^EC0.ECBW (0x40, 0x0D, 0x06)
                }

                Local0 = One
            }
            Else
            {
                ^^EC0.ECBW (0x40, 0x0A, Zero)
                ^^EC0.ECBW (0x40, 0x0B, Zero)
                ^^EC0.ECBW (0x40, 0x0C, Zero)
                ^^EC0.ECBW (0x40, 0x0D, Zero)
                Local0 = Arg0
            }

            Local0 <<= 0x04
            Local1 = ^^EC0.ECBR (0x40, 0x19)
            Local1 &= 0xFFFFFFEF
            ^^EC0.ECBW (0x40, 0x19, (Local1 | Local0))
        }

        Method (VNLC, 1, Serialized)
        {
            ^^EC0.ECBW (0x40, 0x14, Zero)
            ^^EC0.ECBW (0x40, 0x15, Zero)
            Local0 = (Arg0 << One)
            Local1 = ^^EC0.ECBR (0x40, 0x19)
            Local1 &= 0xFFFFFFFD
            ^^EC0.ECBW (0x40, 0x19, (Local1 | Local0))
        }

        Method (RSMB, 3, NotSerialized)
        {
            Arg0 |= One
            RWSM (Arg0, Arg1, Arg2)
        }

        Method (WSMB, 3, NotSerialized)
        {
            Arg0 &= 0xFE
            RWSM (Arg0, Arg1, Arg2)
        }

        Method (RWSM, 3, NotSerialized)
        {
            HSTS = 0x1E
            Stall (0x0A)
            Local0 = Zero
            While ((HSTS & One))
            {
                HSTS = 0x1E
                Stall (0x0A)
                Local0++
                If ((Local0 == 0xFF))
                {
                    HSTC |= 0x02
                }
            }

            Local0 = Zero
            While ((SSTS & One))
            {
                SSTS = 0x1E
                Stall (0x0A)
                Local0++
                If ((Local0 == 0xFF))
                {
                    HSTC = (SSTS | 0x02)
                }
            }

            HCMD = Arg1
            Stall (0x0A)
            HADR = Arg0
            Stall (0x0A)
            HSTC = 0x14
            Stall (0x0A)
            Local1 = HSTC /* \_SB_.PCI0.SBRG.ASOC.HSTC */
            Stall (0x0A)
            HDT0 = Arg2
            Stall (0x0A)
            If (!(Arg0 & One))
            {
                Local1 = Arg2
                Local2 = Zero
                While ((Local1 >= Local2))
                {
                    BLKD = DerefOf (CLKB [Local2])
                    Local2++
                }
            }

            HSTS = 0x1E
            Stall (0x0A)
            While ((HSTS & One))
            {
                HSTS = 0x1E
                Stall (0x0A)
            }

            HSTC |= 0x40
            Stall (0x0A)
            While ((HSTS & One))
            {
                Stall (0x14)
            }

            If ((HSTS & 0x1C))
            {
                Return (Ones)
            }

            If ((Arg0 & One))
            {
                Local1 = Arg2
                Local2 = Zero
                While ((Local1 >= Local2))
                {
                    CLKB [Local2] = BLKD /* \_SB_.PCI0.SBRG.ASOC.BLKD */
                    Local2++
                }
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G4T0, Package (0x04)
        {
            0x04070010, 
            "CPU Q-FAN Control", 
            0x80000000, 
            Zero
        })
        Name (G4T1, Package (0x09)
        {
            0x04080011, 
            "CPU Q-FAN Profile", 
            0x00100001, 
            Zero, 
            0x04, 
            "Turbo", 
            "Standard", 
            "Silent", 
            "Manual"
        })
        Name (GRP4, Package (0x02)
        {
            G4T0, 
            G4T1
        })
        Method (GIT4, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x10))
            {
                ASB1 = GNVS (0x1768)
            }
            ElseIf ((TTT0 == 0x11))
            {
                ASB1 = GNVS (0x26AC)
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT4, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x10))
            {
                If ((GNVS (0x1768) != Arg1))
                {
                    If ((Arg2 & One))
                    {
                        SNVS (0x1768, Arg1)
                    }
                }
            }
            ElseIf ((TTT0 == 0x11))
            {
                If ((GNVS (0x26AC) != Arg1))
                {
                    If ((Arg2 & One))
                    {
                        SNVS (0x26AC, Arg1)
                    }
                }
            }
            Else
            {
                ASB0 = Zero
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G5T0, Package (0x07)
        {
            0x05080000, 
            "AI Profile", 
            Zero, 
            Zero, 
            0x02, 
            "Auto", 
            Zero
        })
        Name (G5T2, Package (0x08)
        {
            0x05080002, 
            "AI Profile Key", 
            Zero, 
            Zero, 
            0x03, 
            "Performance", 
            "Superior", 
            "Ultimate"
        })
        Name (G5T3, Package (0x07)
        {
            0x05080003, 
            "Auto Tune", 
            Zero, 
            Zero, 
            0x03, 
            "Auto", 
            Zero
        })
        Name (G5T4, Package (0x07)
        {
            0x05080004, 
            "EZ Tune", 
            Zero, 
            Zero, 
            0x03, 
            "Auto", 
            Zero
        })
        Name (G5T5, Package (0x07)
        {
            0x05080005, 
            "Fast Tune", 
            Zero, 
            Zero, 
            0x03, 
            "Auto", 
            Zero
        })
        Name (G5T6, Package (0x07)
        {
            0x05080006, 
            "AMD Turbo Ratio", 
            Zero, 
            Zero, 
            0x03, 
            "Auto", 
            Zero
        })
        Name (G5G0, Package (0x07)
        {
            0x05080060, 
            "GPU Booster Function", 
            0x40000000, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (G5G1, Package (0x07)
        {
            0x05080061, 
            "GPU PS COUNT", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x02
        })
        Name (GRP5, Package (0x08)
        {
            G5T0, 
            G5T2, 
            G5T3, 
            G5T4, 
            G5T5, 
            G5T6, 
            G5G0, 
            G5G1
        })
        Name (NBCR, Zero)
        Name (DRAO, Zero)
        Name (OBID, Zero)
        Name (ATFG, Zero)
        Method (GIT5, 2, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                ASB1 = One
            }
            ElseIf ((TTT0 == 0x02))
            {
                UDBF (Arg1)
                MVBF (Arg1)
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x03))
            {
                ATUN (Arg1)
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x04))
            {
                ESYT (Arg1)
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x05))
            {
                CRBB ()
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x06))
            {
                TURR ()
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x60))
            {
                UGPB (Arg1)
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x61))
            {
                UDB2 (Arg1)
                ASB1 = 0x05
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT5, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                ASB0 = Zero
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Name (FAST, Package (0x06)
        {
            0x03010011, 
            0x6E, 
            0x03080031, 
            0x02, 
            Ones, 
            Ones
        })
        Method (CRBB, 0, NotSerialized)
        {
            SNVS (0x4538, 0x06)
            SNVS (0x4548, 0x05)
            SNVS (0x454C, 0x05)
            SNVS (0x5470, 0x0A)
            Local0 = GDMF ()
            If ((Local0 >= 0x0640))
            {
                FAST [0x03] = 0x03
            }
            ElseIf ((Local0 < 0x0534))
            {
                FAST [0x03] = One
                SNVS (0x4538, 0x03)
                SNVS (0x4548, 0x02)
                SNVS (0x454C, 0x02)
                SNVS (0x5470, 0x04)
            }

            OBID = 0x08
            Local0 = Zero
            FAST [One] = (DerefOf (ATFB [FCPU ()]) - 0x64
                )
            While ((DerefOf (FAST [Local0]) != Ones))
            {
                STBF (DerefOf (FAST [Local0]), OBID)
                OBID += 0x04
                STBF (DerefOf (FAST [(Local0 + One)]), OBID)
                OBID += 0x04
                If ((DerefOf (FAST [Local0]) == 0x03060013))
                {
                    NBCR = DerefOf (FAST [(Local0 + One)])
                }

                If ((DerefOf (FAST [Local0]) == 0x03080031))
                {
                    DRAO = DerefOf (FAST [(Local0 + One)])
                }

                Local0 += 0x02
            }

            STBF (Ones, OBID)
            Local0 = GAGP ("GDNI")
            SNVS (0x54A8, (Local0 - 0x04))
            SNVS (0x54A0, (Local0 - 0x04))
            If (GXMP ())
            {
                Local0 = XMPV /* \_SB_.PCI0.SBRG.ASOC.XMPV */
                Local0++
                SNVS (0x8380, Local0)
            }
            Else
            {
                SNVS (0x8380, Zero)
            }

            SNVS (0x1779, Zero)
            SNVS (0x177A, Zero)
            SNVS (0x8368, Zero)
            SNVS (0x177B, Zero)
            SNVS (0x8370, Zero)
            SNVS (0x8350, 0x64)
            SNVS (0x1331, One)
        }

        Method (ATUN, 1, NotSerialized)
        {
            ATFG = One
            OBID = 0x08
            If (!NBCR)
            {
                Divide ((Arg0 << One), ((GAGP (0x0313) & 0xFF) + 0x08
                    ), Local3, Local0)
            }
            Else
            {
                Divide ((Arg0 << One), (NBCR + 0x08), Local3, Local0)
            }

            VDLC (One)
            VNLC (One)
            SCLL ()
            FAVD (0x03020012, Arg0)
            FANB (0x03020015, Local0)
            FDRB (0x03020032, Local0)
            STBF (Ones, OBID)
        }

        Method (FAVD, 2, NotSerialized)
        {
            Local0 = FCPU ()
            Local1 = GOCP (Arg1)
            Local2 = GDVD ()
            If (((Local0 < 0x03) && (Local1 >= 0x0258)))
            {
                If ((Local1 >= 0x0320))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf ((((Local0 > 0x02) && (Local0 < 0x06)) && (
                Local1 >= 0x0258)))
            {
                If ((Local1 >= 0x0258))
                {
                    Local2 += 0x18
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x06) && (Local1 >= 0x07D0)))
            {
                If ((Local1 >= 0x09C4))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x07) && (Local1 >= 0x03E8)))
            {
                If ((Local1 >= 0x07D0))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x08) && (Local1 >= 0x0258)))
            {
                If ((Local1 >= 0x0320))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x09) && (Local1 >= 0x0258)))
            {
                If ((Local1 >= 0x0320))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x0A) && (Local1 >= 0x02BC)))
            {
                If ((Local1 >= 0x0384))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf ((((Local0 == 0x0B) || ((Local0 > 0x0C) && (
                Local0 < 0x10))) && (Local1 >= 0x0320)))
            {
                If ((Local1 >= 0x0320))
                {
                    Local2 += 0x10
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x0C) && (Local1 >= 0x0320)))
            {
                If ((Local1 >= 0x0320))
                {
                    Local2 += 0x30
                }
                Else
                {
                    Local2 += One
                }
            }
            ElseIf (((Local0 == 0x10) && (Local1 >= 0x0320)))
            {
                If ((Local1 >= 0x0320))
                {
                    Local2 += 0x30
                }
                Else
                {
                    Local2 += One
                }
            }

            STBF (Arg0, OBID)
            OBID += 0x04
            STBF (Local2, OBID)
            OBID += 0x04
        }

        Method (GOCP, 1, NotSerialized)
        {
            Local0 = (GDCR () * 0x64)
            If ((Arg0 > Local0))
            {
                Local1 = (Arg0 - Local0)
                Local1 *= 0x2710
                Local2 = (Local1 / Local0)
            }
            Else
            {
                Local2 = Zero
            }

            Return (Local2)
        }

        Name (ANBT, Package (0x0C)
        {
            0x0834, 
            Zero, 
            0x0897, 
            0x60, 
            0x095F, 
            0x80, 
            0x0A8B, 
            0xA0, 
            0x0B0D, 
            0xC0, 
            0x1F40, 
            0xD0
        })
        Method (FANB, 2, NotSerialized)
        {
            Local2 = CVNB (Arg1)
            Local0 = Zero
            Local1 = SizeOf (ANBT)
            While ((Local0 < Local1))
            {
                If ((Local2 <= DerefOf (ANBT [Local0])))
                {
                    Local3 = DerefOf (ANBT [(Local0 + One)])
                    If (Local3)
                    {
                        Local4 = ((0x38 - GNVS (0x73E8)) << 0x02)
                        If ((Local3 > Local4))
                        {
                            Local4 = (GDND () + (Local3 - Local4))
                        }
                        Else
                        {
                            Local4 = GDND ()
                        }
                    }
                    Else
                    {
                        Local4 = GDND ()
                    }

                    STBF (Arg0, OBID)
                    OBID += 0x04
                    STBF (Local4, OBID)
                    OBID += 0x04
                    Break
                }

                Local0 += 0x02
            }
        }

        Name (ADRT, Package (0x16)
        {
            0x0497, 
            0x1F, 
            0x0528, 
            0x24, 
            0x0582, 
            0x1F, 
            0x05B4, 
            0x2E, 
            0x05F0, 
            0x33, 
            0x062C, 
            0x38, 
            0x069A, 
            0x3D, 
            0x06C2, 
            0x42, 
            0x06E0, 
            0x47, 
            0x0707, 
            0x4C, 
            0x1F40, 
            0x51
        })
        Method (FDRB, 2, NotSerialized)
        {
            If (GXMP ())
            {
                STBF (Arg0, OBID)
                OBID += 0x04
                STBF (XMPV, OBID)
                OBID += 0x04
            }
            Else
            {
                If (DRAO)
                {
                    Local2 = CDFE ((DRAO - One), Arg1)
                }
                Else
                {
                    Local2 = CDFE ((CDRA - One), Arg1)
                }

                Local0 = Zero
                Local1 = SizeOf (ADRT)
                While ((Local0 < Local1))
                {
                    If ((Local2 <= DerefOf (ADRT [Local0])))
                    {
                        STBF (Arg0, OBID)
                        OBID += 0x04
                        STBF (DerefOf (ADRT [(Local0 + One)]), OBID)
                        OBID += 0x04
                        Break
                    }

                    Local0 += 0x02
                }
            }
        }

        Method (ESYT, 1, NotSerialized)
        {
            OBID = 0x08
            Divide ((Arg0 << One), ((GAGP (0x0313) & 0xFF) + 0x08
                ), Local3, Local0)
            FAVD (0x03020012, Arg0)
            FANB (0x03020015, Local0)
            Local1 = DRAO /* \_SB_.PCI0.SBRG.ASOC.DRAO */
            DRAO = Zero
            FDRB (0x03020032, Local0)
            DRAO = Local1
            STBF (Ones, OBID)
        }

        Name (BUF1, Package (0x02)
        {
            0x03010011, 
            Ones
        })
        Method (UDBF, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                BUF1 [One] = (0xCA - 0x64)
            }
            ElseIf ((TTT0 == One))
            {
                BUF1 [One] = (0xCE - 0x64)
            }
            ElseIf ((TTT0 == 0x02))
            {
                BUF1 [One] = (0xD2 - 0x64)
            }
        }

        Method (MVBF, 1, NotSerialized)
        {
            Local0 = Zero
            Local2 = 0x08
            Local3 = SizeOf (BUF1)
            While ((Local0 != Local3))
            {
                Local1 = (Local0 + One)
                If ((DerefOf (BUF1 [Local1]) != Ones))
                {
                    STBF (DerefOf (BUF1 [Local0]), Local2)
                    Local2 += 0x04
                    STBF (DerefOf (BUF1 [Local1]), Local2)
                    Local2 += 0x04
                }

                STBF (Ones, Local2)
                Local0 += 0x02
            }
        }

        Method (STBF, 2, NotSerialized)
        {
            Local0 = Arg0
            Local1 = Arg1
            Local2 = Zero
            While ((Local2 != 0x20))
            {
                ASBF [Local1] = (Local0 >> Local2)
                Local2 += 0x08
                Local1 += One
            }
        }

        Name (IGPS, Zero)
        Method (UDB2, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                ASB2 = 0x03010060
                Local0 = (GGFQ () - 0xC8)
                ASB3 = Local0
                ASB4 = 0x03010067
                ASB5 = IGPS /* \_SB_.PCI0.SBRG.ASOC.IGPS */
                ASB6 = Ones
            }
            ElseIf ((TTT0 == One))
            {
                ASB2 = 0x03010060
                ASB3 = 0x0168
                ASB4 = 0x03010067
                Local0 = (GGHP () | 0x00010000)
                ASB5 = Local0
                ASB6 = Ones
            }
        }

        Name (TBRT, Package (0xE7)
        {
            0x04, 
            Zero, 
            0x22, 
            One, 
            0x03, 
            0x03, 
            0x02, 
            0x02, 
            0x02, 
            One, 
            0xFF, 
            0x04, 
            One, 
            0x22, 
            One, 
            0x03, 
            0x03, 
            0x03, 
            One, 
            0x02, 
            One, 
            0xFF, 
            0x04, 
            Zero, 
            0x20, 
            0x02, 
            0x04, 
            0x04, 
            0x03, 
            One, 
            0x03, 
            One, 
            0xFF, 
            0x04, 
            One, 
            0x20, 
            0x04, 
            0x05, 
            0x06, 
            0x05, 
            0x04, 
            0x05, 
            0x04, 
            0xFF, 
            0x04, 
            0x02, 
            0x1E, 
            0x02, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x02, 
            0xFF, 
            0x03, 
            Zero, 
            0x1E, 
            0x03, 
            0x05, 
            0x05, 
            0x05, 
            Zero, 
            0x05, 
            Zero, 
            0xFF, 
            0x03, 
            Zero, 
            0x1C, 
            0x03, 
            0x05, 
            0x04, 
            0x04, 
            Zero, 
            0x04, 
            Zero, 
            0xFF, 
            0x02, 
            One, 
            0x20, 
            0x04, 
            0x05, 
            0x05, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0xFF, 
            0x02, 
            Zero, 
            0x1F, 
            0x02, 
            0x04, 
            0x04, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0xFF, 
            0x06, 
            0x02, 
            0x1A, 
            0x02, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x02, 
            0xFF, 
            0x06, 
            0x02, 
            0x1C, 
            0x02, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x02, 
            0xFF, 
            0x06, 
            0x02, 
            0x20, 
            0x02, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x02, 
            0xFF, 
            0xFF, 
            0xFF, 
            0xFF, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0xFF, 
            0x04, 
            Zero, 
            0x1E, 
            0x03, 
            0x05, 
            0x05, 
            0x03, 
            0x03, 
            0x04, 
            0x03, 
            0xFF, 
            0x04, 
            Zero, 
            0x1C, 
            0x03, 
            0x03, 
            0x04, 
            0x04, 
            0x03, 
            0x03, 
            0x03, 
            0xFF, 
            0x03, 
            One, 
            0x20, 
            0x02, 
            0x04, 
            0x04, 
            0x03, 
            Zero, 
            0x03, 
            Zero, 
            0xFF, 
            0x04, 
            One, 
            0x20, 
            0x02, 
            0x04, 
            0x04, 
            0x03, 
            0x02, 
            0x03, 
            0x02, 
            0xFF, 
            0x03, 
            Zero, 
            0x1F, 
            0x02, 
            0x03, 
            0x04, 
            0x02, 
            Zero, 
            0x02, 
            Zero, 
            0xFF, 
            0x04, 
            Zero, 
            0x1F, 
            0x02, 
            0x03, 
            0x04, 
            0x02, 
            0x03, 
            0x02, 
            0x02, 
            0xFF, 
            0x06, 
            0x02, 
            0x1E, 
            0x02, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x02, 
            0xFF, 
            0xFF, 
            0xFF, 
            0xFF, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0x0F, 
            0xFF
        })
        Name (TBTT, Package (0x0B)
        {
            Zero, 
            Zero, 
            Zero, 
            One, 
            0x02, 
            0x02, 
            0x02, 
            0x02, 
            0x02, 
            One, 
            0xFF
        })
        Method (TURR, 0, NotSerialized)
        {
            OBID = 0x08
            If (IUCP ())
            {
                Local0 = GAGP ("CPUN")
                Local1 = GNVS (0x23C9)
                Local2 = GDCR ()
                Local5 = Zero
                While ((DerefOf (TBRT [Local5]) != 0xFF))
                {
                    Local5++
                }

                Local5++
                Local3 = Zero
                If (GNVS (0x177E))
                {
                    While ((DerefOf (TBRT [Local3]) != 0xFF))
                    {
                        Local3 += Local5
                    }

                    Local3 += Local5
                }

                While ((DerefOf (TBRT [Local3]) != 0xFF))
                {
                    If ((DerefOf (TBRT [Local3]) == Local0))
                    {
                        Local4 = DerefOf (TBRT [(Local3 + One)])
                        If (((Local4 == 0xFF) || (Local4 == Local1)))
                        {
                            Local4 = DerefOf (TBRT [(Local3 + 0x02)])
                            If (((Local4 == 0xFF) || (Local4 == Local2)))
                            {
                                Local4 = 0x03
                                While ((Local4 < (Local5 - One)))
                                {
                                    STBF ((DerefOf (G3C2 [0x03]) + DerefOf (TBRT [(Local3 + 
                                        Local4)])), OBID)
                                    OBID += 0x04
                                    Local4++
                                }

                                Break
                            }
                        }
                    }

                    Local3 += Local5
                }

                If ((DerefOf (TBRT [Local3]) == 0xFF))
                {
                    Local4 = 0x03
                    Local3 = Zero
                    While ((Local4 < (Local5 - One)))
                    {
                        STBF ((DerefOf (G3C2 [0x03]) + DerefOf (TBTT [(Local3 + 
                            Local4)])), OBID)
                        OBID += 0x04
                        Local4++
                    }
                }
            }

            STBF (Ones, OBID)
        }

        Name (LLFG, Zero)
        Method (SCLL, 0, NotSerialized)
        {
            LLFG = GAGP ("GLLS")
        }

        Method (RCLL, 0, NotSerialized)
        {
            VDLC (LLFG)
        }

        Method (TMCM, 1, NotSerialized)
        {
            If (Arg0)
            {
                TMTC ()
            }
            Else
            {
                RCLL ()
            }
        }

        Method (TMTC, 0, NotSerialized)
        {
            ^^EC0.ECBW (0x40, 0x0A, 0x10)
            ^^EC0.ECBW (0x40, 0x0B, Zero)
            ^^EC0.ECBW (0x40, 0x0C, Zero)
            ^^EC0.ECBW (0x40, 0x0D, Zero)
            Local0 = ^^EC0.ECBR (0x40, 0x19)
            Local0 |= 0x10
            ^^EC0.ECBW (0x40, 0x19, Local0)
        }

        Name (DFTB, Package (0x04)
        {
            0x0320, 
            0x042A, 
            0x0535, 
            0x0640
        })
        Method (CDFE, 2, NotSerialized)
        {
            Local0 = (Arg1 * DerefOf (DFTB [Arg0]))
            Divide (Local0, 0xC8, Local1, Local0)
            If ((Local1 >= 0x64))
            {
                Local0++
            }

            Return (Local0)
        }

        Method (CVNB, 1, NotSerialized)
        {
            Local0 = (GAGP ("GVNI") * Arg0)
            Return (Local0)
        }

        Method (GXMP, 0, NotSerialized)
        {
            If (XMPV)
            {
                Local3 = One
            }
            Else
            {
                Local0 = Zero
                Local1 = 0x03
                Local3 = Zero
                While ((Local0 <= Local1))
                {
                    Local2 = (0xA0 + (0x02 * Local0))
                    If ((RBYT (Local2, Zero) != 0xFF))
                    {
                        If (((RBYT (Local2, 0xB0) == 0x0C) && (RBYT (Local2, 0xB1) == 0x4A)))
                        {
                            If (RBYT (Local2, 0xBA))
                            {
                                Local3 = One
                                Local0 = RBYT (Local2, 0xB9)
                                XMPV = (((Local0 >> 0x05) * 0x000186A0) + ((Local0 & 
                                    0x1F) * 0x1388))
                                XMPV -= (DerefOf (G3D2 [0x04]) & 0x000FFFFF)
                                Divide (XMPV, DerefOf (G3D2 [0x05]), Local5, XMPV) /* \_SB_.PCI0.SBRG.ASOC.XMPV */
                            }
                        }

                        Break
                    }

                    Local0 += One
                }
            }

            Return (Local3)
        }

        Method (GDMF, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = 0x03
            Local3 = Zero
            While ((Local0 <= Local1))
            {
                Local2 = (0xA0 + (0x02 * Local0))
                If ((RBYT (Local2, Zero) != 0xFF))
                {
                    If (((RBYT (Local2, 0xB0) == 0x0C) && (RBYT (Local2, 0xB1) == 0x4A)))
                    {
                        If (RBYT (Local2, 0xBA))
                        {
                            Local3 = (RBYT (Local2, 0xB5) * 0x07D0)
                            Local3 /= (RBYT (Local2, 0xBA) * RBYT (Local2, 0xB4))
                        }
                    }

                    Local4 = (RBYT (Local2, 0x0B) * 0x07D0)
                    Local4 /= (RBYT (Local2, 0x0C) * RBYT (Local2, 0x0A))
                    If ((Local3 < Local4))
                    {
                        Local3 = Local4
                    }

                    Local4 = GNVS (0x57F0)
                    If ((((Local4 == One) || (Local4 > 0x03)) || (Local4 == 0x08)))
                    {
                        If ((Local3 >= 0x0640))
                        {
                            Local3 = 0x0535
                        }
                        ElseIf ((Local3 >= 0x0534))
                        {
                            Local3 = 0x042A
                        }
                    }

                    Break
                }

                Local0 += One
            }

            Return (Local3)
        }

        Method (FCPU, 0, NotSerialized)
        {
            Return (GNVS (0x57F0))
        }

        Method (GCCR, 0, NotSerialized)
        {
            If (GNVS (0x63C0))
            {
                Local0 = (GNVS (0x63C0) + 0x07)
            }
            Else
            {
                Local0 = GDCR ()
            }

            Return (Local0)
        }

        Method (GDCR, 0, NotSerialized)
        {
            Local0 = (GNVS (0x62C2) + 0x10)
            Return (Local0)
        }

        Method (IUCP, 0, NotSerialized)
        {
            PRID (One)
            Local1 = REAX /* \REAX */
            Local1 = ((Local1 >> 0x14) & 0xFF)
            If ((Local1 == 0x06))
            {
                Local0 = Zero
                Return (Local0)
            }

            GMSR (0xC0010071)
            Local0 = REDX /* \REDX */
            Local0 >>= 0x11
            Local0 &= 0x3F
            If (Local0)
            {
                Local0 = Zero
            }
            Else
            {
                Local0 = One
            }

            Return (Local0)
        }

        Name (GEMR, Package (0x08)
        {
            Package (0x04)
            {
                0x03020061, 
                0xC8, 
                0x0230, 
                0x0A
            }, 

            Package (0x04)
            {
                0x03020061, 
                0x0231, 
                0x02BC, 
                0x0F
            }, 

            Package (0x04)
            {
                0x03020061, 
                0x02BD, 
                0x02EE, 
                0x14
            }, 

            Package (0x04)
            {
                0x03020061, 
                0x02EF, 
                0x030C, 
                0x19
            }, 

            Package (0x04)
            {
                0x03020061, 
                0x030D, 
                0x032A, 
                0x1E
            }, 

            Package (0x04)
            {
                0x03020061, 
                0x032B, 
                0x0348, 
                0x23
            }, 

            Package (0x04)
            {
                0x03020061, 
                0x0349, 
                0x07D0, 
                0x28
            }, 

            Package (0x04)
            {
                0xFF, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Name (GPMR, Package (0x02)
        {
            Package (0x04)
            {
                0x03020066, 
                Zero, 
                0x07D0, 
                Zero
            }, 

            Package (0x04)
            {
                0xFF, 
                Zero, 
                Zero, 
                0x1D
            }
        })
        Name (GBFQ, Zero)
        Method (UGPB, 1, NotSerialized)
        {
            GBFQ = Arg0
            Local0 = Zero
            Local1 = DerefOf (DerefOf (GEMR [Local0]) [Zero])
            While ((Local1 != 0xFF))
            {
                Local2 = DerefOf (DerefOf (GEMR [Local0]) [One])
                If ((GBFQ >= Local2))
                {
                    Local2 = DerefOf (DerefOf (GEMR [Local0]) [0x02])
                    If ((GBFQ <= Local2))
                    {
                        Local2 = DerefOf (DerefOf (GEMR [Local0]) [Zero])
                        STBF (Local2, 0x08)
                        Local2 = DerefOf (DerefOf (GEMR [Local0]) [0x03])
                        STBF (Local2, 0x0C)
                        Break
                    }
                }

                Local0++
                Local1 = DerefOf (DerefOf (GEMR [Local0]) [Zero])
            }

            STBF (Ones, 0x10)
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G611, Package (0x07)
        {
            0x06020011, 
            "Vcore Voltage", 
            0x20000000, 
            Zero, 
            0x0320, 
            0x0320, 
            0x02
        })
        Name (G663, Package (0x07)
        {
            0x06020063, 
            "+3.3V Voltage", 
            0x20000000, 
            Zero, 
            0x0B9A, 
            0x0294, 
            0x02
        })
        Name (G662, Package (0x07)
        {
            0x06020062, 
            "+5V Voltage", 
            0x20000000, 
            Zero, 
            0x1194, 
            0x03E8, 
            0x02
        })
        Name (G661, Package (0x07)
        {
            0x06020061, 
            "+12V Voltage", 
            0x20000000, 
            Zero, 
            0x27D8, 
            0x0E10, 
            0x02
        })
        Name (G612, Package (0x07)
        {
            0x06030012, 
            "CPU Temperature", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x015E, 
            0x02
        })
        Name (G614, Package (0x07)
        {
            0x06030014, 
            "MB Temperature", 
            0x20000000, 
            Zero, 
            0x01C2, 
            0x012C, 
            0x02
        })
        Name (G613, Package (0x07)
        {
            0x06040013, 
            "CPU Fan Speed", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x19C8, 
            0x02
        })
        Name (G673, Package (0x07)
        {
            0x06040073, 
            "Chassis Fan Speed", 
            0x20000000, 
            Zero, 
            0x0258, 
            0x19C8, 
            0x02
        })
        Name (GRP6, Package (0x08)
        {
            G611, 
            G663, 
            G662, 
            G661, 
            G612, 
            G614, 
            G613, 
            G673
        })
        Method (G6UP, 0, NotSerialized)
        {
            If (((DerefOf (MBIF [0x02]) >> 0x18) == 0x04))
            {
                SFST ()
            }
        }

        Method (SFST, 0, NotSerialized)
        {
            If ((GNVS (0x1768) != Zero))
            {
                Name (TTT0, Zero)
                TTT0 = GNVS (0x3660)
                If ((TTT0 == Zero))
                {
                    G613 [0x03] = 0x0258
                }
                ElseIf ((TTT0 == One))
                {
                    G613 [0x03] = 0x01F4
                }
                ElseIf ((TTT0 == 0x02))
                {
                    G613 [0x03] = 0x0190
                }
                ElseIf ((TTT0 == 0x03))
                {
                    G613 [0x03] = 0x012C
                }
                ElseIf ((TTT0 == 0x04))
                {
                    G613 [0x03] = 0xC8
                }
                ElseIf ((TTT0 == 0x05))
                {
                    G613 [0x03] = Zero
                }
            }
            Else
            {
                G613 [0x03] = 0xC8
            }

            If ((GNVS (0x1768) != Zero))
            {
                Name (TTT1, Zero)
                TTT1 = GNVS (0x3663)
                If ((TTT1 == Zero))
                {
                    G673 [0x03] = 0x0258
                }
                ElseIf ((TTT1 == One))
                {
                    G673 [0x03] = 0x01F4
                }
                ElseIf ((TTT1 == 0x02))
                {
                    G673 [0x03] = 0x0190
                }
                ElseIf ((TTT1 == 0x03))
                {
                    G673 [0x03] = 0x012C
                }
                ElseIf ((TTT1 == 0x04))
                {
                    G673 [0x03] = 0xC8
                }
                ElseIf ((TTT1 == 0x05))
                {
                    G673 [0x03] = Zero
                }
            }
            Else
            {
                G673 [0x03] = 0xC8
            }
        }

        Method (GIT6, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x11))
            {
                ASB1 = ^^SIOR.HWV2 ()
            }
            ElseIf ((TTT0 == 0x63))
            {
                ASB1 = ^^SIOR.HWV3 ()
            }
            ElseIf ((TTT0 == 0x62))
            {
                ASB1 = ^^SIOR.HWV1 ()
                ASB1 *= 0xAF
                ASB1 /= 0x64
            }
            ElseIf ((TTT0 == 0x61))
            {
                ASB1 = ^^SIOR.HWV0 ()
                ASB1 *= 0x01A0
                ASB1 /= 0x64
            }
            ElseIf ((TTT0 == 0x12))
            {
                ASB1 = ^^SIOR.HWT1 ()
            }
            ElseIf ((TTT0 == 0x14))
            {
                ASB1 = ^^SIOR.HWT2 ()
            }
            ElseIf ((TTT0 == 0x13))
            {
                ASB1 = ^^SIOR.HWF1 ()
            }
            ElseIf ((TTT0 == 0x73))
            {
                ASB1 = ^^SIOR.HWF2 ()
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT6, 3, NotSerialized)
        {
        }
    }

    Scope (\)
    {
        OperationRegion (SDHM, SystemIO, 0x0CD0, 0x02)
        Field (SDHM, ByteAcc, NoLock, Preserve)
        {
            SDV1,   8, 
            SDV2,   8
        }

        IndexField (SDV1, SDV2, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB0), 
            VEVT,   8, 
            Offset (0xB2), 
            AC03,   8, 
            AC47,   8, 
            Offset (0xB5), 
            VR03,   8, 
            Offset (0xC1), 
            VIV2,   8, 
            VI2L,   8, 
            VI2H,   8, 
            Offset (0xE6), 
            HMAR,   8
        }
    }

    Scope (_GPE)
    {
        Name (HIHL, 0xB3)
        Name (LOWL, 0x4C)
        Name (TPNB, Zero)
        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((VIV2 >= VI2L))
            {
                VI2L = 0xFF
                VI2H = HIHL /* \_GPE.HIHL */
                \_SB.PCI0.SBRG.ASOC.SNBV (\_SB.PCI0.SBRG.ASOC.GPS0)
            }
            ElseIf ((VIV2 <= VI2H))
            {
                VI2H = Zero
                VI2L = LOWL /* \_GPE.LOWL */
                \_SB.PCI0.SBRG.ASOC.SNBV (\_SB.PCI0.SBRG.ASOC.GPS1)
            }

            Sleep (0x012C)
            \_SB.PCI0.SBRG.ASOC.CGPS ()
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Method (GIT8, 1, NotSerialized)
        {
        }

        Method (SIT8, 3, NotSerialized)
        {
        }

        Method (CGPR, 0, NotSerialized)
        {
            VI2L = 0xFF
            VI2H = Zero
        }

        Method (SGPR, 0, NotSerialized)
        {
            VI2L = DerefOf (GTHD [Zero])
            VI2H = DerefOf (GTHD [One])
        }

        Method (CGPS, 0, NotSerialized)
        {
            VEVT = 0xFF
        }

        Method (DGPN, 0, NotSerialized)
        {
            AC03 &= 0xCF
        }

        Method (EGPN, 0, NotSerialized)
        {
            AC03 |= 0x30
        }

        Method (GNIT, 0, NotSerialized)
        {
            CGPR ()
            AC03 = Zero
            AC47 = Zero
            UGNP ()
            HMAR |= 0x02
            VR03 |= 0x20
            EGPN ()
        }

        Method (UGNP, 0, NotSerialized)
        {
            If ((DerefOf (GTHD [Zero]) != 0xFF))
            {
                SGPR ()
            }
        }

        Method (SWPP, 0, NotSerialized)
        {
        }

        Method (SWPQ, 0, NotSerialized)
        {
        }

        Name (GTHD, Buffer (0x02)
        {
             0x4C, 0xB3                                       // L.
        })
        Name (GFLA, Zero)
        Method (INGP, 0, NotSerialized)
        {
            If (GNVS (0x177C))
            {
                DGPN ()
            }
            ElseIf (GNVS (0x177D))
            {
                DGPN ()
            }
            ElseIf ((GFLA & One))
            {
                DGPN ()
            }
            Else
            {
                GPS1 = GGHP ()
                GNIT ()
                CGPS ()
            }
        }

        Method (GGHP, 0, NotSerialized)
        {
            Local1 = (HTFQ - One)
            Local1 *= GNVS (0xA2B8)
            If ((Local1 <= 0x08FC))
            {
                Local0 = 0x85
            }
            ElseIf ((Local1 <= 0x0A28))
            {
                Local2 = GGFQ ()
                If ((Local2 <= 0x0258))
                {
                    Local0 = 0x85
                }
                Else
                {
                    Local0 = IGPS /* \_SB_.PCI0.SBRG.ASOC.IGPS */
                }
            }
            Else
            {
                Local0 = IGPS /* \_SB_.PCI0.SBRG.ASOC.IGPS */
            }

            Return (Local0)
        }

        Method (GGFQ, 0, NotSerialized)
        {
            If (GNVS (0x177C))
            {
                Local0 = GNVS (0xB2D8)
            }
            Else
            {
                Local1 = GNVS (0x26C2)
                Name (TTT0, Zero)
                TTT0 = (Local1 & 0xFF)
                If ((TTT0 == One))
                {
                    Local0 = 0x0320
                }
                ElseIf ((TTT0 == 0x02))
                {
                    Local0 = 0x0384
                }
                ElseIf ((TTT0 == 0x03))
                {
                    Local0 = GNVS (0xB2D8)
                }
                Else
                {
                    Local0 = 0x02BC
                }
            }

            Return (Local0)
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (G9T0, Package (0x0C)
        {
            0x09080000, 
            "AI Overclocking", 
            Zero, 
            One, 
            0x07, 
            "Manual", 
            "Auto", 
            "Standard", 
            "Profile", 
            Zero, 
            Zero, 
            "CPU Level Up"
        })
        Name (GRP9, Package (0x01)
        {
            G9T0
        })
        Method (GIT9, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                If ((GNVS (0x26AA) != Zero))
                {
                    ASB1 = 0x06
                }
                Else
                {
                    ASB1 = GNVS (0x455C)
                }
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SIT9, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                If ((GNVS (0x455C) != Arg1))
                {
                    If ((Arg2 & One))
                    {
                        Local0 = Arg1
                        If ((GNVS (0x26AA) != Zero))
                        {
                            Local0 = Zero
                        }

                        If ((Arg1 == One))
                        {
                            SNVS (0xA2B8, 0xC8)
                        }

                        SNVS (0x455C, Local0)
                    }

                    ASB0 |= 0x02
                }
            }
            Else
            {
                ASB0 = Zero
            }
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (GBT0, Package (0x07)
        {
            0x0B060001, 
            "System Performance", 
            Zero, 
            Zero, 
            0x03, 
            One, 
            0x04
        })
        Name (GBT1, Package (0x07)
        {
            0x0B060002, 
            "System Performance Control", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GBT2, Package (0x07)
        {
            0x0B060003, 
            "System GUI", 
            0x04, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GBT5, Package (0x07)
        {
            0x0B060010, 
            "Level Switch", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GBT9, Package (0x07)
        {
            0x0B060023, 
            "AI Gear CPU voltage", 
            Zero, 
            Zero, 
            Zero, 
            0x000FFD8F, 
            0x64
        })
        Name (GBTA, Package (0x07)
        {
            0x0B060024, 
            "Set Turbo Profile", 
            Zero, 
            Zero, 
            Zero, 
            One, 
            0x02
        })
        Name (GBTB, Package (0x07)
        {
            0x0B060025, 
            "CPU Voltage Downgrade", 
            Zero, 
            Zero, 
            Zero, 
            0x02, 
            0xC8
        })
        Name (GBTC, Package (0x07)
        {
            0x0B060080, 
            "EPU version", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRPB, Package (0x08)
        {
            GBT0, 
            GBT1, 
            GBT2, 
            GBT5, 
            GBT9, 
            GBTA, 
            GBTB, 
            GBTC
        })
        Method (GITB, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == One))
            {
                ASB1 = (DerefOf (GBT0 [0x02]) & 0xFFFF)
            }
            ElseIf ((TTT0 == 0x02))
            {
                ASB1 = DerefOf (GBT1 [0x02])
            }
            ElseIf ((TTT0 == 0x03))
            {
                ASB1 = DerefOf (GBT2 [0x02])
            }
            ElseIf ((TTT0 == 0x23))
            {
                ASB1 = GDEF (0x02)
            }
            ElseIf ((TTT0 == 0x25))
            {
                EPUB ()
                ASB1 = 0x05
            }
            ElseIf ((TTT0 == 0x80))
            {
                ASB1 = 0x02
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SITB, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == One))
            {
                If (((Arg2 & 0xFFFF) == One))
                {
                    Local0 = (Arg1 & 0xFFFF)
                    GBT0 [0x02] = Local0
                    SICL (Local0)
                }
            }
            ElseIf ((TTT0 == 0x02))
            {
                Local0 = (Arg1 & 0xFF)
                If (!Acquire (^^EC0.MUEC, 0xFFFF))
                {
                    ^^EC0.EPUR = Local0
                    Release (^^EC0.MUEC)
                }

                If ((STCG (Local0) == One))
                {
                    GBT1 [0x02] = Local0
                }
                Else
                {
                    ASB0 = Zero
                }
            }
            ElseIf ((TTT0 == 0x10))
            {
                Local0 = (Arg1 & 0xFF)
                AGLS (Local0)
            }
            ElseIf ((TTT0 == 0x23))
            {
                Local0 = (Arg1 & 0xFF)
                AGCV (Local0)
            }
            ElseIf ((TTT0 == 0x24))
            {
                STPF (Arg1, Arg2)
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Name (TURP, Package (0x24)
        {
            0xA2B8, 
            0xD2, 
            0x8380, 
            Zero, 
            0x2646, 
            0x02, 
            0x47E0, 
            0x04, 
            0x4568, 
            0x05, 
            0x4538, 
            0x06, 
            0x4548, 
            0x05, 
            0x454C, 
            0x05, 
            0x5470, 
            0x0A, 
            0x8350, 
            0x64, 
            0x455C, 
            Zero, 
            0x1779, 
            Zero, 
            0x177A, 
            Zero, 
            0x8368, 
            Zero, 
            0x177B, 
            Zero, 
            0x8370, 
            Zero, 
            0x1331, 
            One, 
            Ones, 
            Ones
        })
        Name (MNBF, Zero)
        Name (ENBF, Zero)
        Name (ATFB, Package (0x11)
        {
            0xD8, 
            0xF0, 
            0xD8, 
            0xD8, 
            0xF0, 
            0xF0, 
            0xFA, 
            0x0104, 
            0xE8, 
            0xD8, 
            0xDA, 
            0xE6, 
            0xFA, 
            0xFA, 
            0xFA, 
            0xD8, 
            0xD8
        })
        Method (STPF, 2, NotSerialized)
        {
            If ((Arg0 == 0x41535553))
            {
                If ((Arg1 & One))
                {
                    TURP [One] = DerefOf (ATFB [FCPU ()])
                    If (GXMP ())
                    {
                        TURP [0x03] = (XMPV + One)
                    }

                    Local0 = GDMF ()
                    If ((Local0 >= 0x0640))
                    {
                        TURP [0x07] = 0x05
                        TURP [0x09] = 0x06
                    }
                    ElseIf ((Local0 < 0x0534))
                    {
                        TURP [0x07] = 0x03
                        TURP [0x09] = 0x04
                        TURP [0x0B] = 0x03
                        TURP [0x0D] = 0x02
                        TURP [0x0F] = 0x02
                        TURP [0x11] = 0x04
                    }

                    Local0 = Zero
                    While ((DerefOf (TURP [Local0]) != Ones))
                    {
                        SNVS (DerefOf (TURP [Local0]), DerefOf (TURP [(Local0 + One
                            )]))
                        Local0 += 0x02
                    }

                    Local4 = GNVS (0x57F0)
                    If ((Local4 > 0x0A))
                    {
                        MNBF = (GNVS (0x57A8) + 0x04)
                        Local0 = (MNBF * 0xC8)
                        Divide (Local0, DerefOf (TURP [One]), Local0, Local1)
                        If ((Local0 > (DerefOf (TURP [One]) >> One)))
                        {
                            Local1 += One
                        }

                        If (GNVS (0x4568))
                        {
                            Name (TTT0, Zero)
                            TTT0 = (GNVS (0x4568) & 0x0F)
                            If ((TTT0 == 0x04))
                            {
                                Local0 = 0x1F40
                            }
                            ElseIf ((TTT0 == 0x05))
                            {
                                Local0 = 0x29AA
                            }
                            ElseIf ((TTT0 == 0x06))
                            {
                                Local0 = 0x3415
                            }
                            ElseIf ((TTT0 == 0x07))
                            {
                                Local0 = 0x3E80
                            }
                            Else
                            {
                                Local0 = 0x3415
                            }
                        }
                        Else
                        {
                            Name (TTT1, Zero)
                            TTT1 = (GNVS (0x47B8) & 0x0F)
                            If ((TTT1 == 0x05))
                            {
                                Local0 = 0x1F40
                            }
                            ElseIf ((TTT1 == 0x0F))
                            {
                                Local0 = 0x29AA
                            }
                            ElseIf ((TTT1 == 0x0C))
                            {
                                Local0 = 0x3415
                                If ((DerefOf (TURP [One]) > 0xDC))
                                {
                                    Local0 = 0x29AA
                                }
                            }
                            ElseIf ((TTT1 == 0x0A))
                            {
                                Local0 = 0x3E80
                                If ((DerefOf (TURP [One]) > 0xDC))
                                {
                                    Local0 = 0x29AA
                                }
                            }
                            Else
                            {
                                Local0 = 0x3415
                            }
                        }

                        Divide (Local0, 0x07D0, Local2, Local3)
                        If (Local2)
                        {
                            Local3 += One
                        }

                        If ((Local3 < 0x04))
                        {
                            Local3 = 0x04
                        }

                        If ((Local1 < Local3))
                        {
                            Local1 = Local3
                        }

                        ENBF = Local1
                        If (GNVS (0x54A8))
                        {
                            Local0 = GNVS (0x54A8)
                        }
                        ElseIf ((DerefOf (TURP [One]) > 0xFA))
                        {
                            Local0 = (ENBF - 0x03)
                        }
                        ElseIf ((DerefOf (TURP [One]) >= 0xE9))
                        {
                            Local0 = (MNBF - 0x05)
                        }
                        ElseIf ((DerefOf (TURP [One]) >= 0xE1))
                        {
                            Local0 = (MNBF - 0x04)
                        }
                        Else
                        {
                            Local0 = GNVS (0x54A8)
                        }

                        SNVS (0x54A0, Local0)
                    }
                }
            }
        }

        Name (EPUT, Package (0x33)
        {
            0x0A, 
            0x0B, 
            0x02, 
            0x0A, 
            0x0C, 
            0x02, 
            0x0A, 
            0x0C, 
            0x02, 
            0x08, 
            0x09, 
            0x02, 
            0x0A, 
            0x0E, 
            0x02, 
            0x0A, 
            0x0B, 
            0x02, 
            0x0A, 
            0x0E, 
            0x02, 
            0x0A, 
            0x0E, 
            0x02, 
            0x0A, 
            0x0C, 
            0x02, 
            0x0A, 
            0x0E, 
            0x02, 
            0x0A, 
            0x0E, 
            0x02, 
            0x07, 
            0x08, 
            0x02, 
            0x0A, 
            0x0C, 
            0x02, 
            0x0A, 
            0x0C, 
            0x02, 
            0x0A, 
            0x0C, 
            0x02, 
            0x07, 
            0x08, 
            0x02, 
            0x07, 
            0x08, 
            0x02
        })
        Method (EPUB, 0, NotSerialized)
        {
            OBID = 0x08
            Local0 = Zero
            Local1 = (FCPU () * 0x03)
            While ((Local0 < 0x03))
            {
                STBF (DerefOf (EPUT [(Local1 + Local0)]), OBID)
                OBID += 0x04
                Local0++
            }

            STBF (Ones, OBID)
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (GET1, Package (0x07)
        {
            0x0E060001, 
            "OC Status", 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (GRPE, Package (0x01)
        {
            GET1
        })
        Method (GITE, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == One))
            {
                ASB1 = CAML /* \_SB_.PCI0.SBRG.ASOC.CAML */
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SITE, 3, NotSerialized)
        {
            ASB0 = Zero
        }

        Name (DFSB, Buffer (0x08)
        {
             0x00, 0x00, 0x0A, 0x0A, 0x01, 0x00, 0x01, 0x01   // ........
        })
        Name (OLTB, Buffer (0x18)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00   // ........
        })
        Name (AIGC, Zero)
        Name (PICL, One)
        Name (LVIC, Zero)
        Name (CAML, Zero)
        Method (RPSS, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (GDEF, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFF)
            If ((TTT0 == Zero))
            {
                If ((GNVS (0x455C) == Zero))
                {
                    Local0 = (0x04 * GNVS (0x455C))
                }
                Else
                {
                    Local0 = (0x04 * One)
                }

                Return (DerefOf (DFSB [(LVIC + Local0)]))
            }
            ElseIf ((TTT0 == One))
            {
                Return (GVOT (One, LVIC))
            }
            ElseIf ((TTT0 == 0x02))
            {
                Return (GVOT (0x02, LVIC))
            }
            ElseIf ((TTT0 == 0x03))
            {
                Return (GVOT (0x03, LVIC))
            }
            ElseIf ((TTT0 == 0x04))
            {
                Return (GVOT (0x04, LVIC))
            }
            ElseIf ((TTT0 == 0x05))
            {
                If ((GNVS (0x455C) == Zero))
                {
                    Local0 = (0x04 * GNVS (0x455C))
                }
                Else
                {
                    Local0 = (0x04 * One)
                }

                Return (DerefOf (DFSB [(LVIC + Local0)]))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (AGLS, 1, NotSerialized)
        {
            LVIC = Arg0
            Return (One)
        }

        Method (AGCV, 1, NotSerialized)
        {
            SVOT (0x02, LVIC, Arg0)
            Return (One)
        }

        Method (SVOT, 3, NotSerialized)
        {
            Local0 = (Arg0 + (Arg1 * 0x06))
            OLTB [Local0] = Arg2
            Return (One)
        }

        Method (GVOT, 2, NotSerialized)
        {
            Local0 = (Arg0 + (Arg1 * 0x06))
            Local1 = DerefOf (OLTB [Local0])
            Return (Local1)
        }

        Method (STCG, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFF)
            If ((TTT0 == Zero)){}
            ElseIf ((TTT0 == One)){}
            Else
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (SICL, 1, NotSerialized)
        {
            If ((Arg0 & 0x8000))
            {
                AIGC = One
                ITAT ()
            }
            Else
            {
                AIGC = Zero
                Name (TTT0, Zero)
                TTT0 = (Arg0 & 0xFF)
                If ((TTT0 == Zero))
                {
                    SPIC (One)
                    PICL = One
                }
                ElseIf ((TTT0 == One))
                {
                    SPIC (0x02)
                    PICL = 0x02
                }
                ElseIf ((TTT0 == 0x02))
                {
                    SPIC (0x03)
                    PICL = 0x03
                }
                Else
                {
                    Return (Zero)
                }
            }

            Return (One)
        }

        Method (ITAT, 0, NotSerialized)
        {
            If (!Acquire (^^EC0.MUEC, 0xFFFF))
            {
                EPUF (DerefOf (OLTB [0x14]))
                ^^EC0.EL1C = VIDT (DerefOf (OLTB [0x08]))
                ^^EC0.EL1S = One
                ^^EC0.EL3C = VIDT (DerefOf (OLTB [0x14]))
                ^^EC0.EL3S = Zero
                ^^EC0.EPUE = One
                Release (^^EC0.MUEC)
            }
        }

        Method (SPIC, 1, NotSerialized)
        {
            Local0 = ((Arg0 * 0x06) + 0x02)
            If (!Acquire (^^EC0.MUEC, 0xFFFF))
            {
                ^^EC0.EPUE = Zero
                EPUF (DerefOf (OLTB [Local0]))
                Name (TTT0, Zero)
                TTT0 = Arg0
                If ((TTT0 == One))
                {
                    ^^EC0.EL1C = VIDT (DerefOf (OLTB [Local0]))
                    ^^EC0.EL1S = One
                }
                ElseIf ((TTT0 == 0x03))
                {
                    ^^EC0.EL3C = VIDT (DerefOf (OLTB [Local0]))
                    ^^EC0.EL3S = Zero
                }

                ^^EC0.EPUM = Arg0
                Release (^^EC0.MUEC)
            }
        }

        Method (VIDT, 1, NotSerialized)
        {
            If ((CVID < GDVD ()))
            {
                Local0 = (GDVD () - CVID) /* \_SB_.PCI0.SBRG.ASOC.CVID */
                Local0 = ((Local0 >> One) | 0x80)
                Local0 += Arg0
            }
            Else
            {
                Local0 = (CVID - GDVD ())
                Local0 >>= One
                If ((Arg0 > Local0))
                {
                    Local0 = (Arg0 - Local0)
                    Local0 |= 0x80
                }
                Else
                {
                    Local0 -= Arg0
                }
            }

            Return (Local0)
        }

        Method (EPUF, 1, NotSerialized)
        {
            If ((CVID >= (Arg0 << One)))
            {
                Local0 = (CVID - (Arg0 << One))
                Local1 = Zero
                If ((Local0 < GDVD ()))
                {
                    Local1 = One
                }
            }
            Else
            {
                Local1 = One
            }

            ^^EC0.REPU = Local1
        }

        Method (RBEC, 2, NotSerialized)
        {
            Return (RSBD (Arg0, Arg1))
        }

        Method (WBEC, 3, NotSerialized)
        {
            WSBD (Arg0, Arg1, Arg2)
            Return (RSBD (Arg0, Arg1))
        }

        Method (RSBD, 2, NotSerialized)
        {
            Return (^^EC0.ECBR (Arg0, Arg1))
        }

        Method (WSBD, 3, NotSerialized)
        {
            ^^EC0.ECBW (Arg0, Arg1, Arg2)
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (GF01, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 720", 
            "Phenom II 740", 
            "Phenom II 3.2G"
        })
        Name (GF02, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 740", 
            "Phenom II 3.2G", 
            "Phenom II 3.4G"
        })
        Name (GF03, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 910", 
            "Phenom II 925", 
            "Phenom II 945"
        })
        Name (GF04, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 925", 
            "Phenom II 945", 
            "Phenom II 955"
        })
        Name (GF05, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 925", 
            "Phenom II 945", 
            "Phenom II 955"
        })
        Name (GF06, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 945", 
            "Phenom II 955", 
            "Phenom II 965"
        })
        Name (GF07, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 955", 
            "Phenom II 965", 
            "Phenom II 3.6G"
        })
        Name (GF08, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 965", 
            "Phenom II 3.6G"
        })
        Name (GF09, Package (0x09)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x04, 
            "Original", 
            "Phenom II 3.6G", 
            "Phenom II 3.8G", 
            "Phenom II 3.9G"
        })
        Name (GF10, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 3.2G", 
            "Phenom II 3.4G"
        })
        Name (GF11, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 945", 
            "Phenom II 955"
        })
        Name (GF12, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 945", 
            "Phenom II 955"
        })
        Name (GF13, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 3.1G", 
            "Phenom II 3.3G"
        })
        Name (GF14, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 3.2G", 
            "Phenom II 3.4G"
        })
        Name (GF15, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 1055T", 
            "Phenom II 1075T"
        })
        Name (GF16, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 1075T", 
            "Phenom II 1090T"
        })
        Name (GF17, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 1075T", 
            "Phenom II 1090T"
        })
        Name (GF18, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 1090T", 
            "Phenom II 3.5G"
        })
        Name (GF19, Package (0x08)
        {
            0x0F080000, 
            "CPU Level Up", 
            Zero, 
            Zero, 
            0x03, 
            "Original", 
            "Phenom II 3.7G", 
            "Phenom II 3.9G"
        })
        Method (GRPF, 0, NotSerialized)
        {
            Local1 = GNVS (0x455C)
            If (((Local1 == Zero) | (Local1 == One)))
            {
                Local0 = GNVS (0x57B0)
            }
            Else
            {
                Local0 = Zero
            }

            Name (TTT0, Zero)
            TTT0 = Local0
            If ((TTT0 == One))
            {
                Return (Package (0x01)
                {
                    GF01
                })
            }
            ElseIf ((TTT0 == 0x02))
            {
                Return (Package (0x01)
                {
                    GF02
                })
            }
            ElseIf ((TTT0 == 0x03))
            {
                Return (Package (0x01)
                {
                    GF03
                })
            }
            ElseIf ((TTT0 == 0x04))
            {
                Return (Package (0x01)
                {
                    GF04
                })
            }
            ElseIf ((TTT0 == 0x05))
            {
                Return (Package (0x01)
                {
                    GF05
                })
            }
            ElseIf ((TTT0 == 0x06))
            {
                Return (Package (0x01)
                {
                    GF06
                })
            }
            ElseIf ((TTT0 == 0x07))
            {
                Return (Package (0x01)
                {
                    GF07
                })
            }
            ElseIf ((TTT0 == 0x08))
            {
                Return (Package (0x01)
                {
                    GF08
                })
            }
            ElseIf ((TTT0 == 0x09))
            {
                Return (Package (0x01)
                {
                    GF09
                })
            }
            ElseIf ((TTT0 == 0x0A))
            {
                Return (Package (0x01)
                {
                    GF10
                })
            }
            ElseIf ((TTT0 == 0x0B))
            {
                Return (Package (0x01)
                {
                    GF11
                })
            }
            ElseIf ((TTT0 == 0x0C))
            {
                Return (Package (0x01)
                {
                    GF12
                })
            }
            ElseIf ((TTT0 == 0x0D))
            {
                Return (Package (0x01)
                {
                    GF13
                })
            }
            ElseIf ((TTT0 == 0x0E))
            {
                Return (Package (0x01)
                {
                    GF14
                })
            }
            ElseIf ((TTT0 == 0x0F))
            {
                Return (Package (0x01)
                {
                    GF15
                })
            }
            ElseIf ((TTT0 == 0x10))
            {
                Return (Package (0x01)
                {
                    GF16
                })
            }
            ElseIf ((TTT0 == 0x11))
            {
                Return (Package (0x01)
                {
                    GF17
                })
            }
            ElseIf ((TTT0 == 0x12))
            {
                Return (Package (0x01)
                {
                    GF18
                })
            }
            ElseIf ((TTT0 == 0x13))
            {
                Return (Package (0x01)
                {
                    GF19
                })
            }

            Return (Package (0x00){})
        }

        Method (GITF, 1, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                ASB1 = GNVS (0x26AA)
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (SITF, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == Zero))
            {
                ASB0 = Zero
                If ((Arg2 == Zero))
                {
                    ASB0 |= 0x03
                }

                If ((Arg2 & One))
                {
                    PAR0 = Arg1
                    ISMI (0xAC)
                    Local0 = (PAR0 & 0xFFFF)
                    If ((Local0 == One))
                    {
                        ASB0 |= 0x03
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
            GEC = Arg0
            GPP0 = Arg0
            GPP0 = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            USB2 = Arg0
            USB4 = Arg0
            USB6 = Arg0
            GPP1 = Arg0
            IDE = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
            USB5 = Arg0
            USB7 = Arg0
            GPP2 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
            GPP3 = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, Zero)
        Name (XNPT, One)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, One)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PCIB) /* \PCIB */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == Ones))
            {
                Return (Zero)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (One)
                }

                Return (Zero)
            }
        }
    }

    Method (SBYT, 2, NotSerialized)
    {
    }

    Method (WBYT, 3, NotSerialized)
    {
    }

    Method (WWRD, 3, NotSerialized)
    {
    }

    Method (RSBT, 2, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (RBYT, 2, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (RWRD, 2, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Method (WBLK, 4, NotSerialized)
    {
    }

    Method (RBLK, 3, NotSerialized)
    {
        Local0 = Zero
        Return (Local0)
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (ECSM, Package (0x07)
        {
            0x11060004, 
            "Embedded Controller", 
            One, 
            Zero, 
            Zero, 
            One, 
            One
        })
        Name (GP11, Package (0x07)
        {
            0x11060007, 
            "Watchdog Timer", 
            One, 
            Zero, 
            Zero, 
            One, 
            0x07D1
        })
        Name (GR11, Package (0x02)
        {
            GP11, 
            ECSM
        })
        Method (GT11, 2, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x04))
            {
                If (!Acquire (^^EC0.MUEC, 0xFFFF))
                {
                    ASB1 = ^^EC0.HWME /* \_SB_.PCI0.SBRG.EC0_.HWME */
                    Release (^^EC0.MUEC)
                }
            }
            ElseIf ((TTT0 == 0x07))
            {
                RSMB (0xD2, Zero, 0x1F)
                Local0 = (CB09 & 0x0F)
                ASB1 = (Local0 * 0x0488)
            }
            Else
            {
                ASB0 = Zero
            }
        }

        Method (ST11, 3, NotSerialized)
        {
            Name (TTT0, Zero)
            TTT0 = (Arg0 & 0xFFFF)
            If ((TTT0 == 0x04))
            {
                ASB0 = One
            }
            ElseIf ((TTT0 == 0x07))
            {
                If ((Arg1 == Zero))
                {
                    RSMB (0xD2, Zero, 0x0A)
                    CB09 &= 0x7F
                    WSMB (0xD2, Zero, 0x0A)
                }

                If ((Arg1 != Zero))
                {
                    Divide (Arg1, 0x0488, Local1, Local0)
                    If ((Local1 >= 0x0244))
                    {
                        Local0 += One
                    }

                    If ((Local0 == Zero))
                    {
                        Local0 = One
                    }

                    If ((Local0 > 0x07))
                    {
                        Local0 = 0x07
                    }

                    RSMB (0xD2, Zero, 0x1F)
                    CB09 &= 0x7F
                    WSMB (0xD2, Zero, 0x0A)
                    RSMB (0xD2, Zero, 0x0A)
                    CB09 = (Local0 | 0x90)
                    WSMB (0xD2, Zero, 0x0A)
                }

                ASB0 = One
            }
            Else
            {
                ASB0 = Zero
            }
        }
    }

    Method (NB2S, 1, NotSerialized)
    {
    }

    Method (NB2W, 1, NotSerialized)
    {
    }

    Method (NPTS, 1, NotSerialized)
    {
    }

    Method (NWAK, 1, NotSerialized)
    {
    }

    Scope (_SB.PCI0.SBRG.SIOR)
    {
        Method (HWV0, 0, NotSerialized)
        {
            Return ((VIV0 * 0x0C))
        }

        Method (HWV1, 0, NotSerialized)
        {
            Return ((VIV1 * 0x0C))
        }

        Method (HWV2, 0, NotSerialized)
        {
            Return ((VIV2 * 0x0C))
        }

        Method (HWV3, 0, NotSerialized)
        {
            Return ((VIV3 * 0x18))
        }

        Method (HWV4, 0, NotSerialized)
        {
            Return ((VIV4 * 0x0C))
        }

        Method (HWV5, 0, NotSerialized)
        {
            Return ((VIV5 * 0x0C))
        }

        Method (HWV6, 0, NotSerialized)
        {
            Return ((VIV6 * 0x0C))
        }

        Method (HWV7, 0, NotSerialized)
        {
            Return ((VIV7 * 0x0C))
        }

        Method (HWT1, 0, NotSerialized)
        {
            Local0 = TPI1 /* \_SB_.PCI0.SBRG.SIOR.TPI1 */
            If ((Local0 > 0x80))
            {
                Local0 = (0x0100 - Local0)
            }

            Local0 += T1OF /* \T1OF */
            Return ((Local0 * 0x0A))
        }

        Method (HWT2, 0, NotSerialized)
        {
            Local0 = TPI2 /* \_SB_.PCI0.SBRG.SIOR.TPI2 */
            If ((Local0 > 0x80))
            {
                Local0 = (0x0100 - Local0)
            }

            Local0 += T2OF /* \T2OF */
            Return ((Local0 * 0x0A))
        }

        Method (HWT3, 0, NotSerialized)
        {
            Local0 = TPI3 /* \_SB_.PCI0.SBRG.SIOR.TPI3 */
            If ((Local0 > 0x80))
            {
                Local0 = (0x0100 - Local0)
            }

            Local0 += T3OF /* \T3OF */
            Return ((Local0 * 0x0A))
        }

        Method (HWF1, 0, NotSerialized)
        {
            If ((ETD1 == One))
            {
                Local0 = ((EFN1 << 0x08) | FTC1) /* \_SB_.PCI0.SBRG.SIOR.FTC1 */
                Return (CF16 (Local0))
            }

            Local0 = FTC1 /* \_SB_.PCI0.SBRG.SIOR.FTC1 */
            Local2 = One
            While ((((Local0 <= FHMT) || (Local0 >= FLMT)) && (
                Local2 == One)))
            {
                If ((Local0 <= FHMT))
                {
                    Local1 = FTD1 /* \_SB_.PCI0.SBRG.SIOR.FTD1 */
                    If ((Local1 > Zero))
                    {
                        Local1--
                        FTD1 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }
                Else
                {
                    Local1 = FTD1 /* \_SB_.PCI0.SBRG.SIOR.FTD1 */
                    If ((Local1 < 0x07))
                    {
                        Local1++
                        FTD1 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }

                Sleep (0x012C)
                Local0 = FTC1 /* \_SB_.PCI0.SBRG.SIOR.FTC1 */
            }

            Return (CF08 (Local0, DerefOf (DTB1 [FTD1])))
        }

        Method (HWF2, 0, NotSerialized)
        {
            If ((ETD2 == One))
            {
                Local0 = ((EFN2 << 0x08) | FTC2) /* \_SB_.PCI0.SBRG.SIOR.FTC2 */
                Return (CF16 (Local0))
            }

            Local0 = FTC2 /* \_SB_.PCI0.SBRG.SIOR.FTC2 */
            Local2 = One
            While ((((Local0 <= FHMT) || (Local0 >= FLMT)) && (
                Local2 == One)))
            {
                If ((Local0 <= FHMT))
                {
                    Local1 = FTD2 /* \_SB_.PCI0.SBRG.SIOR.FTD2 */
                    If ((Local1 > Zero))
                    {
                        Local1--
                        FTD2 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }
                Else
                {
                    Local1 = FTD2 /* \_SB_.PCI0.SBRG.SIOR.FTD2 */
                    If ((Local1 < 0x07))
                    {
                        Local1++
                        FTD2 = Local1
                    }
                    Else
                    {
                        Local2 = Zero
                    }
                }

                Sleep (0x012C)
                Local0 = FTC2 /* \_SB_.PCI0.SBRG.SIOR.FTC2 */
            }

            Return (CF08 (Local0, DerefOf (DTB1 [FTD2])))
        }

        Method (HWF3, 0, NotSerialized)
        {
            If ((ETD3 == One))
            {
                Local0 = ((EFN3 << 0x08) | FTC3) /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
                Return (CF16 (Local0))
            }

            Local0 = FTC3 /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
            If ((Local0 <= FHM3))
            {
                Local1 = FTD3 /* \_SB_.PCI0.SBRG.SIOR.FTD3 */
                If ((Local1 > Zero))
                {
                    Local1--
                    FTD3 = Local1
                    Sleep (0x012C)
                    Local0 = FTC3 /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
                }
            }
            ElseIf ((Local0 >= FLMT))
            {
                Local1 = FTD3 /* \_SB_.PCI0.SBRG.SIOR.FTD3 */
                If ((Local1 < One))
                {
                    Local1++
                    FTD3 = Local1
                    Sleep (0x012C)
                    Local0 = FTC3 /* \_SB_.PCI0.SBRG.SIOR.FTC3 */
                }
            }

            Return (CF08 (Local0, DerefOf (DTB1 [FTD3])))
        }

        Method (HWF4, 0, NotSerialized)
        {
            Local0 = ((EFN4 << 0x08) | FTC4) /* \_SB_.PCI0.SBRG.SIOR.FTC4 */
            Return (CF16 (Local0))
        }

        Method (HWF5, 0, NotSerialized)
        {
            Local0 = ((EFN5 << 0x08) | FTC5) /* \_SB_.PCI0.SBRG.SIOR.FTC5 */
            Return (CF16 (Local0))
        }

        Method (CF08, 2, NotSerialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0xFF)))
            {
                Return (Zero)
            }

            Local0 = (FTFR / (Arg0 * Arg1))
            Return (Local0)
        }

        Method (CF16, 1, NotSerialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0xFFFF)))
            {
                Return (Zero)
            }

            Local0 = (FTFR / (Arg0 * 0x02))
            Return (Local0)
        }

        Name (FTFR, 0x00149970)
        Name (FHMT, 0x78)
        Name (FHM3, 0x3C)
        Name (FLMT, 0xFE)
        Name (DTB1, Package (0x08)
        {
            One, 
            0x02, 
            0x04, 
            0x08, 
            0x10, 
            0x20, 
            0x40, 
            0x80
        })
        Name (DTB2, Package (0x02)
        {
            0x02, 
            0x08
        })
        OperationRegion (ECRE, SystemIO, IOEB, 0x20)
        Field (ECRE, ByteAcc, NoLock, Preserve)
        {
            Offset (0x05), 
            HIDX,   8, 
            HDAT,   8
        }

        IndexField (HIDX, HDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x0B), 
            FTD1,   3, 
            FTD2,   3, 
            FTD3,   1, 
            Offset (0x0C), 
            ETD1,   1, 
            ETD2,   1, 
            ETD3,   1, 
            Offset (0x0D), 
            FTC1,   8, 
            FTC2,   8, 
            FTC3,   8, 
            Offset (0x18), 
            EFN1,   8, 
            EFN2,   8, 
            EFN3,   8, 
            Offset (0x20), 
            VIV0,   8, 
            VIV1,   8, 
            VIV2,   8, 
            VIV3,   8, 
            VIV4,   8, 
            VIV5,   8, 
            VIV6,   8, 
            VIV7,   8, 
            Offset (0x29), 
            TPI1,   8, 
            TPI2,   8, 
            TPI3,   8, 
            Offset (0x80), 
            FTC4,   8, 
            EFN4,   8, 
            FTC5,   8, 
            EFN5,   8
        }

        OperationRegion (SBHM, SystemIO, SBRV, 0x02)
        Field (SBHM, ByteAcc, NoLock, Preserve)
        {
            SBVX,   8, 
            SBVT,   8
        }

        IndexField (SBVX, SBVT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x69), 
            SBF0,   16, 
            Offset (0x6E), 
            SBF1,   16, 
            Offset (0x73), 
            SBF2,   16, 
            Offset (0x78), 
            SBF3,   16, 
            Offset (0x7D), 
            SBF4,   16
        }
    }

    Scope (\)
    {
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            Offset (0x20), 
            CPUQ,   8, 
            CPVL,   16, 
            CPVH,   16, 
            CPVC,   1
        }
    }

    Scope (_SB.PCI0.SBRG.ASOC)
    {
        Name (CORV, Package (0x05)
        {
            0x06020000, 
            "Vcore Voltage", 
            0x0352, 
            0x0640, 
            One
        })
        Name (V3VV, Package (0x05)
        {
            0x06020001, 
            " +3.3 Voltage", 
            0x0B9A, 
            0x0E2E, 
            One
        })
        Name (V5VV, Package (0x05)
        {
            0x06020002, 
            " +5 Voltage", 
            0x1194, 
            0x157C, 
            One
        })
        Name (VV12, Package (0x05)
        {
            0x06020003, 
            " +12 Voltage", 
            0x27D8, 
            0x35E8, 
            One
        })
        Name (VPAR, Package (0x04)
        {
            Package (0x03)
            {
                Zero, 
                One, 
                Zero
            }, 

            Package (0x03)
            {
                0xF9, 
                0x03E8, 
                Zero
            }, 

            Package (0x03)
            {
                0x4B, 
                0x64, 
                Zero
            }, 

            Package (0x03)
            {
                0x013C, 
                0x64, 
                Zero
            }
        })
        Name (VBUF, Package (0x05)
        {
            0x04, 
            CORV, 
            V3VV, 
            V5VV, 
            VV12
        })
        Method (VGET, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (^^SIOR.HWV2 ())
            }

            If ((Arg0 == One))
            {
                Return (^^SIOR.HWV5 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (^^SIOR.HWV1 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (^^SIOR.HWV0 ())
            }
        }

        Name (CPUT, Package (0x05)
        {
            0x06030000, 
            "CPU Temperature", 
            0x0258, 
            0x03B6, 
            0x00010001
        })
        Name (MBTP, Package (0x05)
        {
            0x06030001, 
            "MB Temperature", 
            0x01C2, 
            0x02EE, 
            0x00010001
        })
        Name (TBUF, Package (0x03)
        {
            0x02, 
            CPUT, 
            MBTP
        })
        Method (TGET, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (^^SIOR.HWT1 ())
            }

            If ((Arg0 == One))
            {
                Return (^^SIOR.HWT2 ())
            }
        }

        Name (CPUF, Package (0x05)
        {
            0x06040000, 
            "CPU FAN Speed", 
            0x0258, 
            0x1C20, 
            0x00010001
        })
        Name (CHAF, Package (0x05)
        {
            0x06040001, 
            "CHASSIS FAN Speed", 
            0x0258, 
            0x1C20, 
            0x00010001
        })
        Name (FBUF, Package (0x03)
        {
            0x02, 
            CPUF, 
            CHAF
        })
        Method (FGET, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Return (^^SIOR.HWF1 ())
            }

            If ((Arg0 == One))
            {
                Return (^^SIOR.HWF2 ())
            }
        }

        Name (QCFN, Package (0x06)
        {
            0x04060003, 
            "CPU Q-Fan Control", 
            Zero, 
            One, 
            0x02, 
            0x00010000
        })
        Name (QBUF, Package (0x02)
        {
            One, 
            QCFN
        })
    }

    Scope (_SB.PCI0.SBRG)
    {
        Method (SIAS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                G173 = One
            }
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Name (CRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y21, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y22, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y23, AddressRangeMemory, TypeStatic)
            })
            CreateDWordField (CRS, \_SB.PCI0._Y21._MIN, MIN5)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y21._MAX, MAX5)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y21._LEN, LEN5)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y22._MIN, MIN6)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y22._MAX, MAX6)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y22._LEN, LEN6)  // _LEN: Length
            CreateDWordField (CRS, \_SB.PCI0._Y23._MIN, MIN7)  // _MIN: Minimum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y23._MAX, MAX7)  // _MAX: Maximum Base Address
            CreateDWordField (CRS, \_SB.PCI0._Y23._LEN, LEN7)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = MG1L /* \MG1L */
                If (Local0)
                {
                    MIN5 = MG1B /* \MG1B */
                    LEN5 = MG1L /* \MG1L */
                    MAX5 = (MIN5 + Local0--)
                }

                MIN6 = MG2B /* \MG2B */
                LEN6 = MG2L /* \MG2L */
                Local0 = MG2L /* \MG2L */
                MAX6 = (MIN6 + Local0--)
                MIN7 = MG3B /* \MG3B */
                LEN7 = MG3L /* \MG3L */
                Local0 = MG3L /* \MG3L */
                MAX7 = (MIN7 + Local0--)
                Return (CRS) /* \_SB_.PCI0.CRS_ */
            }
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        PTS (Arg0)
        WAKP [Zero] = Zero
        WAKP [One] = Zero
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        OSTP = OSYS ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (IOWK){}
        Else
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }

        Return (WAKP) /* \WAKP */
    }

    OperationRegion (IORK, SystemIO, 0xB1, One)
    Field (IORK, ByteAcc, NoLock, Preserve)
    {
        IOWK,   8
    }

    If (OSCF)
    {
        Scope (_SB.PCI0)
        {
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        (CTRL & 0x1E)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)){}
                        If ((CTRL & 0x04))
                        {
                            EPNM = One
                        }
                        Else
                        {
                            EPNM = Zero
                        }

                        If ((CTRL & 0x10)){}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((RVID <= 0x13)){}
        }
    }

    Scope (\)
    {
        OperationRegion (SOR1, SystemIO, SBA1, 0x10)
        Field (SOR1, ByteAcc, NoLock, Preserve)
        {
            SMSA,   8, 
            SSSA,   8, 
            SBCA,   8, 
            SHCA,   8, 
            SBAA,   8, 
            SD0A,   8, 
            SD1A,   8, 
            SBDA,   8, 
            SSCA,   8, 
            SMCA,   8, 
            SSEA,   16, 
            SSDA,   16, 
            SMTA,   8
        }

        OperationRegion (SOR2, SystemIO, SBA2, 0x10)
        Field (SOR2, ByteAcc, NoLock, Preserve)
        {
            SMSB,   8, 
            SSSB,   8, 
            SBCB,   8, 
            SHCB,   8, 
            SBAB,   8, 
            SD0B,   8, 
            SD1B,   8, 
            SBDB,   8, 
            SSCB,   8, 
            SMCB,   8, 
            SSEB,   16, 
            SSDB,   16, 
            SMTB,   8
        }

        Mutex (MSMB, 0x00)
        Name (SMBF, Zero)
        Name (SM00, Zero)
        Method (ISMB, 0, NotSerialized)
        {
            Local0 = (SM00 & 0xFFFE)
            If ((Local0 != SBA1))
            {
                SMBF = SM00 /* \SM00 */
            }
        }

        Method (CSMB, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                If (SMBF)
                {
                    Local0 = (SBA1 + One)
                    SM00 = Local0
                }

                Local0 = SMBU /* \SMBU */
                While (Local0)
                {
                    Local0 = SMBU /* \SMBU */
                }

                SMBU = One
            }
            Else
            {
                If (SMBF)
                {
                    SM00 = SMBF /* \SMBF */
                }

                SMBU = Zero
            }
        }

        Method (RWBK, 5, NotSerialized)
        {
            Acquire (MSMB, 0xFFFF)
            If ((Arg0 == Zero))
            {
                Local0 = SMSA /* \SMSA */
                Local0 &= Zero
                Local0 |= 0xFF
                SMSA = Local0
                Sleep (0x02)
                Local0 = SBAA /* \SBAA */
                Local0 &= Zero
                Local0 |= Arg1
                SBAA = Local0
                Sleep (0x02)
                Local0 = SHCA /* \SHCA */
                Local0 &= Zero
                Local0 |= Arg2
                SHCA = Local0
                Sleep (0x02)
                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x14
                SBCA = Local0
                Sleep (0x02)
                Local0 = SD0A /* \SD0A */
                Local0 &= Zero
                Local0 |= Arg3
                SD0A = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local2 = Arg3
                    Local3 = Arg2
                    While (Local2)
                    {
                        Local4 = DerefOf (Arg4 [Local3])
                        SBDA = Local4
                        Sleep (0x02)
                        Local2--
                        Local3++
                    }
                }

                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x54
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        Release (MSMB)
                        Return (One)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Local1 = Arg2
                    Local2 = Arg3
                    While (Local2)
                    {
                        Arg4 [Local1] = SBDA /* \SBDA */
                        Sleep (0x02)
                        Local1++
                        Local2--
                    }
                }
            }

            If ((Arg0 == One)){}
            Release (MSMB)
            Return (Zero)
        }

        Name (BTBF, Zero)
        Method (RWBT, 4, NotSerialized)
        {
            Acquire (MSMB, 0xFFFF)
            CSMB (Zero)
            If ((Arg0 == Zero))
            {
                SMSA = SMSA /* \SMSA */
                Sleep (0x02)
                SBAA = Arg1
                Sleep (0x02)
                SHCA = Arg2
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    SD0A = Arg3
                }

                SBCA = 0x48
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While (!(Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    If ((Local1 & 0x1C))
                    {
                        CSMB (One)
                        Release (MSMB)
                        Return (0xFF)
                    }

                    If ((Local1 & 0x02))
                    {
                        Break
                    }

                    Sleep (0x02)
                }

                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Arg3 = SD0A /* \SD0A */
            }

            If ((Arg0 == One)){}
            CSMB (One)
            Release (MSMB)
            Return (Arg3)
        }

        Name (SMBV, Buffer (One)
        {
             0x00                                             // .
        })
        Method (RWSM, 4, NotSerialized)
        {
            Local5 = SMBU /* \SMBU */
            While (~((Local5 & (Arg0 + One)) == Zero))
            {
                Sleep (0x0A)
                Local5 = SMBU /* \SMBU */
            }

            SMBU = (Arg0 + One)
            If ((Arg0 == Zero))
            {
                Local0 = SHCA /* \SHCA */
                Local0 &= Zero
                Local0 |= Arg2
                SHCA = Local0
                Sleep (0x02)
                Local0 = SBAA /* \SBAA */
                Local0 &= Zero
                Local0 |= Arg1
                SBAA = Local0
                Sleep (0x02)
                Local0 = SBCA /* \SBCA */
                Local0 &= Zero
                Local0 |= 0x08
                SBCA = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local0 = SD0A /* \SD0A */
                    Local0 &= Zero
                    Local0 |= DerefOf (Arg3 [Zero])
                    SD0A = Local0
                    Sleep (0x02)
                }

                Local0 = SMSA /* \SMSA */
                Local0 &= Zero
                Local0 |= 0x1E
                SMSA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                }

                Local1 = SBCA /* \SBCA */
                Sleep (0x02)
                Local0 = (Local1 | 0x40)
                SBCA = Local0
                Sleep (0x02)
                Local1 = SMSA /* \SMSA */
                Sleep (0x02)
                If ((Local1 & 0x1C))
                {
                    SMBU = Zero
                    Return (One)
                }

                While ((Local1 & One))
                {
                    Local1 = SMSA /* \SMSA */
                    Sleep (0x02)
                    If ((Local1 & 0x1C))
                    {
                        SMBU = Zero
                        Return (One)
                    }
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Arg3 [Zero] = SD0A /* \SD0A */
                    Sleep (0x02)
                }
            }

            If ((Arg0 == One))
            {
                Local0 = SHCB /* \SHCB */
                Local0 &= Zero
                Local0 |= Arg2
                SHCB = Local0
                Sleep (0x02)
                Local0 = SBAB /* \SBAB */
                Local0 &= Zero
                Local0 |= Arg1
                SBAB = Local0
                Sleep (0x02)
                Local0 = SBCB /* \SBCB */
                Local0 &= Zero
                Local0 |= 0x08
                SBCB = Local0
                Sleep (0x02)
                Local1 = (Arg1 & One)
                If ((Local1 == Zero))
                {
                    Local0 = SD0B /* \SD0B */
                    Local0 &= Zero
                    Local0 |= DerefOf (Arg3 [Zero])
                    SD0B = Local0
                    Sleep (0x02)
                }

                Local0 = SMSB /* \SMSB */
                Local0 &= Zero
                Local0 |= 0x1E
                SMSB = Local0
                Sleep (0x02)
                Local1 = SMSB /* \SMSB */
                While ((Local1 & One))
                {
                    Local1 = SMSB /* \SMSB */
                    Sleep (0x02)
                }

                Local1 = SBCB /* \SBCB */
                Sleep (0x02)
                Local0 = (Local1 | 0x40)
                SBCB = Local0
                Sleep (0x02)
                Local1 = SMSB /* \SMSB */
                Sleep (0x02)
                If ((Local1 & 0x1C))
                {
                    SMBU = Zero
                    Return (One)
                }

                While ((Local1 & One))
                {
                    Local1 = SMSB /* \SMSB */
                    Sleep (0x02)
                    If ((Local1 & 0x1C))
                    {
                        SMBU = Zero
                        Return (One)
                    }
                }

                Local1 = (Arg1 & One)
                If (Local1)
                {
                    Arg3 [Zero] = SD0B /* \SD0B */
                    Sleep (0x02)
                }
            }

            SMBU = Zero
            Return (Zero)
        }

        Method (APTS, 1, NotSerialized)
        {
            \AOD.APTS (Arg0)
        }

        Method (AWAK, 1, NotSerialized)
        {
            \AOD.AWAK (Arg0)
        }

        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, One)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            Name (OBID, Package (0x1C)
            {
                0x09, 
                0x01010000, 
                0x01020000, 
                0x02010000, 
                0x02020000, 
                0x02030000, 
                0x02040000, 
                0x02050000, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                0xFF, 
                "CPU Clock", 
                "PCIE Clock", 
                "DRAM Voltage", 
                "VDDA Voltage", 
                "HT Voltage", 
                "GPU Voltage", 
                "SB Voltage", 
                "", 
                ""
            })
            Name (OBIT, Package (0x31)
            {
                0x01010000, 
                0x000186A0, 
                0x000927C0, 
                Zero, 
                0x03E8, 
                Zero, 
                0x01020000, 
                0x000186A0, 
                0x00030D40, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02010000, 
                0x0001D4C0, 
                0x0003BB14, 
                Zero, 
                0x05DC, 
                Zero, 
                0x02020000, 
                0x0003D090, 
                0x000445C0, 
                Zero, 
                0x2710, 
                Zero, 
                0x02030000, 
                0x0001D4C0, 
                0x000222E0, 
                Zero, 
                0x03E8, 
                Zero, 
                0x02040000, 
                0x0001ADB0, 
                0x0002A3C8, 
                Zero, 
                0x2710, 
                Zero, 
                0x02050000, 
                0x0001ADB0, 
                0x000222E0, 
                Zero, 
                0x2710, 
                Zero, 
                0x02060000, 
                0x000249F0, 
                0x0002BF20, 
                Zero, 
                0x2710, 
                Zero, 
                Zero
            })
            Name (OBDT, Package (0x01)
            {
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
                PWMI ()
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (DISC, 0, NotSerialized)
            {
            }

            Method (CNCT, 0, NotSerialized)
            {
            }

            Name (PWMT, Buffer (0x31)
            {
                /* 0000 */  0x01, 0x01, 0x01, 0x00, 0xFF, 0x30, 0x01, 0x63,  // .....0.c
                /* 0008 */  0x02, 0x02, 0x01, 0x00, 0x05, 0x00, 0x01, 0x05,  // ........
                /* 0010 */  0x03, 0x03, 0x01, 0x00, 0x15, 0x00, 0x01, 0x15,  // ........
                /* 0018 */  0x04, 0x04, 0x01, 0x00, 0x29, 0x00, 0x01, 0x29,  // ....)..)
                /* 0020 */  0x05, 0x05, 0x01, 0x00, 0x05, 0x00, 0x01, 0x05,  // ........
                /* 0028 */  0x07, 0x07, 0x01, 0x00, 0xFF, 0x00, 0x01, 0x63,  // .......c
                /* 0030 */  0xFF                                             // .
            })
            Method (PWMI, 0, NotSerialized)
            {
                Local0 = DerefOf (\_SB.PCI0.SBRG.ASOC.G3D2 [0x03])
                PWMT [0x05] = Local0
                Local0 = DerefOf (\_SB.PCI0.SBRG.ASOC.G353 [0x03])
                PWMT [0x0D] = Local0
                Local0 = DerefOf (\_SB.PCI0.SBRG.ASOC.G354 [0x03])
                PWMT [0x15] = Local0
                Local0 = DerefOf (\_SB.PCI0.SBRG.ASOC.G361 [0x03])
                PWMT [0x1D] = Local0
                Local0 = DerefOf (\_SB.PCI0.SBRG.ASOC.G356 [0x03])
                PWMT [0x25] = Local0
            }

            Method (VTR, 1, NotSerialized)
            {
                Local0 = Zero
                Local1 = Arg0
                If ((PWMX == One))
                {
                    Local0 = (((Local1 - 0x0001D4C0) / 0x05DC) + PMIN)
                    \_SB.PCI0.SBRG.ASOC.SIT3 (0x03020032, Local0, 0x02)
                }
                ElseIf ((PWMX == 0x02))
                {
                    Local0 = (((Local1 - 0x0003D090) / 0x2710) + PMIN)
                    \_SB.PCI0.SBRG.ASOC.SIT3 (0x03020053, Local0, 0x02)
                }
                ElseIf ((PWMX == 0x03))
                {
                    Local0 = (((Local1 - 0x0001D4C0) / 0x03E8) + PMIN)
                    \_SB.PCI0.SBRG.ASOC.SIT3 (0x03020054, Local0, 0x02)
                }
                ElseIf ((PWMX == 0x04))
                {
                    Local0 = (((Local1 - 0x0001ADB0) / 0x03E8) + PMIN)
                    \_SB.PCI0.SBRG.ASOC.SIT3 (0x03020061, Local0, 0x02)
                }
                ElseIf ((PWMX == 0x05))
                {
                    Local0 = (((Local1 - 0x0001ADB0) / 0x2710) + PMIN)
                    \_SB.PCI0.SBRG.ASOC.SIT3 (0x03020056, Local0, 0x02)
                }

                Return (Local0)
            }

            Method (RTV, 1, NotSerialized)
            {
                Local0 = Arg0
                Local1 = Zero
                If ((PWMX == One))
                {
                    \_SB.PCI0.SBRG.ASOC.GIT3 (0x03020032)
                    Local0 = \_SB.PCI0.SBRG.ASOC.ASB1
                    Local1 = (0x0001D4C0 + ((Local0 - PMIN) * 0x05DC))
                }
                ElseIf ((PWMX == 0x02))
                {
                    \_SB.PCI0.SBRG.ASOC.GIT3 (0x03020053)
                    Local0 = \_SB.PCI0.SBRG.ASOC.ASB1
                    Local1 = (0x0003D090 + ((Local0 - PMIN) * 0x2710))
                }
                ElseIf ((PWMX == 0x03))
                {
                    \_SB.PCI0.SBRG.ASOC.GIT3 (0x03020054)
                    Local0 = \_SB.PCI0.SBRG.ASOC.ASB1
                    Local1 = (0x0001D4C0 + ((Local0 - PMIN) * 0x03E8))
                }
                ElseIf ((PWMX == 0x04))
                {
                    \_SB.PCI0.SBRG.ASOC.GIT3 (0x03020061)
                    Local0 = \_SB.PCI0.SBRG.ASOC.ASB1
                    Local1 = (0x0001ADB0 + ((Local0 - PMIN) * 0x03E8))
                }
                ElseIf ((PWMX == 0x05))
                {
                    \_SB.PCI0.SBRG.ASOC.GIT3 (0x03020056)
                    Local0 = \_SB.PCI0.SBRG.ASOC.ASB1
                    Local1 = (0x0001ADB0 + ((Local0 - PMIN) * 0x2710))
                }
                Else
                {
                }

                Return (Local1)
            }

            Name (QLST, Package (0x08)
            {
                0x07, 
                Package (0x05)
                {
                    0x2646, 
                    "Memory Clock Mode", 
                    Zero, 
                    0x03, 
                    Package (0x03)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x06)
                        {
                            "Limit"
                        }, 

                        Buffer (0x07)
                        {
                            "Manual"
                        }
                    }
                }, 

                Package (0x06)
                {
                    0x47E0, 
                    "Memclock Value", 
                    One, 
                    Buffer (0x05)
                    {
                         0x02, 0x00, 0x01, 0x03, 0x00                     // .....
                    }, 

                    0x08, 
                    Package (0x08)
                    {
                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "400"
                        }, 

                        Buffer (0x04)
                        {
                            "533"
                        }, 

                        Buffer (0x04)
                        {
                            "667"
                        }, 

                        Buffer (0x04)
                        {
                            "800"
                        }, 

                        Buffer (0x05)
                        {
                            "Auto"
                        }
                    }
                }, 

                Package (0x05)
                {
                    0x2646, 
                    "DRAM Timing Mode", 
                    Zero, 
                    0x04, 
                    Package (0x04)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x05)
                        {
                            "Both"
                        }
                    }
                }, 

                Package (0x07)
                {
                    0x4538, 
                    "DCT0 CAS Latency (CL)", 
                    0x02, 
                    Buffer (0x05)
                    {
                         0x02, 0x00, 0x03, 0x03, 0x00                     // .....
                    }, 

                    Buffer (0x05)
                    {
                         0x02, 0x02, 0x03, 0x03, 0x00                     // .....
                    }, 

                    0x10, 
                    Package (0x10)
                    {
                        Buffer (0x05)
                        {
                            "Auto"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x06)
                        {
                            "4 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "5 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "6 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "7 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "8 CLK"
                        }, 

                        Buffer (0x06)
                        {
                            "9 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "10 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "11 CLK"
                        }, 

                        Buffer (0x07)
                        {
                            "12 CLK"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }, 

                        Buffer (0x04)
                        {
                            "rvd"
                        }
                    }
                }, 

                Package (0x05)
                {
                    0x455C, 
                    "NB FID Control", 
                    Zero, 
                    0x02, 
                    Package (0x02)
                    {
                        Buffer (0x07)
                        {
                            "Manual"
                        }, 

                        Buffer (0x05)
                        {
                            "Auto"
                        }
                    }
                }, 

                Package (0x06)
                {
                    0x54A0, 
                    "NBFID ID", 
                    One, 
                    Buffer (0x05)
                    {
                         0x02, 0x01, 0x06, 0x03, 0x00                     // .....
                    }, 

                    0x21, 
                    Package (0x21)
                    {
                        Buffer (0x02)
                        {
                            "3"
                        }, 

                        Buffer (0x02)
                        {
                            "4"
                        }, 

                        Buffer (0x02)
                        {
                            "5"
                        }, 

                        Buffer (0x02)
                        {
                            "6"
                        }, 

                        Buffer (0x02)
                        {
                            "7"
                        }, 

                        Buffer (0x02)
                        {
                            "8"
                        }, 

                        Buffer (0x02)
                        {
                            "9"
                        }, 

                        Buffer (0x03)
                        {
                            "10"
                        }, 

                        Buffer (0x03)
                        {
                            "11"
                        }, 

                        Buffer (0x03)
                        {
                            "12"
                        }, 

                        Buffer (0x03)
                        {
                            "13"
                        }, 

                        Buffer (0x03)
                        {
                            "14"
                        }, 

                        Buffer (0x03)
                        {
                            "15"
                        }, 

                        Buffer (0x03)
                        {
                            "16"
                        }, 

                        Buffer (0x03)
                        {
                            "17"
                        }, 

                        Buffer (0x03)
                        {
                            "18"
                        }, 

                        Buffer (0x03)
                        {
                            "19"
                        }, 

                        Buffer (0x03)
                        {
                            "20"
                        }, 

                        Buffer (0x03)
                        {
                            "21"
                        }, 

                        Buffer (0x03)
                        {
                            "22"
                        }, 

                        Buffer (0x03)
                        {
                            "23"
                        }, 

                        Buffer (0x03)
                        {
                            "24"
                        }, 

                        Buffer (0x03)
                        {
                            "25"
                        }, 

                        Buffer (0x03)
                        {
                            "26"
                        }, 

                        Buffer (0x03)
                        {
                            "27"
                        }, 

                        Buffer (0x03)
                        {
                            "28"
                        }, 

                        Buffer (0x03)
                        {
                            "29"
                        }, 

                        Buffer (0x03)
                        {
                            "30"
                        }, 

                        Buffer (0x03)
                        {
                            "31"
                        }, 

                        Buffer (0x03)
                        {
                            "32"
                        }, 

                        Buffer (0x03)
                        {
                            "33"
                        }, 

                        Buffer (0x03)
                        {
                            "34"
                        }, 

                        Buffer (0x03)
                        {
                            "35"
                        }
                    }
                }, 

                Package (0x05)
                {
                    0x1785, 
                    "DDR3 Memory Profile", 
                    Zero, 
                    0x02, 
                    Package (0x02)
                    {
                        Buffer (0x09)
                        {
                            "Disabled"
                        }, 

                        Buffer (0x08)
                        {
                            "Enabled"
                        }
                    }
                }
            })
            OperationRegion (AODT, SystemMemory, 0x000EF297, 0x0100)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                Offset (0x08), 
                ASBF,   960, 
                GFXO,   1, 
                GMOD,   2, 
                Offset (0x84), 
                RAMB,   32, 
                RAMS,   32
            }

            Name (ID01, Zero)
            Name (ID02, Zero)
            Method (SOID, 1, NotSerialized)
            {
                ID01 = (Arg0 >> 0x18)
                ID02 = ((Arg0 & 0x00FF0000) >> 0x10)
                Return (Zero)
            }

            Method (WROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                CreateDWordField (Arg0, Zero, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                IFPK [Zero] = BUF0 /* \AOD_.WROW.BUF0 */
                IFPK [One] = BUF1 /* \AOD_.WROW.BUF1 */
                IFPK [0x02] = BUF2 /* \AOD_.WROW.BUF2 */
                IFPK [0x03] = BUF3 /* \AOD_.WROW.BUF3 */
                IFPK [0x04] = BUF4 /* \AOD_.WROW.BUF4 */
                IFPK [0x05] = BUF5 /* \AOD_.WROW.BUF5 */
                Local0 = Arg3
                Local1 = Zero
                While (Local0)
                {
                    Arg1 [((Arg2 * Arg3) + Local1)] = DerefOf (
                        IFPK [Local1])
                    Local1++
                    Local0--
                }
            }

            Method (GROW, 4, NotSerialized)
            {
                Name (IFPK, Package (0x06)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Arg3
                Local1 = Zero
                While (Local0)
                {
                    IFPK [Local1] = DerefOf (Arg0 [((Arg2 * Arg3
                        ) + Local1)])
                    Local1++
                    Local0--
                }

                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                CreateDWordField (Arg1, 0x14, BUF5)
                BUF0 = DerefOf (IFPK [Zero])
                BUF1 = DerefOf (IFPK [One])
                BUF2 = DerefOf (IFPK [0x02])
                BUF3 = DerefOf (IFPK [0x03])
                BUF4 = DerefOf (IFPK [0x04])
                BUF5 = DerefOf (IFPK [0x05])
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                CreateDWordField (Arg1, 0x10, BUF4)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        BUF4 = DerefOf (OBIT [(Local0 + 0x04)])
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (CBTP, 1, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg0, Zero, BUF0)
                CreateDWordField (Arg0, 0x04, BUF1)
                CreateDWordField (Arg0, 0x08, BUF2)
                CreateDWordField (Arg0, 0x0C, BUF3)
                CreateDWordField (Arg0, 0x10, BUF4)
                CreateDWordField (Arg0, 0x14, BUF5)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == BUF0))
                    {
                        OBIT [(Local0 + Zero)] = BUF0 /* \AOD_.CBTP.BUF0 */
                        OBIT [(Local0 + One)] = BUF1 /* \AOD_.CBTP.BUF1 */
                        OBIT [(Local0 + 0x02)] = BUF2 /* \AOD_.CBTP.BUF2 */
                        OBIT [(Local0 + 0x03)] = BUF3 /* \AOD_.CBTP.BUF3 */
                        OBIT [(Local0 + 0x04)] = BUF4 /* \AOD_.CBTP.BUF4 */
                        OBIT [(Local0 + 0x05)] = BUF5 /* \AOD_.CBTP.BUF5 */
                        Break
                    }

                    Local0 += 0x06
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (ABS, 2, NotSerialized)
            {
                If ((Arg0 < Arg1))
                {
                    Return ((Arg1 - Arg0))
                }
                Else
                {
                    Return ((Arg0 - Arg1))
                }
            }

            Name (DG01, One)
            Name (DG02, 0x02)
            Name (DG03, 0x03)
            Name (DG04, 0x04)
            Method (ADBG, 2, NotSerialized)
            {
                If (DBG)
                {
                    If ((Arg1 == DG01))
                    {
                        If (GDBG)
                        {
                            Debug = "[GEN]"
                            Debug = Arg0
                        }
                    }
                    ElseIf ((Arg1 == DG02))
                    {
                        If (CDBG)
                        {
                            Debug = "[CLK]"
                            Debug = Arg0
                        }
                    }
                    ElseIf ((Arg1 == DG03))
                    {
                        If (VDBG)
                        {
                            Debug = "[VOL]"
                            Debug = Arg0
                        }
                    }
                    ElseIf ((Arg1 == DG04))
                    {
                        If (RDBG)
                        {
                            Debug = "[RCMD]"
                            Debug = Arg0
                        }
                    }
                    Else
                    {
                        Debug = "[NULL]"
                        Debug = Arg0
                    }
                }
            }

            OperationRegion (SMIX, SystemIO, SMIP, One)
            Field (SMIX, ByteAcc, NoLock, Preserve)
            {
                SMIC,   8
            }

            Name (EXBF, Buffer (0x78){})
            Method (GCMS, 1, NotSerialized)
            {
                Name (TEMP, Buffer (0x06){})
                CreateDWordField (TEMP, Zero, TMP1)
                CreateWordField (TEMP, 0x04, TMP2)
                ASCD = One
                CreateWordField (EXBF, Zero, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = Zero
                CMSI = Arg0
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                TMP1 = ASTS /* \AOD_.ASTS */
                TMP2 = CMSD /* \AOD_.GCMS.CMSD */
                Return (TEMP) /* \AOD_.GCMS.TEMP */
            }

            Method (SCMS, 2, NotSerialized)
            {
                ASCD = 0x02
                CreateWordField (EXBF, Zero, CMSI)
                CreateWordField (EXBF, 0x02, CMSD)
                EXBF = Zero
                CMSI = Arg0
                CMSD = Arg1
                ASBF = EXBF /* \AOD_.EXBF */
                SMIC = AODS /* \AODS */
                EXBF = ASBF /* \AOD_.ASBF */
                Return (ASTS) /* \AOD_.ASTS */
            }

            Name (CPUD, Zero)
            Name (GFXD, Zero)
            Name (SBCD, Zero)
            Method (GETC, 1, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    GVB2 = One
                    GVB1 = Zero
                    Return (GVBF) /* \AOD_.GVBF */
                }

                GVB2 = Zero
                GVB1 = CCLK (Arg0)
                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (SETC, 2, NotSerialized)
            {
                If (RWBK (Zero, 0xD3, Zero, 0x20, TSBF))
                {
                    Return (One)
                }

                If ((Arg0 == One))
                {
                    RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                    Local0 = DerefOf (TSBF [0x07])
                    If ((Local0 == 0x75))
                    {
                        Local0 = GDIV (0x14)
                        Local1 = GCCX (0x10, 0x11, 0x14, 0xC350)
                        Local2 = (Arg1 * Local0)
                        If ((Local1 != Local2))
                        {
                            If (!CFMN (Local2, 0xC350))
                            {
                                SFSB (Arg1)
                            }
                        }

                        Local3 = Zero
                    }
                    Else
                    {
                        Local0 = GDIV (0x1C)
                        Local1 = GCCX (0x0B, 0x0C, 0x1C, 0x37EE)
                        Local2 = (Arg1 * Local0)
                        Local3 = RMPC (Local1, Local2, 0x07D0, Arg0)
                    }
                }
                ElseIf ((Arg0 == 0x02))
                {
                    RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                    Local0 = DerefOf (TSBF [0x07])
                    If ((Local0 == 0x75))
                    {
                        Local0 = GDIV (0x1C)
                        Local1 = GCCX (0x1A, 0x1B, 0x1C, 0x37EE)
                        Local2 = (Arg1 * Local0)
                        Local3 = RMPC (Local1, Local2, 0x07D0, Arg0)
                    }
                    Else
                    {
                        Local0 = DerefOf (DIVD [((DerefOf (TSBF [0x1E]) & 
                            0xF0) >> 0x04)])
                        Local1 = GCCX (0x0F, 0x10, 0x1D, 0x37EE)
                        Local2 = (Arg1 * Local0)
                        Local3 = RMPC (Local1, Local2, 0x07D0, Arg0)
                    }
                }
                ElseIf ((Arg0 == 0x03))
                {
                    RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                    Local0 = DerefOf (TSBF [0x07])
                    If ((Local0 == 0x75))
                    {
                        Local0 = GDIV (0x1F)
                        Local1 = GCCX (0x1D, 0x1E, 0x1F, 0x37EE)
                        Local2 = (Arg1 * Local0)
                        Local3 = RMPC (Local1, Local2, 0x07D0, Arg0)
                    }
                    Else
                    {
                        Local3 = Zero
                    }
                }

                Debug = "current target ramp step clkid"
                Debug = Local1
                Debug = Local2
                Debug = 0x07D0
                Debug = Arg0
                If (Local3)
                {
                    Return (Local3)
                }

                Return (Zero)
            }

            Method (CINI, 0, NotSerialized)
            {
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                Local0 = DerefOf (TSBF [0x07])
                If ((Local0 == 0x75))
                {
                    If (RWBK (Zero, 0xD3, 0x07, 0x09, TSBF))
                    {
                        Return (One)
                    }

                    If ((((DerefOf (TSBF [0x08]) & 0x0F) != 
                        One) || (DerefOf (TSBF [0x07]) != 0x75)))
                    {
                        Return (0x03)
                    }

                    TSBF [0x0B] = 0x20
                    TSBF [0x0C] = (DerefOf (TSBF [0x0C]) | 0xA0)
                    If (RWBK (Zero, 0xD2, 0x0B, 0x02, TSBF))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }
                Else
                {
                    If (RWBK (Zero, 0xD3, Zero, 0x0F, TSBF))
                    {
                        Return (One)
                    }

                    If ((((DerefOf (TSBF [0x08]) & 0x0F) != 
                        One) || Zero))
                    {
                        Return (0x03)
                    }

                    TSBF [0x07] = 0x1F
                    TSBF [0x05] = (DerefOf (TSBF [0x05]) | 0x30)
                    If (RWBK (Zero, 0xD2, 0x05, 0x03, TSBF))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }
            }

            Method (GCCX, 4, NotSerialized)
            {
                Local0 = (DerefOf (TSBF [Arg2]) & 0x80)
                Local0 >>= 0x07
                Local1 = (DerefOf (TSBF [Arg0]) & 0xC0)
                Local1 >>= 0x05
                Local2 = (DerefOf (TSBF [Arg1]) & 0xFF)
                Local2 <<= 0x03
                Local0 += Local1
                Local0 += Local2
                Local1 = (DerefOf (TSBF [Arg0]) & 0x3F)
                Local2 = (Arg3 * Local0)
                Local3 = (Local2 / Local1)
                Return (Local3)
            }

            Name (VCOM, Zero)
            Name (VCON, Zero)
            Method (CCMN, 2, NotSerialized)
            {
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                Local0 = DerefOf (TSBF [0x07])
                If ((Local0 == 0x75))
                {
                    Local0 = Arg1
                    Local1 = ABS (Arg0, Arg1)
                    Local2 = 0x13
                    While ((Local2 < 0x19))
                    {
                        Local3 = (((Arg0 * Local2) / Arg1) + 0x02)
                        If ((Local3 > 0x0800))
                        {
                            Local3 = 0x0800
                        }

                        If ((((Arg0 * Local2) / Arg1) > 0x02))
                        {
                            Local4 = (((Arg0 * Local2) / Arg1) - 0x02)
                            If ((Local4 < 0x02))
                            {
                                Local4 = 0x02
                            }
                        }
                        Else
                        {
                            Local4 = 0x02
                        }

                        While ((Local4 <= Local3))
                        {
                            Local0 = ((Arg1 * Local4) / Local2)
                            Local5 = ABS (Arg0, Local0)
                            If ((Local5 < Local1))
                            {
                                Debug = "N"
                                Debug = Local4
                                Debug = "M"
                                Debug = Local2
                                Debug = "Diff"
                                Debug = Local5
                                VCON = Local4
                                VCOM = Local2
                                Local1 = Local5
                                If ((Local5 < 0x012C))
                                {
                                    Break
                                }
                            }

                            Local4++
                        }

                        Local2++
                    }
                }
                Else
                {
                    Local0 = Arg1
                    Local1 = ABS (Arg0, Arg1)
                    Local2 = 0x09
                    While ((Local2 < 0x3F))
                    {
                        Local3 = (((Arg0 * Local2) / Arg1) + 0x02)
                        If ((Local3 > 0x0800))
                        {
                            Local3 = 0x0800
                        }

                        If ((((Arg0 * Local2) / Arg1) > 0x02))
                        {
                            Local4 = (((Arg0 * Local2) / Arg1) - 0x02)
                            If ((Local4 < 0x02))
                            {
                                Local4 = 0x02
                            }
                        }
                        Else
                        {
                            Local4 = 0x02
                        }

                        While ((Local4 <= Local3))
                        {
                            Local0 = ((Arg1 * Local4) / Local2)
                            Local5 = ABS (Arg0, Local0)
                            If ((Local5 < Local1))
                            {
                                Debug = "N"
                                Debug = Local4
                                Debug = "M"
                                Debug = Local2
                                Debug = "Diff"
                                Debug = Local5
                                VCON = Local4
                                VCOM = Local2
                                Local1 = Local5
                                If ((Local5 < 0x012C))
                                {
                                    Break
                                }
                            }

                            Local4++
                        }

                        Local2++
                    }
                }
            }

            Method (CCLK, 1, NotSerialized)
            {
                Name (VCOV, Zero)
                Name (VCOD, Zero)
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                Local0 = DerefOf (TSBF [0x07])
                If ((Local0 == 0x75))
                {
                    If ((Arg0 == One))
                    {
                        CPUD = GDIV (0x14)
                        VCOD = CPUD /* \AOD_.CPUD */
                        VCOV = GCCX (0x10, 0x11, 0x14, 0xC350)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        GFXD = GDIV (0x1C)
                        VCOD = GFXD /* \AOD_.GFXD */
                        VCOV = GCCX (0x1A, 0x1B, 0x1C, 0x37EE)
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        SBCD = GDIV (0x1F)
                        VCOD = SBCD /* \AOD_.SBCD */
                        VCOV = GCCX (0x1D, 0x1E, 0x1F, 0x37EE)
                    }

                    Return ((VCOV / VCOD))
                }
                Else
                {
                    If ((Arg0 == One))
                    {
                        CPUD = GDIV (0x1C)
                        VCOD = CPUD /* \AOD_.CPUD */
                        VCOV = GCCX (0x0B, 0x0C, 0x1C, 0x37EE)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        GFXD = DerefOf (DIVD [((DerefOf (TSBF [0x1E]) & 
                            0xF0) >> 0x04)])
                        VCOD = GFXD /* \AOD_.GFXD */
                        VCOV = GCCX (0x0F, 0x10, 0x1D, 0x37EE)
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        GFXD = DerefOf (DIVD [((DerefOf (TSBF [0x1E]) & 
                            0xF0) >> 0x04)])
                        VCOD = GFXD /* \AOD_.GFXD */
                        VCOV = 0x00061A80
                    }

                    Local0 = (VCOV / VCOD)
                    Local1 = Local0
                    Divide (Local0, 0x03E8, Local2, Local3)
                    Local3 *= 0x03E8
                    If ((Local2 >= 0x038E))
                    {
                        Local3 += 0x03E8
                    }

                    Return (Local3)
                }
            }

            Method (SCCX, 5, NotSerialized)
            {
                VCOM = Zero
                VCON = Zero
                CCMN (Arg0, Arg4)
                Debug = "VCOM"
                Debug = VCOM /* \AOD_.VCOM */
                Debug = "VCON"
                Debug = VCON /* \AOD_.VCON */
                TSBF [Arg1] = (((VCON << 0x05) & 0xC0
                    ) | VCOM)
                TSBF [Arg2] = ((VCON >> 0x03) & 0xFF)
                TSBF [Arg3] = ((DerefOf (TSBF [Arg3]) & 0x7F
                    ) | ((VCON << 0x07) & 0x80))
                Debug = TSBF /* \AOD_.TSBF */
                If (RWBK (Zero, 0xD2, Arg1, ((Arg3 - Arg1) + One), 
                    TSBF))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Name (DIVD, Buffer (0x10)
            {
                /* 0000 */  0x02, 0x03, 0x05, 0x09, 0x04, 0x06, 0x0A, 0x12,  // ........
                /* 0008 */  0x08, 0x0C, 0x14, 0x24, 0x10, 0x18, 0x28, 0x48   // ...$..(H
            })
            Method (GDIV, 1, NotSerialized)
            {
                Return (DerefOf (DIVD [(DerefOf (TSBF [Arg0]) & 0x0F)]
                    ))
            }

            Method (WTCX, 2, NotSerialized)
            {
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                Local0 = DerefOf (TSBF [0x07])
                If ((Local0 == 0x75))
                {
                    Local0 = Arg1
                    If ((Arg0 == One))
                    {
                        Return (SCCX (Local0, 0x10, 0x11, 0x14, 0xC350))
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (SCCX (Local0, 0x1A, 0x1B, 0x1C, 0x37EE))
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        Return (SCCX (Local0, 0x1D, 0x1E, 0x1F, 0x37EE))
                    }

                    Return (0x04)
                }
                Else
                {
                    Local0 = Arg1
                    If ((Arg0 == One))
                    {
                        Return (SCCX (Local0, 0x0B, 0x0C, 0x1C, 0x37EE))
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        Return (SCCX (Local0, 0x0F, 0x10, 0x1D, 0x37EE))
                    }

                    Return (0x04)
                }
            }

            Method (RMPC, 4, NotSerialized)
            {
                Name (STAT, Zero)
                Local0 = Arg0
                Local1 = Arg1
                While ((ABS (Local1, Local0) > Arg2))
                {
                    If ((Local0 < Local1))
                    {
                        Local0 += Arg2
                    }
                    Else
                    {
                        Local0 -= Arg2
                    }

                    Debug = Local0
                    STAT = WTCX (Arg3, Local0)
                    Sleep (0x64)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                If ((Local0 != Local1))
                {
                    STAT = WTCX (Arg3, Local1)
                    Sleep (0x64)
                    If (STAT)
                    {
                        Return (STAT) /* \AOD_.RMPC.STAT */
                    }
                }

                Return (Zero)
            }

            Method (SFSB, 1, NotSerialized)
            {
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                Local0 = DerefOf (TSBF [0x07])
                If ((Local0 == 0x75))
                {
                    Local0 = DerefOf (TSBF [0x0C])
                    Local2 = (DerefOf (TSBF [0x14]) & 0x7F)
                    TSBF [0x10] = DerefOf (TGMN [Zero])
                    TSBF [0x11] = DerefOf (TGMN [One])
                    TSBF [0x14] = (Local2 | DerefOf (TGMN [0x02])
                        )
                    RWBK (Zero, 0xD2, 0x11, One, TSBF)
                    Sleep (0x0A)
                    RWBK (Zero, 0xD2, 0x10, One, TSBF)
                    Sleep (0x0A)
                    RWBK (Zero, 0xD2, 0x14, One, TSBF)
                    Sleep (0x14)
                }
                Else
                {
                    Local0 = DerefOf (TSBF [0x05])
                    Local2 = (DerefOf (TSBF [0x1C]) & 0x7F)
                    TSBF [0x0B] = DerefOf (TGMN [Zero])
                    TSBF [0x0C] = DerefOf (TGMN [One])
                    TSBF [0x1C] = (Local2 | DerefOf (TGMN [0x02])
                        )
                    RWBK (Zero, 0xD2, 0x0C, One, TSBF)
                    Sleep (0x0A)
                    RWBK (Zero, 0xD2, 0x0B, One, TSBF)
                    Sleep (0x0A)
                    RWBK (Zero, 0xD2, 0x1C, One, TSBF)
                    Sleep (0x14)
                }
            }

            Name (TGMN, Buffer (0x03)
            {
                 0x00, 0x00, 0x00                                 // ...
            })
            Method (CFMN, 2, NotSerialized)
            {
                Local2 = 0x19
                While ((Local2 <= 0x19))
                {
                    Local3 = ((Arg0 * Local2) % Arg1)
                    If ((Local3 == Zero))
                    {
                        Local4 = ((Arg0 * Local2) / Arg1)
                        If (((Local4 >> 0x03) < 0x0100))
                        {
                            TGMN [Zero] = (((Local4 & 0x06) << 0x05
                                ) | Local2)
                            TGMN [One] = ((Local4 >> 0x03) & 0xFF)
                            TGMN [0x02] = ((Local4 & One) << 0x07)
                            Return (Zero)
                        }
                    }

                    Local2++
                }

                Return (One)
            }

            Name (PWIF, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            CreateByteField (PWIF, One, PWMX)
            CreateByteField (PWIF, 0x02, PWEN)
            CreateByteField (PWIF, 0x03, PMIN)
            CreateByteField (PWIF, 0x04, PMAX)
            CreateByteField (PWIF, 0x05, PDFT)
            CreateByteField (PWIF, 0x06, PSTP)
            CreateByteField (PWIF, 0x07, PNMD)
            Name (PXIF, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            CreateByteField (PXIF, Zero, PXHI)
            CreateByteField (PXIF, One, PXNM)
            CreateByteField (PXIF, 0x02, PXEN)
            CreateByteField (PXIF, 0x03, PXIO)
            Method (VINI, 0, NotSerialized)
            {
                Name (LDFT, Zero)
                Local0 = DerefOf (OBID [Zero])
                Local1 = One
                While (Local0)
                {
                    SOID (DerefOf (OBID [Local1]))
                    If ((ID01 == 0x02))
                    {
                        If ((GPIF (ID02) == Zero))
                        {
                            If ((PWEN == One))
                            {
                                PWMR (PWMX)
                                If (!(PXEN && PXIO))
                                {
                                    LDFT = One
                                    Break
                                }
                            }
                        }
                    }

                    Local0--
                    Local1++
                }

                If ((LDFT == One))
                {
                    DISC ()
                    Local0 = DerefOf (OBID [Zero])
                    Local1 = One
                    While (Local0)
                    {
                        SOID (DerefOf (OBID [Local1]))
                        If ((ID01 == 0x02))
                        {
                            If ((GPIF (ID02) == Zero))
                            {
                                If ((PWEN == One))
                                {
                                    FPDV (PWMX)
                                    PWMW (PWMX, PDFT)
                                }
                            }
                        }

                        Local0--
                        Local1++
                    }
                }

                CNCT ()
            }

            Method (SETV, 2, NotSerialized)
            {
                If ((GPIF (Arg0) == Zero))
                {
                    Local0 = VTR (Arg1)
                    WTVR (Local0, PWMX, PMAX, PMIN, PDFT, PSTP)
                }
            }

            Method (GETV, 1, NotSerialized)
            {
                If ((GPIF (Arg0) == Zero))
                {
                    Local0 = PWMR (PWMX)
                    Local1 = RTV (Local0)
                    GVB2 = Zero
                    GVB1 = Local1
                }
                Else
                {
                    GVB1 = Zero
                    GVB2 = 0x04
                }

                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (GPIF, 1, NotSerialized)
            {
                PWMI ()
                Local1 = Zero
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (PWMT [Local1]) == 0xFF))
                    {
                        Local0 = 0xFF
                        Break
                    }

                    If ((DerefOf (PWMT [Local1]) == Arg0))
                    {
                        Local2 = 0x08
                        Local3 = Zero
                        While (Local2)
                        {
                            PWIF [Local3] = DerefOf (PWMT [(Local1 + Local3)]
                                )
                            Local3++
                            Local2--
                        }

                        Break
                    }

                    Local1 += 0x08
                }

                If ((Local0 == 0xFF))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Method (WTVR, 6, NotSerialized)
            {
                Name (PTGT, Zero)
                If (((Arg0 > Arg2) || (Arg0 < Arg3)))
                {
                    PTGT = Arg4
                }
                Else
                {
                    PTGT = Arg0
                }

                Local0 = PWMR (Arg1)
                RMPV (PTGT, Local0, Arg5, Arg1)
                Return (Zero)
            }

            Method (PWMR, 1, NotSerialized)
            {
                If ((Arg0 == One)){}
                ElseIf ((Arg0 == 0x02)){}
                ElseIf ((Arg0 == 0x03)){}
                ElseIf ((Arg0 == 0x04)){}
                ElseIf ((Arg0 == 0x05)){}
                ElseIf ((Arg0 == 0x06)){}
                Else
                {
                }

                Return (Zero)
            }

            Method (PWMW, 2, NotSerialized)
            {
                Local1 = Arg1
                If ((Arg0 == One)){}
                ElseIf ((Arg0 == 0x02)){}
                ElseIf ((Arg0 == 0x03)){}
                ElseIf ((Arg0 == 0x04)){}
                ElseIf ((Arg0 == 0x05)){}
                ElseIf ((Arg0 == 0x06)){}
                Return (Zero)
            }

            Method (FPDV, 1, NotSerialized)
            {
                Local2 = PNMD /* \AOD_.PNMD */
                If ((Arg0 == One)){}
                ElseIf ((Arg0 == 0x02)){}
                ElseIf ((Arg0 == 0x03)){}
                ElseIf ((Arg0 == 0x04)){}
                ElseIf ((Arg0 == 0x05)){}
                ElseIf ((Arg0 == 0x06)){}
            }

            Method (RMPV, 4, NotSerialized)
            {
                Local0 = Arg0
                Local1 = Arg1
                While (One)
                {
                    If ((ABS (Local0, Local1) < Arg2))
                    {
                        Break
                    }

                    If ((Local0 > Local1))
                    {
                        Local1 += Arg2
                    }

                    If ((Local0 < Local1))
                    {
                        Local1 -= Arg2
                    }

                    PWMW (Arg3, Local1)
                    Sleep (0x64)
                }

                If ((Local0 != Local1))
                {
                    PWMW (Arg3, Local0)
                }

                Sleep (0x02)
            }

            Name (GF01, Zero)
            Name (TSBF, Buffer (0x20)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    CINI ()
                    VINI ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM02, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM03, 1, NotSerialized)
            {
                SOID (Arg0)
                If ((ID01 == One))
                {
                    GETC (ID02)
                }
                ElseIf ((ID01 == 0x02))
                {
                    GETV (ID02)
                }
                Else
                {
                    GVB1 = Zero
                    GVB2 = 0x04
                    Local0 = GVBF /* \AOD_.GVBF */
                }

                Return (GVBF) /* \AOD_.GVBF */
            }

            Method (AM04, 2, NotSerialized)
            {
                SOID (Arg0)
                If ((ID01 == One))
                {
                    Local0 = SETC (ID02, Arg1)
                }
                ElseIf ((ID01 == 0x02))
                {
                    SETV (ID02, Arg1)
                    Local0 = Zero
                }
                Else
                {
                    Local0 = 0x04
                }

                Return (Local0)
            }

            Method (AM05, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (INFO, Zero, IFID)
                CreateDWordField (INFO, 0x04, IFMI)
                CreateDWordField (INFO, 0x08, IFMX)
                CreateDWordField (INFO, 0x0C, IFSP)
                CreateField (INFO, 0x80, 0x03, IFST)
                SOID (Arg0)
                BM05 (Arg0)
                CPTB (Arg0, INFO)
                EM05 (Arg0)
                Return (INFO) /* \AOD_.AM05.INFO */
            }

            Method (AM06, 0, NotSerialized)
            {
                HM06 ()
                Return (Zero)
            }

            Method (AM07, 1, NotSerialized)
            {
                HM07 (Arg0)
                Return (Zero)
            }

            Method (AM08, 1, NotSerialized)
            {
                Name (LODT, Package (0x34)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBDT [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBDT [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBDT [(Local0 + One)])
                    Local0 += 0x02
                }

                If (Local4){}
                Else
                {
                    Local1 = DerefOf (OBDT [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBDT [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }
                }

                Return (LODT) /* \AOD_.AM08.LODT */
            }

            Name (OBSV, Package (0x09)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (APTS, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (OBID [Zero])
                    Local1 = One
                    Local2 = Zero
                    While (Local0)
                    {
                        SOID (DerefOf (OBID [Local1]))
                        If ((ID01 == One))
                        {
                            GETC (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        ElseIf ((ID01 == 0x02))
                        {
                            GETV (ID02)
                            Local3 = GVB1 /* \AOD_.GVB1 */
                        }
                        Else
                        {
                            Local3 = Zero
                        }

                        OBSV [Local2] = Local3
                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Method (AWAK, 1, NotSerialized)
            {
                If ((GF01 && ((Arg0 == 0x04) || (Arg0 == 0x03))))
                {
                    Local0 = DerefOf (OBID [Zero])
                    Local1 = One
                    Local2 = Zero
                    While (Local0)
                    {
                        Local3 = DerefOf (OBSV [Local2])
                        SOID (DerefOf (OBID [Local1]))
                        If ((ID01 == One))
                        {
                            RWBK (Zero, 0xD3, Zero, 0x20, TSBF)
                            Local6 = DerefOf (TSBF [0x07])
                            If ((Local6 == 0x75)){}
                            Else
                            {
                                RWBK (Zero, 0xD3, Zero, 0x1F, TSBF)
                                Local6 = DerefOf (TSBF [0x05])
                                Local6 = 0x31
                                TSBF [0x05] = Local6
                                Local6 = 0x42
                                TSBF [0x06] = Local6
                                Local6 = DerefOf (TSBF [0x07])
                                Local6 = 0x1F
                                TSBF [0x07] = Local6
                                RWBK (Zero, 0xD2, 0x05, 0x07, TSBF)
                                RWBK (Zero, 0xD3, Zero, 0x1F, TSBF)
                            }

                            SETC (ID02, Local3)
                        }
                        ElseIf ((ID01 == 0x02))
                        {
                            SETV (ID02, Local3)
                        }
                        Else
                        {
                        }

                        Local0--
                        Local1++
                        Local2++
                    }
                }
            }

            Method (AM09, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM10, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateDWordField (OBUF, Zero, CMDS)
                If ((ACMD == 0x00030001))
                {
                    R301 ()
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00030004))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                ElseIf ((ACMD == 0x00040003))
                {
                    R403 (Arg0)
                }
                ElseIf ((ACMD == 0x00040004))
                {
                    CMDS = 0x00010000
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    CMDS = 0x00010000
                }
                Else
                {
                    CMDS = 0x00010000
                }

                Return (OBUF) /* \AOD_.OBUF */
            }

            Name (CMDL, Buffer (0x54){})
            Method (AM11, 0, NotSerialized)
            {
                Name (TEMP, Zero)
                CreateDWordField (CMDL, Zero, CMDC)
                TEMP += 0x04
                CreateDWordField (CMDL, TEMP, CMD1)
                TEMP += 0x04
                CMD1 = 0x00030001
                CreateDWordField (CMDL, TEMP, CMD2)
                TEMP += 0x04
                CMD2 = 0x00030002
                CreateDWordField (CMDL, TEMP, CMD3)
                TEMP += 0x04
                CMD3 = 0x00030003
                CreateDWordField (CMDL, TEMP, CMD4)
                TEMP += 0x04
                CMD4 = 0x00030004
                CreateDWordField (CMDL, TEMP, CMD5)
                TEMP += 0x04
                CMD5 = 0x00040001
                CreateDWordField (CMDL, TEMP, CMD6)
                TEMP += 0x04
                CMD6 = 0x00040002
                CreateDWordField (CMDL, TEMP, CMD7)
                TEMP += 0x04
                CMD7 = 0x00040003
                TEMP -= 0x04
                TEMP /= 0x04
                CMDC = TEMP /* \AOD_.AM11.TEMP */
                Return (CMDL) /* \AOD_.CMDL */
            }

            Name (CMDV, One)
            Name (OBUF, Buffer (0x0400){})
            Method (R301, 0, NotSerialized)
            {
                Local0 = DerefOf (QLST [Zero])
                CreateDWordField (OBUF, Zero, TMP1)
                CreateWordField (OBUF, 0x04, TMP2)
                TMP2 = Local0
                TMP1 = Zero
                Return (Zero)
            }

            Method (R302, 1, NotSerialized)
            {
                Name (CIDX, Zero)
                CreateWordField (Arg0, 0x04, IIDX)
                CIDX = One
                Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                CIDX++
                Local1 = 0x20
                CreateField (OBUF, Local1, 0x0100, TMP1)
                TMP1 = Local0
                Local1 += 0x0100
                Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                CIDX++
                CreateField (OBUF, Local1, 0x08, TMP2)
                TMP2 = Local0
                Local1 += 0x08
                Local2 = Local0
                Local5 = (Local1 / 0x08)
                While ((Local2 > Zero))
                {
                    Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                    DG04 = Local0
                    Local4 = 0x05
                    Local6 = Zero
                    While ((Local4 > Zero))
                    {
                        If ((Local6 < SizeOf (Local0)))
                        {
                            OBUF [Local5] = DerefOf (Local0 [Local6])
                        }
                        Else
                        {
                            OBUF [Local5] = Zero
                        }

                        Local6++
                        Local5++
                        Local4--
                    }

                    Local1 += 0x28
                    Local2--
                    CIDX++
                }

                Local1 = 0x0370
                Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                CIDX++
                CreateField (OBUF, Local1, 0x10, TMP3)
                TMP3 = Local0
                Local1 += 0x10
                Local6 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                If ((ObjectType (Local6) == 0x04))
                {
                    Local2 = SizeOf (Local6)
                    Local5 = (Local1 / 0x08)
                    Local3 = Zero
                    While ((Local2 > Zero))
                    {
                        Local0 = DerefOf (Local6 [Local3])
                        Local4 = SizeOf (Local0)
                        Local7 = Zero
                        While ((Local4 > Zero))
                        {
                            OBUF [Local5] = DerefOf (Local0 [Local7])
                            Local7++
                            Local5++
                            Local4--
                        }

                        Local2--
                        Local3++
                    }
                }
                Else
                {
                    Local2 = Local0
                    Local5 = (Local1 / 0x08)
                    While ((Local2 > Zero))
                    {
                        Local0 = DerefOf (DerefOf (QLST [IIDX]) [CIDX])
                        Local4 = SizeOf (Local0)
                        Local6 = Zero
                        While ((Local4 > Zero))
                        {
                            OBUF [Local5] = DerefOf (Local0 [Local6])
                            Local6++
                            Local5++
                            Local4--
                        }

                        (Local1 + 0x80)
                        Local2--
                        CIDX++
                    }
                }

                CreateDWordField (OBUF, Zero, TMP4)
                TMP4 = Zero
                Return (Zero)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, IITM)
                CreateDWordField (OBUF, Zero, TMP1)
                CreateWordField (OBUF, 0x04, TMP2)
                Local0 = DerefOf (DerefOf (QLST [IITM]) [Zero])
                Local1 = GCMS (Local0)
                CreateDWordField (Local1, Zero, TMP3)
                CreateWordField (Local1, 0x04, TMP4)
                TMP1 = TMP3 /* \AOD_.R303.TMP3 */
                TMP2 = TMP4 /* \AOD_.R303.TMP4 */
                Return (Zero)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, IITM)
                CreateWordField (Arg0, 0x06, CMSD)
                CreateDWordField (OBUF, Zero, TMP1)
                Local0 = DerefOf (DerefOf (QLST [IITM]) [Zero])
                TMP1 = SCMS (Local0, CMSD)
                Return (Zero)
            }

            Name (VEND, Buffer (0x05)
            {
                "ASUS"
            })
            Method (R401, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x0200, TMP2)
                TMP2 = VEND /* \AOD_.VEND */
                Return (Zero)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateField (OBUF, 0x20, 0x08, TMP1)
                CreateField (OBUF, 0x28, 0x08, TMP2)
                TMP1 = GMOD /* \AOD_.GMOD */
                TMP2 = GFXO /* \AOD_.GFXO */
                Return (Zero)
            }

            Name (TCIP, Package (0x04)
            {
                Package (0x0A)
                {
                    Zero, 
                    0x04, 
                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0x0A, 
                        Buffer (0x0A)
                        {
                            "CPU VCORE"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        0x0F, 
                        Buffer (0x06)
                        {
                            "+3.3V"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0x0E, 
                        Buffer (0x04)
                        {
                            "+5V"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        0x20, 
                        Buffer (0x05)
                        {
                            "+12V"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0x2A, 
                        Buffer (0x05)
                        {
                            "+12V"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_5_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_6_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0x0A, 
                        Buffer (0x0C)
                        {
                            "VIN_7_FAKED"
                        }
                    }
                }, 

                Package (0x0A)
                {
                    One, 
                    0x02, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Buffer (0x10)
                        {
                            "CPU TEMPERATURE"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x10)
                        {
                            "MB TERMPERATURE"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0xFF, 
                        Buffer (0x0C)
                        {
                            "ASUS_TMPIN2"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN3"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN4"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN5"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN6"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0xFF, 
                        Buffer (0x07)
                        {
                            "TMPIN7"
                        }
                    }
                }, 

                Package (0x0A)
                {
                    0x02, 
                    0x03, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "CPU FAN"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x0C)
                        {
                            "CHASSIS FAN"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0xFF, 
                        Buffer (0x0A)
                        {
                            "POWER FAN"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x03, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN3_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN4_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN5_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN6_FAKED"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0xFF, 
                        Buffer (0x0D)
                        {
                            "FANIN7_FAKED"
                        }
                    }
                }, 

                Package (0x0A)
                {
                    0x03, 
                    Zero, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL0"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL1"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x02, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL2"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        One, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL3"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x04, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL4"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x05, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL5"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x06, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL6"
                        }
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        0x07, 
                        0xFF, 
                        Buffer (0x08)
                        {
                            "FANCTL7"
                        }
                    }
                }
            })
            Method (R403, 1, NotSerialized)
            {
                Name (TINX, Zero)
                CreateByteField (Arg0, 0x04, TCOT)
                CreateByteField (OBUF, 0x04, CNTC)
                Local0 = DerefOf (TCIP [TCOT])
                Local1 = DerefOf (Local0 [One])
                CNTC = Local1
                Debug = "CNTC"
                Debug = CNTC /* \AOD_.R403.CNTC */
                Debug = "Local1"
                Debug = Local1
                Local2 = 0x05
                TINX = 0x02
                While (Local1)
                {
                    Debug = "Local2"
                    Debug = Local2
                    Local7 = DerefOf (Local0 [TINX])
                    Debug = "Local7"
                    Debug = Local7
                    OBUF [Local2] = DerefOf (Local7 [Zero])
                    Local2++
                    OBUF [Local2] = DerefOf (Local7 [One])
                    Local2++
                    OBUF [Local2] = DerefOf (Local7 [0x02])
                    Local2++
                    Local4 = DerefOf (Local7 [0x03])
                    Debug = "Local4"
                    Debug = Local4
                    Local3 = SizeOf (Local4)
                    If ((Local3 > 0x20))
                    {
                        Local3 = 0x1F
                    }

                    Local6 = (0x20 - Local3)
                    Debug = "Local3"
                    Debug = Local3
                    Local5 = Zero
                    While (Local3)
                    {
                        OBUF [Local2] = DerefOf (Local4 [Local5])
                        Local2++
                        Local5++
                        Local3--
                    }

                    Debug = "Local6"
                    Debug = Local6
                    Debug = "OBUF"
                    Debug = OBUF /* \AOD_.OBUF */
                    Local2 += Local6
                    Local1--
                    TINX++
                }

                Return (Zero)
            }

            Method (R404, 1, NotSerialized)
            {
                CreateDWordField (OBUF, 0x04, VDIO)
                GETV (One)
                VDIO = GVB1 /* \AOD_.GVB1 */
                Return (Zero)
            }

            Name (WQBA, Buffer (0x0BBB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xAB, 0x0B, 0x00, 0x00, 0x20, 0x4A, 0x00, 0x00,  // .... J..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5B, 0xA4, 0x00, 0x01, 0x06, 0x18, 0x42,  // ([.....B
                /* 0020 */  0x10, 0x15, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x92, 0xAD, 0x08, 0x1C, 0x21,  // .......!
                /* 0060 */  0x06, 0x1C, 0xA5, 0x13, 0x5B, 0xB8, 0x61, 0x83,  // ....[.a.
                /* 0068 */  0x17, 0x8A, 0xA2, 0x19, 0x44, 0x49, 0x50, 0xB9,  // ....DIP.
                /* 0070 */  0x00, 0xDF, 0x08, 0x02, 0x2F, 0x57, 0x80, 0xE4,  // ..../W..
                /* 0078 */  0x09, 0x48, 0xB3, 0x00, 0xC3, 0x02, 0xAC, 0x0B,  // .H......
                /* 0080 */  0x90, 0x3D, 0x04, 0x2A, 0x75, 0x08, 0x28, 0x39,  // .=.*u.(9
                /* 0088 */  0x43, 0x40, 0x0D, 0xA0, 0xD5, 0x09, 0x08, 0xBF,  // C@......
                /* 0090 */  0xD2, 0x29, 0x21, 0x09, 0xC2, 0x19, 0xAB, 0x78,  // .)!....x
                /* 0098 */  0x7C, 0xCD, 0xA2, 0xE9, 0x39, 0xC9, 0x39, 0x86,  // |...9.9.
                /* 00A0 */  0x1C, 0x8F, 0x0B, 0x3D, 0x08, 0x1E, 0x47, 0x03,  // ...=..G.
                /* 00A8 */  0x08, 0x93, 0x3F, 0x64, 0x05, 0x80, 0x41, 0x49,  // ..?d..AI
                /* 00B0 */  0x18, 0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9,  // ..u1j.H.
                /* 00B8 */  0x80, 0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A,  // ..Q....:
                /* 00C0 */  0xBF, 0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04,  // .#9..;..
                /* 00C8 */  0x46, 0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42,  // F=.c,lFB
                /* 00D0 */  0x8D, 0xD1, 0x1C, 0x14, 0x09, 0x37, 0x68, 0xB4,  // .....7h.
                /* 00D8 */  0x44, 0x58, 0x8D, 0x2B, 0xF6, 0x99, 0x59, 0xF8,  // DX.+..Y.
                /* 00E0 */  0xB0, 0x84, 0x71, 0x04, 0x07, 0x76, 0xB0, 0x16,  // ..q..v..
                /* 00E8 */  0x0D, 0x23, 0xB4, 0x82, 0xE0, 0x34, 0x88, 0xA3,  // .#...4..
                /* 00F0 */  0x88, 0x12, 0x86, 0xE1, 0x19, 0x33, 0xD0, 0x51,  // .....3.Q
                /* 00F8 */  0x32, 0xA4, 0x30, 0x41, 0x4F, 0x20, 0xC8, 0xC9,  // 2.0AO ..
                /* 0100 */  0x33, 0x2C, 0x43, 0x9C, 0x01, 0xC7, 0x8A, 0x11,  // 3,C.....
                /* 0108 */  0x2A, 0x24, 0x66, 0x20, 0xC1, 0xFF, 0xFF, 0x27,  // *$f ...'
                /* 0110 */  0xD0, 0x35, 0x86, 0x3C, 0x03, 0x91, 0x7B, 0xC0,  // .5.<..{.
                /* 0118 */  0x09, 0x04, 0x89, 0x1E, 0x25, 0xB8, 0x71, 0x8D,  // ....%.q.
                /* 0120 */  0xCA, 0xC6, 0x74, 0x36, 0xB8, 0x81, 0x99, 0x20,  // ..t6... 
                /* 0128 */  0xCE, 0xE1, 0x61, 0x64, 0x40, 0x68, 0x02, 0xF1,  // ..ad@h..
                /* 0130 */  0x63, 0x87, 0x4F, 0x60, 0xF7, 0xC7, 0x01, 0x29,  // c.O`...)
                /* 0138 */  0x44, 0xD0, 0x85, 0xE0, 0x4C, 0x6B, 0x14, 0x60,  // D...Lk.`
                /* 0140 */  0xED, 0xEC, 0x20, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // .. [.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0x07, 0x41, 0x24, 0x58, 0x80,  // F`..A$X.
                /* 0168 */  0xF8, 0x23, 0xB0, 0x84, 0x13, 0x81, 0x8C, 0x8C,  // .#......
                /* 0170 */  0x86, 0x1E, 0x16, 0x7C, 0x12, 0x60, 0x07, 0x04,  // ...|.`..
                /* 0178 */  0xCF, 0xE7, 0xD4, 0x4C, 0xE0, 0xC0, 0x10, 0xE2,  // ...L....
                /* 0180 */  0x95, 0x00, 0x51, 0x47, 0x0B, 0x4A, 0x60, 0x29,  // ..QG.J`)
                /* 0188 */  0x47, 0x03, 0x62, 0x7B, 0x60, 0xBA, 0x07, 0x1C,  // G.b{`...
                /* 0190 */  0xE1, 0xB9, 0xFB, 0x72, 0x70, 0x6A, 0xFE, 0x69,  // ...rpj.i
                /* 0198 */  0x78, 0x9A, 0x0F, 0x09, 0x98, 0x21, 0x7A, 0xAC,  // x....!z.
                /* 01A0 */  0x07, 0x11, 0xF0, 0x10, 0xD9, 0x29, 0xC1, 0x80,  // .....)..
                /* 01A8 */  0x78, 0xEF, 0xD7, 0x02, 0x32, 0x82, 0x97, 0x04,  // x...2...
                /* 01B0 */  0x03, 0x7A, 0x12, 0x0F, 0x08, 0x60, 0x39, 0x68,  // .z...`9h
                /* 01B8 */  0x1C, 0xF8, 0x09, 0x55, 0x7C, 0x07, 0xA0, 0x47,  // ...U|..G
                /* 01C0 */  0x02, 0x36, 0xA3, 0xF8, 0x26, 0x28, 0xEB, 0xF8,  // .6..&(..
                /* 01C8 */  0x80, 0x9E, 0x73, 0xB4, 0x67, 0x87, 0x97, 0x85,  // ..s.g...
                /* 01D0 */  0x66, 0xAF, 0x18, 0x84, 0xE0, 0x35, 0xC0, 0x37,  // f....5.7
                /* 01D8 */  0x05, 0x9F, 0x46, 0x2C, 0x69, 0x75, 0x72, 0xB2,  // ..F,iur.
                /* 01E0 */  0x2A, 0x8F, 0x98, 0x82, 0x7B, 0x08, 0x5C, 0x04,  // *...{.\.
                /* 01E8 */  0x9C, 0x86, 0xEE, 0xF1, 0x82, 0x43, 0xC1, 0x78,  // .....C.x
                /* 01F0 */  0xE9, 0xFF, 0x7F, 0xBC, 0xE0, 0x3E, 0x0F, 0x1C,  // .....>..
                /* 01F8 */  0x2F, 0x58, 0x4E, 0x09, 0x55, 0x5D, 0x36, 0x34,  // /XN.U]64
                /* 0200 */  0x87, 0xF3, 0x6D, 0x1E, 0x9F, 0x1C, 0x2D, 0x3C,  // ..m...-<
                /* 0208 */  0x61, 0x36, 0x96, 0xA3, 0x62, 0xC7, 0x10, 0x36,  // a6..b..6
                /* 0210 */  0x3A, 0x3E, 0x0A, 0x0F, 0xF8, 0xB5, 0xA1, 0x58,  // :>.....X
                /* 0218 */  0x10, 0x99, 0x80, 0xD0, 0x91, 0xE1, 0xC0, 0xC1,  // ........
                /* 0220 */  0xE2, 0xEC, 0x00, 0x21, 0x02, 0x0B, 0x1B, 0x39,  // ...!...9
                /* 0228 */  0x7A, 0xC4, 0x1E, 0xD4, 0x3B, 0x8C, 0x31, 0x1E,  // z...;.1.
                /* 0230 */  0x08, 0x8C, 0x7A, 0x48, 0x07, 0x0F, 0x3E, 0x40,  // ..zH..>@
                /* 0238 */  0x0F, 0x1E, 0x70, 0xFA, 0xFF, 0x27, 0xB0, 0xA0,  // ..p..'..
                /* 0240 */  0x21, 0x4B, 0xC4, 0xE0, 0xD1, 0xA7, 0x08, 0x0F,  // !K......
                /* 0248 */  0xE7, 0xDD, 0x87, 0x1F, 0x44, 0x12, 0x38, 0x3C,  // ....D.8<
                /* 0250 */  0x84, 0x06, 0x0F, 0x9E, 0xB3, 0x8F, 0x07, 0x0F,  // ........
                /* 0258 */  0x7E, 0x79, 0x83, 0x07, 0xD1, 0x14, 0x8E, 0x0D,  // ~y......
                /* 0260 */  0x77, 0xB0, 0xF1, 0xC0, 0xC1, 0x3D, 0x5C, 0xFC,  // w....=\.
                /* 0268 */  0x90, 0x70, 0x67, 0x2D, 0x78, 0x3E, 0x27, 0x4F,  // .pg-x>'O
                /* 0270 */  0x06, 0xF0, 0x12, 0x84, 0x3B, 0x6C, 0x01, 0x97,  // ....;l..
                /* 0278 */  0x11, 0x70, 0x99, 0xAB, 0xA4, 0x87, 0x2A, 0x0B,  // .p....*.
                /* 0280 */  0x83, 0x41, 0x9D, 0xAB, 0xC0, 0xFB, 0xFF, 0x3F,  // .A.....?
                /* 0288 */  0x57, 0x01, 0xF6, 0x2F, 0x53, 0xEF, 0x53, 0x3E,  // W../S.S>
                /* 0290 */  0x57, 0x81, 0x3B, 0xDA, 0x79, 0x40, 0xE7, 0x16,  // W.;.y@..
                /* 0298 */  0x72, 0x9A, 0x41, 0x1F, 0x0A, 0x7C, 0x06, 0x78,  // r.A..|.x
                /* 02A0 */  0x92, 0x01, 0xDB, 0xA1, 0x0A, 0x38, 0x9C, 0x64,  // .....8.d
                /* 02A8 */  0xC0, 0x73, 0x2B, 0x7B, 0x92, 0x61, 0xFF, 0xFF,  // .s+{.a..
                /* 02B0 */  0x93, 0x0C, 0x38, 0x0F, 0x62, 0x3E, 0xC9, 0x80,  // ..8.b>..
                /* 02B8 */  0xEF, 0xE8, 0x85, 0x3B, 0x81, 0xC0, 0xF3, 0x38,  // ...;...8
                /* 02C0 */  0x24, 0x21, 0x1F, 0x42, 0xF0, 0x43, 0x3A, 0xA6,  // $!.B.C:.
                /* 02C8 */  0x67, 0x10, 0x60, 0x28, 0xE4, 0x65, 0xE0, 0x03,  // g.`(.e..
                /* 02D0 */  0x08, 0x8D, 0x7E, 0x06, 0x01, 0xB4, 0xFF, 0xFF,  // ..~.....
                /* 02D8 */  0xCF, 0x20, 0xC0, 0xE5, 0xAC, 0xF0, 0x0C, 0x02,  // . ......
                /* 02E0 */  0x76, 0xF1, 0xAF, 0x3A, 0x9D, 0x07, 0x1C, 0x1C,  // v..:....
                /* 02E8 */  0x42, 0x4E, 0x8E, 0x8A, 0xA8, 0xE1, 0x58, 0xEB,  // BN....X.
                /* 02F0 */  0x41, 0x80, 0x8C, 0xE7, 0x45, 0xC0, 0x41, 0x4F,  // A...E.AO
                /* 02F8 */  0x8A, 0x40, 0xF7, 0xAC, 0x81, 0x3B, 0x1F, 0xC0,  // .@...;..
                /* 0300 */  0x3D, 0x12, 0xF2, 0x73, 0x07, 0xF8, 0xA2, 0x43,  // =..s...C
                /* 0308 */  0xE8, 0x98, 0x89, 0x3F, 0x51, 0x79, 0x88, 0x3E,  // ...?Qy.>
                /* 0310 */  0x1B, 0x98, 0xC0, 0xA3, 0x05, 0xD7, 0x39, 0x11,  // ......9.
                /* 0318 */  0x5C, 0xFF, 0xFF, 0xD1, 0xC2, 0x3B, 0x69, 0xE0,  // \....;i.
                /* 0320 */  0x46, 0x0B, 0xF7, 0x00, 0xFC, 0x58, 0x80, 0x39,  // F....X.9
                /* 0328 */  0x62, 0x82, 0xEB, 0xD0, 0x02, 0xA6, 0xEB, 0x02,  // b.......
                /* 0330 */  0xE6, 0xD2, 0x82, 0x3F, 0xB4, 0x00, 0x1F, 0xA1,  // ...?....
                /* 0338 */  0x27, 0x16, 0x94, 0xB4, 0x43, 0x0B, 0xA0, 0xF9,  // '...C...
                /* 0340 */  0xFF, 0x7F, 0x68, 0x01, 0x6E, 0x73, 0x7D, 0x68,  // ..h.ns}h
                /* 0348 */  0x01, 0x7B, 0xB8, 0x73, 0x18, 0x95, 0x73, 0x0E,  // .{.s..s.
                /* 0350 */  0x83, 0x76, 0x68, 0xF6, 0x39, 0x0C, 0xB8, 0x1E,  // .vh.9...
                /* 0358 */  0x26, 0xF0, 0x87, 0x4A, 0xB8, 0xB3, 0x88, 0x1F,  // &..J....
                /* 0360 */  0x27, 0xDA, 0x5B, 0x80, 0xCF, 0xA7, 0xC0, 0xED,  // '.[.....
                /* 0368 */  0xB0, 0x86, 0x3B, 0x82, 0xC0, 0xBB, 0x14, 0x9C,  // ..;.....
                /* 0370 */  0x96, 0xA7, 0xF6, 0xD4, 0x7F, 0x70, 0x8D, 0x5F,  // .....p._
                /* 0378 */  0x41, 0xC8, 0x3D, 0xC6, 0x77, 0x10, 0xF6, 0xFF,  // A.=.w...
                /* 0380 */  0x3F, 0x88, 0x01, 0x37, 0x19, 0x07, 0x31, 0x54,  // ?..7..1T
                /* 0388 */  0xF0, 0x43, 0x08, 0x40, 0xA1, 0xCB, 0xC2, 0x43,  // .C.@...C
                /* 0390 */  0x08, 0xD8, 0xA5, 0x1F, 0xC4, 0x68, 0xEC, 0x83,  // .....h..
                /* 0398 */  0x18, 0xEA, 0xFF, 0x7F, 0x82, 0xC7, 0x9F, 0xC3,  // ........
                /* 03A0 */  0x00, 0xA7, 0x67, 0x38, 0xB8, 0x51, 0x8F, 0x61,  // ..g8.Q.a
                /* 03A8 */  0x80, 0xA2, 0xB3, 0x28, 0x70, 0x82, 0x78, 0x0E,  // ...(p.x.
                /* 03B0 */  0x63, 0xFF, 0xFF, 0x73, 0x18, 0xF0, 0x14, 0xFC,  // c..s....
                /* 03B8 */  0x12, 0xF0, 0x81, 0x85, 0x4A, 0x84, 0x41, 0x9D,  // ....J.A.
                /* 03C0 */  0x59, 0x00, 0xDE, 0x1C, 0x90, 0x9F, 0x59, 0xC0,  // Y.....Y.
                /* 03C8 */  0x1E, 0xF2, 0xAD, 0xA1, 0x1F, 0x81, 0xFF, 0xFF,  // ........
                /* 03D0 */  0x67, 0x16, 0xC0, 0xF5, 0x99, 0xDC, 0x63, 0xC5,  // g.....c.
                /* 03D8 */  0x1D, 0x22, 0xD8, 0x48, 0x42, 0xBE, 0x0A, 0xBC,  // .".HB...
                /* 03E0 */  0x15, 0x98, 0xC0, 0x91, 0x0F, 0x2D, 0x40, 0xF7,  // .....-@.
                /* 03E8 */  0x6C, 0x82, 0x1B, 0x2D, 0xDC, 0xE3, 0xC8, 0x39,  // l..-...9
                /* 03F0 */  0x9E, 0xD0, 0xBB, 0xF9, 0xEB, 0x03, 0x3B, 0x4D,  // ......;M
                /* 03F8 */  0xB0, 0x21, 0x83, 0x57, 0xDE, 0x21, 0x10, 0xF5,  // .!.W.!..
                /* 0400 */  0xFF, 0x1F, 0xB2, 0x0F, 0x24, 0x9E, 0xC2, 0xCB,  // ....$...
                /* 0408 */  0x0C, 0x66, 0x26, 0x31, 0x0E, 0x24, 0xC2, 0xB1,  // .f&1.$..
                /* 0410 */  0x78, 0x78, 0xE4, 0x28, 0x08, 0xAA, 0x33, 0x3F,  // xx.(..3?
                /* 0418 */  0x19, 0x35, 0xE8, 0x67, 0xF7, 0x84, 0x0F, 0x9E,  // .5.g....
                /* 0420 */  0xE9, 0xBE, 0xE1, 0x83, 0xE1, 0x30, 0x08, 0x73,  // .....0.s
                /* 0428 */  0xCE, 0x1E, 0x3F, 0xF8, 0x8E, 0x3D, 0xB8, 0x73,  // ..?..=.s
                /* 0430 */  0x10, 0xBC, 0xEB, 0x8A, 0x91, 0x4F, 0xE8, 0x25,  // .....O.%
                /* 0438 */  0x00, 0x73, 0x6B, 0xC1, 0x9E, 0x05, 0x81, 0x93,  // .sk.....
                /* 0440 */  0xAC, 0x83, 0x20, 0x4A, 0xC8, 0x59, 0x10, 0x54,  // .. J.Y.T
                /* 0448 */  0xFF, 0xFF, 0x83, 0x10, 0xC0, 0x04, 0x6F, 0xF7,  // ......o.
                /* 0450 */  0x20, 0x5D, 0x83, 0x7C, 0x1B, 0x78, 0x1A, 0x78,  //  ].|.x.x
                /* 0458 */  0xF8, 0x89, 0xF2, 0x20, 0xE4, 0x8B, 0xC4, 0x0B,  // ... ....
                /* 0460 */  0x41, 0x84, 0x28, 0xC7, 0x7B, 0x02, 0x11, 0x9E,  // A.(.{...
                /* 0468 */  0x86, 0x3C, 0xE1, 0x30, 0xE1, 0x4E, 0x36, 0xCA,  // .<.0.N6.
                /* 0470 */  0x4B, 0x43, 0x18, 0x43, 0xC7, 0x0A, 0x14, 0x39,  // KC.C...9
                /* 0478 */  0x7E, 0x08, 0x1F, 0x85, 0x7C, 0x10, 0x62, 0x51,  // ~...|.bQ
                /* 0480 */  0xCE, 0xB7, 0xF4, 0xFC, 0x61, 0x23, 0x67, 0x11,  // ....a#g.
                /* 0488 */  0xD4, 0x49, 0xC0, 0x87, 0x0E, 0x0F, 0xEA, 0x09,  // .I......
                /* 0490 */  0x01, 0x13, 0x1A, 0x42, 0x47, 0x5C, 0xE0, 0x7A,  // ...BG\.z
                /* 0498 */  0xDA, 0xC0, 0xFD, 0xFF, 0x8F, 0x42, 0xE0, 0x38,  // .....B.8
                /* 04A0 */  0x80, 0xC0, 0x7B, 0x47, 0xF8, 0xB4, 0x0E, 0x2E,  // ..{G....
                /* 04A8 */  0x08, 0x9F, 0x3F, 0xE0, 0xFB, 0x44, 0x16, 0xEE,  // ..?..D..
                /* 04B0 */  0x5B, 0xC0, 0x0B, 0x0D, 0xEE, 0xEC, 0x01, 0x7C,  // [......|
                /* 04B8 */  0xE4, 0x1E, 0x6B, 0x51, 0x02, 0x61, 0x50, 0x67,  // ..kQ.aPg
                /* 04C0 */  0x0F, 0xC0, 0xF9, 0xFF, 0xFF, 0xEC, 0x01, 0xD6,  // ........
                /* 04C8 */  0x81, 0x3E, 0x7A, 0x1C, 0xE8, 0x31, 0x06, 0x89,  // .>z..1..
                /* 04D0 */  0x11, 0xC4, 0x77, 0x0E, 0x1F, 0x7C, 0xE2, 0xBC,  // ..w..|..
                /* 04D8 */  0x11, 0x3C, 0x7B, 0xF8, 0xC8, 0x71, 0x5C, 0x3E,  // .<{..q\>
                /* 04E0 */  0x80, 0xF8, 0xEC, 0xE1, 0x2B, 0x88, 0xF1, 0xC2,  // ....+...
                /* 04E8 */  0xC4, 0x7C, 0x38, 0xF2, 0x35, 0x21, 0x5E, 0xE4,  // .|8.5!^.
                /* 04F0 */  0xB0, 0x61, 0x22, 0xFB, 0xEC, 0xC1, 0x22, 0x1E,  // .a"...".
                /* 04F8 */  0x6B, 0xA9, 0x94, 0x83, 0x19, 0xFA, 0x4C, 0xE0,  // k.....L.
                /* 0500 */  0x5B, 0xC2, 0x99, 0xBD, 0x71, 0x44, 0x38, 0xAE,  // [...qD8.
                /* 0508 */  0x93, 0x3B, 0x9F, 0x38, 0x1E, 0xD2, 0x49, 0xFB,  // .;.8..I.
                /* 0510 */  0x6C, 0x06, 0xBE, 0xE3, 0x07, 0x70, 0x38, 0x9B,  // l....p8.
                /* 0518 */  0x81, 0x67, 0x74, 0x70, 0x0F, 0x53, 0xE0, 0x93,  // .gtp.S..
                /* 0520 */  0x75, 0x36, 0x43, 0x0F, 0xCB, 0xE7, 0x82, 0x57,  // u6C....W
                /* 0528 */  0x07, 0x0F, 0x82, 0x9D, 0xCB, 0xC0, 0x75, 0xB8,  // ......u.
                /* 0530 */  0x83, 0xF3, 0xFF, 0x3F, 0x97, 0x01, 0xAF, 0x73,  // ...?...s
                /* 0538 */  0xC7, 0x91, 0xB1, 0x53, 0x05, 0x47, 0x3C, 0xA8,  // ...S.G<.
                /* 0540 */  0x33, 0x79, 0x77, 0x39, 0x6B, 0x1F, 0x3C, 0x02,  // 3yw9k.<.
                /* 0548 */  0x9D, 0xE7, 0x29, 0xFB, 0x1C, 0x03, 0x73, 0x84,  // ..)...s.
                /* 0550 */  0x1E, 0x3B, 0xF8, 0x0E, 0x26, 0xF8, 0x83, 0x0C,  // .;..&...
                /* 0558 */  0x1C, 0x98, 0x13, 0x38, 0xBA, 0x40, 0xA7, 0x10,  // ...8.@..
                /* 0560 */  0xE7, 0x14, 0x9E, 0x63, 0x80, 0x91, 0x1C, 0x4B,  // ...c...K
                /* 0568 */  0x20, 0x2C, 0xC0, 0xB1, 0x40, 0xA2, 0x96, 0x49,  //  ,..@..I
                /* 0570 */  0x61, 0x7C, 0x32, 0xF0, 0x39, 0x06, 0xAE, 0x24,  // a|2.9..$
                /* 0578 */  0x38, 0xD4, 0xF8, 0x3C, 0xB2, 0x97, 0xBC, 0xE3,  // 8..<....
                /* 0580 */  0x3C, 0x91, 0x37, 0x04, 0x8F, 0xFF, 0x81, 0x06,  // <.7.....
                /* 0588 */  0xC6, 0xC0, 0x3D, 0xAD, 0x93, 0xF2, 0x4D, 0xEE,  // ..=...M.
                /* 0590 */  0xB1, 0xC4, 0x67, 0x43, 0x7E, 0x5C, 0x60, 0x68,  // ..gC~\`h
                /* 0598 */  0xFC, 0x74, 0x03, 0x86, 0xFF, 0xFF, 0xE9, 0x06,  // .t......
                /* 05A0 */  0xCE, 0x9D, 0xC1, 0x47, 0x0D, 0xB0, 0x5C, 0x6D,  // ...G..\m
                /* 05A8 */  0x30, 0x58, 0xA1, 0x62, 0x34, 0x7A, 0xD7, 0x23,  // 0X.b4z.#
                /* 05B0 */  0xA0, 0xC7, 0xD7, 0xD7, 0x45, 0x9A, 0x42, 0x45,  // ....E.BE
                /* 05B8 */  0x0C, 0xF1, 0x42, 0x60, 0x97, 0xC7, 0x71, 0xE4,  // ..B`..q.
                /* 05C0 */  0x59, 0x17, 0x5C, 0xD8, 0xCF, 0xBA, 0x60, 0x0F,  // Y.\...`.
                /* 05C8 */  0x75, 0x4E, 0xA2, 0x91, 0x46, 0x83, 0x3A, 0xC8,  // uN..F.:.
                /* 05D0 */  0xF0, 0x03, 0xC1, 0x63, 0x90, 0x4F, 0x1E, 0x06,  // ...c.O..
                /* 05D8 */  0x39, 0xD1, 0xD3, 0x7A, 0x5C, 0x78, 0x1A, 0xF0,  // 9..z\x..
                /* 05E0 */  0xB8, 0xD9, 0x35, 0xC1, 0x1F, 0x04, 0x1F, 0x0F,  // ..5.....
                /* 05E8 */  0xF0, 0x97, 0xA0, 0x80, 0x27, 0xFA, 0xF0, 0x01,  // ....'...
                /* 05F0 */  0xEB, 0x10, 0x82, 0x3F, 0x61, 0xC0, 0x1F, 0x8F,  // ...?a...
                /* 05F8 */  0x8F, 0x01, 0x3E, 0xD1, 0xFA, 0x48, 0x45, 0x06,  // ..>..HE.
                /* 0600 */  0x81, 0x3A, 0xBC, 0xF1, 0x91, 0x9E, 0xD6, 0xDB,  // .:......
                /* 0608 */  0x80, 0x0F, 0x09, 0x87, 0xC5, 0x0E, 0x1E, 0x3E,  // .......>
                /* 0610 */  0xA3, 0x80, 0x63, 0x3C, 0xF0, 0x6F, 0x9F, 0x4F,  // ..c<.o.O
                /* 0618 */  0x07, 0xFF, 0xFF, 0x08, 0xAF, 0x0C, 0x9E, 0xAF,  // ........
                /* 0620 */  0x0F, 0x66, 0x60, 0xB9, 0x75, 0xF8, 0xD0, 0x10,  // .f`.u...
                /* 0628 */  0xEA, 0xA9, 0xC3, 0x33, 0x78, 0xBF, 0xF0, 0x09,  // ...3x...
                /* 0630 */  0x04, 0x98, 0x04, 0x36, 0x34, 0x48, 0x26, 0x73,  // ...64H&s
                /* 0638 */  0x9D, 0xB2, 0x71, 0xDA, 0xA1, 0xC3, 0xB4, 0xC8,  // ..q.....
                /* 0640 */  0x03, 0x82, 0x8E, 0x06, 0x3E, 0xD2, 0xF8, 0x80,  // ....>...
                /* 0648 */  0xCB, 0x0F, 0x49, 0x86, 0xB0, 0x30, 0x0A, 0x9D,  // ..I..0..
                /* 0650 */  0x7C, 0x3C, 0x1A, 0x0F, 0x8F, 0xC0, 0x51, 0x10,  // |<....Q.
                /* 0658 */  0x8F, 0xDC, 0x21, 0x21, 0x64, 0xE4, 0x10, 0x80,  // ..!!d...
                /* 0660 */  0x3E, 0x2C, 0x30, 0x88, 0x87, 0x2E, 0x13, 0xF8,  // >,0.....
                /* 0668 */  0xD8, 0xE0, 0xF3, 0x1A, 0x9C, 0xE3, 0x91, 0x27,  // .......'
                /* 0670 */  0xE3, 0x69, 0x78, 0xDC, 0xB8, 0x53, 0x07, 0xDC,  // .ix..S..
                /* 0678 */  0x71, 0xE0, 0x0F, 0x3A, 0xF8, 0x53, 0x20, 0x3F,  // q..:.S ?
                /* 0680 */  0x27, 0x91, 0xF3, 0x1F, 0xA8, 0x04, 0x9E, 0x0B,  // '.......
                /* 0688 */  0x40, 0x01, 0xE4, 0xAB, 0x80, 0x95, 0x1E, 0x07,  // @.......
                /* 0690 */  0xE8, 0x14, 0x42, 0x84, 0x89, 0x66, 0x78, 0x4C,  // ..B..fxL
                /* 0698 */  0xF0, 0xD3, 0x17, 0x1D, 0x8F, 0x87, 0xE5, 0xFF,  // ........
                /* 06A0 */  0xFF, 0x20, 0xF9, 0xF1, 0x85, 0x61, 0x3F, 0x9D,  // . ...a?.
                /* 06A8 */  0xF8, 0xD4, 0x76, 0x8C, 0xEF, 0x05, 0x8F, 0x5F,  // ..v...._
                /* 06B0 */  0x18, 0x58, 0x0F, 0x9B, 0xC3, 0x1A, 0x2D, 0xEC,  // .X....-.
                /* 06B8 */  0xD1, 0x3E, 0x3E, 0xF8, 0xEA, 0xE1, 0x89, 0xF9,  // .>>.....
                /* 06C0 */  0x16, 0xE7, 0x43, 0x07, 0x58, 0x0E, 0x52, 0xC0,  // ..C.X.R.
                /* 06C8 */  0xE3, 0xFC, 0xC3, 0xE6, 0xF0, 0x02, 0xF1, 0x1C,  // ........
                /* 06D0 */  0xE6, 0x83, 0x07, 0x3B, 0xF1, 0xB1, 0x53, 0x1F,  // ...;..S.
                /* 06D8 */  0xD7, 0x75, 0x8E, 0x43, 0x9C, 0x21, 0xF8, 0x20,  // .u.C.!. 
                /* 06E0 */  0x1C, 0x67, 0x91, 0xF2, 0x38, 0x53, 0x72, 0x95,  // .g..8Sr.
                /* 06E8 */  0x7C, 0xE0, 0xA8, 0x1A, 0x45, 0xF0, 0xBE, 0x15,  // |...E...
                /* 06F0 */  0xB0, 0x08, 0xC7, 0x08, 0x94, 0x78, 0x0A, 0x49,  // .....x.I
                /* 06F8 */  0x3F, 0x46, 0xA0, 0xC4, 0xC2, 0x51, 0x10, 0x1F,  // ?F...Q..
                /* 0700 */  0x23, 0x7C, 0x90, 0xB0, 0x8D, 0x63, 0x04, 0x6A,  // #|...c.j
                /* 0708 */  0x8C, 0x3E, 0x0C, 0xF2, 0xA3, 0x00, 0x3F, 0x45,  // .>....?E
                /* 0710 */  0xC0, 0x3F, 0xF1, 0xE0, 0xC6, 0x0A, 0x77, 0x70,  // .?....wp
                /* 0718 */  0x6C, 0x85, 0x2F, 0x3D, 0x87, 0x76, 0x76, 0x0F,  // l./=.vv.
                /* 0720 */  0x09, 0x51, 0xDE, 0x5F, 0x8D, 0x18, 0x21, 0x60,  // .Q._..!`
                /* 0728 */  0xD8, 0x68, 0x1E, 0x23, 0xEE, 0xD8, 0xCE, 0x2E,  // .h.#....
                /* 0730 */  0x45, 0x9E, 0x53, 0xAC, 0x47, 0x25, 0x7E, 0xA4,  // E.S.G%~.
                /* 0738 */  0x80, 0xF7, 0xFF, 0x27, 0xF0, 0x31, 0x0F, 0x77,  // ...'.1.w
                /* 0740 */  0xA4, 0x80, 0x33, 0x93, 0xF3, 0xC0, 0xA8, 0x1B,  // ..3.....
                /* 0748 */  0x8B, 0xE0, 0x8D, 0xF6, 0x92, 0x8D, 0x3D, 0x58,  // ......=X
                /* 0750 */  0x00, 0x8F, 0x13, 0xA3, 0x0F, 0x16, 0xE0, 0x3A,  // .......:
                /* 0758 */  0x13, 0xF8, 0x60, 0x01, 0x5C, 0xCF, 0x07, 0x3E,  // ..`.\..>
                /* 0760 */  0x1D, 0x80, 0xF5, 0xF2, 0xC3, 0xEF, 0x07, 0x30,  // .......0
                /* 0768 */  0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98, 0x1B, 0x86,  // N.0.....
                /* 0770 */  0xC3, 0x2C, 0x59, 0x27, 0x0C, 0x7E, 0x5C, 0x73,  // .,Y'.~\s
                /* 0778 */  0xA4, 0xD5, 0x6A, 0x20, 0xEC, 0x12, 0x86, 0x23,  // ..j ...#
                /* 0780 */  0x18, 0x04, 0x4C, 0x27, 0x0B, 0x8F, 0xDA, 0x11,  // ..L'....
                /* 0788 */  0x28, 0x24, 0xED, 0x80, 0x81, 0x12, 0x73, 0xC0,  // ($....s.
                /* 0790 */  0xA0, 0x20, 0x06, 0x74, 0x52, 0x08, 0x9D, 0x45,  // . .tR..E
                /* 0798 */  0xFD, 0xFF, 0x3F, 0x60, 0xF0, 0x83, 0x9D, 0x4F,  // ..?`...O
                /* 07A0 */  0x0D, 0xEC, 0x72, 0xEB, 0xEB, 0x85, 0xE7, 0xE9,  // ..r.....
                /* 07A8 */  0x29, 0x73, 0x3C, 0x1F, 0x43, 0x0C, 0xEB, 0x8B,  // )s<.C...
                /* 07B0 */  0x09, 0x78, 0x6E, 0x14, 0xEC, 0x34, 0x8B, 0xB9,  // .xn..4..
                /* 07B8 */  0xB8, 0xB1, 0xB3, 0x1D, 0x3B, 0x15, 0x18, 0xE5,  // ....;...
                /* 07C0 */  0x70, 0xDF, 0xC0, 0xAC, 0xE6, 0xAA, 0x80, 0x9A,  // p.......
                /* 07C8 */  0x11, 0x86, 0xC0, 0xE3, 0xF5, 0x81, 0x11, 0x4C,  // .......L
                /* 07D0 */  0xFA, 0x2E, 0x14, 0x20, 0x47, 0xE7, 0x32, 0x47,  // ... G.2G
                /* 07D8 */  0x8F, 0x3A, 0x47, 0xF9, 0x24, 0xC5, 0x47, 0xEF,  // .:G.$.G.
                /* 07E0 */  0xA3, 0xB9, 0x4F, 0x2B, 0x70, 0xCF, 0x52, 0x3E,  // ..O+p.R>
                /* 07E8 */  0x42, 0x01, 0xDF, 0x81, 0xF9, 0x52, 0x80, 0x3B,  // B....R.;
                /* 07F0 */  0xA0, 0x80, 0xE1, 0xFA, 0x80, 0xFD, 0xFF, 0xC3,  // ........
                /* 07F8 */  0xBC, 0xA2, 0xE0, 0xCF, 0x28, 0xC0, 0x24, 0xF0,  // ....(.$.
                /* 0800 */  0x59, 0x0A, 0x74, 0x90, 0x3E, 0xA3, 0x00, 0xD7,  // Y.t.>...
                /* 0808 */  0xA1, 0xE2, 0xCE, 0x28, 0xE0, 0x38, 0x10, 0x1E,  // ...(.8..
                /* 0810 */  0x3D, 0x3F, 0x47, 0xB1, 0x38, 0xC7, 0x12, 0x74,  // =?G.8..t
                /* 0818 */  0xA8, 0x97, 0x83, 0x6E, 0x9B, 0xEC, 0x58, 0x82,  // ...n..X.
                /* 0820 */  0x8D, 0x72, 0x2C, 0x41, 0x85, 0xA0, 0xD0, 0x09,  // .r,A....
                /* 0828 */  0xCA, 0x27, 0x09, 0x7E, 0xC6, 0xE3, 0x20, 0x06,  // .'.~.. .
                /* 0830 */  0x74, 0xF6, 0x93, 0x04, 0x5A, 0xC5, 0x49, 0x02,  // t...Z.I.
                /* 0838 */  0x19, 0xF6, 0x5C, 0x02, 0x84, 0xFE, 0xFF, 0xE7,  // ..\.....
                /* 0840 */  0x12, 0xF0, 0x9E, 0x13, 0x9F, 0x26, 0xC0, 0x35,  // .....&.5
                /* 0848 */  0x6B, 0xFC, 0x69, 0x02, 0x7F, 0x3E, 0x01, 0x16,  // k.i..>..
                /* 0850 */  0x47, 0x46, 0xC0, 0xD9, 0x41, 0x90, 0x1F, 0x19,  // GF..A...
                /* 0858 */  0x81, 0xEF, 0xB9, 0x84, 0xFF, 0xFF, 0xCF, 0x25,  // .......%
                /* 0860 */  0xE0, 0x19, 0xB6, 0xCF, 0x25, 0x80, 0x93, 0x9B,  // ....%...
                /* 0868 */  0x34, 0x3F, 0x97, 0xC0, 0x1D, 0xBA, 0xE3, 0x9C,  // 4?......
                /* 0870 */  0xBE, 0x10, 0x57, 0x58, 0xDF, 0x33, 0xE2, 0x27,  // ..WX.3.'
                /* 0878 */  0x18, 0xE3, 0x58, 0x82, 0x0A, 0x70, 0xF8, 0x02,  // ..X..p..
                /* 0880 */  0xB4, 0xFF, 0xFF, 0x4F, 0x23, 0xE0, 0x3F, 0x17,  // ...O#.?.
                /* 0888 */  0x7B, 0xF4, 0xFC, 0x40, 0xE2, 0x43, 0x06, 0x19,  // {..@.C..
                /* 0890 */  0x3D, 0x8D, 0x7C, 0xF8, 0x82, 0x1E, 0xF1, 0x30,  // =.|....0
                /* 0898 */  0x02, 0xB4, 0x07, 0xFA, 0xF0, 0x05, 0xC6, 0xDB,  // ........
                /* 08A0 */  0x03, 0x3F, 0x6E, 0x02, 0xAF, 0xD8, 0x87, 0x12,  // .?n.....
                /* 08A8 */  0xD0, 0xC1, 0xF2, 0x43, 0x09, 0xF8, 0xFF, 0xFF,  // ...C....
                /* 08B0 */  0x87, 0x12, 0xF0, 0x8C, 0x1E, 0x77, 0xF6, 0x02,  // .....w..
                /* 08B8 */  0xC7, 0x55, 0xC2, 0x83, 0x37, 0xE0, 0x31, 0x3D,  // .U..7.1=
                /* 08C0 */  0x16, 0x18, 0x90, 0x9D, 0x4B, 0x98, 0xEC, 0x73,  // ....K..s
                /* 08C8 */  0x09, 0xFA, 0x3C, 0x62, 0xAB, 0xB7, 0x63, 0x72,  // ..<b..cr
                /* 08D0 */  0x52, 0xC7, 0x08, 0x3F, 0x97, 0xA0, 0x24, 0x9F,  // R..?..$.
                /* 08D8 */  0x4B, 0x00, 0xDA, 0x1C, 0xBA, 0xC0, 0xF1, 0xFF,  // K.......
                /* 08E0 */  0x3F, 0x74, 0x01, 0x3C, 0xB8, 0x06, 0xFA, 0x40,  // ?t.<...@
                /* 08E8 */  0x02, 0xAE, 0x7B, 0x82, 0x0F, 0x24, 0xC0, 0xF5,  // ..{..$..
                /* 08F0 */  0x28, 0x00, 0x9E, 0x23, 0x08, 0xFE, 0xC8, 0xEC,  // (..#....
                /* 08F8 */  0x03, 0x3F, 0xEE, 0xA4, 0xEF, 0x53, 0x75, 0x5C,  // .?...Su\
                /* 0900 */  0xE3, 0x1F, 0xF1, 0x11, 0xFC, 0xFF, 0x1B, 0x3F,  // .......?
                /* 0908 */  0x7D, 0x91, 0x7B, 0x81, 0x8F, 0x25, 0x3A, 0xF0,  // }.{..%:.
                /* 0910 */  0xA3, 0x04, 0x53, 0x48, 0xEE, 0x01, 0x02, 0x25,  // ..SH...%
                /* 0918 */  0x10, 0x8E, 0x82, 0xF8, 0x00, 0xE1, 0xF0, 0xE7,  // ........
                /* 0920 */  0x24, 0xE8, 0x57, 0x4B, 0x7E, 0x7E, 0xC0, 0x5F,  // $.WK~~._
                /* 0928 */  0x47, 0xD8, 0x28, 0xD9, 0x71, 0x1E, 0x37, 0x4A,  // G.(.q.7J
                /* 0930 */  0xB8, 0x60, 0xAF, 0x0F, 0x86, 0xB8, 0xC3, 0x13,  // .`......
                /* 0938 */  0xE1, 0x67, 0x5B, 0xCC, 0x31, 0x1F, 0xEE, 0x51,  // .g[.1..Q
                /* 0940 */  0xE1, 0x51, 0x09, 0x5C, 0xB3, 0x86, 0x75, 0x58,  // .Q.\..uX
                /* 0948 */  0x02, 0x3C, 0x78, 0x38, 0x4C, 0x00, 0xAD, 0xFF,  // .<x8L...
                /* 0950 */  0xFF, 0x61, 0x09, 0xFC, 0xB3, 0xE7, 0x83, 0x38,  // .a.....8
                /* 0958 */  0x11, 0x0F, 0x1F, 0x03, 0x74, 0x2C, 0x6F, 0x07,  // ....t,o.
                /* 0960 */  0xEC, 0xD8, 0xAB, 0xC3, 0x12, 0x6A, 0x0C, 0x3E,  // .....j.>
                /* 0968 */  0xFA, 0xFA, 0xE8, 0xC4, 0x20, 0x1F, 0x0F, 0x31,  // .... ..1
                /* 0970 */  0xC7, 0x16, 0x76, 0xC2, 0x07, 0xF8, 0xF6, 0xFF,  // ..v.....
                /* 0978 */  0x3F, 0xE1, 0x03, 0xD6, 0xCE, 0x24, 0xBE, 0x3F,  // ?....$.?
                /* 0980 */  0x60, 0xAF, 0x2D, 0xF8, 0xA3, 0x09, 0xF0, 0x06,  // `.-.....
                /* 0988 */  0xF7, 0xD1, 0x04, 0x70, 0xF5, 0xFF, 0x3F, 0x9A,  // ...p..?.
                /* 0990 */  0xE0, 0x84, 0x9E, 0x9D, 0x50, 0x67, 0x03, 0x1F,  // ....Pg..
                /* 0998 */  0x98, 0x6C, 0x14, 0x95, 0x40, 0xBF, 0x69, 0xBC,  // .l..@.i.
                /* 09A0 */  0x9F, 0x07, 0x31, 0xF4, 0x49, 0xF0, 0x53, 0x13,  // ..1.I.S.
                /* 09A8 */  0x06, 0xC2, 0x47, 0x13, 0x9F, 0x24, 0x7C, 0x9C,  // ..G..$|.
                /* 09B0 */  0xE0, 0x52, 0xE0, 0x28, 0x88, 0x8F, 0x13, 0x8E,  // .R.(....
                /* 09B8 */  0x79, 0x36, 0x41, 0x9F, 0x0A, 0x7C, 0x3F, 0x38,  // y6A..|?8
                /* 09C0 */  0x09, 0x6C, 0xA8, 0xF3, 0x04, 0x50, 0x19, 0x07,  // .l...P..
                /* 09C8 */  0xFE, 0xE8, 0x04, 0x57, 0xD8, 0xC9, 0x04, 0x64,  // ...W...d
                /* 09D0 */  0x27, 0x72, 0x60, 0x6E, 0xE2, 0x1C, 0x01, 0x94,  // 'r`n....
                /* 09D8 */  0xFE, 0xFF, 0x27, 0x72, 0xE0, 0x70, 0x5A, 0xE5,  // ..'r.pZ.
                /* 09E0 */  0xA7, 0x01, 0x7C, 0xA0, 0xA3, 0x2A, 0x3A, 0xD6,  // ..|..*:.
                /* 09E8 */  0x93, 0x41, 0x23, 0x7E, 0x07, 0x08, 0x77, 0xEA,  // .A#~..w.
                /* 09F0 */  0xE7, 0xF9, 0x40, 0xC0, 0x8E, 0xE5, 0x3E, 0x2C,  // ..@...>,
                /* 09F8 */  0xF1, 0xF3, 0x92, 0x4F, 0x11, 0x3E, 0x41, 0x70,  // ...O.>Ap
                /* 0A00 */  0x49, 0x27, 0x08, 0x0A, 0x62, 0x40, 0xE7, 0x3D,  // I'..b@.=
                /* 0A08 */  0x5D, 0x7A, 0x10, 0xF4, 0x7C, 0xC3, 0x8F, 0xC5,  // ]z..|...
                /* 0A10 */  0xBE, 0xB6, 0x1C, 0xC5, 0x23, 0x51, 0x82, 0xF9,  // ....#Q..
                /* 0A18 */  0x0E, 0x01, 0xF4, 0xB6, 0x04, 0x4F, 0xDE, 0x6D,  // .....O.m
                /* 0A20 */  0x09, 0x44, 0x18, 0x77, 0x72, 0x16, 0x0C, 0xE1,  // .D.wr...
                /* 0A28 */  0x28, 0x7D, 0x80, 0x80, 0x31, 0xC0, 0xC7, 0x84,  // (}..1...
                /* 0A30 */  0x62, 0xDF, 0x37, 0xF4, 0xBE, 0x04, 0xF3, 0x8A,  // b.7.....
                /* 0A38 */  0x09, 0xAE, 0xF3, 0x12, 0x30, 0x9E, 0x89, 0xFF,  // ....0...
                /* 0A40 */  0xFF, 0x3E, 0xCF, 0x21, 0xE4, 0x02, 0xC0, 0x4F,  // .>.!...O
                /* 0A48 */  0xE5, 0x60, 0x39, 0x36, 0x80, 0x67, 0x1C, 0xEC,  // .`96.g..
                /* 0A50 */  0x0A, 0x80, 0x3F, 0x32, 0xC1, 0x3E, 0x35, 0xE2,  // ..?2.>5.
                /* 0A58 */  0x8E, 0x4C, 0x60, 0x98, 0x08, 0x3B, 0xE7, 0x1C,  // .L`..;..
                /* 0A60 */  0x08, 0xF6, 0x60, 0x02, 0xBC, 0x55, 0x1C, 0x4C,  // ..`..U.L
                /* 0A68 */  0x00, 0x2D, 0xC3, 0x0D, 0x72, 0x3E, 0x8F, 0xE4,  // .-..r>..
                /* 0A70 */  0xC6, 0x79, 0xC3, 0xF3, 0x89, 0x84, 0x9D, 0xC4,  // .y......
                /* 0A78 */  0xD9, 0xFF, 0xFF, 0x60, 0xC2, 0x25, 0x41, 0x48,  // ...`.%AH
                /* 0A80 */  0xFE, 0x61, 0x09, 0x89, 0x8D, 0x9D, 0xFE, 0x39,  // .a.....9
                /* 0A88 */  0xBC, 0xB9, 0x32, 0x82, 0x62, 0x8F, 0x4B, 0xA8,  // ..2.b.K.
                /* 0A90 */  0xC3, 0x84, 0x45, 0x9E, 0x26, 0x50, 0xA7, 0x69,  // ..E.&P.i
                /* 0A98 */  0x9F, 0x90, 0xC9, 0x69, 0x82, 0x46, 0x3E, 0x4D,  // ...i.F>M
                /* 0AA0 */  0xA0, 0x87, 0xE6, 0x89, 0x9D, 0x06, 0x6E, 0xDC,  // ......n.
                /* 0AA8 */  0xA7, 0xC1, 0x6F, 0x87, 0xFC, 0xC0, 0x04, 0x7C,  // ..o....|
                /* 0AB0 */  0x0F, 0x0F, 0xF8, 0xD3, 0x04, 0xEC, 0xF3, 0x0D,  // ........
                /* 0AB8 */  0x1B, 0x74, 0xC8, 0x77, 0x87, 0x17, 0x59, 0x1F,  // .t.w..Y.
                /* 0AC0 */  0x26, 0x80, 0xF9, 0xC8, 0x7D, 0x98, 0x00, 0xFF,  // &...}...
                /* 0AC8 */  0xFF, 0xFF, 0xD0, 0x04, 0x5C, 0x15, 0xDA, 0xF4,  // ....\...
                /* 0AD0 */  0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35, 0xCA,  // ...U.25.
                /* 0AD8 */  0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6, 0xA4,  // 4...Rc..
                /* 0AE0 */  0x9D, 0x54, 0xBD, 0x54, 0x8D, 0xD5, 0x91, 0x9E,  // .T.T....
                /* 0AE8 */  0x0B, 0x02, 0x71, 0xD4, 0x05, 0x0B, 0xC4, 0xD1,  // ..q.....
                /* 0AF0 */  0x9F, 0x40, 0x02, 0xB1, 0xB8, 0x57, 0x88, 0x40,  // .@...W.@
                /* 0AF8 */  0x2C, 0xF5, 0x05, 0x21, 0x10, 0xCB, 0xD4, 0x01,  // ,..!....
                /* 0B00 */  0xC2, 0x82, 0xBC, 0xEF, 0x05, 0xE2, 0x60, 0x52,  // ......`R
                /* 0B08 */  0x06, 0x40, 0xAD, 0x80, 0xB0, 0x78, 0xCB, 0x12,  // .@...x..
                /* 0B10 */  0x88, 0x23, 0x9A, 0x39, 0x01, 0x50, 0x37, 0x20,  // .#.9.P7 
                /* 0B18 */  0x4C, 0xA0, 0x1E, 0x10, 0x26, 0xDC, 0x10, 0x08,  // L...&...
                /* 0B20 */  0x8B, 0xA3, 0x08, 0x84, 0x09, 0xB6, 0x04, 0xC2,  // ........
                /* 0B28 */  0xE2, 0x82, 0x50, 0xC1, 0x9E, 0x8E, 0xFD, 0x4C,  // ..P....L
                /* 0B30 */  0x3E, 0x88, 0x80, 0x1C, 0xDA, 0x14, 0x10, 0x93,  // >.......
                /* 0B38 */  0xA0, 0x0A, 0x88, 0x25, 0x78, 0x0C, 0x08, 0xC8,  // ...%x...
                /* 0B40 */  0x71, 0x40, 0x04, 0xE4, 0x50, 0xB6, 0x80, 0x58,  // q@..P..X
                /* 0B48 */  0x44, 0x10, 0x01, 0x59, 0xCF, 0x1B, 0x4E, 0x40,  // D..Y..N@
                /* 0B50 */  0x16, 0x07, 0x22, 0x20, 0x8B, 0x36, 0x06, 0xC4,  // .." .6..
                /* 0B58 */  0x22, 0x80, 0x08, 0xC8, 0xC9, 0x5E, 0x70, 0x81,  // "....^p.
                /* 0B60 */  0x48, 0x4C, 0x10, 0x01, 0x39, 0xEC, 0x8A, 0x05,  // HL..9...
                /* 0B68 */  0xE4, 0xE8, 0x20, 0x02, 0xB2, 0x4E, 0x6F, 0x40,  // .. ..No@
                /* 0B70 */  0x4C, 0x34, 0x88, 0x80, 0x2C, 0xFE, 0xB1, 0x21,  // L4..,..!
                /* 0B78 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0x3E, 0x28,  //  G....>(
                /* 0B80 */  0x02, 0x91, 0xB8, 0x20, 0x02, 0xB2, 0x46, 0x7B,  // ... ..F{
                /* 0B88 */  0x40, 0x4C, 0x30, 0x88, 0x80, 0x2C, 0xFB, 0x07,  // @L0..,..
                /* 0B90 */  0x25, 0x20, 0x87, 0x00, 0xD1, 0x00, 0xC9, 0xEB,  // % ......
                /* 0B98 */  0x40, 0x03, 0x24, 0xBF, 0x89, 0x40, 0x44, 0xE2,  // @.$..@D.
                /* 0BA0 */  0xAB, 0x22, 0x10, 0xD1, 0x0B, 0x22, 0x20, 0xFF,  // ."..." .
                /* 0BA8 */  0xFF, 0xA5, 0xFF, 0x38, 0x04, 0xE4, 0x20, 0x20,  // ...8..  
                /* 0BB0 */  0x02, 0x26, 0x1A, 0x81, 0xE9, 0x0B, 0x21, 0x10,  // .&....!.
                /* 0BB8 */  0xF9, 0xFF, 0x03                                 // ...
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 (WIID))
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        CreateDWordField (Arg2, 0x04, IVAL)
                        Return (AM04 (WIID, IVAL))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (WIID))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 ())
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        AM07 (Arg2)
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        AM08 (WIID)
                    }
                    ElseIf ((Arg1 == 0x09))
                    {
                        Return (AM09 ())
                    }
                    ElseIf ((Arg1 == 0x0A))
                    {
                        Return (AM10 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x0B))
                    {
                        Return (AM11 ())
                    }
                    Else
                    {
                    }
                }
            }
        }
    }

    Name (QLST, Package (0x08)
    {
        0x07, 
        Package (0x05)
        {
            0x2646, 
            "Memory Clock Mode", 
            Zero, 
            0x03, 
            Package (0x03)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x06)
                {
                    "Limit"
                }, 

                Buffer (0x07)
                {
                    "Manual"
                }
            }
        }, 

        Package (0x06)
        {
            0x47E0, 
            "Memclock Value", 
            One, 
            Buffer (0x05)
            {
                 0x02, 0x00, 0x01, 0x03, 0x00                     // .....
            }, 

            0x08, 
            Package (0x08)
            {
                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "400"
                }, 

                Buffer (0x04)
                {
                    "533"
                }, 

                Buffer (0x04)
                {
                    "667"
                }, 

                Buffer (0x04)
                {
                    "800"
                }, 

                Buffer (0x05)
                {
                    "Auto"
                }
            }
        }, 

        Package (0x05)
        {
            0x2646, 
            "DRAM Timing Mode", 
            Zero, 
            0x04, 
            Package (0x04)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x05)
                {
                    "Both"
                }
            }
        }, 

        Package (0x07)
        {
            0x4538, 
            "DCT0 CAS Latency (CL)", 
            0x02, 
            Buffer (0x05)
            {
                 0x02, 0x00, 0x03, 0x03, 0x00                     // .....
            }, 

            Buffer (0x05)
            {
                 0x02, 0x02, 0x03, 0x03, 0x00                     // .....
            }, 

            0x10, 
            Package (0x10)
            {
                Buffer (0x05)
                {
                    "Auto"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x06)
                {
                    "4 CLK"
                }, 

                Buffer (0x06)
                {
                    "5 CLK"
                }, 

                Buffer (0x06)
                {
                    "6 CLK"
                }, 

                Buffer (0x06)
                {
                    "7 CLK"
                }, 

                Buffer (0x06)
                {
                    "8 CLK"
                }, 

                Buffer (0x06)
                {
                    "9 CLK"
                }, 

                Buffer (0x07)
                {
                    "10 CLK"
                }, 

                Buffer (0x07)
                {
                    "11 CLK"
                }, 

                Buffer (0x07)
                {
                    "12 CLK"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }, 

                Buffer (0x04)
                {
                    "rvd"
                }
            }
        }, 

        Package (0x05)
        {
            0x455C, 
            "NB FID Control", 
            Zero, 
            0x02, 
            Package (0x02)
            {
                Buffer (0x07)
                {
                    "Manual"
                }, 

                Buffer (0x05)
                {
                    "Auto"
                }
            }
        }, 

        Package (0x06)
        {
            0x54A0, 
            "NBFID ID", 
            One, 
            Buffer (0x05)
            {
                 0x02, 0x01, 0x06, 0x03, 0x00                     // .....
            }, 

            0x21, 
            Package (0x21)
            {
                Buffer (0x02)
                {
                    "3"
                }, 

                Buffer (0x02)
                {
                    "4"
                }, 

                Buffer (0x02)
                {
                    "5"
                }, 

                Buffer (0x02)
                {
                    "6"
                }, 

                Buffer (0x02)
                {
                    "7"
                }, 

                Buffer (0x02)
                {
                    "8"
                }, 

                Buffer (0x02)
                {
                    "9"
                }, 

                Buffer (0x03)
                {
                    "10"
                }, 

                Buffer (0x03)
                {
                    "11"
                }, 

                Buffer (0x03)
                {
                    "12"
                }, 

                Buffer (0x03)
                {
                    "13"
                }, 

                Buffer (0x03)
                {
                    "14"
                }, 

                Buffer (0x03)
                {
                    "15"
                }, 

                Buffer (0x03)
                {
                    "16"
                }, 

                Buffer (0x03)
                {
                    "17"
                }, 

                Buffer (0x03)
                {
                    "18"
                }, 

                Buffer (0x03)
                {
                    "19"
                }, 

                Buffer (0x03)
                {
                    "20"
                }, 

                Buffer (0x03)
                {
                    "21"
                }, 

                Buffer (0x03)
                {
                    "22"
                }, 

                Buffer (0x03)
                {
                    "23"
                }, 

                Buffer (0x03)
                {
                    "24"
                }, 

                Buffer (0x03)
                {
                    "25"
                }, 

                Buffer (0x03)
                {
                    "26"
                }, 

                Buffer (0x03)
                {
                    "27"
                }, 

                Buffer (0x03)
                {
                    "28"
                }, 

                Buffer (0x03)
                {
                    "29"
                }, 

                Buffer (0x03)
                {
                    "30"
                }, 

                Buffer (0x03)
                {
                    "31"
                }, 

                Buffer (0x03)
                {
                    "32"
                }, 

                Buffer (0x03)
                {
                    "33"
                }, 

                Buffer (0x03)
                {
                    "34"
                }, 

                Buffer (0x03)
                {
                    "35"
                }
            }
        }, 

        Package (0x05)
        {
            0x1785, 
            "DDR3 Memory Profile", 
            Zero, 
            0x02, 
            Package (0x02)
            {
                Buffer (0x09)
                {
                    "Disabled"
                }, 

                Buffer (0x08)
                {
                    "Enabled"
                }
            }
        }
    })
    Scope (_SB.PCI0)
    {
        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.SBRG.TPM)
    {
        Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If ((VIDT != 0x8086))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (TPMF)
            {
                If ((VIDT == 0x8086))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.SBRG.TPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04){})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If ((TTT0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((TTT0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((TTT0 == 0x02))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                ElseIf ((TTT0 == 0x03))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.SBRG.TPM_.PPI1 */
                }
                ElseIf ((TTT0 == 0x04))
                {
                    Return (0x02)
                }
                ElseIf ((TTT0 == 0x05))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.SBRG.TPM_.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If ((Local2 == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((Local2 == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.SBRG.TPM_.PPI2 */
                }
                ElseIf ((TTT0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If ((TTT1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((TTT1 == One))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.SBRG.TPM_.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.SBRG.TPM_.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.ITPM)
    {
        Name (TAAX, Zero)
        OperationRegion (MIPT, SystemIO, SMIT, One)
        Field (MIPT, ByteAcc, NoLock, Preserve)
        {
            PSMI,   8
        }

        Name (PPI1, Package (0x02)
        {
            Zero, 
            Zero
        })
        Name (PPI2, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Name (MBUF, Buffer (0x04){})
        CreateByteField (MBUF, Zero, BUF0)
        CreateByteField (MBUF, One, BUF1)
        CreateByteField (MBUF, 0x02, BUF2)
        CreateByteField (MBUF, 0x03, BUF3)
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (TTT0, Zero)
                TTT0 = ToInteger (Arg2)
                If ((TTT0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             // .
                    })
                }
                ElseIf ((TTT0 == One))
                {
                    Return ("1.0")
                }
                ElseIf ((TTT0 == 0x02))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                ElseIf ((TTT0 == 0x03))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0x0F
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    PPI1 [Zero] = Zero
                    PPI1 [One] = Local3
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI1) /* \_SB_.PCI0.ITPM.PPI1 */
                }
                ElseIf ((TTT0 == 0x04))
                {
                    Return (0x02)
                }
                ElseIf ((TTT0 == 0x05))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMRQ /* \CMRQ */
                    BUF1 = 0xF0
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local3 = (BUF2 >> 0x04)
                    BUF0 = CMER /* \CMER */
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local6 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local4 = (CMER + One)
                    BUF0 = Local4
                    BUF1 = 0xFF
                    BUF2 = Zero
                    BUF3 = Zero
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x03E8)
                    MBUF = AAXB /* \AAXB */
                    Local7 = BUF2 /* \_SB_.PCI0.ITPM.BUF2 */
                    Local2 = (Local7 * 0x0100)
                    Local2 += Local6
                    PPI2 [Zero] = Zero
                    PPI2 [One] = Local3
                    If ((Local2 == 0xFFF0))
                    {
                        PPI2 [0x02] = 0xFFFFFFF0
                    }
                    ElseIf ((Local2 == 0xFFF1))
                    {
                        PPI2 [0x02] = 0xFFFFFFF1
                    }
                    Else
                    {
                        PPI2 [0x02] = Local2
                    }

                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (PPI2) /* \_SB_.PCI0.ITPM.PPI2 */
                }
                ElseIf ((TTT0 == 0x06))
                {
                    Return (Zero)
                }
                Else
                {
                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
            {
                Name (TTT1, Zero)
                TTT1 = ToInteger (Arg2)
                If ((TTT1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                ElseIf ((TTT1 == One))
                {
                    TAAX = AAXB /* \AAXB */
                    BUF0 = CMOR /* \CMOR */
                    BUF1 = 0xFE
                    BUF2 = ToInteger (DerefOf (Arg3 [Zero]))
                    BUF3 = One
                    AAXB = MBUF /* \_SB_.PCI0.ITPM.MBUF */
                    PSMI = 0xFB
                    Sleep (0x0BB8)
                    AAXB = TAAX /* \_SB_.PCI0.ITPM.TAAX */
                    Return (Zero)
                }
                Else
                {
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.SBRG.SIOS (Arg0)
            SPTS (Arg0)
            \_SB.PCI0.SBRG.SIAS (Arg0)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        \_SB.PCI0.SBRG.SIOW (Arg0)
        SWAK (Arg0)
        \_SB.PCI0.SBRG.ASOC.RDAT (Arg0)
        \_SB.PCI0.SBRG.ASOC.INGP ()
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : C4
[00Ah 0010   6]                       Oem ID : "050113"
[010h 0016   8]                 Oem Table ID : "FACP0946"
[018h 0024   4]                 Oem Revision : 20130501
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]                 FACS Address : C7F78000
[028h 0040   4]                 DSDT Address : C7F60460
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : E2
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000008FF
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : E3
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000001A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000C7F78000
[08Ch 0140   8]                 DSDT Address : 00000000C7F60460
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 20
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 20
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 20
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 C4 30 35 30 31 31 33  // FACP......050113
    0010: 46 41 43 50 30 39 34 36 01 05 13 20 4D 53 46 54  // FACP0946... MSFT
    0020: 97 00 00 00 00 80 F7 C7 60 04 F6 C7 01 01 09 00  // ........`.......
    0030: B0 00 00 00 E1 1E 00 E2 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 FF 08 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 E3  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 03 00 00  // e...........2...
    0070: A5 01 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 80 F7 C7 00 00 00 00 60 04 F6 C7  // ............`...
    0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 20 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // . ..............
    00B0: 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 20 00 00  // . ........... ..
    00E0: 20 08 00 00 00 00 00 00 01 20 00 00 00 00 00 00  //  ........ ......
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C1
[00Ah 0010   6]                       Oem ID : "050113"
[010h 0016   8]                 Oem Table ID : "OEMHPET "
[018h 0024   4]                 Oem Revision : 20130501
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   4]            Hardware Block ID : 00008300

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 C1 30 35 30 31 31 33  // HPET8.....050113
    0010: 4F 45 4D 48 50 45 54 20 01 05 13 20 4D 53 46 54  // OEMHPET ... MSFT
    0020: 97 00 00 00 00 83 00 00 00 08 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 02 14 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 75
[00Ah 0010   6]                       Oem ID : "050113"
[010h 0016   8]                 Oem Table ID : "OEMMCFG "
[018h 0024   4]                 Oem Revision : 20130501
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 75 30 35 30 31 31 33  // MCFG<....u050113
    0010: 4F 45 4D 4D 43 46 47 20 01 05 13 20 4D 53 46 54  // OEMMCFG ... MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


OEMB
----


SSDT
----
DefinitionBlock ("", "SSDT", 1, "A M I ", "POWERNOW", 0x00000001)
{
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)
    External (_PR_.P005, DeviceObj)
    External (_PR_.P006, DeviceObj)
    External (_PR_.P007, DeviceObj)
    External (_PR_.P008, DeviceObj)

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P001.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P002.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P003.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P004.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P005.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P006.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P007.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                0x00000002, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                0x00000003, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                0x00000004, 
                0x00000004
            }
        })
        Name (XPSS, Package (0x05)
        {
            Package (0x08)
            {
                0x00000C1C, 
                0x00003A57, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00002FDA, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000008FC, 
                0x00002184, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x0000076C, 
                0x000014AD, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x00000D85, 
                0x00000004, 
                0x00000004, 
                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000008
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P008.PPCV */
        }

        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000815, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
    }
}



