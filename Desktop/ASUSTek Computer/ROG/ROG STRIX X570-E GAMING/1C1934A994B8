
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200717
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000024  0x01  "AMD   "  "BIXBY   "  0x00001000  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x0000015E  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00001658  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 05)  PCCT  0x0000006E  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 06)  SSDT  0x00003ACB  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 07)  VFCT  0x0000E884  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 08)  SSDT  0x00003445  0x01  "AMD   "  "QOGIRN  "  0x00000001  "INTL"   0x20120913
 09)  CDIT  0x00000029  0x01  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 10)  IVRS  0x000000D0  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000000
 11)  DSDT  0x0000E2E7  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 12)  SSDT  0x000010A5  0x01  "AMD   "  "QOGIRTPX"  0x00000001  "INTL"   0x20120913
 13)  WSMT  0x00000028  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  SSDT  0x00005E09  0x02  "AMD   "  "AmdTable"  0x00000001  "AMD "   0x00000001
 15)  SSDT  0x00000164  0x02  "ALASKA"  "CPUSSDT "  0x01072009  "AMI "   0x01072009
 16)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 17)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x01000013
 18)  WPBT  0x0000003C  0x01  "ALASKA"  "A M I   "  0x00000001  "ASUS"   0x00000001
 19)  SSDT  0x00008C98  0x02  "AMD   "  "AmdTable"  0x00000002  "MSFT"   0x04000000
 20)  SSDT  0x0000052C  0x01  "AMD   "  "QOGIRNOI"  0x00000001  "INTL"   0x20120913
 21)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 22)  SSDT  0x0000022A  0x01  "AMD   "  "QOGIRDGP"  0x00000001  "INTL"   0x20120913
 23)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 24)  FACS  0x00000040  0x02
 25)  BGRT  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013

Found 25 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000015E
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : E3
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 04
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 06
[047h 0071   1]                Local Apic ID : 08
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 08
[04Fh 0079   1]                Local Apic ID : 0A
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 0A
[057h 0087   1]                Local Apic ID : 0C
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 0C
[05Fh 0095   1]                Local Apic ID : 10
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 0E
[067h 0103   1]                Local Apic ID : 12
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 10
[06Fh 0111   1]                Local Apic ID : 14
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 12
[077h 0119   1]                Local Apic ID : 18
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 14
[07Fh 0127   1]                Local Apic ID : 1A
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 16
[087h 0135   1]                Local Apic ID : 1C
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 01
[08Fh 0143   1]                Local Apic ID : 01
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 03
[097h 0151   1]                Local Apic ID : 03
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 05
[09Fh 0159   1]                Local Apic ID : 05
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 07
[0A7h 0167   1]                Local Apic ID : 09
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 00 [Processor Local APIC]
[0ADh 0173   1]                       Length : 08
[0AEh 0174   1]                 Processor ID : 09
[0AFh 0175   1]                Local Apic ID : 0B
[0B0h 0176   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B4h 0180   1]                Subtable Type : 00 [Processor Local APIC]
[0B5h 0181   1]                       Length : 08
[0B6h 0182   1]                 Processor ID : 0B
[0B7h 0183   1]                Local Apic ID : 0D
[0B8h 0184   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0BCh 0188   1]                Subtable Type : 00 [Processor Local APIC]
[0BDh 0189   1]                       Length : 08
[0BEh 0190   1]                 Processor ID : 0D
[0BFh 0191   1]                Local Apic ID : 11
[0C0h 0192   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C4h 0196   1]                Subtable Type : 00 [Processor Local APIC]
[0C5h 0197   1]                       Length : 08
[0C6h 0198   1]                 Processor ID : 0F
[0C7h 0199   1]                Local Apic ID : 13
[0C8h 0200   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CCh 0204   1]                Subtable Type : 00 [Processor Local APIC]
[0CDh 0205   1]                       Length : 08
[0CEh 0206   1]                 Processor ID : 11
[0CFh 0207   1]                Local Apic ID : 15
[0D0h 0208   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0D4h 0212   1]                Subtable Type : 00 [Processor Local APIC]
[0D5h 0213   1]                       Length : 08
[0D6h 0214   1]                 Processor ID : 13
[0D7h 0215   1]                Local Apic ID : 19
[0D8h 0216   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0DCh 0220   1]                Subtable Type : 00 [Processor Local APIC]
[0DDh 0221   1]                       Length : 08
[0DEh 0222   1]                 Processor ID : 15
[0DFh 0223   1]                Local Apic ID : 1B
[0E0h 0224   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0E4h 0228   1]                Subtable Type : 00 [Processor Local APIC]
[0E5h 0229   1]                       Length : 08
[0E6h 0230   1]                 Processor ID : 17
[0E7h 0231   1]                Local Apic ID : 1D
[0E8h 0232   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ECh 0236   1]                Subtable Type : 00 [Processor Local APIC]
[0EDh 0237   1]                       Length : 08
[0EEh 0238   1]                 Processor ID : 18
[0EFh 0239   1]                Local Apic ID : 00
[0F0h 0240   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0F4h 0244   1]                Subtable Type : 00 [Processor Local APIC]
[0F5h 0245   1]                       Length : 08
[0F6h 0246   1]                 Processor ID : 19
[0F7h 0247   1]                Local Apic ID : 00
[0F8h 0248   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0FCh 0252   1]                Subtable Type : 00 [Processor Local APIC]
[0FDh 0253   1]                       Length : 08
[0FEh 0254   1]                 Processor ID : 1A
[0FFh 0255   1]                Local Apic ID : 00
[100h 0256   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[104h 0260   1]                Subtable Type : 00 [Processor Local APIC]
[105h 0261   1]                       Length : 08
[106h 0262   1]                 Processor ID : 1B
[107h 0263   1]                Local Apic ID : 00
[108h 0264   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[10Ch 0268   1]                Subtable Type : 00 [Processor Local APIC]
[10Dh 0269   1]                       Length : 08
[10Eh 0270   1]                 Processor ID : 1C
[10Fh 0271   1]                Local Apic ID : 00
[110h 0272   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[114h 0276   1]                Subtable Type : 00 [Processor Local APIC]
[115h 0277   1]                       Length : 08
[116h 0278   1]                 Processor ID : 1D
[117h 0279   1]                Local Apic ID : 00
[118h 0280   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[11Ch 0284   1]                Subtable Type : 00 [Processor Local APIC]
[11Dh 0285   1]                       Length : 08
[11Eh 0286   1]                 Processor ID : 1E
[11Fh 0287   1]                Local Apic ID : 00
[120h 0288   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[124h 0292   1]                Subtable Type : 00 [Processor Local APIC]
[125h 0293   1]                       Length : 08
[126h 0294   1]                 Processor ID : 1F
[127h 0295   1]                Local Apic ID : 00
[128h 0296   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : FF
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 01 [I/O APIC]
[133h 0307   1]                       Length : 0C
[134h 0308   1]                  I/O Apic ID : 19
[135h 0309   1]                     Reserved : 00
[136h 0310   4]                      Address : FEC00000
[13Ah 0314   4]                    Interrupt : 00000000

[13Eh 0318   1]                Subtable Type : 01 [I/O APIC]
[13Fh 0319   1]                       Length : 0C
[140h 0320   1]                  I/O Apic ID : 1A
[141h 0321   1]                     Reserved : 00
[142h 0322   4]                      Address : FEC01000
[146h 0326   4]                    Interrupt : 00000018

[14Ah 0330   1]                Subtable Type : 02 [Interrupt Source Override]
[14Bh 0331   1]                       Length : 0A
[14Ch 0332   1]                          Bus : 00
[14Dh 0333   1]                       Source : 00
[14Eh 0334   4]                    Interrupt : 00000002
[152h 0338   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[154h 0340   1]                Subtable Type : 02 [Interrupt Source Override]
[155h 0341   1]                       Length : 0A
[156h 0342   1]                          Bus : 00
[157h 0343   1]                       Source : 09
[158h 0344   4]                    Interrupt : 00000009
[15Ch 0348   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 350 (0x15E)

    0000: 41 50 49 43 5E 01 00 00 03 E3 41 4C 41 53 4B 41  // APIC^.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 02 02 01 00 00 00 00 08 04 04  // ................
    0040: 01 00 00 00 00 08 06 08 01 00 00 00 00 08 08 0A  // ................
    0050: 01 00 00 00 00 08 0A 0C 01 00 00 00 00 08 0C 10  // ................
    0060: 01 00 00 00 00 08 0E 12 01 00 00 00 00 08 10 14  // ................
    0070: 01 00 00 00 00 08 12 18 01 00 00 00 00 08 14 1A  // ................
    0080: 01 00 00 00 00 08 16 1C 01 00 00 00 00 08 01 01  // ................
    0090: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 05 05  // ................
    00A0: 01 00 00 00 00 08 07 09 01 00 00 00 00 08 09 0B  // ................
    00B0: 01 00 00 00 00 08 0B 0D 01 00 00 00 00 08 0D 11  // ................
    00C0: 01 00 00 00 00 08 0F 13 01 00 00 00 00 08 11 15  // ................
    00D0: 01 00 00 00 00 08 13 19 01 00 00 00 00 08 15 1B  // ................
    00E0: 01 00 00 00 00 08 17 1D 01 00 00 00 00 08 18 00  // ................
    00F0: 00 00 00 00 00 08 19 00 00 00 00 00 00 08 1A 00  // ................
    0100: 00 00 00 00 00 08 1B 00 00 00 00 00 00 08 1C 00  // ................
    0110: 00 00 00 00 00 08 1D 00 00 00 00 00 00 08 1E 00  // ................
    0120: 00 00 00 00 00 08 1F 00 00 00 00 00 04 06 FF 05  // ................
    0130: 00 01 01 0C 19 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    0140: 1A 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    0150: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 92
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000C6A16018
[030h 0048   4]                Image OffsetX : 00000240
[034h 0052   4]                Image OffsetY : 000000C4

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 92 41 4C 41 53 4B 41  // BGRT8.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 00 00 18 60 A1 C6 00 00 00 00  // .........`......
    0030: 40 02 00 00 C4 00 00 00                          // @.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E7
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 E7 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00001658
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2A
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 5720 (0x1658)

    0000: 43 52 41 54 58 16 00 00 01 2A 41 4D 44 00 00 00  // CRATX....*AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 01 00 00 00 59 00 00 00 01 00 00 00 00 00 00 00  // ....Y...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 18 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0060: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0090: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    00A0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    00D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    00E0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0110: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0120: 00 00 00 00 3F 00 00 00 00 00 00 00 00 00 00 00  // ....?...........
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0140: 00 00 00 00 00 40 00 00 03 01 40 00 10 00 01 00  // .....@....@.....
    0150: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0160: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0180: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0190: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    01A0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    01D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    01E0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0200: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0210: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0220: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0240: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0250: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0260: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0280: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0290: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    02A0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02C0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    02D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    02E0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0310: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0320: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0340: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0350: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0360: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0380: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0390: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    03A0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03C0: 00 00 00 00 00 40 00 00 03 01 40 00 10 00 01 00  // .....@....@.....
    03D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    03E0: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0400: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0410: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0420: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0440: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0450: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0460: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0480: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0490: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    04A0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    04D0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    04E0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0500: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0510: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0520: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0540: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0550: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0560: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0580: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0590: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    05A0: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    05D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    05E0: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0600: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0610: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0620: 10 00 00 00 00 F0 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0640: 00 00 00 00 00 40 00 00 03 01 40 00 10 00 01 00  // .....@....@.....
    0650: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0660: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0680: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0690: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    06A0: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    06D0: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    06E0: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0710: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    0720: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0740: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0750: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0760: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0780: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0790: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    07A0: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07C0: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    07D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    07E0: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0800: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0810: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0820: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0840: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0850: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0860: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0880: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0890: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    08A0: 18 00 00 00 00 00 FC 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08C0: 00 00 00 00 00 40 00 00 03 01 40 00 10 00 01 00  // .....@....@.....
    08D0: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    08E0: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0900: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0910: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    0920: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0940: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0950: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0960: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0980: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0990: 00 00 00 00 00 00 00 00 02 40 00 00 0B 00 00 00  // .........@......
    09A0: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09C0: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    09D0: 00 00 00 00 00 00 00 00 02 40 00 00 0D 00 00 00  // .........@......
    09E0: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A00: 00 00 00 00 20 00 00 00 01 01 40 00 08 00 01 00  // .... .....@.....
    0A10: 00 00 00 00 00 00 00 00 02 40 00 00 0F 00 00 00  // .........@......
    0A20: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A40: 00 00 00 00 00 02 00 00 02 01 40 00 08 02 01 00  // ..........@.....
    0A50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0A60: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0A90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0AA0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0AD0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0AE0: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0B10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0B20: 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0B50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0B60: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0B90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0BA0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0BD0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0BE0: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0C10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0C20: 02 00 00 00 0C 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0C50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0C60: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0C90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0CA0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0CD0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0CE0: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0D10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0D20: 04 00 00 00 30 00 00 00 00 00 00 00 00 00 00 00  // ....0...........
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0D50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0D60: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0D90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0DA0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0DD0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0DE0: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0E10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0E20: 08 00 00 00 C0 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0E50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0E60: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0E90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0EA0: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0ED0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0EE0: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F00: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    0F10: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    0F20: 0A 00 00 00 00 03 00 00 00 00 00 00 00 00 00 00  // ................
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F40: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    0F50: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    0F60: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0F70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F80: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    0F90: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    0FA0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0FB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0FC0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    0FD0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    0FE0: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    0FF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1000: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1010: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1020: 0C 00 00 00 00 0C 00 00 00 00 00 00 00 00 00 00  // ................
    1030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1040: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1050: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1060: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1080: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1090: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    10A0: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    10B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    10C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    10D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    10E0: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    10F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1100: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1110: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1120: 10 00 00 00 00 30 00 00 00 00 00 00 00 00 00 00  // .....0..........
    1130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1140: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1150: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1160: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1180: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1190: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    11A0: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    11B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    11C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    11D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    11E0: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    11F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1200: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1210: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1220: 12 00 00 00 00 C0 00 00 00 00 00 00 00 00 00 00  // ................
    1230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1240: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1250: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1260: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1280: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1290: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    12A0: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    12B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    12C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    12D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    12E0: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    12F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1300: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1310: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1320: 14 00 00 00 00 00 03 00 00 00 00 00 00 00 00 00  // ................
    1330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1340: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1350: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1360: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1380: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1390: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    13A0: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    13B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    13C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    13D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    13E0: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    13F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1400: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1410: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1420: 18 00 00 00 00 00 0C 00 00 00 00 00 00 00 00 00  // ................
    1430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1440: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1450: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1460: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1480: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1490: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    14A0: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    14B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    14C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    14D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    14E0: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    14F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1500: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1510: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1520: 1A 00 00 00 00 00 30 00 00 00 00 00 00 00 00 00  // ......0.........
    1530: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1540: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1550: 00 00 00 00 00 00 00 00 03 40 00 00 0B 00 00 00  // .........@......
    1560: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1580: 00 00 00 00 01 00 00 00 FF 40 00 00 FF 40 00 00  // .........@...@..
    1590: 0F 40 00 00 00 00 00 00 03 40 00 00 0D 00 00 00  // .@.......@......
    15A0: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    15B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    15C0: 00 00 00 00 01 00 00 00 00 00 FF 40 00 00 FF 40  // ...........@...@
    15D0: 00 00 0F 40 00 00 00 00 03 40 00 00 AB 00 00 00  // ...@.....@......
    15E0: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    15F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1600: 00 00 00 00 02 00 00 00 04 08 00 00 08 08 00 00  // ................
    1610: 00 40 00 00 00 00 00 00 03 40 00 00 AD 00 00 00  // .@.......@......
    1620: 1C 00 00 00 00 00 C0 00 00 00 00 00 00 00 00 00  // ................
    1630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    1640: 00 00 00 00 02 00 00 00 00 00 08 04 00 00 08 04  // ................
    1650: 00 00 00 00 00 00 00 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (SP1O, 0x2E)
    Name (IOHW, 0x0290)
    Name (IOHB, 0x0290)
    Name (IOHL, 0x10)
    Name (PEBL, 0x08000000)
    Name (ACPM, One)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (SPMR, 0xFED80300)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (NBTS, 0x5000)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x08000000)
    Name (SRIO, Zero)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xCAF64C98)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (AMWV, 0x09)
    Name (SMIM, 0x80000009)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC03000)
    Name (CNSB, Zero)
    Name (SMIP, 0xB2)
    Name (IO1B, Zero)
    Name (IO1L, Zero)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0200)
    Name (IO3L, 0x20)
    Name (IO4B, Zero)
    Name (IO4L, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (\)
    {
        Device (AWW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AWW")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x13, 0x12, 0x02, 0xC3, 0xBC, 0xD0, 0xA2, 0x41,  // .......A
                /* 0008 */  0xBA, 0x17, 0x81, 0x6C, 0xD5, 0xED, 0x77, 0x44,  // ...l..wD
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, NotSerialized)
            {
                Local0 = \_SB.CTRL
                Return (Local0)
            }

            Name (WQMO, Buffer (0x0241)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x31, 0x02, 0x00, 0x00, 0x9C, 0x04, 0x00, 0x00,  // 1.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5A, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // (Z.....B
                /* 0020 */  0x20, 0xA4, 0x02, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
                /* 0028 */  0x45, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // E....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x44, 0x01,  // J.C...D.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xC9, 0x02,  // .|...(..
                /* 0068 */  0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88, 0x6C, 0x34,  // ,.....l4
                /* 0070 */  0x4E, 0x50, 0x36, 0x34, 0x4A, 0x06, 0x84, 0x3C,  // NP64J..<
                /* 0078 */  0x0B, 0xB0, 0x0E, 0x4C, 0x08, 0xEC, 0x5E, 0x80,  // ...L..^.
                /* 0080 */  0x43, 0x01, 0xCE, 0x04, 0x08, 0x13, 0xA0, 0x4C,  // C......L
                /* 0088 */  0x80, 0x31, 0x08, 0x02, 0xD3, 0xD6, 0x70, 0x04,  // .1....p.
                /* 0090 */  0x54, 0x21, 0x98, 0x50, 0xCE, 0x25, 0x52, 0x83,  // T!.P.%R.
                /* 0098 */  0x60, 0x42, 0x09, 0x14, 0x24, 0x4C, 0x6F, 0x28,  // `B..$Lo(
                /* 00A0 */  0x12, 0x07, 0x22, 0x6D, 0x78, 0xC2, 0x6C, 0x4D,  // .."mx.lM
                /* 00A8 */  0x80, 0x45, 0x0C, 0x41, 0x45, 0x08, 0x1A, 0xA1,  // .E.AE...
                /* 00B0 */  0xFD, 0x41, 0x90, 0x58, 0x0B, 0xD6, 0x50, 0x1D,  // .A.X..P.
                /* 00B8 */  0x69, 0x34, 0xA8, 0xE1, 0x25, 0x38, 0x5C, 0x0F,  // i4..%8\.
                /* 00C0 */  0xF5, 0x1C, 0x3B, 0x17, 0x20, 0x7D, 0x92, 0x02,  // ..;. }..
                /* 00C8 */  0x39, 0xC8, 0x73, 0xAB, 0x73, 0x9C, 0x04, 0x24,  // 9.s.s..$
                /* 00D0 */  0x81, 0xB1, 0x12, 0x74, 0x30, 0x70, 0x28, 0xAE,  // ...t0p(.
                /* 00D8 */  0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0, 0x50,  // .5..e..P
                /* 00E0 */  0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21, 0x32,  // C.@...!2
                /* 00E8 */  0x40, 0xCF, 0xEE, 0x68, 0x30, 0x07, 0x00, 0x8F,  // @..h0...
                /* 00F0 */  0xEC, 0x64, 0xDE, 0x03, 0x4A, 0x15, 0x60, 0x76,  // .d..J.`v
                /* 00F8 */  0xCC, 0x9A, 0x5A, 0x82, 0xE3, 0x31, 0xF4, 0xE9,  // ..Z..1..
                /* 0100 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                /* 0108 */  0x46, 0x66, 0x68, 0xCF, 0xF4, 0xB4, 0x62, 0x86,  // Ffh...b.
                /* 0110 */  0x3C, 0xFC, 0xC3, 0x62, 0x62, 0x21, 0xF4, 0x41,  // <..bb!.A
                /* 0118 */  0xF0, 0x78, 0xE0, 0xFD, 0xFF, 0xC7, 0x03, 0x1E,  // .x......
                /* 0120 */  0xC5, 0x67, 0x02, 0x21, 0xBC, 0x12, 0xC4, 0xF6,  // .g.!....
                /* 0128 */  0x80, 0x12, 0x94, 0x07, 0x8C, 0x1E, 0x90, 0xFD,  // ........
                /* 0130 */  0x0A, 0x40, 0x08, 0x5E, 0xE6, 0x88, 0xE4, 0x14,  // .@.^....
                /* 0138 */  0x41, 0x63, 0xF2, 0xE4, 0x5E, 0x0D, 0x42, 0x3C,  // Ac..^.B<
                /* 0140 */  0x24, 0x14, 0x3E, 0x00, 0xCD, 0xEA, 0x31, 0x81,  // $.>...1.
                /* 0148 */  0x11, 0x14, 0x09, 0x8F, 0x12, 0x03, 0x8F, 0x3A,  // .......:
                /* 0150 */  0x04, 0x44, 0x3E, 0x9A, 0x73, 0x09, 0x7F, 0x34,  // .D>.s..4
                /* 0158 */  0x51, 0x4E, 0xE1, 0x70, 0x7C, 0x62, 0x30, 0x42,  // QN.p|b0B
                /* 0160 */  0xF8, 0x72, 0x0F, 0x0E, 0x44, 0xF3, 0x7C, 0x34,  // .r..D.|4
                /* 0168 */  0x89, 0x33, 0x7A, 0x17, 0xF0, 0xD9, 0x80, 0x1D,  // .3z.....
                /* 0170 */  0x2E, 0x1C, 0x89, 0x42, 0x36, 0x16, 0xEA, 0xA1,  // ...B6...
                /* 0178 */  0x52, 0x61, 0x40, 0x9A, 0x78, 0xDC, 0x98, 0x47,  // Ra@.x..G
                /* 0180 */  0xD1, 0xFB, 0x78, 0x28, 0xCA, 0xEB, 0x01, 0x83,  // ..x(....
                /* 0188 */  0x38, 0x29, 0x8F, 0x4E, 0xF0, 0x14, 0xC2, 0x12,  // 8).N....
                /* 0190 */  0x48, 0xE8, 0x90, 0x3C, 0x02, 0x47, 0x06, 0xA3,  // H..<.G..
                /* 0198 */  0x20, 0x1E, 0xBF, 0xE3, 0x40, 0xC8, 0xC9, 0x51,  //  ...@..Q
                /* 01A0 */  0x00, 0x35, 0x3A, 0xDF, 0x04, 0x3C, 0xAE, 0x53,  // .5:..<.S
                /* 01A8 */  0x3A, 0x8C, 0x03, 0x39, 0x8B, 0x28, 0xAF, 0x0C,  // :..9.(..
                /* 01B0 */  0x26, 0x30, 0xCE, 0x23, 0x03, 0xAC, 0x11, 0x1E,  // &0.#....
                /* 01B8 */  0xCE, 0xD9, 0x79, 0x22, 0x86, 0x33, 0xA4, 0xE1,  // ..y".3..
                /* 01C0 */  0xF8, 0x55, 0xE0, 0x8D, 0x22, 0x01, 0x3F, 0x12,  // .U..".?.
                /* 01C8 */  0xC0, 0xBF, 0x6E, 0xF8, 0x40, 0x70, 0x0A, 0x8F,  // ..n.@p..
                /* 01D0 */  0x1A, 0x6F, 0x19, 0x09, 0x2C, 0xF0, 0x48, 0x00,  // .o..,.H.
                /* 01D8 */  0x0A, 0x20, 0x5F, 0x02, 0xAC, 0xF4, 0x20, 0x40,  // . _... @
                /* 01E0 */  0xE7, 0x10, 0x22, 0x4C, 0x34, 0x13, 0xFC, 0xFF,  // .."L4...
                /* 01E8 */  0xC3, 0x73, 0xC1, 0x63, 0xA5, 0xB2, 0xC6, 0x85,  // .s.c....
                /* 01F0 */  0x1A, 0xAA, 0x4F, 0x07, 0x0C, 0xFB, 0x1D, 0xC0,  // ..O.....
                /* 01F8 */  0xA2, 0x67, 0xA8, 0x1B, 0xC1, 0x41, 0xBD, 0x3D,  // .g...A.=
                /* 0200 */  0x58, 0xA2, 0x53, 0xA9, 0x4E, 0x61, 0x3D, 0x52,  // X.S.Na=R
                /* 0208 */  0x0E, 0x6B, 0xB4, 0xB0, 0x07, 0xFC, 0xE4, 0xE0,  // .k......
                /* 0210 */  0x5B, 0x87, 0x67, 0x66, 0x8C, 0xB0, 0x1E, 0xAD,  // [.gf....
                /* 0218 */  0x15, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,  // ......U.
                /* 0220 */  0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,  // 25.4...R
                /* 0228 */  0x63, 0xC6, 0x4E, 0x22, 0x8E, 0xF1, 0x12, 0xD0,  // c.N"....
                /* 0230 */  0x58, 0x2C, 0x62, 0x39, 0x02, 0xB1, 0x74, 0x0A,  // X,b9..t.
                /* 0238 */  0x19, 0x01, 0x51, 0x10, 0x10, 0x01, 0xF9, 0xFF,  // ..Q.....
                /* 0240 */  0x0F                                             // .
            })
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x18
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x20
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x24
            }
        })
        Name (PD30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR30, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR31, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2C
            }
        })
        Name (PD22, Package (0x00){})
        Name (AR22, Package (0x00){})
        Name (PD23, Package (0x00){})
        Name (AR23, Package (0x00){})
        Name (PD24, Package (0x00){})
        Name (AR24, Package (0x00){})
        Name (PD25, Package (0x00){})
        Name (AR25, Package (0x00){})
        Name (PD26, Package (0x00){})
        Name (AR26, Package (0x00){})
        Name (PD27, Package (0x00){})
        Name (AR27, Package (0x00){})
        Name (PD28, Package (0x00){})
        Name (AR28, Package (0x00){})
        Name (PD29, Package (0x00){})
        Name (AR29, Package (0x00){})
        Name (PD2A, Package (0x00){})
        Name (AR2A, Package (0x00){})
        Name (PD2B, Package (0x00){})
        Name (AR2B, Package (0x00){})
        Name (PD2C, Package (0x00){})
        Name (AR2C, Package (0x00){})
        Name (PD00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x13)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                One, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD21, Package (0x08)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKH, 
                Zero
            }
        })
        Name (AR21, Package (0x08)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x1F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xD0000000)
            Name (MBL, 0x30000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If ((!SRIO && !CNSB))
                    {
                        CTRL &= 0x1A
                    }

                    If ((SHPC == One))
                    {
                        CTRL |= 0x1D
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14600000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D003)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (D005)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (D007)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D009)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00B)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00F)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D011)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (X161)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (X162)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D015)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D017)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D019)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01B)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D01F)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP10)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (D021)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP11)
            {
                Name (_ADR, 0x00050002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }
            }

            Device (GP12)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }

                Device (D024)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP13)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPB, 0xFD200000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._BAS, PBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP13.APSP._Y0F._LEN, PLEN)  // _LEN: Length
                        PBAS = PSPB /* \_SB_.PCI0.GP13.APSP.PSPB */
                        PLEN = 0x00100000
                        Return (CRS) /* \_SB_.PCI0.GP13.APSP.CRS_ */
                    }
                }
            }

            Device (GP30)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR30) /* \_SB_.AR30 */
                    }

                    Return (PD30) /* \_SB_.PD30 */
                }

                Device (SAT0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (GP31)
            {
                Name (_ADR, 0x00080003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR31) /* \_SB_.AR31 */
                    }

                    Return (PD31) /* \_SB_.PD31 */
                }

                Device (SAT1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (D02B)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y10)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y13)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y10._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y10._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y13._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y17)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y17._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        One, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        Return (0x0105D041)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x2C), 
                        CR2C,   8, 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.SBRG.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y25)
                        IRQ (Edge, ActiveLow, Shared, _Y23)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y24)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y23._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y24._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.SBRG.SIO1._Y25._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.SBRG.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAT = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.SBRG.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Local2 = Arg1
                            If ((Local2 > Zero))
                            {
                                Local2 -= One
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Local2 = Arg1
                        If ((Local2 > Zero))
                        {
                            Local2 -= One
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            If ((Arg0 == One))
                            {
                                OPT6 = Zero
                                OPT7 = Zero
                                If (KBFG)
                                {
                                    OPT6 |= 0x10
                                }
                                Else
                                {
                                    OPT6 &= 0xEF
                                }

                                If (MSFG)
                                {
                                    OPT6 |= 0x20
                                }
                                Else
                                {
                                    OPT6 &= 0xDF
                                }

                                OPT3 = 0xFF
                                OPT4 = 0xFF
                                Local0 = (One | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                                OPT2 = Local0
                            }

                            If ((Arg0 >= 0x03))
                            {
                                RGE0 &= 0x9F
                                Local0 = RGE3 /* \_SB_.PCI0.SBRG.SIO1.RGE3 */
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    RGE0 |= 0x41
                                }
                                Else
                                {
                                    RGE0 &= 0xBE
                                }

                                If (MSFG)
                                {
                                    RGE6 &= 0x7F
                                    RGE0 |= 0x22
                                }
                                Else
                                {
                                    RGE0 &= 0xDD
                                }
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        OPT3 = 0xFF
                        OPT6 &= 0xCF
                        OPT2 &= 0xFE
                        RGE0 &= 0xBE
                        RGE0 &= 0xDD
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x09)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (ACPI)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (LDN, 0x0A)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SP80)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (LDN, 0x14)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SFED)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (LDN, 0x15)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (DSLP)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Name (LDN, 0x16)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (BXBR)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PD20) /* \_SB_.PD20 */
                }

                Device (BYUP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (BYD0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (BYS0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD1)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (BYS1)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD2)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (BYS2)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD3)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (BYS3)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD4)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (BYS4)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD5)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                        Device (BYS5)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD6)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Device (BYS6)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD7)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Device (BYS7)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                        }
                    }

                    Device (BYD8)
                    {
                        Name (_ADR, 0x00080000)  // _ADR: Address
                        Device (XHC1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Name (B1U2, Package (0x06)
                                {
                                    0x14, 
                                    0x15, 
                                    0x16, 
                                    0x17, 
                                    0x18, 
                                    0x19
                                })
                                Name (B1U3, Package (0x04)
                                {
                                    0x14, 
                                    0x15, 
                                    0x16, 
                                    0x17
                                })
                                Name (B1V2, Package (0x06)
                                {
                                    One, 
                                    One, 
                                    One, 
                                    One, 
                                    Zero, 
                                    Zero
                                })
                                Name (B1V3, Package (0x04)
                                {
                                    One, 
                                    One, 
                                    One, 
                                    One
                                })
                                Name (BH1P, Package (0x04)
                                {
                                    0x1F, 
                                    0x20, 
                                    0x21, 
                                    0x22
                                })
                                Name (BH1V, Package (0x04)
                                {
                                    One, 
                                    One, 
                                    Zero, 
                                    Zero
                                })
                                Method (GPLD, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x01)
                                    {
                                        Buffer (0x14){}
                                    })
                                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                    REV = 0x02
                                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                    VISI = Arg0
                                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                    GPOS = Arg1
                                    Return (PCKG) /* \_SB_.PCI0.BXBR.BYUP.BYD8.XHC1.RHUB.GPLD.PCKG */
                                }

                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V2 [Zero]), DerefOf (B1U2 [Zero])))
                                    }
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        One, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V2 [One]), DerefOf (B1U2 [One])))
                                    }
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V2 [0x02]), DerefOf (B1U2 [0x02])))
                                    }
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V2 [0x03]), DerefOf (B1U2 [0x03])))
                                    }
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        Zero, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    Device (HS11)
                                    {
                                        Name (_ADR, One)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0x03, 
                                            Zero, 
                                            Zero
                                        })
                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (GPLD (DerefOf (BH1V [Zero]), DerefOf (BH1P [Zero])))
                                        }
                                    }

                                    Device (HS12)
                                    {
                                        Name (_ADR, 0x02)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0x03, 
                                            Zero, 
                                            Zero
                                        })
                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (GPLD (DerefOf (BH1V [One]), DerefOf (BH1P [One])))
                                        }
                                    }

                                    Device (HS13)
                                    {
                                        Name (_ADR, 0x03)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0x03, 
                                            Zero, 
                                            Zero
                                        })
                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (GPLD (DerefOf (BH1V [0x02]), DerefOf (BH1P [0x02])))
                                        }
                                    }

                                    Device (HS14)
                                    {
                                        Name (_ADR, 0x04)  // _ADR: Address
                                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                        {
                                            0xFF, 
                                            0x03, 
                                            Zero, 
                                            Zero
                                        })
                                        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                        {
                                            Return (GPLD (DerefOf (BH1V [0x03]), DerefOf (BH1P [0x03])))
                                        }
                                    }
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V2 [0x05]), DerefOf (B1U2 [0x05])))
                                    }
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V3 [Zero]), DerefOf (B1U3 [Zero])))
                                    }
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        One, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V3 [One]), DerefOf (B1U3 [One])))
                                    }
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V3 [0x02]), DerefOf (B1U3 [0x02])))
                                    }
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B1V3 [0x03]), DerefOf (B1U3 [0x03])))
                                    }
                                }
                            }
                        }

                        Device (XHC0)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Device (RHUB)
                            {
                                Name (_ADR, Zero)  // _ADR: Address
                                Name (B0U2, Package (0x06)
                                {
                                    0x0A, 
                                    0x0B, 
                                    0x0C, 
                                    0x0D, 
                                    0x0E, 
                                    0x0F
                                })
                                Name (B0U3, Package (0x04)
                                {
                                    0x0A, 
                                    0x0B, 
                                    0x0C, 
                                    0x0C
                                })
                                Name (B0V2, Package (0x06)
                                {
                                    One, 
                                    One, 
                                    One, 
                                    Zero, 
                                    One, 
                                    One
                                })
                                Name (B0V3, Package (0x04)
                                {
                                    One, 
                                    One, 
                                    One, 
                                    One
                                })
                                Method (GPLD, 2, Serialized)
                                {
                                    Name (PCKG, Package (0x01)
                                    {
                                        Buffer (0x14){}
                                    })
                                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                    REV = 0x02
                                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                    VISI = Arg0
                                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                    GPOS = Arg1
                                    Return (PCKG) /* \_SB_.PCI0.BXBR.BYUP.BYD8.XHC0.RHUB.GPLD.PCKG */
                                }

                                Device (PRT1)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V2 [Zero]), DerefOf (B0U2 [Zero])))
                                    }
                                }

                                Device (PRT2)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V2 [One]), DerefOf (B0U2 [One])))
                                    }
                                }

                                Device (PRT3)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        One, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V2 [0x02]), DerefOf (B0U2 [0x02])))
                                    }
                                }

                                Device (PRT4)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V2 [0x03]), DerefOf (B0U2 [0x03])))
                                    }
                                }

                                Device (PRT5)
                                {
                                    Name (_ADR, 0x05)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V2 [0x04]), DerefOf (B0U2 [0x04])))
                                    }
                                }

                                Device (PRT6)
                                {
                                    Name (_ADR, 0x06)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V2 [0x05]), DerefOf (B0U2 [0x05])))
                                    }
                                }

                                Device (PRT7)
                                {
                                    Name (_ADR, 0x07)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V3 [Zero]), DerefOf (B0U3 [Zero])))
                                    }
                                }

                                Device (PRT8)
                                {
                                    Name (_ADR, 0x08)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        0xFF, 
                                        0x03, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V3 [One]), DerefOf (B0U3 [One])))
                                    }
                                }

                                Device (PRT9)
                                {
                                    Name (_ADR, 0x09)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        One, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V3 [0x02]), DerefOf (B0U3 [0x02])))
                                    }
                                }

                                Device (PT10)
                                {
                                    Name (_ADR, 0x0A)  // _ADR: Address
                                    Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                    {
                                        One, 
                                        0x0A, 
                                        Zero, 
                                        Zero
                                    })
                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (GPLD (DerefOf (B0V3 [0x03]), DerefOf (B0U3 [0x03])))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8.X161, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9.X162, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP10, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP11, 0x02) // Device Wake
            Notify (\_SB.PCI0.BXBR, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP12, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP13.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP30, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP31, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            MPTS (Arg0, \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0), SPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB.PCI0.SBRG)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x02)  // _GPE: General Purpose Events
            Name (REGC, Zero)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    REGC = Arg1
                }
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040001)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040002)
            }

            Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040003)
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA002000B)
            }

            Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0021000)
            }

            Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040087)
            }

            Method (_Q88, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                \AMW0.AMWN (0xA0040088)
            }

            Method (ECAV, 0, NotSerialized)
            {
                If ((REGC == One))
                {
                    Return (One)
                }

                Return (REGC) /* \_SB_.PCI0.SBRG.EC0_.REGC */
            }

            OperationRegion (ECOR, EmbeddedControl, Zero, 0x0100)
            Field (ECOR, ByteAcc, Lock, Preserve)
            {
                EB00,   8, 
                EB01,   8, 
                EB02,   8, 
                EB03,   8, 
                EB04,   8, 
                EB05,   8, 
                EB06,   8, 
                EB07,   8, 
                EB08,   8, 
                EB09,   8, 
                EB0A,   8, 
                EB0B,   8, 
                EB0C,   8, 
                EB0D,   8, 
                EB0E,   8, 
                EB0F,   8, 
                EB10,   8, 
                EB11,   8, 
                EB12,   8, 
                EB13,   8, 
                EB14,   8, 
                EB15,   8, 
                EB16,   8, 
                EB17,   8, 
                EB18,   8, 
                EB19,   8, 
                EB1A,   8, 
                EB1B,   8, 
                EB1C,   8, 
                EB1D,   8, 
                EB1E,   8, 
                EB1F,   8, 
                EB20,   8, 
                EB21,   8, 
                EB22,   8, 
                EB23,   8, 
                EB24,   8, 
                EB25,   8, 
                EB26,   8, 
                EB27,   8, 
                EB28,   8, 
                EB29,   8, 
                EB2A,   8, 
                EB2B,   8, 
                EB2C,   8, 
                EB2D,   8, 
                EB2E,   8, 
                EB2F,   8, 
                EB30,   8, 
                EB31,   8, 
                EB32,   8, 
                EB33,   8, 
                EB34,   8, 
                EB35,   8, 
                EB36,   8, 
                EB37,   8, 
                EB38,   8, 
                EB39,   8, 
                EB3A,   8, 
                EB3B,   8, 
                EB3C,   8, 
                EB3D,   8, 
                EB3E,   8, 
                EB3F,   8, 
                EB40,   8, 
                EB41,   8, 
                EB42,   8, 
                EB43,   8, 
                EB44,   8, 
                EB45,   8, 
                EB46,   8, 
                EB47,   8, 
                EB48,   8, 
                EB49,   8, 
                EB4A,   8, 
                EB4B,   8, 
                EB4C,   8, 
                EB4D,   8, 
                EB4E,   8, 
                EB4F,   8, 
                EB50,   8, 
                EB51,   8, 
                EB52,   8, 
                EB53,   8, 
                EB54,   8, 
                EB55,   8, 
                EB56,   8, 
                EB57,   8, 
                EB58,   8, 
                EB59,   8, 
                EB5A,   8, 
                EB5B,   8, 
                EB5C,   8, 
                EB5D,   8, 
                EB5E,   8, 
                EB5F,   8, 
                EB60,   8, 
                EB61,   8, 
                EB62,   8, 
                EB63,   8, 
                EB64,   8, 
                EB65,   8, 
                EB66,   8, 
                EB67,   8, 
                EB68,   8, 
                EB69,   8, 
                EB6A,   8, 
                EB6B,   8, 
                EB6C,   8, 
                EB6D,   8, 
                EB6E,   8, 
                EB6F,   8, 
                EB70,   8, 
                EB71,   8, 
                EB72,   8, 
                EB73,   8, 
                EB74,   8, 
                EB75,   8, 
                EB76,   8, 
                EB77,   8, 
                EB78,   8, 
                EB79,   8, 
                EB7A,   8, 
                EB7B,   8, 
                EB7C,   8, 
                EB7D,   8, 
                EB7E,   8, 
                EB7F,   8, 
                EB80,   8, 
                EB81,   8, 
                EB82,   8, 
                EB83,   8, 
                EB84,   8, 
                EB85,   8, 
                EB86,   8, 
                EB87,   8, 
                EB88,   8, 
                EB89,   8, 
                EB8A,   8, 
                EB8B,   8, 
                EB8C,   8, 
                EB8D,   8, 
                EB8E,   8, 
                EB8F,   8, 
                EB90,   8, 
                EB91,   8, 
                EB92,   8, 
                EB93,   8, 
                EB94,   8, 
                EB95,   8, 
                EB96,   8, 
                EB97,   8, 
                EB98,   8, 
                EB99,   8, 
                EB9A,   8, 
                EB9B,   8, 
                EB9C,   8, 
                EB9D,   8, 
                EB9E,   8, 
                EB9F,   8, 
                EBA0,   8, 
                EBA1,   8, 
                EBA2,   8, 
                EBA3,   8, 
                EBA4,   8, 
                EBA5,   8, 
                EBA6,   8, 
                EBA7,   8, 
                EBA8,   8, 
                EBA9,   8, 
                EBAA,   8, 
                EBAB,   8, 
                EBAC,   8, 
                EBAD,   8, 
                EBAE,   8, 
                EBAF,   8, 
                EBB0,   8, 
                EBB1,   8, 
                EBB2,   8, 
                EBB3,   8, 
                EBB4,   8, 
                EBB5,   8, 
                EBB6,   8, 
                EBB7,   8, 
                EBB8,   8, 
                EBB9,   8, 
                EBBA,   8, 
                EBBB,   8, 
                EBBC,   8, 
                EBBD,   8, 
                EBBE,   8, 
                EBBF,   8, 
                EBC0,   8, 
                EBC1,   8, 
                EBC2,   8, 
                EBC3,   8, 
                EBC4,   8, 
                EBC5,   8, 
                EBC6,   8, 
                EBC7,   8, 
                EBC8,   8, 
                EBC9,   8, 
                EBCA,   8, 
                EBCB,   8, 
                EBCC,   8, 
                EBCD,   8, 
                EBCE,   8, 
                EBCF,   8, 
                EBD0,   8, 
                EBD1,   8, 
                EBD2,   8, 
                EBD3,   8, 
                EBD4,   8, 
                EBD5,   8, 
                EBD6,   8, 
                EBD7,   8, 
                EBD8,   8, 
                EBD9,   8, 
                EBDA,   8, 
                EBDB,   8, 
                EBDC,   8, 
                EBDD,   8, 
                EBDE,   8, 
                EBDF,   8, 
                EBE0,   8, 
                EBE1,   8, 
                EBE2,   8, 
                EBE3,   8, 
                EBE4,   8, 
                EBE5,   8, 
                EBE6,   8, 
                EBE7,   8, 
                EBE8,   8, 
                EBE9,   8, 
                EBEA,   8, 
                EBEB,   8, 
                EBEC,   8, 
                EBED,   8, 
                EBEE,   8, 
                EBEF,   8, 
                EBF0,   8, 
                EBF1,   8, 
                EBF2,   8, 
                EBF3,   8, 
                EBF4,   8, 
                EBF5,   8, 
                EBF6,   8, 
                EBF7,   8, 
                EBF8,   8, 
                EBF9,   8, 
                EBFA,   8, 
                EBFB,   8, 
                EBFC,   8, 
                EBFD,   8, 
                EBFE,   8, 
                EBFF,   8
            }

            Method (EC0X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        If (Arg1)
                        {
                            EB00 = Arg2
                        }
                        Else
                        {
                            Local0 = EB00 /* \_SB_.PCI0.SBRG.EC0_.EB00 */
                        }
                    }
                    Case (One)
                    {
                        If (Arg1)
                        {
                            EB01 = Arg2
                        }
                        Else
                        {
                            Local0 = EB01 /* \_SB_.PCI0.SBRG.EC0_.EB01 */
                        }
                    }
                    Case (0x02)
                    {
                        If (Arg1)
                        {
                            EB02 = Arg2
                        }
                        Else
                        {
                            Local0 = EB02 /* \_SB_.PCI0.SBRG.EC0_.EB02 */
                        }
                    }
                    Case (0x03)
                    {
                        If (Arg1)
                        {
                            EB03 = Arg2
                        }
                        Else
                        {
                            Local0 = EB03 /* \_SB_.PCI0.SBRG.EC0_.EB03 */
                        }
                    }
                    Case (0x04)
                    {
                        If (Arg1)
                        {
                            EB04 = Arg2
                        }
                        Else
                        {
                            Local0 = EB04 /* \_SB_.PCI0.SBRG.EC0_.EB04 */
                        }
                    }
                    Case (0x05)
                    {
                        If (Arg1)
                        {
                            EB05 = Arg2
                        }
                        Else
                        {
                            Local0 = EB05 /* \_SB_.PCI0.SBRG.EC0_.EB05 */
                        }
                    }
                    Case (0x06)
                    {
                        If (Arg1)
                        {
                            EB06 = Arg2
                        }
                        Else
                        {
                            Local0 = EB06 /* \_SB_.PCI0.SBRG.EC0_.EB06 */
                        }
                    }
                    Case (0x07)
                    {
                        If (Arg1)
                        {
                            EB07 = Arg2
                        }
                        Else
                        {
                            Local0 = EB07 /* \_SB_.PCI0.SBRG.EC0_.EB07 */
                        }
                    }
                    Case (0x08)
                    {
                        If (Arg1)
                        {
                            EB08 = Arg2
                        }
                        Else
                        {
                            Local0 = EB08 /* \_SB_.PCI0.SBRG.EC0_.EB08 */
                        }
                    }
                    Case (0x09)
                    {
                        If (Arg1)
                        {
                            EB09 = Arg2
                        }
                        Else
                        {
                            Local0 = EB09 /* \_SB_.PCI0.SBRG.EC0_.EB09 */
                        }
                    }
                    Case (0x0A)
                    {
                        If (Arg1)
                        {
                            EB0A = Arg2
                        }
                        Else
                        {
                            Local0 = EB0A /* \_SB_.PCI0.SBRG.EC0_.EB0A */
                        }
                    }
                    Case (0x0B)
                    {
                        If (Arg1)
                        {
                            EB0B = Arg2
                        }
                        Else
                        {
                            Local0 = EB0B /* \_SB_.PCI0.SBRG.EC0_.EB0B */
                        }
                    }
                    Case (0x0C)
                    {
                        If (Arg1)
                        {
                            EB0C = Arg2
                        }
                        Else
                        {
                            Local0 = EB0C /* \_SB_.PCI0.SBRG.EC0_.EB0C */
                        }
                    }
                    Case (0x0D)
                    {
                        If (Arg1)
                        {
                            EB0D = Arg2
                        }
                        Else
                        {
                            Local0 = EB0D /* \_SB_.PCI0.SBRG.EC0_.EB0D */
                        }
                    }
                    Case (0x0E)
                    {
                        If (Arg1)
                        {
                            EB0E = Arg2
                        }
                        Else
                        {
                            Local0 = EB0E /* \_SB_.PCI0.SBRG.EC0_.EB0E */
                        }
                    }
                    Case (0x0F)
                    {
                        If (Arg1)
                        {
                            EB0F = Arg2
                        }
                        Else
                        {
                            Local0 = EB0F /* \_SB_.PCI0.SBRG.EC0_.EB0F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC1X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x10)
                    {
                        If (Arg1)
                        {
                            EB10 = Arg2
                        }
                        Else
                        {
                            Local0 = EB10 /* \_SB_.PCI0.SBRG.EC0_.EB10 */
                        }
                    }
                    Case (0x11)
                    {
                        If (Arg1)
                        {
                            EB11 = Arg2
                        }
                        Else
                        {
                            Local0 = EB11 /* \_SB_.PCI0.SBRG.EC0_.EB11 */
                        }
                    }
                    Case (0x12)
                    {
                        If (Arg1)
                        {
                            EB12 = Arg2
                        }
                        Else
                        {
                            Local0 = EB12 /* \_SB_.PCI0.SBRG.EC0_.EB12 */
                        }
                    }
                    Case (0x13)
                    {
                        If (Arg1)
                        {
                            EB13 = Arg2
                        }
                        Else
                        {
                            Local0 = EB13 /* \_SB_.PCI0.SBRG.EC0_.EB13 */
                        }
                    }
                    Case (0x14)
                    {
                        If (Arg1)
                        {
                            EB14 = Arg2
                        }
                        Else
                        {
                            Local0 = EB14 /* \_SB_.PCI0.SBRG.EC0_.EB14 */
                        }
                    }
                    Case (0x15)
                    {
                        If (Arg1)
                        {
                            EB15 = Arg2
                        }
                        Else
                        {
                            Local0 = EB15 /* \_SB_.PCI0.SBRG.EC0_.EB15 */
                        }
                    }
                    Case (0x16)
                    {
                        If (Arg1)
                        {
                            EB16 = Arg2
                        }
                        Else
                        {
                            Local0 = EB16 /* \_SB_.PCI0.SBRG.EC0_.EB16 */
                        }
                    }
                    Case (0x17)
                    {
                        If (Arg1)
                        {
                            EB17 = Arg2
                        }
                        Else
                        {
                            Local0 = EB17 /* \_SB_.PCI0.SBRG.EC0_.EB17 */
                        }
                    }
                    Case (0x18)
                    {
                        If (Arg1)
                        {
                            EB18 = Arg2
                        }
                        Else
                        {
                            Local0 = EB18 /* \_SB_.PCI0.SBRG.EC0_.EB18 */
                        }
                    }
                    Case (0x19)
                    {
                        If (Arg1)
                        {
                            EB19 = Arg2
                        }
                        Else
                        {
                            Local0 = EB19 /* \_SB_.PCI0.SBRG.EC0_.EB19 */
                        }
                    }
                    Case (0x1A)
                    {
                        If (Arg1)
                        {
                            EB1A = Arg2
                        }
                        Else
                        {
                            Local0 = EB1A /* \_SB_.PCI0.SBRG.EC0_.EB1A */
                        }
                    }
                    Case (0x1B)
                    {
                        If (Arg1)
                        {
                            EB1B = Arg2
                        }
                        Else
                        {
                            Local0 = EB1B /* \_SB_.PCI0.SBRG.EC0_.EB1B */
                        }
                    }
                    Case (0x1C)
                    {
                        If (Arg1)
                        {
                            EB1C = Arg2
                        }
                        Else
                        {
                            Local0 = EB1C /* \_SB_.PCI0.SBRG.EC0_.EB1C */
                        }
                    }
                    Case (0x1D)
                    {
                        If (Arg1)
                        {
                            EB1D = Arg2
                        }
                        Else
                        {
                            Local0 = EB1D /* \_SB_.PCI0.SBRG.EC0_.EB1D */
                        }
                    }
                    Case (0x1E)
                    {
                        If (Arg1)
                        {
                            EB1E = Arg2
                        }
                        Else
                        {
                            Local0 = EB1E /* \_SB_.PCI0.SBRG.EC0_.EB1E */
                        }
                    }
                    Case (0x1F)
                    {
                        If (Arg1)
                        {
                            EB1F = Arg2
                        }
                        Else
                        {
                            Local0 = EB1F /* \_SB_.PCI0.SBRG.EC0_.EB1F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC2X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x20)
                    {
                        If (Arg1)
                        {
                            EB20 = Arg2
                        }
                        Else
                        {
                            Local0 = EB20 /* \_SB_.PCI0.SBRG.EC0_.EB20 */
                        }
                    }
                    Case (0x21)
                    {
                        If (Arg1)
                        {
                            EB21 = Arg2
                        }
                        Else
                        {
                            Local0 = EB21 /* \_SB_.PCI0.SBRG.EC0_.EB21 */
                        }
                    }
                    Case (0x22)
                    {
                        If (Arg1)
                        {
                            EB22 = Arg2
                        }
                        Else
                        {
                            Local0 = EB22 /* \_SB_.PCI0.SBRG.EC0_.EB22 */
                        }
                    }
                    Case (0x23)
                    {
                        If (Arg1)
                        {
                            EB23 = Arg2
                        }
                        Else
                        {
                            Local0 = EB23 /* \_SB_.PCI0.SBRG.EC0_.EB23 */
                        }
                    }
                    Case (0x24)
                    {
                        If (Arg1)
                        {
                            EB24 = Arg2
                        }
                        Else
                        {
                            Local0 = EB24 /* \_SB_.PCI0.SBRG.EC0_.EB24 */
                        }
                    }
                    Case (0x25)
                    {
                        If (Arg1)
                        {
                            EB25 = Arg2
                        }
                        Else
                        {
                            Local0 = EB25 /* \_SB_.PCI0.SBRG.EC0_.EB25 */
                        }
                    }
                    Case (0x26)
                    {
                        If (Arg1)
                        {
                            EB26 = Arg2
                        }
                        Else
                        {
                            Local0 = EB26 /* \_SB_.PCI0.SBRG.EC0_.EB26 */
                        }
                    }
                    Case (0x27)
                    {
                        If (Arg1)
                        {
                            EB27 = Arg2
                        }
                        Else
                        {
                            Local0 = EB27 /* \_SB_.PCI0.SBRG.EC0_.EB27 */
                        }
                    }
                    Case (0x28)
                    {
                        If (Arg1)
                        {
                            EB28 = Arg2
                        }
                        Else
                        {
                            Local0 = EB28 /* \_SB_.PCI0.SBRG.EC0_.EB28 */
                        }
                    }
                    Case (0x29)
                    {
                        If (Arg1)
                        {
                            EB29 = Arg2
                        }
                        Else
                        {
                            Local0 = EB29 /* \_SB_.PCI0.SBRG.EC0_.EB29 */
                        }
                    }
                    Case (0x2A)
                    {
                        If (Arg1)
                        {
                            EB2A = Arg2
                        }
                        Else
                        {
                            Local0 = EB2A /* \_SB_.PCI0.SBRG.EC0_.EB2A */
                        }
                    }
                    Case (0x2B)
                    {
                        If (Arg1)
                        {
                            EB2B = Arg2
                        }
                        Else
                        {
                            Local0 = EB2B /* \_SB_.PCI0.SBRG.EC0_.EB2B */
                        }
                    }
                    Case (0x2C)
                    {
                        If (Arg1)
                        {
                            EB2C = Arg2
                        }
                        Else
                        {
                            Local0 = EB2C /* \_SB_.PCI0.SBRG.EC0_.EB2C */
                        }
                    }
                    Case (0x2D)
                    {
                        If (Arg1)
                        {
                            EB2D = Arg2
                        }
                        Else
                        {
                            Local0 = EB2D /* \_SB_.PCI0.SBRG.EC0_.EB2D */
                        }
                    }
                    Case (0x2E)
                    {
                        If (Arg1)
                        {
                            EB2E = Arg2
                        }
                        Else
                        {
                            Local0 = EB2E /* \_SB_.PCI0.SBRG.EC0_.EB2E */
                        }
                    }
                    Case (0x2F)
                    {
                        If (Arg1)
                        {
                            EB2F = Arg2
                        }
                        Else
                        {
                            Local0 = EB2F /* \_SB_.PCI0.SBRG.EC0_.EB2F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC3X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x30)
                    {
                        If (Arg1)
                        {
                            EB30 = Arg2
                        }
                        Else
                        {
                            Local0 = EB30 /* \_SB_.PCI0.SBRG.EC0_.EB30 */
                        }
                    }
                    Case (0x31)
                    {
                        If (Arg1)
                        {
                            EB31 = Arg2
                        }
                        Else
                        {
                            Local0 = EB31 /* \_SB_.PCI0.SBRG.EC0_.EB31 */
                        }
                    }
                    Case (0x32)
                    {
                        If (Arg1)
                        {
                            EB32 = Arg2
                        }
                        Else
                        {
                            Local0 = EB32 /* \_SB_.PCI0.SBRG.EC0_.EB32 */
                        }
                    }
                    Case (0x33)
                    {
                        If (Arg1)
                        {
                            EB33 = Arg2
                        }
                        Else
                        {
                            Local0 = EB33 /* \_SB_.PCI0.SBRG.EC0_.EB33 */
                        }
                    }
                    Case (0x34)
                    {
                        If (Arg1)
                        {
                            EB34 = Arg2
                        }
                        Else
                        {
                            Local0 = EB34 /* \_SB_.PCI0.SBRG.EC0_.EB34 */
                        }
                    }
                    Case (0x35)
                    {
                        If (Arg1)
                        {
                            EB35 = Arg2
                        }
                        Else
                        {
                            Local0 = EB35 /* \_SB_.PCI0.SBRG.EC0_.EB35 */
                        }
                    }
                    Case (0x36)
                    {
                        If (Arg1)
                        {
                            EB36 = Arg2
                        }
                        Else
                        {
                            Local0 = EB36 /* \_SB_.PCI0.SBRG.EC0_.EB36 */
                        }
                    }
                    Case (0x37)
                    {
                        If (Arg1)
                        {
                            EB37 = Arg2
                        }
                        Else
                        {
                            Local0 = EB37 /* \_SB_.PCI0.SBRG.EC0_.EB37 */
                        }
                    }
                    Case (0x38)
                    {
                        If (Arg1)
                        {
                            EB38 = Arg2
                        }
                        Else
                        {
                            Local0 = EB38 /* \_SB_.PCI0.SBRG.EC0_.EB38 */
                        }
                    }
                    Case (0x39)
                    {
                        If (Arg1)
                        {
                            EB39 = Arg2
                        }
                        Else
                        {
                            Local0 = EB39 /* \_SB_.PCI0.SBRG.EC0_.EB39 */
                        }
                    }
                    Case (0x3A)
                    {
                        If (Arg1)
                        {
                            EB3A = Arg2
                        }
                        Else
                        {
                            Local0 = EB3A /* \_SB_.PCI0.SBRG.EC0_.EB3A */
                        }
                    }
                    Case (0x3B)
                    {
                        If (Arg1)
                        {
                            EB3B = Arg2
                        }
                        Else
                        {
                            Local0 = EB3B /* \_SB_.PCI0.SBRG.EC0_.EB3B */
                        }
                    }
                    Case (0x3C)
                    {
                        If (Arg1)
                        {
                            EB3C = Arg2
                        }
                        Else
                        {
                            Local0 = EB3C /* \_SB_.PCI0.SBRG.EC0_.EB3C */
                        }
                    }
                    Case (0x3D)
                    {
                        If (Arg1)
                        {
                            EB3D = Arg2
                        }
                        Else
                        {
                            Local0 = EB3D /* \_SB_.PCI0.SBRG.EC0_.EB3D */
                        }
                    }
                    Case (0x3E)
                    {
                        If (Arg1)
                        {
                            EB3E = Arg2
                        }
                        Else
                        {
                            Local0 = EB3E /* \_SB_.PCI0.SBRG.EC0_.EB3E */
                        }
                    }
                    Case (0x3F)
                    {
                        If (Arg1)
                        {
                            EB3F = Arg2
                        }
                        Else
                        {
                            Local0 = EB3F /* \_SB_.PCI0.SBRG.EC0_.EB3F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC4X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x40)
                    {
                        If (Arg1)
                        {
                            EB40 = Arg2
                        }
                        Else
                        {
                            Local0 = EB40 /* \_SB_.PCI0.SBRG.EC0_.EB40 */
                        }
                    }
                    Case (0x41)
                    {
                        If (Arg1)
                        {
                            EB41 = Arg2
                        }
                        Else
                        {
                            Local0 = EB41 /* \_SB_.PCI0.SBRG.EC0_.EB41 */
                        }
                    }
                    Case (0x42)
                    {
                        If (Arg1)
                        {
                            EB42 = Arg2
                        }
                        Else
                        {
                            Local0 = EB42 /* \_SB_.PCI0.SBRG.EC0_.EB42 */
                        }
                    }
                    Case (0x43)
                    {
                        If (Arg1)
                        {
                            EB43 = Arg2
                        }
                        Else
                        {
                            Local0 = EB43 /* \_SB_.PCI0.SBRG.EC0_.EB43 */
                        }
                    }
                    Case (0x44)
                    {
                        If (Arg1)
                        {
                            EB44 = Arg2
                        }
                        Else
                        {
                            Local0 = EB44 /* \_SB_.PCI0.SBRG.EC0_.EB44 */
                        }
                    }
                    Case (0x45)
                    {
                        If (Arg1)
                        {
                            EB45 = Arg2
                        }
                        Else
                        {
                            Local0 = EB45 /* \_SB_.PCI0.SBRG.EC0_.EB45 */
                        }
                    }
                    Case (0x46)
                    {
                        If (Arg1)
                        {
                            EB46 = Arg2
                        }
                        Else
                        {
                            Local0 = EB46 /* \_SB_.PCI0.SBRG.EC0_.EB46 */
                        }
                    }
                    Case (0x47)
                    {
                        If (Arg1)
                        {
                            EB47 = Arg2
                        }
                        Else
                        {
                            Local0 = EB47 /* \_SB_.PCI0.SBRG.EC0_.EB47 */
                        }
                    }
                    Case (0x48)
                    {
                        If (Arg1)
                        {
                            EB48 = Arg2
                        }
                        Else
                        {
                            Local0 = EB48 /* \_SB_.PCI0.SBRG.EC0_.EB48 */
                        }
                    }
                    Case (0x49)
                    {
                        If (Arg1)
                        {
                            EB49 = Arg2
                        }
                        Else
                        {
                            Local0 = EB49 /* \_SB_.PCI0.SBRG.EC0_.EB49 */
                        }
                    }
                    Case (0x4A)
                    {
                        If (Arg1)
                        {
                            EB4A = Arg2
                        }
                        Else
                        {
                            Local0 = EB4A /* \_SB_.PCI0.SBRG.EC0_.EB4A */
                        }
                    }
                    Case (0x4B)
                    {
                        If (Arg1)
                        {
                            EB4B = Arg2
                        }
                        Else
                        {
                            Local0 = EB4B /* \_SB_.PCI0.SBRG.EC0_.EB4B */
                        }
                    }
                    Case (0x4C)
                    {
                        If (Arg1)
                        {
                            EB4C = Arg2
                        }
                        Else
                        {
                            Local0 = EB4C /* \_SB_.PCI0.SBRG.EC0_.EB4C */
                        }
                    }
                    Case (0x4D)
                    {
                        If (Arg1)
                        {
                            EB4D = Arg2
                        }
                        Else
                        {
                            Local0 = EB4D /* \_SB_.PCI0.SBRG.EC0_.EB4D */
                        }
                    }
                    Case (0x4E)
                    {
                        If (Arg1)
                        {
                            EB4E = Arg2
                        }
                        Else
                        {
                            Local0 = EB4E /* \_SB_.PCI0.SBRG.EC0_.EB4E */
                        }
                    }
                    Case (0x4F)
                    {
                        If (Arg1)
                        {
                            EB4F = Arg2
                        }
                        Else
                        {
                            Local0 = EB4F /* \_SB_.PCI0.SBRG.EC0_.EB4F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC5X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x50)
                    {
                        If (Arg1)
                        {
                            EB50 = Arg2
                        }
                        Else
                        {
                            Local0 = EB50 /* \_SB_.PCI0.SBRG.EC0_.EB50 */
                        }
                    }
                    Case (0x51)
                    {
                        If (Arg1)
                        {
                            EB51 = Arg2
                        }
                        Else
                        {
                            Local0 = EB51 /* \_SB_.PCI0.SBRG.EC0_.EB51 */
                        }
                    }
                    Case (0x52)
                    {
                        If (Arg1)
                        {
                            EB52 = Arg2
                        }
                        Else
                        {
                            Local0 = EB52 /* \_SB_.PCI0.SBRG.EC0_.EB52 */
                        }
                    }
                    Case (0x53)
                    {
                        If (Arg1)
                        {
                            EB53 = Arg2
                        }
                        Else
                        {
                            Local0 = EB53 /* \_SB_.PCI0.SBRG.EC0_.EB53 */
                        }
                    }
                    Case (0x54)
                    {
                        If (Arg1)
                        {
                            EB54 = Arg2
                        }
                        Else
                        {
                            Local0 = EB54 /* \_SB_.PCI0.SBRG.EC0_.EB54 */
                        }
                    }
                    Case (0x55)
                    {
                        If (Arg1)
                        {
                            EB55 = Arg2
                        }
                        Else
                        {
                            Local0 = EB55 /* \_SB_.PCI0.SBRG.EC0_.EB55 */
                        }
                    }
                    Case (0x56)
                    {
                        If (Arg1)
                        {
                            EB56 = Arg2
                        }
                        Else
                        {
                            Local0 = EB56 /* \_SB_.PCI0.SBRG.EC0_.EB56 */
                        }
                    }
                    Case (0x57)
                    {
                        If (Arg1)
                        {
                            EB57 = Arg2
                        }
                        Else
                        {
                            Local0 = EB57 /* \_SB_.PCI0.SBRG.EC0_.EB57 */
                        }
                    }
                    Case (0x58)
                    {
                        If (Arg1)
                        {
                            EB58 = Arg2
                        }
                        Else
                        {
                            Local0 = EB58 /* \_SB_.PCI0.SBRG.EC0_.EB58 */
                        }
                    }
                    Case (0x59)
                    {
                        If (Arg1)
                        {
                            EB59 = Arg2
                        }
                        Else
                        {
                            Local0 = EB59 /* \_SB_.PCI0.SBRG.EC0_.EB59 */
                        }
                    }
                    Case (0x5A)
                    {
                        If (Arg1)
                        {
                            EB5A = Arg2
                        }
                        Else
                        {
                            Local0 = EB5A /* \_SB_.PCI0.SBRG.EC0_.EB5A */
                        }
                    }
                    Case (0x5B)
                    {
                        If (Arg1)
                        {
                            EB5B = Arg2
                        }
                        Else
                        {
                            Local0 = EB5B /* \_SB_.PCI0.SBRG.EC0_.EB5B */
                        }
                    }
                    Case (0x5C)
                    {
                        If (Arg1)
                        {
                            EB5C = Arg2
                        }
                        Else
                        {
                            Local0 = EB5C /* \_SB_.PCI0.SBRG.EC0_.EB5C */
                        }
                    }
                    Case (0x5D)
                    {
                        If (Arg1)
                        {
                            EB5D = Arg2
                        }
                        Else
                        {
                            Local0 = EB5D /* \_SB_.PCI0.SBRG.EC0_.EB5D */
                        }
                    }
                    Case (0x5E)
                    {
                        If (Arg1)
                        {
                            EB5E = Arg2
                        }
                        Else
                        {
                            Local0 = EB5E /* \_SB_.PCI0.SBRG.EC0_.EB5E */
                        }
                    }
                    Case (0x5F)
                    {
                        If (Arg1)
                        {
                            EB5F = Arg2
                        }
                        Else
                        {
                            Local0 = EB5F /* \_SB_.PCI0.SBRG.EC0_.EB5F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC6X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x60)
                    {
                        If (Arg1)
                        {
                            EB60 = Arg2
                        }
                        Else
                        {
                            Local0 = EB60 /* \_SB_.PCI0.SBRG.EC0_.EB60 */
                        }
                    }
                    Case (0x61)
                    {
                        If (Arg1)
                        {
                            EB61 = Arg2
                        }
                        Else
                        {
                            Local0 = EB61 /* \_SB_.PCI0.SBRG.EC0_.EB61 */
                        }
                    }
                    Case (0x62)
                    {
                        If (Arg1)
                        {
                            EB62 = Arg2
                        }
                        Else
                        {
                            Local0 = EB62 /* \_SB_.PCI0.SBRG.EC0_.EB62 */
                        }
                    }
                    Case (0x63)
                    {
                        If (Arg1)
                        {
                            EB63 = Arg2
                        }
                        Else
                        {
                            Local0 = EB63 /* \_SB_.PCI0.SBRG.EC0_.EB63 */
                        }
                    }
                    Case (0x64)
                    {
                        If (Arg1)
                        {
                            EB64 = Arg2
                        }
                        Else
                        {
                            Local0 = EB64 /* \_SB_.PCI0.SBRG.EC0_.EB64 */
                        }
                    }
                    Case (0x65)
                    {
                        If (Arg1)
                        {
                            EB65 = Arg2
                        }
                        Else
                        {
                            Local0 = EB65 /* \_SB_.PCI0.SBRG.EC0_.EB65 */
                        }
                    }
                    Case (0x66)
                    {
                        If (Arg1)
                        {
                            EB66 = Arg2
                        }
                        Else
                        {
                            Local0 = EB66 /* \_SB_.PCI0.SBRG.EC0_.EB66 */
                        }
                    }
                    Case (0x67)
                    {
                        If (Arg1)
                        {
                            EB67 = Arg2
                        }
                        Else
                        {
                            Local0 = EB67 /* \_SB_.PCI0.SBRG.EC0_.EB67 */
                        }
                    }
                    Case (0x68)
                    {
                        If (Arg1)
                        {
                            EB68 = Arg2
                        }
                        Else
                        {
                            Local0 = EB68 /* \_SB_.PCI0.SBRG.EC0_.EB68 */
                        }
                    }
                    Case (0x69)
                    {
                        If (Arg1)
                        {
                            EB69 = Arg2
                        }
                        Else
                        {
                            Local0 = EB69 /* \_SB_.PCI0.SBRG.EC0_.EB69 */
                        }
                    }
                    Case (0x6A)
                    {
                        If (Arg1)
                        {
                            EB6A = Arg2
                        }
                        Else
                        {
                            Local0 = EB6A /* \_SB_.PCI0.SBRG.EC0_.EB6A */
                        }
                    }
                    Case (0x6B)
                    {
                        If (Arg1)
                        {
                            EB6B = Arg2
                        }
                        Else
                        {
                            Local0 = EB6B /* \_SB_.PCI0.SBRG.EC0_.EB6B */
                        }
                    }
                    Case (0x6C)
                    {
                        If (Arg1)
                        {
                            EB6C = Arg2
                        }
                        Else
                        {
                            Local0 = EB6C /* \_SB_.PCI0.SBRG.EC0_.EB6C */
                        }
                    }
                    Case (0x6D)
                    {
                        If (Arg1)
                        {
                            EB6D = Arg2
                        }
                        Else
                        {
                            Local0 = EB6D /* \_SB_.PCI0.SBRG.EC0_.EB6D */
                        }
                    }
                    Case (0x6E)
                    {
                        If (Arg1)
                        {
                            EB6E = Arg2
                        }
                        Else
                        {
                            Local0 = EB6E /* \_SB_.PCI0.SBRG.EC0_.EB6E */
                        }
                    }
                    Case (0x6F)
                    {
                        If (Arg1)
                        {
                            EB6F = Arg2
                        }
                        Else
                        {
                            Local0 = EB6F /* \_SB_.PCI0.SBRG.EC0_.EB6F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC7X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x70)
                    {
                        If (Arg1)
                        {
                            EB70 = Arg2
                        }
                        Else
                        {
                            Local0 = EB70 /* \_SB_.PCI0.SBRG.EC0_.EB70 */
                        }
                    }
                    Case (0x71)
                    {
                        If (Arg1)
                        {
                            EB71 = Arg2
                        }
                        Else
                        {
                            Local0 = EB71 /* \_SB_.PCI0.SBRG.EC0_.EB71 */
                        }
                    }
                    Case (0x72)
                    {
                        If (Arg1)
                        {
                            EB72 = Arg2
                        }
                        Else
                        {
                            Local0 = EB72 /* \_SB_.PCI0.SBRG.EC0_.EB72 */
                        }
                    }
                    Case (0x73)
                    {
                        If (Arg1)
                        {
                            EB73 = Arg2
                        }
                        Else
                        {
                            Local0 = EB73 /* \_SB_.PCI0.SBRG.EC0_.EB73 */
                        }
                    }
                    Case (0x74)
                    {
                        If (Arg1)
                        {
                            EB74 = Arg2
                        }
                        Else
                        {
                            Local0 = EB74 /* \_SB_.PCI0.SBRG.EC0_.EB74 */
                        }
                    }
                    Case (0x75)
                    {
                        If (Arg1)
                        {
                            EB75 = Arg2
                        }
                        Else
                        {
                            Local0 = EB75 /* \_SB_.PCI0.SBRG.EC0_.EB75 */
                        }
                    }
                    Case (0x76)
                    {
                        If (Arg1)
                        {
                            EB76 = Arg2
                        }
                        Else
                        {
                            Local0 = EB76 /* \_SB_.PCI0.SBRG.EC0_.EB76 */
                        }
                    }
                    Case (0x77)
                    {
                        If (Arg1)
                        {
                            EB77 = Arg2
                        }
                        Else
                        {
                            Local0 = EB77 /* \_SB_.PCI0.SBRG.EC0_.EB77 */
                        }
                    }
                    Case (0x78)
                    {
                        If (Arg1)
                        {
                            EB78 = Arg2
                        }
                        Else
                        {
                            Local0 = EB78 /* \_SB_.PCI0.SBRG.EC0_.EB78 */
                        }
                    }
                    Case (0x79)
                    {
                        If (Arg1)
                        {
                            EB79 = Arg2
                        }
                        Else
                        {
                            Local0 = EB79 /* \_SB_.PCI0.SBRG.EC0_.EB79 */
                        }
                    }
                    Case (0x7A)
                    {
                        If (Arg1)
                        {
                            EB7A = Arg2
                        }
                        Else
                        {
                            Local0 = EB7A /* \_SB_.PCI0.SBRG.EC0_.EB7A */
                        }
                    }
                    Case (0x7B)
                    {
                        If (Arg1)
                        {
                            EB7B = Arg2
                        }
                        Else
                        {
                            Local0 = EB7B /* \_SB_.PCI0.SBRG.EC0_.EB7B */
                        }
                    }
                    Case (0x7C)
                    {
                        If (Arg1)
                        {
                            EB7C = Arg2
                        }
                        Else
                        {
                            Local0 = EB7C /* \_SB_.PCI0.SBRG.EC0_.EB7C */
                        }
                    }
                    Case (0x7D)
                    {
                        If (Arg1)
                        {
                            EB7D = Arg2
                        }
                        Else
                        {
                            Local0 = EB7D /* \_SB_.PCI0.SBRG.EC0_.EB7D */
                        }
                    }
                    Case (0x7E)
                    {
                        If (Arg1)
                        {
                            EB7E = Arg2
                        }
                        Else
                        {
                            Local0 = EB7E /* \_SB_.PCI0.SBRG.EC0_.EB7E */
                        }
                    }
                    Case (0x7F)
                    {
                        If (Arg1)
                        {
                            EB7F = Arg2
                        }
                        Else
                        {
                            Local0 = EB7F /* \_SB_.PCI0.SBRG.EC0_.EB7F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC8X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x80)
                    {
                        If (Arg1)
                        {
                            EB80 = Arg2
                        }
                        Else
                        {
                            Local0 = EB80 /* \_SB_.PCI0.SBRG.EC0_.EB80 */
                        }
                    }
                    Case (0x81)
                    {
                        If (Arg1)
                        {
                            EB81 = Arg2
                        }
                        Else
                        {
                            Local0 = EB81 /* \_SB_.PCI0.SBRG.EC0_.EB81 */
                        }
                    }
                    Case (0x82)
                    {
                        If (Arg1)
                        {
                            EB82 = Arg2
                        }
                        Else
                        {
                            Local0 = EB82 /* \_SB_.PCI0.SBRG.EC0_.EB82 */
                        }
                    }
                    Case (0x83)
                    {
                        If (Arg1)
                        {
                            EB83 = Arg2
                        }
                        Else
                        {
                            Local0 = EB83 /* \_SB_.PCI0.SBRG.EC0_.EB83 */
                        }
                    }
                    Case (0x84)
                    {
                        If (Arg1)
                        {
                            EB84 = Arg2
                        }
                        Else
                        {
                            Local0 = EB84 /* \_SB_.PCI0.SBRG.EC0_.EB84 */
                        }
                    }
                    Case (0x85)
                    {
                        If (Arg1)
                        {
                            EB85 = Arg2
                        }
                        Else
                        {
                            Local0 = EB85 /* \_SB_.PCI0.SBRG.EC0_.EB85 */
                        }
                    }
                    Case (0x86)
                    {
                        If (Arg1)
                        {
                            EB86 = Arg2
                        }
                        Else
                        {
                            Local0 = EB86 /* \_SB_.PCI0.SBRG.EC0_.EB86 */
                        }
                    }
                    Case (0x87)
                    {
                        If (Arg1)
                        {
                            EB87 = Arg2
                        }
                        Else
                        {
                            Local0 = EB87 /* \_SB_.PCI0.SBRG.EC0_.EB87 */
                        }
                    }
                    Case (0x88)
                    {
                        If (Arg1)
                        {
                            EB88 = Arg2
                        }
                        Else
                        {
                            Local0 = EB88 /* \_SB_.PCI0.SBRG.EC0_.EB88 */
                        }
                    }
                    Case (0x89)
                    {
                        If (Arg1)
                        {
                            EB89 = Arg2
                        }
                        Else
                        {
                            Local0 = EB89 /* \_SB_.PCI0.SBRG.EC0_.EB89 */
                        }
                    }
                    Case (0x8A)
                    {
                        If (Arg1)
                        {
                            EB8A = Arg2
                        }
                        Else
                        {
                            Local0 = EB8A /* \_SB_.PCI0.SBRG.EC0_.EB8A */
                        }
                    }
                    Case (0x8B)
                    {
                        If (Arg1)
                        {
                            EB8B = Arg2
                        }
                        Else
                        {
                            Local0 = EB8B /* \_SB_.PCI0.SBRG.EC0_.EB8B */
                        }
                    }
                    Case (0x8C)
                    {
                        If (Arg1)
                        {
                            EB8C = Arg2
                        }
                        Else
                        {
                            Local0 = EB8C /* \_SB_.PCI0.SBRG.EC0_.EB8C */
                        }
                    }
                    Case (0x8D)
                    {
                        If (Arg1)
                        {
                            EB8D = Arg2
                        }
                        Else
                        {
                            Local0 = EB8D /* \_SB_.PCI0.SBRG.EC0_.EB8D */
                        }
                    }
                    Case (0x8E)
                    {
                        If (Arg1)
                        {
                            EB8E = Arg2
                        }
                        Else
                        {
                            Local0 = EB8E /* \_SB_.PCI0.SBRG.EC0_.EB8E */
                        }
                    }
                    Case (0x8F)
                    {
                        If (Arg1)
                        {
                            EB8F = Arg2
                        }
                        Else
                        {
                            Local0 = EB8F /* \_SB_.PCI0.SBRG.EC0_.EB8F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (EC9X, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0x90)
                    {
                        If (Arg1)
                        {
                            EB90 = Arg2
                        }
                        Else
                        {
                            Local0 = EB90 /* \_SB_.PCI0.SBRG.EC0_.EB90 */
                        }
                    }
                    Case (0x91)
                    {
                        If (Arg1)
                        {
                            EB91 = Arg2
                        }
                        Else
                        {
                            Local0 = EB91 /* \_SB_.PCI0.SBRG.EC0_.EB91 */
                        }
                    }
                    Case (0x92)
                    {
                        If (Arg1)
                        {
                            EB92 = Arg2
                        }
                        Else
                        {
                            Local0 = EB92 /* \_SB_.PCI0.SBRG.EC0_.EB92 */
                        }
                    }
                    Case (0x93)
                    {
                        If (Arg1)
                        {
                            EB93 = Arg2
                        }
                        Else
                        {
                            Local0 = EB93 /* \_SB_.PCI0.SBRG.EC0_.EB93 */
                        }
                    }
                    Case (0x94)
                    {
                        If (Arg1)
                        {
                            EB94 = Arg2
                        }
                        Else
                        {
                            Local0 = EB94 /* \_SB_.PCI0.SBRG.EC0_.EB94 */
                        }
                    }
                    Case (0x95)
                    {
                        If (Arg1)
                        {
                            EB95 = Arg2
                        }
                        Else
                        {
                            Local0 = EB95 /* \_SB_.PCI0.SBRG.EC0_.EB95 */
                        }
                    }
                    Case (0x96)
                    {
                        If (Arg1)
                        {
                            EB96 = Arg2
                        }
                        Else
                        {
                            Local0 = EB96 /* \_SB_.PCI0.SBRG.EC0_.EB96 */
                        }
                    }
                    Case (0x97)
                    {
                        If (Arg1)
                        {
                            EB97 = Arg2
                        }
                        Else
                        {
                            Local0 = EB97 /* \_SB_.PCI0.SBRG.EC0_.EB97 */
                        }
                    }
                    Case (0x98)
                    {
                        If (Arg1)
                        {
                            EB98 = Arg2
                        }
                        Else
                        {
                            Local0 = EB98 /* \_SB_.PCI0.SBRG.EC0_.EB98 */
                        }
                    }
                    Case (0x99)
                    {
                        If (Arg1)
                        {
                            EB99 = Arg2
                        }
                        Else
                        {
                            Local0 = EB99 /* \_SB_.PCI0.SBRG.EC0_.EB99 */
                        }
                    }
                    Case (0x9A)
                    {
                        If (Arg1)
                        {
                            EB9A = Arg2
                        }
                        Else
                        {
                            Local0 = EB9A /* \_SB_.PCI0.SBRG.EC0_.EB9A */
                        }
                    }
                    Case (0x9B)
                    {
                        If (Arg1)
                        {
                            EB9B = Arg2
                        }
                        Else
                        {
                            Local0 = EB9B /* \_SB_.PCI0.SBRG.EC0_.EB9B */
                        }
                    }
                    Case (0x9C)
                    {
                        If (Arg1)
                        {
                            EB9C = Arg2
                        }
                        Else
                        {
                            Local0 = EB9C /* \_SB_.PCI0.SBRG.EC0_.EB9C */
                        }
                    }
                    Case (0x9D)
                    {
                        If (Arg1)
                        {
                            EB9D = Arg2
                        }
                        Else
                        {
                            Local0 = EB9D /* \_SB_.PCI0.SBRG.EC0_.EB9D */
                        }
                    }
                    Case (0x9E)
                    {
                        If (Arg1)
                        {
                            EB9E = Arg2
                        }
                        Else
                        {
                            Local0 = EB9E /* \_SB_.PCI0.SBRG.EC0_.EB9E */
                        }
                    }
                    Case (0x9F)
                    {
                        If (Arg1)
                        {
                            EB9F = Arg2
                        }
                        Else
                        {
                            Local0 = EB9F /* \_SB_.PCI0.SBRG.EC0_.EB9F */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECAX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xA0)
                    {
                        If (Arg1)
                        {
                            EBA0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA0 /* \_SB_.PCI0.SBRG.EC0_.EBA0 */
                        }
                    }
                    Case (0xA1)
                    {
                        If (Arg1)
                        {
                            EBA1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA1 /* \_SB_.PCI0.SBRG.EC0_.EBA1 */
                        }
                    }
                    Case (0xA2)
                    {
                        If (Arg1)
                        {
                            EBA2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA2 /* \_SB_.PCI0.SBRG.EC0_.EBA2 */
                        }
                    }
                    Case (0xA3)
                    {
                        If (Arg1)
                        {
                            EBA3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA3 /* \_SB_.PCI0.SBRG.EC0_.EBA3 */
                        }
                    }
                    Case (0xA4)
                    {
                        If (Arg1)
                        {
                            EBA4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA4 /* \_SB_.PCI0.SBRG.EC0_.EBA4 */
                        }
                    }
                    Case (0xA5)
                    {
                        If (Arg1)
                        {
                            EBA5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA5 /* \_SB_.PCI0.SBRG.EC0_.EBA5 */
                        }
                    }
                    Case (0xA6)
                    {
                        If (Arg1)
                        {
                            EBA6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA6 /* \_SB_.PCI0.SBRG.EC0_.EBA6 */
                        }
                    }
                    Case (0xA7)
                    {
                        If (Arg1)
                        {
                            EBA7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA7 /* \_SB_.PCI0.SBRG.EC0_.EBA7 */
                        }
                    }
                    Case (0xA8)
                    {
                        If (Arg1)
                        {
                            EBA8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA8 /* \_SB_.PCI0.SBRG.EC0_.EBA8 */
                        }
                    }
                    Case (0xA9)
                    {
                        If (Arg1)
                        {
                            EBA9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBA9 /* \_SB_.PCI0.SBRG.EC0_.EBA9 */
                        }
                    }
                    Case (0xAA)
                    {
                        If (Arg1)
                        {
                            EBAA = Arg2
                        }
                        Else
                        {
                            Local0 = EBAA /* \_SB_.PCI0.SBRG.EC0_.EBAA */
                        }
                    }
                    Case (0xAB)
                    {
                        If (Arg1)
                        {
                            EBAB = Arg2
                        }
                        Else
                        {
                            Local0 = EBAB /* \_SB_.PCI0.SBRG.EC0_.EBAB */
                        }
                    }
                    Case (0xAC)
                    {
                        If (Arg1)
                        {
                            EBAC = Arg2
                        }
                        Else
                        {
                            Local0 = EBAC /* \_SB_.PCI0.SBRG.EC0_.EBAC */
                        }
                    }
                    Case (0xAD)
                    {
                        If (Arg1)
                        {
                            EBAD = Arg2
                        }
                        Else
                        {
                            Local0 = EBAD /* \_SB_.PCI0.SBRG.EC0_.EBAD */
                        }
                    }
                    Case (0xAE)
                    {
                        If (Arg1)
                        {
                            EBAE = Arg2
                        }
                        Else
                        {
                            Local0 = EBAE /* \_SB_.PCI0.SBRG.EC0_.EBAE */
                        }
                    }
                    Case (0xAF)
                    {
                        If (Arg1)
                        {
                            EBAF = Arg2
                        }
                        Else
                        {
                            Local0 = EBAF /* \_SB_.PCI0.SBRG.EC0_.EBAF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECBX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xB0)
                    {
                        If (Arg1)
                        {
                            EBB0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB0 /* \_SB_.PCI0.SBRG.EC0_.EBB0 */
                        }
                    }
                    Case (0xB1)
                    {
                        If (Arg1)
                        {
                            EBB1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB1 /* \_SB_.PCI0.SBRG.EC0_.EBB1 */
                        }
                    }
                    Case (0xB2)
                    {
                        If (Arg1)
                        {
                            EBB2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB2 /* \_SB_.PCI0.SBRG.EC0_.EBB2 */
                        }
                    }
                    Case (0xB3)
                    {
                        If (Arg1)
                        {
                            EBB3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB3 /* \_SB_.PCI0.SBRG.EC0_.EBB3 */
                        }
                    }
                    Case (0xB4)
                    {
                        If (Arg1)
                        {
                            EBB4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB4 /* \_SB_.PCI0.SBRG.EC0_.EBB4 */
                        }
                    }
                    Case (0xB5)
                    {
                        If (Arg1)
                        {
                            EBB5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB5 /* \_SB_.PCI0.SBRG.EC0_.EBB5 */
                        }
                    }
                    Case (0xB6)
                    {
                        If (Arg1)
                        {
                            EBB6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB6 /* \_SB_.PCI0.SBRG.EC0_.EBB6 */
                        }
                    }
                    Case (0xB7)
                    {
                        If (Arg1)
                        {
                            EBB7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB7 /* \_SB_.PCI0.SBRG.EC0_.EBB7 */
                        }
                    }
                    Case (0xB8)
                    {
                        If (Arg1)
                        {
                            EBB8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB8 /* \_SB_.PCI0.SBRG.EC0_.EBB8 */
                        }
                    }
                    Case (0xB9)
                    {
                        If (Arg1)
                        {
                            EBB9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBB9 /* \_SB_.PCI0.SBRG.EC0_.EBB9 */
                        }
                    }
                    Case (0xBA)
                    {
                        If (Arg1)
                        {
                            EBBA = Arg2
                        }
                        Else
                        {
                            Local0 = EBBA /* \_SB_.PCI0.SBRG.EC0_.EBBA */
                        }
                    }
                    Case (0xBB)
                    {
                        If (Arg1)
                        {
                            EBBB = Arg2
                        }
                        Else
                        {
                            Local0 = EBBB /* \_SB_.PCI0.SBRG.EC0_.EBBB */
                        }
                    }
                    Case (0xBC)
                    {
                        If (Arg1)
                        {
                            EBBC = Arg2
                        }
                        Else
                        {
                            Local0 = EBBC /* \_SB_.PCI0.SBRG.EC0_.EBBC */
                        }
                    }
                    Case (0xBD)
                    {
                        If (Arg1)
                        {
                            EBBD = Arg2
                        }
                        Else
                        {
                            Local0 = EBBD /* \_SB_.PCI0.SBRG.EC0_.EBBD */
                        }
                    }
                    Case (0xBE)
                    {
                        If (Arg1)
                        {
                            EBBE = Arg2
                        }
                        Else
                        {
                            Local0 = EBBE /* \_SB_.PCI0.SBRG.EC0_.EBBE */
                        }
                    }
                    Case (0xBF)
                    {
                        If (Arg1)
                        {
                            EBBF = Arg2
                        }
                        Else
                        {
                            Local0 = EBBF /* \_SB_.PCI0.SBRG.EC0_.EBBF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECCX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xC0)
                    {
                        If (Arg1)
                        {
                            EBC0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC0 /* \_SB_.PCI0.SBRG.EC0_.EBC0 */
                        }
                    }
                    Case (0xC1)
                    {
                        If (Arg1)
                        {
                            EBC1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC1 /* \_SB_.PCI0.SBRG.EC0_.EBC1 */
                        }
                    }
                    Case (0xC2)
                    {
                        If (Arg1)
                        {
                            EBC2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC2 /* \_SB_.PCI0.SBRG.EC0_.EBC2 */
                        }
                    }
                    Case (0xC3)
                    {
                        If (Arg1)
                        {
                            EBC3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC3 /* \_SB_.PCI0.SBRG.EC0_.EBC3 */
                        }
                    }
                    Case (0xC4)
                    {
                        If (Arg1)
                        {
                            EBC4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC4 /* \_SB_.PCI0.SBRG.EC0_.EBC4 */
                        }
                    }
                    Case (0xC5)
                    {
                        If (Arg1)
                        {
                            EBC5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC5 /* \_SB_.PCI0.SBRG.EC0_.EBC5 */
                        }
                    }
                    Case (0xC6)
                    {
                        If (Arg1)
                        {
                            EBC6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC6 /* \_SB_.PCI0.SBRG.EC0_.EBC6 */
                        }
                    }
                    Case (0xC7)
                    {
                        If (Arg1)
                        {
                            EBC7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC7 /* \_SB_.PCI0.SBRG.EC0_.EBC7 */
                        }
                    }
                    Case (0xC8)
                    {
                        If (Arg1)
                        {
                            EBC8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC8 /* \_SB_.PCI0.SBRG.EC0_.EBC8 */
                        }
                    }
                    Case (0xC9)
                    {
                        If (Arg1)
                        {
                            EBC9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBC9 /* \_SB_.PCI0.SBRG.EC0_.EBC9 */
                        }
                    }
                    Case (0xCA)
                    {
                        If (Arg1)
                        {
                            EBCA = Arg2
                        }
                        Else
                        {
                            Local0 = EBCA /* \_SB_.PCI0.SBRG.EC0_.EBCA */
                        }
                    }
                    Case (0xCB)
                    {
                        If (Arg1)
                        {
                            EBCB = Arg2
                        }
                        Else
                        {
                            Local0 = EBCB /* \_SB_.PCI0.SBRG.EC0_.EBCB */
                        }
                    }
                    Case (0xCC)
                    {
                        If (Arg1)
                        {
                            EBCC = Arg2
                        }
                        Else
                        {
                            Local0 = EBCC /* \_SB_.PCI0.SBRG.EC0_.EBCC */
                        }
                    }
                    Case (0xCD)
                    {
                        If (Arg1)
                        {
                            EBCD = Arg2
                        }
                        Else
                        {
                            Local0 = EBCD /* \_SB_.PCI0.SBRG.EC0_.EBCD */
                        }
                    }
                    Case (0xCE)
                    {
                        If (Arg1)
                        {
                            EBCE = Arg2
                        }
                        Else
                        {
                            Local0 = EBCE /* \_SB_.PCI0.SBRG.EC0_.EBCE */
                        }
                    }
                    Case (0xCF)
                    {
                        If (Arg1)
                        {
                            EBCF = Arg2
                        }
                        Else
                        {
                            Local0 = EBCF /* \_SB_.PCI0.SBRG.EC0_.EBCF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECDX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xD0)
                    {
                        If (Arg1)
                        {
                            EBD0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD0 /* \_SB_.PCI0.SBRG.EC0_.EBD0 */
                        }
                    }
                    Case (0xD1)
                    {
                        If (Arg1)
                        {
                            EBD1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD1 /* \_SB_.PCI0.SBRG.EC0_.EBD1 */
                        }
                    }
                    Case (0xD2)
                    {
                        If (Arg1)
                        {
                            EBD2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD2 /* \_SB_.PCI0.SBRG.EC0_.EBD2 */
                        }
                    }
                    Case (0xD3)
                    {
                        If (Arg1)
                        {
                            EBD3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD3 /* \_SB_.PCI0.SBRG.EC0_.EBD3 */
                        }
                    }
                    Case (0xD4)
                    {
                        If (Arg1)
                        {
                            EBD4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD4 /* \_SB_.PCI0.SBRG.EC0_.EBD4 */
                        }
                    }
                    Case (0xD5)
                    {
                        If (Arg1)
                        {
                            EBD5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD5 /* \_SB_.PCI0.SBRG.EC0_.EBD5 */
                        }
                    }
                    Case (0xD6)
                    {
                        If (Arg1)
                        {
                            EBD6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD6 /* \_SB_.PCI0.SBRG.EC0_.EBD6 */
                        }
                    }
                    Case (0xD7)
                    {
                        If (Arg1)
                        {
                            EBD7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD7 /* \_SB_.PCI0.SBRG.EC0_.EBD7 */
                        }
                    }
                    Case (0xD8)
                    {
                        If (Arg1)
                        {
                            EBD8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD8 /* \_SB_.PCI0.SBRG.EC0_.EBD8 */
                        }
                    }
                    Case (0xD9)
                    {
                        If (Arg1)
                        {
                            EBD9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBD9 /* \_SB_.PCI0.SBRG.EC0_.EBD9 */
                        }
                    }
                    Case (0xDA)
                    {
                        If (Arg1)
                        {
                            EBDA = Arg2
                        }
                        Else
                        {
                            Local0 = EBDA /* \_SB_.PCI0.SBRG.EC0_.EBDA */
                        }
                    }
                    Case (0xDB)
                    {
                        If (Arg1)
                        {
                            EBDB = Arg2
                        }
                        Else
                        {
                            Local0 = EBDB /* \_SB_.PCI0.SBRG.EC0_.EBDB */
                        }
                    }
                    Case (0xDC)
                    {
                        If (Arg1)
                        {
                            EBDC = Arg2
                        }
                        Else
                        {
                            Local0 = EBDC /* \_SB_.PCI0.SBRG.EC0_.EBDC */
                        }
                    }
                    Case (0xDD)
                    {
                        If (Arg1)
                        {
                            EBDD = Arg2
                        }
                        Else
                        {
                            Local0 = EBDD /* \_SB_.PCI0.SBRG.EC0_.EBDD */
                        }
                    }
                    Case (0xDE)
                    {
                        If (Arg1)
                        {
                            EBDE = Arg2
                        }
                        Else
                        {
                            Local0 = EBDE /* \_SB_.PCI0.SBRG.EC0_.EBDE */
                        }
                    }
                    Case (0xDF)
                    {
                        If (Arg1)
                        {
                            EBDF = Arg2
                        }
                        Else
                        {
                            Local0 = EBDF /* \_SB_.PCI0.SBRG.EC0_.EBDF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECEX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xE0)
                    {
                        If (Arg1)
                        {
                            EBE0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE0 /* \_SB_.PCI0.SBRG.EC0_.EBE0 */
                        }
                    }
                    Case (0xE1)
                    {
                        If (Arg1)
                        {
                            EBE1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE1 /* \_SB_.PCI0.SBRG.EC0_.EBE1 */
                        }
                    }
                    Case (0xE2)
                    {
                        If (Arg1)
                        {
                            EBE2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE2 /* \_SB_.PCI0.SBRG.EC0_.EBE2 */
                        }
                    }
                    Case (0xE3)
                    {
                        If (Arg1)
                        {
                            EBE3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE3 /* \_SB_.PCI0.SBRG.EC0_.EBE3 */
                        }
                    }
                    Case (0xE4)
                    {
                        If (Arg1)
                        {
                            EBE4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE4 /* \_SB_.PCI0.SBRG.EC0_.EBE4 */
                        }
                    }
                    Case (0xE5)
                    {
                        If (Arg1)
                        {
                            EBE5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE5 /* \_SB_.PCI0.SBRG.EC0_.EBE5 */
                        }
                    }
                    Case (0xE6)
                    {
                        If (Arg1)
                        {
                            EBE6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE6 /* \_SB_.PCI0.SBRG.EC0_.EBE6 */
                        }
                    }
                    Case (0xE7)
                    {
                        If (Arg1)
                        {
                            EBE7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE7 /* \_SB_.PCI0.SBRG.EC0_.EBE7 */
                        }
                    }
                    Case (0xE8)
                    {
                        If (Arg1)
                        {
                            EBE8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE8 /* \_SB_.PCI0.SBRG.EC0_.EBE8 */
                        }
                    }
                    Case (0xE9)
                    {
                        If (Arg1)
                        {
                            EBE9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBE9 /* \_SB_.PCI0.SBRG.EC0_.EBE9 */
                        }
                    }
                    Case (0xEA)
                    {
                        If (Arg1)
                        {
                            EBEA = Arg2
                        }
                        Else
                        {
                            Local0 = EBEA /* \_SB_.PCI0.SBRG.EC0_.EBEA */
                        }
                    }
                    Case (0xEB)
                    {
                        If (Arg1)
                        {
                            EBEB = Arg2
                        }
                        Else
                        {
                            Local0 = EBEB /* \_SB_.PCI0.SBRG.EC0_.EBEB */
                        }
                    }
                    Case (0xEC)
                    {
                        If (Arg1)
                        {
                            EBEC = Arg2
                        }
                        Else
                        {
                            Local0 = EBEC /* \_SB_.PCI0.SBRG.EC0_.EBEC */
                        }
                    }
                    Case (0xED)
                    {
                        If (Arg1)
                        {
                            EBED = Arg2
                        }
                        Else
                        {
                            Local0 = EBED /* \_SB_.PCI0.SBRG.EC0_.EBED */
                        }
                    }
                    Case (0xEE)
                    {
                        If (Arg1)
                        {
                            EBEE = Arg2
                        }
                        Else
                        {
                            Local0 = EBEE /* \_SB_.PCI0.SBRG.EC0_.EBEE */
                        }
                    }
                    Case (0xEF)
                    {
                        If (Arg1)
                        {
                            EBEF = Arg2
                        }
                        Else
                        {
                            Local0 = EBEF /* \_SB_.PCI0.SBRG.EC0_.EBEF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECFX, 3, Serialized)
            {
                Local0 = Zero
                Switch (Arg0)
                {
                    Case (0xF0)
                    {
                        If (Arg1)
                        {
                            EBF0 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF0 /* \_SB_.PCI0.SBRG.EC0_.EBF0 */
                        }
                    }
                    Case (0xF1)
                    {
                        If (Arg1)
                        {
                            EBF1 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF1 /* \_SB_.PCI0.SBRG.EC0_.EBF1 */
                        }
                    }
                    Case (0xF2)
                    {
                        If (Arg1)
                        {
                            EBF2 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF2 /* \_SB_.PCI0.SBRG.EC0_.EBF2 */
                        }
                    }
                    Case (0xF3)
                    {
                        If (Arg1)
                        {
                            EBF3 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF3 /* \_SB_.PCI0.SBRG.EC0_.EBF3 */
                        }
                    }
                    Case (0xF4)
                    {
                        If (Arg1)
                        {
                            EBF4 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF4 /* \_SB_.PCI0.SBRG.EC0_.EBF4 */
                        }
                    }
                    Case (0xF5)
                    {
                        If (Arg1)
                        {
                            EBF5 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF5 /* \_SB_.PCI0.SBRG.EC0_.EBF5 */
                        }
                    }
                    Case (0xF6)
                    {
                        If (Arg1)
                        {
                            EBF6 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF6 /* \_SB_.PCI0.SBRG.EC0_.EBF6 */
                        }
                    }
                    Case (0xF7)
                    {
                        If (Arg1)
                        {
                            EBF7 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF7 /* \_SB_.PCI0.SBRG.EC0_.EBF7 */
                        }
                    }
                    Case (0xF8)
                    {
                        If (Arg1)
                        {
                            EBF8 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF8 /* \_SB_.PCI0.SBRG.EC0_.EBF8 */
                        }
                    }
                    Case (0xF9)
                    {
                        If (Arg1)
                        {
                            EBF9 = Arg2
                        }
                        Else
                        {
                            Local0 = EBF9 /* \_SB_.PCI0.SBRG.EC0_.EBF9 */
                        }
                    }
                    Case (0xFA)
                    {
                        If (Arg1)
                        {
                            EBFA = Arg2
                        }
                        Else
                        {
                            Local0 = EBFA /* \_SB_.PCI0.SBRG.EC0_.EBFA */
                        }
                    }
                    Case (0xFB)
                    {
                        If (Arg1)
                        {
                            EBFB = Arg2
                        }
                        Else
                        {
                            Local0 = EBFB /* \_SB_.PCI0.SBRG.EC0_.EBFB */
                        }
                    }
                    Case (0xFC)
                    {
                        If (Arg1)
                        {
                            EBFC = Arg2
                        }
                        Else
                        {
                            Local0 = EBFC /* \_SB_.PCI0.SBRG.EC0_.EBFC */
                        }
                    }
                    Case (0xFD)
                    {
                        If (Arg1)
                        {
                            EBFD = Arg2
                        }
                        Else
                        {
                            Local0 = EBFD /* \_SB_.PCI0.SBRG.EC0_.EBFD */
                        }
                    }
                    Case (0xFE)
                    {
                        If (Arg1)
                        {
                            EBFE = Arg2
                        }
                        Else
                        {
                            Local0 = EBFE /* \_SB_.PCI0.SBRG.EC0_.EBFE */
                        }
                    }
                    Case (0xFF)
                    {
                        If (Arg1)
                        {
                            EBFF = Arg2
                        }
                        Else
                        {
                            Local0 = EBFF /* \_SB_.PCI0.SBRG.EC0_.EBFF */
                        }
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (ECCM, 3, Serialized)
            {
                If (!ECAV ())
                {
                    Return (Ones)
                }

                Local0 = Zero
                Local1 = (Arg0 & 0xF0)
                Switch (Local1)
                {
                    Case (Zero)
                    {
                        Local0 = EC0X (Arg0, Arg1, Arg2)
                    }
                    Case (0x10)
                    {
                        Local0 = EC1X (Arg0, Arg1, Arg2)
                    }
                    Case (0x20)
                    {
                        Local0 = EC2X (Arg0, Arg1, Arg2)
                    }
                    Case (0x30)
                    {
                        Local0 = EC3X (Arg0, Arg1, Arg2)
                    }
                    Case (0x40)
                    {
                        Local0 = EC4X (Arg0, Arg1, Arg2)
                    }
                    Case (0x50)
                    {
                        Local0 = EC5X (Arg0, Arg1, Arg2)
                    }
                    Case (0x60)
                    {
                        Local0 = EC6X (Arg0, Arg1, Arg2)
                    }
                    Case (0x70)
                    {
                        Local0 = EC7X (Arg0, Arg1, Arg2)
                    }
                    Case (0x80)
                    {
                        Local0 = EC8X (Arg0, Arg1, Arg2)
                    }
                    Case (0x90)
                    {
                        Local0 = EC9X (Arg0, Arg1, Arg2)
                    }
                    Case (0xA0)
                    {
                        Local0 = ECAX (Arg0, Arg1, Arg2)
                    }
                    Case (0xB0)
                    {
                        Local0 = ECBX (Arg0, Arg1, Arg2)
                    }
                    Case (0xC0)
                    {
                        Local0 = ECCX (Arg0, Arg1, Arg2)
                    }
                    Case (0xD0)
                    {
                        Local0 = ECDX (Arg0, Arg1, Arg2)
                    }
                    Case (0xE0)
                    {
                        Local0 = ECEX (Arg0, Arg1, Arg2)
                    }
                    Case (0xF0)
                    {
                        Local0 = ECFX (Arg0, Arg1, Arg2)
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    Name (UR0I, 0x03)
    Name (UR1I, 0x04)
    Name (UR2I, 0x03)
    Name (UR3I, 0x04)
    Name (IC0I, 0x04)
    Name (IC1I, 0x0B)
    Name (IC2I, 0x0A)
    Name (IC3I, 0x06)
    Name (IC4I, 0x0E)
    Name (IC5I, 0x0F)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   4, 
            LPCE,   1, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDC9000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC7000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR0I & 0x0F))
                Return (BUF0) /* \_SB_.FUR0._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCA000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDC8000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR1I & 0x0F))
                Return (BUF0) /* \_SB_.FUR1._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {3}
                    Memory32Fixed (ReadWrite,
                        0xFEDCE000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCC000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR2I & 0x0F))
                Return (BUF0) /* \_SB_.FUR2._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDCF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEDCD000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (UR3I & 0x0F))
                Return (BUF0) /* \_SB_.FUR3._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {10}
                    Memory32Fixed (ReadWrite,
                        0xFEDC2000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC0I & 0x0F))
                Return (BUF0) /* \_SB_.I2CA._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {11}
                    Memory32Fixed (ReadWrite,
                        0xFEDC3000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC1I & 0x0F))
                Return (BUF0) /* \_SB_.I2CB._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {4}
                    Memory32Fixed (ReadWrite,
                        0xFEDC4000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC2I & 0x0F))
                Return (BUF0) /* \_SB_.I2CC._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {6}
                    Memory32Fixed (ReadWrite,
                        0xFEDC5000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC3I & 0x0F))
                Return (BUF0) /* \_SB_.I2CD._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {14}
                    Memory32Fixed (ReadWrite,
                        0xFEDC6000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC4I & 0x0F))
                Return (BUF0) /* \_SB_.I2CE._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IRQ (Edge, ActiveHigh, Exclusive, )
                        {15}
                    Memory32Fixed (ReadWrite,
                        0xFEDCB000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                CreateWordField (BUF0, One, IRQW)
                IRQW = (One << (IC5I & 0x0F))
                Return (BUF0) /* \_SB_.I2CF._CRS.BUF0 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM1F = One
            If ((EMMD != One))
            {
                IM4A = One
                IM58 = One
                IM4B = One
                IM57 = One
                IM6D = One
            }

            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
            {
                0x00000005,
            }
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y26)
                    IRQNoFlags (_Y27)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y26._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y27._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y28)
                    IRQNoFlags (_Y29)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y28._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y29._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2A)
                    IRQNoFlags (_Y2B)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y2A._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y2B._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y2C)
                    IRQNoFlags (_Y2D)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y2C._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y2D._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2E)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2F)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y30)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y31)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullNone, 0x0000,
                "\\_SB.GPIO", 0x00, ResourceConsumer, _Y32,
                )
                {   // Pin list
                    0x0000
                }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2E._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2E._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2F._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y30._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y30._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    If (((TMRQ == Zero) && (TMRQ != 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y31._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y31._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateWordField (CREI, 0x23, LIRQ)
                        CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        LLVL = TLVL /* \_SB_.TPM_.TLVL */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y2F._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != Zero) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateWordField (Arg0, 0x23, IRQ0)
                CreateWordField (CREI, 0x23, LIRQ)
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x98, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y32._MOD, LTRG)  // _MOD: Mode
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x99, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y32._POL, LLVL)  // _POL: Polarity
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == Zero) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == One))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == Zero))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (\)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ASUSWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46,  // BC...GgF
                /* 0018 */  0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00,  // .p...9..
                /* 0020 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02,  //  ..fBD..
                /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // r.......
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Name (CCAC, Zero)
            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                ECD2 = Arg0
            }

            Method (WMBC, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x43455053)
                    {
                        Return (SPEC (Arg2))
                    }
                    Case (0x50564544)
                    {
                        Return (DEVP (Arg2))
                    }
                    Case (0x50534453)
                    {
                        Return (SDSP (Arg2))
                    }
                    Case (0x50534447)
                    {
                        Return (GDSP (Arg2))
                    }
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x44495047)
                    {
                        Return (GPID ())
                    }
                    Case (0x5446424B)
                    {
                        Return (KBFT (Arg2))
                    }
                    Case (0x59454B48)
                    {
                        Return (HKEY ())
                    }
                    Case (0x4C455252)
                    {
                        Return (LERR (Arg2))
                    }
                    Case (0x47424F44)
                    {
                        Return (GBOD (Arg2))
                    }
                    Case (0x53424F44)
                    {
                        Return (SBOD (Arg2))
                    }
                    Case (0x47424F4E)
                    {
                        Return (GBON (Arg2))
                    }
                    Case (0x53415057)
                    {
                        Return (SAPW (Arg2))
                    }
                    Case (0x53555057)
                    {
                        Return (SUPW (Arg2))
                    }
                    Case (0x53555058)
                    {
                        Return (GLBN (Arg2))
                    }
                    Case (0x53555059)
                    {
                        Return (ISLG (Arg2))
                    }
                    Case (0x53555060)
                    {
                        Return (GLBO (Arg2))
                    }
                    Case (0x53555061)
                    {
                        Return (SLBO (Arg2))
                    }
                    Case (0x53424F47)
                    {
                        Return (SBOG (Arg2))
                    }
                    Case (0x4C444654)
                    {
                        Return (LDFT ())
                    }
                    Case (0x53465442)
                    {
                        Return (SFTB (Arg2))
                    }
                    Case (0x53444654)
                    {
                        Return (SDFT (Arg2))
                    }
                    Case (0x5346544D)
                    {
                        Return (SFTM ())
                    }
                    Case (0x4443544C)
                    {
                        Return (DCTL (Arg2))
                    }
                    Case (0x4746414E)
                    {
                        Return (GFAN (Arg2))
                    }
                    Case (0x4446414E)
                    {
                        Return (SFAN (Arg2))
                    }
                    Case (0x47464356)
                    {
                        Return (GFCV (Arg2))
                    }
                    Case (0x44464356)
                    {
                        Return (SFCV (Arg2))
                    }
                    Case (0x43455057)
                    {
                        Return (CKPW (Arg2))
                    }
                    Case (0x47544F44)
                    {
                        Return (GTOD (Arg2))
                    }
                    Case (0x53544F44)
                    {
                        Return (STOD (Arg2))
                    }
                    Case (0x4F505945)
                    {
                        Return (EYPO ())
                    }
                    Case (0x54505945)
                    {
                        Return (EYPT ())
                    }
                    Case (0x45505945)
                    {
                        Return (EYPE ())
                    }
                    Case (0x56505945)
                    {
                        Return (EYPF ())
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Mutex (ASMX, 0x00)
            Method (RIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    Local0 = PT08 /* \AMW0.RIOB.PT08 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, B_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    PT08 = B_DT /* \AMW0.WIOB.B_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    Local0 = PT16 /* \AMW0.RIOW.PT16 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateWordField (Arg0, 0x02, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    PT16 = W_DT /* \AMW0.WIOW.W_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    Local0 = PT32 /* \AMW0.RIOD.PT32 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateDWordField (Arg0, 0x02, D_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    PT32 = D_DT /* \AMW0.WIOD.D_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RMEM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_MM)
                    CreateByteField (Arg0, 0x04, W_SZ)
                    OperationRegion (TMMM, SystemMemory, ToInteger (W_MM), 0x04)
                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM08,   8
                    }

                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM16,   16
                    }

                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM32,   32
                    }

                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = MM08 /* \AMW0.RMEM.MM08 */
                        }
                        Case (0x02)
                        {
                            Local0 = MM16 /* \AMW0.RMEM.MM16 */
                        }
                        Case (0x04)
                        {
                            Local0 = MM32 /* \AMW0.RMEM.MM32 */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WMEM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_MM)
                    CreateByteField (Arg0, 0x04, W_SZ)
                    CreateDWordField (Arg0, 0x08, W_DT)
                    OperationRegion (TMMM, SystemMemory, W_MM, 0x04)
                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM08,   8
                    }

                    Field (TMMM, WordAcc, NoLock, Preserve)
                    {
                        MM16,   16
                    }

                    Field (TMMM, DWordAcc, NoLock, Preserve)
                    {
                        MM32,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            MM08 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Case (0x02)
                        {
                            MM16 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Case (0x04)
                        {
                            MM32 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    Local0 = TBUS /* \AMW0.RPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \AMW0.RPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \AMW0.RPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \AMW0.RPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = BCFG /* \AMW0.RPCI.BCFG */
                        }
                        Case (0x02)
                        {
                            Local0 = WCFG /* \AMW0.RPCI.WCFG */
                        }
                        Case (0x04)
                        {
                            Local0 = XCFG /* \AMW0.RPCI.XCFG */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    CreateDWordField (Arg0, 0x08, TDAT)
                    Local0 = TBUS /* \AMW0.WPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \AMW0.WPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \AMW0.WPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \AMW0.WPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            BCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Case (0x02)
                        {
                            WCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Case (0x04)
                        {
                            XCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    Local0 = DATP /* \AMW0.RIDX.DATP */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    CreateByteField (Arg0, 0x03, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    DATP = W_DT /* \AMW0.WIDX.W_DT */
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (RGBF, Buffer (0x10){})
            CreateDWordField (RGBF, Zero, REAX)
            CreateDWordField (RGBF, 0x04, REBX)
            CreateDWordField (RGBF, 0x08, RECX)
            CreateDWordField (RGBF, 0x0C, REDX)
            Name (MRBF, Buffer (0x08){})
            CreateDWordField (MRBF, Zero, MEDX)
            CreateDWordField (MRBF, 0x04, MEAX)
            Method (RDMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GMSR (W_ID)
                    MEDX = REDX /* \AMW0.REDX */
                    MEAX = REAX /* \AMW0.REAX */
                    Release (ASMX)
                    Return (MRBF) /* \AMW0.MRBF */
                }

                Return (Ones)
            }

            Method (WRMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    CreateDWordField (Arg0, 0x04, W_HI)
                    CreateDWordField (Arg0, 0x08, W_LW)
                    RECX = W_ID /* \AMW0.WRMR.W_ID */
                    REDX = W_HI /* \AMW0.WRMR.W_HI */
                    REAX = W_LW /* \AMW0.WRMR.W_LW */
                    Local0 = \_SB.SMSR (RGBF)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RCID, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.PRID (W_ID)
                    Release (ASMX)
                    Return (RGBF) /* \AMW0.RGBF */
                }

                Return (Ones)
            }

            Method (RDEC, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_ID)
                    Local0 = \_SB.PCI0.SBRG.EC0.ECCM (W_ID, Zero, Zero)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WREC, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_ID)
                    CreateByteField (Arg0, One, W_DT)
                    Local0 = \_SB.PCI0.SBRG.EC0.ECCM (W_ID, One, W_DT)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.RSIO.W_ID */
                        Local0 = \_SB.PCI0.SBRG.SIO1.DATA
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.WSIO.W_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = W_DT /* \AMW0.WSIO.W_DT */
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            OperationRegion (SHWM, SystemIO, IOHW, 0x0A)
            Field (SHWM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x05), 
                HIDX,   8, 
                HDAT,   8
            }

            IndexField (HIDX, HDAT, ByteAcc, Lock, Preserve)
            {
                Offset (0x4E), 
                BANK,   4
            }

            IndexField (\_SB.PCI0.SBRG.SIO1.INDX, \_SB.PCI0.SBRG.SIO1.DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                    ,   4, 
                HMLK,   1
            }

            Name (LCKS, Zero)
            Method (RHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \AMW0.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \AMW0.RHWM.W_BK */
                    HIDX = W_ID /* \AMW0.RHWM.W_ID */
                    Local0 = HDAT /* \AMW0.HDAT */
                    HMLK = LCKS /* \AMW0.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \AMW0.HMLK */
                    HMLK = Zero
                    BANK = W_BK /* \AMW0.WHWM.W_BK */
                    HIDX = W_ID /* \AMW0.WHWM.W_ID */
                    HDAT = W_DT /* \AMW0.WHWM.W_DT */
                    HMLK = LCKS /* \AMW0.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ATOH, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= 0x61) && (Arg0 <= 0x66)))
                {
                    Local0 = (Arg0 - 0x57)
                }

                If (((Arg0 >= 0x41) && (Arg0 <= 0x46)))
                {
                    Local0 = (Arg0 - 0x37)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x39)))
                {
                    Local0 = (Arg0 - 0x30)
                }

                Return (Local0)
            }

            Method (HTOA, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= Zero) && (Arg0 <= 0x09)))
                {
                    Local0 = (Arg0 + 0x30)
                }

                If (((Arg0 >= 0x0A) && (Arg0 <= 0x0F)))
                {
                    Local0 = (Arg0 - 0x0A)
                    Local0 += 0x41
                }

                Return (Local0)
            }

            Name (STRB, Buffer (0x0100){})
            Name (HEXB, Buffer (0x0100){})
            Method (STOH, 1, Serialized)
            {
                STRB = Arg0
                CreateByteField (Arg0, Zero, DCNT)
                DCNT >>= 0x02
                Local0 = Zero
                While ((Local0 < DCNT))
                {
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    Local3 = ATOH (DerefOf (STRB [Local1]))
                    Local3 <<= 0x04
                    Local3 += ATOH (DerefOf (STRB [Local2]))
                    HEXB [Local0] = Local3
                    Local0++
                }

                Return (HEXB) /* \AMW0.HEXB */
            }

            Method (HTOS, 2, Serialized)
            {
                HEXB = Arg0
                STRB [Zero] = (Arg1 << 0x02)
                STRB [One] = Zero
                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    Local3 = DerefOf (HEXB [Local0])
                    Local4 = (Local3 >> 0x04)
                    Local4 &= 0x0F
                    Local3 &= 0x0F
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    STRB [Local1] = HTOA (Local4)
                    Local1++
                    STRB [Local1] = Zero
                    STRB [Local2] = HTOA (Local3)
                    Local2++
                    STRB [Local2] = Zero
                    Local0++
                }

                Return (STRB) /* \AMW0.STRB */
            }

            Name (IDBF, Buffer (0x60){})
            Name (OSBF, Buffer (0x82){})
            Name (ODBF, Buffer (0x20){})
            Name (B_CT, Zero)
            Name (B_BK, Zero)
            Name (B_ID, Zero)
            Name (B_DT, Zero)
            Method (BRIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \AMW0.B_ID */
                        ODBF [Local1] = \_SB.PCI0.SBRG.SIO1.DATA
                        Local1++
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \AMW0.B_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = B_DT /* \AMW0.B_DT */
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (BRHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \AMW0.HMLK */
                    HMLK = Zero
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        BANK = B_BK /* \AMW0.B_BK */
                        HIDX = B_ID /* \AMW0.B_ID */
                        ODBF [Local1] = HDAT /* \AMW0.HDAT */
                        Local1++
                    }

                    HMLK = LCKS /* \AMW0.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    LCKS = HMLK /* \AMW0.HMLK */
                    HMLK = Zero
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        BANK = B_BK /* \AMW0.B_BK */
                        HIDX = B_ID /* \AMW0.B_ID */
                        HDAT = B_DT /* \AMW0.B_DT */
                    }

                    HMLK = LCKS /* \AMW0.LCKS */
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (ECBK, Zero)
            Method (BREC, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        ECBK = \_SB.PCI0.SBRG.EC0.EBFF
                        \_SB.PCI0.SBRG.EC0.EBFF = B_BK /* \AMW0.B_BK */
                        ODBF [Local1] = \_SB.PCI0.SBRG.EC0.ECCM (B_ID, Zero, Zero)
                        \_SB.PCI0.SBRG.EC0.EBFF = ECBK /* \AMW0.ECBK */
                        Local1++
                    }

                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWEC, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        ECBK = \_SB.PCI0.SBRG.EC0.EBFF
                        \_SB.PCI0.SBRG.EC0.EBFF = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.EC0.ECCM (B_ID, One, B_DT)
                        \_SB.PCI0.SBRG.EC0.EBFF = ECBK /* \AMW0.ECBK */
                    }

                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (WMBD, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Case (0x52494F42)
                    {
                        Return (RIOB (Arg2))
                    }
                    Case (0x57494F42)
                    {
                        Return (WIOB (Arg2))
                    }
                    Case (0x52494F57)
                    {
                        Return (RIOW (Arg2))
                    }
                    Case (0x57494F57)
                    {
                        Return (WIOW (Arg2))
                    }
                    Case (0x52494F44)
                    {
                        Return (RIOD (Arg2))
                    }
                    Case (0x57494F44)
                    {
                        Return (WIOD (Arg2))
                    }
                    Case (0x524D454D)
                    {
                        Return (RMEM (Arg2))
                    }
                    Case (0x574D454D)
                    {
                        Return (WMEM (Arg2))
                    }
                    Case (0x52504349)
                    {
                        Return (RPCI (Arg2))
                    }
                    Case (0x57504349)
                    {
                        Return (WPCI (Arg2))
                    }
                    Case (0x52494458)
                    {
                        Return (RIDX (Arg2))
                    }
                    Case (0x57494458)
                    {
                        Return (WIDX (Arg2))
                    }
                    Case (0x52444D52)
                    {
                        Return (RDMR (Arg2))
                    }
                    Case (0x57524D52)
                    {
                        Return (WRMR (Arg2))
                    }
                    Case (0x52434944)
                    {
                        Return (RCID (Arg2))
                    }
                    Case (0x52444543)
                    {
                        Return (RDEC (Arg2))
                    }
                    Case (0x57524543)
                    {
                        Return (WREC (Arg2))
                    }
                    Case (0x5253494F)
                    {
                        Return (RSIO (Arg2))
                    }
                    Case (0x5753494F)
                    {
                        Return (WSIO (Arg2))
                    }
                    Case (0x5248574D)
                    {
                        Return (RHWM (Arg2))
                    }
                    Case (0x5748574D)
                    {
                        Return (WHWM (Arg2))
                    }
                    Case (0x4252494F)
                    {
                        Return (BRIO (Arg2))
                    }
                    Case (0x4257494F)
                    {
                        Return (BWIO (Arg2))
                    }
                    Case (0x4252484D)
                    {
                        Return (BRHM (Arg2))
                    }
                    Case (0x4257484D)
                    {
                        Return (BWHM (Arg2))
                    }
                    Case (0x42524543)
                    {
                        Return (BREC (Arg2))
                    }
                    Case (0x42574543)
                    {
                        Return (BWEC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD2))
                {
                    Return (EID2) /* \AMW0.EID2 */
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Local1 = Zero
                If (ECD2)
                {
                    EID2 = Arg0
                    Notify (AMW0, 0xD2) // Hardware-Specific
                    Local1 = One
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x1C5F)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x4F, 0x1C, 0x00, 0x00, 0x82, 0xDA, 0x00, 0x00,  // O.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x29, 0xA7, 0x00, 0x01, 0x06, 0x18, 0x42,  // .).....B
                /* 0020 */  0x10, 0x07, 0x10, 0x0A, 0x2A, 0x9A, 0x42, 0x04,  // ....*.B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,  // ...8.`0.
                /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,  // <..F..eC
                /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,  // .d@.....
                /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D,  // .......M
                /* 0088 */  0x80, 0xB8, 0x61, 0xC8, 0xDA, 0x00, 0x04, 0x55,  // ..a....U
                /* 0090 */  0x98, 0x00, 0x5B, 0x30, 0x42, 0xA9, 0x0D, 0x46,  // ..[0B..F
                /* 0098 */  0x28, 0x8D, 0x21, 0x68, 0x18, 0x46, 0x89, 0x78,  // (.!h.F.x
                /* 00A0 */  0x48, 0x9D, 0xC1, 0x0A, 0x25, 0x62, 0x98, 0x10,  // H...%b..
                /* 00A8 */  0x11, 0x2A, 0xC3, 0x20, 0xC3, 0x0A, 0x15, 0x2D,  // .*. ...-
                /* 00B0 */  0x6E, 0x84, 0xF6, 0x07, 0x41, 0xA2, 0xAD, 0x58,  // n...A..X
                /* 00B8 */  0x43, 0x75, 0xA4, 0xD1, 0xA0, 0x86, 0x97, 0xE0,  // Cu......
                /* 00C0 */  0x70, 0x3D, 0xD4, 0x73, 0xEC, 0x5C, 0x80, 0x74,  // p=.s.\.t
                /* 00C8 */  0x60, 0x81, 0x04, 0x3F, 0x8B, 0x3A, 0xC7, 0x49,  // `..?.:.I
                /* 00D0 */  0x40, 0x12, 0x18, 0xEB, 0xF8, 0xD9, 0xC0, 0xF1,  // @.......
                /* 00D8 */  0xAE, 0x01, 0x35, 0xE3, 0xE3, 0x65, 0x82, 0xE0,  // ..5..e..
                /* 00E0 */  0x50, 0x43, 0xF4, 0x40, 0xC3, 0x9D, 0xC0, 0x21,  // PC.@...!
                /* 00E8 */  0x32, 0x40, 0xCF, 0xE9, 0x68, 0x30, 0x07, 0x00,  // 2@..h0..
                /* 00F0 */  0x3B, 0x9C, 0x8C, 0xEE, 0x01, 0xA5, 0x0A, 0x30,  // ;......0
                /* 00F8 */  0x3B, 0x66, 0x59, 0x04, 0xD2, 0x78, 0x0C, 0x7D,  // ;fY..x.}
                /* 0100 */  0xBA, 0xE7, 0x73, 0xC2, 0x09, 0x2C, 0x7F, 0x10,  // ..s..,..
                /* 0108 */  0xA8, 0x91, 0x19, 0xDA, 0x06, 0xA7, 0x25, 0xCC,  // ......%.
                /* 0110 */  0x90, 0x87, 0x7F, 0x58, 0x4C, 0x2C, 0x84, 0x3E,  // ...XL,.>
                /* 0118 */  0x08, 0x1E, 0x0F, 0xBC, 0xFF, 0xFF, 0x78, 0xC0,  // ......x.
                /* 0120 */  0xA3, 0xF8, 0x4C, 0x20, 0x84, 0x57, 0x82, 0xD8,  // ..L .W..
                /* 0128 */  0x1E, 0xD0, 0x73, 0x82, 0x81, 0xB1, 0x03, 0xB2,  // ..s.....
                /* 0130 */  0x5F, 0x01, 0x08, 0xC1, 0xCB, 0x1C, 0x91, 0x9C,  // _.......
                /* 0138 */  0x22, 0x68, 0x4C, 0xC6, 0x68, 0x15, 0x42, 0x43,  // "hL.h.BC
                /* 0140 */  0x08, 0x6D, 0x88, 0xB3, 0x8B, 0x7F, 0xF0, 0x86,  // .m......
                /* 0148 */  0x39, 0x77, 0x13, 0x14, 0x39, 0x02, 0x94, 0x98,  // 9w..9...
                /* 0150 */  0x11, 0xA0, 0x8E, 0x01, 0xD1, 0x43, 0x9F, 0x4D,  // .....C.M
                /* 0158 */  0xF4, 0xE3, 0x89, 0x72, 0x12, 0x07, 0xE4, 0x33,  // ...r...3
                /* 0160 */  0x83, 0x11, 0x82, 0x97, 0x7B, 0x48, 0x20, 0x9A,  // ....{H .
                /* 0168 */  0xE7, 0xA0, 0x13, 0xC3, 0x39, 0x1D, 0x02, 0x13,  // ....9...
                /* 0170 */  0xC4, 0xF3, 0x3C, 0x41, 0xA2, 0x2C, 0x55, 0x36,  // ..<A.,U6
                /* 0178 */  0x96, 0xEA, 0x41, 0x50, 0x41, 0x40, 0x9A, 0xBB,  // ..APA@..
                /* 0180 */  0x21, 0x4E, 0xDA, 0xC8, 0x81, 0x63, 0x54, 0x3F,  // !N...cT?
                /* 0188 */  0x6C, 0x2A, 0x02, 0x4E, 0x87, 0x0D, 0x8F, 0xDB,  // l*.N....
                /* 0190 */  0xF1, 0x49, 0x14, 0x7D, 0x40, 0x14, 0xCE, 0x61,  // .I.}@..a
                /* 0198 */  0xCF, 0x1C, 0x14, 0xC4, 0x80, 0x4E, 0x02, 0x21,  // .....N.!
                /* 01A0 */  0x27, 0x47, 0x01, 0x94, 0x96, 0x71, 0x92, 0x71,  // 'G...q.q
                /* 01A8 */  0x9D, 0xDA, 0x9B, 0x80, 0xA7, 0xF5, 0x58, 0x70,  // ......Xp
                /* 01B0 */  0x18, 0xC7, 0x75, 0xD6, 0x7E, 0x7E, 0xF8, 0xC6,  // ..u.~~..
                /* 01B8 */  0xE0, 0xF9, 0xF8, 0x2E, 0xC0, 0x35, 0x40, 0x68,  // .....5@h
                /* 01C0 */  0x46, 0x86, 0xB7, 0x1A, 0x40, 0x0A, 0xC6, 0x4F,  // F...@..O
                /* 01C8 */  0x02, 0x8F, 0x00, 0x26, 0xB0, 0xAE, 0x03, 0x01,  // ...&....
                /* 01D0 */  0xF4, 0xCB, 0x86, 0x87, 0xEF, 0x13, 0xC6, 0xE3,  // ........
                /* 01D8 */  0x45, 0x82, 0xFA, 0xEE, 0x03, 0xA0, 0x00, 0xF2,  // E.......
                /* 01E0 */  0x01, 0xC0, 0x4A, 0xEF, 0x00, 0x74, 0x0C, 0x21,  // ..J..t.!
                /* 01E8 */  0xC2, 0x44, 0x33, 0x3A, 0x97, 0xB0, 0x52, 0xFD,  // .D3:..R.
                /* 01F0 */  0xFF, 0x47, 0xCB, 0x0F, 0x2A, 0x1E, 0xAD, 0x41,  // .G..*..A
                /* 01F8 */  0x3C, 0x5A, 0x07, 0x1A, 0x2D, 0xFA, 0x98, 0x61,  // <Z..-..a
                /* 0200 */  0x85, 0xA3, 0x92, 0xCF, 0x09, 0x68, 0xB8, 0x30,  // .....h.0
                /* 0208 */  0x08, 0x0A, 0x3F, 0x70, 0x40, 0x03, 0x3C, 0xBD,  // ..?p@.<.
                /* 0210 */  0x37, 0x03, 0xCF, 0xC4, 0x70, 0x9E, 0x2F, 0x87,  // 7...p./.
                /* 0218 */  0xF3, 0x7C, 0xF9, 0x70, 0x7C, 0xA0, 0x80, 0x3F,  // .|.p|..?
                /* 0220 */  0x60, 0x2C, 0x41, 0x81, 0x13, 0x06, 0x39, 0x3C,  // `,A...9<
                /* 0228 */  0x46, 0xF0, 0x60, 0xA9, 0xAC, 0x71, 0xA1, 0xEE,  // F.`..q..
                /* 0230 */  0x07, 0x3E, 0xD1, 0x30, 0xEC, 0x43, 0x3D, 0x9A,  // .>.0.C=.
                /* 0238 */  0xB7, 0x84, 0x33, 0x7C, 0x9B, 0x38, 0xA8, 0x77,  // ..3|.8.w
                /* 0240 */  0x0F, 0x3B, 0x15, 0x6A, 0xD1, 0x21, 0xAC, 0x47,  // .;.j.!.G
                /* 0248 */  0xCA, 0x61, 0x8D, 0x16, 0xF6, 0x80, 0x9F, 0x3B,  // .a.....;
                /* 0250 */  0x7C, 0xCF, 0xE0, 0x57, 0x1A, 0x1F, 0x43, 0xE8,  // |..W..C.
                /* 0258 */  0x2A, 0x74, 0xAA, 0xE0, 0xA2, 0x20, 0x14, 0x6F,  // *t... .o
                /* 0260 */  0x2D, 0x1A, 0xFE, 0x59, 0x78, 0x5C, 0xAF, 0x18,  // -..Yx\..
                /* 0268 */  0xBE, 0x02, 0x3C, 0x9C, 0xF8, 0x0C, 0x10, 0x3F,  // ..<....?
                /* 0270 */  0xD0, 0x11, 0xBC, 0x88, 0xF8, 0xEC, 0xE3, 0xCB,  // ........
                /* 0278 */  0x8B, 0x0F, 0x19, 0xEC, 0x64, 0xC1, 0x43, 0x50,  // ....d.CP
                /* 0280 */  0x28, 0xC6, 0xE1, 0x00, 0x25, 0x1C, 0x46, 0x70,  // (...%.Fp
                /* 0288 */  0x06, 0xF1, 0xF0, 0x1C, 0xE4, 0x70, 0x80, 0x3E,  // .....p.>
                /* 0290 */  0x07, 0x79, 0x20, 0x6C, 0x10, 0x06, 0x39, 0x8F,  // .y l..9.
                /* 0298 */  0x97, 0x1F, 0x76, 0xB1, 0xC0, 0xFF, 0xFF, 0x2F,  // ..v..../
                /* 02A0 */  0x16, 0xC0, 0x2B, 0xCD, 0xA0, 0xD0, 0x7A, 0x06,  // ..+...z.
                /* 02A8 */  0x05, 0x01, 0xE3, 0xF9, 0xC1, 0xE3, 0xF5, 0x6C,  // .......l
                /* 02B0 */  0x3D, 0x2D, 0xF0, 0x8E, 0xD8, 0xE7, 0x0F, 0xE0,  // =-......
                /* 02B8 */  0x1C, 0xFE, 0xF0, 0x82, 0x8A, 0x3B, 0x24, 0x0A,  // .....;$.
                /* 02C0 */  0xE2, 0xB3, 0x81, 0xA3, 0x8C, 0x17, 0x3D, 0x13,  // ......=.
                /* 02C8 */  0x1F, 0x86, 0x7C, 0x5C, 0x78, 0xBA, 0xC1, 0x1C,  // ..|\x...
                /* 02D0 */  0x3E, 0xC0, 0x3D, 0x12, 0x1F, 0x3E, 0x80, 0xC7,  // >.=..>..
                /* 02D8 */  0xFF, 0xFF, 0xF0, 0x01, 0xFC, 0x24, 0x5A, 0xD4,  // .....$Z.
                /* 02E0 */  0x2A, 0xF4, 0xF0, 0x01, 0xAE, 0x20, 0x27, 0x24,  // *.... '$
                /* 02E8 */  0xB4, 0x9C, 0xC3, 0x07, 0x72, 0x22, 0x61, 0xA2,  // ....r"a.
                /* 02F0 */  0xFB, 0x8C, 0xF4, 0xE2, 0x61, 0x09, 0x07, 0x0F,  // ....a...
                /* 02F8 */  0x54, 0x78, 0x12, 0xC5, 0x3F, 0x15, 0xA0, 0x02,  // Tx..?...
                /* 0300 */  0x9F, 0x0A, 0x28, 0x88, 0x01, 0x7D, 0xA8, 0x80,  // ..(..}..
                /* 0308 */  0x33, 0x83, 0x67, 0x2F, 0xCC, 0x3C, 0x60, 0x9C,  // 3.g/.<`.
                /* 0310 */  0x91, 0x00, 0x5B, 0x87, 0x0A, 0xF0, 0xFE, 0xFF,  // ..[.....
                /* 0318 */  0x0F, 0x15, 0xC0, 0xE1, 0x80, 0x04, 0xC8, 0x92,  // ........
                /* 0320 */  0x78, 0x41, 0x7A, 0xA8, 0x00, 0xD7, 0x81, 0xD3,  // xAz.....
                /* 0328 */  0x87, 0x0A, 0x7E, 0x92, 0xB3, 0x28, 0x20, 0x1D,  // ..~..( .
                /* 0330 */  0xF1, 0x7C, 0xA8, 0x80, 0x71, 0x11, 0x32, 0xFC,  // .|..q.2.
                /* 0338 */  0x2F, 0xDD, 0xB1, 0x3C, 0x87, 0x91, 0x73, 0x05,  // /..<..s.
                /* 0340 */  0x3A, 0xF6, 0xC1, 0x00, 0x15, 0x74, 0xF4, 0x14,  // :....t..
                /* 0348 */  0xC4, 0x80, 0x4E, 0x71, 0x30, 0x40, 0xEB, 0x38,  // ..Nq0@.8
                /* 0350 */  0x57, 0xA0, 0x8E, 0x71, 0xC0, 0xEF, 0xFF, 0x7F,  // W..q....
                /* 0358 */  0xA6, 0x00, 0x4E, 0x22, 0x8E, 0x56, 0xA8, 0xE1,  // ..N".V..
                /* 0360 */  0x7A, 0xAC, 0x06, 0xF1, 0x58, 0x7D, 0x0C, 0xF5,  // z...X}..
                /* 0368 */  0x58, 0x71, 0xDF, 0x00, 0x1F, 0x01, 0xF0, 0x47,  // Xq.....G
                /* 0370 */  0x27, 0x1C, 0xD8, 0x73, 0x05, 0x60, 0xDA, 0xE3,  // '..s.`..
                /* 0378 */  0xB9, 0x02, 0x74, 0xD2, 0xCE, 0x3E, 0xE8, 0x80,  // ..t..>..
                /* 0380 */  0x6B, 0xD5, 0x49, 0x0C, 0x7F, 0x8E, 0x63, 0x04,  // k.I...c.
                /* 0388 */  0x43, 0x1D, 0xDE, 0x28, 0x84, 0xE3, 0x50, 0x28,  // C..(..P(
                /* 0390 */  0xCC, 0xC9, 0x80, 0xFE, 0xFF, 0x8F, 0xB0, 0x04,  // ........
                /* 0398 */  0x8E, 0x82, 0x78, 0x68, 0x0E, 0x73, 0x86, 0x03,  // ..xh.s..
                /* 03A0 */  0xCD, 0xB1, 0x00, 0xDE, 0xAD, 0x82, 0x1D, 0x0B,  // ........
                /* 03A8 */  0x60, 0x13, 0xF8, 0x58, 0x00, 0xBE, 0x38, 0xC3,  // `..X..8.
                /* 03B0 */  0x42, 0x8F, 0xD6, 0xF7, 0x3F, 0xDC, 0xFD, 0x21,  // B...?..!
                /* 03B8 */  0xCA, 0x4B, 0xB1, 0x0F, 0x39, 0x70, 0xC7, 0x05,  // .K..9p..
                /* 03C0 */  0x8E, 0xD3, 0x03, 0xE0, 0xEA, 0x20, 0x26, 0xA7,  // ..... &.
                /* 03C8 */  0xA7, 0x07, 0x70, 0x25, 0x39, 0x3D, 0xA0, 0x06,  // ..p%9=..
                /* 03D0 */  0xEC, 0xFF, 0xBF, 0x1E, 0x20, 0x9D, 0x13, 0xB0,  // .... ...
                /* 03D8 */  0x17, 0x6D, 0x06, 0x71, 0xA2, 0xCF, 0x23, 0x56,  // .m.q..#V
                /* 03E0 */  0x70, 0xC4, 0x41, 0x65, 0x27, 0x51, 0xF2, 0x23,  // p.Ae'Q.#
                /* 03E8 */  0x0E, 0x2A, 0xEB, 0xD8, 0x29, 0x88, 0x01, 0x7D,  // .*..)..}
                /* 03F0 */  0xA2, 0x04, 0x7C, 0xDC, 0x71, 0x80, 0xC5, 0x46,  // ..|.q..F
                /* 03F8 */  0x3D, 0x59, 0x1E, 0x79, 0xB2, 0x14, 0xC4, 0x93,  // =Y.y....
                /* 0400 */  0xF5, 0xA5, 0x02, 0x38, 0xDC, 0x70, 0x80, 0xFD,  // ...8.p..
                /* 0408 */  0xFF, 0xFF, 0x52, 0x01, 0x94, 0x1C, 0x4A, 0xBD,  // ..R...J.
                /* 0410 */  0x54, 0x80, 0x4C, 0xDE, 0x0D, 0x07, 0x1D, 0x72,  // T.L....r
                /* 0418 */  0xAD, 0xBA, 0xD7, 0xB1, 0x63, 0xAB, 0xC7, 0xED,  // ....c...
                /* 0420 */  0x9B, 0x34, 0x26, 0xD8, 0x0D, 0x07, 0x15, 0x89,  // .4&.....
                /* 0428 */  0x42, 0x81, 0xCE, 0x05, 0xA8, 0x08, 0x70, 0x14,  // B.....p.
                /* 0430 */  0xC4, 0x43, 0xF3, 0xB9, 0xC0, 0x4A, 0xCE, 0x05,  // .C...J..
                /* 0438 */  0x68, 0xEF, 0x17, 0x0A, 0x32, 0x38, 0xDF, 0x0B,  // h...28..
                /* 0440 */  0x0C, 0x53, 0xFC, 0x50, 0x74, 0xEF, 0xF1, 0xB9,  // .S.Pt...
                /* 0448 */  0x00, 0xDC, 0x57, 0x1C, 0x70, 0x19, 0x13, 0xA0,  // ..W.p...
                /* 0450 */  0x0D, 0x92, 0xDC, 0xC3, 0x3D, 0x2E, 0xDC, 0x38,  // ....=..8
                /* 0458 */  0x3C, 0xAA, 0x63, 0x8A, 0xF9, 0x1C, 0x17, 0xE4,  // <.c.....
                /* 0460 */  0x39, 0xCE, 0xF3, 0xC2, 0x9D, 0x1F, 0x80, 0xDB,  // 9.......
                /* 0468 */  0xFF, 0x7F, 0x60, 0xB0, 0x2E, 0x5C, 0x40, 0x5C,  // ..`..\@\
                /* 0470 */  0xA8, 0x49, 0x89, 0xE7, 0x07, 0x70, 0xDD, 0xBA,  // .I...p..
                /* 0478 */  0x7D, 0x2F, 0xC4, 0x49, 0xB9, 0xBB, 0xA2, 0x30,  // }/.I...0
                /* 0480 */  0x5E, 0x49, 0x62, 0xF8, 0x9E, 0x6A, 0x6C, 0xC3,  // ^Ib..jl.
                /* 0488 */  0x1C, 0xC0, 0xA9, 0x18, 0x27, 0xC1, 0xE0, 0x67,  // ....'..g
                /* 0490 */  0x07, 0x3A, 0x2E, 0x47, 0x26, 0xD1, 0x6D, 0xDF,  // .:.G&.m.
                /* 0498 */  0x47, 0x08, 0x1E, 0x73, 0xF4, 0x14, 0xC4, 0x80,  // G..s....
                /* 04A0 */  0xCE, 0x70, 0x52, 0x41, 0xAB, 0x00, 0xD1, 0x14,  // .pRA....
                /* 04A8 */  0x30, 0x37, 0x57, 0xC0, 0xDF, 0xFF, 0xFF, 0xE6,  // 07W.....
                /* 04B0 */  0x0A, 0xB0, 0xC2, 0xA5, 0x42, 0x8D, 0x52, 0x8F,  // ....B.R.
                /* 04B8 */  0x14, 0xE0, 0xBA, 0x03, 0xFA, 0x16, 0x86, 0x93,  // ........
                /* 04C0 */  0x04, 0xA4, 0x2B, 0xEB, 0x69, 0x3C, 0x00, 0xF8,  // ..+.i<..
                /* 04C8 */  0x4A, 0x01, 0xE3, 0xE2, 0xC9, 0x8E, 0x38, 0xFC,  // J.....8.
                /* 04D0 */  0x76, 0xED, 0x63, 0x01, 0x30, 0xFF, 0xFF, 0x5F,  // v.c.0.._
                /* 04D8 */  0x09, 0xC1, 0x7A, 0x2C, 0x00, 0xDE, 0x22, 0x5D,  // ..z,.."]
                /* 04E0 */  0x5A, 0x34, 0x7B, 0x3F, 0x06, 0xD9, 0xB1, 0x00,  // Z4{?....
                /* 04E8 */  0x2D, 0x0A, 0x48, 0x1E, 0x67, 0x41, 0x86, 0xF6,  // -.H.gA..
                /* 04F0 */  0x58, 0xF6, 0xAA, 0xE7, 0x51, 0x3D, 0x03, 0x44,  // X...Q=.D
                /* 04F8 */  0x38, 0x91, 0x10, 0x09, 0x2C, 0xE3, 0x58, 0x80,  // 8...,.X.
                /* 0500 */  0xA2, 0xF0, 0x25, 0x1E, 0xEE, 0xCD, 0x13, 0xCE,  // ..%.....
                /* 0508 */  0x1C, 0x30, 0x53, 0x7E, 0x71, 0xE1, 0xE7, 0x02,  // .0S~q...
                /* 0510 */  0xC0, 0xCE, 0xFF, 0xFF, 0x5C, 0x00, 0x4C, 0x94,  // ....\.L.
                /* 0518 */  0x2A, 0xB5, 0x28, 0xF3, 0x7E, 0x0B, 0xDE, 0x01,  // *.(.~...
                /* 0520 */  0xFB, 0x7E, 0xEB, 0x73, 0x01, 0x53, 0x38, 0x0B,  // .~.s.S8.
                /* 0528 */  0x21, 0x04, 0xE9, 0xF3, 0x08, 0xA0, 0x13, 0x80,  // !.......
                /* 0530 */  0xCF, 0x05, 0xEC, 0xB0, 0xE6, 0x73, 0x01, 0x3F,  // .....s.?
                /* 0538 */  0x8C, 0x38, 0xCA, 0x79, 0x0D, 0x25, 0x1E, 0x8E,  // .8.y.%..
                /* 0540 */  0x82, 0xF8, 0x82, 0x0B, 0xEF, 0x5C, 0x00, 0x38,  // .....\.8
                /* 0548 */  0x18, 0x96, 0x81, 0xF9, 0xB0, 0xF8, 0x5C, 0xE1,  // ......\.
                /* 0550 */  0x1C, 0x85, 0x80, 0xDF, 0x55, 0xE1, 0xC9, 0xD2,  // ....U...
                /* 0558 */  0xE3, 0xF2, 0xFF, 0xFF, 0x30, 0xF7, 0xEC, 0x08,  // ....0...
                /* 0560 */  0xE4, 0x7D, 0x2A, 0xF4, 0x78, 0x7A, 0x00, 0x57,  // .}*.xz.W
                /* 0568 */  0x8E, 0xD3, 0x03, 0x5A, 0x0D, 0x90, 0x26, 0xF4,  // ...Z..&.
                /* 0570 */  0xF4, 0x00, 0x33, 0xFF, 0x51, 0x0D, 0x95, 0xFC,  // ..3.Q...
                /* 0578 */  0x7E, 0x0B, 0x8A, 0x73, 0x01, 0x38, 0x2E, 0x6B,  // ~..s.8.k
                /* 0580 */  0xC0, 0xEC, 0x56, 0x80, 0xBD, 0xAC, 0x01, 0x8B,  // ..V.....
                /* 0588 */  0x0B, 0x0E, 0xFC, 0xFF, 0xFF, 0xCD, 0x03, 0xF8,  // ........
                /* 0590 */  0x5D, 0x6F, 0x01, 0x59, 0x77, 0x8A, 0xD7, 0x5B,  // ]o.Yw..[
                /* 0598 */  0x90, 0x49, 0x5B, 0x85, 0xEE, 0x93, 0xB8, 0x80,  // .I[.....
                /* 05A0 */  0x6B, 0xD1, 0x05, 0x07, 0x0F, 0xFF, 0x80, 0xCB,  // k.......
                /* 05A8 */  0x75, 0x5E, 0x99, 0xC9, 0x21, 0xC0, 0x71, 0x4E,  // u^..!.qN
                /* 05B0 */  0xE1, 0xA8, 0x20, 0x14, 0x8A, 0x7D, 0x32, 0x40,  // .. ..}2@
                /* 05B8 */  0x05, 0x1D, 0x3D, 0x05, 0x31, 0xA0, 0x53, 0x5C,  // ..=.1.S\
                /* 05C0 */  0x5D, 0xD1, 0x3A, 0x6E, 0x5C, 0x9E, 0x82, 0x06,  // ].:n\...
                /* 05C8 */  0x71, 0x46, 0x67, 0xE5, 0x43, 0x05, 0xF8, 0xFF,  // qFg.C...
                /* 05D0 */  0xFF, 0xB7, 0x56, 0x30, 0x1D, 0x2A, 0x80, 0xC5,  // ..V0.*..
                /* 05D8 */  0xE5, 0x18, 0xEE, 0xA1, 0x02, 0xF0, 0x12, 0xE9,  // ........
                /* 05E0 */  0xDA, 0x82, 0xFE, 0x2C, 0xF8, 0xA2, 0x00, 0x7B,  // ...,...{
                /* 05E8 */  0x64, 0x60, 0x3F, 0x2E, 0xF8, 0x82, 0x04, 0x3C,  // d`?....<
                /* 05F0 */  0xFF, 0xFF, 0xA7, 0x0F, 0xF0, 0xEB, 0xBC, 0x20,  // ....... 
                /* 05F8 */  0x81, 0x4E, 0xDB, 0xE9, 0x03, 0x9D, 0xF0, 0x82,  // .N......
                /* 0600 */  0x84, 0x18, 0x55, 0xC8, 0x23, 0x31, 0xF0, 0x91,  // ..U.#1..
                /* 0608 */  0x3D, 0x17, 0x1A, 0xE1, 0xDD, 0xFC, 0x71, 0xC1,  // =.....q.
                /* 0610 */  0xE8, 0x26, 0x98, 0xE7, 0xF4, 0x81, 0x4A, 0x42,  // .&....JB
                /* 0618 */  0xA1, 0x24, 0x47, 0x08, 0x94, 0xF6, 0x23, 0x04,  // .$G...#.
                /* 0620 */  0x05, 0xF1, 0x75, 0x9D, 0x1F, 0x0E, 0xF0, 0x43,  // ..u....C
                /* 0628 */  0x7E, 0x1C, 0x78, 0x85, 0xF0, 0xA0, 0xD8, 0x44,  // ~.x....D
                /* 0630 */  0x60, 0xDC, 0x92, 0x80, 0xE7, 0x1D, 0xD5, 0xE3,  // `.......
                /* 0638 */  0xC2, 0x0D, 0xC6, 0xC7, 0x87, 0xB3, 0x3A, 0xA5,  // ......:.
                /* 0640 */  0xA3, 0x02, 0x1E, 0x53, 0xF6, 0xA8, 0xC0, 0xF4,  // ...S....
                /* 0648 */  0xFF, 0xBF, 0x4A, 0x01, 0x26, 0x6F, 0x1F, 0xE0,  // ..J.&o..
                /* 0650 */  0xB8, 0x4A, 0x01, 0x1E, 0xBC, 0x0A, 0x35, 0x78,  // .J....5x
                /* 0658 */  0x95, 0x02, 0x99, 0xB2, 0xDB, 0x07, 0x8A, 0xC3,  // ........
                /* 0660 */  0xF9, 0x6E, 0x1F, 0x08, 0xAB, 0x87, 0x7D, 0x72,  // .n....}r
                /* 0668 */  0x02, 0x78, 0x7F, 0x80, 0x71, 0xF9, 0x00, 0xCB,  // .x..q...
                /* 0670 */  0xFF, 0xFF, 0xF2, 0x01, 0xF0, 0xFF, 0xFF, 0x7F,  // ........
                /* 0678 */  0xF9, 0x00, 0x4C, 0x59, 0xBD, 0x7C, 0x80, 0x4C,  // ..LY.|.L
                /* 0680 */  0xE0, 0xE5, 0x03, 0x35, 0x52, 0xC7, 0x3C, 0x17,  // ...5R.<.
                /* 0688 */  0x22, 0x86, 0x16, 0xE3, 0x09, 0xE1, 0xF5, 0xA1,  // ".......
                /* 0690 */  0x63, 0x01, 0xE6, 0x8F, 0x86, 0x00, 0x05, 0xFE,  // c.......
                /* 0698 */  0xFF, 0x47, 0x43, 0x80, 0xE7, 0x62, 0x0F, 0x20,  // .GC..b. 
                /* 06A0 */  0xD0, 0xFE, 0xFF, 0x07, 0x10, 0x78, 0xC2, 0x8E,  // .....x..
                /* 06A8 */  0x86, 0xE8, 0x78, 0x6B, 0x11, 0xF0, 0xB3, 0xD0,  // ..xk....
                /* 06B0 */  0xFB, 0x07, 0x9C, 0x63, 0xC8, 0xEB, 0x82, 0x07,  // ...c....
                /* 06B8 */  0xFF, 0x0C, 0xE0, 0x30, 0xA7, 0x0F, 0x54, 0x8C,  // ...0..T.
                /* 06C0 */  0xD3, 0x07, 0xA0, 0x3B, 0xCE, 0xE9, 0x03, 0x15,  // ...;....
                /* 06C8 */  0xE0, 0xF4, 0x41, 0x41, 0x7C, 0xFA, 0x00, 0xDC,  // ..AA|...
                /* 06D0 */  0xFC, 0xFF, 0x03, 0x0D, 0x05, 0x35, 0x2C, 0x8F,  // .....5,.
                /* 06D8 */  0xC3, 0x47, 0x05, 0xFC, 0x41, 0x01, 0x77, 0xF8,  // .G..A.w.
                /* 06E0 */  0x00, 0x7E, 0x8A, 0x4F, 0x11, 0xE4, 0xBE, 0xE0,  // .~.O....
                /* 06E8 */  0x23, 0x83, 0x0F, 0x1F, 0xC0, 0xDC, 0xEC, 0xE1,  // #.......
                /* 06F0 */  0x03, 0x74, 0xE2, 0x0E, 0x1F, 0x28, 0x51, 0x10,  // .t...(Q.
                /* 06F8 */  0x8A, 0x78, 0x98, 0x82, 0x7E, 0xB8, 0xF3, 0xF1,  // .x..~...
                /* 0700 */  0xD0, 0xC7, 0x07, 0x72, 0x94, 0x02, 0xEA, 0xFF,  // ...r....
                /* 0708 */  0xFF, 0xA3, 0x14, 0xC0, 0xA3, 0x9B, 0x02, 0xFC,  // ........
                /* 0710 */  0xA3, 0x14, 0xE0, 0xE5, 0xFF, 0x7F, 0xFC, 0x00,  // ........
                /* 0718 */  0x3E, 0x82, 0x8F, 0x52, 0xA0, 0x3E, 0x7E, 0xF8,  // >..R.>~.
                /* 0720 */  0x28, 0xE5, 0x6B, 0x2E, 0x3B, 0x7E, 0x80, 0x21,  // (.k.;~.!
                /* 0728 */  0xCA, 0xF1, 0x03, 0x15, 0x82, 0x42, 0x21, 0xCE,  // .....B!.
                /* 0730 */  0x10, 0x28, 0xD9, 0x67, 0x08, 0x0A, 0xE2, 0xE1,  // .(.g....
                /* 0738 */  0xF9, 0xF8, 0x01, 0x98, 0x38, 0x0B, 0xC3, 0x19,  // ....8...
                /* 0740 */  0x2B, 0xFC, 0x63, 0x2E, 0x30, 0xFB, 0xFF, 0x1F,  // +.c.0...
                /* 0748 */  0x73, 0x01, 0xFE, 0x19, 0x3E, 0x7C, 0x80, 0x2E,  // s...>|..
                /* 0750 */  0xD4, 0x3A, 0x74, 0xF8, 0xC0, 0x49, 0x3B, 0x7C,  // .:t..I;|
                /* 0758 */  0x20, 0x8E, 0x0F, 0x30, 0x90, 0x9E, 0xCF, 0xB0,  //  ..0....
                /* 0760 */  0x32, 0x0E, 0x1F, 0x28, 0x0A, 0x42, 0xA3, 0xFF,  // 2..(.B..
                /* 0768 */  0xFF, 0xD1, 0x80, 0x47, 0x3E, 0x1A, 0x50, 0x10,  // ...G>.P.
                /* 0770 */  0xB3, 0x39, 0xCF, 0xCD, 0x02, 0xAD, 0xE8, 0x0C,  // .9......
                /* 0778 */  0x8A, 0x9C, 0x08, 0xBC, 0x53, 0x3B, 0xF0, 0x3C,  // ....S;.<
                /* 0780 */  0x5A, 0x00, 0x16, 0xCF, 0x53, 0xE0, 0x3C, 0x5A,  // Z...S.<Z
                /* 0788 */  0x00, 0x9F, 0xFF, 0xFF, 0xD1, 0x02, 0x3C, 0x1E,  // ......<.
                /* 0790 */  0x7D, 0x2A, 0x3C, 0x5A, 0x80, 0xEC, 0xCC, 0xE9,  // }*<Z....
                /* 0798 */  0xA3, 0x05, 0x1F, 0xB0, 0x45, 0x01, 0x69, 0x62,  // ....E.ib
                /* 07A0 */  0x07, 0xF1, 0xA4, 0x13, 0xF1, 0x7C, 0x83, 0xD6,  // .....|..
                /* 07A8 */  0x8C, 0xA2, 0x71, 0x86, 0x0F, 0xFD, 0x2C, 0x99,  // ..q...,.
                /* 07B0 */  0xC0, 0x32, 0x0E, 0x47, 0x14, 0xC2, 0x14, 0x3E,  // .2.G...>
                /* 07B8 */  0x17, 0x00, 0xFF, 0xE3, 0x3B, 0x3F, 0x17, 0x00,  // ....;?..
                /* 07C0 */  0x8E, 0xA4, 0x6A, 0x94, 0x28, 0xF3, 0x5C, 0x00,  // ..j.(.\.
                /* 07C8 */  0xAE, 0x0C, 0x27, 0x18, 0xD4, 0xFF, 0x1F, 0xD6,  // ..'.....
                /* 07D0 */  0x4A, 0x4E, 0x30, 0x08, 0x8D, 0xB7, 0x02, 0x1D,  // JN0.....
                /* 07D8 */  0x0A, 0x9E, 0x61, 0x30, 0x04, 0xD3, 0x1F, 0x0B,  // ..a0....
                /* 07E0 */  0xE8, 0xA0, 0x9C, 0x9B, 0x44, 0xB9, 0x8F, 0x05,  // ....D...
                /* 07E8 */  0xA8, 0xA4, 0xC7, 0x02, 0x0A, 0xE2, 0xC3, 0x32,  // .......2
                /* 07F0 */  0x81, 0x90, 0x91, 0x63, 0x01, 0xEA, 0x30, 0xE6,  // ...c..0.
                /* 07F8 */  0x61, 0x30, 0xAD, 0xC3, 0xD0, 0x98, 0x0E, 0xFE,  // a0......
                /* 0800 */  0xAD, 0xC0, 0xD7, 0x85, 0x27, 0x17, 0xF0, 0x8E,  // ....'...
                /* 0808 */  0xD4, 0x87, 0x02, 0x70, 0x88, 0xBB, 0xB8, 0x00,  // ...p....
                /* 0810 */  0x54, 0xF9, 0xFF, 0xDF, 0x28, 0x80, 0x89, 0xC2,  // T...(...
                /* 0818 */  0x1F, 0xC5, 0x8B, 0x0B, 0xC8, 0x04, 0x5D, 0xE4,  // ......].
                /* 0820 */  0xD1, 0xB1, 0x6E, 0x14, 0x88, 0x83, 0x54, 0xE8,  // ..n...T.
                /* 0828 */  0x18, 0x47, 0x72, 0x1C, 0x91, 0x9F, 0x5D, 0xB0,  // .Gr...].
                /* 0830 */  0x04, 0xBE, 0x2A, 0xFA, 0x52, 0xC1, 0xE5, 0x53,  // ..*.R..S
                /* 0838 */  0x48, 0xFE, 0x0D, 0x0B, 0x25, 0xF8, 0x6E, 0x41,  // H...%.nA
                /* 0840 */  0x41, 0x3C, 0x3A, 0x27, 0xB9, 0x61, 0xA1, 0xB5,  // A<:'.a..
                /* 0848 */  0x80, 0x68, 0x1E, 0x38, 0x9D, 0xD3, 0xD0, 0xB4,  // .h.8....
                /* 0850 */  0x7C, 0xBD, 0x02, 0xA6, 0x21, 0x6E, 0x0F, 0x68,  // |...!n.h
                /* 0858 */  0x19, 0x20, 0xBA, 0x77, 0xE0, 0xAE, 0x8A, 0xC0,  // . .w....
                /* 0860 */  0xEC, 0xE8, 0x80, 0x3D, 0x78, 0xF0, 0xFF, 0xFF,  // ...=x...
                /* 0868 */  0x55, 0x11, 0x60, 0xDA, 0xCD, 0x48, 0x57, 0x45,  // U.`..HWE
                /* 0870 */  0xB0, 0x5D, 0xC0, 0x50, 0x57, 0x45, 0x02, 0xA4,  // .].PWE..
                /* 0878 */  0x9B, 0x11, 0xE6, 0xEA, 0x1A, 0xE4, 0x11, 0xC0,  // ........
                /* 0880 */  0x07, 0xC2, 0xE3, 0x0A, 0xF5, 0x74, 0xE4, 0xC9,  // .....t..
                /* 0888 */  0xBC, 0x04, 0xF0, 0x3B, 0x18, 0xB8, 0xFE, 0xFF,  // ...;....
                /* 0890 */  0x77, 0x30, 0x80, 0x11, 0x36, 0x8F, 0x38, 0x40,  // w0..6.8@
                /* 0898 */  0xE4, 0x7C, 0x63, 0xED, 0x23, 0xD1, 0xD9, 0x20,  // .|c.#.. 
                /* 08A0 */  0xC8, 0x23, 0x80, 0xC1, 0x7D, 0x0B, 0xF0, 0x10,  // .#..}...
                /* 08A8 */  0x1E, 0x71, 0x80, 0xC3, 0x3C, 0x70, 0x47, 0x1C,  // .q..<pG.
                /* 08B0 */  0x30, 0xFF, 0xFF, 0x8F, 0x38, 0x00, 0xFF, 0xFF,  // 0...8...
                /* 08B8 */  0xFF, 0x07, 0x0F, 0x30, 0xCA, 0x94, 0xEA, 0x50,  // ...0...P
                /* 08C0 */  0xE2, 0xC1, 0x03, 0x5C, 0x12, 0x25, 0x5C, 0x59,  // ...\.%\Y
                /* 08C8 */  0xB1, 0x41, 0x57, 0xA2, 0xD3, 0xF3, 0x23, 0x0E,  // .AW...#.
                /* 08D0 */  0x87, 0x3D, 0xB0, 0x97, 0x0E, 0x1F, 0x31, 0x7C,  // .=....1|
                /* 08D8 */  0xC6, 0x49, 0xE0, 0x68, 0x80, 0x3A, 0x76, 0xF0,  // .I.h.:v.
                /* 08E0 */  0x50, 0x30, 0x8A, 0x7D, 0x2E, 0x40, 0x05, 0x3D,  // P0.}.@.=
                /* 08E8 */  0x17, 0x50, 0x10, 0x03, 0x3A, 0xC5, 0x65, 0x12,  // .P..:.e.
                /* 08F0 */  0x3D, 0x64, 0xCF, 0x82, 0x4D, 0xF5, 0x1C, 0x4E,  // =d..M..N
                /* 08F8 */  0xEA, 0x61, 0x12, 0xF0, 0x15, 0x6E, 0x95, 0x1A,  // .a...n..
                /* 0900 */  0x2B, 0x8F, 0x73, 0x70, 0xA1, 0x20, 0xB6, 0x70,  // +.sp. .p
                /* 0908 */  0xA4, 0x00, 0x62, 0xFF, 0xFF, 0xC3, 0x24, 0x30,  // ..b...$0
                /* 0910 */  0x08, 0x72, 0xAE, 0x41, 0x5F, 0x59, 0x7C, 0xA6,  // .r.A_Y|.
                /* 0918 */  0xC2, 0x1D, 0x3B, 0x80, 0xDF, 0xB1, 0x06, 0x3B,  // ..;....;
                /* 0920 */  0x74, 0x58, 0xD7, 0x69, 0x7B, 0xC7, 0x10, 0xE6,  // tX.i{...
                /* 0928 */  0x53, 0x86, 0x8F, 0x90, 0x6C, 0x58, 0xE0, 0x86,  // S...lX..
                /* 0930 */  0xF2, 0xD0, 0xC1, 0x17, 0x65, 0xE8, 0x68, 0x68,  // ....e.hh
                /* 0938 */  0xA3, 0xBE, 0x1F, 0xF8, 0x62, 0x11, 0xF5, 0xF9,  // ....b...
                /* 0940 */  0xC3, 0xA3, 0x02, 0xFB, 0x4F, 0x44, 0x63, 0x07,  // ....ODc.
                /* 0948 */  0xE1, 0x09, 0xE6, 0xFF, 0xFF, 0x04, 0x03, 0xAC,  // ........
                /* 0950 */  0x75, 0x1A, 0xD4, 0xE8, 0xF1, 0x04, 0x03, 0x2E,  // u.......
                /* 0958 */  0x51, 0x27, 0x18, 0xF4, 0xC9, 0xC5, 0x67, 0x3E,  // Q'....g>
                /* 0960 */  0xCC, 0x09, 0x06, 0x46, 0x98, 0x13, 0x0C, 0x2A,  // ...F...*
                /* 0968 */  0x06, 0x8C, 0x62, 0x1C, 0x43, 0x50, 0xC2, 0x8F,  // ..b.CP..
                /* 0970 */  0x21, 0x14, 0xC4, 0xC7, 0x10, 0x9F, 0x60, 0x00,  // !.....`.
                /* 0978 */  0x13, 0x19, 0x2E, 0x0E, 0x68, 0x15, 0x57, 0x10,  // ....h.W.
                /* 0980 */  0xE4, 0x25, 0x0C, 0x58, 0xFD, 0xFF, 0x6F, 0x0D,  // .%.X..o.
                /* 0988 */  0x30, 0x72, 0x1C, 0x40, 0xD0, 0x37, 0x74, 0x1F,  // 0r.@.7t.
                /* 0990 */  0x40, 0x60, 0xCC, 0x09, 0xAC, 0x87, 0x02, 0x1F,  // @`......
                /* 0998 */  0xD4, 0xC0, 0x76, 0x8A, 0xF7, 0xED, 0x03, 0xFE,  // ..v.....
                /* 09A0 */  0x98, 0xC0, 0x8A, 0xE4, 0x69, 0x83, 0xED, 0x2C,  // ....i..,
                /* 09A8 */  0x07, 0x58, 0x3C, 0xBA, 0x60, 0xFF, 0xFF, 0x67,  // .X<.`..g
                /* 09B0 */  0x39, 0xC0, 0xCE, 0xD1, 0x45, 0x67, 0x39, 0x90,  // 9...Eg9.
                /* 09B8 */  0xE9, 0xFF, 0x27, 0xE8, 0x4C, 0x8A, 0x53, 0x01,  // ..'.L.S.
                /* 09C0 */  0xA4, 0xB3, 0x1C, 0x1B, 0xC7, 0x4B, 0x8A, 0x87,  // .....K..
                /* 09C8 */  0xF9, 0x62, 0xE9, 0x7B, 0x0A, 0x1B, 0x5F, 0x9C,  // .b.{.._.
                /* 09D0 */  0xA7, 0x80, 0x17, 0xD0, 0x87, 0x00, 0x67, 0x7E,  // ......g~
                /* 09D8 */  0xB2, 0xE8, 0xF0, 0xC2, 0xD3, 0xC2, 0x48, 0xF9,  // ......H.
                /* 09E0 */  0x99, 0x14, 0xA5, 0xF5, 0x4C, 0x4A, 0x41, 0x3C,  // ....LJA<
                /* 09E8 */  0x3A, 0x1F, 0x5E, 0x00, 0x9B, 0xFF, 0xFF, 0xC3,  // :.^.....
                /* 09F0 */  0x0B, 0x30, 0xB8, 0x75, 0x00, 0x0B, 0xC9, 0xBF,  // .0.u....
                /* 09F8 */  0x0A, 0x5D, 0x06, 0xB8, 0x48, 0x18, 0x0D, 0xC9,  // .]..H...
                /* 0A00 */  0x20, 0x06, 0xF4, 0x85, 0x14, 0xF0, 0x72, 0xDD,  //  .....r.
                /* 0A08 */  0xF3, 0x95, 0x01, 0x7F, 0xF5, 0x61, 0xA7, 0x72,  // .....a.r
                /* 0A10 */  0xDF, 0x2C, 0x4C, 0xF0, 0xAC, 0xEC, 0x9B, 0x1C,  // .,L.....
                /* 0A18 */  0xB8, 0x0F, 0x0D, 0xE0, 0x1A, 0x14, 0xCC, 0x41,  // .......A
                /* 0A20 */  0x9C, 0x8B, 0xCF, 0x5D, 0x1E, 0x14, 0xFE, 0xFF,  // ...]....
                /* 0A28 */  0x7F, 0x7D, 0x01, 0xDF, 0xA0, 0xC0, 0x0F, 0x1B,  // .}......
                /* 0A30 */  0xF0, 0xDD, 0xE0, 0xC0, 0x81, 0xC5, 0xFD, 0xCC,  // ........
                /* 0A38 */  0x83, 0x02, 0x16, 0x03, 0x07, 0x16, 0x37, 0x10,  // ......7.
                /* 0A40 */  0x0F, 0x0A, 0x5C, 0x97, 0x46, 0x0F, 0x0A, 0x77,  // ..\.F..w
                /* 0A48 */  0xCC, 0xB0, 0x48, 0x40, 0xDD, 0x42, 0x9E, 0x4F,  // ..H@.B.O
                /* 0A50 */  0x4E, 0x1C, 0x33, 0x2A, 0xB0, 0x7B, 0x18, 0x15,  // N.3*.{..
                /* 0A58 */  0xF4, 0xFF, 0xFF, 0xA8, 0xC0, 0x35, 0x73, 0xCC,  // .....5s.
                /* 0A60 */  0xA8, 0xC0, 0x0E, 0xE3, 0x51, 0x81, 0xEB, 0x3E,  // ....Q..>
                /* 0A68 */  0x05, 0xBC, 0xB5, 0x3A, 0xBC, 0x59, 0x82, 0x4D,  // ...:.Y.M
                /* 0A70 */  0xEB, 0x7D, 0x0A, 0x9D, 0xF8, 0x61, 0xA1, 0x9B,  // .}...a..
                /* 0A78 */  0x25, 0xBB, 0x4F, 0xC1, 0xCE, 0x77, 0x9F, 0x42,  // %.O..w.B
                /* 0A80 */  0x25, 0x83, 0x51, 0xB2, 0x33, 0x0F, 0x2A, 0xCB,  // %.Q.3.*.
                /* 0A88 */  0x99, 0x87, 0x82, 0xD8, 0xC4, 0x7D, 0x0A, 0x28,  // .....}.(
                /* 0A90 */  0xFD, 0xFF, 0xEF, 0x53, 0x80, 0xBF, 0x41, 0xC3,  // ...S..A.
                /* 0A98 */  0x39, 0x11, 0xE1, 0x07, 0x0D, 0xD6, 0xAB, 0x03,  // 9.......
                /* 0AA0 */  0x1F, 0x34, 0x78, 0xA6, 0x04, 0xF3, 0xF8, 0x81,  // .4x.....
                /* 0AA8 */  0x99, 0x12, 0x58, 0x8F, 0x4C, 0xE0, 0x9B, 0x12,  // ..X.L...
                /* 0AB0 */  0x9C, 0xE3, 0x10, 0x7E, 0x4A, 0xFC, 0xFF, 0x3F,  // ...~J..?
                /* 0AB8 */  0x25, 0xB0, 0x5D, 0x98, 0xC0, 0x37, 0x25, 0x98,  // %.]..7%.
                /* 0AC0 */  0xA3, 0x06, 0xFF, 0x79, 0x09, 0x7C, 0x47, 0x58,  // ...y.|GX
                /* 0AC8 */  0x4F, 0x09, 0x77, 0xCB, 0xF5, 0x59, 0x08, 0xC6,  // O.w..Y..
                /* 0AD0 */  0x98, 0xC0, 0x7A, 0x5C, 0x02, 0xDF, 0x98, 0xE0,  // ..z\....
                /* 0AD8 */  0x0E, 0x1B, 0xFC, 0x87, 0x25, 0xF0, 0xFD, 0xFF,  // ....%...
                /* 0AE0 */  0x4F, 0xB9, 0x80, 0x45, 0x18, 0x9F, 0x72, 0x01,  // O..E..r.
                /* 0AE8 */  0x4F, 0xB7, 0x28, 0x9D, 0x72, 0x41, 0x96, 0x66,  // O.(.rA.f
                /* 0AF0 */  0x1D, 0x3A, 0xEF, 0xE3, 0x34, 0x01, 0x69, 0x64,  // .:..4.id
                /* 0AF8 */  0x27, 0x11, 0xF1, 0x5D, 0xBF, 0xEB, 0x79, 0xE9,  // '..]..y.
                /* 0B00 */  0xBC, 0xD4, 0x39, 0x82, 0x6E, 0x32, 0xEF, 0x00,  // ..9.n2..
                /* 0B08 */  0x86, 0xB6, 0x8A, 0x83, 0x3E, 0x1D, 0x95, 0xF3,  // ....>...
                /* 0B10 */  0x93, 0x28, 0xFF, 0xB9, 0x00, 0x95, 0xF8, 0x5C,  // .(.....\
                /* 0B18 */  0x40, 0x41, 0x0C, 0xE8, 0x38, 0x02, 0xFE, 0xFF,  // @A..8...
                /* 0B20 */  0x27, 0x24, 0xEC, 0x4E, 0x7C, 0xAD, 0x62, 0x08,  // '$.N|.b.
                /* 0B28 */  0x87, 0xC4, 0x06, 0x02, 0xE3, 0x9A, 0x04, 0x56,  // .......V
                /* 0B30 */  0x02, 0xDF, 0xC5, 0x01, 0xE7, 0x83, 0xF1, 0xB5,  // ........
                /* 0B38 */  0x02, 0x70, 0xF3, 0xFF, 0xBF, 0x56, 0xE0, 0xBC,  // .p...V..
                /* 0B40 */  0x0A, 0xB5, 0xE8, 0xF0, 0x5A, 0x01, 0x2E, 0x41,  // ....Z..A
                /* 0B48 */  0xAB, 0xD0, 0xB5, 0x02, 0x17, 0x6B, 0x2D, 0xBA,  // .....k-.
                /* 0B50 */  0x8B, 0x33, 0x9F, 0xD0, 0xC2, 0x38, 0x92, 0xE3,  // .3...8..
                /* 0B58 */  0x88, 0x7C, 0xC8, 0x2F, 0x10, 0x61, 0x42, 0x3C,  // .|./.aB<
                /* 0B60 */  0x90, 0xEA, 0x5A, 0x81, 0x8A, 0x40, 0xA1, 0xE8,  // ..Z..@..
                /* 0B68 */  0xE7, 0x02, 0x54, 0xD8, 0xB1, 0x53, 0x10, 0x03,  // ..T..S..
                /* 0B70 */  0x3A, 0xC9, 0xB5, 0x02, 0xAD, 0x05, 0x44, 0xB3,  // :.....D.
                /* 0B78 */  0xC0, 0xE9, 0x9C, 0x84, 0x26, 0xE5, 0x43, 0x05,  // ....&.C.
                /* 0B80 */  0xE0, 0x2B, 0xC6, 0x35, 0x1E, 0x25, 0xFC, 0x1A,  // .+.5.%..
                /* 0B88 */  0x4F, 0x41, 0x3C, 0x31, 0x1F, 0x2A, 0x80, 0xF3,  // OA<1.*..
                /* 0B90 */  0xFF, 0xFF, 0xA8, 0x0D, 0x9E, 0x61, 0xE1, 0x64,  // .....a.d
                /* 0B98 */  0xDC, 0x70, 0x7C, 0xC6, 0x24, 0xA8, 0x8F, 0xE3,  // .p|.$...
                /* 0BA0 */  0xC0, 0xF9, 0xE0, 0x01, 0xBC, 0x25, 0xFA, 0x94,  // .....%..
                /* 0BA8 */  0x7A, 0x68, 0x05, 0x99, 0x98, 0x83, 0x07, 0x3A,  // zh.....:
                /* 0BB0 */  0xD2, 0x5A, 0x74, 0x68, 0x65, 0x07, 0x0F, 0x58,  // .Zthe..X
                /* 0BB8 */  0x21, 0x0E, 0x1E, 0x28, 0xF9, 0x14, 0x92, 0x7F,  // !..(....
                /* 0BC0 */  0x76, 0x40, 0x09, 0x3E, 0x3B, 0x50, 0x10, 0x8F,  // v@.>;P..
                /* 0BC8 */  0xCD, 0x07, 0x0F, 0xE0, 0xF1, 0xFF, 0x3F, 0x78,  // ......?x
                /* 0BD0 */  0x00, 0x93, 0x10, 0x37, 0x07, 0xE8, 0x97, 0x56,  // ...7...V
                /* 0BD8 */  0x60, 0x76, 0x70, 0xC0, 0x1E, 0x9F, 0x00, 0x8B,  // `vp.....
                /* 0BE0 */  0xC7, 0x0E, 0xE0, 0xF9, 0xFF, 0x3F, 0x76, 0x00,  // .....?v.
                /* 0BE8 */  0x0D, 0xA7, 0xC7, 0x0E, 0x70, 0xC5, 0x79, 0x03,  // ....p.y.
                /* 0BF0 */  0xE8, 0xD8, 0x81, 0x13, 0x05, 0xA4, 0xE3, 0x13,  // ........
                /* 0BF8 */  0x1B, 0xD3, 0x13, 0xB6, 0x41, 0x1E, 0x1F, 0x30,  // ....A..0
                /* 0C00 */  0xC6, 0x00, 0x25, 0xE3, 0xBC, 0x41, 0x21, 0x4C,  // ..%..A!L
                /* 0C08 */  0xE1, 0x73, 0x01, 0x18, 0x67, 0x81, 0x3F, 0x17,  // .s..g.?.
                /* 0C10 */  0x80, 0x9D, 0xC0, 0xE7, 0x02, 0xC0, 0x93, 0x45,  // .......E
                /* 0C18 */  0xB3, 0x42, 0x7D, 0x9E, 0x0B, 0xE0, 0xFE, 0xFF,  // .B}.....
                /* 0C20 */  0xCF, 0x05, 0xE0, 0x9E, 0xA6, 0xCF, 0x05, 0x00,  // ........
                /* 0C28 */  0x7D, 0xA4, 0x9E, 0x0B, 0x80, 0xD7, 0x38, 0x9F,  // }.....8.
                /* 0C30 */  0x0B, 0xC0, 0xF2, 0xFF, 0x3F, 0x17, 0x00, 0xD4,  // ....?...
                /* 0C38 */  0xB0, 0x78, 0x2E, 0x00, 0x5E, 0xD2, 0xCE, 0x05,  // .x..^...
                /* 0C40 */  0x80, 0x8A, 0xFF, 0xFF, 0xB9, 0x00, 0xD0, 0xA6,  // ........
                /* 0C48 */  0xF5, 0x5C, 0x00, 0x2E, 0xF1, 0xAB, 0xA0, 0xA1,  // .\......
                /* 0C50 */  0x21, 0x24, 0x17, 0x06, 0x25, 0x61, 0xEC, 0x50,  // !$..%a.P
                /* 0C58 */  0x46, 0x73, 0x30, 0xC7, 0x10, 0x9C, 0x49, 0x82,  // Fs0...I.
                /* 0C60 */  0x43, 0x0D, 0xD4, 0x53, 0x7F, 0x1A, 0x38, 0x8D,  // C..S..8.
                /* 0C68 */  0xC7, 0x40, 0xCF, 0xEA, 0x79, 0x3C, 0x24, 0x3B,  // .@..y<$;
                /* 0C70 */  0x23, 0x78, 0x88, 0xFC, 0x58, 0xE0, 0xB1, 0xBE,  // #x..X...
                /* 0C78 */  0xB1, 0x59, 0x3B, 0xA2, 0x4E, 0x6C, 0x86, 0x49,  // .Y;.Nl.I
                /* 0C80 */  0xE0, 0x21, 0x32, 0x34, 0x4E, 0x70, 0x66, 0xA1,  // .!24Npf.
                /* 0C88 */  0x31, 0x37, 0x3F, 0xDF, 0xFF, 0x5E, 0x03, 0x3C,  // 17?..^.<
                /* 0C90 */  0x37, 0x13, 0x74, 0x3F, 0x74, 0x29, 0x44, 0xD0,  // 7.t?t)D.
                /* 0C98 */  0x09, 0xE0, 0x9D, 0xA0, 0x46, 0x01, 0xDE, 0xAE,  // ....F...
                /* 0CA0 */  0x02, 0xB2, 0x25, 0x40, 0xDC, 0xE8, 0x85, 0xF5,  // ..%@....
                /* 0CA8 */  0xCA, 0x15, 0x25, 0x44, 0x84, 0xA0, 0x51, 0x8C,  // ..%D..Q.
                /* 0CB0 */  0x17, 0x21, 0x54, 0x88, 0x28, 0x51, 0x9B, 0x03,  // .!T.(Q..
                /* 0CB8 */  0x91, 0x36, 0x54, 0x81, 0x44, 0x0B, 0x66, 0x04,  // .6T.D.f.
                /* 0CC0 */  0x66, 0x7F, 0x10, 0x44, 0xFA, 0x33, 0x40, 0x77,  // f..D.3@w
                /* 0CC8 */  0x40, 0x47, 0x3A, 0x3C, 0xA2, 0x87, 0xEB, 0xA1,  // @G:<....
                /* 0CD0 */  0x9E, 0xE3, 0xFF, 0xFF, 0x35, 0xFD, 0x79, 0xD2,  // ....5.y.
                /* 0CD8 */  0x20, 0x07, 0x79, 0x6E, 0x4F, 0x8F, 0x18, 0x70,  //  .ynO..p
                /* 0CE0 */  0x9D, 0x21, 0xA0, 0x5D, 0xE6, 0x03, 0x9E, 0xF1,  // .!.]....
                /* 0CE8 */  0x03, 0x33, 0x85, 0x43, 0x0D, 0xD1, 0xA7, 0x77,  // .3.C...w
                /* 0CF0 */  0x4F, 0xE0, 0x10, 0x19, 0xA0, 0x0F, 0x11, 0xF0,  // O.......
                /* 0CF8 */  0xC7, 0xE3, 0x03, 0x24, 0xE6, 0xB0, 0xA9, 0x41,  // ...$...A
                /* 0D00 */  0xA0, 0x46, 0x66, 0x68, 0x8F, 0xF4, 0xB4, 0x9E,  // .Ffh....
                /* 0D08 */  0x32, 0x3D, 0xFC, 0xC3, 0x62, 0x62, 0xCF, 0x0E,  // 2=..bb..
                /* 0D10 */  0x74, 0x3C, 0xE0, 0x57, 0x7C, 0x26, 0x10, 0xC2,  // t<.W|&..
                /* 0D18 */  0xC3, 0x83, 0xE7, 0xEB, 0x43, 0xB5, 0x4E, 0x22,  // ....C.N"
                /* 0D20 */  0x68, 0x68, 0x83, 0x9E, 0x8D, 0xCF, 0x10, 0xBE,  // hh......
                /* 0D28 */  0x79, 0xB0, 0xA3, 0x05, 0x17, 0x75, 0xB4, 0x40,  // y....u.@
                /* 0D30 */  0x9D, 0x16, 0x7C, 0x50, 0x60, 0x47, 0x54, 0x7E,  // ..|P`GT~
                /* 0D38 */  0xB2, 0x60, 0x47, 0x61, 0x70, 0xCA, 0x3B, 0x84,  // .`Gap.;.
                /* 0D40 */  0x80, 0x02, 0xC4, 0x27, 0x0B, 0x36, 0x2F, 0x0C,  // ...'.6/.
                /* 0D48 */  0x81, 0x45, 0xC2, 0xA3, 0x0E, 0x1D, 0x86, 0xE7,  // .E......
                /* 0D50 */  0xA7, 0x84, 0xC7, 0x11, 0x86, 0xFD, 0x46, 0xE2,  // ......F.
                /* 0D58 */  0x29, 0x1C, 0x8E, 0x8F, 0x14, 0x46, 0x08, 0x5E,  // )....F.^
                /* 0D60 */  0xEE, 0xD4, 0xF4, 0xFF, 0x9F, 0x40, 0xCD, 0xA3,  // .....@..
                /* 0D68 */  0xD3, 0x94, 0x4E, 0xF9, 0x10, 0xD8, 0x50, 0x3D,  // ..N...P=
                /* 0D70 */  0x04, 0x7E, 0x5E, 0xF0, 0x10, 0xF8, 0x00, 0x5A,  // .~^....Z
                /* 0D78 */  0x9D, 0x1D, 0x39, 0x9F, 0x9C, 0x13, 0x6E, 0xBC,  // ..9...n.
                /* 0D80 */  0x7C, 0x4C, 0xD8, 0x01, 0xF0, 0x94, 0xAF, 0x5C,  // |L.....\
                /* 0D88 */  0x9F, 0x45, 0x68, 0x8C, 0xE5, 0xFB, 0x38, 0x02,  // .Eh...8.
                /* 0D90 */  0xC8, 0x99, 0xC4, 0x13, 0x48, 0x84, 0x97, 0x91,  // ....H...
                /* 0D98 */  0x20, 0x21, 0x8E, 0xE5, 0x35, 0xC4, 0x20, 0x31,  //  !..5. 1
                /* 0DA0 */  0x8E, 0xE1, 0x64, 0x1E, 0x47, 0x38, 0xCC, 0x33,  // ..d.G8.3
                /* 0DA8 */  0x89, 0xE1, 0x1E, 0x0E, 0x5E, 0x45, 0x5E, 0x48,  // ....^E^H
                /* 0DB0 */  0x0C, 0xF3, 0x28, 0xE2, 0xF3, 0x41, 0x0C, 0x63,  // ..(..A.c
                /* 0DB8 */  0x86, 0x8A, 0x76, 0x02, 0x3E, 0x8E, 0xB0, 0x48,  // ..v.>..H
                /* 0DC0 */  0x0F, 0x06, 0x0D, 0xD5, 0xC7, 0x11, 0xC0, 0xCF,  // ........
                /* 0DC8 */  0xFF, 0xFF, 0x38, 0x02, 0xFC, 0x8F, 0x08, 0xB8,  // ..8.....
                /* 0DD0 */  0xD3, 0x06, 0xDC, 0xFB, 0x44, 0x88, 0x27, 0x8D,  // ....D.'.
                /* 0DD8 */  0x97, 0x84, 0x67, 0x0D, 0xE0, 0xA2, 0x8A, 0xB9,  // ..g.....
                /* 0DE0 */  0x00, 0x43, 0x20, 0x4A, 0x73, 0x34, 0x47, 0x71,  // .C Js4Gq
                /* 0DE8 */  0x58, 0x13, 0x90, 0x86, 0xC9, 0x19, 0xCF, 0xFD,  // X.......
                /* 0DF0 */  0xB9, 0xE0, 0xEC, 0x62, 0x07, 0x09, 0x13, 0xE4,  // ...b....
                /* 0DF8 */  0x89, 0xE0, 0x35, 0xCA, 0xA7, 0x20, 0x41, 0xEA,  // ..5.. A.
                /* 0E00 */  0x6C, 0xCE, 0xD3, 0x53, 0x48, 0xF7, 0xD9, 0x1C,  // l..SH...
                /* 0E08 */  0xA5, 0xF4, 0x9C, 0x46, 0x41, 0x7C, 0x46, 0xF0,  // ...FA|F.
                /* 0E10 */  0xB5, 0x1B, 0xCE, 0x1C, 0xCE, 0xE8, 0x40, 0xDE,  // ......@.
                /* 0E18 */  0x03, 0xD8, 0xC5, 0x1C, 0x98, 0x5D, 0x64, 0xB0,  // .....]d.
                /* 0E20 */  0x27, 0x1D, 0x3C, 0xBA, 0xFF, 0xFF, 0x37, 0x85,  // '.<...7.
                /* 0E28 */  0xF3, 0x7C, 0x3F, 0xF0, 0xBD, 0x1C, 0xB0, 0x15,  // .|?.....
                /* 0E30 */  0xE2, 0x2E, 0x80, 0x92, 0x7D, 0x17, 0xA0, 0x20,  // ....}.. 
                /* 0E38 */  0x9E, 0x98, 0xA3, 0x5C, 0x91, 0xA0, 0xE0, 0x3F,  // ...\...?
                /* 0E40 */  0x0A, 0xBC, 0x0C, 0xBC, 0x2E, 0x60, 0xAE, 0xE5,  // .....`..
                /* 0E48 */  0xC0, 0x37, 0xC8, 0x85, 0x01, 0xCA, 0x6D, 0xE0,  // .7....m.
                /* 0E50 */  0xE1, 0x89, 0x0D, 0x0A, 0xFC, 0x50, 0xBE, 0x1E,  // .....P..
                /* 0E58 */  0x82, 0xF9, 0xFF, 0x7F, 0x3D, 0x04, 0xB6, 0x4A,  // ....=..J
                /* 0E60 */  0x9D, 0xDA, 0x54, 0x78, 0x3D, 0x04, 0x57, 0x94,  // ..Tx=.W.
                /* 0E68 */  0x6B, 0x09, 0xEA, 0xD6, 0x64, 0x41, 0x40, 0xF2,  // k...dA@.
                /* 0E70 */  0x7E, 0xBE, 0x21, 0x98, 0x3E, 0x97, 0xC0, 0xBB,  // ~.!.>...
                /* 0E78 */  0x83, 0x6A, 0x55, 0xBA, 0x97, 0xF0, 0xE0, 0x14,  // .jU.....
                /* 0E80 */  0x8A, 0x7E, 0x78, 0x40, 0x85, 0x3D, 0x3C, 0x50,  // .~x@.=<P
                /* 0E88 */  0x10, 0x5F, 0x8C, 0x7C, 0x2F, 0x01, 0xEC, 0xFF,  // ._.|/...
                /* 0E90 */  0xFF, 0x47, 0x84, 0xCD, 0x30, 0x22, 0xB4, 0x8A,  // .G..0"..
                /* 0E98 */  0xA3, 0x05, 0x72, 0x46, 0x60, 0x3D, 0x11, 0xF8,  // ..rF`=..
                /* 0EA0 */  0xE4, 0x02, 0x9C, 0xC3, 0x5F, 0x82, 0x51, 0x71,  // ...._.Qq
                /* 0EA8 */  0xE7, 0x4C, 0x41, 0x3C, 0x28, 0x9F, 0x5C, 0x80,  // .LA<(.\.
                /* 0EB0 */  0xDF, 0xA9, 0x04, 0x30, 0xF5, 0xFF, 0x07, 0xD3,  // ...0....
                /* 0EB8 */  0xA9, 0x04, 0x74, 0x77, 0x2F, 0x30, 0x5D, 0x4D,  // ..tw/0]M
                /* 0EC0 */  0xCE, 0x24, 0x5A, 0x70, 0xDF, 0xBD, 0x00, 0x66,  // .$Zp...f
                /* 0EC8 */  0xFE, 0xFF, 0xEF, 0x5E, 0x00, 0x3D, 0xBD, 0xDE,  // ...^.=..
                /* 0ED0 */  0xBD, 0x80, 0xD7, 0xB9, 0x84, 0xFF, 0xFF, 0xEF,  // ........
                /* 0ED8 */  0x5E, 0x00, 0xFF, 0xFF, 0xFF, 0x77, 0x2F, 0x80,  // ^....w/.
                /* 0EE0 */  0x32, 0xA7, 0x12, 0x90, 0x65, 0x3B, 0x95, 0xA0,  // 2...e;..
                /* 0EE8 */  0x15, 0x9E, 0xA3, 0xA1, 0x4E, 0xE0, 0x50, 0x9E,  // ....N.P.
                /* 0EF0 */  0x30, 0x5E, 0xD5, 0x13, 0x58, 0xCF, 0xE5, 0x0B,  // 0^..X...
                /* 0EF8 */  0xA5, 0x04, 0x46, 0x97, 0x2F, 0xE0, 0xF5, 0xFF,  // ..F./...
                /* 0F00 */  0xBF, 0x7C, 0x01, 0xAC, 0x08, 0x74, 0x17, 0x40,  // .|...t.@
                /* 0F08 */  0x45, 0xB8, 0x0B, 0x50, 0x10, 0x5F, 0xBE, 0x00,  // E..P._..
                /* 0F10 */  0x2F, 0xA1, 0x20, 0x64, 0xE4, 0x26, 0x41, 0x2F,  // /. d.&A/
                /* 0F18 */  0x5F, 0x70, 0x2E, 0x0E, 0xBE, 0x1F, 0x79, 0x50,  // _p....yP
                /* 0F20 */  0x30, 0xFE, 0xFF, 0x83, 0x82, 0x39, 0x98, 0xF3,  // 0....9..
                /* 0F28 */  0x2E, 0xF6, 0xA4, 0x48, 0xAF, 0x27, 0x70, 0xEF,  // ...H.'p.
                /* 0F30 */  0x1C, 0x1E, 0x1B, 0x38, 0xC4, 0x5D, 0xC1, 0x80,  // ...8.]..
                /* 0F38 */  0xBD, 0xCB, 0xDB, 0x09, 0xB8, 0xB4, 0xAD, 0x5D,  // .......]
                /* 0F40 */  0xB7, 0x13, 0x5C, 0xC2, 0xE3, 0x34, 0xE4, 0xE3,  // ..\..4..
                /* 0F48 */  0x09, 0x26, 0xCF, 0xED, 0x04, 0x95, 0x04, 0x46,  // .&.....F
                /* 0F50 */  0x59, 0x48, 0x74, 0x84, 0xE0, 0xEA, 0x6F, 0x62,  // YHt...ob
                /* 0F58 */  0x14, 0xC4, 0x16, 0x6E, 0x27, 0x80, 0x88, 0xFF,  // ...n'...
                /* 0F60 */  0xFF, 0xED, 0x04, 0xB0, 0x30, 0x66, 0x38, 0x23,  // ....0f8#
                /* 0F68 */  0x7A, 0xAF, 0x30, 0xA4, 0xCF, 0x60, 0xC0, 0x34,  // z.0..`.4
                /* 0F70 */  0xD0, 0x11, 0x04, 0x7D, 0x49, 0xC3, 0x26, 0xB8,  // ...}I.&.
                /* 0F78 */  0x81, 0xD0, 0x19, 0xC1, 0xBB, 0x80, 0xC0, 0x9D,  // ........
                /* 0F80 */  0x18, 0xAC, 0x03, 0x08, 0xF8, 0xCE, 0x6A, 0xC0,  // ......j.
                /* 0F88 */  0xE8, 0xFF, 0x7F, 0x56, 0x03, 0xBE, 0x07, 0x00,  // ...V....
                /* 0F90 */  0x9F, 0xD5, 0x00, 0x55, 0xB7, 0x17, 0x90, 0x5D,  // ...U...]
                /* 0F98 */  0x53, 0x7C, 0x7B, 0xE1, 0x03, 0xB6, 0x06, 0x20,  // S|{.... 
                /* 0FA0 */  0x1D, 0x1F, 0x4E, 0xFF, 0x38, 0x8E, 0xE2, 0xBC,  // ..N.8...
                /* 0FA8 */  0x4E, 0xE3, 0x05, 0x26, 0x46, 0xCD, 0xA7, 0x0C,  // N..&F...
                /* 0FB0 */  0x32, 0xE1, 0xDE, 0x00, 0x95, 0xFA, 0x1A, 0x45,  // 2......E
                /* 0FB8 */  0x47, 0xE5, 0xBC, 0x24, 0x4A, 0x7D, 0x2C, 0x40,  // G..$J},@
                /* 0FC0 */  0xE5, 0x3C, 0x16, 0x50, 0x10, 0x03, 0xFA, 0xE2,  // .<.P....
                /* 0FC8 */  0x61, 0x25, 0x17, 0x0F, 0xF4, 0x20, 0x4E, 0xF6,  // a%... N.
                /* 0FD0 */  0x0D, 0xD5, 0x17, 0x0F, 0x30, 0x13, 0xFC, 0xFF,  // ....0...
                /* 0FD8 */  0x5F, 0x3C, 0xC0, 0x64, 0xEC, 0xD6, 0xF3, 0x42,  // _<.d...B
                /* 0FE0 */  0x01, 0x44, 0x82, 0x4F, 0x15, 0x15, 0x75, 0xAA,  // .D.O..u.
                /* 0FE8 */  0x14, 0xC4, 0x53, 0x75, 0x8C, 0x13, 0x89, 0xA7,  // ..Su....
                /* 0FF0 */  0x8A, 0x3E, 0x09, 0x9D, 0xDB, 0x1B, 0x09, 0x3F,  // .>.....?
                /* 0FF8 */  0x0F, 0xBC, 0x4F, 0x80, 0x79, 0x28, 0x3E, 0x5C,  // ..O.y(>\
                /* 1000 */  0x01, 0x8E, 0x14, 0xFA, 0x34, 0xA9, 0xF4, 0x3A,  // ....4..:
                /* 1008 */  0x01, 0x2E, 0x41, 0xD7, 0x09, 0x74, 0xAC, 0xA5,  // ..A..t..
                /* 1010 */  0xEA, 0x3A, 0x01, 0x6F, 0x98, 0x0E, 0x72, 0x9D,  // .:.o..r.
                /* 1018 */  0xA0, 0x10, 0xFF, 0xFF, 0xC7, 0x3C, 0x16, 0xE0,  // .....<..
                /* 1020 */  0xB0, 0x87, 0x92, 0x0C, 0x47, 0x41, 0x3C, 0x36,  // ....GA<6
                /* 1028 */  0xDF, 0xC9, 0x7D, 0x9D, 0x80, 0x7B, 0x67, 0x81,  // ..}..{g.
                /* 1030 */  0x77, 0x9D, 0x60, 0x87, 0x02, 0xD8, 0x04, 0xBE,  // w.`.....
                /* 1038 */  0xB3, 0x80, 0xE7, 0x40, 0xC1, 0x0E, 0x0E, 0x60,  // ...@...`
                /* 1040 */  0x1E, 0x14, 0x38, 0x0E, 0x0E, 0x80, 0xAA, 0x1B,  // ..8.....
                /* 1048 */  0x2D, 0xC8, 0xF4, 0x1F, 0x1C, 0xD0, 0x2A, 0xAE,  // -.....*.
                /* 1050 */  0x35, 0x88, 0xFF, 0xFF, 0xC1, 0x01, 0x2F, 0xED,  // 5...../.
                /* 1058 */  0x34, 0x44, 0x72, 0x5F, 0x6B, 0x50, 0x89, 0xAF,  // 4Dr_kP..
                /* 1060 */  0x35, 0x80, 0xEC, 0xE8, 0x53, 0x45, 0x85, 0x9D,  // 5...SE..
                /* 1068 */  0x2A, 0x05, 0xF1, 0x54, 0x7D, 0xE5, 0x80, 0x75,  // *..T}..u
                /* 1070 */  0x9D, 0xC0, 0x1C, 0xBB, 0xC0, 0x3D, 0x14, 0x5F,  // .....=._
                /* 1078 */  0x39, 0xC0, 0x77, 0x9F, 0x00, 0x0E, 0xFF, 0xFF,  // 9.w.....
                /* 1080 */  0x63, 0x17, 0x48, 0xEF, 0x35, 0xA0, 0x93, 0x74,  // c.H.5..t
                /* 1088 */  0x9F, 0x40, 0x07, 0xBB, 0xD7, 0x40, 0xBC, 0x4F,  // .@...@.O
                /* 1090 */  0x3C, 0xAD, 0x3D, 0xD1, 0xE9, 0x5E, 0x83, 0x0A,  // <.=..^..
                /* 1098 */  0x41, 0xA1, 0x8B, 0x8D, 0x4F, 0x05, 0x5C, 0x34,  // A...O.\4
                /* 10A0 */  0x1C, 0x05, 0xF1, 0xBD, 0x06, 0x70, 0x72, 0x72,  // .....prr
                /* 10A8 */  0x00, 0xEF, 0xBD, 0x06, 0x3C, 0x27, 0x07, 0xE0,  // ....<'..
                /* 10B0 */  0xF3, 0xFF, 0x3F, 0x39, 0x00, 0xB5, 0x8B, 0x0D,  // ..?9....
                /* 10B8 */  0xC8, 0x12, 0x9C, 0x1C, 0xD0, 0x3A, 0x2E, 0x36,  // .....:.6
                /* 10C0 */  0x50, 0x11, 0x12, 0x4C, 0x7E, 0xB1, 0x41, 0x65,  // P..L~.Ae
                /* 10C8 */  0xBE, 0xD8, 0x00, 0xB2, 0xEF, 0xA7, 0xE0, 0xBB,  // ........
                /* 10D0 */  0x08, 0x3C, 0x50, 0xE0, 0x2E, 0x14, 0xF8, 0xFF,  // .<P.....
                /* 10D8 */  0xFF, 0xCD, 0x06, 0x98, 0xDD, 0x4F, 0x81, 0xBF,  // .....O..
                /* 10E0 */  0xC4, 0x9B, 0x0D, 0xE8, 0x44, 0x5D, 0x28, 0xD0,  // ....D](.
                /* 10E8 */  0xD1, 0x6E, 0x36, 0x50, 0xAD, 0x01, 0x2A, 0xCC,  // .n6P..*.
                /* 10F0 */  0xCD, 0x06, 0x15, 0x83, 0x42, 0x57, 0x1B, 0x1F,  // ....BW..
                /* 10F8 */  0x0B, 0xB8, 0x6C, 0x38, 0x0A, 0xE2, 0x9B, 0x0D,  // ..l8....
                /* 1100 */  0xE0, 0xE4, 0xE8, 0x80, 0xF9, 0xFF, 0x1F, 0x1D,  // ........
                /* 1108 */  0xC0, 0x78, 0xB5, 0x01, 0x3E, 0x47, 0x07, 0x40,  // .x..>G.@
                /* 1110 */  0xC1, 0xD5, 0x06, 0x64, 0x2A, 0x56, 0xA1, 0xA3,  // ...d*V..
                /* 1118 */  0x03, 0x2E, 0xCB, 0x4D, 0x19, 0xAA, 0x39, 0x40,  // ...M..9@
                /* 1120 */  0xDD, 0x9A, 0x7D, 0xB5, 0xE1, 0xBA, 0x29, 0xA4,  // ..}...).
                /* 1128 */  0xFC, 0xE8, 0x80, 0xD2, 0x7A, 0x74, 0xA0, 0x20,  // ....zt. 
                /* 1130 */  0x1E, 0x9B, 0x53, 0x1C, 0x0B, 0xD0, 0x3A, 0x8E,  // ..S...:.
                /* 1138 */  0x05, 0x74, 0xAE, 0x31, 0x22, 0x3C, 0x3B, 0x3C,  // .t.1"<;<
                /* 1140 */  0xDB, 0x00, 0xA3, 0xFF, 0xFF, 0xA1, 0x00, 0x5E,  // .......^
                /* 1148 */  0x86, 0x9B, 0x28, 0x94, 0x0B, 0x40, 0xC4, 0x33,  // ..(..@.3
                /* 1150 */  0x3A, 0x7F, 0x13, 0x9C, 0xE8, 0x21, 0x81, 0xF3,  // :....!..
                /* 1158 */  0x20, 0x0A, 0xBE, 0xCB, 0x0F, 0x60, 0x70, 0x24,  //  ....`p$
                /* 1160 */  0xBE, 0x72, 0x00, 0x6E, 0xFE, 0xFF, 0x57, 0x0E,  // .r.n..W.
                /* 1168 */  0x9C, 0x4D, 0x8B, 0x36, 0x2F, 0x3F, 0x20, 0x0B,  // .M.6/? .
                /* 1170 */  0x77, 0xF9, 0x41, 0x4B, 0xBC, 0x72, 0x40, 0x3C,  // w.AK.r@<
                /* 1178 */  0xCE, 0x1C, 0xB1, 0x2F, 0x42, 0xBE, 0xFC, 0x70,  // .../B..p
                /* 1180 */  0x39, 0x30, 0x12, 0x03, 0xA1, 0x63, 0x01, 0x8F,  // 90...c..
                /* 1188 */  0x7F, 0xE5, 0xA0, 0x20, 0x96, 0x70, 0x2C, 0x80,  // ... .p,.
                /* 1190 */  0x7A, 0xE5, 0xC0, 0xDC, 0x7E, 0x80, 0xE9, 0xB1,  // z...~...
                /* 1198 */  0x80, 0x5F, 0xA7, 0xE1, 0x9C, 0x3A, 0x70, 0xD7,  // ._...:p.
                /* 11A0 */  0x69, 0xE0, 0x7A, 0x41, 0x02, 0x1E, 0xFF, 0xFF,  // i.zA....
                /* 11A8 */  0xE3, 0x05, 0xA0, 0xF1, 0x82, 0x04, 0xB2, 0x18,  // ........
                /* 11B0 */  0x0F, 0x09, 0x1D, 0x2F, 0x70, 0x62, 0x80, 0x74,  // .../pb.t
                /* 11B8 */  0xBC, 0x80, 0x87, 0xF0, 0x54, 0xA1, 0x15, 0xE9,  // ....T...
                /* 11C0 */  0x82, 0xC4, 0x83, 0xC3, 0x28, 0xFA, 0xF1, 0x02,  // ....(...
                /* 11C8 */  0x15, 0xF6, 0x94, 0x41, 0x41, 0x7C, 0xD4, 0x71,  // ...AA|.q
                /* 11D0 */  0x82, 0x93, 0x03, 0x7A, 0x94, 0x56, 0x38, 0x06,  // ...z.V8.
                /* 11D8 */  0xCD, 0xE3, 0xE9, 0x07, 0xBC, 0x04, 0xBE, 0x36,  // .......6
                /* 11E0 */  0x80, 0x6B, 0x42, 0x70, 0x86, 0x70, 0xBE, 0xB5,  // .kBp.p..
                /* 11E8 */  0x4F, 0x08, 0xD2, 0xFF, 0xFF, 0x76, 0x04, 0x9C,  // O....v..
                /* 11F0 */  0x22, 0x4C, 0x08, 0xAD, 0x02, 0x44, 0x1A, 0x0F,  // "L...D..
                /* 11F8 */  0x01, 0xC4, 0xF1, 0x88, 0x40, 0x7C, 0x68, 0xE0,  // ....@|h.
                /* 1200 */  0x23, 0x02, 0xD7, 0x65, 0x10, 0x07, 0xEE, 0xA3,  // #..e....
                /* 1208 */  0xC4, 0x19, 0xF7, 0x7C, 0x02, 0x03, 0x31, 0x92,  // ...|..1.
                /* 1210 */  0x0F, 0xAB, 0x60, 0x3B, 0x81, 0x01, 0xAB, 0x7B,  // ..`;...{
                /* 1218 */  0x8F, 0x4F, 0x60, 0xC0, 0xE4, 0xFF, 0x7F, 0x02,  // .O`.....
                /* 1220 */  0x03, 0x1C, 0x59, 0x38, 0xD3, 0x00, 0xAA, 0x4C,  // ..Y8...L
                /* 1228 */  0x3A, 0x14, 0x7A, 0x02, 0x03, 0x99, 0xCC, 0x33,  // :.z....3
                /* 1230 */  0x0D, 0x3A, 0xEC, 0x4A, 0x74, 0xA6, 0x81, 0x37,  // .:.Jt..7
                /* 1238 */  0x4D, 0xC7, 0x3B, 0xD3, 0x50, 0x08, 0x07, 0x83,  // M.;.P...
                /* 1240 */  0x51, 0x2C, 0x08, 0x1D, 0x0B, 0x78, 0x10, 0x38,  // Q,...x.8
                /* 1248 */  0x0A, 0x62, 0x0F, 0xC7, 0x6D, 0x7A, 0xA6, 0x81,  // .b..mz..
                /* 1250 */  0x77, 0xB6, 0xE2, 0xFF, 0xFF, 0xF3, 0x17, 0x78,  // w......x
                /* 1258 */  0x2F, 0x14, 0xE0, 0x1A, 0x12, 0x9C, 0x4B, 0x0D,  // /.....K.
                /* 1260 */  0x3F, 0x7D, 0x01, 0xD7, 0x03, 0x1A, 0x9C, 0x63,  // ?}.....c
                /* 1268 */  0x0D, 0x66, 0x4C, 0x60, 0x3F, 0xD8, 0x80, 0x6F,  // .fL`?..o
                /* 1270 */  0x4C, 0x3E, 0xD8, 0xC0, 0x3B, 0x9E, 0x81, 0x1B,  // L>..;...
                /* 1278 */  0xCA, 0x77, 0x66, 0x70, 0xFD, 0xFF, 0x8F, 0x79,  // .wfp...y
                /* 1280 */  0xC0, 0xEF, 0x6E, 0x03, 0xBE, 0x63, 0x1E, 0xF0,  // ..n..c..
                /* 1288 */  0x3B, 0xC3, 0x00, 0xBA, 0xAE, 0xD5, 0x40, 0xEB,  // ;.....@.
                /* 1290 */  0xBA, 0x70, 0x9C, 0xAF, 0xD5, 0xEC, 0xFF, 0x7F,  // .p......
                /* 1298 */  0xAD, 0xC6, 0xA9, 0xBF, 0x56, 0xA3, 0xF4, 0x1E,  // ....V...
                /* 12A0 */  0x4A, 0x29, 0x88, 0xC7, 0xE6, 0x24, 0x87, 0x0B,  // J)...$..
                /* 12A8 */  0xB4, 0x96, 0x0B, 0x3E, 0x99, 0xD3, 0x31, 0x9C,  // ...>..1.
                /* 12B0 */  0xCF, 0x09, 0x15, 0x7F, 0xC6, 0x47, 0x5D, 0xAC,  // .....G].
                /* 12B8 */  0x81, 0xE1, 0x3D, 0x0C, 0xE6, 0xA0, 0x30, 0x17,  // ..=...0.
                /* 12C0 */  0x6B, 0xC0, 0x56, 0xF0, 0x7B, 0x18, 0x2A, 0xEA,  // k.V.{.*.
                /* 12C8 */  0x8C, 0x28, 0x88, 0xAF, 0x05, 0xBE, 0x97, 0xC0,  // .(......
                /* 12D0 */  0xB9, 0x73, 0xE0, 0xEE, 0x25, 0xF0, 0xEE, 0xD5,  // .s..%...
                /* 12D8 */  0x60, 0xF9, 0xFF, 0xCF, 0x15, 0x6C, 0x57, 0x0E,  // `....lW.
                /* 12E0 */  0xE0, 0x2D, 0x56, 0xA2, 0xC9, 0x6B, 0x35, 0x10,  // .-V..k5.
                /* 12E8 */  0x93, 0x76, 0xAD, 0x06, 0x5D, 0x9C, 0x2B, 0x07,  // .v..].+.
                /* 12F0 */  0x7A, 0x4C, 0xBE, 0x72, 0xC0, 0xBA, 0x58, 0x03,  // zL.r..X.
                /* 12F8 */  0xD3, 0x2B, 0x12, 0xDC, 0x53, 0x07, 0xEE, 0xEC,  // .+..S...
                /* 1300 */  0x00, 0xE3, 0xFF, 0x7F, 0x17, 0x03, 0xB6, 0xC7,  // ........
                /* 1308 */  0x0B, 0x70, 0xDC, 0xC5, 0x80, 0xD3, 0xF1, 0x02,  // .p......
                /* 1310 */  0xA8, 0x5F, 0x90, 0x40, 0xA6, 0xE5, 0x82, 0x84,  // ._.@....
                /* 1318 */  0x4E, 0x74, 0xBC, 0x80, 0x6A, 0xED, 0xC4, 0xE3,  // Nt..j...
                /* 1320 */  0x0B, 0x12, 0xEA, 0x8E, 0xE4, 0xD4, 0x47, 0x18,  // ......G.
                /* 1328 */  0x54, 0xCE, 0xD3, 0x01, 0x05, 0x31, 0xA0, 0x6F,  // T....1.o
                /* 1330 */  0x84, 0xBE, 0x86, 0xE1, 0xCE, 0x0D, 0xEC, 0xFF,  // ........
                /* 1338 */  0x7F, 0x6E, 0xC0, 0x1C, 0x8F, 0x80, 0xE1, 0x21,  // .n.....!
                /* 1340 */  0x8C, 0x5D, 0x7E, 0x80, 0x45, 0x8C, 0xB3, 0x15,  // .]~.E...
                /* 1348 */  0x4A, 0xF8, 0xC5, 0x84, 0x82, 0x78, 0x62, 0x3E,  // J....xb>
                /* 1350 */  0xC1, 0xC1, 0xB9, 0x4E, 0x70, 0x91, 0x63, 0xD2,  // ...Np.c.
                /* 1358 */  0xA1, 0x16, 0xFC, 0x63, 0xF1, 0x09, 0x0E, 0x7C,  // ...c...|
                /* 1360 */  0xA3, 0x82, 0x3B, 0xDC, 0xB3, 0x39, 0x2A, 0xF0,  // ..;..9*.
                /* 1368 */  0x5F, 0x14, 0x7C, 0xCC, 0x03, 0xE7, 0xFF, 0xFF,  // _.|.....
                /* 1370 */  0xD6, 0x01, 0x9C, 0x95, 0xDA, 0x94, 0x78, 0x47,  // ......xG
                /* 1378 */  0x02, 0x59, 0xBC, 0x3B, 0x12, 0x5A, 0xE4, 0xAD,  // .Y.;.Z..
                /* 1380 */  0x03, 0xEA, 0x91, 0xC7, 0xB2, 0xEE, 0x48, 0x28,  // ......H(
                /* 1388 */  0x41, 0x30, 0xBA, 0x24, 0xF9, 0xEC, 0xC0, 0x97,  // A0.$....
                /* 1390 */  0x66, 0x30, 0x83, 0xF8, 0x8E, 0xE4, 0x20, 0xB7,  // f0.... .
                /* 1398 */  0x0E, 0xE8, 0x17, 0x24, 0xE0, 0x79, 0x74, 0x00,  // ...$.yt.
                /* 13A0 */  0xC7, 0xF9, 0x02, 0xFE, 0x0D, 0x09, 0x3C, 0xA3,  // ......<.
                /* 13A8 */  0xC2, 0xFD, 0xFF, 0xCF, 0x17, 0xC0, 0xEF, 0x8E,  // ........
                /* 13B0 */  0x04, 0x9E, 0xF3, 0x05, 0x60, 0x4A, 0xE9, 0x25,  // ....`J.%
                /* 13B8 */  0x09, 0x64, 0x7A, 0x0E, 0xEA, 0xE8, 0x54, 0x07,  // .dz...T.
                /* 13C0 */  0x75, 0xA8, 0xDE, 0x00, 0x95, 0xE3, 0x84, 0x4E,  // u......N
                /* 13C8 */  0x47, 0xE5, 0x04, 0x30, 0xBA, 0x24, 0x01, 0xBF,  // G..0.$..
                /* 13D0 */  0xFF, 0xFF, 0x25, 0x09, 0x30, 0x11, 0xE5, 0x66,  // ..%.0..f
                /* 13D8 */  0x82, 0x12, 0x7F, 0x33, 0xA1, 0x20, 0xBE, 0x1C,  // ...3. ..
                /* 13E0 */  0xFB, 0x0C, 0xE7, 0xA9, 0xE2, 0xA0, 0x3D, 0x80,  // ......=.
                /* 13E8 */  0x47, 0x80, 0x17, 0x13, 0xB8, 0x57, 0x24, 0xE0,  // G....W$.
                /* 13F0 */  0x35, 0x26, 0x58, 0x8A, 0xC7, 0x04, 0x04, 0x6E,  // 5&X....n
                /* 13F8 */  0x1C, 0xE0, 0x1C, 0x13, 0xAC, 0x3B, 0xFE, 0x31,  // .....;.1
                /* 1400 */  0x81, 0xE9, 0xFF, 0x7F, 0x83, 0x07, 0x06, 0x63,  // .......c
                /* 1408 */  0x82, 0x7D, 0xA6, 0x38, 0x26, 0xF0, 0xDF, 0x8C,  // .}.8&...
                /* 1410 */  0x7C, 0x6F, 0x01, 0x3C, 0xFD, 0x15, 0x3B, 0xBC,  // |o.<..;.
                /* 1418 */  0x66, 0x81, 0xEC, 0xA0, 0xE1, 0x7B, 0x0B, 0x4E,  // f....{.N
                /* 1420 */  0xC2, 0x35, 0x0B, 0xE2, 0x30, 0x1F, 0x31, 0x1D,  // .5..0.1.
                /* 1428 */  0xFA, 0xAA, 0x47, 0x47, 0xE5, 0xB8, 0x24, 0x0A,  // ..GG..$.
                /* 1430 */  0x7D, 0x6F, 0x41, 0xC5, 0x3C, 0x64, 0x50, 0x10,  // }oA.<dP.
                /* 1438 */  0x03, 0xFA, 0xE0, 0x0D, 0x96, 0xFF, 0xFF, 0xBD,  // ........
                /* 1440 */  0x05, 0x9C, 0x07, 0x6F, 0xC0, 0xF4, 0x69, 0x17,  // ...o..i.
                /* 1448 */  0x7C, 0xC7, 0x09, 0xE0, 0xED, 0xD0, 0xE2, 0x25,  // |......%
                /* 1450 */  0x10, 0x6C, 0x97, 0x3E, 0x1F, 0x27, 0xD8, 0xFF,  // .l.>.'..
                /* 1458 */  0x7F, 0xBC, 0x2C, 0xD4, 0x52, 0x75, 0x9C, 0x80,  // ..,.Ru..
                /* 1460 */  0x67, 0xEE, 0x2E, 0x4A, 0x2F, 0x81, 0x3C, 0x00,  // g..J/.<.
                /* 1468 */  0x85, 0xE4, 0xDF, 0x47, 0x51, 0x82, 0xE1, 0x28,  // ...GQ..(
                /* 1470 */  0x88, 0xC7, 0xE6, 0x13, 0x35, 0x70, 0xBB, 0x4F,  // ....5p.O
                /* 1478 */  0x80, 0xEF, 0x44, 0x0D, 0xDC, 0xCE, 0x0D, 0x80,  // ..D.....
                /* 1480 */  0xA9, 0xCB, 0x1D, 0xDC, 0xFF, 0xFF, 0xB9, 0x01,  // ........
                /* 1488 */  0x46, 0xFA, 0x73, 0x03, 0xFA, 0x24, 0xED, 0xCB,  // F.s..$..
                /* 1490 */  0x1D, 0xBC, 0x73, 0x83, 0x55, 0x9F, 0xA8, 0x51,  // ..s.U..Q
                /* 1498 */  0x7A, 0x29, 0xA4, 0xFA, 0xDC, 0x80, 0xD2, 0x79,  // z).....y
                /* 14A0 */  0x6E, 0xA0, 0x20, 0x1E, 0x9B, 0x13, 0x1C, 0x0A,  // n. .....
                /* 14A8 */  0xD0, 0xA3, 0xF4, 0x7C, 0x1F, 0x02, 0xEA, 0x3C,  // ...|...<
                /* 14B0 */  0xD4, 0x00, 0xD1, 0x5B, 0x0F, 0xB0, 0x3A, 0x33,  // ...[..:3
                /* 14B8 */  0x80, 0xEF, 0xD6, 0x03, 0x98, 0xF8, 0xFF, 0x5F,  // ......._
                /* 14C0 */  0xED, 0xC0, 0x7B, 0xDD, 0x00, 0x1C, 0xF9, 0x34,  // ..{....4
                /* 14C8 */  0xE9, 0xF4, 0xD6, 0x03, 0xB2, 0x48, 0xD7, 0x0D,  // .....H..
                /* 14D0 */  0xB4, 0xB0, 0x3B, 0x19, 0xD4, 0x4B, 0x9D, 0xA5,  // ..;..K..
                /* 14D8 */  0x1C, 0xA5, 0x51, 0x22, 0x0E, 0xD1, 0xBE, 0x60,  // ..Q"...`
                /* 14E0 */  0xA2, 0xAE, 0x66, 0x1C, 0xC4, 0x17, 0x3C, 0x9F,  // ..f...<.
                /* 14E8 */  0x4D, 0x7D, 0xDD, 0x80, 0x77, 0xE9, 0x01, 0xEE,  // M}..w...
                /* 14F0 */  0xFF, 0xFF, 0x7B, 0x11, 0x70, 0xB9, 0x71, 0x80,  // ..{.p.q.
                /* 14F8 */  0xEF, 0x5E, 0x04, 0xDC, 0x4E, 0x16, 0x80, 0xAA,  // .^..N...
                /* 1500 */  0x7B, 0x11, 0xC8, 0xE2, 0x9F, 0x2C, 0xD0, 0x21,  // {....,.!
                /* 1508 */  0x4E, 0x16, 0x50, 0x0F, 0x46, 0x4F, 0x00, 0xBA,  // N.P.FO..
                /* 1510 */  0x17, 0xA1, 0x04, 0x53, 0x48, 0xF6, 0xBD, 0x08,  // ...SH...
                /* 1518 */  0x25, 0x14, 0x46, 0xFF, 0x7F, 0x38, 0x83, 0x78,  // %.F..8.x
                /* 1520 */  0x6C, 0x8E, 0x70, 0x28, 0x40, 0xAB, 0x00, 0x91,  // l.p(@...
                /* 1528 */  0xC2, 0x79, 0x68, 0x0C, 0x5D, 0x1F, 0x8C, 0x00,  // .yh.]...
                /* 1530 */  0x62, 0xFF, 0xFF, 0xCF, 0x1B, 0xC0, 0xDD, 0xA6,  // b.......
                /* 1538 */  0x57, 0x91, 0x07, 0x23, 0x90, 0x85, 0x3A, 0x6F,  // W..#..:o
                /* 1540 */  0xA0, 0xA5, 0x9D, 0x37, 0xA0, 0x1E, 0x99, 0x2D,  // ...7...-
                /* 1548 */  0xE6, 0x60, 0x84, 0x92, 0x01, 0xA3, 0x93, 0x91,  // .`......
                /* 1550 */  0x0F, 0x05, 0x3C, 0xF6, 0x79, 0x83, 0x82, 0xF8,  // ..<.y...
                /* 1558 */  0x60, 0xE4, 0x43, 0x01, 0x9C, 0xF3, 0x06, 0xE6,  // `.C.....
                /* 1560 */  0x64, 0x04, 0x98, 0xFD, 0xFF, 0x9F, 0x8C, 0x00,  // d.......
                /* 1568 */  0x8E, 0x1C, 0x2D, 0x74, 0x32, 0x02, 0x59, 0x96,  // ..-t2.Y.
                /* 1570 */  0xA3, 0x05, 0x5A, 0xD1, 0xD1, 0x02, 0xA2, 0x34,  // ..Z....4
                /* 1578 */  0x01, 0xDA, 0x8E, 0x36, 0x3E, 0x19, 0xA1, 0xD2,  // ...6>...
                /* 1580 */  0x93, 0x28, 0xFD, 0xF1, 0x05, 0x95, 0xF7, 0x74,  // .(.....t
                /* 1588 */  0x40, 0x41, 0x0C, 0xE8, 0x30, 0x43, 0x44, 0x41,  // @A..0CDA
                /* 1590 */  0x7A, 0x20, 0x9E, 0xEF, 0xE9, 0x1C, 0xC3, 0x8B,  // z ......
                /* 1598 */  0x03, 0x66, 0xBA, 0x95, 0x23, 0x68, 0x32, 0xCD,  // .f..#h2.
                /* 15A0 */  0xC3, 0x69, 0x2E, 0x0F, 0x3F, 0xB0, 0xFF, 0xFF,  // .i..?...
                /* 15A8 */  0xB7, 0x23, 0x98, 0xBA, 0xAE, 0x05, 0xD0, 0x4F,  // .#.....O
                /* 15B0 */  0x01, 0x47, 0x7B, 0x26, 0x87, 0x60, 0xCF, 0x97,  // .G{&.`..
                /* 15B8 */  0x1F, 0x20, 0x12, 0x7F, 0xBA, 0xA8, 0xC0, 0xD3,  // . ......
                /* 15C0 */  0xA5, 0x20, 0x9E, 0x2E, 0x1C, 0x29, 0x57, 0x0A,  // . ...)W.
                /* 15C8 */  0xD4, 0x64, 0x71, 0xB7, 0x82, 0x87, 0x75, 0xB0,  // .dq...u.
                /* 15D0 */  0x5F, 0x13, 0x3D, 0x5C, 0x30, 0x5D, 0xDF, 0x80,  // _.=\0]..
                /* 15D8 */  0xBB, 0x52, 0x85, 0xB7, 0x0A, 0x70, 0xC5, 0x5A,  // .R...p.Z
                /* 15E0 */  0xA7, 0x6E, 0x15, 0x38, 0x71, 0xA7, 0x75, 0xF2,  // .n.8q.u.
                /* 15E8 */  0xFF, 0xBF, 0x55, 0xC0, 0xF2, 0x06, 0xE9, 0xD3,  // ..U.....
                /* 15F0 */  0x3A, 0x4A, 0x08, 0x85, 0x64, 0x5C, 0xDF, 0x50,  // :J..d\.P
                /* 15F8 */  0xD7, 0x2C, 0x83, 0x19, 0xC4, 0xA3, 0x73, 0xA8,  // .,....s.
                /* 1600 */  0x73, 0x01, 0x5A, 0xD2, 0xAD, 0x02, 0xCA, 0xD9,  // s.Z.....
                /* 1608 */  0x00, 0x5C, 0xB7, 0x20, 0xF0, 0x9C, 0x0D, 0x00,  // .\. ....
                /* 1610 */  0x53, 0x5E, 0xCF, 0x06, 0x20, 0x0B, 0x73, 0x81,  // S^.. .s.
                /* 1618 */  0x41, 0x4B, 0xBA, 0x6A, 0x41, 0x75, 0x76, 0x9F,  // AK.jAuv.
                /* 1620 */  0xA5, 0x17, 0x18, 0x1E, 0x9F, 0x44, 0x47, 0x10,  // .....DG.
                /* 1628 */  0xB8, 0x69, 0xCE, 0x06, 0xC8, 0xFF, 0x3F, 0x41,  // .i....?A
                /* 1630 */  0x3D, 0x57, 0x2D, 0xD4, 0x09, 0x06, 0xE0, 0xBB,  // =W-.....
                /* 1638 */  0x4D, 0x91, 0xFF, 0xFF, 0x13, 0x0C, 0xD8, 0x82,  // M.......
                /* 1640 */  0x9D, 0x60, 0xD0, 0xF2, 0x4E, 0x30, 0x10, 0x8F,  // .`..N0..
                /* 1648 */  0x15, 0x6F, 0x30, 0x09, 0x0A, 0x3A, 0xC1, 0xA0,  // .o0..:..
                /* 1650 */  0xA4, 0x50, 0xE8, 0x08, 0xE3, 0x73, 0x01, 0x8F,  // .P...s..
                /* 1658 */  0x0E, 0x46, 0x41, 0x3C, 0x3A, 0xC7, 0x3A, 0x17,  // .FA<:.:.
                /* 1660 */  0xA0, 0x45, 0x1D, 0x2B, 0x20, 0xDD, 0x0D, 0xE0,  // .E.+ ...
                /* 1668 */  0x1C, 0x61, 0x00, 0xD3, 0x87, 0x83, 0x47, 0x18,  // .a....G.
                /* 1670 */  0xE0, 0xF3, 0xFF, 0x3F, 0x1C, 0x60, 0xAC, 0x1D,  // ...?.`..
                /* 1678 */  0x61, 0x00, 0xD2, 0xFF, 0xFF, 0x8F, 0x15, 0xC0,  // a.......
                /* 1680 */  0xC2, 0xA1, 0xC5, 0x23, 0x0C, 0x30, 0xBB, 0x78,  // ...#.0.x
                /* 1688 */  0xFA, 0x08, 0x03, 0xF0, 0xE9, 0x70, 0xF0, 0x08,  // .....p..
                /* 1690 */  0xC3, 0xFF, 0xFF, 0x87, 0x03, 0xB0, 0x28, 0xB4,  // ......(.
                /* 1698 */  0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A,  // .S.Q..ej
                /* 16A0 */  0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C,  // .iP.O...
                /* 16A8 */  0x95, 0x78, 0x0C, 0x28, 0x06, 0x84, 0xC6, 0xE2,  // .x.(....
                /* 16B0 */  0xD3, 0x8B, 0x41, 0xAC, 0x9B, 0x42, 0x57, 0x67,  // ..A..BWg
                /* 16B8 */  0x87, 0x00, 0x11, 0x90, 0x65, 0xFF, 0xC2, 0x05,  // ....e...
                /* 16C0 */  0x44, 0x40, 0x04, 0x64, 0x21, 0x9F, 0x14, 0x01,  // D@.d!...
                /* 16C8 */  0x59, 0x15, 0x88, 0x80, 0x9C, 0x0A, 0x88, 0x46,  // Y......F
                /* 16D0 */  0x04, 0xA2, 0x71, 0x3C, 0x00, 0xB1, 0x70, 0x20,  // ..q<..p 
                /* 16D8 */  0x02, 0xB2, 0x3A, 0x13, 0x40, 0x4C, 0x2A, 0x88,  // ..:.@L*.
                /* 16E0 */  0x80, 0x2C, 0x4B, 0x05, 0x10, 0x13, 0x09, 0x22,  // .,K...."
                /* 16E8 */  0x20, 0x67, 0x5C, 0x9F, 0x80, 0x1C, 0x18, 0x44,  //  g\....D
                /* 16F0 */  0x40, 0x0E, 0xF9, 0xAD, 0x16, 0x90, 0x23, 0x83,  // @.....#.
                /* 16F8 */  0x08, 0xC8, 0x82, 0x75, 0x00, 0x31, 0xF9, 0x20,  // ...u.1. 
                /* 1700 */  0x02, 0x72, 0x7C, 0x20, 0x2A, 0xC6, 0x07, 0x10,  // .r| *...
                /* 1708 */  0x8B, 0xF2, 0x18, 0x10, 0x90, 0x73, 0x81, 0x08,  // .....s..
                /* 1710 */  0xC8, 0x39, 0x68, 0x04, 0xE4, 0x54, 0x14, 0x02,  // .9h..T..
                /* 1718 */  0xB2, 0x2A, 0x27, 0x40, 0x4C, 0x23, 0x88, 0x80,  // .*'@L#..
                /* 1720 */  0x9C, 0x12, 0x88, 0x66, 0x06, 0xA2, 0x82, 0xAD,  // ...f....
                /* 1728 */  0x00, 0x31, 0xF5, 0x20, 0x02, 0xB2, 0x52, 0x2D,  // .1. ..R-
                /* 1730 */  0x40, 0x4C, 0x37, 0x88, 0x80, 0x9C, 0xDA, 0x0B,  // @L7.....
                /* 1738 */  0x10, 0xD3, 0xF0, 0x0E, 0x10, 0x90, 0x33, 0x98,  // ......3.
                /* 1740 */  0x01, 0x62, 0x89, 0x40, 0x04, 0x64, 0x45, 0x6E,  // .b.@.dEn
                /* 1748 */  0x80, 0x98, 0x3E, 0x10, 0x01, 0x39, 0x1D, 0x10,  // ..>..9..
                /* 1750 */  0xCD, 0x0A, 0x44, 0x95, 0xDA, 0x01, 0x62, 0xB2,  // ..D...b.
                /* 1758 */  0x41, 0x04, 0x64, 0x91, 0x0F, 0x21, 0x01, 0x59,  // A.d..!.Y
                /* 1760 */  0x32, 0x88, 0x80, 0x9C, 0xD8, 0x0F, 0x10, 0x8B,  // 2.......
                /* 1768 */  0x0F, 0x22, 0x20, 0x87, 0x3D, 0x84, 0x08, 0xC8,  // ." .=...
                /* 1770 */  0xD1, 0x41, 0x04, 0x64, 0xF9, 0x86, 0x80, 0x58,  // .A.d...X
                /* 1778 */  0x18, 0x10, 0x01, 0x59, 0x94, 0x23, 0x20, 0xA6,  // ...Y.# .
                /* 1780 */  0x10, 0x44, 0x40, 0x8E, 0x07, 0x44, 0xFE, 0xFF,  // .D@..D..
                /* 1788 */  0x83, 0x11, 0x10, 0x4D, 0xF6, 0x3A, 0x15, 0x90,  // ...M.:..
                /* 1790 */  0x73, 0x82, 0x08, 0xC8, 0x6A, 0x35, 0x01, 0x31,  // s...j5.1
                /* 1798 */  0xE9, 0x20, 0x02, 0x72, 0x6E, 0x20, 0x2A, 0xC2,  // . .rn *.
                /* 17A0 */  0x13, 0x10, 0x8B, 0x0C, 0xA2, 0x6B, 0x3B, 0x79,  // .....k;y
                /* 17A8 */  0x88, 0x08, 0xC8, 0x29, 0x4C, 0x01, 0xB1, 0x48,  // ...)L..H
                /* 17B0 */  0x20, 0x02, 0x72, 0x00, 0x55, 0x40, 0x2C, 0x0E,  //  .r.U@,.
                /* 17B8 */  0x88, 0x80, 0x2C, 0xC9, 0x15, 0x10, 0x13, 0x08,  // ..,.....
                /* 17C0 */  0x22, 0x20, 0xE7, 0x7B, 0x50, 0x08, 0xC8, 0x61,  // " .{P..a
                /* 17C8 */  0x41, 0x04, 0xE4, 0x68, 0xB6, 0x80, 0x58, 0x50,  // A..h..XP
                /* 17D0 */  0x10, 0x01, 0x59, 0xEA, 0x6B, 0x49, 0x40, 0x16,  // ..Y.kI@.
                /* 17D8 */  0x0E, 0x22, 0x20, 0x27, 0xF7, 0x05, 0xC4, 0x64,  // ." '...d
                /* 17E0 */  0xBC, 0x44, 0x04, 0xE4, 0xD0, 0x20, 0x02, 0xB2,  // .D... ..
                /* 17E8 */  0x04, 0x63, 0x40, 0x2C, 0x06, 0x88, 0x80, 0x1C,  // .c@,....
                /* 17F0 */  0x0A, 0x88, 0xAA, 0x7A, 0x76, 0x0A, 0xC8, 0x12,  // ...zv...
                /* 17F8 */  0x41, 0x74, 0x78, 0x20, 0x40, 0x34, 0x30, 0x10,  // Atx @40.
                /* 1800 */  0x8D, 0xF7, 0xB0, 0xD3, 0x80, 0x08, 0x88, 0x0E,  // ........
                /* 1808 */  0x18, 0xE4, 0x29, 0xA3, 0xC3, 0x05, 0x01, 0x11,  // ..).....
                /* 1810 */  0x90, 0x25, 0xBF, 0x78, 0x05, 0xE4, 0x00, 0x20,  // .%.x... 
                /* 1818 */  0x3A, 0x85, 0x10, 0x73, 0x40, 0x4C, 0x0E, 0x88,  // :..s@L..
                /* 1820 */  0x80, 0x9C, 0x44, 0x1D, 0x10, 0x8B, 0x05, 0xA2,  // ..D.....
                /* 1828 */  0x83, 0x02, 0x71, 0x77, 0x50, 0xA0, 0x20, 0x3A,  // ..qwP. :
                /* 1830 */  0x0C, 0x10, 0x7B, 0x87, 0x01, 0x0A, 0x22, 0x20,  // ..{..." 
                /* 1838 */  0x07, 0x03, 0xA2, 0x29, 0x81, 0x68, 0xA6, 0x9F,  // ...).h..
                /* 1840 */  0x95, 0x80, 0x9C, 0x10, 0x44, 0x40, 0xD6, 0xF9,  // ....D@..
                /* 1848 */  0x66, 0x11, 0x90, 0x55, 0x83, 0x08, 0xC8, 0xC1,  // f..U....
                /* 1850 */  0xFF, 0x2A, 0x81, 0x88, 0x8A, 0xF7, 0x4D, 0x20,  // .*....M 
                /* 1858 */  0x22, 0x1E, 0x44, 0x40, 0x4E, 0x02, 0x44, 0x75,  // ".D@N.Du
                /* 1860 */  0xBF, 0x5C, 0x02, 0x91, 0x14, 0x20, 0x02, 0xB2,  // .\... ..
                /* 1868 */  0x82, 0x87, 0x8C, 0x06, 0x46, 0x40, 0x04, 0xE4,  // ....F@..
                /* 1870 */  0xEC, 0x40, 0x54, 0x89, 0xC6, 0x81, 0x51, 0x10,  // .@T...Q.
                /* 1878 */  0x0D, 0x8C, 0x00, 0x51, 0x3D, 0x1E, 0x81, 0xFC,  // ...Q=...
                /* 1880 */  0xFF, 0x3F, 0x8A, 0x08, 0x44, 0x07, 0x06, 0x02,  // .?..D...
                /* 1888 */  0x44, 0x73, 0x02, 0x51, 0x8D, 0x8F, 0x96, 0x40,  // Ds.Q...@
                /* 1890 */  0x44, 0x30, 0x88, 0x0E, 0x1C, 0x04, 0x88, 0x46,  // D0.....F
                /* 1898 */  0x06, 0xA2, 0x62, 0x55, 0x02, 0x31, 0xE5, 0x20,  // ..bU.1. 
                /* 18A0 */  0x3A, 0x34, 0x10, 0x20, 0x9A, 0x1F, 0x88, 0xA6,  // :4. ....
                /* 18A8 */  0x75, 0x09, 0xC4, 0xB2, 0x83, 0x08, 0xC8, 0xDA,  // u.......
                /* 18B0 */  0x7F, 0x34, 0x81, 0x48, 0x10, 0x10, 0x01, 0x39,  // .4.H...9
                /* 18B8 */  0x3D, 0x10, 0x95, 0xA2, 0x73, 0xB0, 0x14, 0x44,  // =...s..D
                /* 18C0 */  0x07, 0x05, 0xE2, 0x13, 0x88, 0x45, 0x00, 0x11,  // .....E..
                /* 18C8 */  0x90, 0x03, 0x01, 0x51, 0x29, 0x2F, 0x9E, 0x40,  // ...Q)/.@
                /* 18D0 */  0x44, 0x18, 0x88, 0x80, 0x1C, 0x09, 0x88, 0x06,  // D.......
                /* 18D8 */  0x04, 0xA2, 0xD2, 0x8C, 0x02, 0x31, 0xA1, 0x20,  // .....1. 
                /* 18E0 */  0x3A, 0xB4, 0x10, 0x20, 0x1A, 0x19, 0x88, 0xCA,  // :.. ....
                /* 18E8 */  0x7D, 0xFD, 0x04, 0x22, 0xE2, 0x41, 0x04, 0xE4,  // }..".A..
                /* 18F0 */  0xE8, 0x1F, 0x20, 0x01, 0x59, 0xC7, 0x23, 0xE8,  // .. .Y.#.
                /* 18F8 */  0x41, 0x80, 0x81, 0xE8, 0x20, 0x40, 0x80, 0xA8,  // A... @..
                /* 1900 */  0x04, 0xAB, 0x40, 0x4C, 0x0F, 0x88, 0x0E, 0x2E,  // ..@L....
                /* 1908 */  0x04, 0x88, 0x86, 0x02, 0xA2, 0x62, 0xB4, 0x02,  // .....b..
                /* 1910 */  0x31, 0x65, 0x20, 0x02, 0x72, 0x22, 0x20, 0x1A,  // 1e .r" .
                /* 1918 */  0x0F, 0x88, 0xEA, 0x7A, 0x0F, 0x3D, 0xDC, 0x30,  // ...z.=.0
                /* 1920 */  0x10, 0x1D, 0x54, 0x08, 0x10, 0x8D, 0x0A, 0x44,  // ..T....D
                /* 1928 */  0x73, 0x89, 0x3D, 0x34, 0x50, 0x10, 0x1D, 0x56,  // s.=4P..V
                /* 1930 */  0x88, 0xDA, 0xC3, 0x0A, 0x05, 0xD1, 0x61, 0x85,  // ......a.
                /* 1938 */  0xB8, 0x3D, 0xAC, 0x50, 0x10, 0x1D, 0x56, 0x88,  // .=.P..V.
                /* 1940 */  0xDC, 0xC3, 0x0A, 0x05, 0xD1, 0x61, 0x85, 0xD8,  // .....a..
                /* 1948 */  0x3D, 0xAC, 0x50, 0x10, 0x01, 0x59, 0xB4, 0x5E,  // =.P..Y.^
                /* 1950 */  0x20, 0x16, 0x01, 0x44, 0x87, 0x06, 0xF2, 0x6A,  //  ..D...j
                /* 1958 */  0xD2, 0xA1, 0x81, 0x80, 0xE8, 0x60, 0x42, 0x80,  // .....`B.
                /* 1960 */  0x68, 0x24, 0x20, 0x1A, 0xE0, 0xB5, 0x15, 0x48,  // h$ ....H
                /* 1968 */  0xFF, 0xFF, 0x83, 0x89, 0x40, 0x74, 0xDA, 0x22,  // ....@t."
                /* 1970 */  0x8E, 0x81, 0x98, 0x38, 0x10, 0x01, 0x39, 0xDC,  // ...8..9.
                /* 1978 */  0x7B, 0x49, 0x83, 0x23, 0x20, 0x3A, 0x94, 0x90,  // {I.# :..
                /* 1980 */  0x47, 0xD9, 0x43, 0x09, 0x03, 0xD1, 0xE1, 0x80,  // G.C.....
                /* 1988 */  0x7C, 0xB0, 0x74, 0x38, 0x20, 0xBF, 0x44, 0x1D,  // |.t8 .D.
                /* 1990 */  0x04, 0x88, 0xEA, 0x61, 0x51, 0x10, 0x2A, 0xF7,  // ...aQ.*.
                /* 1998 */  0x2F, 0x16, 0x84, 0x44, 0xFD, 0x43, 0x05, 0x21,  // /..D.C.!
                /* 19A0 */  0x42, 0x3F, 0x60, 0x3A, 0x1E, 0x90, 0x1F, 0x55,  // B?`:...U
                /* 19A8 */  0x70, 0x92, 0x0F, 0x44, 0x47, 0x0F, 0xF2, 0x1A,  // p..DG...
                /* 19B0 */  0xD3, 0xD1, 0x83, 0x80, 0x08, 0xC8, 0x6A, 0x8C,  // ......j.
                /* 19B8 */  0x03, 0x31, 0x6D, 0x20, 0x3A, 0x3A, 0x11, 0x20,  // .1m ::. 
                /* 19C0 */  0x9A, 0x11, 0x88, 0x2A, 0xFC, 0xB9, 0x05, 0x22,  // ...*..."
                /* 19C8 */  0x72, 0x41, 0x74, 0x4C, 0x21, 0x40, 0x34, 0x30,  // rAtL!@40
                /* 19D0 */  0x10, 0x95, 0xF9, 0x0C, 0x14, 0x90, 0x35, 0x83,  // ......5.
                /* 19D8 */  0x08, 0xC8, 0xFA, 0x7E, 0x70, 0x81, 0x88, 0x5A,  // ...~p..Z
                /* 19E0 */  0x10, 0x01, 0x39, 0xA9, 0x76, 0x20, 0x16, 0x1B,  // ..9.v ..
                /* 19E8 */  0x44, 0x40, 0xD6, 0xFA, 0x96, 0x3B, 0x4C, 0x06,  // D@...;L.
                /* 19F0 */  0xA2, 0xE3, 0x00, 0x79, 0xB7, 0x3D, 0x0E, 0x30,  // ...y.=.0
                /* 19F8 */  0x10, 0x0D, 0x92, 0x00, 0xD1, 0xE8, 0x40, 0x54,  // ......@T
                /* 1A00 */  0xB8, 0xFA, 0xE3, 0x08, 0x05, 0xD1, 0x11, 0x82,  // ........
                /* 1A08 */  0x00, 0x51, 0x1D, 0xEE, 0x81, 0x98, 0x7A, 0x10,  // .Q....z.
                /* 1A10 */  0x01, 0x39, 0x0A, 0x10, 0x95, 0x2D, 0xFF, 0x18,  // .9...-..
                /* 1A18 */  0x43, 0x41, 0x74, 0x8C, 0x20, 0xFA, 0x8F, 0x11,  // CAt. ...
                /* 1A20 */  0x14, 0x44, 0x40, 0x0E, 0x01, 0x44, 0x13, 0x01,  // .D@..D..
                /* 1A28 */  0x51, 0xF5, 0xFE, 0x81, 0x58, 0x16, 0x10, 0x01,  // Q...X...
                /* 1A30 */  0x59, 0x53, 0x80, 0x81, 0x53, 0x10, 0x1D, 0x21,  // YS..S..!
                /* 1A38 */  0x48, 0x81, 0x63, 0x01, 0x05, 0xD1, 0x40, 0x49,  // H.c...@I
                /* 1A40 */  0x02, 0x20, 0x26, 0x16, 0x44, 0x83, 0x26, 0x40,  // . &.D.&@
                /* 1A48 */  0x34, 0x30, 0x10, 0x15, 0xDD, 0x00, 0x88, 0x25,  // 40.....%
                /* 1A50 */  0x00, 0xD1, 0xF1, 0x84, 0x44, 0x38, 0x26, 0x51,  // ....D8&Q
                /* 1A58 */  0x10, 0x01, 0xFD, 0xFF, 0x1F, 0x81, 0x54, 0x01,  // ......T.
                /* 1A60 */  0x88, 0x29, 0xC8, 0x00, 0xC4, 0xB2, 0x82, 0x08,  // .)......
                /* 1A68 */  0xC8, 0xC9, 0x81, 0xA8, 0xE6, 0x10, 0x03, 0xA0,  // ........
                /* 1A70 */  0x20, 0x3A, 0xC6, 0x10, 0x20, 0xAA, 0xA4, 0x04,  //  :.. ...
                /* 1A78 */  0x10, 0x4B, 0x90, 0xE2, 0x08, 0x41, 0x41, 0x34,  // .K...AA4
                /* 1A80 */  0x70, 0xD2, 0x02, 0x88, 0xC5, 0x00, 0xD1, 0x60,  // p......`
                /* 1A88 */  0x49, 0x0D, 0x20, 0x26, 0x08, 0x44, 0xC7, 0x31,  // I. &.D.1
                /* 1A90 */  0x02, 0x44, 0x83, 0x01, 0x51, 0x49, 0x3D, 0x8E,  // .D..QI=.
                /* 1A98 */  0x5C, 0x14, 0x44, 0x40, 0xD6, 0x12, 0xE4, 0x18,  // \.D@....
                /* 1AA0 */  0x42, 0x41, 0x74, 0x60, 0x20, 0x45, 0x0E, 0x0C,  // BAt` E..
                /* 1AA8 */  0x14, 0x44, 0x83, 0x25, 0x49, 0x0E, 0x09, 0x14,  // .D.%I...
                /* 1AB0 */  0x44, 0x40, 0x0E, 0xDA, 0x04, 0x88, 0xA5, 0x06,  // D@......
                /* 1AB8 */  0xD1, 0x40, 0x49, 0x94, 0x63, 0x0D, 0x05, 0xD1,  // .@I.c...
                /* 1AC0 */  0x21, 0x81, 0x54, 0x39, 0x24, 0x50, 0x10, 0x01,  // !.T9$P..
                /* 1AC8 */  0x39, 0x70, 0x96, 0x23, 0x08, 0x05, 0xD1, 0xE0,  // 9p.#....
                /* 1AD0 */  0x48, 0x97, 0xC1, 0x51, 0x10, 0x1D, 0x95, 0xC8,  // H..Q....
                /* 1AD8 */  0x3B, 0x55, 0xC7, 0x0F, 0x02, 0xA2, 0x63, 0x14,  // ;U....c.
                /* 1AE0 */  0x29, 0x03, 0xC4, 0x32, 0x81, 0x08, 0xC8, 0x3A,  // )..2...:
                /* 1AE8 */  0x9E, 0xBB, 0x02, 0xB2, 0x28, 0x10, 0x1D, 0x99,  // ....(...
                /* 1AF0 */  0x08, 0x10, 0x8D, 0x05, 0x44, 0xA5, 0xB4, 0x01,  // ....D...
                /* 1AF8 */  0x62, 0xBA, 0x40, 0x74, 0xCC, 0x23, 0x40, 0x34,  // b.@t.#@4
                /* 1B00 */  0x1B, 0x10, 0x8D, 0x11, 0xE7, 0x08, 0x43, 0x41,  // ......CA
                /* 1B08 */  0x74, 0x1C, 0x21, 0x79, 0x8E, 0x23, 0x14, 0x44,  // t.!y.#.D
                /* 1B10 */  0x07, 0x0F, 0x02, 0x44, 0x03, 0x02, 0x51, 0x61,  // ...D..Qa
                /* 1B18 */  0x7D, 0x80, 0x98, 0x4C, 0x10, 0x1D, 0x4B, 0x08,  // }..L..K.
                /* 1B20 */  0x10, 0x8D, 0x0A, 0x44, 0x45, 0x06, 0x1A, 0x28,  // ...DE..(
                /* 1B28 */  0x05, 0xD1, 0xE1, 0x82, 0x00, 0xD1, 0xE8, 0x40,  // .......@
                /* 1B30 */  0x54, 0x79, 0xA2, 0x81, 0x52, 0x10, 0x1D, 0x87,  // Ty..R...
                /* 1B38 */  0x08, 0x10, 0x95, 0xD2, 0x08, 0xC8, 0xFF, 0xFF,  // ........
                /* 1B40 */  0x43, 0x9E, 0x40, 0x74, 0x60, 0x20, 0x91, 0x0E,  // C.@t` ..
                /* 1B48 */  0x09, 0xB4, 0x12, 0x10, 0xCB, 0x03, 0x22, 0x20,  // ......" 
                /* 1B50 */  0x2B, 0xC9, 0x34, 0x48, 0x0A, 0x22, 0x20, 0xE7,  // +.4H." .
                /* 1B58 */  0x01, 0xA2, 0xE9, 0x80, 0xA8, 0xAA, 0x50, 0x47,  // ......PG
                /* 1B60 */  0x31, 0x0A, 0xA2, 0x41, 0x92, 0x52, 0x83, 0xA4,  // 1..A.R..
                /* 1B68 */  0x20, 0x3A, 0x6E, 0x11, 0x20, 0x1A, 0x13, 0x88,  //  :n. ...
                /* 1B70 */  0x4A, 0x6C, 0x75, 0x8C, 0xA2, 0x20, 0x1A, 0x1C,  // Jlu.. ..
                /* 1B78 */  0x01, 0xA2, 0xD1, 0x81, 0xA8, 0xEC, 0x07, 0xAA,  // ........
                /* 1B80 */  0x0E, 0x1F, 0x04, 0x44, 0xC7, 0x43, 0x52, 0x0B,  // ...D.CR.
                /* 1B88 */  0x88, 0x69, 0xC9, 0x35, 0x38, 0x0A, 0xA2, 0xC1,  // .i.58...
                /* 1B90 */  0x91, 0x5E, 0x03, 0xA5, 0x20, 0x02, 0x72, 0x0E,  // .^.. .r.
                /* 1B98 */  0x20, 0x9A, 0x1F, 0x88, 0xAA, 0x09, 0x76, 0xDC,  //  .....v.
                /* 1BA0 */  0xA1, 0x20, 0x3A, 0x20, 0x10, 0x20, 0xAA, 0x26,  // . : . .&
                /* 1BA8 */  0x19, 0x10, 0x93, 0x06, 0x22, 0x20, 0x6B, 0x68,  // ...." kh
                /* 1BB0 */  0x06, 0xC4, 0x14, 0x81, 0x08, 0xC8, 0x59, 0xA2,  // ......Y.
                /* 1BB8 */  0x01, 0xB1, 0x64, 0x20, 0x3A, 0x1A, 0x92, 0x6A,  // ..d :..j
                /* 1BC0 */  0x07, 0x0B, 0x0A, 0xA2, 0x43, 0x05, 0xC9, 0x76,  // ....C..v
                /* 1BC8 */  0xBC, 0xA4, 0x20, 0x3A, 0x18, 0x90, 0x6E, 0x40,  // .. :..n@
                /* 1BD0 */  0x4C, 0x25, 0x88, 0x06, 0x4C, 0xC2, 0x0D, 0x98,  // L%..L...
                /* 1BD8 */  0x82, 0x08, 0xC8, 0xA1, 0xCA, 0x01, 0x53, 0x10,  // ......S.
                /* 1BE0 */  0x1D, 0xAD, 0x48, 0xBA, 0xA3, 0x15, 0x05, 0x11,  // ..H.....
                /* 1BE8 */  0x90, 0x03, 0x02, 0xD1, 0xB8, 0x40, 0x54, 0x65,  // .....@Te
                /* 1BF0 */  0xBC, 0x43, 0x02, 0x05, 0xD1, 0x41, 0x83, 0x00,  // .C...A..
                /* 1BF8 */  0xD1, 0xD4, 0x40, 0x34, 0x5E, 0xBD, 0xE3, 0x1D,  // ..@4^...
                /* 1C00 */  0x05, 0xD1, 0x61, 0x87, 0xF4, 0x03, 0x62, 0xA2,  // ..a...b.
                /* 1C08 */  0x41, 0x74, 0x08, 0x20, 0x40, 0x34, 0x3A, 0x10,  // At. @4:.
                /* 1C10 */  0x95, 0x1C, 0xF0, 0x88, 0x47, 0x41, 0x74, 0xD0,  // ....GAt.
                /* 1C18 */  0x20, 0x09, 0x07, 0x4E, 0x41, 0x04, 0xF4, 0xFF,  //  ..NA...
                /* 1C20 */  0x7F, 0x48, 0x11, 0x10, 0x55, 0xD2, 0xF0, 0x88,  // .H..U...
                /* 1C28 */  0x45, 0x23, 0x1E, 0x8C, 0x28, 0x88, 0x0E, 0x07,  // E#..(...
                /* 1C30 */  0x24, 0x23, 0x10, 0xD3, 0x0B, 0xA2, 0x63, 0x29,  // $#....c)
                /* 1C38 */  0xE9, 0x08, 0xC4, 0xB4, 0x82, 0xE8, 0xA8, 0x49,  // .......I
                /* 1C40 */  0x42, 0x1E, 0x35, 0x69, 0xC9, 0x83, 0x06, 0x4D,  // B.5i...M
                /* 1C48 */  0x79, 0x18, 0xA0, 0x20, 0x3A, 0x44, 0x90, 0x96,  // y.. :D..
                /* 1C50 */  0x87, 0x08, 0x0A, 0x22, 0x20, 0x2B, 0xAB, 0x09,  // ..." +..
                /* 1C58 */  0xC4, 0x74, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .t.....
            })
            Name (EPY1, 0x117CCBE8)
            Name (EPY2, 0x4C548558)
            Name (EPY3, 0x09F82306)
            Name (EPY4, 0x76FC46BD)
            Method (EYPO, 0, Serialized)
            {
                Return (EPY1) /* \AMW0.EPY1 */
            }

            Method (EYPT, 0, Serialized)
            {
                Return (EPY2) /* \AMW0.EPY2 */
            }

            Method (EYPE, 0, Serialized)
            {
                Return (EPY3) /* \AMW0.EPY3 */
            }

            Method (EYPF, 0, Serialized)
            {
                Return (EPY4) /* \AMW0.EPY4 */
            }

            Method (SPEC, 1, Serialized)
            {
                Return (AMWV) /* \AMWV */
            }

            Method (DEVP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, PARA)
                If ((PARA == One))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF |= One
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF |= 0x02
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF |= 0x04
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF |= 0x08
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF |= 0x10
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF |= 0x20
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF |= 0x40
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF |= 0x80
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF |= 0x0100
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF |= 0x0200
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF |= 0x0400
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF |= 0x0800
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF |= 0x1000
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF |= 0x2000
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF |= 0x4000
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF |= 0x8000
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF |= 0x00010000
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF |= 0x00020000
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF |= 0x00040000
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF |= 0x00080000
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF |= 0x00100000
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((PARA == Zero))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFE
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFD
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFB
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFF7
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFEF
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFDF
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFBF
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFF7F
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFEFF
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFDFF
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFBFF
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFF7FF
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFEFFF
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFDFFF
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFBFFF
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFF7FFF
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFEFFFF
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFDFFFF
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFBFFFF
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFF7FFFF
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFEFFFFF
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }

                Return (One)
            }

            Method (SDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (GDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (DVID)
                {
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                Switch (DVID)
                {
                    Case (0xA0000000)
                    {
                        Local0 = 0x02
                    }
                    Case (0xA0000002)
                    {
                        Local0 = One
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Local0 = Zero
                    }

                }

                Local0 &= 0x0007FFFF
                Return (Local0)
            }

            Method (GPID, 0, Serialized)
            {
                Return (Zero)
            }

            Method (KBFT, 1, Serialized)
            {
                Return (Zero)
            }

            Method (HKEY, 0, Serialized)
            {
                Return (Zero)
            }

            Method (CFVS, 1, Serialized)
            {
            }

            Method (CFVG, 0, Serialized)
            {
            }

            Name (RAMA, 0xCAC3E018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\RAMX, SystemMemory, RAMA, 0x0100)
            Field (RAMX, ByteAcc, NoLock, Preserve)
            {
                WFUN,   32, 
                WSIZ,   32, 
                Offset (0x10), 
                IDAT,   896, 
                ODAT,   1024
            }

            Mutex (WMTX, 0x00)
            Name (LSTF, Buffer (0x04){})
            Name (LSTI, Buffer (0x70){})
            Name (CURF, Buffer (0x04){})
            Name (CURI, Buffer (0x70){})
            Method (WMII, 0, Serialized)
            {
                CURF = WFUN /* \AMW0.WFUN */
                CURI = IDAT /* \AMW0.IDAT */
                If (((CURF == LSTF) && (CURI == LSTI)))
                {
                    Return (Zero)
                }
                Else
                {
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    LSTF = WFUN /* \AMW0.WFUN */
                    LSTI = IDAT /* \AMW0.IDAT */
                }
            }

            Method (LERR, 1, Serialized)
            {
                WBUF = ODAT /* \AMW0.ODAT */
                Return (DerefOf (WBUF [Zero]))
            }

            Method (GBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000001
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000002
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GBON, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000003
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GLBN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000006
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (ISLG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000007
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000008
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000009
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SAPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000004
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SUPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000005
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SBOG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000A
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (LDFT, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000B
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFTB, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000C
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SDFT, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000D
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFTM, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000E
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (DCTL, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000F
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000010
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFAN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000011
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000012
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SFCV, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000013
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (CKPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000014
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GTOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000015
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (STOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000016
                    IDAT = Arg0
                    WMII ()
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0xCACFF018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            DSAF,   32, 
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        OperationRegion (IOB2, SystemIO, SMIP, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMPT,   8, 
            SMIS,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMPT = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000005
            ISMI (0x90)
            Return (PAR0) /* \_SB_.PAR0 */
        }

        Method (GNVS, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000003
            ISMI (0x90)
            Return (PAR1) /* \_SB_.PAR1 */
        }

        Method (SNVS, 2, Serialized)
        {
            PAR0 = Arg0
            PAR1 = Arg1
            PINX = 0x80000004
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            PINX = 0x8000000A
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (((Arg0 > 0x03) && (Arg0 < 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (_SB)
    {
        OperationRegion (WPBR, SystemMemory, 0xCAD10000, 0x0001)
        Field (WPBR, AnyAcc, NoLock, Preserve)
        {
            CTRL,   8
        }
    }

    Scope (\)
    {
        Device (ABAW)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AsusBACKUPWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x19, 0x56, 0x48, 0xA0, 0x07, 0x3E, 0xBE, 0x4A,  // .VH..>.J
                /* 0008 */  0xBE, 0x6B, 0x0A, 0xB6, 0x7E, 0x2A, 0x92, 0xE6,  // .k..~*..
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x41424145)
                    {
                        Return (EABA ())
                    }
                    Case (0x41424147)
                    {
                        Return (GABA ())
                    }
                    Case (0x53425544)
                    {
                        Return (SBUD (Arg2))
                    }
                    Case (0x47425544)
                    {
                        Return (GBUD (Arg2))
                    }
                    Case (0x53595343)
                    {
                        Return (SYSC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (WQMO, Buffer (0x03F5)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE5, 0x03, 0x00, 0x00, 0x06, 0x0F, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x50, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // .P.....B
                /* 0020 */  0x20, 0x74, 0x01, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  t....!.
                /* 0028 */  0x46, 0x01, 0x0C, 0x46, 0x02, 0x84, 0xE4, 0x40,  // F..F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x9C, 0xA0, 0x6C, 0x68, 0x94, 0x0C, 0x08,  // h..lh...
                /* 0078 */  0x79, 0x16, 0x60, 0x1D, 0x98, 0x10, 0xD8, 0xBD,  // y.`.....
                /* 0080 */  0x00, 0x83, 0x02, 0x84, 0xCD, 0x42, 0xE2, 0x04,  // .....B..
                /* 0088 */  0x58, 0x13, 0xA0, 0x4D, 0x80, 0x31, 0x01, 0xE6,  // X..M.1..
                /* 0090 */  0x04, 0xD8, 0x12, 0xE0, 0x4C, 0x80, 0x45, 0x28,  // ....L.E(
                /* 0098 */  0x79, 0x43, 0x11, 0x58, 0xBC, 0x0A, 0x71, 0x84,  // yC.X..q.
                /* 00A0 */  0x12, 0xC3, 0x80, 0x31, 0xA2, 0x44, 0x0B, 0x65,  // ...1.D.e
                /* 00A8 */  0x98, 0x80, 0x91, 0x2A, 0x83, 0x11, 0x72, 0x8C,  // ...*..r.
                /* 00B0 */  0x70, 0xB6, 0x3F, 0x08, 0x12, 0x6C, 0xC1, 0x1A,  // p.?..l..
                /* 00B8 */  0xAA, 0x23, 0x8D, 0x06, 0x35, 0xBC, 0x04, 0x87,  // .#..5...
                /* 00C0 */  0xEB, 0xA1, 0x9E, 0x63, 0xE7, 0x02, 0xA4, 0x4F,  // ...c...O
                /* 00C8 */  0x52, 0x20, 0x07, 0x79, 0x6E, 0x75, 0x8E, 0x93,  // R .ynu..
                /* 00D0 */  0x80, 0x24, 0x30, 0x56, 0x82, 0x0E, 0x06, 0x0E,  // .$0V....
                /* 00D8 */  0xC5, 0x35, 0xA0, 0x66, 0x7C, 0xBC, 0x4C, 0x10,  // .5.f|.L.
                /* 00E0 */  0x1C, 0x6A, 0x88, 0x1E, 0x68, 0xB8, 0x13, 0x38,  // .j..h..8
                /* 00E8 */  0x44, 0x06, 0xE8, 0x69, 0x1D, 0x0D, 0xE6, 0x00,  // D..i....
                /* 00F0 */  0x60, 0x87, 0x93, 0xD1, 0x3D, 0xA0, 0x54, 0x01,  // `...=.T.
                /* 00F8 */  0x66, 0xC7, 0xAC, 0x89, 0x25, 0x38, 0x1E, 0x43,  // f...%8.C
                /* 0100 */  0x9F, 0xEE, 0xF9, 0x9C, 0x70, 0x02, 0xCB, 0x1F,  // ....p...
                /* 0108 */  0x04, 0x6A, 0x64, 0x86, 0xF6, 0x20, 0x4F, 0x2B,  // .jd.. O+
                /* 0110 */  0x66, 0xC8, 0xC3, 0x3F, 0x2C, 0x26, 0x16, 0x42,  // f..?,&.B
                /* 0118 */  0x1F, 0x04, 0x8F, 0x07, 0xDE, 0xFF, 0x7F, 0x3C,  // .......<
                /* 0120 */  0xE0, 0x51, 0x7C, 0x26, 0x10, 0xC2, 0x2B, 0x41,  // .Q|&..+A
                /* 0128 */  0x6C, 0x0F, 0x28, 0x41, 0x81, 0xC0, 0xE8, 0x01,  // l.(A....
                /* 0130 */  0xD9, 0xAF, 0x00, 0x84, 0xE0, 0x65, 0x8E, 0x48,  // .....e.H
                /* 0138 */  0x4E, 0x11, 0x34, 0x26, 0x4F, 0xEE, 0xD5, 0x20,  // N.4&O.. 
                /* 0140 */  0xC4, 0xBB, 0x40, 0xE8, 0xB3, 0x3A, 0xE5, 0x30,  // ..@..:.0
                /* 0148 */  0x85, 0x9F, 0x13, 0x28, 0x41, 0x91, 0x03, 0x40,  // ...(A..@
                /* 0150 */  0x89, 0x19, 0x00, 0xEA, 0x14, 0x10, 0xFB, 0x70,  // .......p
                /* 0158 */  0x4E, 0xE6, 0x00, 0x0E, 0x27, 0xCA, 0x39, 0x1C,  // N...'.9.
                /* 0160 */  0x8F, 0x8F, 0x0C, 0x46, 0x38, 0xCB, 0x72, 0x4F,  // ...F8.rO
                /* 0168 */  0x0E, 0x44, 0xF3, 0x1C, 0x34, 0x85, 0x53, 0x7A,  // .D..4.Sz
                /* 0170 */  0x19, 0x30, 0xC1, 0x04, 0xAB, 0x94, 0x05, 0x10,  // .0......
                /* 0178 */  0x05, 0x3A, 0x1E, 0xC8, 0xC6, 0x4A, 0x4D, 0xA0,  // .:...JM.
                /* 0180 */  0x23, 0x85, 0x65, 0x01, 0x69, 0x38, 0xB8, 0x33,  // #.e.i8.3
                /* 0188 */  0x45, 0x98, 0xD7, 0x03, 0x0F, 0xDC, 0xE7, 0x03,  // E.......
                /* 0190 */  0xCF, 0x2A, 0xC2, 0x93, 0x01, 0x01, 0xD5, 0x71,  // .*.....q
                /* 0198 */  0x83, 0xC7, 0x87, 0x50, 0xF8, 0x31, 0x51, 0x38,  // ...P.1Q8
                /* 01A0 */  0xC7, 0x05, 0xA3, 0x20, 0x3E, 0x01, 0x38, 0x0A,  // ... >.8.
                /* 01A8 */  0x84, 0x9C, 0x1C, 0x06, 0xD0, 0x43, 0x3B, 0x0B,  // .....C;.
                /* 01B0 */  0x43, 0x1C, 0xAA, 0x09, 0x3C, 0x95, 0x47, 0x06,  // C...<.G.
                /* 01B8 */  0x58, 0x03, 0x8C, 0x78, 0x72, 0x9E, 0x86, 0xE1,  // X..xr...
                /* 01C0 */  0x0C, 0x69, 0x38, 0x7E, 0x15, 0x38, 0xAF, 0x04,  // .i8~.8..
                /* 01C8 */  0xFC, 0x48, 0x00, 0xFF, 0xBA, 0xE1, 0x03, 0xC1,  // .H......
                /* 01D0 */  0x29, 0x3C, 0x69, 0xBC, 0x5D, 0x24, 0xF0, 0x91,  // )<i.]$..
                /* 01D8 */  0x00, 0x1C, 0x40, 0xBE, 0x03, 0x58, 0xE9, 0x39,  // ..@..X.9
                /* 01E0 */  0x80, 0xCE, 0x21, 0x44, 0x98, 0x68, 0x26, 0xF8,  // ..!D.h&.
                /* 01E8 */  0xFF, 0x87, 0xE7, 0x82, 0x47, 0x4A, 0x65, 0x8D,  // ....GJe.
                /* 01F0 */  0x0B, 0x75, 0x2C, 0xF0, 0xE1, 0x80, 0x61, 0x9F,  // .u,...a.
                /* 01F8 */  0xFC, 0xD1, 0x14, 0x3D, 0x43, 0x5D, 0x08, 0x0E,  // ...=C]..
                /* 0200 */  0xEA, 0xED, 0xC1, 0x16, 0x0D, 0x2A, 0x34, 0x08,  // .....*4.
                /* 0208 */  0xEB, 0x91, 0x72, 0x58, 0xA3, 0x85, 0x3D, 0xE0,  // ..rX..=.
                /* 0210 */  0x27, 0x07, 0xDF, 0x3A, 0x3C, 0x33, 0x63, 0x84,  // '..:<3c.
                /* 0218 */  0xF5, 0x68, 0x1D, 0xE9, 0x60, 0x80, 0x12, 0x35,  // .h..`..5
                /* 0220 */  0x54, 0x03, 0xC9, 0xE3, 0x2C, 0xC8, 0xCD, 0x00,  // T...,...
                /* 0228 */  0xCE, 0xDC, 0x4E, 0xE5, 0x50, 0xD9, 0xC9, 0x00,  // ..N.P...
                /* 0230 */  0x38, 0x0C, 0xE3, 0x48, 0xCE, 0xE3, 0xF1, 0x21,  // 8..H...!
                /* 0238 */  0xC2, 0x8B, 0x0C, 0x3B, 0x19, 0x00, 0x9E, 0x3D,  // ...;...=
                /* 0240 */  0x9E, 0x0C, 0x40, 0xF1, 0xFF, 0x3F, 0x19, 0xE0,  // ..@..?..
                /* 0248 */  0xA2, 0xAC, 0x42, 0x27, 0x03, 0x3E, 0x60, 0x0B,  // ..B'.>`.
                /* 0250 */  0x02, 0xD2, 0x84, 0xDE, 0x6F, 0x1E, 0x67, 0x0C,  // ....o.g.
                /* 0258 */  0xEC, 0xC1, 0x1D, 0x47, 0xE4, 0x37, 0x80, 0x63,  // ...G.7.c
                /* 0260 */  0x79, 0xA0, 0x61, 0x12, 0x00, 0x75, 0x1E, 0xF0,  // y.a..u..
                /* 0268 */  0xA8, 0x1C, 0x9E, 0x42, 0xE1, 0x69, 0x74, 0x2C,  // ...B.it,
                /* 0270 */  0x40, 0x9C, 0x0E, 0x28, 0x88, 0x0F, 0x41, 0x8E,  // @..(..A.
                /* 0278 */  0x70, 0x2C, 0x40, 0x8F, 0xD2, 0xE3, 0x38, 0x05,  // p,@...8.
                /* 0280 */  0x36, 0xBA, 0x83, 0x64, 0x03, 0xF3, 0xD8, 0xB8,  // 6..d....
                /* 0288 */  0x06, 0x08, 0xDD, 0x00, 0x8C, 0x6B, 0x35, 0x83,  // .....k5.
                /* 0290 */  0x45, 0x81, 0xF9, 0x4C, 0x80, 0xD1, 0x75, 0x25,  // E..L..u%
                /* 0298 */  0x00, 0x59, 0x86, 0x11, 0xA1, 0x55, 0x80, 0x48,  // .Y...U.H
                /* 02A0 */  0x23, 0xA4, 0xEE, 0x48, 0x9E, 0x11, 0x78, 0x0F,  // #..H..x.
                /* 02A8 */  0x5F, 0x64, 0x46, 0x20, 0x8B, 0x71, 0xB1, 0x80,  // _dF .q..
                /* 02B0 */  0x72, 0xDC, 0xE0, 0x93, 0x06, 0xFB, 0x91, 0xC0,  // r.......
                /* 02B8 */  0x63, 0x02, 0x9B, 0x3E, 0x01, 0xFF, 0xFF, 0x6B,  // c..>...k
                /* 02C0 */  0x05, 0xB8, 0xD1, 0xF9, 0xA9, 0xC4, 0xC7, 0x05,  // ........
                /* 02C8 */  0x1E, 0x78, 0xD4, 0x14, 0xC4, 0x83, 0x72, 0x98,  // .x....r.
                /* 02D0 */  0xB9, 0xA2, 0x4F, 0x6B, 0x1E, 0xC0, 0x1B, 0xC9,  // ..Ok....
                /* 02D8 */  0x53, 0x92, 0x21, 0x5E, 0x22, 0x7C, 0x4A, 0xF2,  // S.!^"|J.
                /* 02E0 */  0xA9, 0x04, 0xEC, 0x50, 0x3E, 0x95, 0x00, 0x9E,  // ...P>...
                /* 02E8 */  0x1C, 0x3A, 0x35, 0xEB, 0xF4, 0x54, 0x02, 0x2E,  // .:5..T..
                /* 02F0 */  0x49, 0xEB, 0xD0, 0xA9, 0x04, 0x77, 0xB0, 0xF3,  // I....w..
                /* 02F8 */  0x84, 0x1E, 0x7F, 0xD8, 0x29, 0x07, 0x73, 0x80,  // ....).s.
                /* 0300 */  0xE0, 0x27, 0x14, 0x9D, 0x7D, 0x50, 0x21, 0x28,  // .'..}P!(
                /* 0308 */  0x14, 0xE1, 0x54, 0x82, 0x12, 0x0D, 0x47, 0x41,  // ..T...GA
                /* 0310 */  0x3C, 0x36, 0x07, 0x81, 0xD0, 0xFF, 0xFF, 0x5C,  // <6.....\
                /* 0318 */  0x80, 0x3B, 0xB6, 0xF9, 0xA4, 0xE7, 0x4B, 0x81,  // .;....K.
                /* 0320 */  0xC5, 0x9F, 0x0A, 0xA0, 0xDE, 0x28, 0xD8, 0xD1,  // .....(..
                /* 0328 */  0x07, 0x18, 0x0D, 0x0A, 0xCE, 0x34, 0xF9, 0x18,  // .....4..
                /* 0330 */  0x3C, 0x28, 0x70, 0x0F, 0xD7, 0x27, 0x07, 0xC0,  // <(p..'..
                /* 0338 */  0x93, 0x44, 0xAB, 0x0A, 0x4F, 0x0E, 0x20, 0xD3,  // .D..O. .
                /* 0340 */  0x7F, 0x72, 0x40, 0xAB, 0x00, 0xD2, 0x39, 0x8C,  // .r@...9.
                /* 0348 */  0x9F, 0x1C, 0xE0, 0xE4, 0x3E, 0x32, 0xD0, 0x51,  // ....>2.Q
                /* 0350 */  0xF9, 0xFF, 0x9F, 0x98, 0x44, 0xA9, 0x0F, 0x28,  // ....D..(
                /* 0358 */  0xA8, 0x9C, 0x63, 0xA7, 0x20, 0x06, 0x74, 0x88,  // ..c. .t.
                /* 0360 */  0x93, 0x03, 0xF4, 0xF3, 0x11, 0xF0, 0xBC, 0xDA,  // ........
                /* 0368 */  0x00, 0x8B, 0xE8, 0x53, 0x45, 0x85, 0x9D, 0x2A,  // ...SE..*
                /* 0370 */  0x05, 0xF1, 0x54, 0x7D, 0x9F, 0x80, 0x7B, 0xAB,  // ..T}..{.
                /* 0378 */  0x7C, 0xB1, 0x01, 0xFB, 0x7D, 0x02, 0x30, 0xF3,  // |...}.0.
                /* 0380 */  0xFF, 0xBF, 0x4F, 0x40, 0xF2, 0x78, 0x9F, 0x00,  // ..O@.x..
                /* 0388 */  0x97, 0x42, 0x9B, 0x3E, 0x35, 0x1A, 0xB5, 0x6A,  // .B.>5..j
                /* 0390 */  0x50, 0xA6, 0x46, 0x99, 0x06, 0xB5, 0xFA, 0x54,  // P.F....T
                /* 0398 */  0x6A, 0xCC, 0x98, 0x96, 0x93, 0x96, 0x2F, 0x32,  // j...../2
                /* 03A0 */  0x54, 0xC4, 0x72, 0x04, 0x62, 0xE9, 0x14, 0x32,  // T.r.b..2
                /* 03A8 */  0x72, 0x12, 0x30, 0x88, 0xEE, 0x0E, 0xE4, 0x73,  // r.0....s
                /* 03B0 */  0x2A, 0x20, 0x4B, 0x03, 0x11, 0x90, 0x23, 0x7D,  // * K...#}
                /* 03B8 */  0x1B, 0x04, 0xE4, 0x7C, 0x20, 0x02, 0xB2, 0x2A,  // ...| ..*
                /* 03C0 */  0x0F, 0x40, 0x4C, 0x22, 0x88, 0x80, 0x9C, 0x0D,  // .@L"....
                /* 03C8 */  0x88, 0x06, 0x05, 0xA2, 0xB1, 0xD6, 0x29, 0x20,  // ......) 
                /* 03D0 */  0x87, 0x04, 0x11, 0x90, 0x05, 0x7E, 0xD1, 0x04,  // .....~..
                /* 03D8 */  0x64, 0xB9, 0x20, 0x02, 0x72, 0x50, 0x20, 0x1A,  // d. .rP .
                /* 03E0 */  0x1B, 0x88, 0x0A, 0x7E, 0x23, 0x08, 0xC8, 0xEA,  // ...~#...
                /* 03E8 */  0x41, 0x04, 0x64, 0x9D, 0x36, 0x80, 0x98, 0x6A,  // A.d.6..j
                /* 03F0 */  0x10, 0x01, 0xF9, 0xFF, 0x0F                     // .....
            })
            OperationRegion (DEB0, SystemIO, 0x80, One)
            Field (DEB0, ByteAcc, NoLock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (IOB2, SystemIO, SMIP, 0x02)
            Field (IOB2, ByteAcc, NoLock, Preserve)
            {
                SMPT,   8, 
                SMIS,   8
            }

            Method (ISMI, 1, Serialized)
            {
                SMPT = Arg0
            }

            Method (EABA, 0, Serialized)
            {
                ISMI (0x95)
                Return (Zero)
            }

            Method (GABA, 0, Serialized)
            {
                Return (ABAP) /* \ABAW.ABAP */
            }

            Method (SYSC, 1, Serialized)
            {
                SYSD = Arg0
                ISMI (0x95)
                Return (ERCO) /* \ABAW.ERCO */
            }

            Method (SBUD, 1, Serialized)
            {
                IDAT = Arg0
                Local0 = (INDX + 0x0C)
                Local1 = (Local0 + ABAP) /* \ABAW.ABAP */
                OperationRegion (SBTB, SystemMemory, Local1, 0x04)
                Field (SBTB, ByteAcc, NoLock, Preserve)
                {
                    TDAT,   32
                }

                TDAT = DAT0 /* \ABAW.DAT0 */
                Return (Zero)
            }

            Method (GBUD, 1, Serialized)
            {
                INDX = Arg0
                Local0 = (INDX + 0x0C)
                Local1 = (Local0 + ABAP) /* \ABAW.ABAP */
                OperationRegion (GBTB, SystemMemory, Local1, 0x04)
                Field (GBTB, ByteAcc, NoLock, Preserve)
                {
                    RDAT,   32
                }

                Return (RDAT) /* \ABAW.GBUD.RDAT */
            }

            Name (ABAP, 0xCAD22018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\ABAX, SystemMemory, ABAP, 0x00010000)
            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                SIGN,   32, 
                WFUN,   32, 
                DSIG,   32, 
                BUDA,   1024, 
                ERCO,   32, 
                IDAT,   96
            }

            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x90), 
                INDX,   32, 
                DAT0,   32
            }

            Field (ABAX, ByteAcc, NoLock, Preserve)
            {
                SYSD,   96
            }
        }
    }

    Scope (\)
    {
        Device (ACCE)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ASUSCONTROLCENTER")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x15, 0xB1, 0x2B, 0xB8, 0xAE, 0x43, 0x35, 0x4B,  // ..+..C5K
                /* 0008 */  0xB7, 0x9D, 0xBD, 0x64, 0x16, 0xAB, 0xC3, 0x81,  // ...d....
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Method (WMBC, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (0x41504631)
                    {
                        Return (APF1 (Arg2))
                    }
                    Case (0x41505057)
                    {
                        Return (APPW (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Name (WQMO, Buffer (0x0298)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x88, 0x02, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xC9, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x20, 0x82, 0x00, 0x89, 0xC0, 0xA1, 0x21, 0x14,  //  .....!.
                /* 0028 */  0x43, 0x01, 0x0C, 0x46, 0x02, 0x84, 0xE4, 0x40,  // C..F...@
                /* 0030 */  0xC8, 0x05, 0x13, 0x13, 0x20, 0x02, 0x42, 0x5E,  // .... .B^
                /* 0038 */  0x05, 0xD8, 0x14, 0x60, 0x12, 0x44, 0xFD, 0xFB,  // ...`.D..
                /* 0040 */  0x43, 0x94, 0x04, 0x87, 0x12, 0x02, 0x21, 0x89,  // C.....!.
                /* 0048 */  0x02, 0xCC, 0x0B, 0xD0, 0x2D, 0xC0, 0xB0, 0x00,  // ....-...
                /* 0050 */  0xDB, 0x02, 0x4C, 0x0B, 0x70, 0x0C, 0x49, 0xA5,  // ..L.p.I.
                /* 0058 */  0x81, 0x53, 0x02, 0x4B, 0x81, 0x90, 0x50, 0x01,  // .S.K..P.
                /* 0060 */  0xCA, 0x05, 0xF8, 0x16, 0xA0, 0x1D, 0x51, 0x92,  // ......Q.
                /* 0068 */  0x05, 0x58, 0x86, 0x11, 0x81, 0x47, 0x11, 0xD9,  // .X...G..
                /* 0070 */  0x68, 0x9C, 0xA0, 0x6C, 0x68, 0x94, 0x0C, 0x08,  // h..lh...
                /* 0078 */  0x79, 0x16, 0x60, 0x1D, 0x98, 0x10, 0xD8, 0xBD,  // y.`.....
                /* 0080 */  0x00, 0x85, 0x02, 0xC4, 0x09, 0x50, 0x86, 0x21,  // .....P.!
                /* 0088 */  0x84, 0xC6, 0x10, 0x64, 0x4D, 0x80, 0xAD, 0x91,  // ...dM...
                /* 0090 */  0xC8, 0x99, 0x00, 0x83, 0x02, 0x2C, 0xA2, 0x10,  // .....,..
                /* 0098 */  0xAC, 0x30, 0xA1, 0x0C, 0xD2, 0x9B, 0x00, 0x73,  // .0.....s
                /* 00A0 */  0x93, 0x12, 0x8A, 0x31, 0x6A, 0x43, 0x13, 0x6C,  // ...1jC.l
                /* 00A8 */  0x8C, 0x98, 0x71, 0x3A, 0x44, 0xD4, 0x04, 0xE2,  // ..q:D...
                /* 00B0 */  0xB4, 0x3F, 0x08, 0x12, 0x69, 0xC1, 0x1A, 0xAA,  // .?..i...
                /* 00B8 */  0x23, 0x8D, 0x06, 0x35, 0xBC, 0x04, 0x87, 0xEB,  // #..5....
                /* 00C0 */  0xA1, 0x9E, 0x63, 0xE7, 0x02, 0xA4, 0x4F, 0x52,  // ..c...OR
                /* 00C8 */  0x20, 0x07, 0x79, 0x6E, 0x75, 0x8E, 0x93, 0x80,  //  .ynu...
                /* 00D0 */  0x24, 0x30, 0x56, 0x82, 0x0E, 0x06, 0x0E, 0xC5,  // $0V.....
                /* 00D8 */  0x35, 0xA0, 0x66, 0x7C, 0xBC, 0x4C, 0x10, 0x1C,  // 5.f|.L..
                /* 00E0 */  0x6A, 0x88, 0x1E, 0x68, 0xB8, 0x13, 0x38, 0x44,  // j..h..8D
                /* 00E8 */  0x06, 0x68, 0x61, 0xA3, 0x41, 0x1D, 0x00, 0x3C,  // .ha.A..<
                /* 00F0 */  0xAD, 0x93, 0x79, 0x0F, 0x28, 0x55, 0x80, 0xD9,  // ..y.(U..
                /* 00F8 */  0x31, 0x6B, 0x8E, 0x09, 0x8E, 0xC7, 0xD0, 0xA7,  // 1k......
                /* 0100 */  0x7B, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // {>'.....
                /* 0108 */  0x1A, 0x99, 0xA1, 0x3D, 0xC9, 0xD3, 0x8A, 0x19,  // ...=....
                /* 0110 */  0xF2, 0xF0, 0x0F, 0x8B, 0x89, 0x85, 0xD0, 0x07,  // ........
                /* 0118 */  0xC1, 0xE3, 0x81, 0xF7, 0xFF, 0x1F, 0x0F, 0x78,  // .......x
                /* 0120 */  0x14, 0x9F, 0x09, 0x84, 0xF0, 0x4A, 0x10, 0xDB,  // .....J..
                /* 0128 */  0x03, 0x7A, 0x44, 0xC0, 0x02, 0x7B, 0x40, 0xF6,  // .zD..{@.
                /* 0130 */  0x2B, 0x00, 0x21, 0x78, 0x99, 0x23, 0x92, 0x53,  // +.!x.#.S
                /* 0138 */  0x04, 0x8D, 0xC9, 0x38, 0x11, 0xE2, 0x3F, 0x39,  // ...8..?9
                /* 0140 */  0x70, 0x91, 0xD0, 0x28, 0x31, 0xD0, 0xA8, 0x23,  // p..(1..#
                /* 0148 */  0x40, 0xD4, 0x88, 0x41, 0x43, 0x1F, 0x4B, 0x68,  // @..AC.Kh
                /* 0150 */  0x0F, 0xC6, 0xE7, 0x05, 0x23, 0x9C, 0x62, 0xB9,  // ....#.b.
                /* 0158 */  0xC7, 0x06, 0xA2, 0x79, 0x36, 0x3A, 0x2D, 0x9C,  // ...y6:-.
                /* 0160 */  0xCF, 0x9B, 0x80, 0x09, 0x06, 0x7F, 0x18, 0x68,  // .......h
                /* 0168 */  0x94, 0x96, 0x4E, 0x21, 0x1B, 0xCB, 0xF4, 0x88,  // ..N!....
                /* 0170 */  0x28, 0x95, 0x47, 0x10, 0x37, 0xE6, 0x19, 0x14,  // (.G.7...
                /* 0178 */  0x0E, 0xAD, 0x53, 0x42, 0x58, 0x1D, 0x12, 0x74,  // ..SBX..t
                /* 0180 */  0xCA, 0x30, 0xB0, 0x23, 0x93, 0xE8, 0x88, 0xE1,  // .0.#....
                /* 0188 */  0xE1, 0x98, 0xD7, 0x31, 0x0F, 0x1B, 0x14, 0xC4,  // ...1....
                /* 0190 */  0x80, 0xCE, 0x00, 0x21, 0x27, 0x87, 0x00, 0x94,  // ...!'...
                /* 0198 */  0x0A, 0x10, 0xCD, 0xE0, 0x6C, 0x8E, 0xE7, 0x61,  // ....l..a
                /* 01A0 */  0xC0, 0xA2, 0x2F, 0x0A, 0x74, 0x7A, 0xBE, 0x02,  // ../.tz..
                /* 01A8 */  0x70, 0x0D, 0x10, 0x3A, 0x14, 0x18, 0xD8, 0x6A,  // p..:...j
                /* 01B0 */  0x00, 0x29, 0x18, 0x9F, 0xEC, 0xA3, 0x44, 0x02,  // .)....D.
                /* 01B8 */  0xA6, 0xEB, 0x1C, 0x00, 0xFD, 0x8E, 0xE1, 0x11,  // ........
                /* 01C0 */  0x9C, 0xDD, 0x23, 0xC5, 0x23, 0x46, 0x82, 0xFA,  // ..#.#F..
                /* 01C8 */  0xAE, 0x01, 0xA0, 0x00, 0xF2, 0xD8, 0xAD, 0x74,  // .......t
                /* 01D0 */  0xFA, 0x74, 0x0C, 0x21, 0xC2, 0x44, 0x33, 0x3A,  // .t.!.D3:
                /* 01D8 */  0x0F, 0x3F, 0x54, 0x54, 0xDC, 0xA1, 0x52, 0x10,  // .?TT..R.
                /* 01E0 */  0x0F, 0xD5, 0x51, 0x86, 0x8A, 0xFA, 0xFF, 0x1F,  // ..Q.....
                /* 01E8 */  0x1F, 0xF8, 0xA1, 0xC1, 0x07, 0x89, 0x27, 0x01,  // ......'.
                /* 01F0 */  0xCC, 0x01, 0xE0, 0x21, 0x03, 0xD6, 0xA9, 0x20,  // ...!... 
                /* 01F8 */  0x64, 0x44, 0x4F, 0xC3, 0x70, 0x9E, 0x2C, 0x87,  // dDO.p.,.
                /* 0200 */  0xF3, 0x64, 0xF9, 0x58, 0x7C, 0x88, 0x80, 0x3F,  // .d.X|..?
                /* 0208 */  0x5A, 0x2C, 0x41, 0x81, 0xB3, 0x05, 0x39, 0x3C,  // Z,A...9<
                /* 0210 */  0x46, 0xF0, 0x48, 0xA9, 0xAC, 0x71, 0xA1, 0x2E,  // F.H..q..
                /* 0218 */  0x07, 0x3E, 0xC5, 0x30, 0xEC, 0xF7, 0x06, 0x5F,  // .>.0..._
                /* 0220 */  0x11, 0xCE, 0xF0, 0x2D, 0xE2, 0xA0, 0xDE, 0x37,  // ...-...7
                /* 0228 */  0x6C, 0x4C, 0xA3, 0x50, 0x83, 0xB0, 0x1E, 0x29,  // lL.P...)
                /* 0230 */  0x87, 0x35, 0x5A, 0xD8, 0x03, 0x7E, 0xD6, 0xF0,  // .5Z..~..
                /* 0238 */  0x3D, 0xC5, 0x33, 0x33, 0x46, 0x58, 0x8F, 0xD6,  // =.33FX..
                /* 0240 */  0xA7, 0x09, 0xD8, 0x08, 0xBD, 0x9F, 0x26, 0x00,  // ......&.
                /* 0248 */  0x5D, 0xFF, 0xFF, 0xD3, 0x04, 0xC0, 0x39, 0xAF,  // ].....9.
                /* 0250 */  0x42, 0x4F, 0x13, 0x60, 0x53, 0x68, 0xD3, 0xA7,  // BO.`Sh..
                /* 0258 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                /* 0260 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0x3B, 0x39,  // .V.J..;9
                /* 0268 */  0x38, 0xC6, 0x62, 0x35, 0x16, 0x8B, 0x58, 0x8E,  // 8.b5..X.
                /* 0270 */  0x40, 0xAC, 0x92, 0x42, 0x46, 0x40, 0x24, 0x19,  // @..BF@$.
                /* 0278 */  0x44, 0x40, 0x96, 0x77, 0xF2, 0x11, 0x90, 0xC5,  // D@.w....
                /* 0280 */  0x82, 0x08, 0xC8, 0xF9, 0x2C, 0x00, 0xB1, 0xB0,  // ....,...
                /* 0288 */  0x20, 0x02, 0x72, 0xB0, 0xBF, 0x83, 0x80, 0xFC,  //  .r.....
                /* 0290 */  0xFF, 0x8F, 0x09, 0x22, 0x20, 0xFF, 0xFF, 0x01   // ..." ...
            })
            OperationRegion (DEB0, SystemIO, 0x80, One)
            Field (DEB0, ByteAcc, NoLock, Preserve)
            {
                DBG8,   8
            }

            OperationRegion (IOB2, SystemIO, SMIP, 0x02)
            Field (IOB2, ByteAcc, NoLock, Preserve)
            {
                SMPT,   8, 
                SMIS,   8
            }

            Method (ISMI, 1, Serialized)
            {
                SMPT = Arg0
            }

            Method (WMII, 0, Serialized)
            {
                ISMI (0x96)
            }

            Method (APF1, 1, Serialized)
            {
                WFUN = 0x80000004
                IDAT = Arg0
                WMII ()
                Return (WSTA) /* \ACCE.WSTA */
            }

            Method (APPW, 1, Serialized)
            {
                WFUN = 0x80000008
                IDAT = Arg0
                WMII ()
                Return (WSTA) /* \ACCE.WSTA */
            }

            Name (ACCB, 0xCAD11018)
            OperationRegion (\ACCX, SystemMemory, ACCB, 0x0100)
            Field (ACCX, ByteAcc, NoLock, Preserve)
            {
                WSIZ,   32, 
                WFUN,   32, 
                WSTA,   32, 
                IDAT,   1952
            }
        }
    }

    Scope (_SB.PCI0.GP13.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "BACK",
                        PLD_VerticalPosition   = "CENTER",
                        PLD_HorizontalPosition = "RIGHT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "375016749376Genuine NVIDIA Certified SLI Ready Motherboard for ASUS LEIQIN         EA5A-Copyright 2019 NVIDIA Corporation All Rights Reserved-274100472652(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x41494C53))
                {
                    Return (SLIC) /* \_SB_.PCI0.SLIC */
                }

                Return (Zero)
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 25
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : CAF4E000
[028h 0040   4]                 DSDT Address : CAC44000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 000000B4
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000CAC44000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 00000000000000B4

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 25 41 4C 41 53 4B 41  // FACP.....%ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 E0 F4 CA 00 40 C4 CA 00 01 09 00  // .........@......
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 B4 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 00 00 00  // e...........2...
    0070: A5 C5 03 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 00 40 C4 CA  // .............@..
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 B4 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : A8D9224A
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 4A 22 D9 A8 00 00 00 00  // FACS@...J"......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B7
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 B7 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 34 39 35 32  // ....$FID.x.A4952
    0030: 00 00 00 00 58 40 0E 95 BA C2 93 96 F2 7B 92 4A  // ....X@.......{.J
    0040: DE F8 BA 85 30 35 00 31 37 00 32 36 00 30 32 00  // ....05.17.26.02.
    0050: E4 07 08 04 08 39 2E FF FF 41 4C 41 53 4B 41 41  // .....9...ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9D
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 01000013


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000CAAA8000

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000CAAF4000

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 9D 41 4C 41 53 4B 41  // FPDTD.....ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 00 01 00 00 10 01 00 00 00 00 00 80 AA CA  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 00 40 AF CA  // .............@..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 1E
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6F

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 19
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 1A
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FEB80000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 058F77EF22294ADE
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                   Entry Type : 03
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1]                 Data Setting : 00

[0A4h 0164   1]                   Entry Type : 04
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1]                 Data Setting : 00

[0A8h 0168   1]                   Entry Type : 43
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1]                 Data Setting : 00
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A4
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                   Entry Type : 04
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1]                 Data Setting : 00

[0B4h 0180   1]                   Entry Type : 00
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1]                 Data Setting : 00

[0B8h 0184   1]                   Entry Type : 48
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1]                 Data Setting : 00
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                   Entry Type : 48
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1]                 Data Setting : D7
[0C4h 0196   1]                       Handle : 19
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                   Entry Type : 48
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1]                 Data Setting : 00
[0CCh 0204   1]                       Handle : 1A
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 1E 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 19 A0 00 01  // H.......H.......
    0070: 48 00 00 00 1A 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DE 4A 29 22 EF 77 8F 05 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 19 A0 00 01 48 00 00 00 1A 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F4
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 7F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 F4 41 4C 41 53 4B 41  // MCFG<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 7F 00 00 00 00              // ............


PCCT
----
[000h 0000   4]                    Signature : "PCCT"    [Platform Communications Channel Table]
[004h 0004   4]                 Table Length : 0000006E
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : F1
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AmdTable"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]        Flags (decoded below) : 00000000
                                    Platform : 0
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 00 [Generic Communications Subspace]
[031h 0049   1]                       Length : 3E

[032h 0050   6]                     Reserved : 000000000000
[038h 0056   8]                 Base Address : 00000000CB2F0000
[040h 0064   8]               Address Length : 0000000000010000

[048h 0072  12]            Doorbell Register : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 40
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 04 [QWord Access:64]
[04Ch 0076   8]                      Address : 00000000FD010540

[054h 0084   8]                Preserve Mask : FFFFFFFF00000000
[05Ch 0092   8]                   Write Mask : 0000000000000001
[064h 0100   4]              Command Latency : 00000FA0
[068h 0104   4]          Maximum Access Rate : 0000EA60
[06Ch 0108   2]      Minimum Turnaround Time : 0000

Raw Table Data: Length 110 (0x6E)

    0000: 50 43 43 54 6E 00 00 00 02 F1 41 4D 44 00 00 00  // PCCTn.....AMD...
    0010: 41 6D 64 54 61 62 6C 65 01 00 00 00 41 4D 44 20  // AmdTable....AMD 
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 3E 00 00 00 00 00 00 00 00 2F CB 00 00 00 00  // .>......../.....
    0040: 00 00 01 00 00 00 00 00 00 40 00 04 40 05 01 FD  // .........@..@...
    0050: 00 00 00 00 00 00 00 00 FF FF FF FF 01 00 00 00  // ................
    0060: 00 00 00 00 A0 0F 00 00 60 EA 00 00 00 00        // ........`.....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "BIXBY", 0x00001000)
{


SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00020035, 
                0x00020036, 
                0x00020037, 
                0x00020038, 
                0x00020039, 
                0x0002003A, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Set FCLK Frequency", 
                "Set CCLK Fmax", 
                "Set GFXCLK Fmax", 
                "Set CLDO_VDDG", 
                "Get ECO Mode", 
                "Set ECO Mode", 
                "Set VDDIO", 
                "Set VTT", 
                "Command Buffer Start", 
                "Command Buffer End"
            })
            Name (OBIE, Package (0xC1)
            {
                0x40, 
                0x00050001, 
                0x00050002, 
                0x00050003, 
                0x00050004, 
                0x00050005, 
                0x0005000A, 
                0x0005000B, 
                0x0005000C, 
                0x0005000D, 
                0x0005000E, 
                0x0005000F, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Set PPT Limit", 
                "Set TDC Limit", 
                "Set EDC Limit", 
                "Set Scalar", 
                "Set DRAM Map Inversion", 
                "Set Curve Optimizer", 
                "Set IOD VDDG", 
                "Set Soc TDC Limit", 
                "Set Soc EDC Limit", 
                "Set Dram Latency Enhance", 
                "Get Dram Latency Enhance", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xFD)
            {
                0x00020001, 
                0x014D, 
                0x0BB8, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                Zero, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00020035, 
                0x014D, 
                0x09C4, 
                0x21, 
                0x00020036, 
                0x0640, 
                0x1F40, 
                One, 
                0x00020037, 
                0x04B0, 
                0x09C4, 
                One, 
                0x00020038, 
                0x0258, 
                0x05DC, 
                One, 
                0x00030001, 
                0x0333, 
                0x062D, 
                0x03, 
                0x00030002, 
                0x0199, 
                0x0316, 
                0x03, 
                0x00050001, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050002, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050003, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x00050004, 
                0x64, 
                0x03E8, 
                0x64, 
                0x00050005, 
                Zero, 
                0xFF, 
                One, 
                Zero
            })
            Name (OBIU, Package (0x11)
            {
                0x0005000A, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000B, 
                0x0258, 
                0x05DC, 
                One, 
                0x0005000C, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                0x0005000D, 
                Zero, 
                0xFFFFFFFE, 
                One, 
                Zero
            })
            Name (OBD1, Package (0xFD)
            {
                0x00020001, 
                0x36, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x09F6, 
                0x0A28, 
                0x0A5A, 
                0x0A8C, 
                0x0ABE, 
                0x0AF0, 
                0x0B22, 
                0x0B54, 
                0x0B86, 
                0x0BB8, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x3A)
            {
                0x00020035, 
                0x2E, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x0855, 
                0x0877, 
                0x0898, 
                0x08B9, 
                0x08DB, 
                0x08FC, 
                0x091D, 
                0x093F, 
                0x0960, 
                0x0981, 
                0x09A3, 
                0x09C4, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x041A, 
                0x042A, 
                0x0002003A, 
                0x03, 
                Zero, 
                One, 
                0x02, 
                0x0005000E, 
                0x02, 
                Zero, 
                One, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Local0 = Zero
                    LOID = DerefOf (OBIU [Local0])
                    While (LOID)
                    {
                        If ((LOID == Arg0))
                        {
                            BUF0 = DerefOf (OBIU [(Local0 + Zero)])
                            BUF1 = DerefOf (OBIU [(Local0 + One)])
                            BUF2 = DerefOf (OBIU [(Local0 + 0x02)])
                            BUF3 = DerefOf (OBIU [(Local0 + 0x03)])
                            Break
                        }

                        Local0 += 0x04
                        LOID = DerefOf (OBIU [Local0])
                    }
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                CreateWordField (OBUF, 0x7A, BFCK)
                CreateByteField (OBUF, 0x7C, BDPC)
                CreateByteField (OBUF, 0x7D, BCPS)
                CreateWordField (OBUF, 0x7E, BFMX)
                CreateWordField (OBUF, 0x80, BGMX)
                CreateWordField (OBUF, 0x82, BVDG)
                CreateDWordField (OBUF, 0x84, BEOG)
                CreateDWordField (OBUF, 0x88, BEOS)
                CreateDWordField (OBUF, 0x8C, BPPT)
                CreateDWordField (OBUF, 0x90, BTDC)
                CreateDWordField (OBUF, 0x94, BEDM)
                CreateDWordField (OBUF, 0x98, BSCA)
                CreateByteField (OBUF, 0x9C, BDMI)
                CreateByteField (OBUF, 0x9D, BGAS)
                CreateByteField (OBUF, 0x9E, BGAG)
                CreateByteField (OBUF, 0x9F, BNPS)
                CreateByteField (OBUF, 0xA0, BNPG)
                CreateDWordField (OBUF, 0xA1, BPCS)
                CreateWordField (OBUF, 0xA5, BIOD)
                CreateWordField (OBUF, 0xA7, BGFV)
                CreateWordField (OBUF, 0xA9, BGFX)
                CreateDWordField (OBUF, 0xAB, BSTD)
                CreateDWordField (OBUF, 0xAF, BSED)
                CreateByteField (OBUF, 0xB3, BSLC)
                CreateByteField (OBUF, 0xB4, BGLC)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00020035))
                {
                    R235 (Arg0)
                }
                ElseIf ((ACMD == 0x00020036))
                {
                    R236 (Arg0)
                }
                ElseIf ((ACMD == 0x00020037))
                {
                    R237 (Arg0)
                }
                ElseIf ((ACMD == 0x00020038))
                {
                    R238 (Arg0)
                }
                ElseIf ((ACMD == 0x00020039))
                {
                    R239 (Arg0)
                }
                ElseIf ((ACMD == 0x0002003A))
                {
                    R23A (Arg0)
                }
                ElseIf ((ACMD == 0x00050001))
                {
                    R23B (Arg0)
                }
                ElseIf ((ACMD == 0x00050002))
                {
                    R23C (Arg0)
                }
                ElseIf ((ACMD == 0x00050003))
                {
                    R23D (Arg0)
                }
                ElseIf ((ACMD == 0x00050004))
                {
                    R23E (Arg0)
                }
                ElseIf ((ACMD == 0x00050005))
                {
                    R23F (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00050006))
                {
                    R304 (Arg0)
                }
                ElseIf ((ACMD == 0x00050007))
                {
                    R305 (Arg0)
                }
                ElseIf ((ACMD == 0x00050008))
                {
                    R306 (Arg0)
                }
                ElseIf ((ACMD == 0x00050009))
                {
                    R307 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000A))
                {
                    R308 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000B))
                {
                    R309 (Arg0)
                }
                ElseIf ((ACMD == 0x0005000C))
                {
                    R30A (Arg0)
                }
                ElseIf ((ACMD == 0x0005000D))
                {
                    R30B (Arg0)
                }
                ElseIf ((ACMD == 0x0005000E))
                {
                    R30C (Arg0)
                }
                ElseIf ((ACMD == 0x0005000F))
                {
                    R30D (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                BFCK = FCLK /* \AOD_.FCLK */
                BDPC = MDPC /* \AOD_.MDPC */
                BCPS = MCPS /* \AOD_.MCPS */
                BFMX = FMAX /* \AOD_.FMAX */
                BGMX = GMAX /* \AOD_.GMAX */
                BVDG = CVDG /* \AOD_.CVDG */
                BEOG = ECOG /* \AOD_.ECOG */
                BEOS = ECOS /* \AOD_.ECOS */
                BPPT = PPTS /* \AOD_.PPTS */
                BTDC = TDCS /* \AOD_.TDCS */
                BEDM = EDCS /* \AOD_.EDCS */
                BSCA = SCAS /* \AOD_.SCAS */
                BDMI = DMIS /* \AOD_.DMIS */
                BGAS = GAMS /* \AOD_.GAMS */
                BGAG = GAMG /* \AOD_.GAMG */
                BNPS = NPSS /* \AOD_.NPSS */
                BNPG = NPSG /* \AOD_.NPSG */
                BPCS = COPS /* \AOD_.COPS */
                BIOD = IVDG /* \AOD_.IVDG */
                BGFV = OGFV /* \AOD_.OGFV */
                BGFX = OGFX /* \AOD_.OGFX */
                BSTD = OTDC /* \AOD_.OTDC */
                BSED = OEDC /* \AOD_.OEDC */
                BSLC = DMLC /* \AOD_.DMLC */
                BGLC = DMLG /* \AOD_.DMLG */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Method (AM07, 1, NotSerialized)
            {
                Name (BSPD, Buffer (0x0214){})
                If ((Arg0 > 0x0F))
                {
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                If ((Arg0 == Zero))
                {
                    BSPD = DSPD /* \AOD_.DSPD */
                    Return (BSPD) /* \AOD_.AM07.BSPD */
                }

                Local0 = Zero
                Local0 += (Arg0 * 0x0214)
                Local1 = 0x0214
                Local2 = Zero
                While (Local1)
                {
                    BSPD [Local2] = DerefOf (DSPD [Local0])
                    Local1--
                    Local0++
                    Local2++
                }

                Return (BSPD) /* \AOD_.AM07.BSPD */
            }

            Method (AM08, 0, NotSerialized)
            {
                Return (OBIE) /* \AOD_.OBIE */
            }

            Name (CMDV, 0x05)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xCAF50018, 0x220C)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                FCLK,   16, 
                MDPC,   8, 
                MCPS,   8, 
                FMAX,   16, 
                GMAX,   16, 
                CVDG,   16, 
                ECOG,   32, 
                ECOS,   32, 
                PPTS,   32, 
                TDCS,   32, 
                EDCS,   32, 
                SCAS,   32, 
                DMIS,   8, 
                GAMS,   8, 
                GAMG,   8, 
                NPSS,   8, 
                NPSG,   8, 
                COPS,   32, 
                IVDG,   16, 
                OGFV,   16, 
                OGFX,   16, 
                OTDC,   32, 
                OEDC,   32, 
                DMLC,   8, 
                DMLG,   8, 
                MRSD,   88, 
                RSD2,   64, 
                NDPC,   8, 
                NCPS,   8, 
                RSD3,   16, 
                DSPD,   68096
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x05
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x05
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x05
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x05
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x05
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x05
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x05
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MPOT)
                MBVS = 0x05
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MRPG)
                MBVS = 0x05
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R235, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FCLK = SVAL /* \AOD_.R235.SVAL */
                MBCB = 0x00100005
                ASMI (0x9D)
            }

            Method (R236, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                FMAX = SVAL /* \AOD_.R236.SVAL */
                MBCB = 0x00100006
                ASMI (0x9D)
            }

            Method (R237, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GMAX = SVAL /* \AOD_.R237.SVAL */
                MBCB = 0x00100007
                ASMI (0x9D)
            }

            Method (R238, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                CVDG = SVAL /* \AOD_.R238.SVAL */
                MBCB = 0x00100008
                ASMI (0x9D)
            }

            Method (R239, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100009
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R23A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                ECOS = SVAL /* \AOD_.R23A.SVAL */
                MBCB = 0x0010000A
                ASMI (0x9D)
            }

            Method (R23B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                PPTS = SVAL /* \AOD_.R23B.SVAL */
                MBCB = 0x0010000B
                ASMI (0x9D)
            }

            Method (R23C, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                TDCS = SVAL /* \AOD_.R23C.SVAL */
                MBCB = 0x0010000C
                ASMI (0x9D)
            }

            Method (R23D, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                EDCS = SVAL /* \AOD_.R23D.SVAL */
                MBCB = 0x0010000D
                ASMI (0x9D)
            }

            Method (R23E, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                SCAS = SVAL /* \AOD_.R23E.SVAL */
                MBCB = 0x0010000E
                ASMI (0x9D)
            }

            Method (R23F, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMIS = SVAL /* \AOD_.R23F.SVAL */
                MBCB = 0x0010000F
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x05
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x05
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R304, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                GAMS = SVAL /* \AOD_.R304.SVAL */
                MBCB = 0x00100010
                ASMI (0x9D)
            }

            Method (R305, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100020
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R306, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                NPSS = SVAL /* \AOD_.R306.SVAL */
                MBCB = 0x00100030
                ASMI (0x9D)
            }

            Method (R307, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100031
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R308, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                COPS = SVAL /* \AOD_.R308.SVAL */
                MBCB = 0x00100032
                ASMI (0x9D)
            }

            Method (R309, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                IVDG = SVAL /* \AOD_.R309.SVAL */
                MBCB = 0x00100033
                ASMI (0x9D)
            }

            Method (R30A, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OTDC = SVAL /* \AOD_.R30A.SVAL */
                MBCB = 0x00100034
                ASMI (0x9D)
            }

            Method (R30B, 1, NotSerialized)
            {
                CreateDWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                OEDC = SVAL /* \AOD_.R30B.SVAL */
                MBCB = 0x00100035
                ASMI (0x9D)
            }

            Method (R30C, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x05
                DMLC = SVAL /* \AOD_.R30C.SVAL */
                MBCB = 0x00100036
                ASMI (0x9D)
            }

            Method (R30D, 1, NotSerialized)
            {
                MBVS = 0x05
                Local0 = 0x00100037
                MBCB = Local0
                ASMI (0x9D)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x05
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x05
            }

            Name (WQBA, Buffer (0x0A57)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x47, 0x0A, 0x00, 0x00, 0x38, 0x37, 0x00, 0x00,  // G...87..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xDB, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0F, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x1A, 0x40,  // x\.A.P.@
                /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x06, 0x0C, 0x4A, 0xC2,  // ..!+..J.
                /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,  // X..Q.F..
                /* 00B8 */  0x64, 0x88, 0xD2, 0x46, 0x8D, 0x1E, 0xD0, 0xF9,  // d..F....
                /* 00C0 */  0x1D, 0xC9, 0xD9, 0x1D, 0xDD, 0x91, 0x24, 0x30,  // ......$0
                /* 00C8 */  0xEA, 0x31, 0x1D, 0x63, 0x61, 0x33, 0x12, 0x6A,  // .1.ca3.j
                /* 00D0 */  0x8C, 0xE6, 0xA0, 0x48, 0xB8, 0x41, 0xA3, 0x25,  // ...H.A.%
                /* 00D8 */  0xC2, 0x6A, 0x5C, 0xB1, 0xCF, 0xCC, 0xC2, 0x87,  // .j\.....
                /* 00E0 */  0x25, 0x8C, 0x23, 0x38, 0xB0, 0x83, 0xB5, 0x68,  // %.#8...h
                /* 00E8 */  0x18, 0xA1, 0x15, 0x04, 0xA7, 0x41, 0x1C, 0x45,  // .....A.E
                /* 00F0 */  0x94, 0x30, 0x0C, 0xCF, 0x98, 0x81, 0x8E, 0x92,  // .0......
                /* 00F8 */  0x21, 0x85, 0x09, 0x7A, 0x02, 0x41, 0x4E, 0x9E,  // !..z.AN.
                /* 0100 */  0x61, 0x19, 0xE2, 0x0C, 0x38, 0x56, 0x8C, 0x50,  // a...8V.P
                /* 0108 */  0x21, 0x31, 0x03, 0x09, 0xFE, 0xFF, 0x3F, 0x81,  // !1....?.
                /* 0110 */  0xAE, 0x31, 0xE4, 0x19, 0x88, 0xDC, 0x03, 0x4E,  // .1.....N
                /* 0118 */  0x20, 0x48, 0xF4, 0x28, 0xC1, 0x8D, 0x6B, 0x54,  //  H.(..kT
                /* 0120 */  0x36, 0xA6, 0xB3, 0xC1, 0x0D, 0xCC, 0x04, 0x71,  // 6......q
                /* 0128 */  0x0E, 0x0F, 0x23, 0x03, 0x42, 0x13, 0x88, 0x1F,  // ..#.B...
                /* 0130 */  0x3B, 0x7C, 0x02, 0xBB, 0x3F, 0x0E, 0x48, 0x21,  // ;|..?.H!
                /* 0138 */  0x82, 0x2E, 0x04, 0x67, 0x5A, 0xA3, 0x80, 0x77,  // ...gZ..w
                /* 0140 */  0xC4, 0xB3, 0x43, 0x5B, 0x10, 0x3A, 0x0B, 0xC4,  // ..C[.:..
                /* 0148 */  0x6A, 0x0C, 0x45, 0x10, 0x11, 0x82, 0x46, 0x31,  // j.E...F1
                /* 0150 */  0x5E, 0x84, 0x50, 0x21, 0xA2, 0x44, 0x3D, 0xE7,  // ^.P!.D=.
                /* 0158 */  0x20, 0xB5, 0x09, 0x50, 0x06, 0x22, 0xB4, 0x60,  //  ..P.".`
                /* 0160 */  0x46, 0x60, 0xF6, 0xCF, 0x00, 0xCC, 0x02, 0xC4,  // F`......
                /* 0168 */  0x1F, 0x81, 0x25, 0x9C, 0x08, 0x64, 0x64, 0x34,  // ..%..dd4
                /* 0170 */  0xF4, 0xB0, 0xE0, 0x93, 0x00, 0x3B, 0x20, 0x78,  // .....; x
                /* 0178 */  0x3E, 0xA7, 0x66, 0x02, 0x07, 0x86, 0x10, 0xAF,  // >.f.....
                /* 0180 */  0x04, 0x88, 0x3A, 0x5A, 0x50, 0x02, 0x4B, 0x39,  // ..:ZP.K9
                /* 0188 */  0x1A, 0x10, 0xDB, 0x03, 0xD3, 0x3D, 0xE0, 0x08,  // .....=..
                /* 0190 */  0xCF, 0xDD, 0x97, 0x83, 0x53, 0xF3, 0x4F, 0xC3,  // ....S.O.
                /* 0198 */  0xD3, 0x7C, 0x48, 0xC0, 0x0C, 0xD1, 0x63, 0x3D,  // .|H...c=
                /* 01A0 */  0x88, 0x80, 0x87, 0xC8, 0x4E, 0x09, 0x06, 0xC4,  // ....N...
                /* 01A8 */  0x7B, 0xBF, 0x16, 0x90, 0x11, 0xBC, 0x24, 0x18,  // {.....$.
                /* 01B0 */  0xD0, 0x93, 0x78, 0x40, 0x00, 0xCB, 0x41, 0xE3,  // ..x@..A.
                /* 01B8 */  0xC0, 0x4F, 0xA8, 0xE2, 0x3B, 0x00, 0x3D, 0x12,  // .O..;.=.
                /* 01C0 */  0xB0, 0x19, 0xC5, 0x37, 0x41, 0x59, 0xC7, 0x07,  // ...7AY..
                /* 01C8 */  0xF4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x10, 0x1A, 0x3D, 0x78, 0x4E, 0x3F, 0x1E,  // ...=xN?.
                /* 0258 */  0x3D, 0xF8, 0xC7, 0xE8, 0xD1, 0x83, 0x67, 0x0C,  // =.....g.
                /* 0260 */  0xE7, 0x86, 0xBB, 0xDA, 0x78, 0xE4, 0x60, 0x1F,  // ....x.`.
                /* 0268 */  0x2F, 0x5E, 0xDE, 0x71, 0x0B, 0x14, 0x3E, 0x67,  // /^.q..>g
                /* 0270 */  0x4F, 0x06, 0xF0, 0x1E, 0x84, 0x3B, 0x6F, 0x01,  // O....;o.
                /* 0278 */  0x97, 0x11, 0x70, 0xC1, 0x4F, 0x1D, 0x9F, 0xAB,  // ..p.O...
                /* 0280 */  0xA8, 0x44, 0x18, 0xD4, 0xD1, 0x0A, 0x5C, 0xFF,  // .D....\.
                /* 0288 */  0xFF, 0xA3, 0x15, 0xC0, 0x84, 0xFB, 0xC3, 0xAB,  // ........
                /* 0290 */  0xD5, 0xA3, 0x15, 0xD8, 0x43, 0xBE, 0x24, 0xF4,  // ....C.$.
                /* 0298 */  0x23, 0x70, 0x6C, 0x08, 0x39, 0x39, 0x5A, 0xA1,  // #pl.99Z.
                /* 02A0 */  0x4E, 0x46, 0xB8, 0xA0, 0x07, 0x2B, 0xA0, 0x7B,  // NF...+.{
                /* 02A8 */  0xD0, 0xC0, 0x1D, 0x0F, 0xE0, 0xFC, 0xFF, 0x8F,  // ........
                /* 02B0 */  0x07, 0x7C, 0x60, 0xFC, 0xF4, 0x02, 0x3E, 0x11,  // .|`...>.
                /* 02B8 */  0x47, 0x21, 0x9F, 0xCA, 0xA0, 0x9F, 0x20, 0x3D,  // G!.... =
                /* 02C0 */  0x5A, 0xF0, 0x1C, 0xAB, 0x80, 0xC3, 0xA9, 0x0C,  // Z.......
                /* 02C8 */  0x38, 0x0C, 0x19, 0x7C, 0xF2, 0x0E, 0x53, 0xE8,  // 8..|..S.
                /* 02D0 */  0x03, 0x89, 0xA7, 0x50, 0xEB, 0x2D, 0x84, 0xC0,  // ...P.-..
                /* 02D8 */  0x1E, 0x90, 0x8F, 0x12, 0x41, 0x4E, 0x24, 0xC2,  // ....AN$.
                /* 02E0 */  0xB9, 0xF8, 0x38, 0x05, 0x98, 0xF8, 0xFF, 0x8F,  // ..8.....
                /* 02E8 */  0x1A, 0x7F, 0xCB, 0x60, 0xD7, 0x29, 0x30, 0x9C,  // ...`.)0.
                /* 02F0 */  0x82, 0xE0, 0x4D, 0xCA, 0xE3, 0x07, 0xDF, 0xB1,  // ..M.....
                /* 02F8 */  0x07, 0x77, 0x0A, 0x82, 0xE7, 0x71, 0x48, 0x42,  // .w...qHB
                /* 0300 */  0x3E, 0x8F, 0x97, 0x00, 0xDC, 0x45, 0x08, 0x7F,  // >....E..
                /* 0308 */  0x10, 0x02, 0x3E, 0xB2, 0x16, 0x4A, 0x4F, 0x41,  // ..>..JOA
                /* 0310 */  0x16, 0x02, 0x83, 0x3A, 0x08, 0x01, 0x2E, 0xFF,  // ...:....
                /* 0318 */  0xFF, 0x07, 0x21, 0x60, 0xE7, 0xED, 0xB6, 0xA1,  // ..!`....
                /* 0320 */  0x6B, 0x90, 0x6F, 0x03, 0x4F, 0x03, 0xAF, 0x11,  // k.o.O...
                /* 0328 */  0x51, 0x1E, 0x84, 0x7C, 0x13, 0x7A, 0x21, 0x88,  // Q..|.z!.
                /* 0330 */  0x10, 0xE5, 0x78, 0x4F, 0x20, 0xC2, 0xD3, 0x90,  // ..xO ...
                /* 0338 */  0x27, 0x1C, 0x26, 0xDC, 0xC9, 0x46, 0x79, 0x69,  // '.&..Fyi
                /* 0340 */  0x08, 0x63, 0xE8, 0x58, 0x81, 0x22, 0xC7, 0x0F,  // .c.X."..
                /* 0348 */  0xE1, 0x4B, 0x85, 0x0F, 0x42, 0x2C, 0xCA, 0x79,  // .K..B,.y
                /* 0350 */  0x40, 0x3F, 0x02, 0x9F, 0x3F, 0x6C, 0xE4, 0x2C,  // @?..?l.,
                /* 0358 */  0x82, 0x3A, 0x09, 0xF8, 0xD0, 0xE1, 0x41, 0x3D,  // .:....A=
                /* 0360 */  0x21, 0x60, 0x42, 0x9F, 0xEC, 0x40, 0x75, 0x14,  // !`B..@u.
                /* 0368 */  0x02, 0xCE, 0x07, 0x10, 0x78, 0x21, 0x0F, 0xAD,  // ....x!..
                /* 0370 */  0xA0, 0x3B, 0x92, 0x83, 0xE3, 0x50, 0x17, 0x39,  // .;...P.9
                /* 0378 */  0xEE, 0x03, 0x0D, 0xF6, 0xEC, 0xC1, 0xFF, 0xFF,  // ........
                /* 0380 */  0x67, 0x0F, 0xE0, 0x21, 0xED, 0xE0, 0x81, 0x12,  // g..!....
                /* 0388 */  0x73, 0xF6, 0x00, 0x48, 0x73, 0xD9, 0x78, 0xF7,  // s..Hs.x.
                /* 0390 */  0xF0, 0xA5, 0xE7, 0x4C, 0x9F, 0x3D, 0x3C, 0xD7,  // ...L.=<.
                /* 0398 */  0x77, 0x0E, 0x1F, 0xEB, 0x8C, 0x62, 0x88, 0xF7,  // w....b..
                /* 03A0 */  0x0F, 0x1F, 0x0A, 0xA2, 0x44, 0x3C, 0xD7, 0x28,  // ....D<.(
                /* 03A8 */  0x87, 0x1C, 0x25, 0x6E, 0x84, 0x30, 0xCF, 0x77,  // ..%n.0.w
                /* 03B0 */  0xC6, 0x89, 0x11, 0x2A, 0x02, 0x03, 0x7D, 0xF6,  // ...*..}.
                /* 03B8 */  0x60, 0x71, 0xCE, 0x1E, 0x50, 0xB1, 0xCF, 0xE6,  // `q..P...
                /* 03C0 */  0x8D, 0x23, 0xC2, 0x6B, 0xC0, 0x39, 0xFE, 0xFF,  // .#.k.9..
                /* 03C8 */  0xCF, 0xC7, 0x67, 0x0F, 0xC0, 0x9B, 0x94, 0xB7,  // ..g.....
                /* 03D0 */  0x9B, 0xCE, 0x1E, 0xE0, 0x3A, 0xC2, 0xE2, 0xCE,  // ....:...
                /* 03D8 */  0x1E, 0xF0, 0xC6, 0x8D, 0x3D, 0x7D, 0x00, 0x3B,  // ....=}.;
                /* 03E0 */  0x19, 0xAF, 0x01, 0x1F, 0x3D, 0x68, 0xF0, 0x03,  // ....=h..
                /* 03E8 */  0x2A, 0xD0, 0xFE, 0xFF, 0x1F, 0x50, 0x01, 0x97,  // *....P..
                /* 03F0 */  0x87, 0x8F, 0x07, 0x54, 0xB0, 0x4B, 0x7F, 0x0E,  // ...T.K..
                /* 03F8 */  0xE8, 0x53, 0xE0, 0xE0, 0x07, 0x54, 0xF4, 0x70,  // .S...T.p
                /* 0400 */  0x7C, 0x9C, 0xC3, 0x9C, 0x50, 0x01, 0x9B, 0xFF,  // |...P...
                /* 0408 */  0x7F, 0x02, 0x1F, 0x6E, 0xE1, 0x00, 0x87, 0xF4,  // ...n....
                /* 0410 */  0x58, 0xC1, 0x76, 0x3E, 0x05, 0x0E, 0x63, 0x05,  // X.v>..c.
                /* 0418 */  0xCF, 0xC0, 0xF8, 0x58, 0x81, 0xC5, 0xC4, 0x9E,  // ...X....
                /* 0420 */  0x3D, 0x8E, 0x15, 0x6C, 0xA7, 0x52, 0xE0, 0x30,  // =..l.R.0
                /* 0428 */  0x56, 0x30, 0x0D, 0x8C, 0x8D, 0x15, 0x7C, 0x12,  // V0....|.
                /* 0430 */  0xCE, 0xC5, 0xE8, 0x31, 0xFA, 0xDA, 0x72, 0x40,  // ...1..r@
                /* 0438 */  0x9E, 0x47, 0x84, 0xA7, 0x7C, 0xF6, 0xFF, 0x27,  // .G..|..'
                /* 0440 */  0x70, 0xDC, 0xE1, 0x82, 0xEA, 0x5C, 0xE3, 0xE1,  // p....\..
                /* 0448 */  0x82, 0x5F, 0xDE, 0x70, 0x41, 0x33, 0x36, 0x38,  // ._.pA368
                /* 0450 */  0x23, 0x06, 0xDF, 0xD1, 0xC9, 0xE7, 0x58, 0xB0,  // #.....X.
                /* 0458 */  0x5C, 0x22, 0xD8, 0x59, 0x80, 0x4D, 0x07, 0x7F,  // \".Y.M..
                /* 0460 */  0x95, 0xC5, 0x9F, 0x99, 0x80, 0x91, 0xE4, 0xC7,  // ........
                /* 0468 */  0x92, 0x09, 0x14, 0xE0, 0x74, 0x20, 0x51, 0x2F,  // ....t Q/
                /* 0470 */  0x02, 0x0A, 0xE3, 0x43, 0x8D, 0xCF, 0x4C, 0x70,  // ...C..Lp
                /* 0478 */  0x25, 0xC1, 0xA1, 0xCE, 0x69, 0xEC, 0x74, 0x7C,  // %...i.t|
                /* 0480 */  0x72, 0x27, 0xF2, 0x7A, 0xE0, 0xC9, 0x3D, 0x3C,  // r'.z..=<
                /* 0488 */  0xC1, 0x38, 0x26, 0x78, 0x5A, 0x27, 0x65, 0xED,  // .8&xZ'e.
                /* 0490 */  0x47, 0x20, 0xF2, 0xFF, 0xBF, 0x66, 0xB1, 0xB3,  // G ...f..
                /* 0498 */  0x02, 0x47, 0xE3, 0x27, 0x29, 0xB0, 0x5E, 0x18,  // .G.').^.
                /* 04A0 */  0x7C, 0x4C, 0x00, 0xC7, 0xAC, 0x5F, 0xA3, 0x30,  // |L..._.0
                /* 04A8 */  0x58, 0xA1, 0x62, 0x34, 0x7A, 0x0D, 0x22, 0xA0,  // X.b4z.".
                /* 04B0 */  0xC7, 0xD7, 0xD7, 0x30, 0x74, 0x27, 0x30, 0x54,  // ...0t'0T
                /* 04B8 */  0xC4, 0x10, 0x6F, 0x06, 0x76, 0x79, 0x1E, 0x42,  // ..o.vy.B
                /* 04C0 */  0x1E, 0x9A, 0xC0, 0x85, 0xFD, 0xD0, 0x04, 0xF6,  // ........
                /* 04C8 */  0x50, 0x67, 0x32, 0x1A, 0x69, 0x34, 0xA8, 0x73,  // Pg2.i4.s
                /* 04D0 */  0x3A, 0x3F, 0x10, 0x3C, 0x72, 0xF9, 0xD8, 0x61,  // :?.<r..a
                /* 04D8 */  0x90, 0x13, 0x3D, 0xAD, 0xC7, 0x85, 0xA7, 0x01,  // ..=.....
                /* 04E0 */  0x8F, 0x9B, 0x5D, 0x13, 0xFC, 0x41, 0xF0, 0xF1,  // ..]..A..
                /* 04E8 */  0x00, 0x7F, 0x80, 0x08, 0x78, 0xA2, 0x4F, 0x1E,  // ....x.O.
                /* 04F0 */  0xB0, 0x4E, 0x20, 0xF8, 0xA3, 0x06, 0xFC, 0xF1,  // .N .....
                /* 04F8 */  0xF8, 0x18, 0xE0, 0x63, 0x07, 0x97, 0x3F, 0x08,  // ...c..?.
                /* 0500 */  0xD4, 0x51, 0x91, 0x8F, 0xF4, 0xB4, 0xDE, 0x06,  // .Q......
                /* 0508 */  0x7C, 0x48, 0x38, 0x2C, 0x76, 0xE6, 0xF0, 0xC9,  // |H8,v...
                /* 0510 */  0x08, 0xFF, 0xFF, 0x1F, 0x0F, 0x38, 0x8F, 0xED,  // .....8..
                /* 0518 */  0x0F, 0x19, 0xBE, 0x32, 0x78, 0xBE, 0x3E, 0xD1,  // ...2x.>.
                /* 0520 */  0x82, 0xE5, 0xD6, 0xE1, 0x43, 0x43, 0xA8, 0xA7,  // ....CC..
                /* 0528 */  0x0E, 0xCF, 0xE0, 0xFD, 0xC2, 0x27, 0x10, 0x60,  // .....'.`
                /* 0530 */  0x22, 0xCA, 0xCC, 0x10, 0x98, 0xD0, 0x75, 0xCA,  // ".....u.
                /* 0538 */  0xC6, 0x59, 0x93, 0x9E, 0x07, 0x2C, 0xF7, 0x80,  // .Y...,..
                /* 0540 */  0xA0, 0x6B, 0x04, 0xE6, 0x06, 0x11, 0xC4, 0xC3,  // .k......
                /* 0548 */  0x7F, 0xA3, 0xE0, 0x87, 0x46, 0x01, 0xEA, 0x60,  // ....F..`
                /* 0550 */  0x66, 0x08, 0x4B, 0xA3, 0x90, 0x30, 0x08, 0x8D,  // f.K..0..
                /* 0558 */  0xC8, 0x47, 0x0F, 0x02, 0x47, 0x41, 0x3C, 0x7A,  // .G..GA<z
                /* 0560 */  0xC7, 0x3C, 0x3E, 0xA1, 0x87, 0xEA, 0x63, 0x80,  // .<>...c.
                /* 0568 */  0x27, 0x81, 0x0B, 0x75, 0xF0, 0xA1, 0xC7, 0x05,  // '..u....
                /* 0570 */  0x3C, 0xDE, 0x03, 0xB1, 0xCF, 0x01, 0x6C, 0xEC,  // <.....l.
                /* 0578 */  0xB8, 0x93, 0x07, 0xDC, 0x71, 0xE0, 0x4F, 0x9C,  // ....q.O.
                /* 0580 */  0xF8, 0xB3, 0x1A, 0x3F, 0xF5, 0x80, 0xF3, 0xC8,  // ...?....
                /* 0588 */  0x89, 0xFB, 0xFF, 0x1F, 0x0E, 0xE0, 0x01, 0xF9,  // ........
                /* 0590 */  0x3E, 0x60, 0xA5, 0x67, 0x02, 0x3A, 0x87, 0x10,  // >`.g.:..
                /* 0598 */  0x61, 0xA2, 0x19, 0x1E, 0x13, 0xF8, 0xF8, 0x44,  // a......D
                /* 05A0 */  0x4F, 0xA4, 0x1E, 0x17, 0x1F, 0xA5, 0xCF, 0x30,  // O......0
                /* 05A8 */  0x0C, 0xFB, 0x11, 0xC5, 0xC7, 0xC4, 0x03, 0x7C,  // .......|
                /* 05B0 */  0x39, 0x78, 0xE6, 0xC3, 0xC0, 0x7A, 0xDC, 0x1C,  // 9x...z..
                /* 05B8 */  0xD6, 0x68, 0x61, 0x0F, 0xF7, 0x19, 0xC2, 0xF7,  // .ha.....
                /* 05C0 */  0x0F, 0xCF, 0xCC, 0xD7, 0x46, 0x9F, 0x3C, 0xC0,  // ....F.<.
                /* 05C8 */  0x72, 0x94, 0x82, 0x3F, 0x54, 0xDC, 0x59, 0x00,  // r..?T.Y.
                /* 05D0 */  0xEE, 0x81, 0x89, 0xCD, 0xE1, 0x69, 0x00, 0x2F,  // .....i./
                /* 05D8 */  0xF3, 0x10, 0x81, 0x1A, 0x88, 0x45, 0x2E, 0x50,  // .....E.P
                /* 05E0 */  0xC7, 0x15, 0x8F, 0xC4, 0x04, 0x96, 0x77, 0x80,  // ......w.
                /* 05E8 */  0x40, 0x9D, 0x1F, 0x2C, 0xEB, 0x00, 0x81, 0x12,  // @..,....
                /* 05F0 */  0x02, 0x47, 0x41, 0x7C, 0x80, 0xF0, 0x31, 0xDD,  // .GA|..1.
                /* 05F8 */  0x46, 0x0E, 0x10, 0xE8, 0x03, 0x0C, 0x83, 0x78,  // F......x
                /* 0600 */  0xE8, 0x34, 0x81, 0x8F, 0x32, 0x3E, 0x40, 0x00,  // .4..2>@.
                /* 0608 */  0x8F, 0x71, 0xE0, 0x0F, 0x10, 0xF0, 0xFE, 0xFF,  // .q......
                /* 0610 */  0x04, 0x3E, 0x01, 0x03, 0x9F, 0xF3, 0x03, 0x38,  // .>.....8
                /* 0618 */  0x4E, 0xA2, 0x3E, 0x3F, 0x80, 0xEB, 0x04, 0xE0,  // N.>?....
                /* 0620 */  0xF3, 0x03, 0x70, 0x1D, 0xE0, 0xA3, 0x00, 0x58,  // ..p....X
                /* 0628 */  0xCE, 0x64, 0x6C, 0x0E, 0x2F, 0x35, 0x67, 0xFE,  // .dl./5g.
                /* 0630 */  0xCA, 0xE4, 0x13, 0x2F, 0xE6, 0xD4, 0xCB, 0x75,  // .../...u
                /* 0638 */  0x8D, 0x80, 0x44, 0x3C, 0x43, 0xA0, 0x06, 0xE1,  // ..D<C...
                /* 0640 */  0x83, 0xB9, 0x8F, 0x13, 0xCC, 0xE7, 0x21, 0x48,  // ......!H
                /* 0648 */  0xAA, 0x51, 0x04, 0xEF, 0x5B, 0x01, 0x8B, 0x70,  // .Q..[..p
                /* 0650 */  0x8C, 0x40, 0x89, 0xA7, 0x90, 0xF4, 0x63, 0x04,  // .@....c.
                /* 0658 */  0x4A, 0x2C, 0x1C, 0x05, 0xF1, 0xA8, 0x7D, 0x90,  // J,....}.
                /* 0660 */  0xB0, 0x8D, 0xB3, 0x2D, 0xFA, 0x30, 0xCC, 0x8F,  // ...-.0..
                /* 0668 */  0x02, 0xFC, 0x14, 0x01, 0xF7, 0xFF, 0x3F, 0x0B,  // ......?.
                /* 0670 */  0x9F, 0xC2, 0x70, 0x47, 0x0F, 0x70, 0x5C, 0xC4,  // ..pG.p\.
                /* 0678 */  0x0E, 0xED, 0xEC, 0x1E, 0x12, 0xA2, 0xC4, 0x3C,  // .......<
                /* 0680 */  0x83, 0x37, 0x3F, 0x03, 0x86, 0x8D, 0xE6, 0x31,  // .7?....1
                /* 0688 */  0xE2, 0x70, 0xCE, 0xD1, 0x17, 0x35, 0xCF, 0x29,  // .p...5.)
                /* 0690 */  0xD6, 0xE3, 0x1B, 0x3F, 0x52, 0xC0, 0x45, 0xF1,  // ...?R.E.
                /* 0698 */  0x91, 0x02, 0xEE, 0x4C, 0xCE, 0x03, 0xA3, 0x6E,  // ...L...n
                /* 06A0 */  0x2C, 0x82, 0xF7, 0xB5, 0x10, 0x7F, 0xB0, 0x00,  // ,.......
                /* 06A8 */  0x1E, 0xC7, 0x25, 0x1F, 0x2C, 0xC0, 0x05, 0xE9,  // ..%.,...
                /* 06B0 */  0x83, 0x05, 0x70, 0x3D, 0x1F, 0xF8, 0x74, 0x00,  // ..p=..t.
                /* 06B8 */  0xD6, 0x0B, 0x19, 0xBF, 0x1F, 0xB0, 0xFF, 0xFF,  // ........
                /* 06C0 */  0xFD, 0x00, 0x77, 0xC2, 0x80, 0x71, 0x3E, 0xC0,  // ..w..q>.
                /* 06C8 */  0xDC, 0x30, 0x1C, 0x6B, 0xA5, 0x3A, 0x61, 0xE0,  // .0.k.:a.
                /* 06D0 */  0x62, 0x3D, 0x28, 0x34, 0x10, 0x36, 0xBC, 0xE7,  // b=(4.6..
                /* 06D8 */  0x9F, 0x27, 0x43, 0x7E, 0x98, 0x61, 0x51, 0xE0,  // .'C~.aQ.
                /* 06E0 */  0x74, 0xB4, 0xF0, 0xC9, 0xC2, 0x21, 0x28, 0x74,  // t....!(t
                /* 06E8 */  0x10, 0xF3, 0x09, 0x83, 0x8B, 0x39, 0x61, 0x50,  // .....9aP
                /* 06F0 */  0x10, 0x03, 0x3A, 0xE9, 0x39, 0x0C, 0x7D, 0xDA,  // ..:.9.}.
                /* 06F8 */  0xF4, 0xB1, 0x81, 0xDD, 0xEE, 0x7D, 0xBF, 0xF0,  // .....}..
                /* 0700 */  0x5C, 0x3C, 0x67, 0x8E, 0xE7, 0xF3, 0x32, 0x43,  // \<g...2C
                /* 0708 */  0x7D, 0x33, 0x01, 0xCF, 0x95, 0x82, 0x1D, 0xE7,  // }3......
                /* 0710 */  0x31, 0xB7, 0x49, 0x76, 0xE0, 0x64, 0xC7, 0x02,  // 1.Iv.d..
                /* 0718 */  0xA3, 0x1C, 0xEF, 0x6B, 0xA1, 0xD5, 0xDC, 0x15,  // ...k....
                /* 0720 */  0x50, 0x33, 0xC2, 0x10, 0x78, 0xC0, 0x3E, 0x89,  // P3..x.>.
                /* 0728 */  0x81, 0x49, 0xDF, 0x8D, 0x02, 0xE4, 0xE8, 0x5C,  // .I.....\
                /* 0730 */  0xE8, 0xE8, 0x51, 0x07, 0x00, 0x1F, 0xED, 0xF8,  // ..Q.....
                /* 0738 */  0xE8, 0x7D, 0xC4, 0xF6, 0x71, 0x05, 0xEE, 0xE1,  // .}..q...
                /* 0740 */  0xCE, 0x67, 0x28, 0x70, 0xFC, 0xFF, 0xCF, 0x50,  // .g(p...P
                /* 0748 */  0xC0, 0x65, 0x60, 0x9E, 0xE1, 0x13, 0x0A, 0xB8,  // .e`.....
                /* 0750 */  0xEE, 0x0F, 0xFC, 0xA2, 0x8A, 0x99, 0xC8, 0xB3,  // ........
                /* 0758 */  0x30, 0x8C, 0x53, 0x0A, 0xF0, 0x18, 0xBD, 0x4F,  // 0.S....O
                /* 0760 */  0x29, 0xE0, 0x3A, 0x00, 0xF8, 0x94, 0x02, 0x5C,  // ).:....\
                /* 0768 */  0xE7, 0xF8, 0x50, 0x00, 0x96, 0x33, 0x4A, 0x14,  // ..P..3J.
                /* 0770 */  0xDF, 0x7F, 0x3D, 0x11, 0x1B, 0x1F, 0x3E, 0xBD,  // ..=...>.
                /* 0778 */  0xA0, 0x78, 0x2C, 0xCF, 0xE6, 0xEC, 0x4C, 0xA9,  // .x,...L.
                /* 0780 */  0xB3, 0x09, 0x3A, 0xDA, 0xEB, 0x41, 0x83, 0x7E,  // ..:..A.~
                /* 0788 */  0x50, 0xF1, 0xEC, 0xC3, 0x1F, 0x5F, 0x84, 0xE7,  // P...._..
                /* 0790 */  0x53, 0x03, 0xFF, 0xFF, 0x13, 0x38, 0xCE, 0xD9,  // S....8..
                /* 0798 */  0x04, 0x15, 0x84, 0x42, 0xC7, 0x4E, 0x1F, 0x27,  // ...B.N.'
                /* 07A0 */  0xB8, 0xA4, 0xE3, 0x04, 0x05, 0x31, 0xA0, 0xF3,  // .....1..
                /* 07A8 */  0x1E, 0xF1, 0x3C, 0x0C, 0x7A, 0x9C, 0xE0, 0xA7,  // ..<.z...
                /* 07B0 */  0x3E, 0xDF, 0x12, 0x8E, 0xE3, 0x09, 0x24, 0xC1,  // >.....$.
                /* 07B8 */  0x7C, 0x27, 0x01, 0x7A, 0x39, 0x81, 0x77, 0x5E,  // |'.z9.w^
                /* 07C0 */  0x07, 0xCF, 0x28, 0xBC, 0x93, 0xB3, 0x60, 0x08,  // ..(...`.
                /* 07C8 */  0x6F, 0xD6, 0xEC, 0x38, 0x81, 0xBF, 0x1C, 0x3C,  // o..8...<
                /* 07D0 */  0x2B, 0x3C, 0xA8, 0xF3, 0xEB, 0x09, 0xCC, 0x7B,  // +<.....{
                /* 07D8 */  0x1E, 0xB8, 0x8E, 0x27, 0xC0, 0x42, 0xE6, 0x01,  // ...'.B..
                /* 07E0 */  0x00, 0x75, 0x6C, 0xF4, 0xC1, 0x91, 0x1F, 0x00,  // .ul.....
                /* 07E8 */  0x1C, 0xFA, 0x78, 0x82, 0x9E, 0x89, 0x8F, 0x45,  // ..x....E
                /* 07F0 */  0x4F, 0x25, 0xBE, 0x00, 0xF0, 0xB3, 0x9B, 0xCE,  // O%......
                /* 07F8 */  0x27, 0xA0, 0x38, 0x67, 0x82, 0x67, 0x1C, 0xEC,  // '.8g.g..
                /* 0800 */  0x0A, 0x80, 0x3F, 0x03, 0x60, 0xFE, 0xFF, 0x27,  // ..?.`..'
                /* 0808 */  0x14, 0x38, 0x47, 0x32, 0xF0, 0x4D, 0xC4, 0xA7,  // .8G2.M..
                /* 0810 */  0x8A, 0x03, 0xC1, 0x9E, 0x64, 0x81, 0x37, 0x2C,  // ....d.7,
                /* 0818 */  0x3F, 0xC9, 0x02, 0x3E, 0x6E, 0x23, 0xD8, 0x59,  // ?..>n#.Y
                /* 0820 */  0x3C, 0x93, 0x30, 0x82, 0x91, 0x8F, 0x26, 0xA8,  // <.0...&.
                /* 0828 */  0x23, 0xB2, 0x83, 0x9E, 0xC2, 0x10, 0xE3, 0x7C,  // #......|
                /* 0830 */  0xAC, 0x30, 0x46, 0xE4, 0xE2, 0x47, 0xAD, 0xC9,  // .0F..G..
                /* 0838 */  0xF8, 0x6C, 0xE6, 0xCB, 0x3A, 0x3B, 0xFC, 0xE0,  // .l..:;..
                /* 0840 */  0x08, 0x06, 0x3A, 0xA0, 0xA0, 0x8E, 0x63, 0x3E,  // ..:...c>
                /* 0848 */  0x8B, 0x81, 0xEB, 0xFF, 0x7F, 0x16, 0x03, 0x78,  // .......x
                /* 0850 */  0x70, 0x76, 0xF7, 0xE8, 0xF9, 0xB1, 0x9D, 0x83,  // pv......
                /* 0858 */  0x78, 0xF4, 0x0E, 0x7F, 0x16, 0x83, 0x1E, 0xF6,  // x.......
                /* 0860 */  0x2C, 0x06, 0xB4, 0x05, 0x9F, 0xC5, 0x40, 0x79,  // ,.....@y
                /* 0868 */  0x8B, 0xC0, 0xFF, 0xFF, 0x6F, 0x11, 0xB8, 0x33,  // ....o..3
                /* 0870 */  0x28, 0xF0, 0x5A, 0x9B, 0x4F, 0x28, 0xE0, 0xBA,  // (.Z.O(..
                /* 0878 */  0x33, 0xF8, 0x84, 0x02, 0x5C, 0x8F, 0x00, 0xB8,  // 3...\...
                /* 0880 */  0x33, 0x28, 0x38, 0x4E, 0x00, 0xCC, 0xD7, 0x0D,  // 3(8N....
                /* 0888 */  0x80, 0x82, 0x3C, 0x02, 0xE0, 0xAF, 0xF0, 0x3E,  // ..<....>
                /* 0890 */  0x98, 0xE0, 0xE2, 0x9D, 0x54, 0x50, 0x1C, 0x8E,  // ....TP..
                /* 0898 */  0x77, 0x52, 0x41, 0x4C, 0x25, 0xF2, 0x5B, 0x8B,  // wRAL%.[.
                /* 08A0 */  0x27, 0x10, 0xFE, 0xE0, 0xE2, 0xBC, 0x9F, 0xF1,  // '.......
                /* 08A8 */  0x53, 0x19, 0x0C, 0x51, 0x07, 0x0B, 0x94, 0x8C,  // S..Q....
                /* 08B0 */  0x83, 0x05, 0x05, 0x31, 0xA0, 0x33, 0x9E, 0x52,  // ...1.3.R
                /* 08B8 */  0xD0, 0xA7, 0x32, 0x7E, 0x19, 0xF1, 0xC0, 0x12,  // ..2~....
                /* 08C0 */  0xCC, 0x74, 0x4D, 0x81, 0xFA, 0xFF, 0x47, 0xF6,  // .tM...G.
                /* 08C8 */  0x05, 0x04, 0x37, 0x60, 0xB8, 0x60, 0x0F, 0x12,  // ..7`.`..
                /* 08D0 */  0x46, 0x78, 0x4D, 0xF6, 0x3C, 0x30, 0x47, 0x14,  // FxM.<0G.
                /* 08D8 */  0xC0, 0x86, 0xE4, 0xA1, 0xA3, 0x44, 0x0E, 0x9D,  // .....D..
                /* 08E0 */  0x82, 0x78, 0xE8, 0xA6, 0xF1, 0x11, 0x05, 0x37,  // .x.....7
                /* 08E8 */  0x56, 0x76, 0x21, 0x80, 0x15, 0xF5, 0x94, 0x02,  // Vv!.....
                /* 08F0 */  0x0A, 0x91, 0xC3, 0x07, 0xCD, 0x38, 0x8E, 0xEE,  // .....8..
                /* 08F8 */  0xA9, 0xC7, 0xF3, 0xE0, 0x77, 0x62, 0x1F, 0xF3,  // ....wb..
                /* 0900 */  0xE0, 0x9E, 0x54, 0x70, 0xA7, 0x46, 0xDC, 0x49,  // ..Tp.F.I
                /* 0908 */  0x05, 0x0C, 0x73, 0xC4, 0x9E, 0xCA, 0xC0, 0xF1,  // ..s.....
                /* 0910 */  0xFF, 0x3F, 0x82, 0x02, 0x47, 0x0F, 0x47, 0x50,  // .?..G.GP
                /* 0918 */  0x40, 0xCB, 0x21, 0x85, 0x1F, 0x33, 0x30, 0x57,  // @.!..30W
                /* 0920 */  0x03, 0x7E, 0x04, 0xC5, 0xC4, 0x7C, 0x3E, 0xE8,  // .~...|>.
                /* 0928 */  0x7C, 0xC2, 0x8F, 0x06, 0x0E, 0xF4, 0x2A, 0x10,  // |.....*.
                /* 0930 */  0x38, 0x3B, 0xEB, 0xE3, 0x2E, 0x07, 0x3E, 0x61,  // 8;....>a
                /* 0938 */  0x98, 0x60, 0x84, 0xD3, 0x04, 0x85, 0xB0, 0x78,  // .`.....x
                /* 0940 */  0x0A, 0x49, 0x3F, 0x54, 0xA0, 0xC4, 0xC2, 0x51,  // .I?T...Q
                /* 0948 */  0x10, 0x1F, 0x2A, 0x2C, 0xE4, 0x50, 0x81, 0x3E,  // ..*,.P.>
                /* 0950 */  0x46, 0xE1, 0x83, 0x9F, 0x28, 0x40, 0x71, 0x01,  // F...(@q.
                /* 0958 */  0x78, 0x64, 0x07, 0xEF, 0x7D, 0x9D, 0xFD, 0xFF,  // xd..}...
                /* 0960 */  0xEF, 0xEB, 0x98, 0x41, 0xE2, 0x2E, 0x2A, 0x1E,  // ...A..*.
                /* 0968 */  0xB2, 0x0F, 0xEC, 0x98, 0x79, 0xFA, 0x68, 0x01,  // ....y.h.
                /* 0970 */  0x8F, 0xC0, 0xA7, 0x47, 0xF0, 0xC1, 0xFB, 0x30,  // ...G...0
                /* 0978 */  0x05, 0xBC, 0xCE, 0x7A, 0x3E, 0x58, 0x80, 0x0B,  // ...z>X..
                /* 0980 */  0xDC, 0x07, 0x0B, 0xE0, 0x7A, 0xFB, 0xF1, 0xE9,  // ....z...
                /* 0988 */  0x00, 0xAC, 0xA3, 0x3D, 0xE6, 0xF3, 0x8D, 0xF3,  // ...=....
                /* 0990 */  0x7E, 0x00, 0xE3, 0xA6, 0xF2, 0x10, 0xE9, 0x7B,  // ~......{
                /* 0998 */  0x80, 0xF1, 0xD9, 0xF9, 0x00, 0x7B, 0x25, 0xF2,  // .....{%.
                /* 09A0 */  0xF1, 0x59, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5,  // .Y6}j4j.
                /* 09A8 */  0xA0, 0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9,  // .L.2.j..
                /* 09B0 */  0xD4, 0x98, 0x31, 0x4F, 0x50, 0xFA, 0xFF, 0x47,  // ..1OP..G
                /* 09B8 */  0x58, 0xB8, 0x46, 0xEE, 0x50, 0x4F, 0x09, 0x81,  // X.F.PO..
                /* 09C0 */  0x38, 0xEE, 0xF2, 0x35, 0x7A, 0xF2, 0x3A, 0x11,  // 8..5z.:.
                /* 09C8 */  0x88, 0x85, 0xA8, 0x00, 0x61, 0x62, 0x16, 0x29,  // ....ab.)
                /* 09D0 */  0x10, 0x4B, 0x5D, 0xA4, 0x40, 0x1C, 0xC5, 0x07,  // .K].@...
                /* 09D8 */  0x08, 0x0B, 0xA8, 0x04, 0x84, 0x45, 0xB5, 0x02,  // .....E..
                /* 09E0 */  0x44, 0xB5, 0x80, 0xB0, 0x58, 0x5E, 0x40, 0x58,  // D...X^@X
                /* 09E8 */  0xB0, 0x85, 0x0A, 0xC4, 0x61, 0xDC, 0x80, 0x30,  // ....a..0
                /* 09F0 */  0x29, 0x2F, 0x08, 0x0D, 0x86, 0xD8, 0x39, 0x42,  // )/....9B
                /* 09F8 */  0xEB, 0xAC, 0x6B, 0x10, 0x01, 0x39, 0xB4, 0x1F,  // ..k..9..
                /* 0A00 */  0x20, 0x26, 0x61, 0xFD, 0x02, 0xB2, 0x70, 0x45,  //  &a...pE
                /* 0A08 */  0x40, 0x2C, 0x06, 0x88, 0x80, 0xAC, 0xC3, 0x12,  // @,......
                /* 0A10 */  0x10, 0x13, 0x05, 0x22, 0x20, 0x4B, 0xD3, 0x04,  // ..." K..
                /* 0A18 */  0xC4, 0x84, 0x82, 0x08, 0xC8, 0x21, 0x45, 0x01,  // .....!E.
                /* 0A20 */  0xB1, 0xC4, 0x20, 0x02, 0x72, 0x78, 0x53, 0x40,  // .. .rxS@
                /* 0A28 */  0x4C, 0x8A, 0x2A, 0x20, 0xA6, 0xFE, 0xA1, 0x20,  // L.* ... 
                /* 0A30 */  0x20, 0x47, 0x01, 0x11, 0x90, 0x03, 0xD9, 0x02,  //  G......
                /* 0A38 */  0x62, 0xF1, 0x40, 0x04, 0x64, 0x85, 0xEF, 0x51,  // b.@.d..Q
                /* 0A40 */  0x01, 0x59, 0x2E, 0x88, 0x80, 0x1C, 0xC1, 0x18,  // .Y......
                /* 0A48 */  0x10, 0x0B, 0x04, 0x22, 0x20, 0xCB, 0x92, 0x06,  // ..." ...
                /* 0A50 */  0xC4, 0x44, 0x82, 0x08, 0xC8, 0xFF, 0x7F         // .D.....
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    ElseIf ((Arg1 == 0x07))
                    {
                        Return (AM07 (WIID))
                    }
                    ElseIf ((Arg1 == 0x08))
                    {
                        Return (AM08 ())
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRN", 0x00000001)
{
    /*
     * iASL Warning: There were 21 external control methods found during
     * disassembly, but only 0 were resolved (21 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_GPE.SP00, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP01, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP02, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP03, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP04, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP05, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP06, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_GPE.SP07, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.IWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M284, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PTBR.PTST.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xCAF53018, 0x000100D8)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16, 
        M444,   72
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, Zero, M286)
        CreateByteField (M285, One, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == One))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == One))
            {
                OperationRegion (VARO, SystemIO, Local1, One)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == Zero))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != Zero))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == Zero))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 4, Serialized)
    {
        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (Arg3)
        {
            M429 (Arg0, Arg1, Arg2, 0x88, Zero, 0x04, Arg3)
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, One)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M430 (Arg0, Arg1, Arg2)
            If ((Local3 & 0x0800))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        M429 (Arg0, Arg1, Arg2, 0x68, 0x05, One, Zero)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M430, 3, Serialized)
    {
        Local0 = M017 (Arg0, Arg1, Arg2, 0x68, 0x10, 0x10)
        Return (Local0)
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, Zero)
        Local3 >>= Local2
        Local3 &= One
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= One
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, One)
        Local3 &= (Ones ^ (One << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, One, Local3)
    }

    Method (M440, 1, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, Zero)
        Local0 = M011 (0xFEC30000, 0x04, Arg0, One)
        Return (Local0)
    }

    Method (M441, 2, Serialized)
    {
        M012 (0xFEC30000, Zero, Arg0, One, One)
        M012 (0xFEC30000, 0x08, Arg0, One, Arg1)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                            One)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), Zero, 
                            One)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= One
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= One
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                (Local1 + 0x08) = M038 /* External reference */
                Local2
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            Local2 = M440 (Local1)
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == Zero) || (Local0 == One)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == Zero))
                {
                    If ((Local0 == Zero))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= One
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == Zero))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= One
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == One))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x03))
        {
            M441 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                If ((M085 >= 0x0D))
                {
                    If ((M085 >= 0x0E))
                    {
                        Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                            0x04), Zero, One))
                    }
                    Else
                    {
                        Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                            0x04), Zero, One))
                    }
                }
                Else
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                        0x04), Zero, One))
                }
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), Zero, One))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M428, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0xFF
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x08 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M011 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M429, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            If ((M013 (Local0, Zero, Zero, 0x20) != Local3))
            {
                M012 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, Zero, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > Zero))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                ), 0x02, Zero)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > Zero))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                Local6 |= (0x03 << (Local2 << One))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > Zero))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (Ones ^ (0x03 << (Local2 << One)))
                                                    Local6 |= (Local3 << (Local2 << One))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), One, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > Zero) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - One)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = One
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06)
                    M115
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06)
                    M115
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
            Local1 = M011 (Arg0, (Arg1 + One), Zero, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), Zero, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), Zero, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        If ((Local2 > Zero))
        {
            Sleep (Local2)
        }

        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (Zero, 0x08, (Arg0 + One), 0x19, Zero, 0x08))
            }
            ElseIf ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, Arg0, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = Zero
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (Zero, Zero, Zero, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (Zero, Zero, Zero, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (Zero, Zero, Zero, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (Zero, Zero, Zero, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (Zero, Zero, Zero, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > Zero) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - One)
                    Stall (0x63)
                    Local3 = M019 (Zero, Zero, Zero, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (Zero, Zero, Zero, Local2)
            Local5 = 0x4EEA
            While (((Local5 > Zero) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - One)
                Stall (0x63)
                Local3 = M249 (Zero, Zero, Zero, Local2)
            }

            M020 (Zero, Zero, Zero, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (Zero, Zero, Zero, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (Zero, Zero, Zero, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (Zero, Zero, Zero, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), One, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & One) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > Zero) || (Arg1 > Zero)) || ((Arg2 > 
                Zero) || (Arg3 > Zero))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (Ones ^ (0x03 << (Local1 << One)))
                Local0 |= (Arg5 << (Local1 << One))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), One, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), Zero, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                One) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M409.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << One) | One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local2 = 0x03E8
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                Release (M408)
                Return (Zero)
            }

            Local1 = SMB0 /* \M409.SMB0 */
            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, Zero, 0x08)
        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, (Local5 | One))
        If ((Arg0 == One))
        {
            Local6 = SMB2 /* \M410.SMB2 */
            SMB2 = (Local6 & 0x7F)
        }

        Local1 = Zero
        Local2 = 0x64
        While (((Local2 > Zero) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - One)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            Local1 = One
            Local2 = 0x64
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == Zero))
            {
                SMB1 = 0x02
                Local3 = (Local3 - One)
            }
            Else
            {
                Local3 = Zero
            }
        }

        If (((Local2 == Zero) && (Local3 == Zero)))
        {
            If ((Arg0 == One))
            {
                SMB2 = Local6
            }

            M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
            Release (M408)
            Return (Zero)
        }

        Local3 = 0x03
        While ((Local3 > Zero))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << One)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = (0x08 | 0x40)
            Local1 = One
            Local2 = 0x03E8
            While (((Local2 > Zero) && ((Local1 & One) != Zero)))
            {
                Local2 = (Local2 - One)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == Zero))
            {
                SMB2 = 0x02
                If ((Arg0 == One))
                {
                    SMB2 = Local6
                }

                M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
                Release (M408)
                Return (Zero)
            }

            Local1 = SMB0 /* \M410.SMB0 */
            If (((Local1 & 0x04) != Zero))
            {
                Local3 = Zero
                Local4 = Zero
            }
            ElseIf (((Local1 & 0x08) != Zero))
            {
                SMB0 = 0x08
                Local3 = (Local3 - One)
                Local4 = Zero
            }
            Else
            {
                Local3 = Zero
                Local4 = Zero
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        If ((Arg0 == One))
        {
            SMB2 = Local6
        }

        M012 ((M084 + 0x0300), 0x02, Zero, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCI0.GP18.SATA.TPTS))
                {
                    \_SB.PCI0.GP18.SATA.TPTS (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TPTS))
                {
                    \_SB.PCI0.PTBR.PTST.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCI0.SATA.TPTS))
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCI0.GP18.SATA.TWAK))
                {
                    \_SB.PCI0.GP18.SATA.TWAK (Arg0)
                }

                If (CondRefOf (\_SB.PCI0.PTBR.PTST.TWAK))
                {
                    \_SB.PCI0.PTBR.PTST.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCI0.SATA.TWAK))
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != Zero))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != Zero))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != Zero) && (Local1 != Zero)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & One)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, Zero)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, One)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & One)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, Zero)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & One) == One))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }

        Method (XL0B, 0, NotSerialized)
        {
            Local0 = M049 (M128, 0x91)
            If (((Local0 & 0xC0) == 0xC0))
            {
                Local3 = Buffer (0x08){}
                CreateWordField (Local3, Zero, M254)
                CreateByteField (Local3, 0x02, M255)
                CreateDWordField (Local3, 0x03, M256)
                M256 = Zero
                M254 = 0x07
                M255 = 0x30
                Local3 = \_SB.ALIB (0x0C)
                Local4
                If (CondRefOf (\_SB.APAD))
                {
                    \_SB.APAD.M446 [One] = Local4
                    Notify (\_SB.APAD, 0x80) // Status Change
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (APAD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Name (M446, Package (0x02)
            {
                One, 
                Zero
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (\_OSI ("Processor Aggregator Device"))
                {
                    Local0 = M049 (M128, 0x91)
                    If (((Local0 & 0x80) == 0x80))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PUR, 0, NotSerialized)  // _PUR: Processor Utilization Request
            {
                Return (M446) /* \_SB_.APAD.M446 */
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRTPX", 0x00000001)
{
    /*
     * iASL Warning: There were 19 external control methods found during
     * disassembly, but only 0 were resolved (19 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, IntObj)
    External (_SB_.LID_._LID, IntObj)
    External (_SB_.PCI0.GPP8.VGA_, DeviceObj)
    External (M000, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M012, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M013, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M019, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M020, MethodObj)    // Warning: Unknown method, guessing 5 arguments
    External (M021, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M023, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M024, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M025, UnknownObj)
    External (M026, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M043, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M049, IntObj)
    External (M084, UnknownObj)
    External (M090, IntObj)
    External (M091, IntObj)
    External (M093, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M094, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (M095, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M097, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (M098, IntObj)
    External (M099, IntObj)
    External (M101, IntObj)
    External (M102, IntObj)
    External (M103, IntObj)
    External (M104, IntObj)
    External (M111, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M112, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M113, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (M131, IntObj)
    External (M133, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (M232, MethodObj)    // Warning: Unknown method, guessing 7 arguments

    Scope (\_SB)
    {
        Name (MACO, Zero)
    }

    Scope (\_SB.PCI0.GPP8.VGA)
    {
        Name (M189, Buffer (0x0100){})
        Name (M190, Ones)
        Name (M191, Ones)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
            }

            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = Zero
            M158 = Zero
            M160 = Zero
            Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = One
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Store (M019 (M095 (M094 (M093 (0x2C, Local0), Store (M019 (M095 (M094 (
                    Local1 = (M093 (One, Zero) + 0x2C), If ((Local0 != Local5))
                                                {
                                                    M190 = Local0
                                                }, If ((Local1 != Local5))
                                                {
                                                    M191 = Local1
                                                }), Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */)))))
            }
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            Local7 = Buffer (0x05){}
            CreateWordField (Local7, Zero, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = Zero
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, Zero)
            M133 (0x11, Local0) = M049 /* External reference */
            Store (M113 (Local0, Local6, M023 (Zero, M091, M090), If ((M192 && Local6))
                    {
                        M000 (0x86)
                        M112 (Local0, Zero)
                        M111 (Local0, One)
                        Sleep (0x20)
                        M112 (Local0, 0x02)
                        M112 (Local0, One)
                        M000 (0x87)
                        HPOK = Zero
                        Sleep (0x14)
                        M201 = One
                        0x06 = \_SB.ALIB /* External reference */
                        Local7
                        Local6
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            M023 (Zero, M091, M090)
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                0xA5 = M021 (Zero, M091, M090)
                                Local0
                                Local0 &= 0x7F
                                If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                M090 = M024 (Zero, M091)
                                Local5
                                If (Local5)
                                {
                                    M026 (Zero, M091, M090)
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    Local0 = Zero
                                    If ((M025 == Zero))
                                    {
                                        M091
                                        M090
                                        Zero
                                        Ones
                                        Local0 = One
                                    }

                                    If (Local0)
                                    {
                                        M111 (M049, M133 (0x17, One))
                                        M111 (M049, M133 (0x18, One))
                                        HPOK = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        HPOK = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!HPOK)
                        {
                            M000 (0x88)
                            Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                Local5 = 0x05, While ((Local4 && Local5))
                                        {
                                            0xA5 = M021 (Zero, M091, M090)
                                            Local0
                                            Local0 &= 0x7F
                                            If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                            {
                                                Local4 = Zero
                                            }
                                            Else
                                            {
                                                Store (M019 (M095 (M094 (M093 (Zero, Local0), Sleep (0x05), Local5--), 
                                                    M201 = Zero, \_SB.ALIB, 0x06), Local7, If ((M097 (Zero, 0x54 = M019 (
                                                    Zero, M091, M090), Local0, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFC)), 
                                                    M232 (M097 (Zero, 0x10, M020 (Zero, M091, M090, 0x54, (Local0 & 0xFFFF7FFF)), 
                                                    M000 (0x89), Else
                                                                                {
                                                                                    M000 (0x8A)
                                                                                    M201 = Zero
                                                                                    \_SB.ALIB
                                                                                    0x06
                                                                                    Local7
                                                                                    M000 (0x8B)
                                                                                    M111 (M049, M133 (0x17, Zero))
                                                                                    M111 (M049, M133 (0x18, Zero))
                                                                                    M112 (Local0, Zero)
                                                                                    Sleep (0x0A)
                                                                                    M111 (Local0, Zero)
                                                                                    M023 (Zero, M091, M090)
                                                                                    Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x0A), Local4 = One), 
                                                                                        Local5 = 0x05, While ((Local4 && Local5))
                                                                                                {
                                                                                                    0xA5 = M021 (Zero, M091, M090)
                                                                                                    Local0
                                                                                                    Local0 &= 0x7F
                                                                                                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                                                                                                    {
                                                                                                        Local4 = Zero
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local1), Sleep (0x05), Local5--), 
                                                                                                            HPOK = 0x02, M000 (0x8C), If (HPOK)
                                                                                                                    {
                                                                                                                        Local5 = 0x7FFFFFFF
                                                                                                                        Local5 |= 0x80000000
                                                                                                                        0x54 = M019 (Zero, M091, M090)
                                                                                                                        Local1
                                                                                                                        M020 (Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                                                                                                                        Store (M019 (M095 (M094 (M093 (Zero, Local0), If (((HPOK == One) && 
                                                                                                                            (Local0 != Local5)))
                                                                                                                                        {
                                                                                                                                            M020 (M095 (M094 (M093 (0x4C, M190), Sleep (0x0A), If ((M191 != 
                                                                                                                                                Local5))
                                                                                                                                                        {
                                                                                                                                                            M020 (M095 (M094 (M191 = (M093 (One, Zero) + 0x4C), Sleep (0x0A), M020 (
                                                                                                                                                                Zero, M091, M090, 0x54, (Local1 & 0xFFFF7FFF)))))
                                                                                                                                                        })))
                                                                                                                                        })))
                                                                                                                    }))
                                                                                                    }
                                                                                                }))
                                                                                }))) != )){})
                                            }
                                        }))
                        }
                    })
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & One)
            If (M195)
            {
                M111 (M049, M133 (0x17, One))
            }
            Else
            {
                M111 (M049, M133 (0x17, Zero))
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & One)
            If (M196)
            {
                M111 (M049, M133 (0x18, One))
            }
            Else
            {
                M111 (M049, M133 (0x18, Zero))
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x19, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GPP8.VGA_.PX08.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x1A + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, Zero, M193)
            CreateWordField (M189, 0x02, M157)
            M133 (0x7E, Local0) = M049 /* External reference */
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GPP8.VGA_.PX09.M157 */
            Local1 = Zero
            While ((Local1 < Local0))
            {
                M133 ((0x7F + Local1), Local2) = M049 /* External reference */
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GPP8.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & One)
            \_SB.MACO = (Arg0 & One)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, Zero, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & One)
            Local2 = M162 /* \_SB_.PCI0.GPP8.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                M131 = M049 /* External reference */
                0x10
                Local0
                M131 = M049 /* External reference */
                0x11
                Local1
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, Zero, One, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100){})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (AF00 ())
            }

            If ((Arg0 == One))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, Zero, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = Zero
                M158 = Zero
                M159 = Zero
                M160 = Zero
                Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = One
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, Zero)
        Name (M211, Zero)
        Name (M212, Zero)
        Name (M213, Zero)
        Name (M214, Zero)
        Name (M215, Zero)
        Name (M303, Zero)
        Name (M304, Zero)
        Name (SSDM, 0x0A)
        Name (SCDY, Zero)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, Zero, M165)
            CreateBitField (M164, One, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, Zero, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GPP8.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GPP8.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GPP8.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GPP8.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GPP8.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GPP8.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GPP8.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GPP8.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GPP8.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, Zero)
            M133 (0xBF, M187) = M049 /* External reference */
            Local1 = Zero
            While ((Local1 < M187))
            {
                M133 ((0xC0 + Local1), Local2) = M049 /* External reference */
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GPP8.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GPP8.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP8.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GPP8.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = Zero
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GPP8.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GPP8.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, Zero, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = Zero
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID /* External reference */
                Local1 = (Local0 ^ One)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            If (Local0)
                {
                    Local1 = Zero
                    While ((Local1 < Local0))
                    {
                        M133 ((0xD4 + Local1), Local2) = M049 /* External reference */
                        ATIB [Local1] = Local2
                        Local1++
                    }
                } = M013 (M133 (0xD4, Zero), 0x10, Local0)
            Else
            {
                One = M043 (Zero, Arg0)
                Local3
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [Zero] = 0x05
                    ATIB [One] = Zero
                    ATIB [0x02] = Zero
                    ATIB [0x03] = Zero
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GPP8.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & One))
            {
                CreateBitField (M164, Zero, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, One, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GPP8.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)){}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & Ones)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)
    External (_PR_.C002, DeviceObj)
    External (_PR_.C003, DeviceObj)
    External (_PR_.C004, DeviceObj)
    External (_PR_.C005, DeviceObj)
    External (_PR_.C006, DeviceObj)
    External (_PR_.C007, DeviceObj)
    External (_PR_.C008, DeviceObj)
    External (_PR_.C009, DeviceObj)
    External (_PR_.C00A, DeviceObj)
    External (_PR_.C00B, DeviceObj)
    External (_PR_.C00C, DeviceObj)
    External (_PR_.C00D, DeviceObj)
    External (_PR_.C00E, DeviceObj)
    External (_PR_.C00F, DeviceObj)
    External (_PR_.C010, DeviceObj)
    External (_PR_.C011, DeviceObj)
    External (_PR_.C012, DeviceObj)
    External (_PR_.C013, DeviceObj)
    External (_PR_.C014, DeviceObj)
    External (_PR_.C015, DeviceObj)
    External (_PR_.C016, DeviceObj)
    External (_PR_.C017, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C000.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000000C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000001C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C001.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000010C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000011C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C002.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000020C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000021C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C003.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000030C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000031C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C004.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000040C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000041C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C005.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000050C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000051C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C006.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000060C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000061C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C007.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000070C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000071C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C008.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000800, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000804, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000808, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000080C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000814, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000818, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000081C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000840, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000844, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000848, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000850, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C009.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000900, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000904, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000908, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000090C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000914, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000918, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000091C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000940, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000944, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000948, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000950, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00A.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000A50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00B.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000B50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00C.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000C50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00D.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000D50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00E.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000E50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C00F.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F00, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F04, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F08, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F0C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F14, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F18, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F1C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F40, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F44, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F48, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000F50, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C010)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C010.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001004, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001008, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000100C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001014, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001018, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000101C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001040, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001044, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001048, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001050, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C011)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C011.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000008, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001100, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001104, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001108, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000110C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001114, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001118, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000111C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001140, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001144, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001148, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001150, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C012)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C012.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001200, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001204, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001208, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000120C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001214, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001218, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000121C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001240, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001244, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001248, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001250, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C013)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C013.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x00000009, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001300, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001304, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001308, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000130C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001314, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001318, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000131C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001340, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001344, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001348, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001350, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C014)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C014.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001400, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001404, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001408, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000140C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001414, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001418, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000141C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001440, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001444, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001448, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001450, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C015)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C015.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000A, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001500, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001504, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001508, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000150C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001514, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001518, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000151C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001540, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001544, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001548, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001550, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C016)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C016.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001600, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001604, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001608, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000160C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001614, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001618, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000161C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001640, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001644, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001648, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001650, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Scope (\_PR.C017)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000ED8, 
                0x00001054, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000AF0, 
                0x00000AF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.C017.PPCV */
        }

        Name (_CST, Package (0x03)  // _CST: C-States
        {
            0x02, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }
        })
        Name (_CSD, Package (0x01)  // _CSD: C-State Dependencies
        {
            Package (0x06)
            {
                0x06, 
                0x00, 
                0x0000000B, 
                0x000000FE, 
                0x00000002, 
                0x00000000
            }
        })
        Name (_CPC, Package (0x15)  // _CPC: Continuous Performance Control
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001700, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001704, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001708, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000170C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001714, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001718, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x000000000000171C, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001740, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001744, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001748, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (PCC, 
                    0x20,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001750, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
    }

    Method (NFPR, 0, NotSerialized)
    {
        Local0 = 0xCB2F0000
        OperationRegion (SHRM, SystemMemory, Local0, 0x1808)
        Field (SHRM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x48), 
            V000,   1, 
            Offset (0x148), 
            V001,   1, 
            Offset (0x248), 
            V002,   1, 
            Offset (0x348), 
            V003,   1, 
            Offset (0x448), 
            V004,   1, 
            Offset (0x548), 
            V005,   1, 
            Offset (0x648), 
            V006,   1, 
            Offset (0x748), 
            V007,   1, 
            Offset (0x848), 
            V008,   1, 
            Offset (0x948), 
            V009,   1, 
            Offset (0xA48), 
            V00A,   1, 
            Offset (0xB48), 
            V00B,   1, 
            Offset (0xC48), 
            V00C,   1, 
            Offset (0xD48), 
            V00D,   1, 
            Offset (0xE48), 
            V00E,   1, 
            Offset (0xF48), 
            V00F,   1, 
            Offset (0x1048), 
            V010,   1, 
            Offset (0x1148), 
            V011,   1, 
            Offset (0x1248), 
            V012,   1, 
            Offset (0x1348), 
            V013,   1, 
            Offset (0x1448), 
            V014,   1, 
            Offset (0x1548), 
            V015,   1, 
            Offset (0x1648), 
            V016,   1, 
            Offset (0x1748), 
            V017,   1
        }

        If ((V000 == One))
        {
            Notify (\_PR.C000, 0x84) // Reserved
        }

        If ((V001 == One))
        {
            Notify (\_PR.C001, 0x84) // Reserved
        }

        If ((V002 == One))
        {
            Notify (\_PR.C002, 0x84) // Reserved
        }

        If ((V003 == One))
        {
            Notify (\_PR.C003, 0x84) // Reserved
        }

        If ((V004 == One))
        {
            Notify (\_PR.C004, 0x84) // Reserved
        }

        If ((V005 == One))
        {
            Notify (\_PR.C005, 0x84) // Reserved
        }

        If ((V006 == One))
        {
            Notify (\_PR.C006, 0x84) // Reserved
        }

        If ((V007 == One))
        {
            Notify (\_PR.C007, 0x84) // Reserved
        }

        If ((V008 == One))
        {
            Notify (\_PR.C008, 0x84) // Reserved
        }

        If ((V009 == One))
        {
            Notify (\_PR.C009, 0x84) // Reserved
        }

        If ((V00A == One))
        {
            Notify (\_PR.C00A, 0x84) // Reserved
        }

        If ((V00B == One))
        {
            Notify (\_PR.C00B, 0x84) // Reserved
        }

        If ((V00C == One))
        {
            Notify (\_PR.C00C, 0x84) // Reserved
        }

        If ((V00D == One))
        {
            Notify (\_PR.C00D, 0x84) // Reserved
        }

        If ((V00E == One))
        {
            Notify (\_PR.C00E, 0x84) // Reserved
        }

        If ((V00F == One))
        {
            Notify (\_PR.C00F, 0x84) // Reserved
        }

        If ((V010 == One))
        {
            Notify (\_PR.C010, 0x84) // Reserved
        }

        If ((V011 == One))
        {
            Notify (\_PR.C011, 0x84) // Reserved
        }

        If ((V012 == One))
        {
            Notify (\_PR.C012, 0x84) // Reserved
        }

        If ((V013 == One))
        {
            Notify (\_PR.C013, 0x84) // Reserved
        }

        If ((V014 == One))
        {
            Notify (\_PR.C014, 0x84) // Reserved
        }

        If ((V015 == One))
        {
            Notify (\_PR.C015, 0x84) // Reserved
        }

        If ((V016 == One))
        {
            Notify (\_PR.C016, 0x84) // Reserved
        }

        If ((V017 == One))
        {
            Notify (\_PR.C017, 0x84) // Reserved
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "ALASKA", "CPUSSDT", 0x01072009)
{
    Scope (\_PR)
    {
        Processor (C000, 0x00, 0x00000810, 0x06){}
        Processor (C001, 0x01, 0x00000810, 0x06){}
        Processor (C002, 0x02, 0x00000810, 0x06){}
        Processor (C003, 0x03, 0x00000810, 0x06){}
        Processor (C004, 0x04, 0x00000810, 0x06){}
        Processor (C005, 0x05, 0x00000810, 0x06){}
        Processor (C006, 0x06, 0x00000810, 0x06){}
        Processor (C007, 0x07, 0x00000810, 0x06){}
        Processor (C008, 0x08, 0x00000810, 0x06){}
        Processor (C009, 0x09, 0x00000810, 0x06){}
        Processor (C00A, 0x0A, 0x00000810, 0x06){}
        Processor (C00B, 0x0B, 0x00000810, 0x06){}
        Processor (C00C, 0x0C, 0x00000810, 0x06){}
        Processor (C00D, 0x0D, 0x00000810, 0x06){}
        Processor (C00E, 0x0E, 0x00000810, 0x06){}
        Processor (C00F, 0x0F, 0x00000810, 0x06){}
        Processor (C010, 0x10, 0x00000810, 0x06){}
        Processor (C011, 0x11, 0x00000810, 0x06){}
        Processor (C012, 0x12, 0x00000810, 0x06){}
        Processor (C013, 0x13, 0x00000810, 0x06){}
        Processor (C014, 0x14, 0x00000810, 0x06){}
        Processor (C015, 0x15, 0x00000810, 0x06){}
        Processor (C016, 0x16, 0x00000810, 0x06){}
        Processor (C017, 0x17, 0x00000810, 0x06){}
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF0000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 0028 */  0x1F, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x07, 0x00, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10530, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B1057C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B109C4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B109C8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B109CC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B109D0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B109D4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B109D8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)){}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)){}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x3C, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x3A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x3B, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x3D, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x2F, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRNOI", 0x00000001)
{
    /*
     * iASL Warning: There were 20 external control methods found during
     * disassembly, but only 0 were resolved (20 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.SWUS.SWDS.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN1, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN2, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN3, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN4, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN5, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN6, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN7, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFN8, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GPP8.VGA_.AFNC, MethodObj)    // Warning: Unknown method, guessing 2 arguments

    Method (AFN0, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN0))
        {
            \_SB.PCI0.GPP8.VGA.AFN0 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN0))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN0 ()
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN1))
        {
            \_SB.PCI0.GPP8.VGA.AFN1 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN1))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN1 (Arg0)
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN2))
        {
            \_SB.PCI0.GPP8.VGA.AFN2 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN2))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN3))
        {
            \_SB.PCI0.GPP8.VGA.AFN3 (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN3))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN4))
        {
            \_SB.PCI0.GPP8.VGA.AFN4 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN4))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN4 (Arg0)
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN5))
        {
            \_SB.PCI0.GPP8.VGA.AFN5 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN5))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN5 ()
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN6))
        {
            \_SB.PCI0.GPP8.VGA.AFN6 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN6))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN6 ()
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN7))
        {
            \_SB.PCI0.GPP8.VGA.AFN7 (Arg0)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN7))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN7 (Arg0)
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFN8))
        {
            \_SB.PCI0.GPP8.VGA.AFN8 ()
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN8))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFN8 ()
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.GPP8.VGA.AFNC))
        {
            \_SB.PCI0.GPP8.VGA.AFNC (Arg0, Arg1)
        }

        If (CondRefOf (\_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFNC))
        {
            \_SB.PCI0.GPP8.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "QOGIRDGP", 0x00000001)
{
    External (_SB_.PCI0.GPP8, DeviceObj)
    External (_SB_.PCI0.GPP8.M434, UnknownObj)
    External (M049, UnknownObj)
    External (M097, UnknownObj)
    External (M128, UnknownObj)

    Scope (\_SB.PCI0.GPP8)
    {
        Device (VGA)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }
        }

        Device (HDAU)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((M097 != Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }
        }

        Method (_DSD, 0, Serialized)  // _DSD: Device-Specific Data
        {
            Return (Package (0x04)
            {
                ToUUID ("6b4ad420-8fd3-4364-acf8-eb94876fd9eb"), 
                Package (0x00){}, 
                ToUUID ("fdf06fad-f744-4451-bb64-ecd792215b10"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "FundamentalDeviceResetTriggeredOnD3ToD0", 
                        One
                    }
                }
            })
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            Name (M432, Zero)
            Name (M433, Zero)
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Name (M435, Buffer (0x02)
                        {
                             0x00, 0x00                                       // ..
                        })
                        CreateBitField (M435, Zero, M436)
                        CreateBitField (M435, 0x05, M445)
                        CreateBitField (M435, 0x0A, M437)
                        CreateBitField (M435, 0x0B, M438)
                        If ((Arg1 >= 0x04))
                        {
                            M436 = One
                            M445 = One
                            ((0x66 = (M049 >> M128)) /* External reference */ & 0x04)
                            One
                            M432
                            ((0x66 = (M049 >> M128)) /* External reference */ & 0x05)
                            One
                            M433
                            If ((M432 == One))
                            {
                                M437 = One
                            }

                            If ((M433 == One))
                            {
                                M438 = One
                            }
                        }
                        Else
                        {
                            M436 = One
                            M445 = One
                        }

                        Return (M435) /* \_SB_.PCI0.GPP8._DSM.M435 */
                    }
                    Case (0x05)
                    {
                        Return (Zero)
                    }
                    Case (0x0A)
                    {
                        Return (One)
                    }
                    Case (0x0B)
                    {
                        Local0 = ToInteger (Arg3)
                        If ((Local0 <= 0x2710))
                        {
                            \_SB.PCI0.GPP8.M434 = 0x2710
                        }
                        Else
                        {
                            Local0 = 0x2710
                        }

                        Return (Local0)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000E884
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 71
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 59524 (0xE884)

    0000: 56 46 43 54 84 E8 00 00 01 71 41 4C 41 53 4B 41  // VFCT.....qALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 67 00 00 00 00  // ...........g....
    0060: 01 00 00 00 00 E8 00 00 55 AA 74 E9 B1 02 00 00  // ........U.t.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 54 02 00 00 00 00 49 42 4D 8F 88 92 00 00 00 00  // T.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 A9 02 00 00 00 00 00 00  // 20..............
    00B0: 2E 02 00 00 00 00 00 00 30 38 2F 32 30 2F 31 39  // ........08/20/19
    00C0: 20 30 32 3A 32 33 00 00 31 00 00 00 E9 BC 03 00  //  02:23..1.......
    00D0: E9 CB 03 00 00 00 F4 00 00 13 00 00 00 D0 01 00  // ................
    00E0: 00 8B 21 E1 02 80 7E 00 A2 A0 45 02 12 00 00 00  // ..!...~...E.....
    00F0: 00 00 00 3C 40 0E 02 07 3C 01 1A 00 04 00 00 00  // ...<@...<.......
    0100: EE A0 FF 06 00 08 30 40 0E 01 00 00 00 00 00 00  // ......0@........
    0110: 14 03 00 00 00 00 00 00 BE 7E 11 00 B9 07 1A D6  // .........~......
    0120: 50 2C 00 00 00 00 00 00 00 00 00 00 14 40 41 43  // P,...........@AC
    0130: 00 00 00 00 10 00 00 00 42 00 00 00 F0 7D E6 07  // ........B....}..
    0140: 20 00 20 00 12 00 0E 00 00 00 00 00 00 00 00 00  //  . .............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 31 31 33 2D  // ............113-
    0160: 35 38 30 38 35 53 53 44 32 2D 57 39 30 00 50 4F  // 58085SSD2-W90.PO
    0170: 4C 41 52 49 53 32 30 00 50 43 49 5F 45 58 50 52  // LARIS20.PCI_EXPR
    0180: 45 53 53 00 47 44 44 52 35 00 0D 0A 43 39 34 30  // ESS.GDDR5...C940
    0190: 20 50 6F 6C 61 72 69 73 32 30 20 58 54 58 20 41  //  Polaris20 XTX A
    01A0: 31 20 47 44 44 52 35 20 32 35 36 4D 78 33 32 20  // 1 GDDR5 256Mx32 
    01B0: 38 47 42 20 33 30 30 65 2F 33 30 30 6D 20 20 20  // 8GB 300e/300m   
    01C0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01D0: 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A  //         ..... ..
    01E0: 00 28 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20  // .(C) 1988-2010, 
    01F0: 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44  // Advanced Micro D
    0200: 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F  // evices, Inc..ATO
    0210: 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30  // MBIOSBK-AMD VER0
    0220: 31 35 2E 30 35 30 2E 30 30 32 2E 30 30 31 2E 30  // 15.050.002.001.0
    0230: 30 30 30 30 30 00 35 38 30 38 53 53 44 32 2E 57  // 00000.5808SSD2.W
    0240: 39 30 00 31 39 38 35 36 33 39 20 00 34 37 37 35  // 90.1985639 .4775
    0250: 34 38 20 20 00 20 20 20 20 20 20 20 20 00 58 46  // 48  .        .XF
    0260: 58 5F 31 38 31 30 33 30 48 4A 5F 58 54 5F 53 53  // X_181030HJ_XT_SS
    0270: 5F 32 35 36 33 32 5F 45 31 33 36 36 4D 32 30 30  // _25632_E1366M200
    0280: 30 52 50 4D 32 32 30 30 46 43 5C 63 6F 6E 66 69  // 0RPM2200FC\confi
    0290: 67 2E 68 00 00 00 24 00 01 01 41 54 4F 4D 00 C0  // g.h...$...ATOM..
    02A0: D5 03 CE 01 79 02 22 01 FA 03 00 00 00 00 82 16  // ....y.".........
    02B0: 80 C5 54 02 60 97 06 98 A0 00 00 00 50 43 49 52  // ..T.`.......PCIR
    02C0: 02 10 DF 67 00 00 18 00 00 00 00 03 74 00 32 0F  // ...g........t.2.
    02D0: 00 00 00 00 41 4D 44 20 41 54 4F 4D 42 49 4F 53  // ....AMD ATOMBIOS
    02E0: 00 31 8F 85 F7 00 00 00 00 00 00 00 00 82 51 78  // .1............Qx
    02F0: 63 54 E7 7A 64 75 7E 94 B7 2C 7A F8 95 01 00 00  // cT.zdu~..,z.....
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0310: 00 56 1E 0E 1F E8 3E 2A 81 4D 50 00 20 1F 5E 1E  // .V....>*.MP. .^.
    0320: 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57 0E  // .fPfQfRfSfUfVfW.
    0330: 1F A3 42 02 8C 0E 36 02 B2 20 E8 F6 2D 0B C0 75  // ..B...6.. ..-..u
    0340: 14 A2 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59  // ....f_f^f]f[fZfY
    0350: 66 58 07 1F CB E8 0C 2F E8 D7 2C 32 D2 89 16 44  // fX...../..,2...D
    0360: 02 A1 42 02 66 C1 C0 10 A1 36 02 E8 0B 04 E8 1E  // ..B.f....6......
    0370: 04 E8 E6 03 E8 54 05 E8 4B 03 E8 D9 29 F7 45 50  // .....T..K...).EP
    0380: 00 20 75 13 E8 AF 29 0B C0 74 0C E8 49 00 E8 F7  // . u...)..t..I...
    0390: 57 E8 DB 03 E8 3E 58 E8 B9 00 B4 80 E8 C8 2C 8A  // W....>X.......,.
    03A0: C7 66 C1 E0 10 8A E3 B0 14 66 50 BB 08 00 E8 13  // .f.......fP.....
    03B0: 28 A8 01 66 58 74 02 B0 20 66 A3 88 92 E8 68 03  // (..fXt.. f....h.
    03C0: E8 D6 03 E8 C3 2E 66 5F 66 5E 66 5D 66 5B 66 5A  // ......f_f^f]f[fZ
    03D0: 66 59 66 58 07 1F CB 2E 8B 1E 36 02 83 3E E7 03  // fYfX......6..>..
    03E0: 00 75 04 89 1E E5 03 1E 2E 8E 1E DD 03 9C FA 66  // .u.............f
    03F0: C7 06 08 01 65 F0 00 F0 C7 06 40 00 FA 03 89 1E  // ....e.....@.....
    0400: 42 00 C7 06 B4 01 FA 03 89 1E B6 01 C7 06 7C 00  // B.............|.
    0410: A6 60 89 1E 7E 00 C7 06 0C 01 B9 64 89 1E 0E 01  // .`..~......d....
    0420: C7 06 A8 04 E6 5A 89 1E AA 04 2E 8E 1E E5 03 8B  // .....Z..........
    0430: C3 A3 E8 5A A3 F8 5A A3 0A 5B 9D 1F C3 50 4D 49  // ...Z..Z..[...PMI
    0440: 44 FA 03 0E 48 00 00 00 A0 00 B0 00 B8 00 C0 00  // D...H...........
    0450: 00 00 00 BB 00 00 E8 6B 27 66 C1 E8 10 A3 5A 02  // .......k'f....Z.
    0460: C3 00 E8 FF 2D E8 48 02 75 1B 2E 3A 26 50 02 75  // ....-.H.u..:&P.u
    0470: 05 E8 47 00 EB 11 80 FC 4F 75 05 E8 EE 42 EB 07  // ..G.....Ou...B..
    0480: E8 3B 4A EB 02 B4 01 E8 FF 2D CF E8 D6 2D E8 1F  // .;J......-...-..
    0490: 02 75 05 E8 25 00 EB 02 B4 01 E8 EC 2D CB E8 C3  // .u..%.......-...
    04A0: 2D E8 0C 02 75 0F 80 FC 4F 75 05 E8 BE 42 EB 07  // -...u...Ou...B..
    04B0: E8 0B 4A EB 02 B4 01 E8 CF 2D CB 1E 06 66 50 66  // ..J......-...fPf
    04C0: 51 66 52 66 53 66 55 66 56 66 57 0E 1F 3C 04 75  // QfRfSfUfVfW..<.u
    04D0: 23 BB 0B 00 E8 ED 26 8D 36 1F 01 8A 3C 80 EF 30  // #.....&.6...<..0
    04E0: B3 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46  // .....^..F.f....F
    04F0: 00 E9 9A 01 3C 05 75 18 E8 77 02 E8 34 2B 8B EC  // ....<.u..w..4+..
    0500: 89 56 10 89 46 00 66 C1 E8 10 89 46 04 E9 7E 01  // .V..F.f....F..~.
    0510: 3C 06 75 39 E8 69 02 66 D1 E0 8B EC 89 46 14 BB  // <.u9.i.f.....F..
    0520: 02 00 E8 9F 26 88 46 18 E8 59 02 66 0B C0 0F 84  // ....&.F..Y.f....
    0530: 54 01 66 89 46 0C BB 06 00 E8 88 26 33 C0 66 89  // T.f.F......&3.f.
    0540: 46 00 2E 8B 16 5A 02 89 56 10 E9 41 01 3C 0B 75  // F....Z..V..A.<.u
    0550: 24 0A DB 75 11 B9 80 00 BB 02 00 8B EC 89 5E 0C  // $..u..........^.
    0560: 89 4E 14 E9 28 01 8A C7 E8 3B 01 E8 D8 0E 0F 84  // .N..(....;......
    0570: 14 01 E9 19 01 3C 17 75 21 E8 6A 06 74 06 E8 5E  // .....<.u!.j.t..^
    0580: 0D E8 A7 18 E8 8B 07 E8 AF 0E 33 C9 66 C1 E8 10  // ..........3.f...
    0590: 0A E8 8B EC 89 4E 14 E9 F4 00 3C 18 75 6A 0A FF  // .....N....<.uj..
    05A0: 75 18 E8 9B 05 8B EC 89 46 0C 66 C1 E8 10 89 46  // u.......F.f....F
    05B0: 14 E8 3C 08 89 4E 10 E9 D4 00 80 FF 0F 74 0E 23  // ..<..N.......t.#
    05C0: C9 0F 84 C1 00 E8 C5 05 E8 1B 06 75 2D BB 00 1C  // ...........u-...
    05D0: E8 51 2C 66 0B C0 0F 84 AC 00 E8 35 07 0B C9 0F  // .Q,f.......5....
    05E0: 84 A3 00 BE 00 1C E8 C6 01 0F 84 99 00 BE 00 1C  // ................
    05F0: B0 40 E8 23 02 E8 48 05 EB 06 E8 3E 06 E8 2D 06  // .@.#..H....>..-.
    0600: 8B EC 89 46 0C E9 86 00 3C 19 75 05 E8 00 06 EB  // ...F....<.u.....
    0610: 7D 3C 82 75 2C 80 FB 01 75 0D 8B EC BE 78 06 89  // }<.u,...u....x..
    0620: 76 00 8C 4E 10 EB 67 80 FB 05 75 15 0A FF 75 0A  // v..N..g...u...u.
    0630: E8 86 03 8B EC 89 46 14 EB 54 E8 45 03 74 3F EB  // ......F..T.E.t?.
    0640: 4D 3C 8E 75 12 80 FF 01 74 08 80 FF 02 75 2F 80  // M<.u....t....u/.
    0650: C1 02 E8 CA 03 EB 37 3C 8F 75 23 80 FF 05 75 05  // ......7<.u#...u.
    0660: E8 1C 06 EB 29 80 FF 07 75 0A E8 20 06 8B EC 88  // ....)...u.. ....
    0670: 5E 0C EB 1A 80 FF 85 75 05 E8 03 06 EB 10 8B EC  // ^......u........
    0680: C6 46 19 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4  // .F.......F....2.
    0690: 8B EC 88 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...f.f_f^f]f[fZf
    06A0: 59 66 58 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3  // YfX...Q.......Y.
    06B0: 50 32 C0 53 BB 15 00 E8 0A 25 5B 3C FF 74 04 24  // P2.S.....%[<.t.$
    06C0: 03 0A C0 58 C3 E8 E7 2B E8 A8 06 F7 C1 02 00 74  // ...X...+.......t
    06D0: 0E 06 0E 07 8D 3E 78 06 B8 02 00 E8 C1 05 07 C3  // .....>x.........
    06E0: 00 00 00 00 07 00 08 08 08 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0700: 0C 01 C3 00 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05  // ....PQ...C.3.B..
    0710: E6 42 E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8  // .B.a.....a......
    0720: 98 27 E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00  // .'.aYX...V...>..
    0730: 80 76 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC  // .v..............
    0740: C6 06 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4  // ..!..3.2........
    0750: FE C4 88 26 21 00 5E 1F C3 00 E8 76 26 75 03 E8  // ...&!.^....v&u..
    0760: 20 28 E8 B9 26 E8 83 26 E8 DD 25 E8 71 0B C3 B0  //  (..&..&..%.q...
    0770: 01 C3 BB 01 00 E8 38 24 C3 BB 01 00 E8 3B 24 C3  // ......8$.....;$.
    0780: E8 C5 27 C3 53 BB 04 00 E8 39 24 33 C0 5B C3 E8  // ..'.S....9$3.[..
    0790: 8E 27 BB 0A 00 E8 22 24 C3 BB 0A 00 E8 11 24 66  // .'...."$......$f
    07A0: 8B C8 E8 7B 27 BB 0A 00 66 2B C1 E8 0C 24 C3 E8  // ...{'...f+...$..
    07B0: 29 00 0B C9 74 22 E8 66 06 E8 FB 15 66 51 66 8B  // )...t".f....fQf.
    07C0: C8 BB 07 00 E8 E9 23 66 25 00 FE 00 00 66 0B C1  // ......#f%....f..
    07D0: E8 E7 23 66 59 0C 01 C3 32 C0 C3 E8 9D 03 0B C9  // ..#fY...2.......
    07E0: 75 0A 33 D2 E8 4F 25 8B C8 E8 A1 03 0B D1 E8 FF  // u.3..O%.........
    07F0: 05 23 CA 66 C1 E6 10 33 F6 E8 8A 0A 74 15 E8 97  // .#.f...3....t...
    0800: 0B 85 C1 74 F4 51 E8 A2 11 59 75 ED E8 89 0B 33  // ...t.Q...Yu....3
    0810: C8 EB E6 66 C1 EE 10 C3 A8 10 75 5A E8 AA 15 66  // ...f......uZ...f
    0820: C1 E6 10 33 F6 E8 5E 0A 74 24 E8 2E 0A 74 0B E8  // ...3..^.t$...t..
    0830: AB 0B 24 03 3C 03 75 ED EB 0A E8 A0 0B A8 01 74  // ..$.<.u........t
    0840: E4 E8 15 07 E8 A3 16 B5 00 E8 98 0B EB D7 E8 7C  // ...............|
    0850: 01 32 C9 33 F6 E8 72 0A E8 19 16 E8 F9 25 FE C1  // .2.3..r......%..
    0860: 38 C1 72 F1 66 C1 EE 10 E8 57 15 A8 20 75 57 A8  // 8.r.f....W.. uW.
    0870: 40 75 03 E8 36 1C E8 3E 15 0A C0 75 19 32 C9 33  // @u..6..>...u.2.3
    0880: F6 E8 46 0A 0B F6 74 05 B5 01 E8 D6 1C E8 C7 25  // ..F...t........%
    0890: FE C1 38 C1 72 EB 33 F6 E8 E0 09 74 26 E8 1D 0B  // ..8.r.3....t&...
    08A0: E8 8F 22 75 14 E8 E5 03 0A DB 74 0D E8 AA 06 E8  // .."u......t.....
    08B0: 38 16 B5 00 E8 2D 0B EB DF E8 10 16 B5 01 E8 23  // 8....-.........#
    08C0: 0B EB D5 E8 14 01 C3 E8 6C 24 C3 E8 5D 15 33 C9  // ........l$..].3.
    08D0: 33 D2 E8 B8 02 66 33 D2 66 33 C0 E8 3E 0B E8 58  // 3....f3.f3..>..X
    08E0: 00 B1 FF E8 9C 00 33 F6 E8 9B 09 74 10 E8 CD 0A  // ......3....t....
    08F0: E8 3B 22 74 03 E8 6F 16 E8 9C 16 EB EB B3 01 E8  // .;"t..o.........
    0900: 6A 02 32 C9 E8 08 03 E8 D2 24 E8 29 24 0B C0 C3  // j.2......$.)$...
    0910: E8 CC 09 E8 15 15 66 33 C0 66 BA 00 F0 00 F0 E8  // ......f3.f......
    0920: 2D 02 51 B1 01 E8 D8 02 59 33 F6 E8 58 09 74 05  // -.Q.....Y3..X.t.
    0930: E8 34 16 EB F6 E8 84 1B C3 B8 02 00 E8 29 09 74  // .4...........).t
    0940: 40 B1 07 E8 27 20 E8 31 0B A8 04 75 12 E8 A0 26  // @...' .1...u...&
    0950: 83 3D 00 75 0A E8 DE 23 83 E0 FD E8 E1 23 C3 66  // .=.u...#.....#.f
    0960: BA FF FF FB FF 66 B8 00 00 04 00 E8 AE 0A E8 D1  // .....f..........
    0970: 0C E8 0F 26 8A C8 BB 04 00 E8 34 22 8A E1 E8 39  // ...&......4"...9
    0980: 22 C3 E8 4B 22 74 31 38 E1 76 04 8A CC EB 06 38  // "..K"t18.v.....8
    0990: C1 73 02 8A C8 BB 02 00 E8 15 22 8A E1 E8 1A 22  // .s........"...."
    09A0: BB 02 00 E8 0A 22 66 C1 E8 18 A8 20 75 08 B1 04  // ....."f.... u...
    09B0: E8 BA 1F 0C 01 C3 0C 01 C3 51 E8 13 22 74 0C 8A  // .........Q.."t..
    09C0: CC BB 02 00 E8 E9 21 8A C4 8A E1 59 C3 33 F6 E8  // ......!....Y.3..
    09D0: A9 08 74 05 E8 7F 14 EB F6 C3 33 F6 E8 9C 08 74  // ..t.......3....t
    09E0: 05 E8 81 14 EB F6 C3 E8 49 25 75 1B 80 F9 01 75  // ........I%u....u
    09F0: 17 33 F6 E8 85 08 74 0C 51 E8 D0 14 B5 01 E8 E3  // .3....t.Q.......
    0A00: 09 59 EB EF E8 D3 FF C3 E8 C2 FF 33 F6 E8 6B 08  // .Y.........3..k.
    0A10: 74 0C 51 E8 51 15 B5 00 E8 C9 09 59 EB EF C3 B8  // t.Q.Q......Y....
    0A20: 02 00 E8 43 08 74 03 E8 43 1F C3 E8 0D 1B 8B C8  // ...C.t..C.......
    0A30: 66 C1 E8 10 8B D0 C3 8A C3 24 80 E8 8B 13 32 C9  // f........$....2.
    0A40: B5 10 E8 AF 1A E8 0F 24 FE C1 38 C1 72 F2 C3 E8  // .......$..8.r...
    0A50: 04 13 3B C1 7C 3A 8B C1 E8 44 13 E8 D5 1C 8B C8  // ..;.|:...D......
    0A60: 51 E8 74 13 E8 38 13 59 E8 C8 1C 3B C8 72 02 8B  // Q.t..8.Y...;.r..
    0A70: C1 8D 5C 04 E8 25 27 32 C9 B5 0F E8 76 1A E8 D6  // ..\..%'2....v...
    0A80: 23 FE C1 38 C1 72 F2 8D 5C 04 E8 97 27 0B C0 C3  // #..8.r..\...'...
    0A90: 33 C0 C3 52 E8 9C 00 8A C2 8B D1 66 C1 E2 10 8A  // 3..R.......f....
    0AA0: D0 32 C0 B9 00 02 E8 69 1C 66 C1 EA 10 8B CA 5A  // .2.....i.f.....Z
    0AB0: E8 80 00 E8 6E 27 66 C1 E8 02 0A F6 75 04 66 C1  // ....n'f.....u.f.
    0AC0: E8 02 67 26 88 07 66 C1 E8 0A 67 26 88 47 01 66  // ..g&..f...g&.G.f
    0AD0: C1 E8 0A 67 26 88 47 02 66 83 C7 04 83 C3 04 E2  // ...g&.G.f.......
    0AE0: D2 C3 51 E8 4D 00 53 67 26 8A 47 02 66 C1 E0 0A  // ..Q.M.Sg&.G.f...
    0AF0: 67 26 8A 47 01 66 C1 E0 0A 67 26 8A 07 66 C1 E0  // g&.G.f...g&..f..
    0B00: 02 0A F6 75 04 66 C1 E0 02 E8 78 26 66 83 C7 04  // ...u.f....x&f...
    0B10: 83 C3 04 E2 D2 5B 59 8A C2 8B D1 66 C1 E2 10 8A  // .....[Y....f....
    0B20: D0 B9 00 03 53 E8 EA 1B 5B E8 2B 23 FE C1 38 C1  // ....S...[.+#..8.
    0B30: 72 F2 C3 BB 00 18 33 C0 8A C2 C1 E0 02 03 D8 C3  // r.....3.........
    0B40: 53 BB 03 00 E8 69 20 66 25 FF 0F FF 0F 5B C3 53  // S....i f%....[.S
    0B50: 66 50 66 51 66 8B C8 BB 03 00 E8 53 20 66 23 C2  // fPfQf......S f#.
    0B60: 66 0B C1 E8 54 20 66 59 66 58 5B C3 B8 2C 06 F6  // f...T fYfX[..,..
    0B70: C3 01 75 03 B8 0C 06 E8 37 00 C3 BB 05 00 E8 2F  // ..u.....7....../
    0B80: 20 25 FF 0F 8B C8 66 C1 E0 10 8B D0 C3 E8 A6 21  //  %....f........!
    0B90: 23 C8 81 E2 15 01 23 D1 66 C1 E2 10 8B D1 BB 05  // #.....#.f.......
    0BA0: 00 E8 0C 20 66 25 00 F0 EA FE 66 0B C2 E8 0A 20  // ... f%....f.... 
    0BB0: C3 66 50 53 51 66 52 66 33 D2 33 DB 8A DC 8A E8  // .fPSQfRf3.3.....
    0BC0: 8A C8 80 E1 1F 66 BA 01 00 00 00 66 D3 E2 E8 DF  // .....f.....f....
    0BD0: 1F 66 0B C2 F6 C5 20 75 03 66 33 C2 E8 DB 1F 66  // .f.... u.f3....f
    0BE0: 5A 59 5B 66 58 C3 66 50 53 BB 06 00 E8 C1 1F A8  // ZY[fX.fPS.......
    0BF0: 10 75 09 BB F0 16 E8 2B 26 3D 5A A5 5B 66 58 C3  // .u.....+&=Z.[fX.
    0C00: B8 04 06 80 F1 01 C0 E1 05 0A C1 E8 A3 FF C3 53  // ...............S
    0C10: 66 50 BB F8 16 E8 0C 26 8A C1 E8 67 25 66 58 5B  // fP.....&...g%fX[
    0C20: C3 53 BB F8 16 E8 FC 25 83 E0 01 5B C3 BB 06 00  // .S.....%...[....
    0C30: E8 7D 1F 66 C1 E8 10 25 FF 0F C3 BB 06 00 E8 6F  // .}.f...%.......o
    0C40: 1F 66 25 FF FF 00 F0 66 C1 E2 10 66 0B C2 E8 69  // .f%....f...f...i
    0C50: 1F C3 53 66 50 BB 07 00 E8 55 1F F6 C4 01 66 58  // ..SfP....U....fX
    0C60: B0 06 74 02 B0 08 5B C3 53 BB 07 00 E8 41 1F 80  // ..t...[.S....A..
    0C70: E4 FE 80 FD 06 74 03 80 CC 01 E8 3D 1F 5B C3 53  // .....t.....=.[.S
    0C80: B8 06 06 C0 E3 05 0A C3 E8 26 FF 5B C3 66 50 BB  // .........&.[.fP.
    0C90: 06 00 E8 1B 1F 24 40 C0 E8 06 8A D8 66 58 C3 57  // .....$@.....fX.W
    0CA0: 66 50 66 33 C0 B9 08 00 FC F3 66 AB 66 58 5F E8  // fPf3......f.fX_.
    0CB0: 3E 01 0B C0 75 09 E8 E3 05 74 3C 85 C1 74 F7 E8  // >...u....t<..t..
    0CC0: A6 05 8D 9C 6A 01 E8 5B 25 26 89 05 8D 9C 6E 01  // ....j..[%&....n.
    0CD0: E8 51 25 26 89 45 02 8D 9C B5 02 E8 46 25 02 C0  // .Q%&.E......F%..
    0CE0: 04 04 26 88 45 06 26 88 45 07 26 88 45 08 B0 07  // ..&.E.&.E.&.E...
    0CF0: 26 88 45 04 0A C0 C3 32 C0 C3 C3 66 50 53 51 52  // &.E....2...fPSQR
    0D00: 56 57 E8 E1 FE 74 03 E8 D5 05 5F 5E 5A 59 5B 66  // VW...t...._^ZY[f
    0D10: 58 C3 33 C9 E8 1C 22 75 48 66 BA FF FF 0C FF 66  // X.3..."uHf.....f
    0D20: 33 C0 E8 F7 06 33 F6 E8 5C 05 74 18 E8 69 06 A9  // 3....3..\.t..i..
    0D30: C8 0E 74 F3 E8 43 07 A8 04 75 04 A8 18 74 E8 E8  // ..t..C...u...t..
    0D40: 7B 00 EB E3 E8 2C 00 75 03 E8 A4 00 33 F6 E8 35  // {....,.u....3..5
    0D50: 05 74 0E E8 42 06 85 C1 74 F4 51 E8 F9 07 59 EB  // .t..B...t.Q...Y.
    0D60: ED C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8  // ...](f....\(.I..
    0D70: 0C 21 C3 66 50 53 52 56 33 C9 33 D2 8D 36 4C 0D  // .!.fPSRV3.3..6L.
    0D80: E8 B6 06 A8 03 74 03 83 CA 01 66 C1 E8 10 8A 0C  // .....t....f.....
    0D90: 80 F9 FF 74 15 66 A9 01 00 00 00 74 07 BB 01 00  // ...t.f.....t....
    0DA0: D3 E3 0B D3 66 D1 E8 46 EB E4 8B CA 0B C9 5E 5A  // ....f..F......^Z
    0DB0: 5B 66 58 C3 03 07 01 05 06 09 0A 0B FF 66 50 53  // [fX..........fPS
    0DC0: 51 E8 D4 05 0F BC D8 81 C3 7C 0D 8A 0F 66 B8 01  // Q........|...f..
    0DD0: 00 00 00 66 D3 E0 66 BA FF FF FF FF E8 3D 06 59  // ...f..f......=.Y
    0DE0: 5B 66 58 C3 01 12 0B 10 09 13 14 11 0C 15 16 17  // [fX.............
    0DF0: 50 53 52 E8 7D FF 75 13 B9 01 00 E8 38 1F 23 C8  // PSR.}.u.....8.#.
    0E00: 75 19 33 C0 E8 95 04 8B C8 EB 10 83 F9 02 74 0B  // u.3...........t.
    0E10: E8 7A FE 80 FB 01 75 03 83 E1 FD 5A 5B 58 C3 56  // .z....u....Z[X.V
    0E20: 83 EC 04 8B EC 66 33 C0 66 89 46 00 66 BA 00 F0  // .....f3.f.F.f...
    0E30: 00 F0 E8 1A FD 66 C1 E6 10 E8 60 04 0B C0 74 1E  // .....f....`...t.
    0E40: 85 C1 74 F5 55 E8 56 00 5D 74 04 33 C8 EB EA E8  // ..t.U.V.]t.3....
    0E50: BB 05 66 3B 56 00 76 E1 66 89 56 00 EB DB E8 DF  // ..f;V.v.f.V.....
    0E60: FC 74 07 66 8B 46 00 E8 05 00 83 C4 04 5E C3 33  // .t.f.F.......^.3
    0E70: F6 66 50 E8 05 04 66 58 8D 9C D8 02 E8 05 23 66  // .fP...fX......#f
    0E80: 8B D0 E8 BB FC E8 DD 18 8D 9C 1C 03 E8 95 23 38  // ..............#8
    0E90: D0 74 0A 8A C2 E8 EC 22 B0 02 E8 5F 05 C3 50 51  // .t....."..._..PQ
    0EA0: E8 C5 03 32 C0 E8 54 05 E8 3A 03 E8 AB 00 8D 9C  // ...2..T..:......
    0EB0: 40 03 E8 6F 23 38 E8 74 0A 8A C5 E8 C6 22 B0 02  // @..o#8.t....."..
    0EC0: E8 39 05 E8 BD 00 E8 D8 00 75 73 E8 9E 00 8D 9C  // .9.......us.....
    0ED0: 4C 01 E8 4F 23 8B C8 8B D3 8D 9C 00 03 E8 44 23  // L..O#.........D#
    0EE0: 3B C1 74 05 B0 02 E8 13 05 E8 65 0A 8D 9C 00 03  // ;.t.......e.....
    0EF0: E8 4F 18 8D 9C D8 02 E8 8A 22 66 C1 CE 10 8B FE  // .O......."f.....
    0F00: 66 C1 CE 10 E8 C9 00 E8 FF 00 E8 94 04 8A E9 8D  // f...............
    0F10: 9C DC 02 32 C9 E8 B0 22 E8 7D 04 66 25 FF 0F 00  // ...2...".}.f%...
    0F20: 00 E8 F9 03 80 F9 01 75 04 66 C1 E0 10 59 58 66  // .......u.f...YXf
    0F30: BA FF FF FF FF 66 33 D0 E8 14 FC 33 D2 C3 E8 05  // .....f3....3....
    0F40: 00 0C 01 59 58 C3 53 66 50 8D 9C D4 02 E8 D4 22  // ...YX.SfP......"
    0F50: 8A C4 E8 2F 22 66 58 5B C3 53 66 50 8D 9C D4 02  // .../"fX[.SfP....
    0F60: E8 C1 22 8A E0 E8 1C 22 66 58 5B C3 E8 CE 03 E8  // .."...."fX[.....
    0F70: 91 03 8A DD E8 6B 19 8D 9C 3C 03 8A E9 32 C9 E8  // .....k...<...2..
    0F80: 46 22 C3 83 EC 08 8B EC E8 B2 03 E8 75 03 E8 FF  // F"..........u...
    0F90: 18 8A 6E 00 8D 9C 4C 03 32 C9 E8 2B 22 83 C4 08  // ..n...L.2..+"...
    0FA0: C3 33 C9 56 E8 23 03 0B F6 5E 74 0C FE C1 E8 A6  // .3.V.#...^t.....
    0FB0: 1E 38 C1 75 EE 0C 01 C3 8D 9C D4 02 E8 65 22 38  // .8.u.........e"8
    0FC0: C8 74 0A 8A C1 E8 BC 21 B0 02 E8 2F 04 32 C0 C3  // .t.....!.../.2..
    0FD0: E8 0A 00 8D 9C D0 02 32 C9 E8 EC 21 C3 8D 1D E8  // .......2...!....
    0FE0: 42 22 66 8B D0 8D 9C 02 03 E8 38 22 51 8B C8 8D  // B"f.......8"Q...
    0FF0: 9C 06 03 E8 2E 22 66 C1 E0 10 8B C1 59 66 3B C2  // ....."f.....Yf;.
    1000: 75 04 B5 00 EB 02 B5 02 C3 E8 6D 03 8D 9C 40 03  // u.........m...@.
    1010: B1 03 E8 B3 21 E8 B2 06 8D 9C 40 03 B1 02 E8 A7  // ....!.....@.....
    1020: 21 E8 DF 02 80 FD 00 75 1D E8 94 00 66 81 FA F0  // !......u....f...
    1030: D2 00 00 75 06 66 BA 78 69 00 00 E8 B6 00 E8 EF  // ...u.f.xi.......
    1040: 00 E8 AB 03 EB 38 E8 81 03 E8 A3 03 66 52 E8 F7  // .....8......fR..
    1050: 02 0B D2 74 07 E8 82 18 66 5A EB 22 E8 5E 03 E8  // ...t....fZ.".^..
    1060: 00 1B 66 5A 51 E8 9B 02 80 FD 02 59 75 10 B5 04  // ..fZQ......Yu...
    1070: 66 81 FA 74 40 00 00 76 05 B5 08 66 D1 EA 8D 9C  // f..t@..v...f....
    1080: 54 03 66 8B C2 E8 FC 20 8D 9C 40 03 E8 95 21 8A  // T.f.... ..@...!.
    1090: E5 E8 F0 20 E8 1E 01 8D 9C 48 03 32 C9 E8 28 21  // ... .....H.2..(!
    10A0: E8 9A 02 E8 5D 02 E8 34 18 8D 9C 58 03 32 C9 E8  // ....]..4...X.2..
    10B0: 16 21 E8 88 02 E8 4B 02 8D 9C 60 03 E8 EC 17 C3  // .!....K...`.....
    10C0: 53 8D 9C 29 01 E8 5C 21 66 33 D2 0A C0 75 05 BA  // S..)..\!f3...u..
    10D0: 48 3F 5B C3 8A D0 66 B8 8C 0A 00 00 66 F7 E2 66  // H?[...f.....f..f
    10E0: 8B F8 E8 58 02 B3 00 E8 3F 17 66 3B D7 76 03 66  // ...X....?.f;.v.f
    10F0: 8B D7 5B C3 B7 01 53 8D 9C 42 03 E8 26 21 8A C8  // ..[...S..B..&!..
    1100: 5B 66 52 E8 83 00 E8 C1 02 66 3B D1 66 5A 76 09  // [fR......f;.fZv.
    1110: D0 E7 E8 07 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A  // .....8.r....S..*
    1120: 01 E8 00 21 24 0F 8A E8 0A ED 75 02 B5 01 5B C3  // ...!$.....u...[.
    1130: 51 83 EC 08 8B EC 66 C7 46 00 48 3F 78 69 66 C7  // Q.....f.F.H?xif.
    1140: 46 04 F0 D2 00 00 E8 FF 01 0B D2 74 03 E8 9B 17  // F..........t....
    1150: 8A FD 53 8D 9C 42 03 E8 CA 20 8A C8 5B E8 60 FF  // ..S..B... ..[.`.
    1160: 66 33 C0 8B 46 00 66 3B C2 73 19 66 8B D0 E8 18  // f3..F.f;.s.f....
    1170: 00 E8 56 02 66 3B D1 72 05 83 C5 02 EB D4 66 33  // ..V.f;.r......f3
    1180: D2 8B 56 00 83 C4 08 59 C3 66 52 52 32 ED 83 C1  // ..V....Y.fRR2...
    1190: 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66 33 C0  // ......f3...ZQf3.
    11A0: 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66  // ....f..f...Yf..f
    11B0: 8B C8 66 5A C3 E8 90 01 0B D2 74 0B E8 16 00 0A  // ..fZ......t.....
    11C0: ED 75 11 E8 B8 16 C3 B5 00 E8 F1 01 E8 5F 19 75  // .u..........._.u
    11D0: 03 E8 01 00 C3 B5 00 8D 9C 31 01 E8 46 20 A8 01  // .........1..F ..
    11E0: 74 02 B5 01 C3 53 E8 5F 01 66 C1 E2 10 E8 4D 01  // t....S._.f....M.
    11F0: 8D 9C B8 02 E8 2D 20 8A E8 E8 5F 16 8A EB 5B C3  // .....- ..._...[.
    1200: 57 53 53 E8 DF FF E8 34 01 5B E8 A2 16 74 49 80  // WSS....4.[...tI.
    1210: FD 00 75 24 53 E8 A8 FE E8 AF 04 8A CD E8 FC FE  // ..u$S...........
    1220: 8A FD E8 64 FF 5B E8 FB 1F 66 25 FF FF 00 00 66  // ...d.[...f%....f
    1230: 3B C8 73 21 32 DB EB 20 80 FD 02 75 18 53 E8 7C  // ;.s!2.. ...u.S.|
    1240: 01 E8 FB 18 5B 74 0E 8D 1D E8 D8 1F 3D 74 40 76  // ....[t......=t@v
    1250: 04 32 DB EB 03 80 CB 01 5B 5F C3 53 E8 39 01 8B  // .2......[_.S.9..
    1260: D8 E8 DC F8 85 C3 5B C3 53 8B F0 E8 C8 1A 23 F0  // ......[.S.....#.
    1270: 74 07 8B C6 E8 69 19 8B F3 5B C3 E8 08 00 74 05  // t....i...[....t.
    1280: E8 D8 FF 74 F6 C3 33 C0 0B F6 74 03 E8 09 01 33  // ...t..3...t....3
    1290: F6 E8 08 00 74 03 E8 CF FF 0B F6 C3 57 53 E8 E0  // ....t.......WS..
    12A0: 1A 0B C0 74 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D  // ...t......;.u...
    12B0: 83 FB FF 74 0E 83 C7 02 E8 7B 1A 85 D8 74 EF 8B  // ...t.....{...t..
    12C0: C3 EB 02 33 C0 0B C0 5B 5F C3 51 33 F6 8A E9 E8  // ...3...[_.Q3....
    12D0: A9 FF 74 07 E8 46 00 38 E9 75 F4 0B F6 59 C3 33  // ..t..F.8.u...Y.3
    12E0: C0 E8 B8 FF 74 13 E8 7F FF 8B DE B9 FB 00 E8 78  // ....t..........x
    12F0: 1B 83 C6 08 E8 C2 19 EB E8 BB F0 16 B8 5A A5 E8  // .............Z..
    1300: 9A 1E C3 53 66 50 8D 9C 40 03 E8 17 1F 8A E8 66  // ...SfP..@......f
    1310: 58 5B C3 8D 9C 64 03 E8 0A 1F 0B C0 C3 53 66 50  // X[...d.......SfP
    1320: 8D 9C D4 02 E8 FD 1E 8A C8 66 58 5B C3 53 66 50  // .........fX[.SfP
    1330: 8D 9C D5 02 E8 ED 1E 8A C8 66 58 5B C3 53 8D 5C  // .........fX[.S.\
    1340: 14 E8 E0 1E 8B D0 5B C3 53 66 50 8D 5C 16 E8 D3  // ......[.SfP.\...
    1350: 1E 8B D0 66 58 5B C3 53 66 50 8D 9C 50 03 E8 C3  // ...fX[.SfP..P...
    1360: 1E 66 8B D0 66 58 5B C3 53 66 50 8D 9C 54 03 E8  // .f..fX[.SfP..T..
    1370: B2 1E 66 8B D0 66 58 5B C3 53 66 50 8D 5C 10 E8  // ..f..fX[.SfP.\..
    1380: A2 1E 8B C8 66 58 5B C3 66 50 53 8D 9C 41 03 E8  // ....fX[.fPS..A..
    1390: 92 1E 5B 8A D8 66 58 C3 53 8D 5C 08 E8 85 1E 5B  // ..[..fX.S.\....[
    13A0: C3 53 50 8D 9C 4C 03 E8 7A 1E 8A C8 58 5B C3 53  // .SP..L..z...X[.S
    13B0: 50 8D 9C 4D 03 E8 6C 1E 8A C8 58 5B C3 53 50 8D  // P..M..l...X[.SP.
    13C0: 5C 0C E8 5F 1E 8B D0 58 5B C3 53 66 50 8D 9C 00  // \.._...X[.SfP...
    13D0: 03 E8 50 1E 66 33 D2 8B D0 66 58 5B C3 8D 5C 04  // ..P.f3...fX[..\.
    13E0: E8 41 1E C3 51 8D 5C 04 32 C9 E8 DB 1D 59 C3 8D  // .A..Q.\.2....Y..
    13F0: 9C 50 03 E8 2E 1E 8B C2 E8 89 1D C3 53 51 8A E8  // .P..........SQ..
    1400: E8 DA FF 24 FD 0A E8 E8 DA FF 59 5B C3 66 50 8D  // ...$......Y[.fP.
    1410: 9C D8 02 E8 0E 1E 66 8B D0 66 58 C3 53 66 50 66  // ......f..fX.SfPf
    1420: 51 66 8B C8 BB 00 00 E8 86 17 66 23 C2 66 0B C1  // Qf........f#.f..
    1430: E8 87 17 66 59 66 58 5B C3 BB 00 00 E8 71 17 66  // ...fYfX[.....q.f
    1440: 25 03 03 FF 00 C3 57 0B C0 75 10 33 F6 E8 36 FE  // %.....W..u.3..6.
    1450: 74 26 E8 25 00 A8 04 74 F4 EB 13 8B C8 E8 D6 18  // t&.%...t........
    1460: 23 C1 74 14 E8 01 FE E8 10 00 A8 04 74 0A 5F 8D  // #.t.........t._.
    1470: 5C 28 E8 2D 05 0B F6 C3 5F C3 E8 FC FE 0A C9 74  // \(.-...._......t
    1480: 72 E8 39 FF E8 B4 16 74 30 0A ED 74 10 8A CD B5  // r.9....t0..t....
    1490: 02 E8 A0 19 B1 02 8D 9C 48 01 E8 2B 1D E8 34 02  // ........H..+..4.
    14A0: A8 04 74 15 8D 5C 28 E8 56 00 74 0D E8 0E FF E8  // ..t..\(.V.t.....
    14B0: 80 16 74 3F 80 FD 02 74 3A 8D 5C 28 E8 38 00 E8  // ..t?...t:.\(.8..
    14C0: 20 0B 33 C9 50 8D 9C 28 01 E8 58 1D 66 0B C0 74  //  .3.P..(..X.f..t
    14D0: 03 B9 00 08 58 0A C0 75 13 8D 5C 28 E8 3F 00 75  // ....X..u..\(.?.u
    14E0: 0B 80 CD 02 E8 19 00 74 03 80 CD 04 8D 9C 48 01  // .......t......H.
    14F0: E8 D5 1C E8 DE 01 C3 51 B9 49 00 E8 6B 19 59 C3  // .......Q.I..k.Y.
    1500: 51 E8 1A 00 75 14 E8 9C 01 3C 01 75 0D B9 20 00  // Q...u....<.u.. .
    1510: E8 27 00 75 05 80 C9 01 EB 02 33 C9 59 C3 53 E8  // .'.u......3.Y.S.
    1520: 02 1D 66 3D 00 FF FF FF 75 0E 83 C3 04 E8 F4 1C  // ..f=....u.......
    1530: 66 3D FF FF FF 00 75 00 5B C3 50 52 32 D2 E8 E3  // f=....u.[.PR2...
    1540: 1C 02 D0 02 D4 66 C1 E8 10 02 D0 02 D4 83 C3 04  // .....f..........
    1550: E2 EC 0A D2 5A 58 C3 8D 9C 4C 01 E8 1F 01 E8 73  // ....ZX...L.....s
    1560: 01 B5 13 A8 08 75 0C E8 53 FE 8A EA 80 FD 13 75  // .....u..S......u
    1570: 02 B5 03 8D 9C B8 02 66 33 C0 8A C5 E8 05 1C E8  // .......f3.......
    1580: 16 FE A9 11 00 74 37 B5 01 E8 22 01 E8 45 01 A8  // .....t7..."..E..
    1590: 04 75 17 55 BD 00 00 B8 61 40 E8 F0 02 B8 45 40  // .u.U....a@....E@
    15A0: E8 EA 02 5D B5 02 E8 8A 00 C3 E8 2F 01 B5 02 8D  // ...]......./....
    15B0: 5C 28 E8 DD 00 75 02 B5 01 E8 77 00 EB 67 A9 C8  // \(...u....w..g..
    15C0: 0E 74 3E E8 0E 01 A8 08 74 08 8D 5C 28 E8 B4 00  // .t>.....t..\(...
    15D0: 74 B5 B5 02 E8 D7 00 E8 FA 00 A8 04 74 0B 8D 5C  // t...........t..\
    15E0: 28 E8 F8 00 E8 F8 02 EB 0A 8D 9C 68 01 B8 3C 6A  // (..........h..<j
    15F0: E8 60 05 E8 D4 00 80 FD 00 75 37 B5 02 E8 C0 00  // .`.......u7.....
    1600: C3 A9 22 00 74 2C B5 04 E8 A3 00 8D 9C 68 01 56  // ..".t,.......h.V
    1610: E8 DD 19 8B F7 E8 58 03 5E E8 85 19 E8 A1 00 8D  // ......X.^.......
    1620: 5C 28 E8 AB 19 8D 9C 68 01 E8 4F 03 66 8B D1 E8  // \(.....h..O.f...
    1630: C0 07 C3 8D 9C B4 02 B1 02 E8 8C 1B B5 02 E8 7F  // ................
    1640: 00 C3 8D 9C 4C 01 E8 34 00 E8 88 00 A8 04 74 23  // ....L..4......t#
    1650: 8D 5C 28 E8 86 00 E8 97 19 8D 9C 68 01 06 0E 07  // .\(........h....
    1660: B9 07 00 E8 3D 18 07 E8 60 00 E8 50 FD 8D 5C 28  // ....=...`..P..\(
    1670: E8 88 19 8D 5C 28 E8 37 19 E8 DB FE C3 B9 61 00  // ....\(.7......a.
    1680: E8 E6 17 C3 53 81 C3 05 01 E8 98 1B 24 06 3C 02  // ....S.......$.<.
    1690: 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18 E8 83  // [....=..u.S.....
    16A0: 1B 5B A8 01 C3 53 83 C3 12 E8 78 1B 5B C3 8D 9C  // .[...S....x.[...
    16B0: B4 02 32 C9 E8 11 1B C3 8D 9C B4 02 E8 65 1B C3  // ..2..........e..
    16C0: 8D 9C B4 02 B1 01 E8 FF 1A C3 8D 9C B4 02 B1 01  // ................
    16D0: E8 0D 1B C3 8D 9C 48 01 E8 49 1B C3 55 57 51 B9  // ......H..I..UWQ.
    16E0: 08 00 BD 00 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8  // ........+....XN.
    16F0: 32 1B E8 98 01 E2 EE 8D 5C 4B E8 27 1B B9 04 00  // 2.......\K.'....
    1700: 8B D0 BF 01 17 85 55 06 74 17 66 8B 05 8D 9A F4  // ......U.t.f.....
    1710: 01 E8 70 1A 8B 45 04 8D 9A F8 01 E8 7E 1A 83 C5  // ..p..E......~...
    1720: 08 83 C7 08 E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF  // .......|^...3...
    1730: E8 F1 1A 0B C0 74 09 E8 12 01 E8 4C 00 83 C5 1C  // .....t.....L....
    1740: 83 C7 12 E2 E9 32 ED E8 76 FF 8D 5C 28 E8 55 FF  // .....2..v..\(.U.
    1750: 3D 01 04 75 10 83 C3 14 E8 C9 1A 24 70 C0 E8 04  // =..u.......$p...
    1760: 8A E8 E8 5B FF 59 5F 5D C3 20 03 58 02 3C 00 01  // ...[.Y_]. .X.<..
    1770: 00 00 04 00 03 3C 00 00 08 00 05 00 04 4B 00 00  // .....<.......K..
    1780: 01 80 02 E0 01 3C 00 20 00 51 8D 1D E8 95 1A 8D  // .....<. .Q......
    1790: 9A 68 01 E8 06 1A 8D 5D 02 E8 88 1A 8D 9A 6A 01  // .h.....]......j.
    17A0: E8 89 00 8D 5D 05 E8 7B 1A 8D 9A 6E 01 E8 7C 00  // ....]..{...n..|.
    17B0: 8D 5D 08 E8 6E 1A 8B C8 8A DC 66 C1 C8 10 8A D0  // .]..n.....f.....
    17C0: 80 E2 0F 8A F0 C0 EE 04 8A EC C0 E5 06 8A FC C0  // ................
    17D0: E7 04 80 E7 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F  // ...............?
    17E0: 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A 74 01 E8 AB  // ............t...
    17F0: 19 8D 9A 72 01 8B C1 E8 A2 19 8D 9A 76 01 33 C0  // ...r........v.3.
    1800: 8A C6 E8 97 19 8D 9A 78 01 33 C0 8A C2 E8 8C 19  // .......x.3......
    1810: 8D 5D 0C E8 0E 1A 8D 9A 7A 01 E8 0F 00 8D 5D 0F  // .]......z.....].
    1820: E8 01 1A 8D 9A 7E 01 E8 72 19 59 C3 8B C8 8A D4  // .....~..r.Y.....
    1830: 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1  // f...............
    1840: E8 59 19 83 C3 02 8B C2 E8 51 19 C3 8D 5D 11 E8  // .Y.......Q...]..
    1850: D2 19 8A E0 BA 06 02 C0 E8 07 74 03 80 CA 80 8A  // ..........t.....
    1860: C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40 3C 03 75  // ....$.<.u...@<.u
    1870: 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8 02 74 03  // .......t......t.
    1880: 80 E2 FB 8B C2 8D 9A 80 01 E8 10 19 C3 3C 01 74  // .............<.t
    1890: 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A F8 01 E8 FB  // =.....$?.<......
    18A0: 18 0F B6 C2 83 C0 1F C1 E0 03 8D 9A F4 01 E8 EB  // ................
    18B0: 18 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7 69 18 2E  // .............i..
    18C0: F7 B7 67 18 8D 9A F6 01 E8 D1 18 83 C5 08 C3 01  // ..g.............
    18D0: 00 01 00 04 00 03 00 05 00 04 00 10 00 09 00 57  // ...............W
    18E0: 8D 9C 68 01 8B FB 8B DF E8 90 00 0B C9 74 44 8D  // ..h..........tD.
    18F0: 5D 18 E8 2F 19 A8 80 74 0D 8B DF 56 8D 36 CD 18  // ]../...t...V.6..
    1900: E8 6D 00 5E EB 28 66 8B D1 E8 E6 04 8D 9C A6 00  // .m.^.(f.........
    1910: E8 11 19 3C 01 75 17 66 81 F9 80 07 38 04 74 09  // ...<.u.f....8.t.
    1920: 66 81 F9 00 05 D0 02 75 05 B5 03 E8 80 FD 83 C7  // f......u........
    1930: 1C EB B3 5F C3 8C 0A D0 02 8A 00 E0 01 2D 00 10  // ..._.........-..
    1940: 00 3E 00 09 00 06 00 00 00 00 00 00 00 06 00 00  // .>..............
    1950: 00 50 53 51 B9 07 00 53 8B DA E8 C7 18 83 F8 00  // .PSQ...S........
    1960: 5B 74 09 66 C1 E3 10 8B DA E8 12 15 59 5B 58 C3  // [t.f........Y[X.
    1970: 51 53 B9 07 00 E8 1F 15 5B 59 C3 66 50 53 83 C3  // QS......[Y.fPS..
    1980: 06 E8 A0 18 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8  // ....[..f...S....
    1990: 92 18 8B C8 5B 66 58 C3 8D 9C 48 01 32 C9 E8 27  // ....[fX...H.2..'
    19A0: 18 C3 57 B9 20 00 E8 FA 14 5F C3 E8 0A FD 3C 01  // ..W. ...._....<.
    19B0: 75 57 8D 9C B6 02 E8 6B 18 A8 02 74 71 66 C1 CE  // uW.....k...tqf..
    19C0: 10 E8 F3 03 66 C1 CE 10 0A C0 75 0E 8D 9C 4C 01  // ....f.....u...L.
    19D0: B8 3C 6A E8 7D 01 0C 01 EB 7A 8D 9C 68 01 B0 00  // .<j.}....z..h...
    19E0: E8 36 01 75 07 B0 00 E8 DF 00 74 68 8D 9C 68 01  // .6.u......th..h.
    19F0: B0 01 E8 24 01 75 52 B0 01 E8 B0 00 75 56 B0 00  // ...$.uR.....uV..
    1A00: E8 A9 00 EB 4F 0B F6 EB 4B 3C 04 74 21 3C 03 74  // ....O...K<.t!<.t
    1A10: 1D 66 C1 CE 10 E8 9F 03 66 C1 CE 10 0A C0 74 07  // .f......f.....t.
    1A20: B0 01 E8 A4 00 75 2D B0 00 E8 9D 00 75 26 8D BC  // .....u-.....u&..
    1A30: 68 01 8D 1D E8 ED 17 0B C0 74 19 8B DF B0 00 E8  // h........t......
    1A40: D7 00 75 05 83 C7 1C EB E9 8B D3 8D 9C 4C 01 E8  // ..u..........L..
    1A50: FF FE 0B F6 C3 57 53 51 E8 44 13 3B 55 02 75 18  // .....WSQ.D.;U.u.
    1A60: 66 C1 CA 10 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A  // f.....f...;].u..
    1A70: C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB  // .t.:E.t......3..
    1A80: 02 8B D7 0B D2 59 5B 5F C3 51 66 52 E8 10 13 3A  // .....Y[_.QfR...:
    1A90: 65 1A 75 09 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C  // e.u...t.:E.t....
    1AA0: E2 ED 33 FF EB 00 0B FF 66 5A 59 C3 51 E8 EF 12  // ..3.....fZY.Q...
    1AB0: 56 8D 9C 4C 01 8B F7 E8 B6 FE 5E E8 5B 00 75 07  // V..L......^.[.u.
    1AC0: 83 C7 1C E2 EB 33 FF 59 C3 8D BC F4 01 8A C8 8D  // .....3.Y........
    1AD0: 1D E8 50 17 0B C0 74 40 66 50 E8 DB FB 3C 01 66  // ..P...t@fP...<.f
    1AE0: 58 74 05 3D 40 06 73 2B 66 8B D0 8D 5D 04 E8 33  // Xt.=@.s+f...]..3
    1AF0: 17 E8 61 FF 74 1D 8D 9C 4C 01 56 8B F2 E8 70 FE  // ..a.t...L.V...p.
    1B00: 5E 53 8D 9C 62 01 33 C0 E8 91 16 5B 8A C1 E8 08  // ^S..b.3....[....
    1B10: 00 75 05 83 C7 08 EB B7 C3 66 51 50 53 66 C1 CE  // .u.......fQPSf..
    1B20: 10 8B DE 66 C1 CE 10 E8 FA 16 5B 66 8B D0 E8 4A  // ...f......[f...J
    1B30: FE 58 3C 01 75 0A 66 3B CA 75 13 E8 C2 F6 75 10  // .X<.u.f;.u....u.
    1B40: 3B CA 72 0A 66 3B CA 72 05 E8 B4 F6 75 02 32 C0  // ;.r.f;.r....u.2.
    1B50: 66 59 C3 56 57 E8 31 FF 8B F7 E8 13 FE 5F 5E C3  // fY.VW.1......_^.
    1B60: 66 50 53 66 51 52 57 56 51 8B DE B9 08 00 E8 F8  // fPSfQRWVQ.......
    1B70: 12 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8 04 16  // .Y.\...f........
    1B80: F6 C2 03 75 24 8B C1 24 7F BF 43 1C 80 3D FF 0F  // ...u$..$..C..=..
    1B90: 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00 05 02  // ...:.u.f.E.f....
    1BA0: 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25 8B C1  // ............t%..
    1BB0: E8 61 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A C0 75  // .a.....3.......u
    1BC0: 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08 E8 B3  // ..\.f%....f.....
    1BD0: 15 EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0  // ................
    1BE0: C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73 25 80  // .......pr*..us%.
    1BF0: EC 70 8A C4 32 E4 50 E8 21 02 8B D8 58 38 D8 72  // .p..2.P.!...X8.r
    1C00: 05 33 C0 E9 9C 00 E8 19 02 E8 18 16 0B C0 0F 84  // .3..............
    1C10: 90 00 EB 1B 32 C0 E8 70 FE 0F 84 85 00 8D 5C 16  // ....2..p......\.
    1C20: 8B 05 E8 77 15 8B 45 06 66 C1 E0 10 8B 45 02 50  // ...w..E.f....E.P
    1C30: E8 00 0B 66 C1 E1 10 8B C8 58 8D 1C E8 45 15 66  // ...f.....X...E.f
    1C40: 50 8D 5C 04 66 8B C1 E8 3A 15 66 58 66 C1 E8 10  // P.\.f...:.fXf...
    1C50: 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C 06 E8  // f......f..fP.\..
    1C60: C2 15 8B C8 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C  // ....fXf..f...@.\
    1C70: 14 E8 28 15 BF 94 1C 83 F9 01 74 11 BF 9C 1C 81  // ..(.......t.....
    1C80: F9 01 01 74 08 BF A4 1C 83 F9 02 75 15 8D 5C 0C  // ...t.......u..\.
    1C90: 66 8B 05 E8 EE 14 8D 5C 10 66 8B 45 04 E8 E4 14  // f......\.f.E....
    1CA0: 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01 90 01  // ..^_ZfY[fX..@...
    1CB0: 01 40 01 90 01 02 80 02 90 01 03 80 02 90 01 04  // .@..............
    1CC0: 40 01 90 01 05 40 01 90 01 06 80 02 90 01 07 D0  // @....@..........
    1CD0: 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F 80 02  // .^..@...........
    1CE0: 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80 02 E0  // ^....^..........
    1CF0: 01 13 80 02 90 01 62 80 02 E0 01 FF 05 0A 05 05  // ......b.........
    1D00: 05 00 00 00 05 0B 06 05 05 00 00 00 08 10 08 08  // ................
    1D10: 08 00 00 00 56 E8 77 12 80 E4 01 3B 04 74 09 83  // ....V.w....;.t..
    1D20: C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3 57  // ....3....D...^.W
    1D30: 53 50 E8 5A 12 83 E9 0A E8 E0 00 83 F8 05 76 03  // SP.Z..........v.
    1D40: B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF  // ................
    1D50: FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8 77  // ..X[_.fSQfR.A..w
    1D60: 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03 66  // .f...f...f.....f
    1D70: D3 E8 66 33 D2 66 F7 F3 E8 B8 09 66 5A 59 66 5B  // ..f3.f.....fZYf[
    1D80: C3 53 66 50 BB 07 00 E8 26 0E 0A C0 66 58 5B C3  // .SfP....&...fX[.
    1D90: 53 66 50 BB 07 00 E8 17 0E A8 01 66 58 5B C3 53  // SfP........fX[.S
    1DA0: 66 50 8D 5C 06 E8 7C 14 8A C8 66 58 5B C3 51 B9  // fP.\..|...fX[.Q.
    1DB0: 08 00 E8 C9 10 59 C3 53 8D 5C 08 E8 66 14 24 03  // .....Y.S.\..f.$.
    1DC0: 5B C3 8D 5C 09 E8 5C 14 C3 51 53 B1 01 8A E8 8D  // [..\..\..QS.....
    1DD0: 5C 08 E8 F3 13 5B 59 C3 53 8D 1C E8 46 14 5B C3  // \....[Y.S...F.[.
    1DE0: 53 8D 5C 04 E8 3D 14 5B C3 53 8D 5C 16 E8 34 14  // S.\..=.[.S.\..4.
    1DF0: 5B C3 53 66 52 33 C0 E8 5B FC 66 5A 75 1B E8 34  // [.SfR3..[.fZu..4
    1E00: 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 75 13 48  // .t....@...s..u.H
    1E10: E8 0F 00 66 8B C2 E8 6B 13 5B C3 BB 00 1E E8 03  // ...f...k.[......
    1E20: 14 C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32  // ...............2
    1E30: 00 E8 35 10 C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB  // ..5..Q.....t....
    1E40: 08 1E E8 DF 13 66 3B C2 74 07 83 C3 08 E2 F3 0B  // .....f;.t.......
    1E50: DB 59 C3 C3 C3 00 BB 20 DF E8 69 35 E8 BE F4 B5  // .Y..... ..i5....
    1E60: 01 E8 2B 07 C3 BB 00 DF E8 5A 35 E8 AF F4 B5 00  // ..+......Z5.....
    1E70: E8 1C 07 C3 80 F9 00 75 0A E8 E1 0F 8A C8 B5 02  // .......u........
    1E80: E8 E5 08 0B F6 74 29 E8 93 F4 B5 01 E8 14 07 56  // .....t)........V
    1E90: 33 F6 B5 00 E8 5D 06 5E B5 01 E8 04 F5 E8 C8 08  // 3....].^........
    1EA0: E8 85 09 E8 77 F4 8D 9C 00 03 E8 FD 06 E8 46 07  // ....w.........F.
    1EB0: 66 C1 CE 10 B5 01 E8 3B 06 E8 06 FF A8 40 75 07  // f......;.....@u.
    1EC0: 32 C0 B5 01 E8 4B 08 66 C1 CE 10 C3 E8 4E F4 B5  // 2....K.f.....N..
    1ED0: 01 E8 96 06 B5 00 E8 CA 06 E8 2D 07 B1 0F E8 16  // ..........-.....
    1EE0: 0A B1 10 E8 11 0A E8 2B 00 C3 E8 7A 00 E8 3D F4  // .......+...z..=.
    1EF0: B5 00 E8 75 06 B5 00 E8 A9 06 E8 B2 F4 E8 5D 0F  // ...u..........].
    1F00: 38 C1 74 0F 80 F9 08 72 05 80 F9 0B 76 05 B5 03  // 8.t....r....v...
    1F10: E8 55 08 C3 53 66 50 BB 02 00 E8 93 0C 66 A9 00  // .U..SfP......f..
    1F20: 00 01 00 66 58 5B 75 3E E8 1D F4 0B D2 74 0C E8  // ...fX[u>.....t..
    1F30: AB F4 3C 01 74 05 B1 0F E8 FA 09 B1 0C E8 75 00  // ..<.t.........u.
    1F40: B1 01 E8 28 0A E8 BB F3 80 FD 00 75 0D E8 E6 01  // ...(.......u....
    1F50: B1 0D E8 A2 09 B1 03 E8 5B 00 E8 EB F3 0B D2 74  // ........[......t
    1F60: 05 B1 01 E8 CF 09 C3 E8 DE F3 0B D2 74 05 B1 00  // ............t...
    1F70: E8 C2 09 B1 02 E8 3D 00 E8 62 F4 A8 01 74 0D E8  // ......=..b...t..
    1F80: 81 F3 80 FD 00 75 05 B0 02 E8 12 04 B1 00 E8 DC  // .....u..........
    1F90: 09 B1 0D E8 1F 00 C3 B1 07 E8 D1 09 E8 A9 F3 0B  // ................
    1FA0: D2 75 0C E8 17 F4 E8 85 0B 75 09 E8 6D 0A C3 B1  // .u.......u..m...
    1FB0: 07 E8 81 09 C3 E8 05 F4 E8 73 0B 75 24 51 E8 AC  // .........s.u$Q..
    1FC0: 09 59 80 F9 0C 75 1A 33 D2 56 83 C6 08 E8 9C 0B  // .Y...u.3.V......
    1FD0: 5E 0A C0 75 0C B9 0A 00 E8 DF 0E 42 83 FA 1E 75  // ^..u.......B...u
    1FE0: E8 C3 56 83 C6 08 E8 24 0B 5E E8 5B F3 0B D2 74  // ..V....$.^.[...t
    1FF0: 03 E8 99 08 80 FD 01 0F 84 D1 00 80 FD 02 0F 85  // ................
    2000: F2 00 B1 0C E8 AE FF 56 83 C6 08 E8 5E 0B 5E 0A  // .......V....^.^.
    2010: C0 0F 84 DF 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C  // ................
    2020: 35 01 E8 FF 11 A8 01 74 03 E8 7F 03 E8 19 F3 0B  // 5......t........
    2030: D2 74 05 B1 14 E8 FD 08 66 33 C9 E8 3B F3 66 BA  // .t......f3..;.f.
    2040: 50 01 40 50 66 C1 C9 10 8A C1 66 C1 C9 10 E8 15  // P.@Pf.....f.....
    2050: 0A 0F 85 9F 00 66 BA 50 01 50 4F 52 E8 E9 F2 80  // .....f.P.POR....
    2060: FA 22 5A 74 0D 8D 9C 2D 01 E8 B8 11 24 06 3C 02  // ."Zt...-....$.<.
    2070: 75 02 B6 02 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9  // u....\(f.....f..
    2080: 10 E8 E2 09 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB  // ....un..2.f.....
    2090: 66 C1 C9 10 66 BA 50 01 10 30 33 DB E8 C7 09 75  // f...f.P..03....u
    20A0: 53 66 C1 C9 10 8B C1 66 C1 C9 10 0B C0 74 45 83  // Sf.....f.....tE.
    20B0: F8 10 75 0F 8D 5C 28 E8 6A 11 66 0B C0 0F 85 7D  // ..u..\(.j.f....}
    20C0: FF EB 31 3D 80 00 0F 82 74 FF EB 25 E8 AA F2 8A  // ..1=....t..%....
    20D0: E9 B1 A0 BA 00 80 BF 32 00 8D 5C 28 E8 5C 09 80  // .......2..\(.\..
    20E0: FF 01 74 0D B1 A2 8D 5C 28 E8 4F 09 80 FF 01 75  // ..t....\(.O....u
    20F0: 03 B0 00 C3 B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D  // ........+.t.....
    2100: 02 75 21 E8 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C  // .u!...u.f....C..
    2110: 30 01 E8 51 09 66 BA 20 00 90 41 8D 9C 34 01 E8  // 0..Q.f. ..A..4..
    2120: 44 09 33 DB C3 E8 51 F2 66 BA 00 00 90 47 8D 9C  // D.3...Q.f....G..
    2130: 28 01 E8 31 09 C3 E8 A4 F2 3C 01 75 0E E8 ED 02  // (..1.....<.u....
    2140: 80 FD 01 75 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9  // ...u............
    2150: 10 00 E8 14 0D B0 01 E8 44 02 74 08 B5 04 E8 11  // ........D.t.....
    2160: 03 E9 19 01 B1 08 E8 8E 07 E8 66 02 B1 09 E8 86  // ..........f.....
    2170: 07 E8 AC 01 8D 9C B8 03 66 33 C0 E8 06 10 E8 47  // ........f3.....G
    2180: 01 B9 90 01 E8 28 0D B0 01 E8 F7 01 B5 02 E8 D5  // .....(..........
    2190: 02 E8 5B 01 E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33  // ..[............3
    21A0: C9 E8 E7 00 F6 C5 01 75 2E B5 02 E8 B8 02 E8 07  // .......u........
    21B0: 01 F6 C5 04 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD  // ....t...........
    21C0: 80 E7 03 E8 CF 00 80 E3 03 38 FB 75 07 E8 33 01  // .........8.u..3.
    21D0: 0F 84 A9 00 E8 54 01 FE C1 E8 AC F1 38 D9 75 C1  // .....T......8.u.
    21E0: 8D 9C AC 03 E8 3D 10 3C 03 74 05 E8 DA 00 EB A1  // .....=.<.t......
    21F0: 8D 9C B0 03 66 33 C0 E8 8A 0F 8D 9C 2A 01 E8 23  // ....f3......*..#
    2200: 10 A8 40 74 0C B1 13 E8 ED 06 B0 03 E8 74 01 EB  // ..@t.........t..
    2210: 0A B1 0A E8 E1 06 B0 02 E8 68 01 B5 04 E8 46 02  // .........h....F.
    2220: E8 CC 00 E8 58 02 E8 38 01 B5 05 E8 38 02 33 C9  // ....X..8....8.3.
    2230: E8 58 00 80 FD 07 75 05 E8 73 00 75 27 51 B5 04  // .X....u..s.u'Q..
    2240: E8 23 02 59 F6 C5 01 75 07 B5 03 E8 24 02 EB 2D  // .#.Y...u....$..-
    2250: E8 65 00 8A D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8  // .e.......].8.u..
    2260: A1 00 74 19 FE C1 E8 1F F1 38 D9 75 C3 8D 9C AC  // ..t......8.u....
    2270: 03 E8 B0 0F 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8  // ....<.u..M......
    2280: 01 01 B1 0B E8 70 06 E8 A3 01 C3 8D 9C C0 03 E8  // .....p..........
    2290: 0F 00 8A E8 C3 53 8D 9C C4 03 E8 04 00 5B 8A D8  // .....S.......[..
    22A0: C3 51 E8 7F 0F C0 E1 02 D3 E8 24 0F 59 C3 8D 9C  // .Q........$.Y...
    22B0: C2 03 E8 6F 0F A8 01 C3 8D 9C B8 03 E8 21 0F C3  // ...o.........!..
    22C0: 8D 9C B8 03 E8 01 0F C3 33 C9 33 D2 E8 E9 FF 38  // ........3.3....8
    22D0: D5 76 02 8A D5 FE C1 E8 AE F0 38 D9 72 EE 33 C9  // .v........8.r.3.
    22E0: 8A EA 8D 9C 5C 03 E8 DF 0E B1 0B E8 7F 06 C3 E8  // ....\...........
    22F0: 87 F0 8D 9C B8 03 E8 2B 0F 66 BA 03 01 80 83 E8  // .......+.f......
    2300: 64 07 C3 51 53 8D 9C B0 03 E8 D4 0E FE C5 E8 B7  // d..QS...........
    2310: 0E 80 FD 06 72 07 B5 02 E8 57 01 33 C9 5B 59 C3  // ....r....W.3.[Y.
    2320: 66 33 C0 8D 9C B0 03 E8 5A 0E C3 32 ED E8 65 FF  // f3......Z..2..e.
    2330: 80 E3 0C C0 EB 02 B7 03 2A FB C0 E3 03 8A EB 80  // ........*.......
    2340: FB 18 72 03 80 CD 20 E8 4B FF 80 E3 03 38 FB 72  // ..r... .K....8.r
    2350: 02 8A DF 80 FB 03 75 03 80 CD 04 0A EB E8 60 FF  // ......u.......`.
    2360: C3 E8 15 F0 8D 9C C0 03 66 BA 02 02 90 45 E8 F5  // ........f....E..
    2370: 06 C3 E8 04 F0 66 BA 00 01 90 42 8D 9C B4 03 E8  // .....f....B.....
    2380: E4 06 C3 E8 F3 EF 66 BA 02 01 80 50 E8 D7 06 C3  // ......f....P....
    2390: E8 D5 EF 8B C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 D8  // .....f3.........
    23A0: EF 66 BA 00 06 80 50 E8 BC 06 C3 E8 CB EF 66 BA  // .f....P.......f.
    23B0: 11 01 80 50 B0 04 E8 AD 06 C3 E8 BC EF 66 BA 00  // ...P.........f..
    23C0: 06 90 40 8D 9C C8 03 E8 9C 06 8D 9C C8 03 E8 53  // ..@............S
    23D0: 0E C3 E8 BB FF E8 B0 EF 8A E3 80 CC 80 50 E8 98  // .............P..
    23E0: EF 58 66 BA 00 01 80 61 E8 7B 06 33 C9 E8 23 EF  // .Xf....a.{.3..#.
    23F0: 0B C0 74 02 B5 10 8D 9C BC 03 E8 CB 0D 8A C5 E8  // ..t.............
    2400: 77 EF 66 BA 07 01 80 50 E8 5B 06 E8 AF EF E8 21  // w.f....P.[.....!
    2410: 07 75 19 8D 9C 48 03 E8 0A 0E 0A C0 74 0E E8 58  // .u...H......t..X
    2420: EF 66 BA 0A 01 80 50 B0 01 E8 3A 06 C3 E8 42 FF  // .f....P...:...B.
    2430: E8 2E FF E8 84 FF 3C 01 75 1C E8 71 FE 74 17 33  // ......<.u..q.t.3
    2440: C9 E8 47 FE 80 FD 07 75 0D FE C1 E8 3A EF 38 D9  // ..G....u....:.8.
    2450: 75 EF B5 01 EB 02 B5 00 E8 01 00 C3 8D 9C AC 03  // u...............
    2460: B1 02 E8 63 0D C3 51 8D 9C AC 03 32 C9 E8 58 0D  // ...c..Q....2..X.
    2470: 59 C3 51 8D 9C AC 03 B1 01 E8 4C 0D 59 C3 8D 9C  // Y.Q.......L.Y...
    2480: 32 01 E8 9F 0D 0A C0 75 15 B9 64 00 8D 9C AC 03  // 2......u..d.....
    2490: E8 91 0D 3C 02 74 03 B9 90 01 E8 12 0A C3 32 E4  // ...<.t........2.
    24A0: B1 04 33 D2 F6 E1 8B C8 E8 0F 0A C3 51 8D 5C 14  // ..3.........Q.\.
    24B0: E8 71 0D 66 C1 E0 10 E8 98 01 59 C3 33 C9 E8 96  // .q.f......Y.3...
    24C0: 09 38 C1 73 05 B5 00 E8 A7 00 B5 00 E8 9B 00 FE  // .8.s............
    24D0: C1 E8 86 09 38 C1 72 E6 B1 14 8A E9 E8 7E 09 38  // ....8.r......~.8
    24E0: C1 74 05 B5 03 E8 80 02 FE C1 E8 67 09 04 14 38  // .t.........g...8
    24F0: C1 76 E7 C3 83 EC 0C 8B EC 0B F6 74 29 E8 D8 F8  // .v.........t)...
    2500: 66 C1 C8 10 80 FD 10 75 06 8D 5C 18 E8 15 0D 66  // f......u..\....f
    2510: 89 46 00 8D 5C 04 E8 0B 0D 66 89 46 04 8D 5C 08  // .F..\....f.F..\.
    2520: E8 01 0D 88 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B  // ....F..N...f....
    2530: C4 BB 2B 00 E8 7B 08 83 C4 0C C3 33 DB 83 EC 08  // ..+..{.....3....
    2540: 8B EC 89 5E 00 8C D0 66 C1 E0 10 8B C4 BB 01 00  // ...^...f........
    2550: E8 5F 08 8B EC 8B 4E 00 8B 56 02 66 8B 46 04 83  // ._....N..V.f.F..
    2560: C4 08 C3 BB 25 00 E8 0F 00 C3 BB 23 00 E8 08 00  // ....%......#....
    2570: C3 BB 0D 00 E8 01 00 C3 83 EC 04 8B EC 89 4E 00  // ..............N.
    2580: 8C D0 66 C1 E0 10 8B C4 E8 27 08 83 C4 04 C3 BB  // ..f......'......
    2590: 22 00 E8 E3 FF 80 FD 01 74 08 B5 01 BB 06 00 E8  // ".......t.......
    25A0: D6 FF C3 BB 2C 00 E8 CF FF C3 E8 77 0C 66 A9 00  // ....,......w.f..
    25B0: 00 FF FF 74 40 83 EC 18 8B EC 55 51 B9 04 00 83  // ...t@.....UQ....
    25C0: C3 02 E8 5F 0C 66 89 46 00 83 C5 04 83 C3 04 E2  // ..._.f.F........
    25D0: F1 83 C3 04 E8 4D 0C 66 C1 C8 10 66 89 46 00 59  // .....M.f...f.F.Y
    25E0: 5D 88 4E 14 8C D0 66 C1 E0 10 8B C4 BB 31 00 E8  // ].N...f......1..
    25F0: C0 07 83 C4 18 C3 E8 24 ED 8D 9C D0 02 E8 24 0C  // .......$......$.
    2600: 8A E8 BB 21 00 E8 70 FF C3 8D 9C 3C 03 E8 14 0C  // ...!..p....<....
    2610: 8A F8 E8 EE EC 8A DD 53 8D 9C 42 03 E8 05 0C 8A  // .......S..B.....
    2620: E8 5B E8 F8 EC E8 95 ED E8 07 05 75 02 B3 01 83  // .[.........u....
    2630: EC 04 8B EC 88 4E 00 88 7E 01 88 5E 02 88 6E 03  // .....N..~..^..n.
    2640: 8C D0 66 C1 E0 10 8B C4 BB 2A 00 E8 64 07 83 C4  // ..f......*..d...
    2650: 04 C3 83 EC 10 8B EC 66 8B C8 66 33 C0 66 89 46  // .......f..f3.f.F
    2660: 04 BB 00 17 E8 1D 0B 66 B8 00 80 20 50 66 89 46  // .......f... Pf.F
    2670: 0C 66 33 C0 66 89 46 08 56 E8 11 07 66 8B 44 04  // .f3.f.F.V...f.D.
    2680: 66 50 66 C1 E8 16 88 46 08 66 58 66 C1 E0 0A 66  // fPf....F.fXf...f
    2690: 05 00 17 00 00 66 89 46 00 5E 8C D0 66 C1 E0 10  // .....f.F.^..f...
    26A0: 8B C4 BB 35 00 E8 0A 07 8B EC 66 B8 00 80 00 00  // ...5......f.....
    26B0: 66 2B C8 66 89 46 04 66 05 00 00 20 40 66 89 46  // f+.f.F.f... @f.F
    26C0: 0C 66 33 C0 66 89 46 08 66 89 46 00 8C D0 66 C1  // .f3.f.F.f.F...f.
    26D0: E0 10 8B C4 BB 35 00 E8 D8 06 8B EC 66 8B 46 0C  // .....5......f.F.
    26E0: 66 25 FF FF 1F 00 66 01 46 04 66 3B C8 76 1F 66  // f%....f.F.f;.v.f
    26F0: 2B C8 66 8B 46 04 66 3D 00 FF 01 00 76 06 66 B8  // +.f.F.f=....v.f.
    2700: 00 FF 01 00 66 3B C8 73 AE 66 8B C1 EB A9 83 C4  // ....f;.s.f......
    2710: 10 C3 83 EC 08 8B EC 89 4E 00 66 89 56 02 89 5E  // ........N.f.V..^
    2720: 06 8C D0 66 C1 E0 10 8B C4 BB 2D 00 E8 83 06 83  // ...f......-.....
    2730: C4 08 C3 3D C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24  // ...=..v.......?$
    2740: C0 C3 51 E8 DE 0A 66 33 D2 B9 0A 00 F7 F1 8B C8  // ..Q...f3........
    2750: E8 D1 0A 03 C1 66 25 FF FF 00 00 59 3D 10 27 73  // .....f%....Y=.'s
    2760: 03 B8 10 27 C3 32 D2 C3 80 FD 02 75 19 E8 9D EC  // ...'.2.....u....
    2770: 66 BB 00 08 00 00 E8 8E 00 66 33 D2 66 BB 01 08  // f........f3.f...
    2780: 00 00 E8 82 00 C3 80 FD 03 75 10 66 33 C0 8A C1  // .........u.f3...
    2790: 66 33 D2 66 BB FF 00 00 00 EB 36 51 33 D2 E8 62  // f3.f......6Q3..b
    27A0: EB 8A D5 66 C1 E2 10 E8 93 EB 8A F2 8A D1 66 8B  // ...f..........f.
    27B0: C2 66 0D 00 00 00 80 E8 CE EB 80 FB 04 76 06 66  // .f...........v.f
    27C0: 0D 00 00 00 08 E8 02 EC E8 52 EB 66 33 DB 8A D9  // .........R.f3...
    27D0: 59 83 EC 14 8B EC 66 89 46 04 66 89 5E 08 66 8B  // Y.....f.F.f.^.f.
    27E0: C2 66 33 D2 66 BB 64 00 00 00 66 F7 E3 66 89 46  // .f3.f.d...f..f.F
    27F0: 00 BB 0C 00 8C D0 66 C1 E0 10 8B C4 E8 B3 05 8B  // ......f.........
    2800: EC B3 01 83 C4 14 C3 83 EC 10 8B EC 66 89 56 00  // ............f.V.
    2810: 66 89 5E 04 BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8  // f.^......f......
    2820: 90 05 B3 01 83 C4 10 C3 C3 53 51 66 50 B9 A0 8C  // .........SQfP...
    2830: 80 FB 00 75 1C B9 90 7E E8 0E 05 83 E3 03 80 FB  // ...u...~........
    2840: 03 75 0E E8 E4 05 66 3D 50 C3 00 00 72 03 B9 F0  // .u....f=P...r...
    2850: D2 66 33 D2 8B D1 66 58 59 5B C3 66 52 B3 00 66  // .f3...fXY[.fR..f
    2860: F7 C2 00 00 FF FF 75 13 80 FD 13 74 0E 80 FD 14  // ......u....t....
    2870: 74 09 B3 01 80 FD 0E 74 02 B3 02 66 5A C3 B5 11  // t......t...fZ...
    2880: 80 FA 23 74 07 80 FA 22 74 02 B5 00 C3 B5 02 C3  // ..#t..."t.......
    2890: B1 01 80 FD 00 75 06 C7 46 00 0B 01 C3 50 33 C0  // .....u..F....P3.
    28A0: E8 79 01 04 14 89 46 00 58 C3 C3 C3 0C 01 C3 E8  // .y....F.X.......
    28B0: 72 09 66 C1 E8 10 0B C0 74 1A 53 83 C3 06 E8 63  // r.f.....t.S....c
    28C0: 09 5B 3D E0 01 72 0D 53 83 C3 18 E8 56 09 5B A9  // .[=..r.S....V.[.
    28D0: 10 00 74 03 32 C0 C3 0C 01 C3 B5 0C C3 32 ED B5  // ..t.2........2..
    28E0: 02 C3 57 E8 01 01 8B 4D 06 5F C3 80 FA 22 75 05  // ..W....M._..."u.
    28F0: C7 46 00 78 69 C3 C3 E8 04 01 80 FD FF 74 35 83  // .F.xi........t5.
    2900: EC 0C 8B EC 88 4E 01 88 6E 00 80 F9 0F 75 05 E8  // .....N..n....u..
    2910: 24 00 EB 0F 80 F9 10 75 0A 8D 9C 48 03 E8 04 09  // $......u...H....
    2920: 88 46 02 8C D0 66 C1 E0 10 8B C4 BB 04 00 E8 81  // .F...f..........
    2930: 04 83 C4 0C C3 C3 66 53 E8 2D EA 66 8B C2 66 33  // ......fS.-.f..f3
    2940: D2 66 BB 8C 0A 00 00 66 F7 F3 66 5B 8A E8 88 6E  // .f.....f..f[...n
    2950: 09 8D 9C 40 03 E8 CC 08 88 46 02 88 66 03 66 C1  // ...@.....F..f.f.
    2960: E8 10 88 46 08 E8 EF E9 66 89 56 04 C3 80 F9 04  // ...F....f.V.....
    2970: 74 03 E8 C8 E9 83 EC 10 8B EC 80 F9 04 75 0A 88  // t............u..
    2980: 4E 01 32 C0 88 46 00 EB 4C E8 90 00 88 46 00 88  // N.2..F..L....F..
    2990: 4E 01 E8 28 EA 88 56 0A 80 F9 01 74 11 80 F9 0B  // N..(..V....t....
    29A0: 75 33 8D 9C 5C 03 E8 7B 08 88 46 02 EB 27 E8 C8  // u3..\..{..F..'..
    29B0: E9 88 6E 08 E8 A0 E9 66 89 56 04 E8 CA E9 88 5E  // ..n....f.V.....^
    29C0: 03 E8 3F E9 88 6E 02 51 E8 33 00 8A CD B0 01 D2  // ..?..n.Q.3......
    29D0: E0 59 88 46 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00  // .Y.F...f......L.
    29E0: E8 CF 03 83 C4 10 C3 E8 AC 03 03 7D 04 83 3D FF  // ...........}..=.
    29F0: 74 0B 3B 15 74 05 83 C7 0A EB F2 0B FF C3 8D 9C  // t.;.t...........
    2A00: 3C 03 E8 1F 08 32 ED 3C 03 74 0C 3C 09 72 09 3C  // <....2.<.t.<.r.<
    2A10: 0E 77 05 2C 08 8A E8 C3 B5 FF C3 C3 52 32 C0 80  // .w.,........R2..
    2A20: EE 21 80 FA 1E 74 10 B0 02 80 FA 20 74 09 B0 04  // .!...t..... t...
    2A30: 80 FA 21 74 02 B0 06 02 C6 5A C3 83 EC 08 8B EC  // ..!t.....Z......
    2A40: 89 7E 00 89 5E 02 89 56 04 89 4E 06 8C D0 66 C1  // .~..^..V..N...f.
    2A50: E0 10 8B C4 BB 36 00 E8 58 03 8B EC 8B 5E 02 8A  // .....6..X....^..
    2A60: 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2 00 00 80 00  // ~.....V3.f......
    2A70: 75 0A 50 33 C0 8A C6 8B F0 32 F6 58 53 BB 04 3E  // u.P3.....2.XS..>
    2A80: E8 01 07 66 8B C2 BB 00 3E E8 F8 06 5B 66 F7 C2  // ...f....>...[f..
    2A90: 00 00 10 00 75 02 33 DB 8B D3 66 C1 E2 10 BA 00  // ....u.3...f.....
    2AA0: 3E 83 EC 08 8B EC 66 89 56 00 88 4E 04 8A C5 FE  // >.....f.V..N....
    2AB0: C8 88 46 07 C6 46 05 00 C6 46 06 00 8C D0 66 C1  // ..F..F...F....f.
    2AC0: E0 10 8B C4 BB 4E 00 E8 E8 02 8B EC 8A 5E 05 8A  // .....N.......^..
    2AD0: 7E 06 83 C4 08 0A DB 74 32 51 B9 90 01 80 FB 20  // ~......t2Q..... 
    2AE0: 74 05 80 FB 80 75 13 B9 0A 00 8B C6 0A C0 74 0A  // t....u........t.
    2AF0: B9 90 01 3C 01 74 03 B9 E8 03 E8 B2 03 59 8B C6  // ...<.t.......Y..
    2B00: FE C4 8B F0 80 FC 06 76 98 0A DB 5E C3 8D 5C 04  // .......v...^..\.
    2B10: E8 11 07 8B D0 B5 02 E8 14 00 74 11 B5 01 80 FA  // ..........t.....
    2B20: 13 75 0A E8 61 00 80 FA 13 75 02 B5 02 C3 80 FA  // .u..a....u......
    2B30: 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80 FA 05 C3 80  // .....t..........
    2B40: FA 02 74 03 80 FA 04 C3 80 FA 01 74 03 80 FA 02  // ..t........t....
    2B50: C3 80 FA 02 75 03 B2 01 C3 80 FA 04 75 03 B2 03  // ....u.......u...
    2B60: C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3 8D 5C 09 E8  // .......t.....\..
    2B70: B2 06 8A C8 0A C9 75 03 32 C0 C3 B5 02 E8 B4 02  // ......u.2.......
    2B80: 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 97 06 8A D0 B6  // ..$.....\.......
    2B90: 01 83 EC 08 8B EC 89 56 02 8C D0 66 C1 E0 10 8B  // .......V...f....
    2BA0: C4 BB 4F 00 E8 0B 02 8B EC 8A 56 04 83 C4 08 C3  // ..O.......V.....
    2BB0: 53 81 C3 C9 05 E8 3A 06 5B C3 53 81 C3 C9 05 E8  // S.....:.[.S.....
    2BC0: 8B 05 5B C3 66 53 81 C3 00 10 E8 25 06 66 5B C3  // ..[.fS.....%.f[.
    2BD0: 57 E8 82 01 8A 45 2D B4 FF F7 45 50 20 00 5F C3  // W....E-...EP ._.
    2BE0: 50 56 0F BC D8 8D 36 87 2B E8 63 03 5E 58 C3 00  // PV....6.+.c.^X..
    2BF0: 20 00 24 00 00 00 28 00 2C 00 30 00 34 00 38 00  //  .$...(.,.0.4.8.
    2C00: 00 00 3C 00 40 00 44 53 56 51 8B F7 B3 00 E8 30  // ..<.@.DSVQ.....0
    2C10: 00 0B F6 74 16 49 0B C9 75 04 33 FF EB 0D 8B DF  // ...t.I..u.3.....
    2C20: 03 7D 02 3B F3 74 04 E2 F5 33 FF 0B FF 59 5E 5B  // .}.;.t...3...Y^[
    2C30: C3 0E 00 00 00 0A 00 06 00 08 00 0C 00 0E 00 10  // ................
    2C40: 00 56 8D 36 C9 2B E8 06 03 E8 13 01 03 DE 8B 3F  // .V.6.+.........?
    2C50: 0B FF 74 0B 03 FE 33 C9 8A 0D 83 C7 04 0B FF 5E  // ..t...3........^
    2C60: C3 51 56 53 C1 EB 0C E8 D7 FF 5B 75 04 33 FF EB  // .QVS......[u.3..
    2C70: 0B 3B 1D 74 07 83 C7 08 E2 F7 33 FF 0B FF 5E 59  // .;.t......3...^Y
    2C80: C3 57 E8 DC FF 75 04 33 DB 5F C3 E8 02 00 5F C3  // .W...u.3._...._.
    2C90: 52 51 8B 5D 04 0B DB 74 1B 56 E8 C2 00 03 DE 5E  // RQ.]...t.V.....^
    2CA0: 33 C9 8A 4F 01 80 3F FF 74 08 3A 07 74 06 03 D9  // 3..O..?.t.:.t...
    2CB0: EB F0 33 DB 0B DB 59 5A C3 50 8D 1C E8 C5 04 8B  // ..3...YZ.P......
    2CC0: D8 E8 72 00 23 C3 74 6C 33 FF E8 3A FF 0B FF 74  // ..r.#.tl3..:...t
    2CD0: 63 39 05 75 F5 66 33 C0 8B 45 08 8B 4D 02 83 F9  // c9.u.f3..E..M...
    2CE0: 0A 74 18 8B 4D 0A 8B D1 81 E2 00 70 80 FE 20 75  // .t..M......p.. u
    2CF0: 0A 66 C1 C8 10 8B C1 66 C1 C8 10 8D 5C 0C E8 83  // .f.....f....\...
    2D00: 04 66 33 C0 8B 45 04 8D 5C 04 E8 77 04 33 C9 8B  // .f3..E..\..w.3..
    2D10: D8 50 B0 01 E8 6A FF 58 74 0F 8A 4F 02 8B D8 B0  // .P...j.Xt..O....
    2D20: 02 E8 5D FF 74 03 8A 6F 02 8D 5C 08 66 33 C0 8B  // ..].t..o..\.f3..
    2D30: C1 E8 50 04 58 C3 56 E8 25 00 8B 44 04 5E C3 56  // ..P.X.V.%..D.^.V
    2D40: E8 1C 00 89 44 04 5E C3 C3 8B DA B0 14 E8 31 FF  // ....D.^.......1.
    2D50: 74 03 8B 5F 02 C3 BF 4E 02 8B 3D 8B 7D 0C C3 BE  // t.._...N..=.}...
    2D60: 4E 02 8B 34 8B 74 30 C3 1E 0E 1F BF 4E 02 8B 3D  // N..4.t0.....N..=
    2D70: 8B 7D 0E 83 C7 04 1F C3 BE 4E 02 8B 34 8B 74 10  // .}.......N..4.t.
    2D80: C3 BF 4E 02 8B 3D 8B 7D 26 83 C7 04 C3 BE 4E 02  // ..N..=.}&.....N.
    2D90: 8B 34 8B 74 1A C3 BF 4E 02 8B 3D 8B 7D 3A C3 BF  // .4.t...N..=.}:..
    2DA0: 4E 02 8B 3D 8B 7D 0A 83 C7 04 B9 08 00 C3 E8 01  // N..=.}..........
    2DB0: 00 CB 83 EC 06 8B EC 89 46 00 66 33 C0 C6 46 04  // ........F.f3..F.
    2DC0: 00 89 46 02 06 52 8A D3 8B C5 E8 7F 16 5A 07 83  // ..F..R.......Z..
    2DD0: C4 06 C3 E8 80 FF F7 45 50 01 00 C3 E8 77 FF 83  // .......EP....w..
    2DE0: 4D 50 01 C3 E8 6F FF 88 45 58 C3 66 53 83 EC 28  // MP...o..EX.fS..(
    2DF0: 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66 C1 E0 10  // ..f.^.f.N...f...
    2E00: 8B C4 BB 00 00 E8 AA FF 83 C4 28 66 5B E8 48 01  // ..........(f[.H.
    2E10: BB 04 00 E8 9A FD 66 C1 E8 10 E8 C7 FF C3 E8 35  // ......f........5
    2E20: FF 66 8B 5D 08 66 8B 4D 0C C3 57 E8 28 FF 66 8B  // .f.].f.M..W.(.f.
    2E30: 45 28 5F C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // E(_.......N...f.
    2E40: E0 10 8B C4 BB 38 00 E8 68 FF 8B EC 8A 6E 02 83  // .....8..h....n..
    2E50: C4 04 C3 C3 B0 06 C3 B0 02 C3 B0 06 C3 B0 08 C3  // ................
    2E60: E8 F3 FE 8B 45 56 0B C0 C3 53 66 50 66 33 C0 E8  // ....EV...SfPf3..
    2E70: 12 03 83 C3 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8  // .......fX[.2....
    2E80: A2 03 66 C1 CB 10 E8 FB 02 66 C1 CB 10 66 81 C3  // ..f......f...f..
    2E90: 04 00 04 00 E2 E9 C3 FC 66 AD E8 E7 02 83 C3 04  // ........f.......
    2EA0: E2 F6 C3 FC E8 7D 03 66 AB 83 C3 04 E2 F6 C3 66  // .....}.f.......f
    2EB0: 50 B8 19 00 E8 10 00 66 58 C3 66 50 B8 D4 30 D1  // P......fX.fP..0.
    2EC0: E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8 63 01 66  // ....fX.R.....c.f
    2ED0: 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1 03 00 B2  // S..f.....f......
    2EE0: 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08 B1 03 00  // .f...f3.f.f.....
    2EF0: B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8 73 0A 66  // ..f...f.3.f..s.f
    2F00: ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B C3 73 0C  // .f.....u.f.f;.s.
    2F10: 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66 5B 5A C3  // f...;.r.....f[Z.
    2F20: BB 42 EC E8 CC 02 66 33 D2 66 BB 19 00 00 00 66  // .B....f3.f.....f
    2F30: F7 F3 C3 66 50 53 BB 07 00 E8 74 FC 25 00 02 35  // ...fPS....t.%..5
    2F40: 00 02 0B C0 5B 66 58 C3 BB 0A 15 E8 A4 02 C3 32  // ....[fX........2
    2F50: FF D1 E3 03 F3 8B 1C C3 E8 ED FF 66 C1 E0 0A 66  // ...........f...f
    2F60: 83 E8 20 E8 27 FE 66 89 44 04 C7 44 08 20 00 C3  // .. .'.f.D..D. ..
    2F70: 56 1E 0E 1F E8 16 FE 66 8B 44 04 66 C1 E0 0A 1F  // V......f.D.f....
    2F80: 5E C3 C3 56 E8 F1 FD 8B 4C 22 8A 44 29 5E C3 BE  // ^..V....L".D)^..
    2F90: 4E 02 8B 34 8B 74 1E 83 C6 04 B9 1C 00 C3 33 FF  // N..4.t........3.
    2FA0: C3 56 E8 D3 FD 8A 6C 28 80 E5 70 C0 ED 04 5E C3  // .V....l(..p...^.
    2FB0: 56 E8 C4 FD 53 81 C3 09 01 E8 68 02 8A E8 5B 53  // V...S.....h...[S
    2FC0: 81 C3 00 01 E8 5D 02 5B 8A C5 66 89 44 3C 5E C3  // .....].[..f.D<^.
    2FD0: 56 E8 A4 FD 66 8B 44 3C 53 81 C3 00 01 E8 A4 01  // V...f.D<S.......
    2FE0: 5B 53 81 C3 08 01 B1 01 8A E8 E8 DB 01 5B 5E C3  // [S...........[^.
    2FF0: 56 E8 84 FD 8B FE 83 C7 04 5E C3 56 E8 79 FD 8A  // V........^.V.y..
    3000: 44 28 80 FD 00 74 0E 24 8F C0 E5 04 0A C5 80 FD  // D(...t.$........
    3010: 20 75 02 0C 02 24 FE 81 7C 04 34 21 76 02 0C 01  //  u...$..|.4!v...
    3020: 88 44 28 E8 08 FB 75 04 80 4C 30 01 5E C3 32 C0  // .D(...u..L0.^.2.
    3030: C3 00 66 50 8C C8 3D 00 C0 75 10 BA C3 03 EC 8A  // ..fP..=..u......
    3040: F0 0A F6 74 06 B2 4C 66 ED EB 17 53 2E 8B 1E 42  // ...t..Lf...S...B
    3050: 02 B2 20 E8 DD 00 A8 01 75 05 B2 14 E8 D4 00 8A  // .. .....u.......
    3060: F4 5B 32 D2 66 58 C3 2E 8B 1E 42 02 C3 0B C9 75  // .[2.fX....B....u
    3070: 1A 4B 74 16 43 3B DA 77 09 8B C8 8B C2 2B D2 F7  // .Kt.C;.w.....+..
    3080: F3 91 F7 F3 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75  // ........+..;.r.u
    3090: 10 3B D8 77 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00  // .;.w.+...+.+....
    30A0: C3 2B C9 2B DB 93 87 CA C3 55 56 2B F6 8B EE 03  // .+.+.....UV+....
    30B0: DB 13 C9 72 11 45 3B CA 72 F5 77 04 3B D8 76 EF  // ...r.E;.r.w.;.v.
    30C0: F8 13 F6 4D 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72  // ...Mx ....+....r
    30D0: F0 03 F6 4D 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1  // ...Mx.........s.
    30E0: EB DF 03 C3 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D  // ............3.^]
    30F0: C3 93 50 92 0B C0 74 02 F7 E2 91 0B C0 74 04 F7  // ..P...t......t..
    3100: E3 03 C8 58 F7 E3 03 D1 C3 52 66 50 B4 80 8A C7  // ...X.....RfP....
    3110: 66 C1 E0 10 8A E3 8A C2 24 FC BA F8 0C 66 EF 66  // f.......$....f.f
    3120: 58 5A C3 52 BA FC 0C 66 ED 5A C3 52 BA FC 0C 66  // XZ.R...f.Z.R...f
    3130: EF 5A C3 E8 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3  // .Z..1...........
    3140: E8 24 FF 9C FA E8 C1 FF E8 E0 FF 9D C3 52 66 53  // .$...........RfS
    3150: 66 50 E8 06 00 66 58 66 5B 5A C3 66 C1 E3 10 66  // fP...fXf[Z.f...f
    3160: C1 EB 0E E8 CC FE E8 71 01 C3 66 50 66 C1 E3 10  // .......q..fPf...
    3170: 66 C1 EB 10 E8 F9 FD 66 03 D8 66 81 CB 00 00 00  // f......f..f.....
    3180: 80 66 58 C3 52 66 53 E8 04 00 66 5B 5A C3 66 50  // .fX.RfS...f[Z.fP
    3190: E8 9F FE E8 D4 FF E8 41 01 66 58 C3 52 51 66 53  // .......A.fX.RQfS
    31A0: 66 50 8A CB 80 E3 FC 80 E1 03 C0 E1 03 E8 82 FE  // fP..............
    31B0: E8 B7 FF E8 0B 01 66 D3 C8 58 50 66 D3 C0 E8 19  // ......f..XPf....
    31C0: 01 66 58 66 5B 59 5A C3 66 50 51 C0 E1 03 E8 53  // .fXf[YZ.fPQ....S
    31D0: 00 66 D3 C8 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3  // .f....f.....YfX.
    31E0: 66 50 51 C0 E1 03 E8 3B 00 66 D3 C8 59 8A E8 66  // fPQ....;.f..Y..f
    31F0: 58 C3 E8 5F 00 C3 E8 39 FE 66 C1 E3 10 66 C1 EB  // X.._...9.f...f..
    3200: 0E E8 BD 00 C3 E8 2A FE 66 C1 E3 02 E8 B2 00 C3  // ......*.f.......
    3210: 52 66 53 E8 04 00 66 5B 5A C3 E8 15 FE E8 4A FF  // RfS...f[Z.....J.
    3220: E8 9E 00 C3 51 66 52 8A EB 8A CB 80 E1 03 C0 E1  // ....QfR.........
    3230: 03 80 E3 FC E8 D9 FF 80 F9 00 74 14 66 8B D0 83  // ..........t.f...
    3240: C3 04 E8 CB FF 83 EB 04 66 92 66 0F AD D0 8A DD  // ........f.f.....
    3250: 66 5A 59 C3 52 66 53 E8 9C FF 66 5B 5A C3 52 E8  // fZY.RfS...f[Z.R.
    3260: A3 FF 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C 89  // ..Z.fPURfP...V..
    3270: 56 08 E8 BD FD 2E A1 99 02 B2 18 EF B2 00 66 ED  // V.............f.
    3280: 66 89 46 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8  // f.F.fXZ].fPUR...
    3290: A0 FD B2 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C  // ....f.F.f..V..V.
    32A0: 66 8B 46 04 66 89 46 08 5A 5D 66 58 66 58 C3 66  // f.F.f.F.Z]fXfX.f
    32B0: 50 52 E8 7D FD B2 18 66 ED 2E A3 99 02 5A 66 58  // PR.}...f.....ZfX
    32C0: C3 66 81 FB FF 00 00 00 77 04 8A D3 EB 09 66 8B  // .f......w.....f.
    32D0: C3 B2 00 66 EF B2 04 66 ED C3 66 81 FB FF 00 00  // ...f...f..f.....
    32E0: 00 77 04 8A D3 EB 0A 66 93 B2 00 66 EF 66 93 B2  // .w.....f...f.f..
    32F0: 04 66 EF C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B  // .f............U.
    3300: EC 53 51 8B F0 26 8B 5C 14 26 8B 4C 16 E8 28 00  // .SQ..&.\.&.L..(.
    3310: 8D 66 FC 59 5B 5D C3 53 51 8B F0 26 8B 5C 24 33  // .f.Y[].SQ..&.\$3
    3320: C9 E8 14 00 59 5B C3 55 8B EC 53 51 8B F0 26 8B  // ....Y[.U..SQ..&.
    3330: 5C 08 26 8B 4C 0A EB D5 52 56 57 C8 06 00 00 8B  // \.&.L...RVW.....
    3340: F0 89 4E FE 8C D0 8E C0 26 8B 7C 26 8A 45 01 32  // ..N.....&.|&.E.2
    3350: E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1  // .. .+...........
    3360: D8 E2 FA 8A 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7  // ....M.2.........
    3370: E2 FA F7 D0 F7 D7 26 21 44 1C 26 21 7C 1E 8C D0  // ......&!D.&!|...
    3380: 8E C0 26 8B 7C 26 8A 4D 01 32 ED B8 20 00 2B C1  // ..&.|&.M.2.. .+.
    3390: 8B C8 66 C7 46 FA FF FF FF FF E3 08 D1 6E FC D1  // ..f.F........n..
    33A0: 5E FA E2 F8 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06  // ^....M.2....V...
    33B0: D1 EA D1 D8 E2 FA 23 46 FA 23 56 FC 8A 4D 03 32  // ......#F.#V..M.2
    33C0: ED E3 06 D1 E0 D1 D2 E2 FA 26 09 44 1C 26 09 54  // .........&.D.&.T
    33D0: 1E C9 5F 5E 5A C3 55 8B EC 53 51 52 57 50 8B D8  // .._^Z.U..SQRWP..
    33E0: 26 8B 7F 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF  // &..&.E.2.. .+...
    33F0: FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E  // ............M..N
    3400: F6 C6 46 F7 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7  // ..F.....N.......
    3410: E2 FA 26 09 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9  // ..&.G.&....f._Z.
    3420: F1 FE 53 51 52 57 8B D8 8C D0 8E C0 26 8B 77 26  // ..SQRW......&.w&
    3430: 8A 4C 01 32 ED B8 20 00 2B C1 8B C8 BE FF FF 8B  // .L.2.. .+.......
    3440: D6 E3 06 D1 EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02  // .........&..&.M.
    3450: 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2  // 2...............
    3460: 26 21 47 1C 26 21 57 1E 5F E9 CC 05 53 56 8B D8  // &!G.&!W._...SV..
    3470: 8C D2 8E C2 26 8B 77 26 80 3C 00 74 73 80 3C 01  // ....&.w&.<.ts.<.
    3480: 75 58 8A 44 01 32 E4 26 83 7F 1E 00 75 4C 26 3B  // uX.D.2.&....uL&;
    3490: 47 1C 75 46 8A 04 6B F0 03 8A 84 48 95 26 01 47  // G.uF..k....H.&.G
    34A0: 26 8C D0 8E C0 26 8B 77 26 80 3C 09 74 17 8A 04  // &....&.w&.<.t...
    34B0: 32 E4 6B F0 03 8B C3 FF 94 46 95 26 8B 77 26 8A  // 2.k......F.&.w&.
    34C0: 04 32 E4 EB D1 8B 44 01 26 29 47 26 26 FF 47 26  // .2....D.&)G&&.G&
    34D0: 26 8B 47 1C 26 8B 77 1E EB 1A 26 8B 77 26 8A 04  // &.G.&.w...&.w&..
    34E0: 32 E4 6B F0 03 8A 84 48 95 26 01 47 26 E9 80 FF  // 2.k....H.&.G&...
    34F0: 33 C0 33 F6 8B D6 5E 5B C3 53 51 52 56 8B D8 8D  // 3.3...^[.SQRV...
    3500: 77 35 26 8B 54 02 26 89 57 14 26 C7 47 16 00 00  // w5&.T.&.W.&.G...
    3510: 8B F0 26 8B 47 20 33 D2 26 01 47 14 26 11 54 16  // ..&.G 3.&.G.&.T.
    3520: 8C D1 8E C1 26 F6 47 2F 06 0F 85 0A 05 26 80 7F  // ....&.G/.....&..
    3530: 34 00 75 22 26 8B 77 16 26 0B 77 14 75 10 26 D1  // 4.u"&.w.&.w.u.&.
    3540: 67 08 26 D1 57 0A 26 D1 67 08 26 D1 57 0A 8B C3  // g.&.W.&.g.&.W...
    3550: E8 79 11 E9 E1 04 26 8A 47 34 32 E4 05 80 00 99  // .y....&.G42.....
    3560: 26 89 47 1C 26 89 57 1E 8B C3 E8 FF FE E9 C7 04  // &.G.&.W.........
    3570: 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4 C1 E0 02  // SV...w5&.D.2....
    3580: 26 8B 37 26 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A  // &.7&.4..&.G.&._.
    3590: 26 89 04 26 89 5C 02 5E 5B C3 53 52 56 8B D8 8C  // &..&.\.^[.SRV...
    35A0: D0 8D 77 35 8E C0 26 8A 54 02 80 FA 40 73 21 26  // ..w5..&.T...@s!&
    35B0: 8B 77 02 32 F6 C1 E2 02 26 8B 74 04 03 F2 26 8B  // .w.2....&.t...&.
    35C0: 57 08 26 8B 47 0A 26 89 14 26 89 44 02 E9 7F 00  // W.&.G.&..&.D....
    35D0: 80 FA 41 75 12 26 8B 47 08 26 8B 57 0A 26 89 47  // ..Au.&.G.&.W.&.G
    35E0: 10 26 89 57 12 EB 68 80 FA 40 75 12 26 8B 47 08  // .&.W..h..@u.&.G.
    35F0: 26 8B 57 0A 26 89 47 0C 26 89 57 0E EB 51 80 FA  // &.W.&.G.&.W..Q..
    3600: 42 75 0A 26 8B 47 08 26 89 47 22 EB 42 80 FA 43  // Bu.&.G.&.G".B..C
    3610: 75 0A 26 8A 47 08 26 88 47 33 EB 33 80 FA 46 75  // u.&.G.&.G3.3..Fu
    3620: 12 26 8B 57 08 26 8B 47 0A 26 89 57 18 26 89 47  // .&.W.&.G.&.W.&.G
    3630: 1A EB 1C 80 FA 47 75 0A 26 8B 47 08 26 89 47 24  // .....Gu.&.G.&.G$
    3640: EB 0D 80 FA 48 75 08 26 8B 47 08 26 89 47 20 5E  // ....Hu.&.G.&.G ^
    3650: 5A 5B C3 53 56 8B D8 8D 77 35 26 8A 44 02 32 E4  // Z[.SV...w5&.D.2.
    3660: 26 89 47 14 26 C7 47 16 00 00 5E 5B C3 53 56 8B  // &.G.&.G...^[.SV.
    3670: D8 26 8B 77 02 26 8B 74 02 8A 04 32 E4 26 89 47  // .&.w.&.t...2.&.G
    3680: 14 26 C7 47 16 00 00 26 8B 5F 02 26 FF 47 02 5E  // .&.G...&._.&.G.^
    3690: 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 34  // [.SV..&.w.&.t..4
    36A0: 26 89 77 14 26 C7 47 16 00 00 26 8B 5F 02 26 83  // &.w.&.G...&._.&.
    36B0: 47 02 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26 8B  // G..^[.SV..&.w.&.
    36C0: 74 02 8B 04 8B 74 02 26 89 47 14 26 89 77 16 26  // t....t.&.G.&.w.&
    36D0: 8B 5F 02 26 83 47 02 04 5E 5B C3 53 52 56 8B D8  // ._.&.G..^[.SRV..
    36E0: E8 70 FF 8B F3 26 8B 47 18 26 8B 57 1A D1 EA D1  // .p...&.G.&.W....
    36F0: D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B C3 E8  // .....&.G.&.T....
    3700: 2B 10 E9 4A FF 53 8B D8 26 8B 5F 02 26 FF 47 02  // +..J.S..&._.&.G.
    3710: 5B C3 53 8B D8 26 8B 5F 02 26 83 47 02 02 5B C3  // [.S..&._.&.G..[.
    3720: 53 56 8B D8 E8 6B FF 8B F3 26 8B 57 20 33 C0 26  // SV...k...&.W 3.&
    3730: 01 57 14 26 11 44 16 8C D2 8E C2 26 8B 47 2E 32  // .W.&.D.....&.G.2
    3740: C0 80 E4 06 3D 00 02 75 07 32 E4 33 D2 5E 5B C3  // ....=..u.2.3.^[.
    3750: 26 8B 47 2E 32 C0 80 E4 06 3D 00 04 74 EB 26 80  // &.G.2....=..t.&.
    3760: 7F 34 00 75 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47  // .4.u..../.^[.&.G
    3770: 34 32 E4 26 89 47 1C 26 C7 47 1E 00 00 8B C3 E8  // 42.&.G.&.G......
    3780: EA FC 5E 5B C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1  // ..^[.S.....&.G..
    3790: E0 02 26 8B 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57  // ..&..&....&..&.W
    37A0: 02 5B C3 A9 37 9E 37 B4 37 03 38 BA 37 D2 37 EC  // .[..7.7.7.8.7.7.
    37B0: 37 F7 37 FD 37 53 51 56 8B D8 E8 B0 FE 8C D2 8E  // 7.7.7SQV........
    37C0: C2 26 83 7F 16 00 75 22 26 83 7F 14 40 73 1B 26  // .&....u"&...@s.&
    37D0: 8B 77 02 26 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8  // .w.&._....&.D...
    37E0: 26 8B 07 26 8B 57 02 E9 7B 05 26 8B 77 14 26 8B  // &..&.W..{.&.w.&.
    37F0: 47 16 83 C6 C0 83 D0 FF 75 71 83 FE 08 77 6C 03  // G.......uq...wl.
    3800: F6 2E FF A4 3B 37 26 8B 47 10 26 8B 57 12 E9 54  // ....;7&.G.&.W..T
    3810: 05 26 8B 47 0C 26 8B 57 0E E9 49 05 26 8B 47 22  // .&.G.&.W..I.&.G"
    3820: EB 4B 26 8A 4F 33 32 ED BB 01 00 33 D2 E3 06 D1  // .K&.O32....3....
    3830: E3 D1 D2 E2 FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED  // ........+.&.O32.
    3840: B8 01 00 33 D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ...3............
    3850: D2 E9 11 05 26 8B 47 18 26 8B 57 1A E9 06 05 26  // ....&.G.&.W....&
    3860: 8B 47 24 EB 08 26 8B 47 20 EB 02 33 C0 33 D2 E9  // .G$..&.G ..3.3..
    3870: F3 04 53 56 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26  // ..SV.......&.G.&
    3880: 8B 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26  // .W.........&.G.&
    3890: 11 54 16 8B C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3  // .T......^[.3.3..
    38A0: 53 56 8B D8 E8 EB FD 26 8B 77 14 26 03 77 22 8B  // SV.....&.w.&.w".
    38B0: 04 8B 54 02 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8  // ..T.^[.S..&.G+..
    38C0: AB FD 26 8B 47 14 26 8B 57 16 5B C3 53 8B D8 26  // ..&.G.&.W.[.S..&
    38D0: C6 47 2B 01 E8 BB FD EB E9 53 8B D8 26 C6 47 2B  // .G+......S..&.G+
    38E0: 00 E8 D2 FD EB DC 53 8B D8 83 C3 35 26 8A 5F 01  // ......S....5&._.
    38F0: C0 EB 03 80 E3 07 32 FF 03 DB FF 97 D6 94 5B C3  // ......2.......[.
    3900: 53 52 56 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // SRV..&.G,2......
    3910: C3 FF 94 F2 94 26 89 47 08 26 89 57 0A 26 8A 47  // .....&.G.&.W.&.G
    3920: 2D 32 E4 8B F0 03 F0 8B C3 FF 94 0A 95 26 89 47  // -2...........&.G
    3930: 04 26 89 57 06 E9 17 FD 53 51 56 8B D8 26 8A 4F  // .&.W....SQV..&.O
    3940: 2B 32 ED 8B F1 8A 8C 3A 95 E3 0A 26 D1 6F 06 26  // +2.....:...&.o.&
    3950: D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02  // ._...&.O+2......
    3960: 8B 8C 1A 95 8B B4 1C 95 26 21 4F 04 26 21 77 06  // ........&!O.&!w.
    3970: 26 8A 4F 2A 32 ED 8B F1 8A 8C 42 95 E3 0A 26 D1  // &.O*2.....B...&.
    3980: 67 04 26 D1 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A  // g.&.W...&.O.&.w.
    3990: 26 89 4F 14 26 89 77 16 E9 CA 03 53 51 52 56 57  // &.O.&.w....SQRVW
    39A0: 8B D8 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6  // ......&.G+2.....
    39B0: 02 26 8A 47 2A 8B F8 8A 8D 42 95 32 ED 8B 84 1A  // .&.G*....B.2....
    39C0: 95 8B 94 1C 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ................
    39D0: D2 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B  // .&!G.&!W.&.G*2..
    39E0: F0 8A 8C 42 95 32 ED E3 0A 26 D1 6F 0A 26 D1 5F  // ...B.2...&.o.&._
    39F0: 08 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 1A 95  // ...&.G+.........
    3A00: 8B 94 1C 95 26 21 47 08 26 21 57 0A 26 8A 47 2A  // ....&!G.&!W.&.G*
    3A10: 32 E4 8B F0 8A 8C 42 95 32 ED E3 0A 26 D1 67 08  // 2.....B.2...&.g.
    3A20: 26 D1 57 0A E2 F6 26 8B 47 14 26 8B 57 16 26 09  // &.W...&.G.&.W.&.
    3A30: 47 08 26 09 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B  // G.&.W._^ZY[.SQV.
    3A40: D8 26 8A 4F 2B 32 ED 8B F1 8A 8C 3A 95 E3 0A 26  // .&.O+2.....:...&
    3A50: D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B  // .o.&._...&.O+2..
    3A60: F1 C1 E6 02 8B 8C 1A 95 8B B4 1C 95 26 21 4F 04  // ............&!O.
    3A70: 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C 42 95  // &!w.&.O*2.....B.
    3A80: E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B  // ..&.o.&._...&.O+
    3A90: 32 ED 8B F1 C1 E6 02 8B 8C 1A 95 8B B4 1C 95 26  // 2..............&
    3AA0: 21 4F 08 26 21 77 0A E9 BB 02 51 52 57 8B D8 8C  // !O.&!w....QRW...
    3AB0: D0 8E C0 26 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4  // ...&..+.t.&.G,2.
    3AC0: 8B F0 03 F0 8B C3 FF 94 F2 94 26 89 47 08 26 89  // ..........&.G.&.
    3AD0: 57 0A EB 10 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // W...&.G,2.......
    3AE0: FF 94 FE 94 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3  // ....&.G-2.......
    3AF0: FF 94 0A 95 26 89 47 04 26 89 57 06 8C D2 8E C2  // ....&.G.&.W.....
    3B00: 26 80 7F 2B 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1  // &..+.tJ&.G+2....
    3B10: E6 02 26 8A 47 2A 8B F8 8A 8D 42 95 32 ED 8B 84  // ..&.G*....B.2...
    3B20: 1A 95 8B 94 1C 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0  // ................
    3B30: F7 D2 26 21 47 08 26 21 57 0A 8B C3 E8 F9 FD 26  // ..&!G.&!W......&
    3B40: 8B 47 04 26 8B 57 06 26 09 47 08 26 09 57 0A EB  // .G.&.W.&.G.&.W..
    3B50: 10 26 8B 57 04 26 8B 47 06 26 89 57 08 26 89 47  // .&.W.&.G.&.W.&.G
    3B60: 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E6  // .&.G,2..........
    3B70: 94 5F 5A 59 C3 53 51 52 56 57 8B D8 26 8A 47 2A  // ._ZY.SQRVW..&.G*
    3B80: 32 E4 8B F0 8A 8C 42 95 32 ED E3 0A 26 D1 67 04  // 2.....B.2...&.g.
    3B90: 26 D1 57 06 E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4  // &.W.......&.G+2.
    3BA0: 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D 42 95 32  // .....&.G*....B.2
    3BB0: ED 8B 84 1A 95 8B 94 1C 95 E3 06 D1 E0 D1 D2 E2  // ................
    3BC0: FA F7 D0 F7 D2 26 09 47 04 26 09 57 06 26 8B 47  // .....&.G.&.W.&.G
    3BD0: 04 26 8B 57 06 26 21 47 08 26 21 57 0A E9 56 FE  // .&.W.&!G.&!W..V.
    3BE0: 55 8B EC 51 52 50 8B D8 26 8A 47 2C 32 E4 8B F0  // U..QRP..&.G,2...
    3BF0: 03 F0 8B C3 FF 94 F2 94 26 89 47 08 26 89 57 0A  // ........&.G.&.W.
    3C00: 26 8A 47 2B 88 46 FA 8B C3 E8 DA FC 26 89 47 04  // &.G+.F......&.G.
    3C10: 26 89 57 06 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3  // &.W.&.O-2.......
    3C20: FF 94 0A 95 26 89 47 14 26 89 57 16 8B C3 E8 44  // ....&.G.&.W....D
    3C30: FF 8A 46 FA 32 E4 8B F0 8A 8C 3A 95 E3 0A 26 D1  // ..F.2.....:...&.
    3C40: 6F 16 26 D1 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2  // o.&._...&.W+2...
    3C50: C1 E6 02 8B 84 1A 95 8B 94 1C 95 26 21 47 14 26  // ...........&!G.&
    3C60: 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 42 95 32  // !W.&.G*2.....B.2
    3C70: ED E3 0A 26 D1 67 14 26 D1 57 16 E2 F6 26 8B 47  // ...&.g.&.W...&.G
    3C80: 14 26 8B 57 16 26 09 47 08 26 09 57 0A 26 8A 47  // .&.W.&.G.&.W.&.G
    3C90: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E6 94 8D 66 FC  // ,2............f.
    3CA0: 5A 59 5D C3 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED  // ZY].Q...V.&.O+2.
    3CB0: 8B F1 8A 8C 3A 95 E3 0A 26 D1 6F 06 26 D1 5F 04  // ....:...&.o.&._.
    3CC0: E2 F6 8B C3 E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03  // .......&.O,2....
    3CD0: F1 8B C3 FF 94 E6 94 59 C3 8B D8 E8 22 FC 8B C3  // .......Y...."...
    3CE0: E8 55 FC 26 8B 47 04 26 8B 77 06 26 09 47 08 26  // .U.&.G.&.w.&.G.&
    3CF0: 09 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .w.&.G,2........
    3D00: 94 E6 94 C3 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC  // ....SV........(.
    3D10: 26 8B 47 04 26 8B 77 06 26 31 47 08 26 31 77 0A  // &.G.&.w.&1G.&1w.
    3D20: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E6 94  // &.G,2...........
    3D30: 5E 5B C3 53 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB  // ^[.SQV..........
    3D40: 26 8B 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6  // &.O...&.g.&.W...
    3D50: 8B C3 E8 46 FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B  // ...F.&.O,2......
    3D60: C3 FF 94 E6 94 5E 59 5B C3 53 51 56 8B D8 E8 8F  // .....^Y[.SQV....
    3D70: FB 8B C3 E8 C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A  // ......&.O...&.o.
    3D80: 26 D1 5F 08 E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3  // &._.....R...r...
    3D90: E8 A5 FB 8B F3 26 8B 47 04 26 8B 57 06 26 01 47  // .....&.G.&.W.&.G
    3DA0: 08 26 11 54 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4  // .&.T......&.G,2.
    3DB0: 8B F0 03 F0 8B C3 FF 94 E6 94 5A C3 52 8B D8 E8  // ..........Z.R...
    3DC0: 3E FB 8B C3 E8 71 FB 8B F3 26 8B 47 04 26 8B 57  // >....q...&.G.&.W
    3DD0: 06 26 29 47 08 26 19 54 0A EB CA 51 52 8B F0 E8  // .&)G.&.T...QR...
    3DE0: 1E FB 8B C6 E8 55 FC 26 8B 44 08 26 8B 54 0A 26  // .....U.&.D.&.T.&
    3DF0: 8B 5C 04 26 8B 4C 06 E8 F7 F2 26 89 44 0C 26 89  // .\.&.L....&.D.&.
    3E00: 54 0E 5A 59 C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC  // T.ZY.R........,.
    3E10: 8B C2 E8 5C 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B  // ...\.Z.QRW......
    3E20: C6 E8 18 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04  // ....&.D.&.T.&.\.
    3E30: 26 8B 4C 06 E8 36 F2 26 89 44 0C 26 89 54 0E 8C  // &.L..6.&.D.&.T..
    3E40: D7 8E C7 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26  // ...&.D.&.T.&.\.&
    3E50: 8B 4C 06 E8 17 F2 26 89 5C 10 26 89 4C 12 E9 10  // .L....&.\.&.L...
    3E60: FD 52 8B D0 E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3  // .R..............
    3E70: 07 5A C3 51 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C  // .Z.QR...........
    3E80: D1 8E C1 26 8B 47 08 26 8B 57 0A 26 3B 57 06 75  // ...&.G.&.W.&;W.u
    3E90: 0E 26 3B 47 04 75 08 26 C6 47 30 01 5A 59 C3 8B  // .&;G.u.&.G0.ZY..
    3EA0: D0 26 8B 47 0A 26 3B 47 06 72 08 75 0A 26 3B 57  // .&.G.&;G.r.u.&;W
    3EB0: 04 73 04 33 C0 EB 03 B8 02 00 26 88 47 30 5A 59  // .s.3......&.G0ZY
    3EC0: C3 51 52 57 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0  // .QRW..&.G,2.....
    3ED0: 8B C3 FF 94 F2 94 26 89 47 08 26 89 57 0A 8C D0  // ......&.G.&.W...
    3EE0: 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A  // ..&.G+2.........
    3EF0: 8D 3A 95 32 ED 8B 84 1A 95 8B 94 1C 95 E3 06 D1  // .:.2............
    3F00: E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57  // .........&!G.&!W
    3F10: 0A E9 4D FC 55 8B EC 51 52 57 83 EC 06 8B D8 26  // ..M.U..QRW.....&
    3F20: 8A 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 3A 95  // .G+2..........:.
    3F30: 32 ED 8B 84 1A 95 89 46 F4 8B 84 1C 95 89 46 F6  // 2......F......F.
    3F40: E3 08 D1 66 F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6  // ...f..V....~..F.
    3F50: 89 46 F8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF  // .F.&.G,2........
    3F60: 94 F2 94 26 89 47 08 26 89 57 0A 8B C3 E8 47 F9  // ...&.G.&.W....G.
    3F70: 26 89 47 04 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7  // &.G.&.W......V..
    3F80: D2 26 23 47 08 26 23 57 0A 26 89 47 14 26 89 57  // .&#G.&#W.&.G.&.W
    3F90: 16 26 21 7F 08 8B 46 F6 26 21 47 0A 8C D1 8D 77  // .&!...F.&!G....w
    3FA0: 35 8E C1 26 80 3C 19 73 12 26 8B 4F 04 E3 0A 26  // 5..&.<.s.&.O...&
    3FB0: D1 67 08 26 D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3  // .g.&.W.....&.O..
    3FC0: 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B  // .&.o.&._...&!...
    3FD0: 46 F8 26 21 47 0A 26 8B 57 14 26 8B 47 16 26 09  // F.&!G.&.W.&.G.&.
    3FE0: 57 08 26 09 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // W.&.G.&.G,2.....
    3FF0: 8B C3 FF 94 E6 94 8D 66 FA 5F E9 A3 FC 52 8B D8  // .......f._...R..
    4000: E8 FD F8 8B C3 E8 34 FA 26 8B 47 08 26 8B 57 0A  // ......4.&.G.&.W.
    4010: 26 85 57 06 75 06 26 85 47 04 74 05 B8 03 00 EB  // &.W.u.&.G.t.....
    4020: 03 B8 01 00 26 88 47 30 5A C3 53 51 52 56 8B D8  // ....&.G0Z.SQRV..
    4030: 26 8A 4F 2D 32 ED 8B F1 03 F1 FF 94 0A 95 26 89  // &.O-2.........&.
    4040: 47 04 26 89 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C  // G.&.W.&.G+2.....
    4050: 3A 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A  // :...&.o.&._...&.
    4060: 47 2B 8B F0 C1 E6 02 8B 84 1A 95 8B 94 1C 95 26  // G+.............&
    4070: 21 47 04 26 21 57 06 E9 BD F9 52 8B D8 E8 AA FF  // !G.&!W....R.....
    4080: 26 8B 47 04 26 8B 57 06 26 89 47 18 26 89 57 1A  // &.G.&.W.&.G.&.W.
    4090: 5A C3 51 52 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77  // Z.QR.........&.w
    40A0: 02 26 8B 74 02 81 3C 5A 5A 74 5B 26 8B 77 02 26  // .&.t..<ZZt[&.w.&
    40B0: 8B 74 02 80 3C 63 75 E1 26 8B 77 02 26 FF 44 02  // .t..<cu.&.w.&.D.
    40C0: 8B C3 E8 21 F8 26 89 47 08 26 89 57 0A 8B C3 E8  // ...!.&.G.&.W....
    40D0: FA F7 26 89 47 14 26 89 57 16 8C D1 8E C1 26 8B  // ..&.G.&.W.....&.
    40E0: 57 04 26 8B 47 06 26 3B 47 0A 75 AD 26 3B 57 08  // W.&.G.&;G.u.&;W.
    40F0: 75 A7 26 8B 77 02 26 8B 04 26 03 47 14 8B DE 26  // u.&.w.&..&.G...&
    4100: 89 47 02 5A 59 C3 26 8B 5F 02 26 83 47 02 02 5A  // .G.ZY.&._.&.G..Z
    4110: 59 C3 52 57 8B D8 8C D0 8E C0 26 8B 77 02 26 8B  // Y.RW......&.w.&.
    4120: 74 02 8A 54 01 84 D2 75 08 26 C7 47 22 00 00 EB  // t..T...u.&.G"...
    4130: 2F 80 FA FF 75 14 26 8B 77 02 26 8B 3F 26 8B 34  // /...u.&.w.&.?&.4
    4140: 26 2B 75 02 26 89 77 22 EB 16 26 8B 07 E8 E3 02  // &+u.&.w"..&.....
    4150: 8B F0 8A C2 32 E4 03 C0 03 F0 8B 04 26 89 47 22  // ....2.......&.G"
    4160: 26 8B 5F 02 26 83 47 02 02 5F 5A C3 8B D8 26 80  // &._.&.G.._Z...&.
    4170: 67 2F F9 26 8B 77 02 26 8B 74 02 8A 44 01 26 88  // g/.&.w.&.t..D.&.
    4180: 47 34 26 8B 5F 02 26 83 47 02 03 C3 8B D8 26 8B  // G4&._.&.G.....&.
    4190: 77 02 26 8B 74 02 8B 74 01 26 89 77 20 EB E3 53  // w.&.t..t.&.w ..S
    41A0: 8B D8 26 8A 47 2C 32 E4 24 03 26 80 67 2F F9 C1  // ..&.G,2.$.&.g/..
    41B0: E0 09 26 09 47 2E E9 4F F5 8B D8 26 8B 77 02 26  // ..&.G..O...&.w.&
    41C0: 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06  // .t..D.2.&.G.&.G.
    41D0: 00 00 8B C3 E8 40 04 26 8B 5F 02 26 83 47 02 02  // .....@.&._.&.G..
    41E0: C3 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4  // ...&.w.&.t..D.2.
    41F0: 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 08 04 EB  // &.G.&.G.........
    4200: D6 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01  // .SV..&.w.&.t..D.
    4210: 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 06  // 2.&.G.&.G.......
    4220: 04 E9 86 F4 53 56 8B D8 26 8B 77 02 26 8B 74 02  // ....SV..&.w.&.t.
    4230: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    4240: C3 E8 F0 03 E9 63 F4 53 56 8B D8 26 8B 77 02 8B  // .....c.SV..&.w..
    4250: DE 26 8B 5F 02 8B 5F 01 83 C3 03 26 01 5C 02 5E  // .&._.._....&.\.^
    4260: 5B C3 51 52 8B D8 26 8B 77 02 26 83 44 02 02 26  // [.QR..&.w.&.D..&
    4270: 8B 07 E8 A0 01 8B C8 26 8B 77 28 8A 44 01 32 E4  // .......&.w(.D.2.
    4280: 03 C0 8B F1 03 F0 83 3C 00 74 4F 26 8B 77 28 8A  // .......<.tO&.w(.
    4290: 54 01 32 F6 8B C3 E8 B0 01 26 88 47 31 26 8B 77  // T.2......&.G1&.w
    42A0: 02 26 8B 34 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8  // .&.4.D....2.$...
    42B0: 02 32 E4 24 1F 26 80 67 2F 07 C1 E0 0B 26 09 47  // .2.$.&.g/....&.G
    42C0: 2E 26 8B 37 26 8B 47 2E C1 E8 0B C1 E0 02 26 01  // .&.7&.G.......&.
    42D0: 04 26 C6 47 32 01 26 89 4F 28 5A 59 C3 53 8B D8  // .&.G2.&.O(ZY.S..
    42E0: 26 C6 47 32 82 5B C3 57 8B D8 8C D6 8E C6 26 80  // &.G2.[.W......&.
    42F0: 7F 2C 05 74 0A 26 8A 47 2C 26 3A 47 30 75 1E 26  // .,.t.&.G,&:G0u.&
    4300: 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74  // .w.&.t.&...&.=.t
    4310: 01 03 F7 26 8B 5F 02 26 89 77 02 5F C3 26 8B 5F  // ...&._.&.w._.&._
    4320: 02 26 83 47 02 03 5F C3 53 56 57 8B D8 8C D6 8E  // .&.G.._.SVW.....
    4330: C6 26 80 7F 30 01 74 0A 26 8A 47 30 26 3A 47 2C  // .&..0.t.&.G0&:G,
    4340: 75 20 26 8B 77 02 26 8B 74 02 26 8B 7F 02 26 8B  // u &.w.&.t.&...&.
    4350: 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02 5F 5E  // =.t...&._.&.w._^
    4360: 5B C3 26 8B 5F 02 26 83 47 02 03 EB F1 53 56 57  // [.&._.&.G....SVW
    4370: 8B D8 8C D0 8E C0 26 80 7F 30 01 74 E5 EB C3 55  // ......&..0.t...U
    4380: 8B EC 53 51 52 57 8B D8 26 8B 77 02 26 8B 74 02  // ..SQRW..&.w.&.t.
    4390: 8A 04 26 C6 47 3D 00 8C D1 8E C1 26 80 7F 3D 08  // ..&.G=.....&..=.
    43A0: 73 20 26 8B 77 02 26 8A 57 3D 32 F6 26 8B 7C 02  // s &.w.&.W=2.&.|.
    43B0: 03 FA 8B F3 03 F2 8A 15 26 88 54 35 26 FE 47 3D  // ........&.T5&.G=
    43C0: EB D5 26 8B 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A  // ..&.....2.......
    43D0: 94 67 95 26 01 55 02 26 8B 7F 28 8A 55 01 80 E2  // .g.&.U.&..(.U...
    43E0: 07 26 88 57 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80  // .&.W-&..(.U.....
    43F0: E2 07 26 88 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06  // ..&.W+&..(.U....
    4400: 26 88 57 2A 8A 94 66 95 26 88 57 2C 8D 66 F8 5F  // &.W*..f.&.W,.f._
    4410: 5A 59 5B 5D C3 53 56 8B D8 26 8B 77 02 8B C6 8B  // ZY[].SV..&.w....
    4420: 74 48 03 F0 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04  // tH.....t........
    4430: 5E 5B C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48  // ^[.SV..&.w....tH
    4440: 03 F0 8B D8 8B 74 20 EB E0 8A C2 C3 16 07 55 8B  // .....t .......U.
    4450: EC 53 51 56 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF  // .SQVW..@...F....
    4460: 8B D8 89 46 E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E  // ...F.&.E.._....^
    4470: DE 83 46 DE 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D  // ..F........F.2..
    4480: 46 B8 E8 C4 FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA  // F......2....^...
    4490: 83 3F 00 0F 84 65 01 88 46 E9 80 66 E7 F9 C6 46  // .?...e..F..f...F
    44A0: EC 00 C7 46 D8 00 00 66 C7 46 D0 00 00 00 00 C7  // ...F...f.F......
    44B0: 46 F6 00 00 C6 46 EA 01 EB 06 3C 01 0F 85 8C 00  // F....F....<.....
    44C0: 8A 56 E9 8A C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F  // .V...2....^....?
    44D0: 00 74 75 26 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4  // .tu&.E......G.2.
    44E0: 8B C8 83 C1 09 32 ED 80 E1 FE 83 F9 00 74 07 D1  // .....2.......t..
    44F0: E9 33 C0 50 E2 FD 8B C4 8B D8 89 46 BA 85 C0 74  // .3.P.......F...t
    4500: 41 83 C0 08 26 89 47 04 8A C2 32 E4 03 C0 8B 5E  // A...&.G...2....^
    4510: E0 03 D8 26 8B 45 02 03 07 8B 5E BA 26 89 07 8B  // ...&.E....^.&...
    4520: 5E BA 26 8B 07 83 C0 06 26 89 47 02 8B 5E BA 8B  // ^.&.....&.G..^..
    4530: 76 F6 26 89 77 06 8B 5E BA 89 5E F6 C6 46 EA 00  // v.&.w..^..^..F..
    4540: EB 0A C6 46 EA 87 EB 04 C6 46 EA 83 8A 46 EA 32  // ...F.....F...F.2
    4550: E4 83 F8 10 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4  // .........f..F.2.
    4560: 85 C0 0F 8F 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F  // .........^...&._
    4570: 02 89 5E E0 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A  // ..^..^.&._..?[uJ
    4580: C6 46 EA 10 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E  // .F...^.&._..^..^
    4590: BA 26 8B 1F 8B 47 04 32 E4 8B C8 83 C1 09 32 ED  // .&...G.2......2.
    45A0: 80 E1 FE 03 E1 8B 5E F6 89 5E BA 85 DB 74 AC 26  // ......^..^...t.&
    45B0: 8B 1F 8B 47 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1  // ...G....2.$.....
    45C0: E0 02 8B 5E B8 26 29 07 EB 91 8D 46 B8 E8 AF FD  // ...^.&)....F....
    45D0: 8A D0 8D 46 B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D  // ...F......2.....
    45E0: 46 B8 FF 97 64 95 E9 72 FF 83 7E F6 00 0F 85 C9  // F...d..r..~.....
    45F0: FE 80 7E EA 10 74 05 8A 46 EA EB 02 32 C0 8D 66  // ..~..t..F...2..f
    4600: F8 5F 5E E9 0B FE C3 53 51 8B D8 26 8A 4F 04 32  // ._^....SQ..&.O.2
    4610: ED E8 9B E8 59 5B C3 53 51 8B D8 26 8A 4F 04 32  // ....Y[.SQ..&.O.2
    4620: ED E8 96 E8 59 5B C3 53 8B D8 26 8A 47 04 32 E4  // ....Y[.S..&.G.2.
    4630: E6 80 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 13  // ..[.SQ..&.O.2...
    4640: D8 59 5B C3 53 8B D8 66 50 66 52 66 51 66 26 8B  // .Y[.S..fPfRfQf&.
    4650: 47 08 66 26 8B 57 10 66 26 8B 4F 04 66 F7 F1 66  // G.f&.W.f&.O.f..f
    4660: 26 89 47 0C 66 26 89 57 10 66 59 66 5A 66 58 5B  // &.G.f&.W.fYfZfX[
    4670: C3 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66  // .S..fPfRfQf&.G.f
    4680: 26 8B 4F 04 66 F7 E1 66 26 89 47 0C 66 26 89 57  // &.O.f..f&.G.f&.W
    4690: 10 66 59 66 5A 66 58 5B C3 53 57 8B D8 26 8B 5F  // .fYfZfX[.SW..&._
    46A0: 14 E8 52 EB 8B D0 66 C1 E8 10 92 5F 5B C3 53 57  // ..R...f...._[.SW
    46B0: 8B D8 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1  // ..&.G.&.W.....f.
    46C0: E3 10 8B DA C1 E3 02 E8 50 EB EB D8 53 52 57 8B  // ........P...SRW.
    46D0: D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2  // .&.G.&.W..f.....
    46E0: 26 8B 5F 14 E8 74 EA 5F 5A 5B C3 53 52 8B D8 26  // &._..t._Z[.SR..&
    46F0: 8B 47 1C 26 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B  // .G.&.W..f.....&.
    4700: 5F 26 8B 5F 01 E8 53 EA 5A 5B C3 53 52 56 8B F0  // _&._..S.Z[.SRV..
    4710: 26 8B 5C 26 8B 5F 01 E8 DC EA 8B D0 66 C1 E8 10  // &.\&._......f...
    4720: 92 26 89 44 1C 26 89 54 1E 5E 5A 5B C3 53 51 52  // .&.D.&.T.^Z[.SQR
    4730: 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66 C1 E0 10  // W..&.G.&.W..f...
    4740: 8B C2 8B C8 26 8B 47 14 26 8B 57 16 8B D8 87 D3  // ....&.G.&.W.....
    4750: 66 C1 E3 10 8B DA C1 E3 02 8B C1 E8 30 EA 5F 5A  // f...........0._Z
    4760: 59 5B C3 8B D0 66 C1 E8 10 92 C3 00 1E 06 66 50  // Y[...f........fP
    4770: 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F 0A C0  // fQfRfSfUfVfW....
    4780: 75 06 E8 37 01 E9 D8 00 3C 01 75 06 E8 67 01 E9  // u..7....<.u..g..
    4790: CE 00 3C 02 75 06 E8 9B 02 E9 C4 00 3C 03 75 0B  // ..<.u.......<.u.
    47A0: E8 CF 03 8B EC 89 5E 0C E9 B5 00 3C 04 75 0B E8  // ......^....<.u..
    47B0: DE 03 8B EC 89 5E 0C E9 A6 00 3C 05 75 0B E8 09  // .....^....<.u...
    47C0: 05 8B EC 89 56 10 E9 97 00 3C 06 75 11 E8 86 04  // ....V....<.u....
    47D0: 8B EC 89 5E 0C 89 4E 14 89 56 10 E9 82 00 3C 07  // ...^..N..V....<.
    47E0: 75 10 E8 78 05 8B EC 88 7E 0D 89 4E 14 89 56 10  // u..x....~..N..V.
    47F0: EB 6E 3C 08 75 0A E8 BB 04 8B EC 88 7E 0D EB 60  // .n<.u.......~..`
    4800: 3C 09 75 05 E8 B4 05 EB 57 3C 0A 75 10 E8 FC 05  // <.u.....W<.u....
    4810: 8B EC 89 4E 14 89 7E 00 8C 46 1C EB 43 3C 0B 75  // ...N..~..F..C<.u
    4820: 0B E8 F6 05 8B EC 66 89 4E 14 EB 34 3C 10 75 0A  // ......f.N..4<.u.
    4830: E8 EB 05 8B EC 89 5E 0C EB 26 3C 11 75 0D E8 1F  // ......^..&<.u...
    4840: 06 8B EC 89 5E 0C 89 4E 14 EB 15 3C 15 75 0F E8  // ....^..N...<.u..
    4850: 4A 06 8B EC 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0  // J....^....O...2.
    4860: 8B EC 89 46 18 66 5F 66 5E 66 5D 66 5B 66 5A 66  // ...F.f_f^f]f[fZf
    4870: 59 66 58 07 1F C3 50 1E 2E 8E 1E E5 03 8C D8 A3  // YfX...P.........
    4880: E8 5A A3 F8 5A A3 0A 5B 2E 8E 1E DD 03 A3 AA 04  // .Z..Z..[........
    4890: 1F 58 CB 00 30 31 2E 30 30 00 56 45 53 41 00 03  // .X..01.00.VESA..
    48A0: 6C 02 00 00 01 00 00 00 00 00 00 00 00 03 32 0F  // l.............2.
    48B0: 79 01 00 00 06 01 00 00 2C 48 00 00 B9 3F 00 8B  // y.......,H...?..
    48C0: DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B FB BE 32 48  // .....f3..f....2H
    48D0: B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18  // ."......O..G..O.
    48E0: 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E 0E 1F E8 3E  // .O..O .."......>
    48F0: D4 B0 4F 32 E4 C3 56 51 57 B9 10 00 66 33 C0 F3  // ..O2..VQW...f3..
    4900: 66 AB 5F 59 8C DB 06 1F C7 05 BB 00 C6 45 02 07  // f._Y.........E..
    4910: C7 45 04 40 00 C7 45 06 40 00 C6 45 1B 04 C6 45  // .E.@..E.@..E...E
    4920: 18 01 C6 45 1A 01 C6 45 1E 01 66 C7 45 3E 00 84  // ...E...E..f.E>..
    4930: D7 17 8E DB E8 4D BE 66 0B C0 0F 84 EE 00 06 1F  // .....M.f........
    4940: 66 89 45 28 8C C8 66 C1 E0 10 B8 BF 4C 66 89 45  // f.E(..f.....Lf.E
    4950: 0C 81 F9 FF 81 0F 84 CF 00 80 E5 03 B2 01 53 8E  // ..............S.
    4960: DB BE 80 1C E8 F9 D1 5B 06 1F 0F 84 BE 00 53 E8  // .......[......S.
    4970: 66 D4 66 89 45 12 C7 45 16 08 10 8D 5C 0C E8 A3  // f.f.E..E....\...
    4980: E8 66 89 45 1F 66 89 45 36 8D 5C 10 E8 95 E8 66  // .f.E.f.E6.\....f
    4990: 89 45 23 66 89 45 3A 8D 5C 08 E8 87 E8 0A C0 75  // .E#f.E:.\......u
    49A0: 04 5B E9 87 00 E8 30 D4 66 C1 E8 10 3D 58 02 74  // .[....0.f...=X.t
    49B0: 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB 04 C6 45  // .=^.t.w..E.....E
    49C0: 17 0E E8 DA D3 80 F9 00 74 04 C6 45 1B 06 2E A1  // ........t..E....
    49D0: DF 03 89 45 08 8D 5C 04 E8 49 E8 66 8B C8 66 C1  // ...E..\..I.f..f.
    49E0: E9 10 D3 E0 89 45 10 89 45 32 B0 08 D2 E0 88 45  // .....E..E2.....E
    49F0: 19 8D 5C 14 E8 2D E8 5B 3D 00 03 77 2F 53 8B D8  // ..\..-.[=..w/S..
    4A00: B8 00 03 33 D2 F7 F3 5B FE C8 88 45 1D 88 45 35  // ...3...[...E..E5
    4A10: 88 45 34 8E DB 57 53 BE 80 1C E8 BE BD 5B 5F 0B  // .E4..WS......[_.
    4A20: C9 75 05 06 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F  // .u....%.2......O
    4A30: 8E DB 5E C3 81 FB FF 81 74 6A 0A FF 75 04 8B C3  // ..^.....tj..u...
    4A40: EB 21 F6 C7 08 75 63 8B CB B2 01 BE 20 1C E8 0F  // .!...uc..... ...
    4A50: D1 74 57 E8 61 D3 0A C0 75 0E 66 C1 E8 10 80 E7  // .tW.a...u.f.....
    4A60: 80 0A C7 E8 91 04 EB 3C E8 7B C1 74 05 E8 A0 BE  // .......<.{.t....
    4A70: EB 00 E8 9D C2 BE 20 1C E8 34 BD 74 2D E8 A5 00  // ...... ..4.t-...
    4A80: E8 2C 00 66 BB 20 1C 00 1C E8 22 D3 BE 00 1C E8  // .,.f. ....".....
    4A90: 25 D3 66 C1 E8 10 8B D8 32 C0 F6 C7 80 74 02 B0  // %.f.....2....t..
    4AA0: 40 E8 74 BD B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56  // @.t..O2....O...V
    4AB0: 06 33 C0 8E C0 BE 20 1C E8 1D D3 8B C8 66 C1 E8  // .3.... ......f..
    4AC0: 10 8B D0 C1 E9 03 26 89 0E 4A 04 C1 EA 04 FE CA  // ......&..J......
    4AD0: 26 88 16 84 04 26 C6 06 51 04 00 26 C6 06 50 04  // &....&..Q..&..P.
    4AE0: 00 26 C6 06 49 04 62 26 C7 06 4C 04 00 A0 26 C6  // .&..I.b&..L...&.
    4AF0: 06 85 04 10 26 C7 06 0C 01 B9 64 8C C8 26 A3 0E  // ....&.....d..&..
    4B00: 01 07 5E C3 01 0F 00 0A 00 00 00 00 00 40 05 0F  // ..^..........@..
    4B10: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    4B20: 0F 01 00 0F 00 FC BA C4 03 B8 00 01 EF B9 04 00  // ................
    4B30: B4 01 BE 9C 4A AC 86 E0 EF 8A E0 FE C4 E2 F6 B8  // ....J...........
    4B40: 00 03 EF B9 09 00 BA CE 03 32 E4 BE A0 4A 8A C4  // .........2...J..
    4B50: EE AC 42 EE 4A FE C4 E2 F5 BA DA 03 EC B9 14 00  // ..B.J...........
    4B60: BA C0 03 32 E4 BE A9 4A 8A C4 EE AC EE FE C4 E2  // ...2...J........
    4B70: F7 C3 BE 00 1C E8 3F D2 66 C1 E8 10 8B D8 E8 0F  // ......?.f.......
    4B80: D2 75 05 E8 FB D1 75 04 B8 4F 00 C3 B8 4F 03 C3  // .u....u..O...O..
    4B90: 83 E1 0F 0F 84 BB 00 0A D2 75 0C B8 00 1C E8 1D  // .........u......
    4BA0: 03 83 C3 11 E9 A6 00 80 FA 01 75 33 8B FB BB C9  // ..........u3....
    4BB0: 05 B9 08 00 FC E8 3A E6 66 AB 43 E2 F8 66 C1 E7  // ......:.f.C..f..
    4BC0: 10 66 C1 EF 10 B9 00 01 BA 00 01 0E 1F E8 C3 BE  // .f..............
    4BD0: 06 1F B8 01 1C B9 07 00 8B DF E8 E1 02 EB 6E 80  // ..............n.
    4BE0: FA 02 75 6E 8B F3 06 1F FC BB C9 05 B9 08 00 66  // ..un...........f
    4BF0: AD E8 59 E5 43 E2 F8 06 56 0E 1F BB D0 05 E8 F1  // ..Y.C...V.......
    4C00: E5 8A D0 80 E2 03 66 C1 E8 10 8B C8 BE 00 1C E8  // ......f.........
    4C10: 4E CF BB CE 05 E8 DA E5 8B C8 66 C1 E8 10 8B D0  // N.........f.....
    4C20: B0 18 B7 01 E8 94 B8 5B 07 53 81 C3 00 04 B8 02  // .......[.S......
    4C30: 1C B9 07 00 E8 87 02 5E 8B FE 66 C1 E7 10 66 C1  // .......^..f...f.
    4C40: EF 10 B9 00 01 BA 00 01 0E 1F E8 95 BE B0 4F 32  // ..............O2
    4C50: E4 C3 32 C0 C3 00 E8 37 D1 74 53 BE 00 1C 80 FB  // ..2....7.tS.....
    4C60: 00 74 18 80 FB 01 75 05 E8 75 D1 EB 1D 80 FB 02  // .t....u..u......
    4C70: 75 10 8B C1 E8 28 D1 D3 E8 8B C8 E8 D1 BD 74 2E  // u....(........t.
    4C80: EB 08 80 FB 03 75 24 E8 CC D0 E8 12 D1 8B D8 D3  // .....u$.........
    4C90: E3 50 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04  // .P3....;.w......
    4CA0: F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F  // ....X...O..2...O
    4CB0: B4 03 C3 00 0A DB 75 07 8A EF E8 AB BF EB 05 E8  // ......u.........
    4CC0: 90 BF 8A F8 B0 4F 32 E4 C3 00 E8 C3 D0 74 2C BE  // .....O2......t,.
    4CD0: 00 1C E8 E2 D0 66 C1 E8 10 F6 C4 40 75 1D 0A FF  // .....f.....@u...
    4CE0: 75 05 E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8  // u.........u.....
    4CF0: 00 E5 D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3  // .......O2...O...
    4D00: 32 C0 C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40  // 2..RSfP........@
    4D10: 66 C1 E0 10 8B C2 BB 13 00 E8 31 E4 BB 12 00 E8  // f.........1.....
    4D20: 2B E4 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52  // +.fX[Z....fPfQfR
    4D30: 66 53 66 55 66 56 66 57 0E 1F E8 27 E5 E8 8A FF  // fSfUfVfW...'....
    4D40: E8 46 E5 8B EC 89 56 10 89 46 18 66 5F 66 5E 66  // .F....V..F.f_f^f
    4D50: 5D 66 5B 66 5A 66 59 66 58 07 1F 9D CB E8 30 D0  // ]f[fZfYfX.....0.
    4D60: 74 54 F6 C3 7F 75 38 53 BE 00 1C E8 72 D0 F7 E2  // tT...u8S....r...
    4D70: 66 C1 E2 10 8B D0 66 81 E1 FF FF 00 00 66 03 D1  // f.....f......f..
    4D80: E8 1C D0 80 E2 FC 66 D3 E2 66 81 E2 FF FF FF 02  // ......f..f......
    4D90: 8D 5C 18 66 8B C2 E8 EB E3 5B E8 9A BC EB 0F 80  // .\.f.....[......
    4DA0: FB 82 74 C3 80 FB 01 75 0A E8 7F BC 32 FF B0 4F  // ..t....u....2..O
    4DB0: 32 E4 C3 32 C0 C3 B0 4F B4 03 C3 E8 D2 CF 74 47  // 2..2...O......tG
    4DC0: 80 FF 20 74 08 66 C1 E7 10 66 C1 EF 10 81 F9 00  // .. t.f...f......
    4DD0: 01 77 31 0A DB 74 05 80 FB 80 75 10 32 F6 E8 71  // .w1..t....u.2..q
    4DE0: BE 3C 06 74 02 B6 01 E8 F8 BC EB 13 80 FB 01 75  // .<.t...........u
    4DF0: 13 32 F6 E8 5C BE 3C 06 74 02 B6 01 E8 94 BC B0  // .2..\.<.t.......
    4E00: 4F 32 E4 C3 32 C0 C3 B0 4F B4 03 C3 0E 07 BF 80  // O2..2...O.......
    4E10: 92 2E 8B 0E 7E 92 B8 4F 00 C3 32 C0 C3 00 0A DB  // ....~..O..2.....
    4E20: 75 06 B7 04 B3 10 EB 2F 80 FB 01 75 1D 53 32 C9  // u....../...u.S2.
    4E30: 0A FF 74 02 B1 01 E8 D6 BD B1 01 0A FF 74 02 B1  // ..t..........t..
    4E40: 00 E8 B7 BE E8 A0 BB 5B EB 0D 80 FB 02 75 0D E8  // .......[.....u..
    4E50: CF BD 8A F8 C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3  // ........O2...O..
    4E60: 80 FB 01 75 09 33 C0 E8 35 BE 74 2B EB 24 80 FB  // ...u.3..5.t+.$..
    4E70: 07 75 24 0A FF 75 0E B0 82 E8 3F B6 0A C9 74 12  // .u$..u....?...t.
    4E80: B9 03 03 EB 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8  // .........t......
    4E90: 29 B6 B0 4F 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A  // )..O2...O.......
    4EA0: DB 75 05 BB 02 01 EB 0C 33 C0 53 E8 4D BE E8 95  // .u......3.S.M...
    4EB0: C5 5B 74 05 B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC  // .[t..O2...O.....
    4EC0: 1D 72 03 CD 42 C3 1E 06 66 50 66 51 66 52 66 53  // .r..B...fPfQfRfS
    4ED0: 66 55 66 56 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0  // fUfVfW..P.......
    4EE0: 58 2E FF 94 A0 4E 66 5F 66 5E 66 5D 66 5B 66 5A  // X....Nf_f^f]f[fZ
    4EF0: 66 59 66 58 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B  // fYfX.....P......
    4F00: F0 58 2E FF 94 A0 4E C3 DA 4E 24 89 3D 89 5A 89  // .X....N..N$.=.Z.
    4F10: CF 4F 5D 80 8F 80 02 81 85 81 13 83 17 83 20 86  // .O]........... .
    4F20: F1 86 74 87 DB 87 76 89 9B 89 44 8C E8 51 8B 90  // ..t...v...D..Q..
    4F30: 8E 4E 8E 4E 8E 4E 8E 4E 8E 4E 8E 4E 5B 91 9B 75  // .N.N.N.N.N.N[..u
    4F40: EF 76 2E 8E 1E DD 03 80 26 87 04 F3 50 8A E0 80  // .v......&...P...
    4F50: E4 7F E8 C6 01 3B D3 75 02 58 C3 BA CC 03 EC B2  // .....;.u.X......
    4F60: B4 B1 30 26 F6 47 09 01 74 0C B2 D4 B1 20 A8 01  // ..0&.G..t.... ..
    4F70: 75 49 B5 09 EB 06 A8 01 74 41 B5 0B 53 E8 67 42  // uI......tA..S.gB
    4F80: 0A FF 5B 75 0B 80 26 88 04 F0 08 2E 88 04 EB 2B  // ..[u..&........+
    4F90: 58 80 0E 87 04 08 80 26 10 04 CF 08 0E 10 04 89  // X......&........
    4FA0: 16 63 04 C7 06 85 04 08 00 C6 06 84 04 18 C7 06  // .c..............
    4FB0: 0C 01 A6 5C 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF  // ...\.....B..&...
    4FC0: 08 0E 10 04 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE  // ....XSP..3......
    4FD0: 40 1C E8 8B CB E8 0E BC 74 05 E8 33 B9 EB 00 E8  // @.......t..3....
    4FE0: 30 BD BE 40 1C E8 C7 B7 58 5B 0F 84 6C FF 2E 8E  // 0..@....X[..l...
    4FF0: 1E DD 03 0E 07 E8 4B 2A 0E 1F 53 66 BB 40 1C 00  // ......K*..Sf.@..
    5000: 1C E8 AA CD BE 00 1C B0 20 E8 0C B8 5B 2E 8E 1E  // ........ ...[...
    5010: DD 03 0E 07 E8 54 2F E8 24 00 E8 23 3E E8 D1 01  // .....T/.$..#>...
    5020: E8 8E 01 E8 A9 3F 0E 1F BE 00 1C B0 10 E8 E8 B7  // .....?..........
    5030: E8 2F 2F E8 27 2F C3 8B EC C6 46 1B 00 C3 E8 2F  // .//.'/....F..../
    5040: 00 E8 0A 00 E8 BD 00 E8 52 00 E8 94 0B C3 53 83  // ........R.....S.
    5050: C3 0A 8B 16 63 04 B9 19 00 B8 11 30 EF 32 C0 26  // ....c......0.2.&
    5060: 8A 27 EF 43 FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3  // .'.C....[...2...
    5070: 53 BA C4 03 83 C3 05 B9 04 00 B0 01 26 8A 27 3C  // S...........&.'<
    5080: 01 75 03 80 CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47  // .u... .C....[&.G
    5090: 09 BA C2 03 EE B2 C4 B8 00 03 EF C3 8B F3 83 C6  // ................
    50A0: 23 BA DA 03 26 F6 47 09 01 75 02 B2 BA F6 06 89  // #...&.G..u......
    50B0: 04 08 74 1D 83 C6 10 EC B9 04 00 B4 10 B2 C0 80  // ..t.............
    50C0: FC 11 74 07 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF  // ..t....&...F....
    50D0: C3 53 EC 8B DE B9 14 00 32 E4 B2 C0 8A C4 EE FE  // .S......2.......
    50E0: C4 26 8A 07 EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06  // .&...C.....2....
    50F0: E8 81 2E 0B ED 74 09 1F 1E B9 10 00 F3 A4 46 A4  // .....t........F.
    5100: 07 1F 5B C3 53 83 C3 37 B9 09 00 32 C0 BA CE 03  // ..[.S..7...2....
    5110: 26 8A 27 EF 43 FE C0 E2 F7 5B C3 BB A6 53 0E 07  // &.'.C....[...S..
    5120: 8B D3 0A E4 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03  // ....}......3....
    5130: 7F 3C 4A F6 06 89 04 10 75 20 A0 88 04 24 0F 3C  // .<J.....u ...$.<
    5140: 02 7E 24 3C 08 74 20 3C 06 74 1C 3C 07 74 18 B0  // .~$<.t <.t.<.t..
    5150: 40 F6 E4 03 D8 81 C3 C0 04 C3 B0 40 D0 EC F6 E4  // @..........@....
    5160: 03 D8 81 C3 C0 05 C3 B0 40 F6 E4 03 D8 C3 80 FC  // ........@.......
    5170: 07 75 11 F6 06 89 04 10 75 05 81 C3 C0 01 C3 81  // .u......u.......
    5180: C3 40 06 C3 BF 28 51 BE 49 51 33 C9 E8 4E 00 C3  // .@...(Q.IQ3..N..
    5190: 04 00 01 05 40 01 06 80 01 0D 40 03 0E 80 03 0F  // ....@.....@.....
    51A0: 40 04 10 80 04 11 80 06 12 C0 06 13 00 07 62 00  // @.............b.
    51B0: 02 53 8A 1E 49 04 80 FB 07 7F 10 32 FF D1 E3 2E  // .S..I......2....
    51C0: 8B 87 65 51 A2 65 04 88 26 66 04 5B C3 2C 30 28  // ..eQ.e..&f.[.,0(
    51D0: 30 2D 30 29 30 2A 30 2E 30 1E 3F 29 30 2E 38 25  // 0-0)0*0.0.?)0.8%
    51E0: 75 07 2E 03 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED  // u...].3.....;.u.
    51F0: C3 1E 06 2E 8E 1E DD 03 F6 06 87 04 80 75 49 83  // .............uI.
    5200: 3E 4C 04 00 74 42 A0 49 04 B9 00 20 2E 8B 3E E3  // >L..tB.I... ..>.
    5210: 03 26 F6 47 33 01 75 0E 26 F6 47 09 01 75 1B 2E  // .&.G3.u.&.G..u..
    5220: 8B 3E E1 03 EB 14 3C 06 7E 0B 2E 8B 3E DF 03 26  // .>....<.~...>..&
    5230: 8A 67 37 B5 40 66 33 C0 EB 06 66 B8 20 07 20 07  // .g7.@f3...f. . .
    5240: 8E C7 66 33 FF F3 66 AB 80 26 87 04 7F 07 1F C3  // ..f3..f..&......
    5250: 2E 8E 1E DD 03 80 FB 10 75 03 E9 7A 01 80 FB 20  // ........u..z... 
    5260: 75 03 E9 9B 01 80 FB 32 75 1F BA CC 03 0A C0 75  // u......2u......u
    5270: 09 EC 0C 02 B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00  // ................
    5280: EC 24 FD B2 C2 EE E9 E4 00 80 FB 35 75 28 3C 80  // .$.........5u(<.
    5290: 75 08 80 0E 89 04 40 E9 D3 00 F6 06 89 04 40 0F  // u.....@.......@.
    52A0: 84 D0 00 0A C0 0F 84 CA 00 FE C8 75 06 E8 D8 08  // ...........u....
    52B0: E9 BA 00 E9 BD 00 80 FB 30 74 03 E9 96 00 50 E8  // ........0t....P.
    52C0: 25 3F 8A EF BA CC 03 EC 8A C8 58 0A C0 75 30 B7  // %?........X..u0.
    52D0: 08 F6 C1 01 75 12 0A ED 75 0B A0 10 04 24 30 3C  // ....u...u....$0<
    52E0: 30 75 10 B7 02 E9 8B 00 A0 10 04 24 30 3C 30 75  // 0u.........$0<0u
    52F0: 02 B7 02 80 26 89 04 6F 80 0E 89 04 80 EB 36 3C  // ....&..o......6<
    5300: 01 75 41 80 26 89 04 6F B7 09 F6 C1 01 75 15 B7  // .uA.&..o.....u..
    5310: 0B A0 10 04 24 30 3C 30 74 1B B7 09 0A ED 74 15  // ....$0<0t.....t.
    5320: B7 05 EB 11 A0 10 04 24 30 3C 30 75 08 B7 0B 0A  // .......$0<0u....
    5330: ED 74 02 B7 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E  // .t..............
    5340: 88 04 EB 29 3C 02 75 2B 80 26 89 04 6F 80 0E 89  // ...)<.u+.&..o...
    5350: 04 10 EB B4 80 FB 31 75 1B 0A C0 74 0B 3C 01 75  // ......1u...t.<.u
    5360: 0C 80 0E 89 04 08 EB 05 80 26 89 04 F7 8B EC C6  // .........&......
    5370: 46 1A 12 C3 80 FB 33 75 16 3C 00 74 0B 3C 01 75  // F.....3u.<.t.<.u
    5380: EC 80 26 89 04 FD EB E5 80 0E 89 04 02 EB DE 80  // ..&.............
    5390: FB 34 75 17 3C 00 75 07 80 26 87 04 FE EB CE 3C  // .4u.<.u..&.....<
    53A0: 01 75 07 80 0E 87 04 01 EB C3 C3 80 FB 36 75 26  // .u...........6u&
    53B0: BB 20 FF 3C 01 74 09 BB 00 DF 3C 00 74 02 EB AD  // . .<.t....<.t...
    53C0: E8 02 00 EB A8 9C FA BA C4 03 B0 01 EE 42 EC 22  // .............B."
    53D0: C7 0A C3 EE 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8  // ................
    53E0: 01 75 02 B7 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F  // .u............%.
    53F0: 0F 8B C8 8B EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3  // ......^..N..F...
    5400: 9C FA C7 06 14 00 88 7A 8C 0E 16 00 9D C3 28 18  // .......z......(.
    5410: 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0 BF 1F  // .......c-'(.+...
    5420: 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // ................
    5430: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5440: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ..............(.
    5450: 08 00 08 09 03 00 02 63 2D 27 28 90 2B A0 BF 1F  // .......c-'(.+...
    5460: 00 C7 06 07 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // ................
    5470: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5480: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ..............P.
    5490: 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81 BF 1F  // .......c_OP.U...
    54A0: 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // ...........(....
    54B0: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    54C0: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ..............P.
    54D0: 08 00 10 01 03 00 02 63 5F 4F 50 82 55 81 BF 1F  // .......c_OP.U...
    54E0: 00 C7 06 07 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // ...........(....
    54F0: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5500: 17 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ..............(.
    5510: 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80 BF 1F  // ..@....c-'(.+...
    5520: 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 A2  // ................
    5530: FF 00 13 15 17 02 04 06 07 10 11 12 13 14 15 16  // ................
    5540: 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF 28 18  // ..........0...(.
    5550: 08 00 40 09 03 00 02 63 2D 27 28 90 2B 80 BF 1F  // ..@....c-'(.+...
    5560: 00 C1 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 A2  // ................
    5570: FF 00 13 15 17 02 04 06 07 10 11 12 13 14 15 16  // ................
    5580: 17 01 00 03 00 00 00 00 00 00 30 0F 00 FF 50 18  // ..........0...P.
    5590: 08 00 40 01 01 00 06 63 5F 4F 50 82 54 80 BF 1F  // ..@....c_OP.T...
    55A0: 00 C1 00 00 00 00 00 00 9C 8E 8F 28 00 96 B9 C2  // ...........(....
    55B0: FF 00 17 17 17 17 17 17 17 17 17 17 17 17 17 17  // ................
    55C0: 17 01 00 01 00 00 00 00 00 00 00 0D 00 FF 50 18  // ..............P.
    55D0: 0E 00 10 00 03 00 03 A6 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    55E0: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 0D 63 BA A3  // .M........](.c..
    55F0: FF 00 08 08 08 08 08 08 08 10 18 18 18 18 18 18  // ................
    5600: 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF 50 1D  // ..............P.
    5610: 10 00 A0 01 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    5620: 00 40 00 00 00 00 00 00 EA 8C DF 50 00 E7 04 E3  // .@.........P....
    5630: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    5640: 0F 01 00 0F 00 10 00 00 00 00 40 05 0F FF 00 05  // ..........@.....
    5650: 11 1C 08 0B 14 28 0E 18 2D 32 20 24 38 3F 00 05  // .....(..-2 $8?..
    5660: 08 0B 0E 11 14 18 1C 20 24 28 2D 32 38 3F 07 0C  // ....... $(-28?..
    5670: 10 15 1A 18 16 15 13 1C 25 2F 38 33 2E 2A 25 27  // ........%/83.*%'
    5680: 29 2A 2C 23 19 10 23 25 27 2A 2C 2B 2A 29 29 2D  // )*,#..#%'*,+*))-
    5690: 32 37 3B 39 37 34 32 33 34 35 35 31 2C 27 2F 30  // 27;974234551,'/0
    56A0: 32 33 34 34 33 33 32 35 38 3A 3D 3C 3A 39 38 38  // 234433258:=<:988
    56B0: 39 39 3A 37 34 31 03 05 07 09 0B 0B 0A 09 08 0D  // 99:741..........
    56C0: 11 15 19 17 15 13 11 11 12 13 14 0F 0B 07 10 10  // ................
    56D0: 12 13 14 13 13 13 12 14 16 18 1A 19 18 17 16 17  // ................
    56E0: 17 17 18 15 14 11 15 15 16 17 17 17 17 17 16 18  // ................
    56F0: 19 1A 1B 1B 1A 19 19 19 19 19 1A 18 17 16 02 03  // ................
    5700: 04 05 07 06 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A  // ................
    5710: 0A 0B 0B 09 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C  // ................
    5720: 0D 0E 0F 0F 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C  // ................
    5730: 0C 0D 0D 0D 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E  // ................
    5740: 0E 0E 0E 0E 0D 0C 00 00 00 00 00 00 00 00 28 18  // ..............(.
    5750: 08 00 20 09 0F 00 06 63 2D 27 28 90 2B 80 BF 1F  // .. ....c-'(.+...
    5760: 00 C0 00 00 00 00 00 00 9C 8E 8F 14 00 96 B9 E3  // ................
    5770: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    5780: 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF 50 18  // ..............P.
    5790: 08 00 40 01 0F 00 06 63 5F 4F 50 82 54 80 BF 1F  // ..@....c_OP.T...
    57A0: 00 C0 00 00 00 00 00 00 9C 8E 8F 28 00 96 B9 E3  // ...........(....
    57B0: FF 00 01 02 03 04 05 06 07 10 11 12 13 14 15 16  // ................
    57C0: 17 01 00 0F 00 00 00 00 00 00 00 05 0F FF 00 05  // ................
    57D0: 11 1C 08 0B 25 28 02 07 1B 20 0F 14 28 2C 0C 11  // ....%(... ..(,..
    57E0: 25 2A 14 1E 32 36 0F 13 27 2C 1B 20 34 39 06 0B  // %*..26..',. 49..
    57F0: 1F 24 13 18 2C 30 09 0D 21 26 15 1A 2E 33 13 17  // .$..,0..!&...3..
    5800: 2B 30 1F 24 38 3D 0E 18 2D 32 20 24 38 3F 00 05  // +0.$8=..-2 $8?..
    5810: 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18 0E 18  // ................
    5820: 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F 00 05  // -2 $8?..-2 $8?..
    5830: 11 1C 08 0B 14 18 00 05 11 1C 08 0B 14 18 0E 18  // ................
    5840: 2D 32 20 24 38 3F 0E 18 2D 32 20 24 38 3F 50 18  // -2 $8?..-2 $8?P.
    5850: 0E 00 80 01 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F  // ........_OP.T...
    5860: 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63 BA E3  // .@........](.c..
    5870: FF 00 08 00 00 18 18 00 00 00 08 00 00 00 18 00  // ................
    5880: 00 0B 00 05 00 00 00 00 00 00 00 05 05 FF 50 18  // ..............P.
    5890: 0E 00 80 01 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F  // ........_OP.T...
    58A0: 00 40 00 00 00 00 00 00 83 85 5D 28 0F 63 BA E3  // .@........](.c..
    58B0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    58C0: 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF 28 18  // ?.............(.
    58D0: 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0 BF 1F  // ........-'(.+...
    58E0: 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63 BA A3  // .M........]..c..
    58F0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5900: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ?.............(.
    5910: 0E 00 08 09 03 00 02 A3 2D 27 28 90 2B A0 BF 1F  // ........-'(.+...
    5920: 00 4D 0B 0C 00 00 00 00 83 85 5D 14 1F 63 BA A3  // .M........]..c..
    5930: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5940: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5950: 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    5960: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63 BA A3  // .M........](.c..
    5970: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5980: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5990: 0E 00 10 01 03 00 02 A3 5F 4F 50 82 55 81 BF 1F  // ........_OP.U...
    59A0: 00 4D 0B 0C 00 00 00 00 83 85 5D 28 1F 63 BA A3  // .M........](.c..
    59B0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    59C0: 3F 08 00 0F 00 00 00 00 00 00 10 0E 00 FF 28 18  // ?.............(.
    59D0: 10 00 08 08 03 00 02 67 2D 27 28 90 2B A0 BF 1F  // .......g-'(.+...
    59E0: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3  // .O..............
    59F0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5A00: 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5A10: 10 00 10 00 03 00 02 67 5F 4F 50 82 55 81 BF 1F  // .......g_OP.U...
    5A20: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3  // .O.........(....
    5A30: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5A40: 3F 0C 00 0F 08 00 00 00 00 00 10 0E 00 FF 50 18  // ?.............P.
    5A50: 10 00 10 00 03 00 02 66 5F 4F 50 82 55 81 BF 1F  // .......f_OP.U...
    5A60: 00 4F 0D 0E 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3  // .O.........(....
    5A70: FF 00 08 08 08 08 08 08 08 10 18 18 18 18 18 18  // ................
    5A80: 18 0E 00 0F 08 00 00 00 00 00 10 0A 00 FF 50 1D  // ..............P.
    5A90: 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    5AA0: 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7 04 C3  // .@.........(....
    5AB0: FF 00 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F  // ..??????????????
    5AC0: 3F 01 00 0F 00 00 00 00 00 00 00 05 01 FF 50 1D  // ?.............P.
    5AD0: 10 00 A0 01 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E  // ........_OP.T..>
    5AE0: 00 40 00 00 00 00 00 00 EA 8C DF 28 00 E7 04 E3  // .@.........(....
    5AF0: FF 00 01 02 03 04 05 14 07 38 39 3A 3B 3C 3D 3E  // .........89:;<=>
    5B00: 3F 01 00 0F 00 00 00 00 00 00 00 05 0F FF 28 18  // ?.............(.
    5B10: 08 00 20 01 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F  // .. ....c_OP.T...
    5B20: 00 41 00 00 00 00 00 00 9C 8E 8F 28 40 96 B9 A3  // .A.........(@...
    5B30: FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E  // ................
    5B40: 0F 41 00 0F 00 00 00 00 00 00 40 05 0F FF A6 53  // .A........@....S
    5B50: 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 06 5B  // ...............[
    5B60: 00 C0 00 00 00 00 00 00 00 00 00 00 00 00 1A 00  // ................
    5B70: 59 92 00 C0 00 00 00 00 00 00 00 00 00 00 00 00  // Y...............
    5B80: 00 00 00 00 00 00 00 00 1E E8 10 00 2E 8E 1E DD  // ................
    5B90: 03 E8 B3 36 E8 8A 36 E8 68 1A 1F C3 2E 8E 1E DD  // ...6..6.h.......
    5BA0: 03 C7 06 87 04 60 F9 C6 06 8A 04 0B A0 89 04 0C  // .....`..........
    5BB0: 11 24 17 A2 89 04 B4 01 E8 65 1E A0 89 04 80 26  // .$.......e.....&
    5BC0: 10 04 CF 80 0E 10 04 20 C7 06 63 04 D4 03 B8 03  // ....... ..c.....
    5BD0: 00 E8 23 F3 C3 1E 2E 8E 1E DD 03 0E 07 EB 00 1F  // ..#.............
    5BE0: C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC B0 FF  // ......t..S......
    5BF0: B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE 5A 5C B9  // ......>c..u/.Z\.
    5C00: 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7  // @.3.............
    5C10: 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45  // ......B...E....E
    5C20: 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47 2B F6  // ....J......&.G+.
    5C30: 06 89 04 06 74 31 B9 F8 00 BF E6 55 3C 08 74 11  // ....t1.....U<.t.
    5C40: B9 40 00 BF 66 57 3C 38 74 07 3C 3F 74 03 BF A6  // .@..fW<8t.<?t...
    5C50: 57 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE EE FE  // W3.........B....
    5C60: C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74 2E 3C  // .J....I<.t%<8t.<
    5C70: 3F 74 2A B9 08 00 33 DB 51 E8 EC D0 B9 08 00 F7  // ?t*...3.Q.......
    5C80: C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA EB 20  // ...t.....g.Y... 
    5C90: E8 D5 D0 B9 10 00 33 DB E8 57 00 EB 13 B9 40 00  // ......3..W....@.
    5CA0: 33 DB 51 E8 28 00 8A C3 E8 7A 2F FE C3 59 E2 F2  // 3.Q.(....z/..Y..
    5CB0: 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F  // [..*.*.*.*.?.?.?
    5CC0: 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB  // .?.*.?.*.?.*.?..
    5CD0: C1 EF 02 83 E7 0F 2E 8A B5 4A 5C 8B FB D1 EF 83  // .........J\.....
    5CE0: E7 0F 2E 8A AD 4A 5C 8B FB 83 E7 0F 2E 8A 8D 4A  // .....J\........J
    5CF0: 5C C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05  // \.........B.G...
    5D00: EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3 00 00  // .G....G..J......
    5D10: 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E 7C FE  // ......~......~|.
    5D20: D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00 10 38  // ....|.....|8...8
    5D30: 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00 38 7C  // |.|8...8....8.8|
    5D40: FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00 FF E7  // ..l.8...<~<.....
    5D50: C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00 FF E7  // ........<ff<....
    5D60: C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3  // .........6x..x~.
    5D70: C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E  // .~.~.......p.`>>
    5D80: 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0  // 66.f...<f.f<....
    5D90: F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00 18 3C  // .........>.....<
    5DA0: 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00 7F DB  // ~.~<..fffff.f...
    5DB0: 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78 00 00  // {;....<f8ll8.x..
    5DC0: 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C  // .......<~.~<.~.<
    5DD0: 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00 00 18  // ~.........~<....
    5DE0: 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00 00 00  // .......0p.p0....
    5DF0: C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00 00 10  // .......$f.f$....
    5E00: 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00 00 00  // 8||.....||8.....
    5E10: 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00 6C 6C  // .......<<.....ll
    5E20: 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E  // l.....ll.l.ll..~
    5E30: C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00 38 6C  // .|........0`..8l
    5E40: 38 76 CC CC 76 00 18 18 30 00 00 00 00 00 18 30  // 8v..v...0......0
    5E50: 60 60 60 30 18 00 60 30 18 18 18 30 60 00 00 EE  // ```0..`0...0`...
    5E60: 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00 00 00  // |.|......~......
    5E70: 00 00 18 18 30 00 00 00 00 FE 00 00 00 00 00 00  // ....0...........
    5E80: 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00 7C C6  // ...88....0`...|.
    5E90: CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00 7C C6  // ....|..x....~.|.
    5EA0: 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C  // ..0f..|..<..|...
    5EB0: 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6  // <l..........|.|.
    5EC0: C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00 7C C6  // ....|.........|.
    5ED0: C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C  // .|..|.|..~..|...
    5EE0: 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30 0C 18  // .............0..
    5EF0: 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00 60 30  // 0`0...........`0
    5F00: 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00 7C C6  // ...0`.|.......|.
    5F10: C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66  // ....~.8l.......f
    5F20: 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C  // f|ff..<f...f<..l
    5F30: 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62  // fffl...........b
    5F40: 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6  // `|``..|.....|...
    5F50: C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00 3C 18  // ......<.....<.<.
    5F60: 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60  // ....p..........`
    5F70: 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6  // ```b............
    5F80: E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66  // ......|.....|..f
    5F90: 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6  // f|``..|.....|...
    5FA0: C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A  // ......|..|..|.~Z
    5FB0: 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6  // ....<.......|...
    5FC0: C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C  // ..l8...........l
    5FD0: 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00 FE 86  // 888l..fff<..<...
    5FE0: 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00 C0 60  // ..0b..|`````|..`
    5FF0: 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38  // 0.....|.....|..8
    6000: 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF 30 30  // l.............00
    6010: 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00 E0 60  // ........x.|.~..`
    6020: 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C  // |fff....|...|...
    6030: 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00 1C 36  // |...~...|...|..6
    6040: 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C E0 60  // 0.00x...v..~.|.`
    6050: 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00 0C 00  // |fff....8...<...
    6060: 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00 18 18  // .....x.`flxl....
    6070: 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00 00 00  // ........l.......
    6080: DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00 00 00  // .ffff...|...|...
    6090: DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E 00 00  // .ff|`...v..|....
    60A0: DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00 30 30  // .f``....|.|.|.00
    60B0: FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00 00 00  // .006........v...
    60C0: C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00 00 00  // ..l8........l...
    60D0: C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C 00 00  // .l8l.......v.|..
    60E0: FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00 18 18  // ..0d.....p......
    60F0: 18 00 18 18 18 00 70 18 18 0E 18 18 70 00 76 DC  // ......p.....p.v.
    6100: 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 3C 66  // ........88ll..<f
    6110: C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00 0E 00  // .f<..x......v...
    6120: 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00  // |...|.|.x.|.~...
    6130: 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00 38 38  // x.|.~...x.|.~.88
    6140: 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38 7C C6  // x.|.~...|.|.l8|.
    6150: 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00  // |...|...|...|...
    6160: 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00 7C C6  // |...|.f.8...<.|.
    6170: 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00 C6 38  // 8...<...8...<..8
    6180: 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00 0E 00  // l.....88.|......
    6190: FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00 7E D8  // ........l.~.n.~.
    61A0: D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00 00 C6  // ......|..|..|...
    61B0: 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6  // .|..|....|..|.|.
    61C0: 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00 18 00  // ....v.......v...
    61D0: 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00  // <...<..8l..l8...
    61E0: C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00 38 6C  // ....|...~..~..8l
    61F0: 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63  // `.f.l..f<~.<..>c
    6200: 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00  // 8.c>...>a<.|....
    6210: 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00 00 0E  // x.|.~...8...<...
    6220: 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00 00 FC  // .|..|.......v...
    6230: 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00  // ..ff..........>.
    6240: 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C 18 00  // >`gc=.>.v..~.|..
    6250: 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00 00 00  // .0`f<....|``....
    6260: 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC  // .|.......0|6.>..
    6270: D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00 00 36  // .0l<~.....<<...6
    6280: 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00 22 88  // l.l6....l6l...".
    6290: 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA DD 77  // ".".".U.U.U.U..w
    62A0: DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18 18 18  // .w.w.w..........
    62B0: 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18 36 36  // ..............66
    62C0: 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36 00 00  // 66.666.....666..
    62D0: F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36 36 36  // ......66...66666
    62E0: 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36 36 36  // 666666.....66666
    62F0: F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00 18 18  // ......6666......
    6300: F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    6310: 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00 00 00  // ................
    6320: 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18 00 00  // ................
    6330: 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18 18 18  // ................
    6340: 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36 36 36  // ......6666766666
    6350: 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36 36 36  // 70?.....?0766666
    6360: F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    6370: 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00 36 36  // 707666........66
    6380: F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00 36 36  // ...666........66
    6390: 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18 00 00  // 66..............
    63A0: 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00 18 18  // ...6666666?.....
    63B0: 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18 00 00  // ................
    63C0: 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36 18 18  // ..?6666666.666..
    63D0: FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    63E0: 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF 00 00  // ................
    63F0: 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F  // ................
    6400: 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00 00 00  // ................
    6410: 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00 00 FE  // f...f..x........
    6420: 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6  // b```....lllll...
    6430: 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00 00 66  // `0`....~....p..f
    6440: 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00 FE 38  // fff|...v....8..8
    6450: 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00 38 6C  // l.l8..8l...l8.8l
    6460: C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00 00 00  // ..ll..>`8f..x...
    6470: 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00 38 60  // ~..~...|...|..8`
    6480: C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE  // ...`8.|.........
    6490: 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00 30 18  // ........~...~.0.
    64A0: 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E  // ..0.~...0...~...
    64B0: 18 18 18 18 18 18 18 18 18 18 18 78 30 00 00 00  // ...........x0...
    64C0: 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00 7C C6  // ..~....v..v...|.
    64D0: C6 7C 00 00 00 00 00 00 00 18 18 00 00 00 00 00  // .|..............
    64E0: 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00 D8 6C  // ...........8...l
    64F0: 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00 00 00  // ll....p.0.......
    6500: 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00 1D 00  // ||||............
    6510: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 10  // ...$f.f$........
    6520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6530: 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00 00 00  // ...~........~...
    6540: 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00 00 00  // ...|........|...
    6550: 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00 00 00  // ....l.....|8....
    6560: 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00 00 00  // .....8|.|8......
    6570: 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00 00 00  // .....88.l.l.8...
    6580: 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00 00 00  // ....8||...l.8...
    6590: 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00 00 00  // .......<<<......
    65A0: 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF FF FF  // ................
    65B0: FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00 00 00  // ......<fff<.....
    65C0: 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF FF FF  // ................
    65D0: FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00 00 00  // ......6x....x...
    65E0: 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00 00 00  // ...<fff<.~......
    65F0: 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00 00 00  // ..........x.p...
    6600: 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C 00 00  // ...>6>66v.f.....
    6610: 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00 00 00  // .....~<ff<~.....
    6620: 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00 00 00  // ................
    6630: 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00  // ......>~.~>.....
    6640: 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00 00 00  // ....<~....~<....
    6650: 00 00 00 66 66 66 66 66 66 66 00 66 66 00 00 00  // ...fffffff.ff...
    6660: 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00 00 00  // ........{.......
    6670: 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00  // ...|..`|..|...|.
    6680: 00 00 00 00 00 00 00 00 00 FE FE FE FE 00 00 00  // ................
    6690: 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00 00 00  // ....<~...~<.~...
    66A0: 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00 00 00  // ....<~..........
    66B0: 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00 00 00  // ..........~<....
    66C0: 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00 00 00  // ................
    66D0: 00 00 00 00 00 00 30 70 FE 70 30 00 00 00 00 00  // ......0p.p0.....
    66E0: 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00 00 00  // ................
    66F0: 00 00 00 00 00 00 24 66 FF 66 24 00 00 00 00 00  // ......$f.f$.....
    6700: 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00 00 00  // .....888||......
    6710: 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00 00 00  // ......|||88.....
    6720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6730: 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00 00 00  // ....<<<<........
    6740: 00 00 36 36 36 36 14 00 00 00 00 00 00 00 00 00  // ..6666..........
    6750: 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00  // ...lll.ll.lll...
    6760: 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18 18 00  // .....|..x<..|...
    6770: 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00 00 00  // ......bf..0f....
    6780: 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00 00 00  // ...8l80v~...v...
    6790: 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00 00 00  // ................
    67A0: 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00 00 00  // .....000000.....
    67B0: 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00  // ...0........0...
    67C0: 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00 00 00  // ......l8.8l.....
    67D0: 00 00 00 00 00 00 18 18 7E 18 18 00 00 00 00 00  // ........~.......
    67E0: 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18 00 00  // ................
    67F0: 00 00 00 00 00 00 00 00 FE 00 00 00 00 00 00 00  // ................
    6800: 00 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00  // ................
    6810: 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00 00 00  // .........0`.....
    6820: 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00  // ...|........|...
    6830: 00 00 00 18 78 18 18 18 18 18 18 18 7E 00 00 00  // ....x.......~...
    6840: 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00 00 00  // ...|.....0`.....
    6850: 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00 00 00  // ...|...<....|...
    6860: 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00  // .....<l.........
    6870: 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00 00 00  // ............|...
    6880: 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    6890: 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00 00 00  // ........00000...
    68A0: 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00  // ...|...|....|...
    68B0: 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00  // ...|....~...|...
    68C0: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00 00 00  // ................
    68D0: 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18 00 00  // ................
    68E0: 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00 00 00  // ......0`.`0.....
    68F0: 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00 00 00  // ................
    6900: 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00 00 00  // ....`0.....0`...
    6910: 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00 00 00  // ...|............
    6920: 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00 00 00  // ...|........~...
    6930: 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00  // ...8l...........
    6940: 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00 00 00  // ....fff|ffff....
    6950: 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00  // ...<f......f<...
    6960: 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00 00 00  // ....lffffffl....
    6970: 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00 00 00  // ....f`d|d``f....
    6980: 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00 00 00  // ....f`d|d```....
    6990: 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00  // ...|........|...
    69A0: 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00  // ................
    69B0: 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00 00 00  // ...<........<...
    69C0: 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00 00 00  // ...<........p...
    69D0: 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00  // ................
    69E0: 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00 00 00  // ....``````bf....
    69F0: 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00 00 00  // ................
    6A00: 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00 00 00  // ................
    6A10: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ...|........|...
    6A20: 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00 00 00  // ....ffff|```....
    6A30: 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00  // ...|........|...
    6A40: 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00 00 00  // ....fff|xlff....
    6A50: 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00 00 00  // ...|...p....|...
    6A60: 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00 00 00  // ...~Z.......<...
    6A70: 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    6A80: 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    6A90: 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00  // ................
    6AA0: 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00 00 00  // ......l88l......
    6AB0: 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00 00 00  // ...fffff<...<...
    6AC0: 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00 00 00  // ........0`......
    6AD0: 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00 00 00  // ...|````````|...
    6AE0: 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00 00 00  // .......`0.......
    6AF0: 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00  // ...|........|...
    6B00: 00 00 10 38 6C C6 00 00 00 00 00 00 00 00 00 00  // ...8l...........
    6B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00  // ................
    6B20: 00 00 18 18 18 0C 00 00 00 00 00 00 00 00 00 00  // ................
    6B30: 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    6B40: 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00 00 00  // ....``|fffff....
    6B50: 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00  // ......|.....|...
    6B60: 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00 00 00  // ......|.....~...
    6B70: 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    6B80: 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00 00 00  // ....600.0000x...
    6B90: 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6 7C 00  // ......v....v..|.
    6BA0: 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00 00 00  // ....``|fffff....
    6BB0: 00 00 00 18 18 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    6BC0: 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00  // ..............x.
    6BD0: 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00 00 00  // ....``fflxlf....
    6BE0: 00 00 00 18 18 18 18 18 18 18 18 18 1C 00 00 00  // ................
    6BF0: 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00 00 00  // ......l.........
    6C00: 00 00 00 00 00 00 DC 66 66 66 66 66 66 00 00 00  // .......ffffff...
    6C10: 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    6C20: 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60 F0 00  // .......ffff|``..
    6C30: 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C 1E 00  // ......v....|....
    6C40: 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00 00 00  // .......f````....
    6C50: 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00 00 00  // ......|..|..|...
    6C60: 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00 00 00  // ...000.00006....
    6C70: 00 00 00 00 00 00 CC CC CC CC CC CC 76 00 00 00  // ............v...
    6C80: 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00 00 00  // ..........l8....
    6C90: 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00  // ............l...
    6CA0: 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00 00 00  // ........l8l.....
    6CB0: 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00  // ...........v..|.
    6CC0: 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00 00 00  // ..........0b....
    6CD0: 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00 00 00  // .......p........
    6CE0: 00 00 00 18 18 18 18 00 18 18 18 18 18 00 00 00  // ................
    6CF0: 00 00 00 70 18 18 18 0E 18 18 18 18 70 00 00 00  // ...p........p...
    6D00: 00 00 00 76 DC 00 00 00 00 00 00 00 00 00 00 00  // ...v............
    6D10: 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00 00 00  // .......88ll.....
    6D20: 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00  // ...<f....f<...8.
    6D30: 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ............v...
    6D40: 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ....0.|.....|...
    6D50: 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00 00 00  // ..0x..x.|...v...
    6D60: 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00 00 00  // ......x.|...v...
    6D70: 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00 00 00  // ..`0..x.|...v...
    6D80: 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00 00 00  // ..8l8.x.|...v...
    6D90: 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00  // .....|....|..l8.
    6DA0: 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0x..|.....|...
    6DB0: 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ......|.....|...
    6DC0: 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00  // ..0...|.....|...
    6DD0: 00 00 00 66 00 00 38 18 18 18 18 18 3C 00 00 00  // ...f..8.....<...
    6DE0: 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00 00 00  // ...<f.8.....<...
    6DF0: 00 00 00 00 00 00 38 18 18 18 18 18 3C 00 00 00  // ......8.....<...
    6E00: 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00  // ....8l..........
    6E10: 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00 00 00  // .8l8.8l.........
    6E20: 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00 00 00  // ...0..``|```....
    6E30: 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00 00 00  // .....f......v...
    6E40: 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00  // ...~............
    6E50: 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0x..|.....|...
    6E60: 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ......|.....|...
    6E70: 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ..0...|.....|...
    6E80: 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..0x........v...
    6E90: 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00  // ..`0........v...
    6EA0: 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00 00 00  // ....<.......<...
    6EB0: 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ....|.......|...
    6EC0: 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00  // ............|...
    6ED0: 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00 00 00  // .....|....|.....
    6EE0: 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00 00 00  // ..8l``.```f.l...
    6EF0: 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00 00 00  // ..ffff<.~.<.....
    6F00: 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C 00 00  // ...>cc0..cc>....
    6F10: 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C 00 00  // ......>c8.c>....
    6F20: 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00 00 00  // ....0.x.|...v...
    6F30: 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00 00 00  // ....0.8.....<...
    6F40: 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00  // ....0.|.....|...
    6F50: 00 00 18 30 60 00 CC CC CC CC CC DC 76 00 00 00  // ...0`.......v...
    6F60: 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00 00 00  // ...v...fffff....
    6F70: 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00  // ..v.............
    6F80: 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00 00 00  // ..!...3``gc3....
    6F90: 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00 00 00  // ..B<.;fff>.f<...
    6FA0: 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00 00 00  // ...00.000`..|...
    6FB0: 00 00 00 00 00 00 00 00 7E 60 60 60 00 00 00 00  // ........~```....
    6FC0: 00 00 00 00 00 00 00 00 7E 06 06 06 00 00 00 00  // ........~.......
    6FD0: 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18 3E 00  // ..``bfl.0`.6..>.
    6FE0: 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06 06 00  // ..``bfl.6n.6~...
    6FF0: 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00 00 00  // ........<<<<....
    7000: 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00 00 00  // ......6l.l6.....
    7010: 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00 00 00  // .......l6l......
    7020: 00 11 44 11 44 11 44 11 44 11 44 11 44 11 44 11  // ..D.D.D.D.D.D.D.
    7030: 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.U.U.U.U.U.U.U.
    7040: 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.w.w.w.w.w.w.w.
    7050: 77 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // w...............
    7060: 18 18 18 18 18 18 18 18 F8 18 18 18 18 18 18 18  // ................
    7070: 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18 18 18  // ................
    7080: 18 36 36 36 36 36 36 36 F6 36 36 36 36 36 36 36  // .6666666.6666666
    7090: 36 00 00 00 00 00 00 00 FE 36 36 36 36 36 36 36  // 6........6666666
    70A0: 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18 18 18  // 6...............
    70B0: 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36 36 36  // .66666...6666666
    70C0: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    70D0: 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36 36 36  // 6........6666666
    70E0: 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00 00 00  // 666666..........
    70F0: 00 36 36 36 36 36 36 36 FE 00 00 00 00 00 00 00  // .6666666........
    7100: 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00 00 00  // ................
    7110: 00 00 00 00 00 00 00 00 F8 18 18 18 18 18 18 18  // ................
    7120: 18 18 18 18 18 18 18 18 1F 00 00 00 00 00 00 00  // ................
    7130: 00 18 18 18 18 18 18 18 FF 00 00 00 00 00 00 00  // ................
    7140: 00 00 00 00 00 00 00 00 FF 18 18 18 18 18 18 18  // ................
    7150: 18 18 18 18 18 18 18 18 1F 18 18 18 18 18 18 18  // ................
    7160: 18 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 00  // ................
    7170: 00 18 18 18 18 18 18 18 FF 18 18 18 18 18 18 18  // ................
    7180: 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18 18 18  // ................
    7190: 18 36 36 36 36 36 36 36 37 36 36 36 36 36 36 36  // .666666676666666
    71A0: 36 36 36 36 36 36 37 30 3F 00 00 00 00 00 00 00  // 66666670?.......
    71B0: 00 00 00 00 00 00 3F 30 37 36 36 36 36 36 36 36  // ......?076666666
    71C0: 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00 00 00  // 666666..........
    71D0: 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36 36 36  // .........6666666
    71E0: 36 36 36 36 36 36 37 30 37 36 36 36 36 36 36 36  // 6666667076666666
    71F0: 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    7200: 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36 36 36  // .66666...6666666
    7210: 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00 00 00  // 6...............
    7220: 00 36 36 36 36 36 36 36 FF 00 00 00 00 00 00 00  // .6666666........
    7230: 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18 18 18  // ................
    7240: 18 00 00 00 00 00 00 00 FF 36 36 36 36 36 36 36  // .........6666666
    7250: 36 36 36 36 36 36 36 36 3F 00 00 00 00 00 00 00  // 66666666?.......
    7260: 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00 00 00  // ................
    7270: 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18 18 18  // ................
    7280: 18 00 00 00 00 00 00 00 3F 36 36 36 36 36 36 36  // ........?6666666
    7290: 36 36 36 36 36 36 36 36 FF 36 36 36 36 36 36 36  // 66666666.6666666
    72A0: 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18 18 18  // 6...............
    72B0: 18 18 18 18 18 18 18 18 F8 00 00 00 00 00 00 00  // ................
    72C0: 00 00 00 00 00 00 00 00 1F 18 18 18 18 18 18 18  // ................
    72D0: 18 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    72E0: FF 00 00 00 00 00 00 00 00 FF FF FF FF FF FF FF  // ................
    72F0: FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    7300: F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    7310: 0F FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00  // ................
    7320: 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00 00 00  // .....v......v...
    7330: 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00 00 00  // ...x............
    7340: 00 00 00 FE 66 62 60 60 60 60 60 60 60 00 00 00  // ....fb```````...
    7350: 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00  // .......llllll...
    7360: 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00 00 00  // .....b0..0b.....
    7370: 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00 00 00  // ......~.....p...
    7380: 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80 00 00  // .....fffff|`....
    7390: 00 00 00 00 00 00 76 DC 18 18 18 18 18 00 00 00  // ......v.........
    73A0: 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00 00 00  // ....88l..l88....
    73B0: 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00 00 00  // ....8l.....l8...
    73C0: 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00  // ...8l....lll....
    73D0: 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00 00 00  // ...>``<f....x...
    73E0: 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00 00 00  // ......~...~.....
    73F0: 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00 00 00  // .....|....|`....
    7400: 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00 00 00  // .....0``|``0....
    7410: 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00  // ...|............
    7420: 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00 00 00  // ................
    7430: 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00 00 00  // .......~....~...
    7440: 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00 00 00  // ...0.....0..~...
    7450: 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00 00 00  // .....0`0....~...
    7460: 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18 18 18  // ................
    7470: 18 18 18 18 18 18 18 18 18 18 18 58 78 30 00 00  // ...........Xx0..
    7480: 00 00 00 00 00 18 18 00 7E 00 18 18 00 00 00 00  // ........~.......
    7490: 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00 00 00  // .......v..v.....
    74A0: 00 00 00 78 CC CC 78 00 00 00 00 00 00 00 00 00  // ...x..x.........
    74B0: 00 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00  // ................
    74C0: 00 00 00 00 00 00 00 00 00 18 00 00 00 00 00 00  // ................
    74D0: 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18 00 00  // ...........x8...
    74E0: 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00 00 00  // ....lllll.......
    74F0: 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00 00 00  // ...p..0`........
    7500: 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00  // ......~~~~~~....
    7510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    7520: 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00 00 00  // .......$f.f$....
    7530: 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0 80 00  // ../........0`...
    7540: 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E  // ...0..~........~
    7550: 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3  // ....M...........
    7560: C3 00 00 00 00 54 00 00 FF 99 18 18 18 18 18 18  // .....T..........
    7570: 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3  // .<....V.........
    7580: 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3 DB DB  // f<.....W........
    7590: DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3 66 3C  // ...f....X.....f<
    75A0: 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3 C3 C3  // <f.......Y......
    75B0: 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00 80 C0  // f<...<....\.....
    75C0: 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00 00 00  // `0.........m....
    75D0: 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00 00 00  // .f..........v...
    75E0: 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77 00 00  // ......f<.....w..
    75F0: 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00 00 00  // .........f......
    7600: B9 64 C3 0B DB 74 03 E9 46 01 57 32 C0 B9 40 00  // .d...t..F.W2..@.
    7610: F3 AA 5F BB 49 92 26 89 1D 26 8C 4D 02 2E 8E 1E  // .._.I.&..&.M....
    7620: DD 03 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A 04 26  // ..W.I..........&
    7630: 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88 45 22  // ..FG.._.....&.E"
    7640: A1 85 04 26 89 45 23 57 E8 9C 1B 5F 26 88 5D 25  // ...&.E#W..._&.]%
    7650: 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80 FB 13  // &.}&..I....t....
    7660: 7F 1D 32 FF D1 E3 2E 8A 87 21 92 32 E4 0A C0 74  // ..2......!.2...t
    7670: 01 40 26 89 45 27 2E 8A 87 22 92 26 88 45 29 A1  // .@&.E'...".&.E).
    7680: 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E  // ............=..~
    7690: 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2  // ...=^.~...=..~..
    76A0: 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04 8A C4  // .=..~.&.U*.&....
    76B0: 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0  // $...............
    76C0: 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC  // ..$.........0.B.
    76D0: 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0 03 26  // $........&.E-..&
    76E0: 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04 8C C1  // .E1.w...2.......
    76F0: 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1 74 03  // ..;.t4&.w.....t.
    7700: 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80 CA 08  // ...&.w.....t....
    7710: 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26 C5 77  // &.w.....t....&.w
    7720: 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88 55 32  // .....t......&.U2
    7730: B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A  // ................
    7740: F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89 45 2B  // .......%....&.E+
    7750: 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74 36 FE  // ...F.....t...t6.
    7760: C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6 C1 01  // .tV...F.... ....
    7770: 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6 C1 04  // t...`...t...:...
    7780: 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89 46 0E  // t......?......F.
    7790: C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74 03 E8  // .F....... ...t..
    77A0: 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74 03 E8  // .....t.......t..
    77B0: F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06 E8 D9  // .....F......t...
    77C0: 14 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1 04 74  // ..%....t.......t
    77D0: 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4 4A E2  // .........B....J.
    77E0: F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC 87 EA  // ...k.......2....
    77F0: 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC 87 EA  // ...B....J.......
    7800: B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3 26 8A  // . ..&....GF...&.
    7810: 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05  // %.G..........&..
    7820: 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B C3 26  // G........QW..+.&
    7830: 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89 54 41  // ........&.D.&.TA
    7840: B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09 B2 CA  // ...&.D....&.D...
    7850: EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05 B9 04  // .&.D....&.......
    7860: 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26  // ....p.&........&
    7870: 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44 01 EE  // .TA2.....[.&.D..
    7880: E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26 8A 44  // ._...2.....I.&.D
    7890: 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B C3 26  // .._Y..`......+.&
    78A0: 89 47 02 51 57 2E 8E 1E DD 03 A0 10 04 24 30 AA  // .G.QW........$0.
    78B0: BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE  // .I..............
    78C0: A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00  // ..............t.
    78D0: B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04  // .....|..........
    78E0: F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB  // .._Y..:....&.?..
    78F0: 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01 EF B0  // ..Q.............
    7900: 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09 EE B2  // .......G..&.D...
    7910: C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8 11 00  // .....&...&.TA...
    7920: EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06  // ...2....&.D.....
    7930: 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0 20 EE  // &.D.....2..... .
    7940: B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D  // ..2......&.D..Y.
    7950: C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E DD 03  // ...&......Q.....
    7960: 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE 49 04  // &...&.......G.I.
    7970: B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE BE A8  // ................
    7980: 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE BE 74  // ....~.......v..t
    7990: 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C  // ....n..|....f...
    79A0: 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7 2B C3  // ....^.Y.......+.
    79B0: 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88  // &.G.......4.B.&.
    79C0: 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26 88 45  // .....&.E.PJJ.&.E
    79D0: 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC AA E2  // .......B2..BB...
    79E0: FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C  // .XJ.....&.w....l
    79F0: 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26 8A 44  // ....4.&......&.D
    7A00: 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00 03 26  // ..VBB...2..B...&
    7A10: 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE 9D C3  // ...F..^..&.D....
    7A20: BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 6B 12 B2  // ....$........k..
    7A30: C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB 00 B0  // ................
    7A40: 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F 08 26  //  ..P......&....&
    7A50: 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33 01 75  // ..$...<.~.&.G3.u
    7A60: 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4 03 26  // .<#t.<2t.<3t...&
    7A70: F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4 03 80  // .G..u....&I.....
    7A80: 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80 26 87  // ....&.G..t....&.
    7A90: 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06 62 04  // ....c...N.....b.
    7AA0: 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3 AB 07  // .....P.....3....
    7AB0: 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84 04 26  // &..2..J.&.G....&
    7AC0: 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26 8B 47  // .G....&.G..L.&.G
    7AD0: 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0 0D CD  // ....`.X.R2.3....
    7AE0: 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17 5A C3  // ...)u.2.3.....Z.
    7AF0: 06 1E 60 2E 8E 1E DD 03 2E 83 0E E7 03 00 75 6E  // ..`...........un
    7B00: 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E 62 04  // .>...tg.......b.
    7B10: 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04 50 32  // 2.......P..>b.P2
    7B20: F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8  // .....2.AQ..J.2..
    7B30: A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4 08 E8  // ....)u=QR..P....
    7B40: 7C D3 0A C0 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4  // |...u.. 3.2.....
    7B50: 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA E8 77  // )u.Z..Y....Y...w
    7B60: FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03 61 1F  // .2....X..P....a.
    7B70: 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6 7D 02  // ..ZYY....R*.8.}.
    7B80: 32 C0 2E 8E 06 DF 03 5A C3 A0 85 04 F6 E3 8A F7  // 2......Z........
    7B90: 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8 6D 00  // ..............m.
    7BA0: 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75  // ..2...........Ku
    7BB0: F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0 75 04  // .2..W..S..b...u.
    7BC0: 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2 01 01  // ..t..5.[..+.....
    7BD0: 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A  // ..2....2.+...t**
    7BE0: C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8  // ..&....R... ....
    7BF0: 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03  // ...Z............
    7C00: FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA CE 03  // .Hu.............
    7C10: B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA EE 42  // ...B.$....J....B
    7C20: EB 00 EC 4A 9D C3 1E 2E 8E 1E DD 03 8B 16 63 04  // ...J..........c.
    7C30: 80 C2 06 1F C3 1E 2E 8E 1E DD 03 8B 16 63 04 1F  // .............c..
    7C40: C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3  // .P........u...X.
    7C50: E8 EE FF 80 C2 06 C3 1E 2E 8E 1E DD 03 80 3E 49  // ..............>I
    7C60: 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49 04 01  // ..t..>I..t..>I..
    7C70: 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 E1 03 A0  // t..>I....P......
    7C80: 10 04 24 30 3C 30 74 05 2E 8E 06 E3 03 58 0B C0  // ..$0<0t......X..
    7C90: 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B D1 32  // t......N.....+.2
    7CA0: ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1  // ...J............
    7CB0: E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A  // ...u...8.~......
    7CC0: D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06 06 1F  // ........:.J.t...
    7CD0: E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A  // .......@........
    7CE0: E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3 53 8A  // ......+.......S.
    7CF0: CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B  // .*.2.2.+.+......
    7D00: CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20 8A CA  // .........u.X. ..
    7D10: F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3 74 06  // ......u..S..*.t.
    7D20: F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB  // ......X...... ..
    7D30: C3 8B D8 E8 2E 00 2E 8E 1E E3 03 8A C3 22 DF D3  // ............."..
    7D40: E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE  // ...t.0.....4"...
    7D50: 88 1C C3 8A FC E8 0C 00 2E 8E 1E E3 03 8A 04 D2  // ................
    7D60: E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F  // ."...(.....t....
    7D70: 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1  // ................
    7D80: 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7  // ................
    7D90: 01 C3 FC 8A D8 2E 8E 06 E3 03 8B C1 E8 86 00 75  // ...............u
    7DA0: 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E 06 E3  // ......$.........
    7DB0: 03 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD 81 C6  // ......m.u.......
    7DC0: F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE 2A CB  // ......+.......*.
    7DD0: E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A  // .,Q..VW.........
    7DE0: CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1 E9 F3  // .+.+.... ... ...
    7DF0: A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7  // ....._^....Y....
    7E00: 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B  // ....W..........+
    7E10: F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD  // .... ........_..
    7E20: FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1 38 F3  // ..u.........+.8.
    7E30: 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50  // v.2.Q......Y2..P
    7E40: 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8  // ..>I..t.........
    7E50: 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32 FF D1  // ...P.....RS..2..
    7E60: E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3  // ...P....P...L...
    7E70: 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6  // [..[Z.R...J...2.
    7E80: 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6 36 7E  // ....Z.........6~
    7E90: 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 36 7E C3 00 03  // ...........6~...
    7EA0: 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B  // ..03<?........&.
    7EB0: 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1  // .........t......
    7EC0: E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A C5 86  // ..u..V.E...c....
    7ED0: E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6 26 4A  // ........R.....&J
    7EE0: 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32 FF D1  // ....2...Z.S..2..
    7EF0: E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B D0 32  // ...P......[.R..2
    7F00: F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03 C2 0A  // .R...&...&J.Z...
    7F10: DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52 8B D0  // .t...L...u.Z.R..
    7F20: A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1  // .J...2.......N..
    7F30: F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04  // ........Z....&J.
    7F40: 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7  // .........t...2..
    7F50: 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC  // &L..............
    7F60: EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0  // ........ .......
    7F70: 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5 0B EF  // 2....>..&.}.....
    7F80: C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8  // .S..............
    7F90: B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C AA 74  // ......U......<.t
    7FA0: 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E  // ....v.<Ut.2.[...
    7FB0: 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3 8A EE  // ............[...
    7FC0: 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6  // .6......t%..*...
    7FD0: 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B  // ..R2........+.Q.
    7FE0: C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A  // ...+.+.Y..Z.....
    7FF0: DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1  // .............2..
    8000: E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA  // ........+.....+.
    8010: 4E 75 F7 C3 2E 8E 1E DD 03 89 0E 60 04 8A C5 24  // Nu.........`...$
    8020: 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87 04 01  // `. t............
    8030: 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC 74 01  // .....>I..t....t.
    8040: C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85 04 8A  // ......t..B..6...
    8050: D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A CE FE  // ...8.~...td.....
    8060: C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04 8A E9  // ..\8.tX.....|...
    8070: D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A E5 0A  // .....I...~D..*..
    8080: E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A C5 0A  // .u.8.t8..8.t2...
    8090: C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F C8 80  // .8.~....~.......
    80A0: FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE FE C9  // ..}.....8.t.....
    80B0: FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4  // ....*...........
    80C0: 0A E8 05 FE C3 2E 8E 1E DD 03 A2 62 04 32 E4 8B  // ...........b.2..
    80D0: F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74 07 80  // ..&L..N....z.t..
    80E0: 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B  // >I..w...........
    80F0: 84 50 04 E8 27 FE C3 2E 8E 1E DD 03 8A 26 49 04  // .P..'........&I.
    8100: E8 7E 9C 74 07 C7 06 50 04 00 00 C3 E8 48 FB 74  // .~.t...P.....H.t
    8110: 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F FB C3  // ....t.w..w......
    8120: 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8  // ...|.t...N......
    8130: 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B F7 03  // ....J.R.&.......
    8140: F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA  // .Z.....0......g.
    8150: C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7  // ...R..J.....&...
    8160: E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E DD 03 8A  // .....Z.U........
    8170: 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77 40 80  // &I....t....t.w@.
    8180: FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A  // .....S..........
    8190: D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7  // ..........+>J...
    81A0: 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B  // .R.&...&J......+
    81B0: F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80  // .Z..J...........
    81C0: FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6  // ..|.t...........
    81D0: FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5  // .....R..J..&....
    81E0: 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E  // +...+.Z.........
    81F0: DD 03 2E 8E 06 E3 03 E8 5D FA 74 11 80 3E 49 04  // ........].t..>I.
    8200: 07 7C 18 2E 8E 06 E1 03 74 03 E9 B1 00 E8 49 FC  // .|......t.....I.
    8210: 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04 E8 B7  // ..&.....F...P...
    8220: FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04 06 75  // ......+....>I..u
    8230: 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84 00 20  // ....&...F.E&... 
    8240: 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80 EB 17  // .F.E..P.........
    8250: D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F FC 81  // ......V.... .O..
    8260: EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32 F6 80  // .......+..>..2..
    8270: FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16 1F 8B  // ..u.&.}..u......
    8280: F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F 5E 74  // ......t.GVW.._^t
    8290: 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75 E2 FE  // #.......t.G..u..
    82A0: CC 74 0F 2E 8E 1E DD 03 C4 3E 7C 00 B0 80 B2 80  // .t.......>|.....
    82B0: EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3 80 3E  // ..2........F...>
    82C0: 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 DF 03 E8  // I..|.u..Z.......
    82D0: 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05 08 B9  // ........+.......
    82E0: 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06 87 04  // ......>I..r.....
    82F0: 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0 07 EF  // `u.......u......
    8300: B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6 D0 88  // .......Q..&.....
    8310: 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01 32 D2  // F.E.6J...X....2.
    8320: E9 44 FF 2E 8E 06 DF 03 A1 50 04 8B D0 32 F6 52  // .D.......P...2.R
    8330: 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03 C2 8B  // ..2..&J..&..Z...
    8340: F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1  // .....+...S.>J.O.
    8350: E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A  // ........2.&.....
    8360: C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03 F7 4B  // .t....F...f.E..K
    8370: 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB 03 BD  // u.[...2....3....
    8380: 01 00 2E 8E 1E DD 03 2E 8E 06 E3 03 8A 26 49 04  // .............&I.
    8390: E8 C4 F8 74 0F 2E 8E 06 E1 03 80 FC 07 74 05 7C  // ...t.........t.|
    83A0: 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87  // =.........2.....
    83B0: 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1  // P....J...2......
    83C0: E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA  // ...t....L.....u.
    83D0: 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E  // ....u.....G...P.
    83E0: 8E 06 E3 03 A1 50 04 E8 EE FA 8B F8 A0 50 04 8A  // .....P.......P..
    83F0: 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36 7C 00  // &J...X..t.$..6|.
    8400: EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80  // ...6....2.......
    8410: FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A  // ..ti.....U......
    8420: D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC E8 55  // .....P.....u'..U
    8430: FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE 1F 83  // .#....N.#.&.....
    8440: C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58 E8 72  // .N..u......>.X.r
    8450: 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC E8 25  // ........#.&1...%
    8460: FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75 E5 83  // .#.&1.. ..P..u..
    8470: EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50  // ....>.X.I......P
    8480: B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30 85 00  // .....t..&0..&0..
    8490: 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F 01 58  //  ..P.........?.X
    84A0: E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F 83 C7  // . .......&......
    84B0: 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8 03 00  // O.........?.X...
    84C0: E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0 00 C3  // .....8.r.2......
    84D0: 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F B6 06  // ........2...f...
    84E0: 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75 03 BA  // Q...f...J...du..
    84F0: 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00 75 03  // h...Zu..`.....u.
    8500: BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06 50 04  // ...R..f...f...P.
    8510: 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81 CF 00  // f..f.....f......
    8520: FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50 04 50  // .f...Z..J....P.P
    8530: C5 06 0C 01 03 F0 2E 8E 06 DF 03 58 57 51 50 9C  // ...........XWQP.
    8540: FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73  // ....;..........s
    8550: 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03 FA E2  // ...&..fG..u.f...
    8560: E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E 51 32  // ..XY_.....8.r.Q2
    8570: C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC  // ...I.......Y+...
    8580: C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7  // ..R3...f.....f..
    8590: 10 E8 ED 97 74 16 38 E0 74 12 0F B6 D0 E8 63 C7  // ....t.8.t.....c.
    85A0: 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07 C3 80  // ..f.....f...Z...
    85B0: FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11 FF E8  // ..|.......b.....
    85C0: 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F 50 53  // ......u.......PS
    85D0: 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06 DF 03  // ..2.....P.[.....
    85E0: E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B 36 4A  // .........X2.R.6J
    85F0: 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75 09 83  // .V.&...6.....u..
    8600: 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3  // |..u...F........
    8610: 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A 8A E0  // .um......ZXPRJ..
    8620: 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE  // WQQW..2......_G.
    8630: C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59  // .8.v.2...I..G..Y
    8640: E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51  // ..Y_........[KZQ
    8650: 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5  // W...&.%....._G+.
    8660: 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59  // B;.v.3...I..G..Y
    8670: E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F EF C3  // ................
    8680: B2 CE B8 03 18 EF EB BC 2E 8E 1E DD 03 80 3E 63  // ..............>c
    8690: 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42 C3 C3  // ..t.......u..B..
    86A0: E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26 66 04  // .....u.......&f.
    86B0: E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1  // ..&f..-...f... .
    86C0: 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80 E3 01  // ......t..f.$....
    86D0: 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8 53 00  // t.. .f.$......S.
    86E0: C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3 81 E3  // ..~..SP.........
    86F0: 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8 2C F3  // .....`.t......,.
    8700: 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED 74 04  // ..t.&.........t.
    8710: 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E DD 03 80  // &.].X[..........
    8720: 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8  // >I.3............
    8730: 30 F8 C3 9C FA E8 62 05 B2 C0 B9 03 00 B4 01 8A  // 0.....b.........
    8740: C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE C4 80  // .......t.G&.....
    8750: C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E DD 03 8A 26  // ..... .........&
    8760: 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03 E8 C0  // I....t....w.t...
    8770: F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA  // .....|.tL.......
    8780: CE 03 B0 08 EF 2E 8E 1E DF 03 F6 C3 80 75 1C B2  // .............u..
    8790: C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4  // ......%.......%.
    87A0: FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18 EF B2  // ..%.............
    87B0: C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8  // .......%...%....
    87C0: 03 00 EF EB E1 50 2E 8E 06 DF 03 A1 4A 04 C1 E0  // .....P......J...
    87D0: 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E 1E DD  // .......X&.......
    87E0: 03 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77 0B 74  // ..&I..o.t....w.t
    87F0: 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C 03 74  // .._....F.....|.t
    8800: 29 C3 E8 35 F7 8A CC 2E 8E 1E DF 03 BA CE 03 32  // )..5...........2
    8810: FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80 CF 01  // .........".t....
    8820: FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03  // ..}....~...J....
    8830: F7 E2 03 C1 8B F8 2E 8E 1E DF 03 8A 05 8B EC 88  // ................
    8840: 46 1A C3 2E 8E 1E DD 03 8A 3E 62 04 8A CF D0 E1  // F........>b.....
    8850: 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76  // 2..P.......I.<.v
    8860: 4A 2E 8E 06 E3 03 E8 EE F3 75 33 8A 1E 4A 04 8A  // J........u3..J..
    8870: F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B  // .............N..
    8880: F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89 14 8B  // ......A..8.sY...
    8890: 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E  // .c..............
    88A0: 06 E1 03 80 F9 07 74 C3 E9 83 00 75 04 32 D2 EB  // ......t....u.2..
    88B0: 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00 FE C6  // .<.u.:6..u......
    88C0: 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2 E8 4C  // .....u.........L
    88D0: F6 C3 3C 07 75 04 E8 2B 7E C3 3C 08 75 83 0A D2  // ..<.u..+~.<.u...
    88E0: 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36 84 04  // t.....2.2.+.:6..
    88F0: 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04 B0 0E  // t...........c...
    8900: 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A 65 02  // ........+.+.&.e.
    8910: 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3  // P.>N............
    8920: 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01  // ........X. .....
    8930: 00 B4 0A E8 88 C5 FE C2 3A 16 4A 04 74 03 89 14  // ........:.J.t...
    8940: C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE C6 EB  // .2.2...:6..t....
    8950: ED 89 14 2E 8E 06 E3 03 E8 FC F2 74 0E 2E 8E 06  // ...........t....
    8960: E1 03 80 F9 07 74 04 32 FF EB 10 8B C2 E8 AD F5  // .....t.2........
    8970: 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84  // ....O..J...3..6.
    8980: 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E 1E DD  // ...J......p.....
    8990: 03 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6 8B EC  // ......t..B..v...
    89A0: C6 46 1B 00 C3 2E 8E 1E DD 03 8A DF 32 FF D1 E3  // .F..........2...
    89B0: 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2 E8 5C  // ..P...8.b.u....\
    89C0: F5 C3 2E 8E 1E DD 03 8A DF 32 FF D1 E3 8B 97 50  // .........2.....P
    89D0: 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3 2E 8E  // ...`....N..V....
    89E0: 1E DD 03 A0 87 04 24 80 0A 06 49 04 8A 26 4A 04  // ......$...I..&J.
    89F0: 8A 3E 62 04 8B EC 89 46 1A 89 5E 0E 89 4E 16 89  // .>b....F..^..N..
    8A00: 56 12 C3 2E 8E 1E DD 03 3C 04 7F 1B 50 52 BA CC  // V.......<...PR..
    8A10: 03 EC A8 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3  // ....ZXt..>c..t..
    8A20: 80 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1  // .>c..u.<.s.2....
    8A30: E5 2E FF A6 CE 89 06 8A 26 8A 38 8A 6D 8A B7 89  // ........&.8.m...
    8A40: B7 89 B7 89 92 8A AA 8A AE 8A B7 89 B7 89 B7 89  // ................
    8A50: B7 89 B7 89 B7 89 DC 8A B7 89 E0 8A FB 8A B7 89  // ................
    8A60: 3A 8B B7 89 48 8B 63 8B 6A 8B 76 8B 9A 8B 80 3E  // :...H.c.j.v....>
    8A70: 49 04 13 74 15 E8 FC F4 8B C3 86 E0 E8 AD EF 0B  // I..t............
    8A80: ED 74 07 8A C7 32 FF 26 88 01 E8 D0 F4 C3 E8 E3  // .t...2.&........
    8A90: F4 8A C7 E8 81 FC 0B ED 74 F0 26 88 7D 11 EB EA  // ........t.&.}...
    8AA0: 80 3E 49 04 13 74 E3 06 E8 C9 F4 1F 0B ED 74 07  // .>I..t........t.
    8AB0: 8B F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10  // ............2...
    8AC0: 00 B2 C0 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC  // ................
    8AD0: E8 44 FC EB B5 80 FB 01 77 B0 E8 80 F4 B2 C0 B0  // .D......w.......
    8AE0: 30 E8 38 F1 24 F7 80 26 65 04 DF 80 FB 00 74 07  // 0.8.$..&e.....t.
    8AF0: 0C 08 80 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2  // ....e. .........
    8B00: C0 E8 18 F1 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9  // ........ ....N..
    8B10: 78 FF B3 11 EB E4 8B FA E8 42 F4 B9 10 00 32 E4  // x........B....2.
    8B20: B2 C0 8A C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE  // .......B.&....J.
    8B30: 9D 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8  // .G.......B..&...
    8B40: 20 F4 EB 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35  //  ..Z......Q..&.5
    8B50: 26 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59  // &.m.&.M.......CY
    8B60: E2 E8 C3 0A DB 75 1A E8 F3 F3 B2 C0 B0 30 E8 AB  // .....u.......0..
    8B70: F0 24 7F F6 C7 01 74 02 0C 80 B4 30 E8 AD EE EB  // .$....t....0....
    8B80: 1D FE CB 75 1C E8 D5 F3 B2 C0 B0 30 E8 8D F0 EE  // ...u.......0....
    8B90: A8 80 75 03 C0 E7 02 B4 34 8A C7 E8 8E EE E8 BC  // ..u.....4.......
    8BA0: F3 C3 8A C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3  // ..........N..v..
    8BB0: 8B FA 51 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26  // ..Q.....&.5&.m.&
    8BC0: 88 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3  // .M....CY........
    8BD0: EE C3 BA C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 7C  // ......2....F...|
    8BE0: F3 B2 C0 B0 34 E8 34 F0 8A F8 EE B0 30 E8 2C F0  // ....4.4.....0.,.
    8BF0: B3 01 A8 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E  // ....u.........^.
    8C00: EB 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00  // ..Q...s..*....R.
    8C10: 43 59 E2 EE C3 F6 06 89 04 02 74 03 E8 16 00 8A  // CY........t.....
    8C20: C3 E8 39 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A  // ..9.......t.....
    8C30: C3 E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50  // .....P....P.;..P
    8C40: B0 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC  // ....Y..Y...d....
    8C50: 32 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39  // 2|.........X.R.9
    8C60: 00 5A 53 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A  // .ZS........B....
    8C70: C5 EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7  // ......[....S....
    8C80: 03 EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00  // ..BB............
    8C90: EB 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8 BE F2 B9  // ........[.PQ....
    8CA0: FF 7F EC A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E DD  // .....u...YX.....
    8CB0: 03 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F  // ...$............
    8CC0: 18 2E FF A5 5E 8C 66 8C 7B 8C 19 8D 75 8D 3C 03  // ....^.f.{...u.<.
    8CD0: 74 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A  // t.<.............
    8CE0: E3 EF C3 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0  // ...<.w.PSPR..c..
    8CF0: 07 E8 28 EF 8A E0 D0 EC 80 E4 01 A8 40 74 03 80  // ..(.........@t..
    8D00: CC 02 B0 12 E8 15 EF 40 A3 85 04 B0 09 E8 0C EF  // .......@........
    8D10: A8 80 74 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01  // ..t..........=..
    8D20: 73 1B BA E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01  // s....=..s....=|.
    8D30: 73 0B BA 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85  // s..^.=J.s.......
    8D40: 04 5A 58 C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32  // .ZX......].[X..2
    8D50: FF 0A C0 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74  // ...t...<.t...<.t
    8D60: 02 B3 10 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04  // ..............~.
    8D70: 81 E9 01 01 87 1E 85 04 53 E8 98 F2 5B E8 85 02  // ........S...[...
    8D80: C3 0A C0 74 11 FE C8 74 1A FE C8 74 38 FE C8 74  // ...t...t...t8..t
    8D90: 3C FE C8 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C  // <..t@...|...~...
    8DA0: C8 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A 97 59 8D  // .......t.2....Y.
    8DB0: 89 0E 85 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01  // ................
    8DC0: C3 00 0D 18 2A E8 09 03 B9 0E 00 EB D6 BD A6 5C  // ....*..........\
    8DD0: B9 08 00 EB CA BD B9 64 B9 10 00 EB C2 0A C0 75  // .......d.......u
    8DE0: BD 8B 0E 85 04 8A 16 84 04 80 FF 07 77 35 80 FF  // ............w5..
    8DF0: 01 77 10 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C  // .w...u...|..&...
    8E00: 01 EB 20 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E 98  // .. ...u.........
    8E10: 75 EB 10 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B  // u......2........
    8E20: AF CC 8D 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A  // ........N..V..F.
    8E30: 8C 46 1E C3 B9 64 A6 5C A6 60 A6 64 B9 64 B9 74  // .F...d.\.`.d.d.t
    8E40: 53 06 8A 26 49 04 E8 D2 C2 26 8A 47 02 26 8A 67  // S..&I....&.G.&.g
    8E50: 33 F6 C4 01 74 22 BD B9 64 3C 10 7D 0E E8 71 02  // 3...t"..d<.}..q.
    8E60: 8C 06 0E 01 3C 0E 7D 07 BD A6 5C 8C 0E 0E 01 89  // ....<.}...\.....
    8E70: 2E 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81  // .......-..<.}...
    8E80: 3C 0E 74 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB  // <.t.....<.t.....
    8E90: 0A 26 F6 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8  // .&.G..t......2..
    8EA0: 06 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC  // ......[.........
    8EB0: B8 05 00 EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8  // ................
    8EC0: 04 07 EF 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07  // .......P$...t"..
    8ED0: 33 D2 B9 00 01 3C 04 75 07 B7 10 BD B9 64 EB 10  // 3....<.u.....d..
    8EE0: FE C8 75 07 B7 0E E8 E8 01 EB 05 B7 08 BD A6 5C  // ..u............\
    8EF0: E8 2D 00 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8  // .-.X..t.........
    8F00: 04 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2  // ...........u....
    8F10: CE 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3  // .P.X....2.......
    8F20: FC 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10  // ...u.....u.&.~..
    8F30: 75 03 80 CD 80 1E 06 1F 2E 8E 06 DF 03 8B FA C1  // u...............
    8F40: E7 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02  // ...@S.....[...t.
    8F50: 04 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB  // . .........(2...
    8F60: 32 FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20  // 2.Q...t.F...... 
    8F70: 74 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46  // t.. .+...Y...t.F
    8F80: FE C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8  // ..u....&I.P.W.>.
    8F90: 04 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07  // .&.}.....t0.....
    8FA0: 26 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD  // &..<.t$8.t.G....
    8FB0: 26 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04 26  // &.......&.E....&
    8FC0: C4 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26  // .}..>......_.X.&
    8FD0: F6 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C  // .G3.t......&._..
    8FE0: C0 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47  // ...t....&..<.t.G
    8FF0: 38 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B  // 8.I.u.&..2......
    9000: D8 E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80  // .......c..&.....
    9010: E4 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0  // .......t....B.$.
    9020: 0A C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A  // ...J...B.$......
    9030: C8 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07  // ..........>...u.
    9040: A2 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0  // ............t...
    9050: 48 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84  // H......c...J..&.
    9060: 04 FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26  // ...........L...&
    9070: 49 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B  // I.P.W.>..&.}....
    9080: EF 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38  // .tJ.....&..<.t>8
    9090: E0 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26  // .t.G....&.=&.].&
    90A0: 8B 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE  // .M.&.U.&.E.<.t..
    90B0: C8 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2  // .P......&.....X.
    90C0: 84 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58  // ..&.}...2...._.X
    90D0: C3 50 53 51 52 2E A1 E7 03 0B C0 74 09 2E 8B 2E  // .PSQR......t....
    90E0: 98 75 0E 07 EB 08 B8 30 11 B7 02 E8 D0 BD 5A 59  // .u.....0......ZY
    90F0: 5B 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E DD 03  // [X.<.|....S.....
    9100: 86 FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89  // ..2.......P..5[.
    9110: 15 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75  // .V..QS&.F.E<...u
    9120: 04 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 D4 75  // .2..@<.t2<.u...u
    9130: EB 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6  // .b<.u...tZ...'..
    9140: 02 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 6D  // ..t.&.^.E......m
    9150: BD FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84  // ...:.J.r.2...:6.
    9160: 04 73 06 FE C6 89 15 EB 2B 50 E8 EA EA 75 08 B8  // .s......+P...u..
    9170: 00 08 E8 49 BD EB 09 80 3E 49 04 07 74 F1 32 E4  // ...I....>I..t.2.
    9180: 86 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62  // .>b.S..U.%.][.>b
    9190: 04 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89  // .X..[Y..Z....u..
    91A0: 15 8B 05 3A 3E 62 04 75 03 E8 71 ED C3 E9 64 FF  // ...:>b.u..q...d.
    91B0: 33 C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8  // 3..6....J.......
    91C0: FC BC C3 2E 8E 1E DD 03 0A C0 75 0D E8 18 00 8B  // ..........u.....
    91D0: EC 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00  // ..^..F...<.u..A.
    91E0: 8B EC C6 46 1A 1A C3 A0 8A 04 BF 59 92 2E 3A 05  // ...F.......Y..:.
    91F0: 72 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04  // r.....2.......].
    9200: 0A DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24  // ..t...u........$
    9210: 30 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9  // 0<0t....u.....t.
    9220: C3 BF 59 92 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74  // ..Y....2.....;.t
    9230: 12 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E  // ....;.t......8.~
    9240: EB B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74  // ...............t
    9250: 0E BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA  // ..........t.....
    9260: B4 03 E8 1C ED 74 21 B7 01 E8 C9 E9 80 FA D4 74  // .....t!........t
    9270: 17 86 FB C3 BA D4 03 E8 07 ED 74 0C B7 02 E8 B4  // ..........t.....
    9280: E9 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F  // ....t...........
    9290: 08 03 01 03 01 01 01 00 08 01 01 01 01 01 01 01  // ................
    92A0: 01 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF  // ................
    92B0: 01 FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F  // ...............?
    92C0: 00 10 01 08 00 00 00 00 01 00 02 02 01 00 04 04  // ................
    92D0: 01 00 05 02 05 00 06 01 06 05 06 00 08 01 08 00  // ................
    92E0: 07 02 07 06 07 00 55 02 34 00 90 00 D2 00 00 00  // ......U.4.......
    92F0: 00 00 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF  // ...._W..PfR.....
    9300: 81 EF 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA  // .........f....f.
    9310: FC 0C ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03  // ...2.f..fZX.f.O.
    9320: 66 52 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF  // fRfVSWP..uD.....
    9330: 66 33 F6 66 BB D0 05 E8 00 01 00 00 C1 E8 10 F6  // f3.f............
    9340: C4 40 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66  // .@u+f....f..f..f
    9350: 40 C1 E0 10 66 8B C2 66 BB 13 00 E8 E8 00 00 00  // @...f..f........
    9360: 66 BB 12 00 E8 DF 00 00 00 66 58 32 E4 66 50 58  // f........fX2.fPX
    9370: 5F 5B 66 5E 66 5A C3 90 66 B8 4F 03 52 51 53 57  // _[f^fZ..f.O.RQSW
    9380: 66 56 50 8A FB 80 E3 7F 0A DB 75 26 E8 67 FF FF  // fVP.......u&.g..
    9390: FF C1 E2 10 66 8B D1 C1 E2 02 66 BE 00 00 E8 C7  // ....f.....f.....
    93A0: 00 00 00 66 BE 00 02 E8 BE 00 00 00 66 58 32 E4  // ...f........fX2.
    93B0: 66 50 58 66 5E 5F 5B 59 5A C3 66 B8 4F 03 66 51  // fPXf^_[YZ.f.O.fQ
    93C0: 57 56 53 52 50 8A FB 80 E3 7F 0A DB 75 39 8A DA  // WVSRP.......u9..
    93D0: 57 5A E8 21 FF FF FF 66 33 F6 66 53 66 BB D0 05  // WZ.!...f3.fSf...
    93E0: E8 57 00 00 00 80 E4 01 66 5B 80 E7 FE 0A FC 66  // .W......f[.....f
    93F0: BE 00 00 E8 DE 00 00 00 66 BE 00 02 E8 D5 00 00  // ........f.......
    9400: 00 66 58 32 E4 66 50 58 5A 5B 5E 5F 66 59 C3 90  // .fX2.fPXZ[^_fY..
    9410: 53 50 51 F6 C7 80 74 20 66 BB 9C 1B E8 1B 00 00  // SPQ...t f.......
    9420: 00 A8 01 74 13 66 B9 FF FF 66 BB A3 1B E8 0A 00  // ...t.f...f......
    9430: 00 00 A8 01 75 02 E2 F1 59 58 5B C3 66 52 E8 11  // ....u...YX[.fR..
    9440: 00 00 00 ED 66 5A C3 90 66 52 E8 05 00 00 00 EF  // ....fZ..fR......
    9450: 66 5A C3 90 66 8B D7 50 33 C0 66 8B C3 66 03 C6  // fZ..f..P3.f..f..
    9460: C1 E0 02 EF 66 83 C2 04 58 C3 52 E8 A0 FF FF FF  // ....f...X.R.....
    9470: 81 E2 FF FF FF 02 66 BB 04 1A E8 BD FF FF FF 25  // ......f........%
    9480: 00 00 00 FD 03 C2 66 25 00 F0 E8 B9 FF FF FF 66  // ......f%.......f
    9490: BB 05 1A E8 B0 FF FF FF 66 81 E2 FF 0F 66 BB 01  // ........f....f..
    94A0: 1A E8 96 FF FF FF 24 03 8A C8 66 D3 EA 66 BB 06  // ......$...f..f..
    94B0: 1A E8 86 FF FF FF 66 03 C2 66 BB 0D 1A E8 86 FF  // ......f..f......
    94C0: FF FF 66 8B C2 24 FC C1 E0 10 66 BB 5C 1B E8 75  // ..f..$....f.\..u
    94D0: FF FF FF 5A C3 90 52 66 53 66 51 E8 30 FF FF FF  // ...Z..RfSfQ.0...
    94E0: 33 C0 8A C3 66 53 66 BB 79 1A E8 59 FF FF FF 66  // 3...fSf.y..Y...f
    94F0: 5B 66 49 66 81 E1 FF 00 66 41 32 C0 66 53 66 BB  // [fIf....fA2.fSf.
    9500: 78 1A E8 41 FF FF FF 66 5B 26 8A 42 02 C1 E0 0A  // x..A...f[&.B....
    9510: 26 8A 42 01 C1 E0 0A 26 8A 02 C1 E0 02 F6 C7 01  // &.B....&........
    9520: 75 03 C1 E0 02 66 53 66 BB 7C 1A E8 18 FF FF FF  // u....fSf.|......
    9530: 66 5B 83 C2 04 E2 D2 66 59 66 5B 5A C3 00 71 38  // f[.....fYf[Z..q8
    9540: 64 38 64 38 64 38 4F 38 4F 38 4F 38 4F 38 91 34  // d8d8d8O8O8O8O8.4
    9550: 08 35 32 35 73 36 72 36 72 36 B8 36 1D 37 4D 37  // .525s6r6r6.6.7M7
    9560: 0A 38 33 38 33 38 AA 36 9D 36 9D 36 9D 36 9D 36  // .83838.6.6.6.6.6
    9570: 9D 36 B8 36 1D 37 4D 37 0A 38 38 38 7E 38 33 38  // .6.6.7M7.888~838
    9580: 33 38 FF FF FF FF FF FF 00 00 FF FF 00 00 FF FF  // 38..............
    9590: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 FF 00  // ................
    95A0: 00 00 00 00 08 10 00 08 10 18 00 08 10 18 95 32  // ...............2
    95B0: 01 95 32 02 A3 46 03 83 46 03 BA 33 03 6E 33 03  // ..2..F..F..3.n3.
    95C0: 96 32 04 AF 32 04 BF 32 04 95 32 03 00 00 00 00  // .2..2..2..2.....
    95D0: 42 3A 00 02 42 3A 01 02 42 3A 02 02 42 3A 03 02  // B:..B:..B:..B:..
    95E0: 42 3A 04 02 42 3A 05 02 3C 3C 00 02 3C 3C 01 02  // B:..B:..<<..<<..
    95F0: 3C 3C 02 02 3C 3C 03 02 3C 3C 04 02 3C 3C 05 02  // <<..<<..<<..<<..
    9600: 71 3C 00 02 71 3C 01 02 71 3C 02 02 71 3C 03 02  // q<..q<..q<..q<..
    9610: 71 3C 04 02 71 3C 05 02 AC 3E 00 02 AC 3E 01 02  // q<..q<...>...>..
    9620: AC 3E 02 02 AC 3E 03 02 AC 3E 04 02 AC 3E 05 02  // .>...>...>...>..
    9630: AC 3E 00 02 AC 3E 01 02 AC 3E 02 02 AC 3E 03 02  // .>...>...>...>..
    9640: AC 3E 04 02 AC 3E 05 02 73 3D 00 02 73 3D 01 02  // .>...>..s=..s=..
    9650: 73 3D 02 02 73 3D 03 02 73 3D 04 02 73 3D 05 02  // s=..s=..s=..s=..
    9660: AF 3D 00 02 AF 3D 01 02 AF 3D 02 02 AF 3D 03 02  // .=...=...=...=..
    9670: AF 3D 04 02 AF 3D 05 02 20 3D 00 02 20 3D 01 02  // .=...=.. =.. =..
    9680: 20 3D 02 02 20 3D 03 02 20 3D 04 02 20 3D 05 02  //  =.. =.. =.. =..
    9690: 54 3D 00 02 54 3D 01 02 54 3D 02 02 54 3D 03 02  // T=..T=..T=..T=..
    96A0: 54 3D 04 02 54 3D 05 02 04 41 00 00 37 41 01 00  // T=..T=...A..7A..
    96B0: 37 41 02 00 24 41 00 00 12 40 00 02 0B 3E 00 02  // 7A..$A...@...>..
    96C0: 0B 3E 01 02 0B 3E 02 02 0B 3E 03 02 0B 3E 04 02  // .>...>...>...>..
    96D0: 0B 3E 05 02 2A 40 00 02 7F 42 05 00 7F 42 01 00  // .>..*@...B...B..
    96E0: 7F 42 00 00 7F 42 02 00 C0 42 00 00 C0 42 02 00  // .B...B...B...B..
    96F0: 05 43 00 00 95 3F 00 02 95 3F 01 02 95 3F 02 02  // .C...?...?...?..
    9700: 95 3F 03 02 95 3F 04 02 95 3F 05 02 51 41 00 00  // .?...?...?..QA..
    9710: 79 41 00 00 FA 41 00 00 75 42 00 00 59 3E 00 02  // yA...A..uB..Y>..
    9720: 59 3E 01 02 59 3E 02 02 59 3E 03 02 59 3E 04 02  // Y>..Y>..Y>..Y>..
    9730: 59 3E 05 02 74 42 00 01 74 42 00 01 78 3B 00 02  // Y>..tB..tB..x;..
    9740: 78 3B 01 02 78 3B 02 02 78 3B 03 02 78 3B 04 02  // x;..x;..x;..x;..
    9750: 78 3B 05 02 99 41 00 00 75 42 00 00 75 42 00 00  // x;...A..uB..uB..
    9760: 75 42 00 00 AA 40 00 00 9C 3C 00 02 9C 3C 01 02  // uB...@...<...<..
    9770: 9C 3C 02 02 9C 3C 03 02 9C 3C 04 02 9C 3C 05 02  // .<...<...<...<..
    9780: CB 3C 00 02 CB 3C 01 02 CB 3C 02 02 CB 3C 03 02  // .<...<...<...<..
    9790: CB 3C 04 02 CB 3C 05 02 01 3D 00 02 01 3D 01 02  // .<...<...=...=..
    97A0: 01 3D 02 02 01 3D 03 02 01 3D 04 02 01 3D 05 02  // .=...=...=...=..
    97B0: BC 41 00 00 DF 41 00 00 9D 3D 01 02 9D 3D 02 02  // .A...A...=...=..
    97C0: F9 3D 01 02 F9 3D 02 02 A6 00 01 01 7C AA 0A AB  // .=...=......|...
    97D0: 62 AB A8 C9 9A D3 1A AC 00 00 B2 C9 00 00 2E AD  // b...............
    97E0: 2E AE DA AF FC B0 C8 B5 50 B7 58 B7 62 D1 94 D1  // ........P.X.b...
    97F0: 96 BC A8 BD CA BD 00 00 00 00 00 00 00 00 00 00  // ................
    9800: 00 00 58 BE 00 00 00 00 52 DD F2 DD 00 00 18 C1  // ..X.....R.......
    9810: 90 C1 04 C2 00 00 42 C2 6E C2 00 00 90 C2 AA C2  // ......B.n.......
    9820: 2A C3 F0 C3 A0 C5 EA C5 96 E3 80 C6 BE C6 96 C7  // *...............
    9830: 00 00 84 E0 EA C8 C8 E2 CC C9 9E DF FE CB 5E CC  // ..............^.
    9840: 68 CC 72 CC AE CC 5E CE 02 D6 66 CE D6 CF D6 D0  // h.r...^...f.....
    9850: 00 00 A4 D1 00 00 56 E2 00 00 E2 B7 44 BC 00 00  // ......V.....D...
    9860: 00 00 00 00 2C D6 72 D7 AA DA F6 DC 16 D3 4A 00  // ....,.r.......J.
    9870: 01 01 00 00 00 00 00 00 50 98 34 99 A0 99 D4 99  // ........P.4.....
    9880: 00 00 EE A9 00 00 22 9A FE 9A 0A 9B 2A 9B 9E 9B  // ......".....*...
    9890: B6 9B 00 00 D6 A9 00 00 00 00 00 00 00 00 F8 9E  // ................
    98A0: 2A A3 56 A0 00 00 4A A9 72 A9 A8 A3 00 00 00 00  // *.V...J.r.......
    98B0: 0A A8 16 A9 00 00 26 AA E4 00 01 02 4E 0C 80 02  // ......&.....N...
    98C0: C0 00 90 01 2D 00 20 00 40 00 01 00 03 00 00 00  // ....-. .@.......
    98D0: 00 00 00 00 02 00 E6 55 D6 09 80 02 A0 00 E0 01  // .......U........
    98E0: 2D 00 10 00 60 00 0A 00 02 00 00 00 00 00 08 08  // -...`...........
    98F0: 06 00 12 3C A0 0F 20 03 00 01 58 02 1C 00 28 00  // ...<.. ...X...(.
    9900: 80 00 01 00 04 00 00 00 00 00 00 00 00 00 6A 3C  // ..............j<
    9910: 64 19 00 04 40 01 00 03 26 00 18 00 88 00 03 00  // d...@...&.......
    9920: 06 00 00 00 00 00 00 00 06 00 55 3C 30 2A 00 05  // ..........U<0*..
    9930: 08 02 C0 03 28 00 60 00 70 00 01 00 03 00 00 00  // ....(.`.p.......
    9940: 00 00 00 00 00 00 E9 3C 30 2A 00 05 98 01 00 04  // .......<0*......
    9950: 2A 00 30 00 70 00 01 00 03 00 00 00 00 00 00 00  // *.0.p...........
    9960: 00 00 EA 3C 8F 2F 78 05 D0 01 1A 04 27 00 58 00  // ...<./x.....'.X.
    9970: 90 00 03 00 04 00 00 00 00 00 00 00 02 00 EB 3C  // ...............<
    9980: 48 3F 40 06 30 02 B0 04 32 00 40 00 C0 00 01 00  // H?@.0...2.@.....
    9990: 03 00 00 00 00 00 00 00 00 00 EC 3C 6C 00 02 02  // ...........<l...
    99A0: 01 02 32 0F 30 75 00 00 30 75 00 00 00 00 00 00  // ..2.0u..0u......
    99B0: 40 7E 05 00 00 00 00 00 00 00 00 00 C0 27 09 00  // @~...........'..
    99C0: 00 00 00 00 92 F4 00 00 00 00 84 03 9A 0B 70 17  // ..............p.
    99D0: 00 00 00 00 28 88 04 00 00 00 00 00 00 00 00 00  // ....(...........
    99E0: 00 00 00 00 40 9C C4 09 10 27 52 03 1F 40 10 27  // ....@....'R..@.'
    99F0: 10 27 10 27 00 00 00 00 0E 06 00 00 00 00 00 00  // .'.'............
    9A00: 00 00 00 00 00 00 00 00 34 00 02 01 00 00 00 00  // ........4.......
    9A10: 00 2A 00 2A 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15  // .*.*..***..*.**.
    9A20: 00 2A 2A 2A 15 15 15 15 15 3F 15 3F 15 15 3F 3F  // .***.....?.?..??
    9A30: 3F 15 15 3F 15 3F 3F 3F 15 3F 3F 3F 4E 00 01 03  // ?..?.???.???N...
    9A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A50: 00 00 00 00 00 00 00 00 06 00 00 00 00 00 20 00  // .............. .
    9A60: 00 00 00 00 1D 3C 01 00 00 00 00 00 00 48 C8 00  // .....<.......H..
    9A70: 07 5A 5A 07 7D 00 00 00 00 00 00 00 00 00 00 00  // .ZZ.}...........
    9A80: 00 00 00 00 00 00 00 00 00 00 DC 00 01 01 68 48  // ..............hH
    9A90: 6A 48 6B 48 69 48 68 48 6A 48 6B 48 69 48 90 00  // jHkHiHhHjHkHiH..
    9AA0: 00 00 00 08 08 08 08 00 00 6C 48 6E 48 6F 48 6D  // .........lHnHoHm
    9AB0: 48 6C 48 6E 48 6F 48 6D 48 91 00 00 00 00 08 08  // HlHnHoHmH.......
    9AC0: 08 08 00 00 70 48 72 48 73 48 71 48 70 48 72 48  // ....pHrHsHqHpHrH
    9AD0: 73 48 71 48 92 00 00 00 00 08 08 08 08 00 00 74  // sHqH...........t
    9AE0: 48 76 48 77 48 75 48 74 48 76 48 77 48 75 48 93  // HvHwHuHtHvHwHuH.
    9AF0: 00 00 00 00 08 08 08 08 00 00 78 48 7A 48 7B 48  // ..........xHzH{H
    9B00: 79 48 78 48 7A 48 7B 48 79 48 94 00 00 00 00 08  // yHxHzH{HyH......
    9B10: 08 08 08 00 00 7C 48 7E 48 7F 48 7D 48 7C 48 7E  // .....|H~H.H}H|H~
    9B20: 48 7F 48 7D 48 95 00 00 00 00 08 08 08 08 00 00  // H.H}H...........
    9B30: 98 48 9A 48 9B 48 99 48 98 48 9A 48 9B 48 99 48  // .H.H.H.H.H.H.H.H
    9B40: 96 00 00 00 00 01 01 01 01 00 00 80 48 82 48 83  // ............H.H.
    9B50: 48 81 48 80 48 82 48 83 48 81 48 97 00 00 00 00  // H.H.H.H.H.H.....
    9B60: 08 08 08 08 00 00 0C 00 01 05 E0 FF 7F 00 20 00  // .............. .
    9B70: 20 00 20 00 01 01 8D 48 00 01 8D 48 08 02 8D 48  //  . ....H...H...H
    9B80: 10 03 8D 48 18 04 8D 48 1A 05 8D 48 1C 06 83 01  // ...H...H...H....
    9B90: 05 3D 74 00 01 01 10 01 06 12 11 01 16 12 13 01  // .=t.............
    9BA0: 06 6A 14 01 16 6A 16 01 06 55 17 01 16 55 19 01  // .j...j...U...U..
    9BB0: 06 EA 1A 01 16 EA 65 01 16 E9 66 01 0A E9 21 01  // ......e...f...!.
    9BC0: 0A 12 22 01 0A 6A 23 01 0A 55 24 01 0A EA 45 01  // .."..j#..U$...E.
    9BD0: 16 EB 46 01 0A EB 75 01 16 EC 76 01 0A EC D2 01  // ..F...u...v.....
    9BE0: 16 70 D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01  // .p...p...q...q..
    9BF0: 16 72 E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01  // .r...r...s...s..
    9C00: 16 74 F6 01 0A 74 18 00 02 03 01 08 04 08 09 01  // .t...t..........
    9C10: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 41 03  // ..............A.
    9C20: 07 01 00 4D 00 81 06 00 00 9A 28 00 00 19 00 00  // ...M......(.....
    9C30: 00 00 80 06 01 40 0D 03 00 E8 6E 03 00 32 00 19  // .....@....n..2..
    9C40: 00 4D 00 A1 02 98 02 00 00 B5 01 3B 01 77 00 F9  // .M.........;.w..
    9C50: 00 DE 01 06 03 00 00 D1 02 00 00 20 03 3A 03 74  // ........... .:.t
    9C60: 1B 02 00 53 07 00 00 00 00 00 00 01 02 00 00 00  // ...S............
    9C70: 00 00 00 00 00 08 00 00 00 00 00 00 00 00 00 00  // ................
    9C80: 00 07 00 02 00 00 00 00 00 05 00 00 00 00 00 00  // ................
    9C90: 00 00 00 00 00 00 10 EE 02 00 00 00 00 00 00 02  // ................
    9CA0: FF 00 00 00 00 00 00 03 FF 00 00 00 00 00 00 04  // ................
    9CB0: FF 00 00 00 00 00 00 05 FF 00 00 00 00 00 00 06  // ................
    9CC0: FF 00 00 00 00 00 00 07 FF 00 00 00 00 00 00 08  // ................
    9CD0: FF 00 00 00 00 00 00 20 03 00 00 00 00 00 00 52  // ....... .......R
    9CE0: 03 00 00 00 00 00 00 84 03 00 00 00 00 00 00 B6  // ................
    9CF0: 03 00 00 00 00 00 00 E8 03 00 00 00 00 00 00 1A  // ................
    9D00: 04 00 00 00 00 00 00 4C 04 00 00 00 00 00 00 7E  // .......L.......~
    9D10: 04 00 00 00 00 00 00 00 08 84 03 00 00 00 00 00  // ................
    9D20: 00 02 FF 00 00 00 00 00 00 03 FF 00 00 00 00 00  // ................
    9D30: 00 04 FF 00 00 00 00 00 00 05 FF 00 00 00 00 00  // ................
    9D40: 00 06 FF 00 00 00 00 00 00 07 FF 00 00 00 00 00  // ................
    9D50: 00 08 FF 00 00 00 00 00 00 01 08 00 00 00 30 75  // ..............0u
    9D60: 00 00 00 00 00 80 00 00 00 00 01 E6 FF 60 EA 00  // .............`..
    9D70: 00 00 00 00 00 00 00 00 00 02 E6 FF 90 5F 01 00  // ............._..
    9D80: 00 00 00 00 00 00 00 00 03 E6 FF 44 BF 01 00 00  // ...........D....
    9D90: 00 00 00 00 00 00 00 04 E6 FF 9C DA 01 00 00 00  // ................
    9DA0: 00 00 00 00 00 00 05 E6 FF 04 EB 01 00 00 00 00  // ................
    9DB0: 00 00 00 00 00 06 E6 FF D0 FB 01 00 00 00 00 00  // ................
    9DC0: 00 00 00 00 07 00 00 98 15 02 00 00 00 00 00 00  // ................
    9DD0: 00 00 00 00 03 00 20 03 00 00 E8 03 30 75 00 00  // ...... .....0u..
    9DE0: 00 00 08 52 03 00 00 E8 03 A0 86 01 00 00 00 0B  // ...R............
    9DF0: B6 03 00 00 E8 03 40 0D 03 00 00 00 00 08 08 00  // ......@.........
    9E00: 00 90 E2 00 00 F8 24 01 00 18 F6 00 00 00 00 00  // ......$.........
    9E10: 00 A8 DE 00 00 09 B4 FF 18 F6 00 00 80 38 01 00  // .............8..
    9E20: 88 0D 01 00 00 00 00 00 00 FA 00 00 0A 9B FF A0  // ................
    9E30: 09 01 00 08 4C 01 00 F8 24 01 00 00 00 00 00 70  // ....L...$......p
    9E40: 11 01 00 0B 82 FF 28 1D 01 00 A8 5B 01 00 68 3C  // ......(....[..h<
    9E50: 01 00 00 00 00 00 E0 28 01 00 0C 69 FF C8 2C 01  // .......(...i..,.
    9E60: 00 60 67 01 00 F0 4F 01 00 00 00 00 00 68 3C 01  // .`g...O......h<.
    9E70: 00 0D 37 FF 80 38 01 00 18 73 01 00 78 63 01 00  // ..7..8...s..xc..
    9E80: 00 00 00 00 08 4C 01 00 0E 05 FF 38 44 01 00 D0  // .....L.....8D...
    9E90: 7E 01 00 00 77 01 00 00 00 00 00 C0 57 01 00 0F  // ~...w.......W...
    9EA0: 00 00 F0 4F 01 00 A0 86 01 00 A0 86 01 00 00 00  // ...O............
    9EB0: 00 00 78 63 01 00 01 17 00 00 02 00 23 00 00 09  // ..xc........#...
    9EC0: 03 A0 0F 64 19 34 21 D0 07 A0 0F 70 17 94 2A 01  // ...d.4!....p..*.
    9ED0: 64 00 E4 12 98 08 90 5F 01 00 4B 23 96 00 96 00  // d......_..K#....
    9EE0: 64 00 96 00 96 00 96 00 64 00 01 32 3C 00 00 04  // d.......d..2<...
    9EF0: 91 00 00 00 84 00 91 00 91 00 00 00 00 00 91 00  // ................
    9F00: 5A 00 00 00 00 00 5E 00 02 00 69 00 50 00 50 00  // Z.....^...i.P.P.
    9F10: 73 00 73 00 5F 00 00 00 90 10 96 00 90 00 00 06  // s.s._...........
    9F20: 00 00 00 00 01 06 00 00 01 02 00 01 01 02 00 02  // ................
    9F30: 01 02 00 02 01 02 00 02 01 02 00 02 01 02 01 03  // ................
    9F40: 00 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00  // ................
    9F50: 02 10 00 00 00 00 00 00 00 01 00 00 00 00 00 00  // ................
    9F60: 5E 01 01 03 88 0E 48 00 00 00 FB 00 00 00 12 00  // ^.....H.........
    9F70: 00 00 05 01 00 00 08 00 0A 00 13 31 00 11 21 21  // ...........1..!!
    9F80: 80 00 0A 00 13 32 00 11 21 22 00 02 0A 00 13 33  // .....2..!".....3
    9F90: 00 11 20 21 00 04 0A 00 0C 31 00 11 20 22 00 08  // .. !.....1.. "..
    9FA0: 0A 00 04 31 00 11 1E 21 05 00 00 00 13 31 74 00  // ...1...!.....1t.
    9FB0: 7A 00 00 00 13 32 8F 00 95 00 00 00 13 33 AA 00  // z....2.......3..
    9FC0: B0 00 00 00 0C 31 C5 00 CB 00 00 00 04 31 E0 00  // .....1.......1..
    9FD0: E6 00 00 00 01 21 21 00 00 00 04 0C 01 00 10 02  // .....!!.........
    9FE0: 00 00 08 00 00 00 01 04 90 00 02 04 06 00 FF 01  // ................
    9FF0: 21 22 00 00 00 04 0C 01 00 20 02 00 00 80 00 00  // !"....... ......
    A000: 00 01 04 92 00 02 04 04 00 FF 01 20 21 00 00 00  // ........... !...
    A010: 04 0C 01 00 30 02 00 00 00 02 00 00 01 04 91 00  // ....0...........
    A020: 02 04 01 00 FF 01 20 22 00 00 00 04 0C 01 00 40  // ...... ".......@
    A030: 02 00 00 00 04 00 00 01 04 93 00 02 04 05 00 FF  // ................
    A040: 01 1E 21 00 00 00 04 0C 01 00 50 02 00 00 00 08  // ..!.......P.....
    A050: 00 00 01 04 95 00 02 04 03 00 FF 05 00 00 00 21  // ...............!
    A060: 21 27 01 2D 01 00 00 21 22 32 01 38 01 00 00 20  // !'.-...!"2.8... 
    A070: 21 3D 01 43 01 00 00 20 22 48 01 4E 01 00 00 1E  // !=.C... "H.N....
    A080: 21 53 01 59 01 00 00 01 00 11 01 13 31 14 04 0F  // !S.Y........1...
    A090: 00 FF 01 00 11 01 13 32 14 04 0F 00 FF 01 00 11  // .......2........
    A0A0: 01 13 33 14 04 0F 00 FF 01 00 11 01 0C 31 14 04  // ..3..........1..
    A0B0: 0F 00 FF 01 00 11 01 04 31 14 04 0F 00 FF D4 02  // ........1.......
    A0C0: 02 01 30 DC B4 00 00 70 03 00 2C 1F 00 00 14 00  // ..0....p..,.....
    A0D0: 00 00 DC 0C 14 00 00 00 D5 0C 33 03 00 00 D4 0C  // ..........3.....
    A0E0: 00 02 0C 00 00 0B 29 00 20 0F D3 0B E0 1F 12 00  // ......). .......
    A0F0: ED 09 10 A8 08 00 92 09 00 04 0C 00 94 09 00 04  // ................
    A100: 0C 00 93 09 00 04 0C 00 6D 09 1F 10 14 01 2E 08  // ........m.......
    A110: 00 04 0C 00 30 08 80 0C 0C 00 2F 08 00 04 0C 00  // ....0...../.....
    A120: 4F 09 B4 00 01 00 1E 09 00 04 0C 00 F3 09 1B 90  // O...............
    A130: 00 00 E9 09 5A 8A FF 00 EA 09 7A AE FF 08 EE 09  // ....Z.....z.....
    A140: 10 0C 00 00 EF 09 10 0C 00 00 E5 09 FC FD FC FC  // ................
    A150: E6 09 FD F8 FC FC E7 09 FC FC F3 FC E8 09 FC FC  // ................
    A160: FC F5 F0 09 08 6F C3 00 F1 09 05 29 C3 00 DA 09  // .....o.....)....
    A170: 11 40 04 00 D6 09 03 F8 6F 00 F2 09 10 10 87 01  // .@......o.......
    A180: F4 09 45 4F 70 08 F5 09 16 3A 02 03 DB 09 03 03  // ..EOp....:......
    A190: 00 00 E1 09 00 00 00 00 E2 09 04 00 00 00 74 09  // ..............t.
    A1A0: C9 00 00 00 76 09 00 30 00 00 7F 09 49 9A 24 00  // ....v..0....I.$.
    A1B0: 80 09 51 12 25 02 3B 08 1C 3C 00 70 56 08 3F 40  // ..Q.%.;..<.pV.?@
    A1C0: 00 00 57 08 10 10 00 00 5A 08 97 09 00 00 E7 0D  // ..W.....Z.......
    A1D0: 99 00 C1 50 E8 0D 99 01 C1 50 E9 0D 89 00 C1 50  // ...P.....P.....P
    A1E0: EA 0D 19 03 C1 50 51 08 99 00 C1 50 52 08 99 00  // .....PQ....PR...
    A1F0: C1 50 53 08 99 00 C1 50 54 08 99 00 C1 50 5C 08  // .PS....PT....P\.
    A200: 91 09 00 00 83 08 91 01 00 00 59 08 91 51 00 00  // ..........Y..Q..
    A210: 5B 08 91 29 00 00 5D 08 91 09 00 00 58 08 91 09  // [..)..].....X...
    A220: 00 00 64 08 13 00 00 00 84 08 95 09 00 00 3D 08  // ..d...........=.
    A230: 49 92 24 00 80 08 91 09 00 00 35 08 1E 00 F9 00  // I.$.......5.....
    A240: 41 08 12 68 8F F8 42 08 13 6A 91 F6 77 08 91 13  // A..h..B..j..w...
    A250: 00 00 70 08 11 0B 00 00 EB 0D 3D 90 80 40 EC 0D  // ..p.......=..@..
    A260: 35 50 54 40 ED 0D 3D 50 1C 40 EE 0D 35 B0 6A 40  // 5PT@..=P.@..5.j@
    A270: 66 08 45 90 80 40 67 08 55 50 80 40 68 08 3D 50  // f.E..@g.UP.@h.=P
    A280: 4C 40 69 08 3D 70 80 40 6D 08 91 09 01 00 71 08  // L@i.=p.@m.....q.
    A290: 15 24 00 00 88 08 91 11 00 00 78 08 91 12 00 00  // .$........x.....
    A2A0: 6B 08 A1 09 00 00 72 08 91 09 00 00 6C 08 01 09  // k.....r.....l...
    A2B0: 00 00 74 08 95 51 00 00 4D 08 11 09 00 00 4E 08  // ..t..Q..M.....N.
    A2C0: 11 2A 00 00 73 08 13 0F 00 00 75 08 91 09 00 00  // .*..s.....u.....
    A2D0: 7D 08 91 09 00 00 89 08 91 01 00 00 3E 08 49 92  // }...........>.I.
    A2E0: CC 00 7F 08 91 11 00 00 7E 08 91 21 03 00 6F 08  // ........~..!..o.
    A2F0: 91 29 00 00 3C 08 07 00 00 80 81 09 91 0C 00 00  // .)..<...........
    A300: 82 09 95 09 00 00 85 09 11 01 00 00 83 09 91 09  // ................
    A310: 00 00 84 09 11 8C 00 00 86 09 91 09 00 00 87 09  // ................
    A320: 11 09 00 00 88 09 91 89 00 00 7B 09 91 49 00 00  // ..........{..I..
    A330: 7C 09 A1 09 00 00 70 05 00 04 0C 00 8E 0C 00 00  // |.....p.........
    A340: 00 00 83 08 91 01 00 00 84 08 95 09 00 00 85 08  // ................
    A350: 97 09 00 00 88 08 91 11 00 00 89 08 91 01 00 00  // ................
    A360: 8A 08 93 09 00 00 50 08 91 09 02 00 3F 08 28 28  // ......P.....?.((
    A370: 72 72 40 08 50 50 28 28 43 08 80 80 00 00 CD 09  // rr@.PP((C.......
    A380: 10 00 00 00 C0 09 40 0F 50 00 60 08 E1 09 02 00  // ......@.P.`.....
    A390: 00 00 7D 00 01 01 01 02 04 20 00 06 20 00 00 03  // ..}...... .. ...
    A3A0: 91 0A 02 92 0A 09 10 00 01 82 04 20 00 06 20 00  // ........... .. .
    A3B0: 00 03 91 0A 08 20 00 00 03 92 0A 09 26 00 01 03  // ..... ......&...
    A3C0: 02 0E 00 06 10 00 00 03 0E 00 02 0F 00 09 38 00  // ..............8.
    A3D0: 01 83 02 0E 00 06 10 00 00 03 0E 00 08 20 00 00  // ............. ..
    A3E0: 03 0F 00 09 4E 00 01 05 02 82 00 06 10 00 00 03  // ....N...........
    A3F0: 82 00 02 83 00 09 60 00 01 85 02 82 00 06 10 00  // ......`.........
    A400: 00 03 82 00 08 20 00 00 03 83 00 09 76 00 00 00  // ..... ......v...
    A410: 61 04 02 02 4B 00 5A 00 FC 02 B2 03 2A 03 00 00  // a...K.Z.....*...
    A420: 01 01 08 04 32 10 54 76 37 00 A2 60 FF 00 00 50  // ....2.Tv7..`...P
    A430: 03 05 63 0A 04 00 00 00 00 20 00 0B 00 40 00 61  // ..c...... ...@.a
    A440: A1 02 02 00 00 00 00 00 43 65 07 00 00 00 00 00  // ........Ce......
    A450: 4B 34 47 38 30 33 32 35 46 43 00 03 00 04 00 FF  // K4G80325FC......
    A460: FF 00 FF FF FF 00 00 00 00 00 2A 00 34 00 2F 0A  // ..........*.4./.
    A470: 04 30 0A 00 D5 0A 04 2C 0A 04 28 0A 04 29 0A 04  // .0.....,..(..)..
    A480: 2A 0A 04 2B 0A 04 81 0A 04 8B 0A 04 5F 0A 04 DD  // *..+........_...
    A490: 09 84 DE 09 84 FF FF 00 A8 61 00 00 11 10 00 00  // .........a......
    A4A0: 00 00 00 00 22 CC 1C 00 62 8C 11 0B 20 57 09 08  // ...."...b... W..
    A4B0: 0D C3 B0 01 00 20 42 00 21 01 14 20 AA 88 00 A0  // ..... B.!.. ....
    A4C0: 00 00 00 00 04 03 08 09 1B 0D 0E 0E 40 9C 00 00  // ............@...
    A4D0: 33 30 00 00 00 00 00 00 22 CC 1C 00 63 94 12 11  // 30......"...c...
    A4E0: 20 57 0A 09 11 44 B1 02 00 20 43 00 2A 02 14 20  //  W...D... C.*.. 
    A4F0: BA 88 00 A0 00 00 00 00 06 04 0C 0E 2B 10 12 0F  // ............+...
    A500: 60 EA 00 00 33 30 00 00 00 00 00 00 22 CC 1C 00  // `...30......"...
    A510: A5 20 24 1A 40 57 0B 0B 97 05 12 04 00 22 64 00  // . $.@W......."d.
    A520: 3A 05 14 20 CA 88 00 A0 00 00 00 00 09 06 12 15  // :.. ............
    A530: 41 15 18 10 90 5F 01 00 33 30 00 00 00 00 00 00  // A...._..30......
    A540: 22 CC 1C 00 E7 B4 36 27 80 57 0B 0F 9F 07 23 06  // ".....6'.W....#.
    A550: 00 24 85 00 5A 09 14 20 DA 88 00 A0 00 00 00 00  // .$..Z.. ........
    A560: 0E 08 1A 20 62 1D 20 12 A0 86 01 00 33 30 00 00  // ... b. .....30..
    A570: 00 00 00 00 22 CC 1C 00 08 39 37 2B 90 57 0B 10  // ...."....97+.W..
    A580: 21 48 D3 06 00 44 86 00 62 0A 14 20 6A 89 00 A0  // !H...D..b.. j...
    A590: 00 00 00 00 0F 09 1D 23 6D 1F 22 13 74 B7 01 00  // .......#m.".t...
    A5A0: 33 30 00 00 00 00 00 00 22 CC 1C 00 29 41 48 31  // 30......"...)AH1
    A5B0: A0 57 0C 11 25 C9 B3 07 00 46 A6 00 6A 0C 14 20  // .W..%....F..j.. 
    A5C0: 6A 89 00 A0 00 00 00 00 11 0A 21 28 7B 22 26 14  // j.........!({"&.
    A5D0: 48 E8 01 00 33 30 00 00 00 00 00 00 22 CC 1C 00  // H...30......"...
    A5E0: 4A 49 49 37 B0 57 0C 12 29 4A 94 08 00 46 A7 00  // JII7.W..)J...F..
    A5F0: 72 0E 14 20 7A 89 00 A0 00 00 00 00 13 0B 25 2D  // r.. z.........%-
    A600: 89 25 2A 14 1C 19 02 00 33 30 00 00 00 00 00 00  // .%*.....30......
    A610: 22 CC 1C 00 8C 51 5A 3D C0 57 0D 13 2D CB 74 09  // "....QZ=.W..-.t.
    A620: 00 48 C7 00 7A 00 14 20 7A 89 00 A0 02 00 00 00  // .H..z.. z.......
    A630: 15 0D 29 31 97 28 2E 15 F0 49 02 00 55 50 00 00  // ..)1.(...I..UP..
    A640: 00 00 00 00 22 CC 1C 00 AD 59 5B 41 C0 57 0E 14  // ...."....Y[A.W..
    A650: B0 0B 45 0A 00 68 C7 00 03 01 14 20 FA 89 00 A0  // ..E..h..... ....
    A660: 03 00 00 00 17 0E 2B 34 A4 2A 31 16 C4 7A 02 00  // ......+4.*1..z..
    A670: 55 50 00 00 00 00 00 00 22 CC 1C 00 CE 61 6C 47  // UP......"....alG
    A680: D0 57 0F 15 B4 8C 25 0B 00 6A E7 00 0B 03 14 20  // .W....%..j..... 
    A690: FA 89 00 A0 03 00 00 00 19 0F 2F 39 B2 2D 35 17  // ........../9.-5.
    A6A0: 98 AB 02 00 77 70 00 00 00 00 00 00 22 CC 1C 00  // ....wp......"...
    A6B0: 10 6A 6D 4D D0 57 10 16 B9 0D 06 0C 00 6A E7 00  // .jmM.W.......j..
    A6C0: 14 05 14 20 FA 89 00 A0 03 00 00 00 1B 11 33 3D  // ... ..........3=
    A6D0: C0 30 3A 17 40 0D 03 00 77 70 00 00 00 00 00 00  // .0:.@...wp......
    A6E0: 22 CC 1C 00 31 FE 7F 57 F0 57 11 18 3F CF B6 0D  // "...1..W.W..?...
    A6F0: 00 6C 07 01 24 08 14 20 FA 89 00 A0 03 00 00 00  // .l..$.. ........
    A700: 20 12 38 46 DB 35 40 19 00 00 00 00 06 00 08 00  //  .8F.5@.........
    A710: 0E 00 44 FF FF 00 FF FF FF 00 1F 00 00 00 FF FF  // ..D.............
    A720: FF 01 1F 00 00 00 FF FF FF 02 1F 00 00 00 FF FF  // ................
    A730: FF 03 1F 00 00 00 00 00 00 00 E1 B4 88 D6 9B 00  // ................
    A740: A5 3F 21 00 FD 02 D1 00 81 F6 D2 00 88 D6 9B 00  // .?!.............
    A750: 66 3F 05 00 F4 9B 41 00 A6 B0 E6 00 4E 1E 6F 06  // f?....A.....N.o.
    A760: D1 00 42 D6 D3 00 AC 3F 05 00 81 56 9F 00 E6 BB  // ..B....?...V....
    A770: 40 00 16 B1 F4 00 88 D6 9B 00 E5 3D 28 00 E1 B1  // @..........=(...
    A780: 11 E6 B3 00 F4 3B 05 00 6F 06 CA 00 42 D6 D3 00  // .....;..o...B...
    A790: BC AB 21 00 88 76 97 00 E6 BB 08 00 A6 B0 F4 00  // ..!..v..........
    A7A0: 4B 1E 4F 07 D1 00 C2 D2 D3 00 88 F6 D2 00 F4 3B  // K.O............;
    A7B0: 05 00 66 3F 21 00 A6 90 BD 00 81 76 B3 00 F4 3B  // ..f?!......v...;
    A7C0: 05 00 4B 00 5C 00 80 0A 04 8C 0A 04 95 0A 04 96  // ..K.\...........
    A7D0: 0A 04 99 0A 04 82 0A 04 74 0A 04 75 0A 04 00 00  // ........t..u....
    A7E0: 44 01 00 44 02 00 44 03 00 44 04 00 44 05 00 44  // D..D..D..D..D..D
    A7F0: 09 00 44 0A 00 44 0B 00 44 0C 00 44 0D 00 44 0F  // ..D..D..D..D..D.
    A800: 00 44 4E 0A 04 54 0A 00 97 0A 04 98 0A 00 FF FF  // .DN..T..........
    A810: 00 FF FF FF 00 72 21 60 50 F8 CF 00 E0 4A 4E 6F  // .....r!`P....JNo
    A820: A2 0D F0 8C 30 00 E0 03 70 13 46 03 61 00 00 00  // ....0...p.F.a...
    A830: 00 00 00 1B 00 FF FF 0C 0C 04 00 05 01 20 3C 00  // ............. <.
    A840: 00 00 03 00 63 04 06 00 00 23 00 00 00 00 00 00  // ....c....#......
    A850: 00 98 00 02 00 95 08 00 00 00 00 1E 01 30 00 00  // .............0..
    A860: 00 00 00 86 53 AA AA AA 00 F5 C8 02 00 00 00 00  // ....S...........
    A870: 00 00 0C 01 03 06 C0 D4 01 00 F8 24 01 00 38 00  // ...........$..8.
    A880: 06 0A 6A 24 09 00 80 1A 06 00 E8 03 00 00 0C 01  // ..j$............
    A890: 18 08 20 03 00 00 B0 04 00 00 38 C1 01 00 38 C1  // .. .......8...8.
    A8A0: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 34 C4  // ..............4.
    A8B0: 01 00 43 01 00 00 00 00 00 00 00 00 00 00 C0 FF  // ..C.............
    A8C0: 08 0F 08 31 AC 10 00 00 00 00 00 00 01 00 00 00  // ...1............
    A8D0: 00 00 00 00 00 00 4B 00 00 00 00 00 00 00 2B 00  // ......K.......+.
    A8E0: 00 00 00 00 00 00 10 00 00 00 00 00 00 00 9B 02  // ................
    A8F0: 00 00 03 00 00 00 EA 01 00 00 8A 02 00 00 34 03  // ..............4.
    A900: 00 00 7E 04 00 00 EC 04 00 00 50 05 00 00 B4 05  // ..~.......P.....
    A910: 00 00 E6 05 00 00 B0 71 0B 00 00 35 0C 00 60 1F  // .......q...5..`.
    A920: 0D 00 98 E0 0E 00 70 B7 0F 00 E0 C8 10 00 00 17  // ......p.........
    A930: 11 00 30 8C 11 00 29 01 00 00 A2 04 00 00 BE 01  // ..0...).........
    A940: 00 00 1B 00 B8 0B 00 00 6B B6 43 F8 B5 9C 05 00  // ........k.C.....
    A950: 7A 28 FF FF 00 00 00 00 F3 0D 03 00 7F 60 FE FF  // z(...........`..
    A960: 00 00 00 00 23 FF 58 00 00 00 00 00 00 00 8A 00  // ....#.X.........
    A970: EB FF FF FF C0 12 00 01 00 01 00 01 00 00 34 00  // ..............4.
    A980: 03 01 01 07 0C 00 0E 00 00 00 00 00 00 00 04 00  // ................
    A990: 24 00 00 04 00 00 02 80 10 00 00 00 00 00 20 03  // $............. .
    A9A0: 00 00 10 00 52 03 02 00 00 00 84 03 00 80 00 00  // ....R...........
    A9B0: B6 03 28 00 03 01 FF FF FF 00 4B 00 B8 0B 01 00  // ..(.......K.....
    A9C0: 00 00 FF FF FF 00 32 00 4E 0C 02 00 00 00 FF FF  // ......2.N.......
    A9D0: FF 00 7C 01 45 0C 07 12 00 00 64 00 02 03 14 00  // ..|.E.....d.....
    A9E0: 00 00 46 2D 00 00 70 06 02 06 00 00 00 00 1E 21  // ..F-..p........!
    A9F0: 52 00 4C 00 03 FF FF 00 1E 22 55 00 4C 00 09 FF  // R.L......"U.L...
    AA00: FF 00 20 21 58 00 4C 00 0A FF FF 00 20 22 5B 00  // .. !X.L..... "[.
    AA10: 4C 00 0B FF FF 00 21 21 5E 00 4C 00 0C FF FF 00  // L.....!!^.L.....
    AA20: 21 22 61 00 4C 00 0D FF FF 00 FF FF 14 04 FF 15  // !"a.L...........
    AA30: 04 FF 16 04 FF 17 04 FF 18 04 FF 19 04 FF 18 00  // ................
    AA40: 02 01 02 00 08 00 80 00 00 02 00 04 00 08 40 00  // ..............@.
    AA50: 01 00 10 00 FF FF 38 00 02 01 04 4A 03 00 7C 92  // ......8....J..|.
    AA60: 00 00 01 04 1E 00 3C 00 00 00 F8 24 01 00 01 03  // ......<....$....
    AA70: 1E 00 3C 00 1E 00 F0 49 02 00 01 02 1E 00 3C 00  // ..<....I......<.
    AA80: 1E 00 E0 93 04 00 01 01 1E 00 00 00 1E 00 55 00  // ..............U.
    AA90: 01 01 01 10 02 00 85 02 10 00 11 02 00 01 00 21  // ...............!
    AAA0: 00 01 00 88 92 04 00 45 00 02 00 50 00 14 00 70  // .......E...P...p
    AAB0: 00 84 00 64 02 02 00 69 02 01 00 42 02 02 00 44  // ...d...i...B...D
    AAC0: 02 02 00 46 02 02 00 48 02 02 00 79 02 40 00 84  // ...F...H...y.@..
    AAD0: 99 02 00 8C 99 01 00 02 9B 08 00 8E E6 72 01 00  // .............r..
    AAE0: 00 00 00 00 8E 00 01 02 00 08 02 01 02 00 52 47  // ..............RG
    AAF0: 52 02 02 65 02 07 52 0D 55 00 02 52 0D 52 23 2C  // R..e..R.U..R.R#,
    AB00: 25 02 01 3D 25 02 06 45 17 00 51 02 52 3D 52 39  // %..=%..E..Q.R=R9
    AB10: 66 04 02 8C 02 2E 00 02 0D 02 01 00 52 43 02 05  // f...........RC..
    AB20: 02 04 00 52 03 52 43 02 0D 02 02 03 52 43 02 F9  // ...R.RC.....RC..
    AB30: 02 01 52 05 02 01 02 00 0E E5 02 08 52 0A 02 05  // ..R.........R...
    AB40: 02 02 00 0E 06 52 43 02 05 02 04 00 20 03 52 43  // .....RC..... .RC
    AB50: 02 05 02 30 75 00 40 52 0B 02 05 02 04 00 52 03  // ...0u.@R......R.
    AB60: 52 43 02 01 02 01 0E E5 02 08 52 0B 0D 65 D0 05  // RC........R..e..
    AB70: 02 5B 57 00 01 02 00 00 37 00 00 52 14 02 08 00  // .[W.....7..R....
    AB80: 0D 1A 32 08 00 0B 1A 02 88 00 0E 1A 32 88 00 0C  // ..2.........2...
    AB90: 1A 03 00 46 04 1A 09 05 46 FF FF FF 02 56 00 40  // ...F....F....V.@
    ABA0: 03 20 40 01 1A 09 25 40 03 75 02 46 40 03 18 40  // . @...%@.u.F@..@
    ABB0: 5C 1B 2D 02 46 40 27 00 46 06 1A 2D 08 40 5C 1B  // \.-.F@'.F..-.@\.
    ABC0: 02 0A 01 41 02 8A 01 40 5B 00 B7 00 01 01 04 00  // ...A...@[.......
    ABD0: 37 00 00 01 05 0E 00 02 00 40 01 37 03 00 5C 05  // 7........@.7..\.
    ABE0: 02 00 FC 7F FF FF 02 00 00 00 5C 05 10 00 FF FF  // ..........\.....
    ABF0: 9D FF 00 09 41 00 5C 05 21 00 7F FF FF FF 80 00  // ....A.\.!.......
    AC00: 00 00 5C 05 40 00 BE 3F FF FF 40 40 01 00 37 00  // ..\.@..?..@@..7.
    AC10: 00 01 05 0E 00 70 00 01 10 37 03 00 01 05 70 00  // .....p...7....p.
    AC20: 00 40 00 01 5C 05 A0 00 0F FF FE DF 10 00 01 60  // .@..\..........`
    AC30: 5C 05 A2 00 7F F3 97 FF 86 04 88 5A 5C 05 A4 00  // \..........Z\...
    AC40: 1B F0 FF FF 20 0D 40 04 5C 05 B1 00 FF 2D FF FF  // .... .@.\....-..
    AC50: 80 50 18 96 37 00 00 54 00 06 00 01 25 C5 14 02  // .P..7..T....%...
    AC60: 01 05 C2 14 7F 00 00 00 01 05 E8 15 70 3D 29 0A  // ............p=).
    AC70: 01 05 E9 15 9C A4 0D 20 01 05 EA 15 20 95 87 00  // ....... .... ...
    AC80: 5B 00 13 01 01 01 04 00 37 00 00 03 01 00 00 54  // [.......7......T
    AC90: 20 24 15 01 25 00 08 0F 01 25 28 08 0F 5C 25 2B  //  $..%....%(..\%+
    ACA0: 08 F8 01 55 00 00 52 34 52 3E 03 24 40 0C 00 15  // ...U..R4R>.$@...
    ACB0: 25 40 04 5C 62 01 08 0F 40 01 04 D7 09 24 00 01  // %@.\b...@....$..
    ACC0: 04 02 08 00 00 01 04 1C 08 20 00 66 18 2D 0C 42  // ......... .f.-.B
    ACD0: 10 00 56 00 40 03 0C 40 00 00 3E 0D 40 00 00 44  // ..V.@..@..>.@..D
    ACE0: 73 00 01 02 00 00 40 01 04 01 00 02 00 2D 0D 42  // s.....@......-.B
    ACF0: 06 00 43 53 00 0D 25 68 15 03 54 00 34 FE 01 05  // ..CS..%h..T.4...
    AD00: 35 FE 03 0A 03 0A 01 05 35 FE 04 0A 04 0A 01 00  // 5.......5.......
    AD10: 03 0A 69 15 01 00 04 0A 69 15 5C 25 D5 09 FB 01  // ..i.....i.\%....
    AD20: 0D 05 D5 09 00 08 00 40 54 00 34 FE 01 05 35 FE  // .......@T.4...5.
    AD30: 03 0A 0C 00 01 05 35 FE 04 0A 0C 00 52 0F 66 1C  // ......5.....R.f.
    AD40: 2D 0C 42 0A 00 55 00 00 52 12 66 1C 2D 0C 42 0C  // -.B..U..R.f.-.B.
    AD50: 00 02 0D 00 01 00 52 1F 52 1E 02 05 00 30 75 00  // ......R.R....0u.
    AD60: 00 52 10 4C E5 00 20 44 ED 00 0D 25 80 0A 18 02  // .R.L.. D...%....
    AD70: 25 00 FF 52 40 4A 65 80 0A 0F 49 0E 01 52 03 03  // %..R@Je...I..R..
    AD80: 20 00 80 0A 09 25 00 FC 52 1E 5C 22 80 0A 03 00  //  ....%..R.\"....
    AD90: 52 07 52 48 5B 00 FF 00 02 01 00 04 37 00 00 66  // R.RH[.......7..f
    ADA0: 0C 03 0C 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3D  // ...A..-.AB-.B..=
    ADB0: 24 00 03 00 44 30 00 2D 0D 42 04 00 3E 0A 42 41  // $...D0.-.B..>.BA
    ADC0: 44 FB 00 43 19 00 56 00 43 03 A4 41 02 00 03 F2  // D..C..V.C..A....
    ADD0: 41 41 03 0C 41 00 00 3E 0D 41 00 00 44 FB 00 3E  // AA..A..>.A..D..>
    ADE0: 0D 41 61 48 49 6B 00 3E E5 41 10 46 5F 00 1B 3D  // .AaHIk.>.A.F_..=
    ADF0: 41 01 43 6B 00 09 E5 41 03 15 3D 41 02 2D E5 41  // A.Ck...A..=A.-.A
    AE00: 0C 03 3A 43 41 54 00 00 00 33 0D 41 01 00 01 0A  // ..:CAT...3.A....
    AE10: 00 00 41 0D 02 01 00 44 2D 0D 41 02 00 01 0A 00  // ..A....D-.A.....
    AE20: 00 41 03 32 43 41 4B E5 00 01 49 D7 00 07 02 01  // .A.2CAK...I.....
    AE30: 00 45 2D 0D 41 01 00 01 0A 00 00 41 4A 02 01 00  // .E-.A......AJ...
    AE40: 44 44 B9 00 03 29 43 00 0E A2 00 44 43 C1 00 03  // DD...)C....DC...
    AE50: 29 43 00 08 A2 00 45 33 0D 41 03 00 01 0A 00 00  // )C....E3.A......
    AE60: 41 03 3A 43 41 07 02 01 00 45 43 FA 00 0D 02 01  // A.:CA....EC.....
    AE70: 00 44 33 0D 41 01 00 01 0A 00 00 41 3D A5 00 01  // .D3.A......A=...
    AE80: 44 F5 00 07 02 01 00 45 43 FA 00 0D 02 01 00 44  // D......EC......D
    AE90: 5B 55 20 00 5B 00 AC 01 01 02 14 00 37 00 00 4B  // [U .[.......7..K
    AEA0: E5 00 08 44 23 00 01 05 82 00 70 03 00 80 3C 05  // ...D#.....p...<.
    AEB0: 83 00 00 00 02 00 46 68 01 03 01 04 00 02 E5 00  // ......Fh........
    AEC0: 01 52 3C 01 05 82 00 40 01 50 C0 0D 25 83 00 08  // .R<....@.P..%...
    AED0: 66 FF 2D 0D 42 6C 01 01 05 82 00 40 03 50 C0 4A  // f.-.Bl.....@.P.J
    AEE0: 25 83 00 01 44 56 00 2D 0D 42 20 00 03 04 00 08  // %...DV.-.B .....
    AEF0: 00 03 04 01 0C 00 03 04 02 10 00 03 04 03 14 00  // ................
    AF00: 01 04 82 00 04 00 4A 05 83 00 80 00 00 00 44 97  // ......J.......D.
    AF10: 00 2D 05 00 10 00 00 00 2D 05 01 10 00 00 00 2D  // .-......-......-
    AF20: 05 02 10 00 00 00 2D 05 03 10 00 00 00 4A 25 83  // ......-......J%.
    AF30: 00 02 44 B8 00 01 04 82 00 1C 00 0D 25 83 00 10  // ..D.........%...
    AF40: 01 04 82 00 04 00 4A 25 83 00 01 44 AA 00 01 04  // ......J%...D....
    AF50: 82 00 18 00 01 21 83 00 02 01 02 82 00 00 01 01  // .....!..........
    AF60: 83 00 01 56 00 40 03 29 40 02 15 25 40 06 01 04  // ...V.@.)@..%@...
    AF70: 82 00 00 00 5C 8A 83 00 3F 00 40 01 02 82 00 01  // ....\...?.@.....
    AF80: 01 99 83 00 04 01 02 82 00 03 01 99 83 00 05 01  // ................
    AF90: 04 82 00 1C 00 0D A5 83 00 10 01 02 82 00 01 0D  // ................
    AFA0: E5 83 00 04 01 02 82 00 02 01 01 83 00 03 01 02  // ................
    AFB0: 82 00 01 01 09 83 00 05 0D E5 83 00 02 01 04 82  // ................
    AFC0: 00 1C 00 0D 25 83 00 01 01 04 82 00 04 00 4A 25  // ....%.........J%
    AFD0: 83 00 02 44 32 01 01 05 82 00 40 01 50 C0 07 25  // ...D2.....@.P..%
    AFE0: 83 00 F7 02 02 00 04 4C E5 04 08 49 68 01 52 2F  // .......L...Ih.R/
    AFF0: 02 01 01 00 02 02 00 04 02 E5 00 02 52 3F 5B 7A  // ............R?[z
    B000: 40 00 68 02 50 C0 78 02 50 C0 8C 02 50 C0 90 02  // @.h.P.x.P...P...
    B010: 50 C0 94 02 50 C0 98 02 50 C0 AC 02 50 C0 B0 02  // P...P...P...P...
    B020: 50 C0 E4 02 50 C0 F4 02 50 C0 08 03 50 C0 0C 03  // P...P...P...P...
    B030: 50 C0 10 03 50 C0 14 03 50 C0 28 03 50 C0 2C 03  // P...P...P.(.P.,.
    B040: 50 C0 22 01 02 01 0C 04 37 00 00 5C 25 2B 08 F8  // P.".....7..\%+..
    B050: 01 54 20 24 15 07 25 EB 09 FE 4B E5 00 40 44 A1  // .T $..%...K..@D.
    B060: 00 01 05 91 0A 0D 00 00 00 03 B0 01 92 0A 52 3B  // ..............R;
    B070: 03 01 00 00 56 38 00 3E 01 00 01 45 62 00 3E 01  // ....V8.>...Eb.>.
    B080: 00 02 45 53 00 01 05 91 0A 0D 00 00 00 07 A5 92  // ..ES............
    B090: 0A F7 43 A1 00 01 05 91 0A 0D 00 00 00 54 38 92  // ..C..........T8.
    B0A0: 0A 43 A1 00 03 00 02 96 0A 03 F8 01 99 0A 01 05  // .C..............
    B0B0: 91 0A 00 00 00 00 03 08 01 92 0A 01 05 91 0A 0D  // ................
    B0C0: 00 00 00 5C 8D 92 0A 00 00 80 00 07 E5 99 0A BF  // ...\............
    B0D0: 07 65 96 0A F0 01 05 91 0A 00 00 00 00 01 0D 92  // .e..............
    B0E0: 0A 77 77 02 01 01 00 52 10 02 01 01 00 02 E5 01  // .ww....R........
    B0F0: 01 52 3F 52 30 02 E5 01 02 02 01 02 00 52 3F 07  // .R?R0........R?.
    B100: 25 F3 09 FC 55 00 01 4A 25 80 0A 08 49 D1 00 02  // %...U..J%...I...
    B110: 25 01 07 52 40 4B E5 00 40 44 12 01 01 05 91 0A  // %..R@K..@D......
    B120: 0D 00 00 00 4C A5 01 80 49 ED 00 54 38 92 0A 01  // ....L...I..T8...
    B130: B2 92 0A 01 52 3B 3E 01 00 01 46 12 01 01 FA 99  // ....R;>...F.....
    B140: 0A 01 01 6A 96 0A 02 01 05 91 0A 00 00 00 00 01  // ...j............
    B150: 0A 92 0A 01 0D 25 EB 09 01 07 25 2B 08 F8 0D 25  // .....%....%+...%
    B160: 24 15 03 5B CB 04 01 07 08 08 37 00 00 3D 25 01  // $..[......7..=%.
    B170: FF 44 95 04 3D 25 01 19 46 91 04 3D 25 01 02 47  // .D..=%..F..=%..G
    B180: 91 04 3D 25 01 14 45 95 04 3D 05 00 00 00 00 00  // ..=%..E..=......
    B190: 44 43 02 4B E5 01 02 49 61 00 02 A9 02 02 55 28  // DC.K...Ia.....U(
    B1A0: 02 0E E5 01 80 3D 05 00 40 4B 4C 00 45 61 00 0D  // .....=..@KL.Ea..
    B1B0: A5 C2 9D 40 03 21 41 01 33 25 41 14 03 22 43 41  // ...@.!A.3%A.."CA
    B1C0: 0D E2 C1 48 44 66 FF 2D 0D 42 AB 04 03 39 40 01  // ...HDf.-.B...9@.
    B1D0: 09 0D 40 30 00 1B 0D 40 02 2D 0A 42 40 56 00 00  // ..@0...@.-.B@V..
    B1E0: 56 00 01 02 05 03 40 01 00 00 02 65 01 01 20 05  // V.....@....e.. .
    B1F0: 00 0A 00 00 00 03 02 46 40 3D 05 00 80 8D 5B 00  // .......F@=....[.
    B200: 47 A6 00 0E E5 01 08 55 28 01 4B E5 01 08 44 B1  // G......U(.K...D.
    B210: 00 1B 05 46 01 3E 05 46 A0 2F C5 01 48 C6 00 2C  // ...F.>.F./..H..,
    B220: 65 01 01 15 05 46 01 43 B1 00 14 2D 01 05 03 05  // e....F.C...-....
    B230: 01 00 00 01 00 4B E5 01 02 49 33 01 4B E5 01 80  // .....K...I3.K...
    B240: 49 DF 00 27 04 46 00 00 3E 05 41 00 00 00 00 44  // I..'.F..>.A....D
    B250: 45 01 03 04 40 00 00 03 02 00 41 27 02 40 41 03  // E...@.....A'.@A.
    B260: 02 40 00 3E 05 41 00 00 00 00 49 F3 00 7C 05 00  // .@.>.A....I..|..
    B270: 00 00 01 00 7E 04 40 00 00 7C 04 40 00 00 7E 02  // ....~.@..|.@..~.
    B280: 40 00 03 02 01 40 3E 05 01 33 F3 00 00 48 33 01  // @....@>..3...H3.
    B290: 03 05 01 00 00 01 00 27 04 46 00 00 7C 02 01 41  // .......'.F..|..A
    B2A0: 7E 04 40 00 00 03 0A 00 40 27 04 46 00 00 03 8A  // ~.@.....@'.F....
    B2B0: 00 40 56 18 01 43 AF 01 7C 02 40 00 7E 05 40 A0  // .@V..C..|.@.~.@.
    B2C0: 86 01 00 03 01 41 03 09 05 41 03 00 00 00 6F 02  // .....A...A....o.
    B2D0: 40 41 7C 05 40 45 0C 00 00 7E 05 40 40 4B 4C 00  // @A|.@E...~.@@KL.
    B2E0: 3E 05 40 00 00 00 00 49 8A 01 03 25 40 01 7C 05  // >.@....I...%@.|.
    B2F0: 40 40 4B 4C 00 7E 05 40 45 0C 00 00 03 01 41 03  // @@KL.~.@E.....A.
    B300: 09 05 41 03 00 00 00 75 02 40 41 1B 05 40 01 2D  // ..A....u.@A..@.-
    B310: 02 00 40 66 FF 2D 0D 42 9F 04 56 00 40 03 21 40  // ..@f.-.B..V.@.!@
    B320: 01 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48  // .3%@..%@.-.B@..H
    B330: 00 00 4A 65 E2 48 10 44 FE 02 03 39 41 01 09 0D  // ..Je.H.D...9A...
    B340: 41 30 00 1B 0D 41 04 3C 22 5E 49 41 49 22 02 3C  // A0...A.<"^IAI".<
    B350: 21 23 49 03 49 22 02 3C 29 25 49 03 49 22 02 03  // !#I.I".<)%I.I"..
    B360: 20 41 5F 49 09 25 41 E0 3E 29 41 01 49 22 02 4B  //  A_I.%A.>)A.I".K
    B370: E5 01 40 49 F6 02 3C 02 20 49 00 49 22 02 3C 0A  // ..@I..<. I.I".<.
    B380: 22 49 01 44 26 02 0E E5 01 01 3A 00 00 4B E5 01  // "I.D&.....:..K..
    B390: 01 44 69 04 4B E5 01 02 49 43 02 3D 25 02 05 46  // .Di.K...IC.=%..F
    B3A0: 43 02 55 28 02 52 23 56 00 40 03 21 40 01 33 25  // C.U(.R#V.@.!@.3%
    B3B0: 40 14 03 0A 48 40 07 25 60 01 FE 66 FF 2D 0D 42  // @...H@.%`..f.-.B
    B3C0: 9F 04 56 00 40 03 21 40 01 33 25 40 14 15 25 40  // ..V.@.!@.3%@..%@
    B3D0: 01 2D 0A 42 40 03 0C 48 00 00 07 65 23 49 FE 54  // .-.B@..H...e#I.T
    B3E0: 00 21 49 54 00 22 49 07 65 E2 48 EF 4A 65 E2 48  // .!IT."I.e.H.Je.H
    B3F0: 20 49 88 02 07 65 F2 48 EF 4A 65 F2 48 20 49 95  //  I...e.H.Je.H I.
    B400: 02 3D 05 00 00 00 00 00 49 FE 02 4A A5 C1 48 80  // .=......I..J..H.
    B410: 44 D2 02 56 00 41 5C 25 E0 48 F8 06 51 02 4A 65  // D..V.A\%.H..Q.Je
    B420: E0 48 01 44 BA 02 2D A5 41 01 2D 0D 48 10 00 3E  // .H.D..-.A.-.H..>
    B430: A5 41 04 45 B2 02 56 08 48 03 21 41 01 33 25 41  // .A.E..V.H.!A.3%A
    B440: 14 03 22 43 41 07 E2 C1 48 45 4A E5 C1 48 3F 49  // .."CA...HEJ..H?I
    B450: 91 04 07 A5 C2 9D BF 43 91 04 01 02 20 49 00 43  // .......C.... I.C
    B460: 17 04 01 05 DA 48 80 88 01 00 3D A5 01 00 49 1F  // .....H....=...I.
    B470: 03 3D 05 00 E0 3B 66 00 45 1F 03 07 25 DB 48 FE  // .=...;f.E...%.H.
    B480: 43 3F 03 0D 25 DB 48 01 3D A5 01 02 49 3F 03 4B  // C?..%.H.=...I?.K
    B490: E5 01 08 44 3F 03 01 05 7A 49 80 88 01 00 0D 25  // ...D?...zI.....%
    B4A0: 7B 49 01 0D 25 5F 49 01 03 39 40 01 09 0D 40 30  // {I..%_I..9@...@0
    B4B0: 00 1B 0D 40 04 01 22 5E 49 40 0D 65 5F 49 80 3E  // ...@.."^I@.e_I.>
    B4C0: 25 40 02 44 66 03 03 65 40 04 5C 6A 5F 49 FB 40  // %@.Df..e@.\j_I.@
    B4D0: 66 FF 56 00 40 2D 0D 42 BB 04 03 21 40 03 09 0D  // f.V.@-.B...!@...
    B4E0: 40 03 00 15 0D 40 02 2D 0A 42 40 01 0C 24 49 00  // @....@.-.B@..$I.
    B4F0: 00 01 E4 26 49 02 00 0D 25 26 49 02 01 21 23 49  // ...&I...%&I..!#I
    B500: 03 01 A5 23 49 E8 01 02 20 49 00 54 00 21 49 01  // ...#I... I.T.!I.
    B510: 02 22 49 01 4B E5 01 08 44 BF 03 07 65 5F 49 FE  // ."I.K...D...e_I.
    B520: 43 C4 03 0D 65 5F 49 01 5C 29 5F 49 1F 01 01 8D  // C...e_I.\)_I....
    B530: 2B 49 20 03 01 29 25 49 03 07 65 5F 49 7F 5C 65  // +I ..)%I..e_I.\e
    B540: E2 48 E3 04 4A 65 E2 48 20 49 E0 03 0D 65 E2 48  // .H..Je.H I...e.H
    B550: 10 4A 65 E2 48 20 44 ED 03 4B E5 01 02 49 17 04  // .Je.H D..K...I..
    B560: 5C 65 F2 48 E3 04 4A 65 F2 48 20 49 02 04 0D 65  // \e.H..Je.H I...e
    B570: F2 48 10 4A 65 F2 48 20 44 0F 04 3D A5 01 02 44  // .H.Je.H D..=...D
    B580: 25 04 3D A5 01 03 49 2C 04 4B E5 01 80 49 3A 04  // %.=...I,.K...I:.
    B590: 03 01 00 02 02 B1 02 01 52 41 02 02 02 00 0D 65  // ........RA.....e
    B5A0: 5F 49 40 4A 65 5F 49 20 44 3F 04 07 65 5F 49 BF  // _I@Je_I D?..e_I.
    B5B0: 56 00 40 03 21 40 01 33 25 40 14 03 0A 48 40 0D  // V.@.!@.3%@...H@.
    B5C0: 25 60 01 01 51 01 4B E5 01 02 49 91 04 3A 00 00  // %`..Q.K...I..:..
    B5D0: 3D 25 02 05 46 91 04 02 25 03 02 02 E1 03 02 02  // =%..F...%.......
    B5E0: 61 03 01 02 B9 03 01 08 A5 03 04 0E B1 03 02 02  // a...............
    B5F0: 01 02 00 52 2E 3A 00 00 5B 02 25 01 0B 43 69 04  // ...R.:..[.%..Ci.
    B600: 7A 2C 00 00 00 A0 00 40 51 E0 51 80 52 20 53 40  // z,.....@Q.Q.R S@
    B610: 42 0F 00 40 42 0F 00 40 42 0F 00 40 42 0F 00 A1  // B..@B..@B..@B...
    B620: 83 64 00 24 83 32 00 A3 76 19 00 A3 76 0C 00 00  // .d.$.2..v...v...
    B630: 87 01 02 01 00 00 37 00 00 3D 65 00 07 44 BC 00  // ......7..=e..D..
    B640: 56 00 40 20 25 00 03 03 0A 48 40 3D 65 00 01 44  // V.@ %....H@=e..D
    B650: BB 00 56 08 48 03 21 48 00 01 0D FA 02 02 00 52  // ..V.H.!H.......R
    B660: 14 01 05 8D 1A 00 00 40 00 01 25 BE 1B 02 01 A5  // .......@..%.....
    B670: CC 1A C0 01 0D 91 1A 45 01 5C 05 DA 1A F0 FF FF  // .......E.\......
    B680: FF 02 00 00 00 07 25 03 1B FB 0D 25 7D 1A 01 01  // ......%....%}...
    B690: 05 34 1B 01 00 00 00 5C 05 36 1B EE FE 00 00 11  // .4.....\.6......
    B6A0: 01 FF 7F 01 25 3A 1B 11 5C 05 32 1B F8 F8 F8 FF  // ....%:..\.2.....
    B6B0: 00 00 00 00 01 0D 33 1B FF 7F 01 05 B3 1B 07 40  // ......3........@
    B6C0: 00 00 0D A5 B6 1B 01 01 05 31 1B 00 08 00 04 01  // .........1......
    B6D0: 0D 86 1B 04 00 01 0D E7 1B 01 00 5C 05 00 1B FF  // ...........\....
    B6E0: FF FD FF 00 00 02 00 3A 00 00 5B 5B 5C 05 F6 02  // .......:..[[\...
    B6F0: FF 00 FE 9F 04 FC 00 20 01 05 F9 02 10 27 02 00  // ....... .....'..
    B700: 01 05 14 03 00 08 00 20 01 05 0C 03 00 90 00 10  // ....... ........
    B710: 01 25 09 01 01 01 05 3B 01 64 02 12 00 01 05 30  // .%.....;.d.....0
    B720: 01 A0 86 11 00 01 E5 09 17 64 01 05 22 17 00 00  // .........d.."...
    B730: 9B 02 01 05 06 17 21 84 20 00 01 8D E5 17 64 00  // ......!. .....d.
    B740: 01 25 E4 17 01 01 05 31 01 3C 00 01 08 5C 65 D4  // .%.....1.<...\e.
    B750: 00 FC 02 01 0D FC 00 00 01 01 05 2F 48 00 00 00  // .........../H...
    B760: 00 01 05 04 48 00 00 00 00 01 05 3A 48 0F 00 00  // ....H......:H...
    B770: 00 0D E5 CB 05 10 01 05 F8 16 00 00 00 30 01 25  // .............0.%
    B780: 32 01 00 55 00 00 52 4E 02 25 00 07 52 33 02 05  // 2..U..RN.%..R3..
    B790: 00 00 07 00 00 52 4D 2C 25 00 01 3D 25 00 06 45  // .....RM,%..=%..E
    B7A0: 65 01 66 16 03 0C 41 04 00 4C 0D 41 02 00 44 B7  // e.f...A..L.A..D.
    B7B0: 00 0D A5 C9 05 04 5B 00 07 00 01 01 00 00 5B 00  // ......[.......[.
    B7C0: 8A 00 01 01 00 00 37 00 00 01 05 03 2B 54 10 76  // ......7.....+T.v
    B7D0: 32 56 00 41 03 50 41 9F 03 56 00 40 66 FF 2D 0D  // 2V.A.PA..V.@f.-.
    B7E0: 42 4A 00 4C 65 41 10 44 46 00 09 65 41 07 03 2A  // BJ.LeA.DF..eA..*
    B7F0: 40 41 15 0D 40 03 2D 0A 42 40 01 04 02 08 00 00  // @A..@.-.B@......
    B800: 01 04 03 2B 04 00 5B 7A 40 00 23 10 54 76 45 10  // ...+..[z@.#.TvE.
    B810: 76 32 32 10 54 76 54 10 76 32 03 21 54 76 05 41  // v22.TvT.v2.!Tv.A
    B820: 76 32 13 20 54 76 15 40 76 32 32 10 45 76 54 10  // v2. Tv.@v22.EvT.
    B830: 67 32 32 10 54 76 54 10 76 32 32 10 65 47 54 10  // g22.TvT.v22.eGT.
    B840: 27 63 32 10 75 46 54 10 37 62 61 04 01 01 08 00  // 'c2.uFT.7ba.....
    B850: 37 00 00 01 05 82 00 00 00 20 C0 07 A5 83 00 FC  // 7........ ......
    B860: 01 05 82 00 2C 01 50 C0 37 05 00 01 0D 2C 01 06  // ....,.P.7....,..
    B870: 02 01 05 A4 01 09 00 40 00 01 05 A0 01 03 00 00  // .......@........
    B880: 00 01 0D B0 01 02 04 01 E5 98 01 00 4A 25 00 00  // ............J%..
    B890: 01 49 E6 00 5C 25 0C 00 80 64 5C 25 10 00 80 64  // .I..\%...d\%...d
    B8A0: 5C 25 14 00 80 64 5C 25 18 00 80 64 5C 25 1C 00  // \%...d\%...d\%..
    B8B0: 80 64 5C 25 24 00 80 18 5C 25 28 00 80 64 0D 25  // .d\%$...\%(..d.%
    B8C0: 2C 00 01 0D 25 20 00 01 0D 25 00 00 01 01 05 D8  // ,...% ...%......
    B8D0: 01 B8 29 E8 00 01 05 DC 01 B8 29 E8 00 01 05 E0  // ..).......).....
    B8E0: 01 B8 29 E8 00 01 05 E4 01 B8 29 E8 00 01 E5 14  // ..).......).....
    B8F0: 02 64 01 05 74 01 00 00 24 00 37 00 00 01 05 82  // .d..t...$.7.....
    B900: 00 14 00 00 C0 0D 65 83 00 01 51 FA 01 05 82 00  // ......e...Q.....
    B910: 00 00 00 C0 0D 25 83 00 01 01 05 82 00 70 01 50  // .....%.......p.P
    B920: C0 37 05 00 54 00 18 01 01 05 A8 01 20 40 00 00  // .7..T....... @..
    B930: 01 E5 60 02 64 01 E5 DC 02 64 01 25 44 03 00 37  // ..`.d....d.%D..7
    B940: 00 00 07 A5 97 01 F7 54 00 92 01 01 05 82 00 78  // .......T.......x
    B950: 03 20 C0 01 0D 83 00 19 00 01 05 82 00 00 00 60  // . .............`
    B960: C0 5C 05 83 00 FD FF FF FF 02 00 00 00 01 05 82  // .\..............
    B970: 00 10 00 00 C0 01 05 83 00 02 00 80 2A 01 05 82  // ............*...
    B980: 00 70 03 00 80 3C 05 83 00 00 00 02 00 46 35 04  // .p...<.......F5.
    B990: 01 05 82 00 60 03 20 C0 37 05 00 5C 05 60 03 10  // ....`. .7..\.`..
    B9A0: 01 18 F0 20 A4 62 00 5C 05 64 03 FF FF 00 FC 00  // ... .b.\.d......
    B9B0: 00 01 01 5C 05 6C 03 10 01 08 F0 20 A4 62 00 5C  // ...\.l..... .b.\
    B9C0: 05 70 03 FF FF 00 FC 00 00 01 01 5C 05 50 03 87  // .p.........\.P..
    B9D0: 00 7C 00 19 52 9D 7F 5C 05 54 03 07 0C 80 FF 38  // .|..R..\.T.....8
    B9E0: 20 01 00 5C 05 E4 01 BF FF FF DF BF FF 01 20 5C  //  ..\.......... \
    B9F0: 05 84 00 FF FD FF FF FF 7D A0 00 37 00 00 01 05  // ........}..7....
    BA00: 82 00 04 00 30 C0 37 05 00 01 05 04 00 02 00 91  // ....0.7.........
    BA10: 06 01 05 0C 00 60 6A 00 08 01 05 10 00 01 00 00  // .....`j.........
    BA20: 00 37 00 00 02 05 00 44 00 03 05 52 45 03 01 00  // .7.....D...RE...
    BA30: 00 02 05 00 44 00 18 0C 52 45 01 05 82 00 04 00  // ....D...RE......
    BA40: 30 C0 37 05 00 3E 0D 00 0A 00 44 39 02 3D 0D 00  // 0.7..>....D9.=..
    BA50: 38 02 44 26 02 3D 0D 00 45 01 44 26 02 01 05 1C  // 8.D&.=..E.D&....
    BA60: 00 4D 00 00 AA 01 05 20 00 DA A7 8C 31 43 49 02  // .M..... ....1CI.
    BA70: 01 05 1C 00 4D 00 C0 AC 01 05 20 00 EC A7 78 31  // ....M..... ...x1
    BA80: 43 49 02 01 05 1C 00 4D 00 00 AA 01 05 20 00 DA  // CI.....M..... ..
    BA90: A7 6C 31 01 05 24 00 00 21 00 00 01 05 28 00 FF  // .l1..$..!....(..
    BAA0: FF FF FF 01 05 64 00 96 43 81 01 01 05 68 00 87  // .....d..C....h..
    BAB0: 25 09 40 01 05 6C 00 35 14 BF 02 01 05 70 00 01  // %.@..l.5.....p..
    BAC0: 80 00 00 01 05 2C 00 00 21 00 00 01 05 30 00 FF  // .....,..!....0..
    BAD0: FF FF FF 37 05 00 03 F8 00 80 00 09 E5 00 0C 4C  // ...7...........L
    BAE0: E5 00 04 44 AF 02 4C E5 00 08 49 BD 02 69 E5 00  // ...D..L...I..i..
    BAF0: 04 03 0D 00 00 02 43 B6 02 69 E5 00 08 56 08 00  // ......C..i...V..
    BB00: 5C 8A 10 00 0F F0 00 4C E5 00 04 44 D2 02 0D 65  // \......L...D...e
    BB10: 24 00 04 54 00 28 00 0D 25 24 00 01 4C E5 00 08  // $..T.(..%$..L...
    BB20: 44 E7 02 0D 65 2C 00 04 54 00 30 00 0D 25 2C 00  // D...e,..T.0..%,.
    BB30: 01 37 00 00 02 05 00 44 00 03 05 52 45 03 01 00  // .7.....D...RE...
    BB40: 00 02 05 00 44 00 18 0C 52 45 01 05 82 00 04 00  // ....D...RE......
    BB50: 30 C0 37 05 00 3E 0D 00 0A 00 44 91 03 3D 0D 00  // 0.7..>....D..=..
    BB60: 38 02 44 91 03 3D 0D 00 45 01 44 91 03 03 F8 00  // 8.D..=..E.D.....
    BB70: 80 00 09 E5 00 0C 4C E5 00 04 44 44 03 4C E5 00  // ......L...DD.L..
    BB80: 08 49 91 03 02 05 00 14 01 0B 06 43 4B 03 02 05  // .I.........CK...
    BB90: 00 14 01 05 06 52 45 08 05 00 3F 00 00 00 01 05  // .....RE...?.....
    BBA0: 82 00 04 00 30 C0 37 05 00 56 00 41 03 21 41 00  // ....0.7..V.A.!A.
    BBB0: 09 25 41 1F 4B 25 00 20 44 88 03 03 A5 41 20 33  // .%A.K%. D....A 3
    BBC0: 8A 41 41 56 08 41 15 1D 41 03 31 02 20 00 41 43  // .AAV.A..A.1. .AC
    BBD0: 91 03 15 05 41 13 2B 02 20 00 41 37 00 00 03 05  // ....A.+. .A7....
    BBE0: 00 24 00 30 C0 03 05 01 44 00 30 C0 01 05 82 00  // .$.0....D.0.....
    BBF0: 80 00 30 C0 03 38 40 83 00 4C 25 40 04 49 11 04  // ..0..8@..L%@.I..
    BC00: 01 02 82 00 00 4A 25 83 00 01 49 11 04 0D 65 83  // .....J%...I...e.
    BC10: 00 04 66 FF 2D 0D 42 39 04 56 00 41 01 02 82 00  // ..f.-.B9.V.A....
    BC20: 01 4A 25 83 00 01 49 D2 03 01 02 82 00 01 01 04  // .J%...I.........
    BC30: 83 00 00 00 2D 0D 42 04 00 2D 25 41 04 3E 25 41  // ....-.B..-%A.>%A
    BC40: 28 45 D2 03 01 02 82 00 01 4A 25 83 00 01 49 FA  // (E.......J%...I.
    BC50: 03 01 02 82 00 00 07 65 83 00 FB 2D 05 00 08 00  // .......e...-....
    BC60: 00 00 2D 05 01 08 00 00 00 1B 05 40 01 3E 05 00  // ..-........@.>..
    BC70: 2C 00 30 C0 44 AF 03 01 05 BD 00 00 B3 00 00 5B  // ,.0.D..........[
    BC80: 7A 28 00 25 00 00 00 49 20 20 00 4D 60 46 00 6D  // z(.%...I  .M`F.m
    BC90: 40 20 00 71 80 40 00 75 00 00 00 79 00 00 00 7D  // @ .q.@.u...y...}
    BCA0: 00 68 00 01 40 0F 00 0A 00 00 00 00 52 00 01 01  // .h..@.......R...
    BCB0: 00 00 37 00 00 52 3E 03 0C 41 14 00 01 0A 0A 15  // ..7..R>..A......
    BCC0: 41 33 0D 41 01 00 1B 0D 41 04 15 05 41 10 2D 05  // A3.A....A...A.-.
    BCD0: 41 00 F4 00 F4 01 02 09 08 41 33 8D 41 00 F4 1B  // A........A3.A...
    BCE0: 1D 41 07 01 1A 06 00 41 01 05 01 0B 00 00 00 F4  // .A.....A........
    BCF0: 01 25 C9 00 F4 01 05 C4 00 00 00 00 00 5B 11 01  // .%...........[..
    BD00: 01 01 00 04 37 00 00 03 F9 46 00 08 E5 00 7F 03  // ....7....F......
    BD10: 0A 41 42 2D 0D 41 04 00 03 8C 41 02 00 2D 0C 42  // .AB-.A....A..-.B
    BD20: 00 00 2D 0D 42 04 00 56 30 46 03 04 40 00 00 3E  // ..-.B..V0F..@..>
    BD30: 05 40 00 00 00 00 44 49 00 3D FA 00 40 44 50 00  // .@....DI.=..@DP.
    BD40: 3E A5 46 01 49 5B 00 33 1A 42 41 43 62 00 03 A5  // >.F.I[.3.BACb...
    BD50: 46 01 3D 02 00 40 47 62 00 2D 1A 42 41 43 2C 00  // F.=..@Gb.-.BAC,.
    BD60: 4C E5 46 80 44 6A 00 5B 03 8A 41 42 56 00 40 03  // L.F.Dj.[..ABV.@.
    BD70: 0A 42 41 03 8C 40 00 00 3E 8D 40 FF FF 44 10 01  // .BA..@..>.@..D..
    BD80: 03 24 42 02 00 03 22 46 42 09 25 42 3F 3E 25 42  // .$B..."FB.%B?>%B
    BD90: 05 49 A6 00 03 1A 40 40 03 0D 42 04 00 2D 1A 42  // .I....@@..B..-.B
    BDA0: 41 43 E1 00 3E 25 42 06 49 CD 00 33 0D 41 03 00  // AC..>%B.I..3.A..
    BDB0: 56 08 42 2D 0D 40 01 00 3E 1A 40 40 47 9F 00 2D  // V.B-.@..>.@@G..-
    BDC0: 1A 42 41 2D 0D 41 03 00 43 04 01 03 1A 40 40 09  // .BA-.A..C....@@.
    BDD0: 0D 42 1F 00 2D 1A 42 41 4C 25 46 80 49 04 01 56  // .B..-.BAL%F.I..V
    BDE0: 18 40 4C 25 46 40 49 F9 00 01 02 00 00 40 01 04  // .@L%F@I......@..
    BDF0: 01 00 00 00 43 04 01 01 02 91 0A 40 01 04 92 0A  // ....C......@....
    BE00: 00 00 2D 0D 41 03 00 03 8A 41 42 43 71 00 5B 00  // ..-.A....ABCq.[.
    BE10: 21 00 02 01 00 04 37 00 00 01 01 A4 00 01 01 01  // !.....7.........
    BE20: 94 00 00 3C 25 95 00 01 49 13 00 02 00 01 A4 00  // ...<%...I.......
    BE30: 5B 00 8E 00 01 02 00 04 66 FF 56 08 47 2D 0D 42  // [.......f.V.G-.B
    BE40: 5C 00 03 21 47 00 09 25 47 F0 42 22 47 63 00 43  // \..!G..%G.B"Gc.C
    BE50: 00 63 80 36 00 63 60 3E 00 63 20 2E 00 5A 5A 5B  // .c.6.c`>.c ..ZZ[
    BE60: 2D 0D 42 26 00 43 43 00 2D 0D 42 0C 00 43 43 00  // -.B&.CC.-.B..CC.
    BE70: 2D 0D 42 18 00 03 21 47 00 09 25 47 07 2D 0A 42  // -.B...!G..%G.-.B
    BE80: 47 2D 0A 42 47 03 0C 48 00 00 5B 7A 32 00 00 00  // G-.BG..H..[z2...
    BE90: 00 02 00 04 00 26 00 28 00 2A 00 00 02 00 2C 00  // .....&.(.*....,.
    BEA0: 2D 00 2E 00 2F 00 00 00 00 01 00 02 00 03 00 04  // -.../...........
    BEB0: 00 05 00 0A 00 00 A0 00 40 51 E0 51 80 52 20 53  // ........@Q.Q.R S
    BEC0: BF 02 02 02 1C 04 20 05 01 64 00 00 00 03 02 02  // ...... ..d......
    BED0: 40 66 1F 02 04 01 0C 00 52 45 08 05 01 FF 03 00  // @f......RE......
    BEE0: 00 3D 0D 01 00 00 49 2F 00 02 04 00 28 00 5B 02  // .=....I/....(.[.
    BEF0: 04 01 1C 00 52 45 08 05 01 FF 00 00 00 20 05 01  // ....RE....... ..
    BF00: A0 86 01 00 7C 04 40 20 00 7E 05 40 FF 00 00 00  // ....|.@ .~.@....
    BF10: 03 02 01 40 03 04 40 24 00 21 05 40 A0 86 01 00  // ...@..@$.!.@....
    BF20: 2D 02 01 40 02 E5 00 01 56 00 03 02 0D 03 02 00  // -..@....V.......
    BF30: 56 00 04 7C 04 02 3C 00 7E 05 40 10 27 00 00 02  // V..|..<.~.@.'...
    BF40: 02 01 40 02 04 02 4C 00 02 A4 03 56 00 02 E4 03  // ..@...L....V....
    BF50: 5A 00 52 37 03 01 05 01 03 71 03 03 03 04 40 64  // Z.R7.....q....@d
    BF60: 00 21 05 40 A0 86 01 00 02 02 01 40 55 18 03 02  // .!.@.......@U...
    BF70: 04 02 50 00 02 E4 03 5B 00 52 37 7C 04 02 40 00  // ..P....[.R7|..@.
    BF80: 7E 05 40 10 27 00 00 02 02 02 40 02 E4 03 57 00  // ~.@.'.....@...W.
    BF90: 52 37 02 E5 03 01 02 02 02 01 52 37 03 01 06 01  // R7........R7....
    BFA0: 03 B1 03 03 7C 05 06 A0 86 01 00 7E 02 40 05 03  // ....|......~.@..
    BFB0: 02 03 40 03 02 05 40 43 FA 00 3D E5 00 00 44 66  // ..@...@C..=...Df
    BFC0: 02 3E 04 03 04 00 47 21 01 03 02 03 05 3E 04 03  // .>....G!.....>..
    BFD0: 04 00 47 21 01 03 04 03 04 00 2D 05 03 71 02 00  // ..G!......-..q..
    BFE0: 00 03 04 40 7C 00 3E 05 40 00 00 00 00 44 D9 01  // ...@|.>.@....D..
    BFF0: 33 04 03 7C 00 7C 02 03 03 7E 05 40 A0 86 01 00  // 3..|.|...~.@....
    C000: 03 02 46 40 02 04 01 50 00 03 04 40 64 00 21 05  // ..F@...P...@d.!.
    C010: 40 A0 86 01 00 02 02 02 40 02 05 03 02 00 00 00  // @.......@.......
    C020: 02 A4 03 5B 00 52 37 7C 04 03 4C 00 7E 05 40 A0  // ...[.R7|..L.~.@.
    C030: 86 01 00 02 02 02 40 02 E4 03 5A 00 52 37 02 02  // ......@...Z.R7..
    C040: 02 01 02 E5 03 01 52 37 03 01 04 01 02 04 01 40  // ......R7.......@
    C050: 00 02 A4 03 57 00 7C 04 03 3C 00 7E 05 40 A0 86  // ....W.|..<.~.@..
    C060: 01 00 02 02 02 40 02 E4 03 56 00 52 37 7C 05 04  // .....@...V.R7|..
    C070: 10 27 00 00 7E 01 40 01 03 02 04 40 03 02 05 02  // .'..~.@....@....
    C080: 3E 02 05 04 45 CE 01 33 02 05 04 43 E0 01 33 02  // >...E..3...C..3.
    C090: 04 05 03 02 05 04 43 E0 01 03 02 04 02 56 00 05  // ......C......V..
    C0A0: 7C 04 02 74 00 7E 05 40 10 27 00 00 03 02 04 40  // |..t.~.@.'.....@
    C0B0: 7C 02 40 40 02 02 01 40 02 02 02 41 7C 04 02 78  // |.@@...@...A|..x
    C0C0: 00 7E 05 40 10 27 00 00 7C 02 40 40 02 25 03 01  // .~.@.'..|.@@.%..
    C0D0: 52 37 7C 02 05 05 52 37 02 25 03 03 52 37 03 04  // R7|...R7.%..R7..
    C0E0: 40 68 00 21 05 40 0A 00 00 00 2C 02 01 40 7C 04  // @h.!.@....,..@|.
    C0F0: 02 6C 00 7E 05 40 10 27 00 00 2C 02 01 40 7C 04  // .l.~.@.'..,..@|.
    C100: 02 70 00 7E 05 40 10 27 00 00 2C 02 01 40 26 05  // .p.~.@.'..,..@&.
    C110: 01 64 00 00 00 21 05 40 64 00 00 00 2D 02 02 40  // .d...!.@d...-..@
    C120: 55 38 00 43 68 00 2D 05 05 70 02 00 00 27 05 05  // U8.Ch.-..p...'..
    C130: 71 02 00 00 21 05 40 71 02 00 00 3E 04 40 04 00  // q...!.@q...>.@..
    C140: 47 89 02 02 04 00 2C 00 5B 56 00 00 03 31 00 00  // G.....,.[V...1..
    C150: 33 25 00 01 02 02 00 40 03 04 46 08 00 03 04 40  // 3%.....@..F....@
    C160: 80 00 15 25 00 02 2D 0A 42 00 21 04 40 84 00 2D  // ...%..-.B.!.@..-
    C170: 02 46 40 3D 02 00 46 48 BE 02 02 02 00 46 5B 00  // .F@=..FH.....F[.
    C180: 78 00 01 01 00 00 37 00 00 52 14 0D A5 51 1B 01  // x.....7..R...Q..
    C190: 54 20 54 1B 07 25 44 1B FE 54 20 45 1B 42 29 00  // T T..%D..T E.B).
    C1A0: 63 00 31 00 63 01 39 00 63 02 4D 00 5A 5A 43 70  // c.1.c.9.c.M.ZZCp
    C1B0: 00 01 25 45 1B 02 43 3E 00 01 25 45 1B 01 54 20  // ..%E..C>..%E..T 
    C1C0: 42 1B 54 00 43 1B 54 00 47 1B 43 70 00 01 0D 43  // B.T.C.T.G.Cp...C
    C1D0: 1B 01 01 01 05 47 1B 01 00 01 00 0D 65 48 1B 01  // .....G......eH..
    C1E0: 0D 65 4B 1B 01 01 0D 53 1B 10 10 01 25 42 1B 01  // .eK....S....%B..
    C1F0: 54 30 51 1B 3A 00 00 5B 74 00 01 01 00 00 37 00  // T0Q.:..[t.....7.
    C200: 00 4A A5 CB 05 01 44 15 00 02 65 00 01 0E 25 00  // .J....D...e...%.
    C210: 80 52 14 03 00 46 CC 00 08 25 00 0F 52 14 54 30  // .R...F...%..R.T0
    C220: 9D 1B 3C 69 9D 1B 00 44 65 00 01 69 9D 1B 00 3D  // ..<i...De..i...=
    C230: 65 00 00 44 65 00 4A A5 9C 1B 01 44 65 00 4C 25  // e..De.J....De.L%
    C240: 46 01 44 69 00 4A 25 A3 1B 01 49 4D 00 4A 25 A3  // F.Di.J%...IM.J%.
    C250: 1B 01 44 55 00 4A 25 A3 1B 01 49 5D 00 3A 00 00  // ..DU.J%...I].:..
    C260: 5B 4A 25 9D 1B 01 44 69 00 43 65 00 3E 00 01 01  // [J%...Di.Ce.>...
    C270: 00 00 37 00 00 52 14 3D 65 00 01 44 30 00 0D 65  // ..7..R.=e..D0..e
    C280: 9C 1B 03 07 25 9C 1B FE 4A A5 9C 1B 01 49 1C 00  // ....%...J....I..
    C290: 07 E5 00 1B 7F 54 20 A9 1B 43 3A 00 0D E5 00 1B  // .....T ..C:.....
    C2A0: 80 0D 25 9C 1B 01 3A 00 00 5B 2C 00 02 01 00 00  // ..%...:..[,.....
    C2B0: 37 00 00 3C 21 FC 00 00 49 19 00 0D A5 C0 00 01  // 7..<!...I.......
    C2C0: 43 26 00 3C 61 FC 00 00 49 26 00 0D A5 C0 00 02  // C&.<a...I&......
    C2D0: 0D A5 C1 00 01 5B 22 00 01 01 04 04 03 39 00 00  // .....["......9..
    C2E0: 55 38 00 20 02 00 00 03 04 41 00 00 56 38 41 27  // U8. .....A..V8A'
    C2F0: 02 40 41 02 E2 00 40 5B 19 00 01 01 00 08 37 00  // .@A...@[......7.
    C300: 00 52 14 01 01 5E 1B 00 01 01 5F 1B 01 3A 00 00  // .R...^...._..:..
    C310: 5B 00 80 00 02 01 00 00 56 00 40 03 39 40 00 55  // [.......V.@.9@.U
    C320: 38 00 66 FF 2D 0D 42 50 00 3E 0C 40 02 00 47 27  // 8.f.-.BP.>.@..G'
    C330: 00 2D 0D 42 08 00 43 17 00 33 0C 40 04 00 21 0C  // .-.B..C..3.@..!.
    C340: 40 06 00 2D 0C 40 00 00 56 18 40 03 02 46 40 7B  // @..-.@..V.@..F@{
    C350: 05 00 40 42 0F 00 7E 02 40 46 02 02 00 40 5B 7A  // ..@B..~.@F...@[z
    C360: 30 00 64 00 00 00 00 00 00 00 FF FF 07 00 01 00  // 0.d.............
    C370: 00 00 C8 00 3F 00 08 00 19 00 40 06 5F 00 40 00  // ....?.....@._.@.
    C380: 32 00 80 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00  // 2...~.`.d..2....
    C390: 64 00 C6 00 01 03 04 00 37 00 00 56 00 46 56 00  // d.......7..V.FV.
    C3A0: 00 03 21 00 00 55 20 00 3D 65 00 03 44 2C 00 3D  // ..!..U .=e..D,.=
    C3B0: 65 00 0D 46 BB 00 02 29 00 00 32 25 00 08 0E 25  // e..F...)..2%...%
    C3C0: 00 60 52 14 5C 22 00 4A F8 00 02 22 00 00 52 14  // .`R.\".J..."..R.
    C3D0: 03 08 41 C0 1A 09 0D 41 03 00 66 FF 2D 0D 42 C2  // ..A....A..f.-.B.
    C3E0: 00 2D 0A 42 41 03 24 00 00 00 3D E2 00 00 48 A7  // .-.BA.$...=...H.
    C3F0: 00 3E 25 00 04 44 76 00 03 22 46 00 33 25 46 01  // .>%..Dv.."F.3%F.
    C400: 15 25 46 04 0F 25 46 01 33 39 00 00 3E 25 00 01  // .%F..%F.39..>%..
    C410: 44 93 00 3E 25 00 02 44 8C 00 03 25 46 21 03 65  // D..>%..D...%F!.e
    C420: 00 2F 43 97 00 03 65 00 13 03 79 46 00 33 65 46  // ./C...e...yF.3eF
    C430: 01 15 2D 46 03 0F 65 46 01 52 14 01 02 F2 1B 46  // ..-F..eF.R.....F
    C440: 01 52 EE 1B 00 54 00 F9 1B 54 00 ED 1B 3A 00 00  // .R...T...T...:..
    C450: 5B 7A 04 00 03 02 01 04 AF 01 01 04 00 08 37 00  // [z............7.
    C460: 00 3D 65 02 01 49 44 01 4B A5 02 03 49 5D 00 02  // .=e..ID.K...I]..
    C470: 05 00 00 03 00 05 02 05 01 00 05 02 00 3C 21 FC  // .............<!.
    C480: 00 02 49 57 00 01 8D C0 00 00 02 51 02 01 05 C6  // ..IW.......Q....
    C490: 00 00 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3  // ...........P....
    C4A0: 00 02 00 54 20 CA 00 01 05 C2 00 00 01 00 00 56  // ...T ..........V
    C4B0: 20 40 43 83 00 0E 25 02 80 52 14 54 00 CC 00 56  //  @C...%..R.T...V
    C4C0: 08 48 08 25 02 07 0D 25 CA 00 01 01 25 C2 00 01  // .H.%...%....%...
    C4D0: 54 00 C6 00 54 00 C8 00 56 20 40 3D A5 01 00 49  // T...T...V @=...I
    C4E0: 8F 00 0D 25 C2 00 10 07 65 D0 05 FE 3D A5 01 01  // ...%....e...=...
    C4F0: 47 A0 00 0D 65 D0 05 01 03 A0 40 C9 00 03 00 46  // G...e.....@....F
    C500: C4 00 03 02 41 46 2D 00 46 C6 00 2D 00 41 C8 00  // ....AF-.F..-.A..
    C510: 52 14 01 32 07 1A 40 01 32 08 1A 40 01 02 04 1A  // R..2..@.2..@....
    C520: 46 01 02 05 1A 41 54 30 C1 1A 54 00 5C 1B 01 01  // F....AT0..T.\...
    C530: 5D 1B 00 54 08 09 1A 54 08 0A 1A 54 08 0B 1A 54  // ]..T...T...T...T
    C540: 08 0C 1A 01 09 0E 1A 00 01 19 0D 1A 00 5C 19 01  // .............\..
    C550: 1A FC F8 01 5C A5 01 1A 0F 10 01 09 06 1A 01 01  // ....\...........
    C560: 25 00 1A 01 0D 25 B3 1B 04 5C 62 B3 1B FE 40 54  // %....%...\b...@T
    C570: 20 35 1A 54 20 3C 1A 54 00 CA 1B 54 00 C8 1B 54  //  5.T <.T...T...T
    C580: 00 CC 1B 4B A5 02 03 49 40 01 0E 25 02 80 52 14  // ...K...I@..%..R.
    C590: 01 05 CC 00 01 00 00 00 3A 00 00 5B 52 14 3D 65  // ........:..[R.=e
    C5A0: 02 00 49 61 01 54 20 00 1A 3A 00 00 3C 21 FC 00  // ..Ia.T ..:..<!..
    C5B0: 02 49 60 01 54 08 C1 00 5B 3D 65 02 10 44 6E 01  // .I`.T...[=e..Dn.
    C5C0: 01 09 06 1A 01 5B 03 00 40 04 1A 09 05 40 00 00  // .....[..@....@..
    C5D0: 00 FD 2D 01 40 00 09 0D 40 00 F0 01 02 04 1A 40  // ..-.@...@......@
    C5E0: 08 0D 00 FF 0F 56 00 41 03 31 41 01 74 0A 00 41  // .....V.A.1A.t..A
    C5F0: 2C 09 01 00 08 25 00 FC 14 05 00 10 01 01 5C 1B  // ,....%........\.
    C600: 00 01 09 0D 1A 01 5B 00 49 00 01 01 00 00 37 00  // ......[.I.....7.
    C610: 00 52 14 07 65 B6 1B FE 3D 65 00 01 44 37 00 54  // .R..e...=e..D7.T
    C620: 30 6E 1A 54 30 11 1A 54 20 B5 1B 54 20 BD 1B 54  // 0n.T0..T ..T ..T
    C630: 30 BD 1B 4A 25 B6 1B 01 49 2B 00 3A 00 00 5B 0D  // 0..J%...I+.:..[.
    C640: 25 BD 1B 01 54 00 9E 1B 07 25 C0 1A F4 3A 00 00  // %...T....%...:..
    C650: 5B 00 95 00 01 03 00 00 37 00 00 52 14 0D 25 03  // [.......7..R..%.
    C660: 1B 04 54 20 78 1A 54 00 80 1A 3D 65 00 01 49 56  // ..T x.T...=e..IV
    C670: 00 0D 25 7E 1A 07 01 25 7F 1A 01 51 01 4A 25 7F  // ..%~...%...Q.J%.
    C680: 1A 02 44 29 00 54 20 7F 1A 54 08 81 1A 54 08 82  // ..D).T ..T...T..
    C690: 1A 54 08 83 1A 01 0D 84 1A FF FF 01 0D 85 1A FF  // .T..............
    C6A0: FF 01 0D 86 1A FF FF 5B 01 31 79 1A 00 56 00 41  // .......[.1y..V.A
    C6B0: 03 19 41 01 3B 02 41 3D 65 00 02 49 78 00 03 00  // ..A.;.A=e..Ix...
    C6C0: 40 7C 1A 04 02 00 40 43 81 00 03 03 40 00 01 02  // @|....@C....@...
    C6D0: 7C 1A 40 2D 05 46 04 00 00 00 2D 8D 41 01 00 3E  // |.@-.F....-.A..>
    C6E0: 89 41 01 45 65 00 5B 00 3D 00 01 01 00 04 37 00  // .A.Ee.[.=.....7.
    C6F0: 00 56 00 40 03 38 40 9A 0A 21 05 40 E2 04 00 00  // .V.@.8@..!.@....
    C700: 02 02 00 40 03 00 40 99 0A 1B 05 40 14 09 0D 40  // ...@..@....@...@
    C710: 07 00 21 05 40 09 3D 00 00 27 05 40 64 00 00 00  // ..!.@.=..'.@d...
    C720: 2C 02 00 40 5B 00 D8 00 01 01 0C 00 37 00 00 01  // ,..@[.......7...
    C730: 05 82 00 2C 00 50 C0 4A 25 83 00 01 49 3B 00 02  // ...,.P.J%...I;..
    C740: 05 00 40 7E 05 00 01 05 82 00 B4 00 50 C0 02 E8  // ..@~........P...
    C750: 00 83 00 52 29 26 05 00 10 27 00 00 02 02 00 40  // ...R)&...'.....@
    C760: 5B 03 05 00 AC 02 50 C0 03 05 01 8C 02 50 C0 03  // [.....P......P..
    C770: 05 02 78 02 50 C0 01 05 82 00 40 03 50 C0 4A 25  // ..x.P.....@.P.J%
    C780: 83 00 01 44 75 00 03 05 00 28 03 50 C0 03 05 01  // ...Du....(.P....
    C790: 08 03 50 C0 03 05 02 F4 02 50 C0 01 02 82 00 02  // ..P......P......
    C7A0: 4A 05 83 00 80 00 00 00 44 8C 00 2D 05 01 10 00  // J.......D..-....
    C7B0: 00 00 01 02 82 00 01 56 00 40 03 18 40 83 00 21  // .......V.@..@..!
    C7C0: 05 40 10 27 00 00 03 02 46 40 56 00 40 03 08 40  // .@.'....F@V.@..@
    C7D0: 83 00 21 05 40 10 27 00 00 27 05 40 00 00 01 00  // ..!.@.'..'.@....
    C7E0: 2D 02 46 40 01 02 82 00 00 56 00 40 03 20 40 83  // -.F@.....V.@. @.
    C7F0: 00 09 25 40 0F 75 02 46 40 02 02 00 46 5B 53 01  // ..%@.u.F@...F[S.
    C800: 02 03 00 18 37 00 00 66 FF 2D 0D 42 47 01 55 28  // ....7..f.-.BG.U(
    C810: 05 2D 09 42 05 2D 09 42 05 03 0C 48 00 00 03 09  // .-.B.-.B...H....
    C820: 41 03 2D 19 41 03 3E 0D 41 03 00 46 3F 00 5C 05  // A.-.A.>.A..F?.\.
    C830: B3 1B FB 0F F0 FF 00 30 00 00 43 4B 00 5C 05 B3  // .......0..CK.\..
    C840: 1B FF 0F F0 FF 04 40 00 00 03 09 41 00 2D 19 41  // ......@....A.-.A
    C850: 00 33 0D 41 01 00 01 0A 80 1B 41 54 08 82 1B 01  // .3.A......AT....
    C860: 99 82 1B 02 03 19 41 00 33 09 41 02 56 18 41 03  // ......A.3.A.V.A.
    C870: B1 41 04 33 1A 41 41 01 8A 81 1B 41 03 19 41 00  // .A.3.AA....A..A.
    C880: 33 09 41 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10  // 3.A.-.AA-.A.K%..
    C890: 44 99 00 2D 09 41 00 01 0A 81 1B 41 03 21 41 04  // D..-.A.....A.!A.
    C8A0: 09 25 41 02 1B 25 41 01 01 22 83 1B 41 54 00 5E  // .%A..%A.."..AT.^
    C8B0: 1B 01 31 5E 1B 04 01 B1 5E 1B 04 03 09 41 01 2D  // ..1^....^....A.-
    C8C0: 19 41 01 33 0D 41 01 00 01 0A 87 1B 41 54 08 8E  // .A.3.A......AT..
    C8D0: 1B 01 99 8E 1B 03 03 19 41 01 33 09 41 03 56 18  // ........A.3.A.V.
    C8E0: 41 03 B9 41 04 33 1A 41 41 01 8A 8D 1B 41 03 19  // A..A.3.AA....A..
    C8F0: 41 01 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25  // A.3.A.-.AA-.A.K%
    C900: 04 20 44 0B 01 2D 09 41 01 01 0A 8D 1B 41 03 21  // . D..-.A.....A.!
    C910: 41 04 09 25 41 04 1B 25 41 02 01 22 8F 1B 41 54  // A..%A..%A.."..AT
    C920: 00 5F 1B 01 39 5F 1B 04 01 B9 5F 1B 04 03 21 41  // ._..9_...._...!A
    C930: 04 09 25 41 80 1B 25 41 07 01 22 9E 1B 41 3A 00  // ..%A..%A.."..A:.
    C940: 00 5B 7A 0C 00 00 00 00 02 00 04 00 26 00 28 00  // .[z.........&.(.
    C950: 2A 00 BE 00 01 01 00 04 37 00 00 03 A1 40 00 3D  // *.......7....@.=
    C960: A5 00 00 49 49 00 66 04 03 24 40 58 00 3E 25 40  // ...II.f..$@X.>%@
    C970: FF 49 AE 00 55 00 01 02 25 01 28 52 09 02 0D 01  // .I..U...%.(R....
    C980: 29 01 52 09 02 0D 01 2A 02 52 09 02 0D 01 2B 03  // ).R....*.R....+.
    C990: 52 09 03 B1 40 01 01 B1 0A 15 01 66 1C 03 64 40  // R...@......f..d@
    C9A0: 10 00 56 20 40 2D 0D 42 14 00 54 30 CD 05 3E A4  // ..V @-.B..T0..>.
    C9B0: 40 0A 00 49 93 00 3D A5 00 00 44 AE 00 03 24 41  // @..I..=...D...$A
    C9C0: 1C 00 03 71 41 00 09 0D 41 0F 0F 3E 62 41 41 49  // ...qA...A..>bAAI
    C9D0: 93 00 01 A2 CD 05 40 01 64 80 0A 1C 00 3D A4 00  // ......@.d....=..
    C9E0: 1C 00 44 AE 00 2D 0C 42 04 00 2D 25 40 01 3E 62  // ..D..-.B..-%@.>b
    C9F0: 40 40 49 5C 00 01 F1 0A 15 00 0D A5 0A 15 80 5B  // @@I\...........[
    CA00: 01 A2 CD 05 40 01 64 80 0A 1C 00 54 18 0A 15 5B  // ....@.d....T...[
    CA10: 0A 00 01 01 08 00 37 00 00 5B 1A 00 01 01 00 04  // ......7..[......
    CA20: 37 00 00 01 05 E5 09 FC FD FC FC 01 05 E6 09 FD  // 7...............
    CA30: F8 FC FC 5B 31 02 01 01 00 08 37 00 00 0D 25 F4  // ...[1.....7...%.
    CA40: 16 08 07 25 62 18 FE 56 00 41 03 39 41 01 09 25  // ...%b..V.A.9A..%
    CA50: 41 0F 03 0A 40 42 66 FF 2D 0D 42 11 02 15 25 41  // A...@Bf.-.B...%A
    CA60: 02 2D 0A 42 41 03 0C 41 00 00 01 02 00 00 41 07  // .-.BA..A......A.
    CA70: A5 01 00 FE 54 08 01 00 01 0C FB 16 02 00 03 0A  // ....T...........
    CA80: 42 40 03 05 40 50 C3 00 00 56 00 41 03 21 41 00  // B@..@P...V.A.!A.
    CA90: 27 02 40 41 01 8A F7 16 40 01 25 F7 16 02 0D 25  // '.@A....@.%....%
    CAA0: F5 16 02 01 A9 F9 16 01 4B 25 01 01 49 7F 00 54  // ........K%..I..T
    CAB0: 30 F9 16 01 0D F9 16 00 31 2B A5 F9 16 01 4B 25  // 0.......1+....K%
    CAC0: 01 02 44 96 00 2B A5 F9 16 01 56 00 41 03 71 41  // ..D..+....V.A.qA
    CAD0: 01 0F E5 41 80 01 02 FA 16 41 03 69 41 00 2D A5  // ...A.....A.iA.-.
    CAE0: 41 01 01 02 FA 16 41 4B 25 01 02 44 C6 00 56 28  // A.....AK%..D..V(
    CAF0: 41 2D A5 41 01 01 02 FA 16 41 4B 25 01 01 44 E7  // A-.A.....AK%..D.
    CB00: 00 03 71 41 00 2D A5 41 01 01 02 FA 16 41 03 79  // ..qA.-.A.....A.y
    CB10: 41 00 2D A5 41 01 01 02 FA 16 41 0D 25 F4 16 01  // A.-.A.....A.%...
    CB20: 03 A5 41 01 43 BA 01 03 29 40 01 03 65 40 01 03  // ..A.C...)@..e@..
    CB30: 99 40 00 56 00 41 03 71 41 01 0F 65 41 01 0F E5  // .@.V.A.qA..eA...
    CB40: 41 80 01 02 FA 16 41 01 A5 F9 16 04 3D 65 01 04  // A.....A.....=e..
    CB50: 47 28 01 01 0D F9 16 01 13 43 57 01 01 A2 F9 16  // G(.......CW.....
    CB60: 40 01 0D F9 16 01 31 43 57 01 07 65 F9 16 EF 01  // @.....1CW..e....
    CB70: A5 F9 16 03 3E 25 40 04 46 57 01 01 A2 F9 16 40  // ....>%@.FW.....@
    CB80: 31 A5 F9 16 01 5C 65 F9 16 FD 20 0D 25 F4 16 01  // 1....\e... .%...
    CB90: 03 A5 41 00 43 BA 01 03 05 41 01 00 00 80 03 AA  // ..A.C....A......
    CBA0: 41 40 01 02 FA 16 41 3D 65 01 01 49 82 01 02 A8  // A@....A=e..I....
    CBB0: 00 FA 16 43 F9 01 56 00 41 03 1A 41 40 3B 02 41  // ...C..V.A..A@;.A
    CBC0: 03 28 41 FA 16 03 68 41 FA 16 03 A8 41 FA 16 03  // .(A...hA....A...
    CBD0: E8 41 FA 16 04 02 00 41 56 28 40 2D 8D 40 04 00  // .A.....AV(@-.@..
    CBE0: 3E 25 40 04 47 F9 01 33 25 40 04 43 36 01 02 65  // >%@.G..3%@.C6..e
    CBF0: 00 02 03 0D 41 64 00 33 0D 41 01 00 3E 0D 41 00  // ....Ad.3.A..>.A.
    CC00: 00 44 F9 01 51 64 4A 25 F6 16 10 44 C3 01 4A 65  // .D..QdJ%...D..Je
    CC10: F6 16 06 49 F9 01 02 65 00 01 0D 25 F5 16 02 3E  // ...I...e...%...>
    CC20: A5 41 00 44 63 01 4B 25 01 01 44 F3 00 0D 25 F5  // .A.Dc.K%..D...%.
    CC30: 16 02 01 25 F4 16 02 51 01 54 00 F4 16 54 00 FB  // ...%...Q.T...T..
    CC40: 16 5B 7A 20 00 68 48 01 00 6C 48 03 02 70 48 05  // .[z .hH..lH..pH.
    CC50: 04 74 48 42 41 78 48 49 48 7C 48 4B 4A 98 48 29  // .tHBAxHIH|HKJ.H)
    CC60: 28 80 48 4D 4C 00 5F 00 02 02 00 04 37 00 00 3D  // (.HML._.....7..=
    CC70: 65 00 01 44 54 00 55 30 00 3D 25 00 06 46 50 00  // e..DT.U0.=%..FP.
    CC80: 32 25 00 01 20 25 00 08 56 08 48 03 22 48 40 0D  // 2%.. %..V.H."H@.
    CC90: A5 99 18 01 02 A0 00 98 18 08 A5 00 03 4A 25 98  // .............J%.
    CCA0: 18 02 44 4A 00 5C 0D 99 18 FF FE 01 00 43 50 00  // ..DJ.\.......CP.
    CCB0: 0D 0D 99 18 01 01 3A 00 00 5B 0D 65 CF 05 08 0D  // ......:..[.e....
    CCC0: 25 80 01 01 5B 00 0A 00 01 02 00 00 5B 7A 00 00  // %...[.......[z..
    CCD0: 0A 00 01 01 00 04 55 00 00 5B 3C 00 01 01 00 00  // ......U..[<.....
    CCE0: 55 00 00 55 00 01 01 05 91 0A 03 00 00 00 02 38  // U..U...........8
    CCF0: 00 92 0A 02 21 01 00 08 25 00 0F 08 25 01 F0 20  // ....!...%...%.. 
    CD00: 05 00 20 4E 00 00 02 02 00 40 20 05 01 E2 04 00  // .. N.....@ .....
    CD10: 00 02 02 01 40 5B AF 01 01 06 04 18 03 05 46 00  // ....@[........F.
    CD20: 51 25 02 3D E5 00 01 49 F3 00 55 38 00 66 08 03  // Q%.=...I..U8.f..
    CD30: 24 41 04 00 2D 0D 42 08 00 55 00 02 3D 04 00 00  // $A..-.B..U..=...
    CD40: 00 47 42 00 2C A5 02 01 2D 0D 42 0C 00 3D A2 02  // .GB.,...-.B..=..
    CD50: 41 45 26 00 55 00 01 5B 02 24 02 05 00 02 64 02  // AE&.U..[.$....d.
    CD60: 04 00 03 01 46 00 56 00 40 03 21 40 02 6F 02 46  // ....F.V.@.!@.o.F
    CD70: 40 7C 05 46 00 40 00 00 7E 05 40 C4 09 00 00 02  // @|.F.@..~.@.....
    CD80: 02 01 40 02 E5 02 01 7B 05 01 32 00 00 00 7E 05  // ..@....{..2...~.
    CD90: 40 10 27 00 00 7C 05 40 4E 0C 00 00 7E 05 40 40  // @.'..|.@N...~.@@
    CDA0: 4B 4C 00 02 0A 05 40 21 05 40 40 4B 4C 00 27 05  // KL....@!.@@KL.'.
    CDB0: 40 4E 0C 00 00 02 01 03 01 32 02 03 40 21 05 46  // @N.......2..@!.F
    CDC0: D0 07 00 00 27 05 40 10 27 00 00 03 02 00 46 33  // ....'.@.'.....F3
    CDD0: 02 00 40 27 05 00 10 27 00 00 3E 0C 40 06 00 48  // ..@'...'..>.@..H
    CDE0: D1 00 03 0C 40 06 00 55 00 04 02 8A 04 40 03 01  // ....@..U.....@..
    CDF0: 40 01 33 01 40 04 21 05 40 32 00 00 00 27 05 40  // @.3.@.!.@2...'.@
    CE00: 50 C3 00 00 02 8A 05 40 5B 55 38 00 03 05 40 00  // P......@[U8...@.
    CE10: 32 00 00 3D 05 00 00 00 00 00 44 3C 01 03 02 40  // 2..=......D<...@
    CE20: 46 2D 01 40 00 33 05 40 01 00 00 00 27 01 40 00  // F-.@.3.@....'.@.
    CE30: 3E 05 40 9C 18 00 00 47 2B 01 03 05 40 00 32 00  // >.@....G+...@.2.
    CE40: 00 3E 05 40 C8 00 00 00 46 3C 01 03 05 40 C8 00  // .>.@....F<...@..
    CE50: 00 00 66 FF 2D 0D 42 8F 01 3E 0C 40 02 00 47 53  // ..f.-.B..>.@..GS
    CE60: 01 2D 0D 42 08 00 43 43 01 33 0C 40 00 00 2D 0C  // .-.B..CC.3.@..-.
    CE70: 40 06 00 33 0D 40 01 00 27 0C 40 06 00 2D 0C 40  // @..3.@..'.@..-.@
    CE80: 04 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00  // .....@3.@..!.@..
    CE90: 2D 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00  // -.@..'.F@...@...
    CEA0: 40 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80  // @[z ...@.....@..
    CEB0: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 32 00  // .@.2...8.`.d..2.
    CEC0: 32 7F 00 64 00 00 07 00 02 01 00 00 5B 00 70 01  // 2..d........[.p.
    CED0: 02 01 08 04 37 00 00 66 1C 2D 0C 42 06 00 3D E5  // ....7..f.-.B..=.
    CEE0: 00 02 44 4B 00 3D E5 00 03 44 F7 00 03 38 00 2F  // ..DK.=...D...8./
    CEF0: 0A 09 25 00 20 02 01 01 00 02 F0 01 CD 05 52 12  // ..%. .........R.
    CF00: 01 08 AB 0A 81 0A 01 18 83 0A 81 0A 5C E2 2F 0A  // ............\./.
    CF10: DF 00 5C E2 30 0A DF 00 5B 02 F0 01 CD 05 0E E5  // ..\.0...[.......
    CF20: 01 80 52 12 02 01 01 00 02 E4 01 2C 00 52 26 01  // ..R........,.R&.
    CF30: 39 DD 09 01 02 EC 01 2C 00 52 26 01 79 DD 09 01  // 9......,.R&.y...
    CF40: 02 F4 01 2C 00 52 26 01 B9 DD 09 01 02 FC 01 2C  // ...,.R&........,
    CF50: 00 52 26 01 F9 DD 09 01 02 E4 01 30 00 52 26 01  // .R&........0.R&.
    CF60: 39 DE 09 01 02 EC 01 30 00 52 26 01 79 DE 09 01  // 9......0.R&.y...
    CF70: 02 F4 01 30 00 52 26 01 B9 DE 09 01 02 FC 01 30  // ...0.R&........0
    CF80: 00 52 26 01 F9 DE 09 01 31 05 DE 09 01 01 01 00  // .R&.....1.......
    CF90: 02 E5 01 08 52 26 3D E5 01 04 46 D3 00 02 E5 01  // ....R&=...F.....
    CFA0: 04 3D E5 01 08 46 E1 00 32 E5 01 04 43 F0 00 1A  // .=...F..2...C...
    CFB0: 3D 01 01 3D E5 01 12 45 F0 00 02 E5 01 12 5C 39  // =..=...E......\9
    CFC0: 02 0A E0 01 5B 52 3B 03 05 00 10 00 00 00 03 05  // ....[R;.........
    CFD0: 01 2D 00 00 00 55 38 00 3D 01 00 01 45 30 01 03  // .-...U8.=...E0..
    CFE0: 0D 00 18 00 03 05 01 2E 00 00 00 3D 01 00 02 45  // ...........=...E
    CFF0: 30 01 03 0D 00 20 00 03 05 01 2F 00 00 00 02 01  // 0.... ..../.....
    D000: 01 00 02 F0 01 CD 05 0E E5 01 80 52 12 56 00 41  // ...........R.V.A
    D010: 01 02 91 0A 01 01 04 92 0A 0C 00 01 02 91 0A 00  // ................
    D020: 01 04 92 0A 10 00 2D 05 00 01 00 00 00 2D 25 41  // ......-......-%A
    D030: 01 2D 0D 42 04 00 3E 25 41 07 45 4D 01 5B 00 01  // .-.B..>%A.EM.[..
    D040: 01 02 04 04 37 00 00 3D 25 00 FF 49 EC 00 02 20  // ....7..=%..I... 
    D050: 00 80 0A 4A 25 80 0A 08 49 26 00 08 25 00 10 07  // ...J%...I&..%...
    D060: 25 80 0A EF 01 05 32 0A 08 00 00 00 01 05 32 0A  // %.....2.......2.
    D070: 10 00 00 00 01 05 82 00 10 00 60 C0 01 05 83 00  // ..........`.....
    D080: 00 70 03 00 01 05 82 00 14 00 60 C0 03 00 40 83  // .p........`...@.
    D090: 00 66 18 3E 04 40 04 00 49 EB 00 03 00 40 83 00  // .f.>.@..I....@..
    D0A0: 03 00 00 83 00 03 00 41 83 00 3E 05 40 00 00 00  // .......A..>.@...
    D0B0: 00 44 EB 00 01 00 91 0A 83 00 01 00 92 0A 83 00  // .D..............
    D0C0: 33 0D 40 01 00 3E 0D 40 00 00 49 76 00 01 05 64  // 3.@..>.@..Iv...d
    D0D0: C0 0C 02 00 00 54 00 65 C0 01 05 66 C0 CC 28 00  // .....T.e...f..(.
    D0E0: 00 54 00 67 C0 15 05 00 02 2D 05 00 00 00 00 7C  // .T.g.....-.....|
    D0F0: 01 02 E8 C0 00 51 32 4A E5 A0 21 80 49 B9 00 01  // .....Q2J..!.I...
    D100: 05 32 0A 08 00 00 00 01 05 32 0A 04 00 00 00 01  // .2.......2......
    D110: 05 32 0A 01 00 00 00 51 32 50 02 4A 25 80 0A 80  // .2.....Q2P.J%...
    D120: 44 DD 00 5C 21 80 0A EF 00 5B 01 65 E7 0A FF 01  // D..\!....[.e....
    D130: 21 E7 0A 00 02 05 01 04 00 00 00 52 1F 5B 8C 00  // !..........R.[..
    D140: 01 04 00 00 03 05 40 7C 01 00 00 3D A5 00 00 44  // ......@|...=...D
    D150: 15 00 5B 03 00 46 20 49 7C 02 40 46 7E 05 40 A0  // ..[..F I|.@F~.@.
    D160: 86 01 00 03 00 41 23 49 09 05 41 03 00 00 00 6F  // .....A#I..A....o
    D170: 02 40 41 7C 05 40 45 0C 00 00 7E 05 40 40 4B 4C  // .@A|.@E...~.@@KL
    D180: 00 3E 05 40 00 00 00 00 49 51 00 03 25 40 01 01  // .>.@....IQ..%@..
    D190: 8A 22 49 40 7C 05 40 40 4B 4C 00 7E 05 40 45 0C  // ."I@|.@@KL.~.@E.
    D1A0: 00 00 03 00 41 23 49 09 05 41 03 00 00 00 75 02  // ....A#I..A....u.
    D1B0: 40 41 03 00 46 20 49 33 02 46 40 01 02 21 49 46  // @A..F I3.F@..!IF
    D1C0: 51 01 0D 65 23 49 01 51 01 5B 31 00 01 03 04 00  // Q..e#I.Q.[1.....
    D1D0: 37 00 00 55 38 00 26 05 00 E2 04 00 00 01 E2 9A  // 7..U8.&.........
    D1E0: 0A 40 21 05 41 64 00 00 00 27 05 40 09 3D 00 00  // .@!.Ad...'.@.=..
    D1F0: 15 25 40 04 5C A2 99 0A 8F 40 5B 00 10 00 01 03  // .%@.\....@[.....
    D200: 00 08 37 00 00 55 18 00 55 08 01 5B 71 01 01 04  // ..7..U..U..[q...
    D210: 00 04 37 00 00 3D 65 00 08 49 23 00 02 05 01 38  // ..7..=e..I#....8
    D220: 00 06 0A 52 45 08 0D 01 FF 03 02 89 00 01 5B 3D  // ...RE.........[=
    D230: 65 00 03 44 70 01 02 01 01 00 02 65 01 07 52 50  // e..Dp......e..RP
    D240: 3D 05 02 00 00 00 00 44 0B 01 37 00 00 01 05 82  // =......D..7.....
    D250: 00 7C 02 20 C0 01 05 82 00 94 02 20 C0 4A A5 83  // .|. ....... .J..
    D260: 00 06 49 49 00 01 05 82 00 7C 02 20 C0 0D 65 83  // ..II.....|. ..e.
    D270: 00 04 01 05 82 00 7C 02 20 C0 03 00 46 83 00 37  // ......|. ...F..7
    D280: 00 00 01 05 82 00 80 02 20 C0 5E 65 46 FC 01 3D  // ........ .^eF..=
    D290: 25 00 01 44 96 00 09 65 46 FC 01 05 82 00 84 02  // %..D...eF.......
    D2A0: 20 C0 3C 0C 83 00 04 00 44 C6 00 07 0D 83 00 9F  //  .<.....D.......
    D2B0: FF 51 3C 03 0C 41 04 00 4C 25 41 20 49 BE 00 0F  // .Q<..A..L%A I...
    D2C0: 25 41 20 01 0A 83 00 41 51 3C 01 0C 83 00 04 00  // %A ....AQ<......
    D2D0: 51 3C 56 00 40 03 19 40 00 21 05 40 64 00 00 00  // Q<V.@..@.!.@d...
    D2E0: 03 05 41 78 5D 02 00 33 02 41 40 27 05 41 71 02  // ..Ax]..3.A@'.Aq.
    D2F0: 00 00 03 22 46 40 01 05 82 00 7C 02 20 C0 01 02  // ..."F@....|. ...
    D300: 83 00 46 01 05 82 00 94 02 20 C0 4A A5 83 00 02  // ..F...... .J....
    D310: 49 F7 00 37 00 00 5B 02 01 01 00 52 50 3D 05 02  // I..7..[....RP=..
    D320: 00 00 00 00 44 6C 01 4B E5 02 40 44 2F 01 01 05  // ....Dl.K..@D/...
    D330: 82 00 F8 01 60 C0 0D 25 83 00 1F 4B 25 02 80 44  // ....`..%...K%..D
    D340: 3B 01 0D A5 90 48 01 03 05 41 FF FF FF FF 69 01  // ;....H...A....i.
    D350: 41 02 01 05 82 00 E4 01 60 C0 09 00 41 83 00 0F  // A.......`...A...
    D360: 01 41 01 01 02 83 00 41 01 05 82 00 F4 01 60 C0  // .A.....A......`.
    D370: 0D 01 83 00 02 51 32 5B 55 00 00 5B 5B 00 83 00  // .....Q2[U..[[...
    D380: 01 03 04 00 37 00 00 3D 65 00 09 44 80 00 03 0A  // ....7..=e..D....
    D390: 00 42 66 20 03 0C 41 00 00 2D 0A 41 42 2D 0D 42  // .Bf ..A..-.AB-.B
    D3A0: 04 00 3E 0A 42 41 44 7C 00 3D 0C 00 00 00 44 3B  // ..>.BAD|.=....D;
    D3B0: 00 2D 0C 42 02 00 43 24 00 02 0A 01 42 3D 65 00  // .-.B..C$....B=e.
    D3C0: 03 44 7B 00 3D 65 00 07 44 7B 00 03 E4 41 05 00  // .D{.=e..D{...A..
    D3D0: 02 04 01 08 00 3E E5 41 00 44 7C 00 3D 8C 00 10  // .....>.A.D|.=...
    D3E0: 00 47 72 00 2D 0D 42 06 00 33 E5 41 01 43 57 00  // .Gr.-.B..3.A.CW.
    D3F0: 02 04 00 0C 00 03 0A 42 00 5B 55 00 01 5B 52 1B  // .......B.[U..[R.
    D400: 5B 00 67 02 01 05 00 00 37 00 00 03 20 46 CF 05  // [.g.....7... F..
    D410: 0E 25 00 60 52 14 08 25 00 0F 42 29 00 63 0F 58  // .%.`R..%..B).c.X
    D420: 00 63 11 4E 01 63 12 CC 01 63 01 24 02 63 00 4D  // .c.N.c...c.$.c.M
    D430: 02 63 08 18 01 63 09 F9 00 63 0A 00 01 63 13 08  // .c...c...c...c..
    D440: 01 63 14 10 01 63 0B 20 01 63 0C 14 02 63 0D 28  // .c...c. .c...c.(
    D450: 01 63 10 41 01 5A 5A 43 F5 00 3D A5 00 02 44 E3  // .c.A.ZZC..=...D.
    D460: 00 54 00 72 4A 3D A5 00 00 44 71 00 3D A5 00 05  // .T.rJ=...Dq.=...
    D470: 49 EB 00 54 08 A1 4A 3D 25 02 00 49 80 00 02 25  // I..T..J=%..I...%
    D480: 02 02 32 25 02 01 01 E1 A1 4A 02 4A 25 A4 4A 01  // ..2%.....J.J%.J.
    D490: 49 C6 00 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00  // I..{......~.@...
    D4A0: 00 56 00 46 03 29 46 02 27 02 40 46 07 65 A8 4A  // .V.F.)F.'.@F.e.J
    D4B0: FE 01 05 A9 4A 00 80 00 00 01 02 AA 4A 40 0D E5  // ....J.......J@..
    D4C0: AB 4A 10 0D 65 00 4A 04 02 20 00 00 4A 08 25 00  // .J..e.J.. ..J.%.
    D4D0: 07 0E 25 00 00 52 14 14 3D 00 04 5C B9 9C 1B 8F  // ..%..R..=..\....
    D4E0: 00 3A 00 00 5B 01 05 72 4A 01 00 00 00 07 E5 00  // .:..[..rJ.......
    D4F0: 4A 2F 0D 65 00 4A 04 3A 00 00 5B 54 20 B0 4A 43  // J/.e.J.:..[T .JC
    D500: F5 00 01 25 B0 4A 01 43 F5 00 01 25 B0 4A 02 43  // ...%.J.C...%.J.C
    D510: F5 00 01 25 B0 4A 03 43 F5 00 07 25 A0 4A EF 43  // ...%.J.C...%.J.C
    D520: F5 00 0D 25 A0 4A 10 43 F5 00 0D 65 A8 4A 01 51  // ...%.J.C...e.J.Q
    D530: 0A 07 25 A5 4A FE 51 0A 01 0D A4 4A 01 02 51 C8  // ..%.J.Q....J..Q.
    D540: 43 F5 00 0D 25 B6 4A 10 01 31 A7 4A 00 43 F5 00  // C...%.J..1.J.C..
    D550: 01 0D 03 4A 1F 00 01 69 47 4A 02 4C 25 46 10 49  // ...J...iGJ.L%F.I
    D560: 77 01 3D A5 00 03 49 77 01 4A 25 0D 4A 10 49 77  // w.=...Iw.J%.J.Iw
    D570: 01 01 A5 47 4A 02 43 7C 01 01 B1 47 4A 00 3D 25  // ...GJ.C|...GJ.=%
    D580: 02 00 44 91 01 32 25 02 01 14 25 02 04 5C E1 47  // ..D..2%...%..\.G
    D590: 4A 8F 02 3D E5 00 04 47 A0 01 0D 25 47 4A 01 43  // J..=...G...%GJ.C
    D5A0: A5 01 07 25 47 4A FE 3D A5 00 05 44 B3 01 3D A5  // ...%GJ.=...D..=.
    D5B0: 00 00 49 C4 01 02 A5 00 00 03 39 40 00 33 25 40  // ..I.......9@.3%@
    D5C0: 01 01 22 A3 4A 40 02 E0 02 48 4A 43 F5 00 02 E0  // ..".J@...HJC....
    D5D0: 02 48 4A 4B E5 02 01 44 F5 00 02 B0 00 47 4A 02  // .HJK...D.....GJ.
    D5E0: E5 00 04 4A 25 47 4A 01 44 ED 01 02 E5 00 08 3D  // ...J%GJ.D......=
    D5F0: A5 00 02 44 FB 01 3D A5 00 03 49 04 02 54 00 48  // ...D..=...I..T.H
    D600: 4A 50 02 43 F5 00 02 A5 00 00 03 31 43 00 4A 62  // JP.C.......1C.Jb
    D610: 47 4A 44 44 F5 00 54 08 A4 4A 51 C8 0D 25 A5 4A  // GJDD..T..JQ..%.J
    D620: 01 51 32 43 F5 00 0D 25 48 4A 01 3D A5 00 00 44  // .Q2C...%HJ.=...D
    D630: 39 02 01 0D 79 4A 0F 01 43 F5 00 03 39 43 00 03  // 9...yJ..C...9C..
    D640: 02 40 44 33 25 40 01 01 0A 79 4A 40 43 F5 00 54  // .@D3%@...yJ@C..T
    D650: 00 79 4A 07 25 48 4A FE 07 0D 47 4A FE 80 54 20  // .yJ.%HJ...GJ..T 
    D660: A0 4A 54 20 B0 4A 43 F5 00 00 29 00 01 01 00 00  // .JT .JC...).....
    D670: 37 00 00 66 1C 2D 0D 42 14 00 03 30 40 CD 05 3E  // 7..f.-.B...0@..>
    D680: 25 40 00 44 28 00 33 25 40 01 2D 0C 42 04 00 43  // %@.D(.3%@.-.B..C
    D690: 15 00 5B 00 46 01 01 06 00 00 37 00 00 42 29 00  // ..[.F.....7..B).
    D6A0: 63 07 24 01 63 01 25 00 63 00 C0 00 63 0B 27 01  // c.$.c.%.c...c.'.
    D6B0: 63 04 2C 01 5A 5A 43 3F 01 02 65 00 11 52 04 4B  // c.,.ZZC?..e..R.K
    D6C0: E5 02 01 49 20 01 02 65 00 0A 55 08 02 52 4D 3D  // ...I ..e..U..RM=
    D6D0: E5 00 04 47 50 00 68 25 00 01 02 25 02 01 52 4D  // ...GP.h%...%..RM
    D6E0: 68 25 00 01 3D A5 00 00 49 82 00 20 05 01 64 00  // h%..=...I.. ..d.
    D6F0: 00 00 02 05 01 14 1E 00 02 2C 21 01 00 02 01 02  // .........,!.....
    D700: 00 02 02 00 40 52 0C 26 05 00 64 00 00 00 02 02  // ....@R.&..d.....
    D710: 01 40 02 01 00 02 02 65 00 01 55 08 02 52 4D 3D  // .@.....e..U..RM=
    D720: E5 00 04 47 A0 00 68 25 00 01 02 25 02 01 52 4D  // ...G..h%...%..RM
    D730: 68 25 00 01 51 05 02 65 00 01 52 04 51 0A 02 65  // h%..Q..e..R.Q..e
    D740: 00 09 52 4D 3D E5 00 04 47 20 01 68 25 00 01 52  // ..RM=...G .h%..R
    D750: 4D 43 20 01 02 65 00 12 52 04 4B E5 02 01 44 20  // MC ..e..R.K...D 
    D760: 01 02 65 00 08 52 4D 3D E5 00 04 47 E4 00 68 25  // ..e..RM=...G..h%
    D770: 00 01 52 4D 68 25 00 01 02 65 00 00 52 04 02 65  // ..RMh%...e..R..e
    D780: 00 00 52 4D 3D E5 00 04 47 01 01 68 25 00 01 52  // ..RM=...G..h%..R
    D790: 4D 68 25 00 01 3D A5 00 00 49 20 01 02 01 02 00  // Mh%..=...I .....
    D7A0: 02 05 01 14 00 00 00 2C 21 01 00 55 00 00 52 0C  // .......,!..U..R.
    D7B0: 02 01 00 02 3A 00 00 5B 43 20 01 52 4D 43 20 01  // ....:..[C .RMC .
    D7C0: 66 06 02 29 00 00 02 68 00 CB 05 02 8C 00 32 00  // f..)...h......2.
    D7D0: 52 33 5B 02 29 00 00 52 33 5B 38 03 02 01 00 00  // R3[.)..R3[8.....
    D7E0: 37 00 00 0E 25 00 20 52 14 08 25 00 0F 42 29 00  // 7...%. R..%..B).
    D7F0: 63 07 35 00 63 0A 3D 00 63 01 21 01 63 00 7B 01  // c.5.c.=.c.!.c.{.
    D800: 63 09 BB 01 63 08 E9 01 63 0B 01 02 5A 5A 5B 0D  // c...c...c...ZZ[.
    D810: 65 C4 48 08 43 AD 02 03 0A 46 48 66 FF 2D 0D 42  // e.H.C....FHf.-.B
    D820: 1A 03 56 00 40 20 25 00 05 2D 0A 42 40 20 25 00  // ..V.@ %..-.B@ %.
    D830: 02 03 0A 48 40 01 04 06 48 00 00 01 64 05 48 04  // ...H@...H...d.H.
    D840: 00 07 E5 05 48 FC 07 A5 05 48 8F 03 0A 48 46 56  // ....H....H...HFV
    D850: 00 41 3D E5 00 04 47 96 00 03 05 41 00 80 01 01  // .A=...G....A....
    D860: 4B 25 02 01 44 96 00 09 4D 41 7F FF 03 E5 41 02  // K%..D...MA....A.
    D870: 5C FA D3 48 FC 41 5C 52 C5 48 7F FE 41 3D A5 00  // \..H.A\R.H..A=..
    D880: 00 49 CC 00 07 A5 C1 48 7F 66 FF 2D 0D 42 DE 02  // .I.....H.f.-.B..
    D890: 2D 0D 42 06 00 56 00 41 3D A5 02 14 49 49 02 03  // -.B..V.A=...II..
    D8A0: 25 41 20 43 49 02 0D A5 C1 48 80 66 FF 2D 0D 42  // %A CI....H.f.-.B
    D8B0: B6 02 03 04 40 00 00 3E 05 40 00 00 00 00 44 AD  // ....@..>.@....D.
    D8C0: 02 03 21 43 00 03 E2 41 44 4C E4 41 05 00 44 07  // ..!C...ADL.A..D.
    D8D0: 01 3D A4 00 04 00 49 07 01 3D 04 01 00 00 47 0F  // .=....I..=....G.
    D8E0: 01 2D 0D 42 0C 00 43 D8 00 03 04 40 06 00 03 24  // .-.B..C....@...$
    D8F0: 41 0A 00 03 64 41 0B 00 43 52 02 07 65 C4 48 F7  // A...dA..CR..e.H.
    D900: 03 0A 46 48 56 00 41 3D E5 00 04 47 3C 01 07 25  // ..FHV.A=...G<..%
    D910: E2 48 F9 43 42 01 5C 25 E2 48 F9 02 4A 65 E0 48  // .H.CB.\%.H..Je.H
    D920: 01 44 42 01 07 25 E0 48 F8 4A 65 E0 48 01 44 4F  // .DB..%.H.Je.H.DO
    D930: 01 2D E5 41 01 2D 0D 48 10 00 3E E5 41 04 45 2D  // .-.A.-.H..>.A.E-
    D940: 01 03 0A 48 46 0D 25 D1 48 02 4A 25 D1 48 04 44  // ...HF.%.H.J%.H.D
    D950: 70 01 43 AD 02 07 25 D1 48 FD 4A 25 D1 48 04 49  // p.C...%.H.J%.H.I
    D960: 80 01 0D 65 C4 48 08 56 00 41 4A 65 E0 48 01 44  // ...e.H.V.AJe.H.D
    D970: 90 01 5C 25 E0 48 F8 04 51 02 4A 65 E0 48 01 44  // ..\%.H..Q.Je.H.D
    D980: A0 01 2D A5 41 01 2D 0D 48 10 00 3E A5 41 04 45  // ..-.A.-.H..>.A.E
    D990: 90 01 43 AD 02 03 0A 46 48 56 08 48 20 25 00 02  // ..C....FHV.H %..
    D9A0: 03 22 48 40 0D 25 05 48 01 0D E5 06 48 10 03 0A  // ."H@.%.H....H...
    D9B0: 48 46 0D A5 D3 48 01 51 14 0D 25 D3 48 01 51 14  // HF...H.Q..%.H.Q.
    D9C0: 43 AD 02 07 A5 D3 48 FE 56 00 40 20 25 00 02 03  // C.....H.V.@ %...
    D9D0: 0A 48 40 07 E5 06 48 EF 43 AD 02 08 A5 00 1B 66  // .H@...H.C......f
    D9E0: FF 2D 0D 42 DE 02 03 21 43 00 03 A2 40 44 03 0C  // .-.B...!C...@D..
    D9F0: 40 02 00 4C A4 40 00 00 49 29 02 2D 0C 42 04 00  // @..L.@..I).-.B..
    DA00: 43 14 02 2D 0D 42 06 00 3D A4 00 00 00 44 49 02  // C..-.B..=....DI.
    DA10: 03 24 41 00 00 3E 25 41 FF 44 49 02 2D 0A 42 40  // .$A..>%A.DI.-.B@
    DA20: 43 2E 02 03 04 40 01 00 03 65 41 08 01 0A C3 48  // C....@...eA....H
    DA30: 40 01 05 DA 48 88 88 01 00 01 F2 DB 48 40 01 BA  // @...H.......H@..
    DA40: E2 48 40 01 BA F2 48 40 01 BA 02 49 40 01 BA 12  // .H@...H@...I@...
    DA50: 49 40 01 25 E1 48 20 01 25 F1 48 20 01 25 01 49  // I@.%.H .%.H .%.I
    DA60: 20 01 25 11 49 20 01 2A E1 48 41 01 2A F1 48 41  //  .%.I .*.HA.*.HA
    DA70: 01 2A 01 49 41 01 2A 11 49 41 3D 65 00 0B 44 AD  // .*.IA.*.IA=e..D.
    DA80: 02 5C A2 C8 48 DF 41 3A 00 00 5B 7A 84 00 0C 00  // .\..H.A:..[z....
    DA90: FF FF FF 00 02 3F 00 00 00 5F 00 08 40 9C 00 00  // .....?..._..@...
    DAA0: 03 3F 00 00 00 5F 00 08 FF FF FF 00 03 3F 00 00  // .?..._.......?..
    DAB0: 2A 57 20 10 00 00 00 00 3F 00 05 00 39 00 00 4B  // *W .....?...9..K
    DAC0: 00 00 80 01 3A 00 00 80 02 1B 00 00 80 03 00 00  // ....:...........
    DAD0: 00 80 08 34 25 00 80 09 1C 25 00 80 0A 00 1B 00  // ...4%....%......
    DAE0: 9F 10 14 3F 00 80 11 01 38 00 9F 18 00 4A 00 9F  // ...?....8....J..
    DAF0: FF 00 00 FF 03 02 01 00 01 03 02 01 00 01 03 02  // ................
    DB00: 01 00 01 03 02 01 00 01 03 02 01 00 01 03 02 01  // ................
    DB10: 00 01 4C 02 01 02 00 08 37 00 00 3D 0D 00 00 00  // ..L.....7..=....
    DB20: 44 CE 01 56 00 41 03 21 41 01 09 25 41 0F 15 0D  // D..V.A.!A..%A...
    DB30: 41 02 03 0A 40 42 66 FF 2D 0D 42 34 02 2D 0A 42  // A...@Bf.-.B4.-.B
    DB40: 41 03 0C 48 02 00 0D A5 68 48 01 54 08 68 48 03  // A..H....hH.T.hH.
    DB50: 0C 48 00 00 03 F9 41 01 15 3D 41 04 5C BA 00 5C  // .H....A..=A.\..\
    DB60: 8F 41 03 0A 42 40 4A 25 00 5C 01 49 81 00 0D 0D  // .A..B@J%.\.I....
    DB70: 00 5C 01 01 0D 25 00 5C 10 4A 25 00 5C 20 44 67  // .\...%.\.J%.\ Dg
    DB80: 00 07 25 00 5C EF 4A 25 00 5C 20 49 74 00 0D 25  // ..%.\.J%.\ It..%
    DB90: 03 5C 40 56 00 41 03 09 41 00 3B 02 41 03 3B 41  // .\@V.A..A.;.A.;A
    DBA0: 00 1B 25 41 04 01 A2 01 5C 41 03 69 41 01 15 2D  // ..%A....\A.iA..-
    DBB0: 41 04 01 2A 01 5C 41 56 00 40 0F E5 40 80 03 73  // A..*.\AV.@..@..s
    DBC0: 40 00 01 02 06 5C 40 56 00 40 03 6B 40 00 01 02  // @....\@V.@.k@...
    DBD0: 06 5C 40 03 63 40 00 01 02 06 5C 40 03 7B 40 00  // .\@.c@....\@.{@.
    DBE0: 09 65 40 0F 01 02 06 5C 40 3E 25 41 04 47 10 01  // .e@....\@>%A.G..
    DBF0: 33 25 41 04 2D 05 46 04 00 00 00 03 63 40 00 01  // 3%A.-.F.....c@..
    DC00: 02 06 5C 40 03 6B 40 00 01 02 06 5C 40 03 73 40  // ..\@.k@....\@.s@
    DC10: 00 01 02 06 5C 40 03 7B 40 00 01 02 06 5C 40 43  // ....\@.{@....\@C
    DC20: D7 00 0D 25 03 5C 02 0D 25 01 5C 01 03 29 40 01  // ...%.\..%.\..)@.
    DC30: 21 25 40 0A 2D 25 40 32 4A 25 04 5C 01 49 42 01  // !%@.-%@2J%.\.IB.
    DC40: 51 0A 33 25 40 01 3E 25 40 00 49 26 01 02 65 01  // Q.3%@.>%@.I&..e.
    DC50: 01 43 CA 01 4A 05 04 5C F0 8F FF 00 44 54 01 02  // .C..J..\....DT..
    DC60: 65 01 02 43 CA 01 01 05 06 5C 01 00 00 80 03 00  // e..C.....\......
    DC70: 40 06 5C 02 6A 01 40 02 B8 01 04 5C 08 A5 01 1F  // @.\.j.@....\....
    DC80: 3D A5 01 00 46 7C 01 02 65 01 03 43 CA 01 32 A5  // =...F|..e..C..2.
    DC90: 01 01 3D 8D 00 00 00 44 CA 01 3D A5 01 00 44 CA  // ..=....D..=...D.
    DCA0: 01 03 31 41 01 03 19 40 00 56 18 40 3B 02 40 03  // ..1A...@.V.@;.@.
    DCB0: 28 40 06 5C 03 68 40 06 5C 03 A8 40 06 5C 03 E8  // (@.\.h@.\..@.\..
    DCC0: 40 06 5C 04 02 00 40 3E 25 41 04 47 CA 01 33 25  // @.\...@>%A.G..3%
    DCD0: 41 04 2D 05 46 04 00 00 00 43 9D 01 3A 00 00 5B  // A.-.F....C..:..[
    DCE0: 66 FF 2D 0D 42 34 02 03 0C 48 00 00 01 8D 08 5C  // f.-.B4...H.....\
    DCF0: 32 00 01 05 09 5C 00 1C 02 00 01 05 0A 5C 10 11  // 2....\.......\..
    DD00: 3D 12 2D 0D 42 04 00 2C 25 00 01 3D 25 00 06 49  // =.-.B..,%..=%..I
    DD10: D5 01 56 08 48 03 25 41 10 0D 65 97 48 40 07 65  // ..V.H.%A..e.H@.e
    DD20: 97 48 BF 33 25 41 01 3E 25 41 00 49 07 02 0D 25  // .H.3%A.>%A.I...%
    DD30: 3B 48 01 54 30 3B 48 0D 25 3C 48 01 54 30 3C 48  // ;H.T0;H.%<H.T0<H
    DD40: 51 32 5B 7A 18 00 00 00 00 00 1C 00 04 00 38 00  // Q2[z..........8.
    DD50: 08 00 54 00 0C 00 70 00 10 00 8C 00 14 00 5C 00  // ..T...p.......\.
    DD60: 01 02 00 04 02 25 01 04 03 31 41 00 09 0D 41 0F  // .....%...1A...A.
    DD70: 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A 42 41  // ...A.f.-.BP.-.BA
    DD80: 03 0C 48 00 00 07 A5 68 48 FE 01 0D 68 48 11 11  // ..H....hH...hH..
    DD90: 50 02 4A 0D 6B 48 01 00 49 41 00 02 25 01 13 54  // P.J.kH..IA..%..T
    DDA0: 08 68 48 54 00 6A 48 3A 00 00 5B 7A 0C 00 00 00  // .hHT.jH:..[z....
    DDB0: 04 00 08 00 0C 00 10 00 14 00 9F 00 01 01 04 00  // ................
    DDC0: 37 00 00 52 3E 55 00 00 02 E4 00 16 00 66 1C 2D  // 7..R>U.......f.-
    DDD0: 0C 42 04 00 52 12 52 3E 01 0C D8 09 06 00 01 64  // .B..R.R>.......d
    DDE0: 80 0A 1C 00 02 05 00 08 00 00 00 02 0C 01 08 00  // ................
    DDF0: 52 1F 03 08 41 80 0A 09 0D 41 03 00 66 FF 2D 0D  // R...A....A..f.-.
    DE00: 42 9B 00 2D 0A 42 41 03 24 41 00 00 01 05 82 00  // B..-.BA.$A......
    DE10: 0C 00 20 C0 5C 0A 83 00 00 FC 41 02 05 00 30 75  // .. .\.....A...0u
    DE20: 00 03 52 3F 02 05 00 A0 86 01 03 52 3F 02 05 00  // ..R?.......R?...
    DE30: 48 E8 01 03 52 3F 02 05 00 30 75 00 03 52 3F 02  // H...R?...0u..R?.
    DE40: 05 00 A0 86 01 03 52 3F 02 05 00 40 0D 03 03 52  // ......R?...@...R
    DE50: 3F 5B 7A 04 00 18 10 08 04 00 AC 01 01 01 08 00  // ?[z.............
    DE60: 37 00 00 03 88 00 28 08 03 09 00 00 03 2A 41 00  // 7.....(......*A.
    DE70: 03 22 43 41 01 22 28 08 44 5C 62 28 08 F8 41 42  // ."CA."(.D\b(..AB
    DE80: 22 00 63 01 39 00 63 08 7E 00 63 04 07 01 5A 5A  // ".c.9.c.~.c...ZZ
    DE90: 43 A6 01 01 24 93 0A 00 00 01 24 94 0A 01 00 01  // C...$.....$.....
    DEA0: 04 A3 0A 02 00 01 04 A4 0A 06 00 01 04 A5 0A 0A  // ................
    DEB0: 00 01 04 A6 0A 0E 00 01 04 A7 0A 12 00 01 04 A8  // ................
    DEC0: 0A 16 00 01 04 A9 0A 1A 00 01 04 AA 0A 1E 00 2D  // ...............-
    DED0: 0D 42 22 00 43 9B 01 5B 21 65 00 02 03 22 43 40  // .B".C..[!e..."C@
    DEE0: 03 0A 41 44 56 08 40 37 02 00 4C 09 41 01 49 A3  // ..ADV.@7..L.A.I.
    DEF0: 00 54 20 00 00 54 30 00 00 0F 25 40 01 15 0D 41  // .T ..T0...%@...A
    DF00: 01 4C 09 41 01 49 BA 00 0F 25 40 02 54 28 00 00  // .L.A.I...%@.T(..
    DF10: 54 38 00 00 37 00 00 3E 25 40 03 49 D5 00 03 2A  // T8..7..>%@.I...*
    DF20: 41 00 2D 25 41 04 03 22 43 41 07 0A 52 0D 45 52  // A.-%A.."CA..R.ER
    DF30: 3E 03 24 40 16 00 21 25 40 04 55 00 00 02 EA 00  // >.$@..!%@.U.....
    DF40: 00 2C E2 00 40 66 1C 03 0C 40 08 00 3E 0D 40 00  // .,..@f...@..>.@.
    DF50: 00 44 01 01 2D 0C 42 08 00 52 12 37 00 00 43 9B  // .D..-.B..R.7..C.
    DF60: 01 01 05 91 0A 00 00 00 00 3C 0D 92 0A 00 00 44  // .........<.....D
    DF70: 9B 01 3C 25 E7 0A 07 49 39 01 01 05 91 0A 0E 00  // ..<%...I9.......
    DF80: 00 00 03 00 01 92 0A 5C 05 92 0A 00 FF 00 FF 0F  // .......\........
    DF90: 00 FF 00 01 05 32 0A 05 00 00 00 51 0A 01 05 32  // .....2.....Q...2
    DFA0: 0A 01 00 00 00 03 00 41 E7 0A 3E 62 41 41 49 4B  // .......A..>bAAIK
    DFB0: 01 51 0A 3E 25 41 00 44 74 01 3E 25 41 07 49 9B  // .Q.>%A.Dt.>%A.I.
    DFC0: 01 01 05 91 0A 0E 00 00 00 01 02 92 0A 01 01 05  // ................
    DFD0: 91 0A 03 00 00 00 03 38 41 92 0A 15 25 41 04 3C  // .......8A...%A.<
    DFE0: E2 9A 0A 41 45 9B 01 4A E5 99 0A 04 44 9B 01 5C  // ...AE..J....D..\
    DFF0: 25 F3 09 FE 22 2D 65 00 01 3E 65 00 04 45 12 00  // %..."-e..>e..E..
    E000: 01 1A 28 08 00 5B E5 00 02 02 14 00 3D 25 02 01  // ..(..[......=%..
    E010: 44 1C 00 3D 25 02 02 44 3E 00 3D 25 02 03 44 63  // D..=%..D>.=%..Dc
    E020: 00 5B 2C 02 01 41 03 05 00 FF FF FF FF 33 02 00  // .[,..A.......3..
    E030: 40 3E 01 00 00 48 39 00 2C 05 01 01 00 00 00 2C  // @>...H9.,......,
    E040: 02 00 40 5B 3D B9 02 02 44 5E 00 3D 01 00 01 45  // ..@[=...D^.=...E
    E050: 51 00 32 01 00 01 5B 32 01 01 00 02 01 00 01 02  // Q.2...[2........
    E060: B9 02 02 5B 2C 01 00 01 5B 3D 05 00 00 00 00 00  // ...[,...[=......
    E070: 49 77 00 3D 05 01 00 00 00 00 44 E0 00 56 00 43  // Iw.=......D..V.C
    E080: 03 0D 40 1F 00 03 01 00 00 3D 05 01 00 00 00 00  // ..@......=......
    E090: 44 95 00 03 01 00 01 03 65 40 20 03 22 43 40 4C  // D.......e@ ."C@L
    E0A0: 02 00 44 49 A7 00 33 25 40 01 43 95 00 2D 2A 40  // ..DI..3%@.C..-*@
    E0B0: 40 1B 25 40 01 03 22 43 40 03 02 00 44 03 01 41  // @.%@.."C@...D..A
    E0C0: 01 7D 02 00 00 27 05 40 02 00 00 00 2D 02 41 00  // .}...'.@....-.A.
    E0D0: 1B 05 41 01 2D 02 41 40 3E 02 00 41 44 E0 00 03  // ..A.-.A@>..AD...
    E0E0: 02 00 41 43 B7 00 02 02 00 00 5B 00 D1 01 02 01  // ..AC......[.....
    E0F0: 04 04 37 00 00 42 21 00 63 07 29 00 63 03 66 00  // ..7..B!.c.).c.f.
    E100: 63 02 D5 00 63 04 FA 00 63 0C 85 01 63 0D A8 01  // c...c...c...c...
    E110: 5A 5A 43 D0 01 01 0D 1D 48 9F 0F 01 05 1E 48 00  // ZZC.....H.....H.
    E120: 00 00 00 01 05 1F 48 7D 00 00 00 66 06 01 4C 1F  // ......H}...f..L.
    E130: 48 39 00 03 24 46 42 00 3E 25 46 00 44 58 00 01  // H9..$FB.>%F.DX..
    E140: 25 1F 48 00 4A 25 1B 48 10 49 D0 01 0D E5 1B 48  // %.H.J%.H.I.....H
    E150: 02 5B 4A A5 CB 05 01 49 D0 01 4A 25 1B 48 01 44  // .[J....I..J%.H.D
    E160: D0 01 4A 25 1C 48 10 44 76 00 4A E5 1B 48 02 49  // ..J%.H.Dv.J..H.I
    E170: 91 00 4A 25 1C 48 08 49 D0 01 43 C5 00 4A E5 1B  // ..J%.H.I..C..J..
    E180: 48 01 49 D0 01 4A 25 1B 48 10 44 C5 00 0D A5 1B  // H.I..J%.H.D.....
    E190: 48 03 0D 65 1B 48 03 01 0D 1D 48 00 00 5C 25 1B  // H..e.H....H..\%.
    E1A0: 48 EF 01 4A 25 1C 48 10 44 B7 00 01 0D 1D 48 9F  // H..J%.H.D.....H.
    E1B0: 0F 07 E5 1B 48 FC 0D E5 1F 48 01 0D 25 1B 48 11  // ....H....H..%.H.
    E1C0: 5B 66 06 03 24 46 42 00 3E 25 46 00 49 D0 01 4A  // [f..$FB.>%F.I..J
    E1D0: 25 1B 48 01 44 D0 01 4A 25 1C 48 10 44 EB 00 5C  // %.H.D..J%.H.D..\
    E1E0: E5 1B 48 FE 02 5B 4A 65 D0 05 02 44 07 01 0D 25  // ..H..[Je...D...%
    E1F0: 23 48 01 3D 8D 00 00 00 44 84 01 03 05 46 80 F0  // #H.=....D....F..
    E200: FA 02 56 00 41 03 19 41 00 21 05 41 FF 0F 00 00  // ..V.A..A.!.A....
    E210: 27 02 46 40 3E 05 41 00 00 00 00 44 37 01 2D 0D  // '.F@>.A....D7.-.
    E220: 40 01 00 01 8A 1D 48 40 56 00 41 03 19 41 00 21  // @.....H@V.A..A.!
    E230: 02 40 41 27 02 46 40 01 A5 22 48 0C 01 0A 22 48  // .@A'.F@.."H..."H
    E240: 40 15 05 40 04 56 00 41 03 29 41 00 2D 0D 41 01  // @..@.V.A.)A.-.A.
    E250: 00 21 02 40 41 1B 05 40 08 01 0A 20 48 40 0D E5  // .!.@A..@... H@..
    E260: 20 48 C0 07 25 23 48 FE 4A 65 23 48 01 49 7C 01  //  H..%#H.Je#H.I|.
    E270: 5B 4A 25 1B 48 01 44 9D 01 4A 25 1B 48 10 49 D0  // [J%.H.D..J%.H.I.
    E280: 01 4A 25 1C 48 10 44 95 01 07 E5 1F 48 FE 0D 25  // .J%.H.D.....H..%
    E290: 1B 48 11 5B 4A 25 1B 48 01 44 D0 01 4A 25 1B 48  // .H.[J%.H.D..J%.H
    E2A0: 10 44 D0 01 4A 25 1C 48 10 44 B8 01 07 A5 1B 48  // .D..J%.H.D.....H
    E2B0: FC 07 65 1B 48 FC 5C 25 1B 48 EF 01 5B 00 71 00  // ..e.H.\%.H..[.q.
    E2C0: 03 01 08 00 37 00 00 56 00 01 3D E5 00 20 48 1B  // ....7..V..=.. H.
    E2D0: 00 03 39 43 00 03 02 01 44 03 05 00 00 00 10 C0  // ..9C....D.......
    E2E0: 2D 09 00 00 01 02 82 00 00 03 00 40 83 00 56 00  // -..........@..V.
    E2F0: 41 03 31 41 00 75 02 40 41 03 25 41 20 33 31 41  // A.1A.u.@A.%A 31A
    E300: 00 3D E2 00 41 47 61 00 2D 0D 00 04 00 01 02 82  // .=..AGa.-.......
    E310: 00 00 02 00 00 83 00 6E 02 00 41 0F 01 40 00 02  // .......n..A..@..
    E320: 02 00 40 33 05 01 01 00 00 00 08 02 00 01 5B 00  // ..@3..........[.
    E330: CE 00 03 01 00 10 37 00 00 56 00 40 4A 25 00 EC  // ......7..V.@J%..
    E340: 01 44 30 00 4A 25 05 EC 1E 49 30 00 03 25 40 01  // .D0.J%...I0..%@.
    E350: 01 05 05 EC 03 00 00 00 4A 65 05 EC 0F 49 28 00  // ........Je...I(.
    E360: 3D 65 02 00 49 3C 00 2C 28 02 09 08 3D E5 02 00  // =e..I<.,(...=...
    E370: 49 48 00 2C A8 02 09 08 3D 65 02 02 49 6B 00 01  // IH.,....=e..Ik..
    E380: 05 82 00 10 00 60 C0 01 01 83 00 00 01 05 82 00  // .....`..........
    E390: 14 00 60 C0 02 05 00 0C 02 00 00 3D E5 02 03 49  // ..`........=...I
    E3A0: 81 00 01 01 82 00 01 02 05 01 0C 02 00 00 43 81  // ..............C.
    E3B0: 00 54 00 63 C0 01 01 64 C0 00 01 21 65 C0 02 01  // .T.c...d...!e...
    E3C0: 01 66 C0 01 01 31 67 C0 02 01 01 E8 C0 03 3D 65  // .f...1g.......=e
    E3D0: 02 01 44 AE 00 3D E5 02 01 44 AE 00 51 02 4A E5  // ..D..=...D..Q.J.
    E3E0: A0 21 80 49 AE 00 3E 25 40 01 49 CD 00 01 05 05  // .!.I..>%@.I.....
    E3F0: EC 01 00 00 00 4A 65 05 EC 0F 49 C5 00 5B F9 02  // .....Je...I..[..
    E400: 02 01 00 00 37 00 00 3D 25 01 01 44 7B 00 3D 25  // ....7..=%..D{.=%
    E410: 01 02 44 68 01 3D 25 01 00 49 CA 02 3D 05 00 00  // ..Dh.=%..I..=...
    E420: 00 00 00 49 39 00 3A 00 00 0D 25 68 18 01 4A 65  // ...I9.:...%h..Je
    E430: 68 18 01 44 30 00 5B 54 20 68 18 52 3C 03 00 40  // h..D0.[T h.R<..@
    E440: 24 01 3E 39 40 00 44 77 00 4A A5 24 01 08 44 4B  // $.>9@.Dw.J.$..DK
    E450: 00 03 39 40 00 3E E5 40 00 49 62 00 03 E5 40 20  // ..9@.>.@.Ib...@ 
    E460: 01 02 24 01 40 4A A5 24 01 08 44 67 00 4A A5 24  // ..$.@J.$..Dg.J.$
    E470: 01 10 44 6F 00 55 38 00 5B 3D 65 01 02 44 D7 00  // ..Do.U8.[=e..D..
    E480: 02 05 00 60 EA 00 00 52 3C 3C F9 24 01 00 44 C1  // ...`...R<<.$..D.
    E490: 00 07 25 15 01 FE 4A A5 24 01 10 44 98 00 03 00  // ..%...J.$..D....
    E4A0: 40 24 01 03 F9 40 00 3E 25 40 00 49 B4 00 03 25  // @$...@.>%@.I...%
    E4B0: 40 68 01 02 24 01 40 4A A5 24 01 10 44 B9 00 5D  // @h..$.@J.$..D..]
    E4C0: 05 00 00 00 00 FF 40 7E 05 00 52 29 07 0D 18 01  // ......@~..R)....
    E4D0: F8 FE 43 3A 01 02 05 00 00 46 C3 23 07 25 15 01  // ..C:.....F.#.%..
    E4E0: FE 4A A5 01 17 03 44 3A 01 56 08 40 03 31 40 01  // .J....D:.V.@.1@.
    E4F0: 15 0D 40 0E 0F 0D 40 0F 04 01 0A 18 17 40 5C B1  // ..@...@......@\.
    E500: 19 17 FC 01 51 05 07 A5 01 17 FC 01 25 05 17 40  // ....Q.......%..@
    E510: 01 05 02 17 00 00 3C 00 01 65 1C 17 01 54 08 04  // ......<..e...T..
    E520: 17 01 A5 05 17 E8 0D A5 19 17 10 4A 65 24 17 02  // ...........Je$..
    E530: 44 2D 01 0D 65 19 17 03 01 01 42 01 00 01 01 46  // D-..e.....B....F
    E540: 01 00 01 01 4A 01 00 01 01 4E 01 00 01 01 52 01  // ....J....N....R.
    E550: 00 01 01 56 01 00 3D 65 01 02 49 67 01 5C 0D 18  // ...V..=e..Ig.\..
    E560: 01 F8 FF 01 01 5B 56 00 41 03 31 41 01 09 25 41  // .....[V.A.1A..%A
    E570: 03 15 25 41 02 66 FF 2D 0D 42 D1 02 2D 0A 42 41  // ..%A.f.-.B..-.BA
    E580: 26 05 00 0A 00 00 00 03 04 41 00 00 27 02 41 40  // &........A..'.A@
    E590: 3E 05 40 00 00 01 00 45 A1 01 03 0D 40 FF FF 66  // >.@....E....@..f
    E5A0: FF 2D 0D 42 E1 02 56 00 41 03 39 41 01 15 25 41  // .-.B..V.A.9A..%A
    E5B0: 02 2D 0A 42 41 03 0C 48 00 00 01 0A 30 1B 40 3A  // .-.BA..H....0.@:
    E5C0: 00 00 3D 65 01 0B 49 2C 02 20 05 00 64 00 00 00  // ..=e..I,. ..d...
    E5D0: 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10 09 0D  // ..H....A@..%A...
    E5E0: 41 DF F7 4B A5 01 04 44 F0 01 0F 65 41 08 03 0C  // A..K...D...eA...
    E5F0: 48 00 00 4A 05 9C 1B 01 00 00 00 44 15 02 03 0C  // H..J.......D....
    E600: 48 02 00 3C 02 41 01 40 49 15 02 3C 02 40 01 41  // H..<.A.@I..<.@.A
    E610: 44 CA 02 03 0C 48 02 00 07 25 40 01 EF 01 02 41  // D....H...%@....A
    E620: 01 40 01 0A 40 01 41 43 CA 02 56 00 40 03 8D 40  // .@..@.AC..V.@..@
    E630: 0C 00 3D 65 01 18 44 4F 02 03 8D 40 3E 00 3D 65  // ..=e..DO...@>.=e
    E640: 01 19 44 4F 02 03 A9 40 01 33 A5 40 14 03 31 40  // ..DO...@.3.@..1@
    E650: 01 09 25 40 03 15 25 40 04 0F 0D 40 01 01 4B A5  // ..%@..%@...@..K.
    E660: 01 04 44 6C 02 0F 0D 40 00 02 56 00 41 03 29 41  // ..Dl...@..V.A.)A
    E670: 01 33 25 41 14 03 0C 48 00 00 4A 05 9C 1B 01 00  // .3%A...H..J.....
    E680: 00 00 44 A8 02 03 0C 48 02 00 4A 25 40 01 10 49  // ..D....H..J%@..I
    E690: A8 02 3C 22 43 01 41 49 A8 02 03 1A 48 40 3C 0A  // ..<"C.AI....H@<.
    E6A0: 00 01 40 44 CA 02 03 1A 48 40 07 25 00 01 FE 03  // ..@D....H@.%....
    E6B0: 0C 48 02 00 01 22 43 01 41 07 0D 40 01 EF F7 03  // .H..."C.A..@....
    E6C0: 1A 48 40 01 0A 00 01 40 3A 00 00 5B 7A 28 00 00  // .H@....@:..[z(..
    E6D0: CA 9A 3B 80 7C 81 4A 00 2F 68 59 00 94 35 77 00  // ..;.|.J./hY..5w.
    E6E0: 00 00 00 00 02 04 00 00 04 08 00 00 26 0C 00 00  // ............&...
    E6F0: 28 10 00 00 2A 14 00 FF FF FF FF FF FF FF FF FF  // (...*...........
    E700: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E710: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E720: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E730: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E740: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E750: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E760: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    E870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E880: 00 00 00 00                                      // ....


WPBT
----
[000h 0000   4]                    Signature : "WPBT"    [Windows Platform Binary Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1B
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "ASUS"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 Handoff Size : 000D6308
[028h 0040   8]              Handoff Address : 00000000CAB57000
[030h 0048   1]                       Layout : 01
[031h 0049   1]                         Type : 01
[032h 0050   2]             Arguments Length : 0000
                      Command-line Arguments : /* Zero-length Data */

Raw Table Data: Length 60 (0x3C)

    0000: 57 50 42 54 3C 00 00 00 01 1B 41 4C 41 53 4B 41  // WPBT<.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 01 00 00 00 41 53 55 53  // A M I.......ASUS
    0020: 01 00 00 00 08 63 0D 00 00 70 B5 CA 00 00 00 00  // .....c...p......
    0030: 01 01 00 00 00 00 00 00 00 00 00 00              // ............


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000000
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 0

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 6C 41 4C 41 53 4B 41  // WSMT(....lALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 00 00                          // ........


