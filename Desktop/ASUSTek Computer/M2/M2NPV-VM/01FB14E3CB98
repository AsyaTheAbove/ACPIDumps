
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20180531
Copyright (c) 2000 - 2018 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000248  0x01  "PTLTD "  "POWERNOW"  0x00000001  " LTP"   0x00000001
 02)  MCFG  0x0000003C  0x01  "Nvidia"  "ASUSACPI"  0x42302E31  "AWRD"   0x00000000
 03)  APIC  0x00000098  0x01  "Nvidia"  "ASUSACPI"  0x42302E31  "AWRD"   0x00000000
 04)  DSDT  0x00006B1B  0x01  "NVIDIA"  "ASUSACPI"  0x00001000  "MSFT"   0x03000000
 05)  FACP  0x000000F4  0x03  "Nvidia"  "ASUSACPI"  0x42302E31  "AWRD"   0x00000000
 06)  HPET  0x00000038  0x01  "Nvidia"  "ASUSACPI"  0x42302E31  "AWRD"   0x00000098
 07)  FACS  0x00000040  0x00

Found 7 ACPI tables in /root/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000098
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E0
[00Ah 0010   6]                       Oem ID : "Nvidia"
[010h 0016   8]                 Oem Table ID : "ASUSACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "AWRD"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[04Ch 0076   1]                Subtable Type : 01 [I/O APIC]
[04Dh 0077   1]                       Length : 0C
[04Eh 0078   1]                  I/O Apic ID : 04
[04Fh 0079   1]                     Reserved : 00
[050h 0080   4]                      Address : FEC00000
[054h 0084   4]                    Interrupt : 00000000

[058h 0088   1]                Subtable Type : 02 [Interrupt Source Override]
[059h 0089   1]                       Length : 0A
[05Ah 0090   1]                          Bus : 00
[05Bh 0091   1]                       Source : 00
[05Ch 0092   4]                    Interrupt : 00000002
[060h 0096   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098   1]                Subtable Type : 02 [Interrupt Source Override]
[063h 0099   1]                       Length : 0A
[064h 0100   1]                          Bus : 00
[065h 0101   1]                       Source : 09
[066h 0102   4]                    Interrupt : 00000009
[06Ah 0106   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[06Ch 0108   1]                Subtable Type : 02 [Interrupt Source Override]
[06Dh 0109   1]                       Length : 0A
[06Eh 0110   1]                          Bus : 00
[06Fh 0111   1]                       Source : 0E
[070h 0112   4]                    Interrupt : 0000000E
[074h 0116   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[076h 0118   1]                Subtable Type : 02 [Interrupt Source Override]
[077h 0119   1]                       Length : 0A
[078h 0120   1]                          Bus : 00
[079h 0121   1]                       Source : 0F
[07Ah 0122   4]                    Interrupt : 0000000F
[07Eh 0126   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[080h 0128   1]                Subtable Type : 04 [Local APIC NMI]
[081h 0129   1]                       Length : 06
[082h 0130   1]                 Processor ID : 00
[083h 0131   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[085h 0133   1]         Interrupt Input LINT : 01

[086h 0134   1]                Subtable Type : 04 [Local APIC NMI]
[087h 0135   1]                       Length : 06
[088h 0136   1]                 Processor ID : 01
[089h 0137   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[08Bh 0139   1]         Interrupt Input LINT : 01

[08Ch 0140   1]                Subtable Type : 04 [Local APIC NMI]
[08Dh 0141   1]                       Length : 06
[08Eh 0142   1]                 Processor ID : 02
[08Fh 0143   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[091h 0145   1]         Interrupt Input LINT : 01

[092h 0146   1]                Subtable Type : 04 [Local APIC NMI]
[093h 0147   1]                       Length : 06
[094h 0148   1]                 Processor ID : 03
[095h 0149   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[097h 0151   1]         Interrupt Input LINT : 01

Raw Table Data: Length 152 (0x98)

    0000: 41 50 49 43 98 00 00 00 01 E0 4E 76 69 64 69 61  // APIC......Nvidia
    0010: 41 53 55 53 41 43 50 49 31 2E 30 42 41 57 52 44  // ASUSACPI1.0BAWRD
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 00 00 00 00 00 08 03 03 00 00 00 00 01 0C 04 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0D 00 02 0A 00 0E  // ................
    0070: 0E 00 00 00 05 00 02 0A 00 0F 0F 00 00 00 05 00  // ................
    0080: 04 06 00 05 00 01 04 06 01 05 00 01 04 06 02 05  // ................
    0090: 00 01 04 06 03 05 00 01                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "NVIDIA", "ASUSACPI", 0x00001000)
{
    External (_PR_.CPU0, UnknownObj)

    Scope (\_PR)
    {
        Processor (\_PR.C000, 0x00, 0x00000000, 0x00){}
        Processor (\_PR.C001, 0x01, 0x00000000, 0x00){}
        Processor (\_PR.C002, 0x02, 0x00000000, 0x00){}
        Processor (\_PR.C003, 0x03, 0x00000000, 0x00){}
    }

    Name (\_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S1, Package (0x04)  // _S1_: S1 System State
    {
        0x01, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (\_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    OperationRegion (\DEBG, SystemIO, 0x1080, 0x01)
    Field (\DEBG, ByteAcc, NoLock, Preserve)
    {
        DBG1,   8
    }

    OperationRegion (KBC, SystemIO, 0x64, 0x01)
    Field (KBC, ByteAcc, NoLock, Preserve)
    {
        KCMD,   8
    }

    OperationRegion (KBCD, SystemIO, 0x60, 0x01)
    Field (KBCD, ByteAcc, NoLock, Preserve)
    {
        KDAT,   8
    }

    OperationRegion (EXTM, SystemMemory, 0x000FF830, 0x10)
    Field (EXTM, WordAcc, NoLock, Preserve)
    {
        ROM1,   16, 
        RMS1,   16, 
        ROM2,   16, 
        RMS2,   16, 
        ROM3,   16, 
        RMS3,   16, 
        AMEM,   32
    }

    OperationRegion (\PM1S, SystemIO, 0x4000, 0x02)
    Field (\PM1S, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        PBTS,   1, 
            ,   1, 
        RTCS,   1, 
            ,   4, 
        WAKS,   1
    }

    OperationRegion (ELCR, SystemIO, 0x04D0, 0x02)
    Field (ELCR, ByteAcc, NoLock, Preserve)
    {
        ELC1,   8, 
        ELC2,   8
    }

    OperationRegion (\STUS, SystemIO, 0x4400, 0x04)
    Field (\STUS, ByteAcc, NoLock, Preserve)
    {
        G_ST,   32
    }

    OperationRegion (\GPS0, SystemIO, 0x4020, 0x04)
    Field (\GPS0, ByteAcc, NoLock, Preserve)
    {
        GS00,   8, 
        GS01,   8, 
        GS02,   8, 
        GS03,   8
    }

    OperationRegion (\P20S, SystemIO, 0x4020, 0x04)
    Field (\P20S, ByteAcc, NoLock, Preserve)
    {
        P_20,   32
    }

    OperationRegion (\SMIC, SystemIO, 0x442E, 0x01)
    Field (\SMIC, ByteAcc, NoLock, Preserve)
    {
        SCP,    8
    }

    OperationRegion (\GP1, SystemIO, 0x44C0, 0x40)
    Field (\GP1, ByteAcc, NoLock, Preserve)
    {
        GP00,   8, 
        GP01,   8, 
        GP02,   8, 
        GP03,   8, 
        GP04,   8, 
        GP05,   8, 
        GP06,   8, 
        GP07,   8, 
        GP08,   8, 
        GP09,   8, 
        GP10,   8, 
        GP11,   8, 
        GP12,   8, 
        GP13,   8, 
        GP14,   8, 
        GP15,   8, 
        GP16,   8, 
        GP17,   8, 
        GP18,   8, 
        GP19,   8, 
        GP20,   8, 
        GP21,   8, 
        GP22,   8, 
        Offset (0x18), 
        GP24,   8, 
        GP25,   8, 
        GP26,   8, 
        GP27,   8, 
        GP28,   8, 
        GP29,   8, 
        GP30,   8, 
        GP31,   8, 
        GP32,   8, 
        GP33,   8, 
        GP34,   8, 
        GP35,   8, 
        GP36,   8, 
        GP37,   8, 
        GP38,   8, 
        GP39,   8, 
        GP40,   8, 
        GP41,   8, 
        GP42,   8, 
        GP43,   8, 
        GP44,   8, 
        GP45,   8, 
        GP46,   8, 
        GP47,   8, 
        GP48,   8, 
        GP49,   8, 
        GP50,   8, 
        GP51,   8, 
        GP52,   8, 
        GP53,   8, 
        GP54,   8, 
        GP55,   8, 
        GP56,   8, 
        GP57,   8, 
        GP58,   8, 
        GP59,   8, 
        GP60,   8, 
        GP61,   8, 
        GP62,   8, 
        GP63,   8
    }

    Name (VSTA, 0x01)
    Name (OSFX, 0x01)
    Name (OSFL, 0x01)
    Method (STRC, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) != SizeOf (Arg1)))
        {
            Return (0x00)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    OperationRegion (RTCM, SystemIO, 0x70, 0x02)
    Field (RTCM, ByteAcc, NoLock, Preserve)
    {
        CMIN,   8, 
        CMDA,   8
    }

    IndexField (CMIN, CMDA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x0F), 
        SHUT,   8
    }

    OperationRegion (INFO, SystemMemory, 0x000FF840, 0x01)
    Field (INFO, ByteAcc, NoLock, Preserve)
    {
        KBDI,   1, 
        RTCW,   1, 
        PS2F,   1, 
        IRFL,   2, 
        DISE,   1, 
        SSHU,   1, 
        AWMD,   1
    }

    OperationRegion (BEEP, SystemIO, 0x61, 0x01)
    Field (BEEP, ByteAcc, NoLock, Preserve)
    {
        S1B,    8
    }

    OperationRegion (CONT, SystemIO, 0x40, 0x04)
    Field (CONT, ByteAcc, NoLock, Preserve)
    {
        CNT0,   8, 
        CNT1,   8, 
        CNT2,   8, 
        CTRL,   8
    }

    Method (SPKR, 1, NotSerialized)
    {
        Local0 = S1B /* \S1B_ */
        CTRL = 0xB6
        CNT2 = 0x55
        CNT2 = 0x03
        Local2 = Arg0
        While ((Local2 > 0x00))
        {
            S1B |= 0x03
            Local3 = 0x5FFF
            While ((Local3 > 0x00))
            {
                Local3--
            }

            S1B &= 0xFC
            Local3 = 0x0EFF
            While ((Local3 > 0x00))
            {
                Local3--
            }

            Local2--
        }

        S1B = Local0
    }

    OperationRegion (AMDL, SystemMemory, 0x000FFFEA, 0x01)
    Field (AMDL, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        AWEN,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x01)
    }

    Scope (\_SB)
    {
        Device (AWY)
        {
            Name (_HID, "AWY0001")  // _HID: Hardware ID
            Method (SMOD, 1, NotSerialized)
            {
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((AWEN == 0x00))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }
        }
    }

    Scope (\)
    {
        Name (PICF, 0x00)
        Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
        {
            PICF = Arg0
        }
    }

    Name (SID4, 0x00)
    Name (SLG0, 0x00)
    Name (SLG1, 0x00)
    Name (SLG2, 0x00)
    Name (SLG3, 0x00)
    Name (SLG4, 0x00)
    Name (SLG5, 0x00)
    Name (SLG6, 0x00)
    Name (SLG7, 0x00)
    Name (SLG8, 0x00)
    Name (SLG9, 0x00)
    Name (SLGA, 0x00)
    Name (SID5, 0x00)
    Name (SSM0, 0x00)
    Name (SSM1, 0x00)
    Name (SSM2, 0x00)
    Name (SSM3, 0x00)
    Name (SSM4, 0x00)
    Name (SUA0, 0x00)
    Name (SUB0, 0x00)
    Name (SX, 0x00)
    Name (SFLG, 0x00)
    Name (SID0, 0x00)
    Name (SID1, 0x00)
    Name (SID2, 0x00)
    Name (SID3, 0x00)
    Method (\_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Local0 = Arg0
        SX = Local0
        Local0 = (Arg0 | 0xF0)
        DBG1 = Local0
        OSTP ()
        SID0 = \_SB.PCI0.IDE0.ID20
        SID1 = \_SB.PCI0.IDE0.IDTS
        SID2 = \_SB.PCI0.IDE0.IDTP
        SID3 = \_SB.PCI0.IDE0.ID22
        SID4 = \_SB.PCI0.IDE0.UMSS
        SID5 = \_SB.PCI0.IDE0.UMSP
        If ((Arg0 == 0x01)){}
        If ((Arg0 == 0x03)){}
        If ((Arg0 == 0x04)){}
        If ((Arg0 == 0x05))
        {
            If ((OSFL != 0x00))
            {
                Sleep (0x01F4)
            }
        }
    }

    Method (\_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG1 = 0xFF
        SFLG = 0x00
        If ((RTCW == 0x00))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Notify (\_SB.PCI0.USB0, 0x00) // Bus Check
        If ((OSFL >= 0x01))
        {
            \_SB.PCI0.SMB0.SMPM = 0x00
        }
    }

    Scope (\_SI)
    {
        Method (_MSG, 1, NotSerialized)  // _MSG: Message
        {
            Debug = "==== MSG Working ===="
        }

        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            Debug = "==== SST Working ===="
        }
    }

    Scope (\_GPE)
    {
        Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            GS02 = 0x02
            If ((PEVA != 0xFFFF))
            {
                If (PESA)
                {
                    While (PESA)
                    {
                        PESA = 0x01
                    }

                    Notify (\_SB.PCI0.XVRA, 0x02) // Device Wake
                }
            }

            If ((PEVB != 0xFFFF))
            {
                If (PESB)
                {
                    While (PESB)
                    {
                        PESB = 0x01
                    }

                    Notify (\_SB.PCI0.XVRB, 0x02) // Device Wake
                }
            }

            If ((PEVC != 0xFFFF))
            {
                If (PESC)
                {
                    While (PESC)
                    {
                        PESC = 0x01
                    }

                    Notify (\_SB.PCI0.XVRC, 0x02) // Device Wake
                }
            }
        }

        Method (_L00, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.HUB0, 0x02) // Device Wake
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.VT86.UAR1, 0x02) // Device Wake
            Notify (\_SB.PCI0.VT86.UAR2, 0x02) // Device Wake
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.MMAC, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB0, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.MMCI, 0x02) // Device Wake
        }

        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.PCI0.VT86.PS2W ()
        }

        Method (_L15, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.AZAD, 0x02) // Device Wake
        }
    }

    Scope (\_SB)
    {
        OperationRegion (\CTCR, SystemIO, 0x4010, 0x04)
        Field (\CTCR, DWordAcc, NoLock, Preserve)
        {
            CTCR,   32
        }

        Method (SCTC, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CTCR &= 0xFFFFFFEF
            }
            Else
            {
                Local0 = Arg0
                If ((Local0 <= 0x07))
                {
                    If ((Local0 >= 0x01))
                    {
                        CTCR &= 0xFFFFFFF1
                        Local0--
                        Local0 = ~Local0
                        Local0 &= 0x07
                        Local0 |= 0x08
                        Local0 <<= 0x01
                        CTCR |= Local0
                    }
                }
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (PCIA, 0x00)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x02))
                {
                    PCIA = Arg1
                }
            }

            Device (MBIO)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x4000,             // Range Minimum
                            0x4000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x4080,             // Range Minimum
                            0x4080,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x4400,             // Range Minimum
                            0x4400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x4480,             // Range Minimum
                            0x4480,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x4800,             // Range Minimum
                            0x4800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x4880,             // Range Minimum
                            0x4880,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y00)
                        IO (Decode16,
                            0x2000,             // Range Minimum
                            0x2000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x2080,             // Range Minimum
                            0x2080,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                    })
                    CreateDWordField (BUF0, \_SB.PCI0.MBIO._CRS._Y00._BAS, GUBA)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PCI0.MBIO._CRS._Y00._LEN, GUBL)  // _LEN: Length
                    If ((IGUB != 0xFFFFFFFF))
                    {
                        If (IGUB)
                        {
                            Local0 = IGUB /* \IGUB */
                            Local0 <<= 0x07
                            GUBA = Local0
                            GUBL = IGUL /* \IGUL */
                        }
                    }

                    Return (BUF0) /* \_SB_.PCI0.MBIO._CRS.BUF0 */
                }
            }

            Name (NATA, Package (0x01)
            {
                0x000D0000
            })
            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                If ((OSFL == 0x02))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x03)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            OperationRegion (LDT3, PCI_Config, 0x6C, 0x04)
            Field (LDT3, DWordAcc, NoLock, Preserve)
            {
                UCFG,   32
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    WordBusNumber (ResourceConsumer, MinNotFixed, MaxNotFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, )
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x0CF7,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0CF8,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x0000,             // Granularity
                        0x0D00,             // Range Minimum
                        0xFFFF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0xF300,             // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00100000,         // Range Minimum
                        0xFEBFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xFFF00000,         // Length
                        ,, _Y01, AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y01._MIN, TCMM)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._CRS._Y01._LEN, TOMM)  // _LEN: Length
                TCMM = (AMEM + 0x00010000)
                TOMM = (0xFEC00000 - TCMM) /* \_SB_.PCI0._CRS.TCMM */
                Return (BUF0) /* \_SB_.PCI0._CRS.BUF0 */
            }

            Name (PICM, Package (0x1C)
            {
                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    \_SB.PCI0.LSMB, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    \_SB.PCI0.LPMU, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x00, 
                    \_SB.PCI0.LUBA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x01, 
                    \_SB.PCI0.LUB2, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x00, 
                    \_SB.PCI0.LMAC, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x00, 
                    \_SB.PCI0.LACI, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x01, 
                    \_SB.PCI0.LAZA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x02, 
                    \_SB.PCI0.LACI, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x03, 
                    \_SB.PCI0.LMCI, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000DFFFF, 
                    0x00, 
                    \_SB.PCI0.LIDE, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000EFFFF, 
                    0x00, 
                    \_SB.PCI0.LSID, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x00, 
                    \_SB.PCI0.LFID, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x00, 
                    \_SB.PCI0.LNK5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x01, 
                    \_SB.PCI0.LNK6, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    \_SB.PCI0.LNK5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    \_SB.PCI0.LNK6, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    \_SB.PCI0.LNK6, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    \_SB.PCI0.LNK7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x00, 
                    \_SB.PCI0.LNK7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x01, 
                    \_SB.PCI0.LNK8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    \_SB.PCI0.LNK5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    \_SB.PCI0.LNK6, 
                    0x00
                }
            })
            Name (APIC, Package (0x1C)
            {
                Package (0x04)
                {
                    0x000AFFFF, 
                    0x00, 
                    \_SB.PCI0.APCS, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000AFFFF, 
                    0x01, 
                    \_SB.PCI0.APMU, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x00, 
                    \_SB.PCI0.APCF, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000BFFFF, 
                    0x01, 
                    \_SB.PCI0.APCL, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x00, 
                    \_SB.PCI0.APCH, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x00, 
                    \_SB.PCI0.APCJ, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x01, 
                    \_SB.PCI0.AAZA, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x02, 
                    \_SB.PCI0.APCJ, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0010FFFF, 
                    0x03, 
                    \_SB.PCI0.APCK, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000DFFFF, 
                    0x00, 
                    \_SB.PCI0.APCZ, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000EFFFF, 
                    0x00, 
                    \_SB.PCI0.APSI, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x000FFFFF, 
                    0x00, 
                    \_SB.PCI0.APSJ, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x00, 
                    \_SB.PCI0.APC5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x01, 
                    \_SB.PCI0.APC6, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x02, 
                    \_SB.PCI0.APC7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    0x03, 
                    \_SB.PCI0.APC8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x00, 
                    \_SB.PCI0.APC5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x01, 
                    \_SB.PCI0.APC6, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x02, 
                    \_SB.PCI0.APC7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    0x03, 
                    \_SB.PCI0.APC8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x00, 
                    \_SB.PCI0.APC6, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x01, 
                    \_SB.PCI0.APC7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x02, 
                    \_SB.PCI0.APC8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    0x03, 
                    \_SB.PCI0.APC5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x00, 
                    \_SB.PCI0.APC7, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x01, 
                    \_SB.PCI0.APC8, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x02, 
                    \_SB.PCI0.APC5, 
                    0x00
                }, 

                Package (0x04)
                {
                    0x0005FFFF, 
                    0x03, 
                    \_SB.PCI0.APC6, 
                    0x00
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (!PICF)
                {
                    Return (PICM) /* \_SB_.PCI0.PICM */
                }
                Else
                {
                    Return (APIC) /* \_SB_.PCI0.APIC */
                }
            }

            Device (HUB0)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (PICM, Package (0x0C)
                {
                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x00, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x01, 
                        \_SB.PCI0.LNK2, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        \_SB.PCI0.LNK3, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x03, 
                        \_SB.PCI0.LNK4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x00, 
                        \_SB.PCI0.LNK2, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x01, 
                        \_SB.PCI0.LNK3, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x02, 
                        \_SB.PCI0.LNK4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x03, 
                        \_SB.PCI0.LNK1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x00, 
                        \_SB.PCI0.LNK4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x01, 
                        \_SB.PCI0.LNK4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        \_SB.PCI0.LNK4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        \_SB.PCI0.LNK4, 
                        0x00
                    }
                })
                Name (APIC, Package (0x0C)
                {
                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x00, 
                        \_SB.PCI0.APC1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x01, 
                        \_SB.PCI0.APC2, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x02, 
                        \_SB.PCI0.APC3, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0008FFFF, 
                        0x03, 
                        \_SB.PCI0.APC4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x00, 
                        \_SB.PCI0.APC2, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x01, 
                        \_SB.PCI0.APC3, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x02, 
                        \_SB.PCI0.APC4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0009FFFF, 
                        0x03, 
                        \_SB.PCI0.APC1, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x00, 
                        \_SB.PCI0.APC4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x01, 
                        \_SB.PCI0.APC4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        \_SB.PCI0.APC4, 
                        0x00
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        \_SB.PCI0.APC4, 
                        0x00
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (!PICF)
                    {
                        Return (PICM) /* \_SB_.PCI0.HUB0.PICM */
                    }
                    Else
                    {
                        Return (APIC) /* \_SB_.PCI0.HUB0.APIC */
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x00, 
                    0x05
                })
            }

            Device (SAT1)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                Device (PRI0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x13, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SAT1.PRI0.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            SMIP = 0xB1
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SEC0)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (SSTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x13, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SSTM) /* \_SB_.PCI0.SAT1.SEC0.SSTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SSTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            SMIP = 0xB1
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (DRMP, 0, NotSerialized)
                {
                    Return (\_SB.PCI0.NVRB.R_S0)
                }
            }

            Device (SAT2)
            {
                Name (_ADR, 0x000F0000)  // _ADR: Address
                Device (PRI0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x13, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SPTM) /* \_SB_.PCI0.SAT2.PRI0.SPTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SPTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            SMIP = 0xB1
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Device (SEC0)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (SSTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  // x.......
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                        /* 0010 */  0x13, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (SSTM) /* \_SB_.PCI0.SAT2.SEC0.SSTM */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        SSTM = Arg0
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            SMIP = 0xB1
                            Local0 = Buffer (0x07)
                                {
                                     0x03, 0x46, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .F.....
                                }
                            Return (Local0)
                        }
                    }
                }

                Method (DRMP, 0, NotSerialized)
                {
                    Return (\_SB.PCI0.NVRB.R_S1)
                }
            }

            Device (IDE0)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
                OperationRegion (A090, PCI_Config, 0x50, 0x18)
                Field (A090, DWordAcc, NoLock, Preserve)
                {
                    ID20,   16, 
                    Offset (0x08), 
                    IDTS,   16, 
                    IDTP,   16, 
                    ID22,   32, 
                    UMSS,   16, 
                    UMSP,   16
                }

                Name (IDEP, Buffer (0x14){})
                Name (IDES, Buffer (0x14){})
                Method (GTM, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = IDTP /* \_SB_.PCI0.IDE0.IDTP */
                        Local1 = UMSP /* \_SB_.PCI0.IDE0.UMSP */
                        Local2 = IDEP /* \_SB_.PCI0.IDE0.IDEP */
                    }
                    Else
                    {
                        Local0 = IDTS /* \_SB_.PCI0.IDE0.IDTS */
                        Local1 = UMSS /* \_SB_.PCI0.IDE0.UMSS */
                        Local2 = IDES /* \_SB_.PCI0.IDE0.IDES */
                    }

                    CreateDWordField (Local2, 0x00, PIO0)
                    CreateDWordField (Local2, 0x04, DMA0)
                    CreateDWordField (Local2, 0x08, PIO1)
                    CreateDWordField (Local2, 0x0C, DMA1)
                    CreateDWordField (Local2, 0x10, FLAG)
                    FLAG = 0x10
                    Local3 = (Local0 & 0x0F00)
                    Local4 = (Local0 & 0xF000)
                    Local3 >>= 0x08
                    Local4 >>= 0x0C
                    Local3 += Local4
                    PIO0 = ((Local3 + 0x02) * 0x1E)
                    If ((PIO0 <= 0xB4))
                    {
                        FLAG |= 0x02
                    }

                    If ((Local1 & 0x4000))
                    {
                        FLAG |= 0x01
                        Local3 = (Local1 & 0x0700)
                        Local3 >>= 0x08
                        DMA0 = U2T (Local3)
                    }
                    Else
                    {
                        DMA0 = PIO0 /* \_SB_.PCI0.IDE0.GTM_.PIO0 */
                    }

                    Local3 = (Local0 & 0x0F)
                    Local4 = (Local0 & 0xF0)
                    Local4 >>= 0x04
                    Local3 += Local4
                    PIO1 = ((Local3 + 0x02) * 0x1E)
                    If ((PIO1 <= 0xB4))
                    {
                        FLAG |= 0x08
                    }

                    If ((Local1 & 0x40))
                    {
                        FLAG |= 0x04
                        Local3 = (Local1 & 0x07)
                        DMA1 = U2T (Local3)
                    }
                    Else
                    {
                        DMA1 = PIO1 /* \_SB_.PCI0.IDE0.GTM_.PIO1 */
                    }

                    If ((Arg0 == 0x00))
                    {
                        IDEP = Local2
                        Return (IDEP) /* \_SB_.PCI0.IDE0.IDEP */
                    }
                    Else
                    {
                        IDES = Local2
                        Return (IDES) /* \_SB_.PCI0.IDE0.IDES */
                    }
                }

                Method (U2T, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Return (0x3C)
                    }

                    If ((Arg0 == 0x01))
                    {
                        Return (0x5A)
                    }

                    If ((Arg0 == 0x02))
                    {
                        Return (0x78)
                    }

                    If ((Arg0 == 0x03))
                    {
                        Return (0x96)
                    }

                    If ((Arg0 == 0x04))
                    {
                        Return (0x2D)
                    }

                    If ((Arg0 == 0x05))
                    {
                        Return (0x1E)
                    }

                    If ((Arg0 == 0x06))
                    {
                        Return (0x14)
                    }

                    Return (0x0F)
                }

                Method (T2U, 1, NotSerialized)
                {
                    If ((Arg0 > 0x78))
                    {
                        Return (0x03)
                    }

                    If ((Arg0 > 0x5A))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 > 0x3C))
                    {
                        Return (0x01)
                    }

                    If ((Arg0 > 0x2D))
                    {
                        Return (0x00)
                    }

                    If ((Arg0 > 0x1E))
                    {
                        Return (0x04)
                    }

                    If ((Arg0 > 0x14))
                    {
                        Return (0x05)
                    }

                    If ((Arg0 > 0x0F))
                    {
                        Return (0x06)
                    }

                    Return (0x07)
                }

                Method (T2D, 1, NotSerialized)
                {
                    If ((Arg0 > 0x01E0))
                    {
                        Return (0xA8)
                    }

                    If ((Arg0 > 0x0186))
                    {
                        Return (0x77)
                    }

                    If ((Arg0 > 0xF0))
                    {
                        Return (0x47)
                    }

                    If ((Arg0 > 0xB4))
                    {
                        Return (0x33)
                    }

                    If ((Arg0 > 0x96))
                    {
                        Return (0x22)
                    }

                    If ((Arg0 > 0x78))
                    {
                        Return (0x21)
                    }

                    Return (0x20)
                }

                Method (STM, 4, NotSerialized)
                {
                    If (SX)
                    {
                        ID20 = SID0 /* \SID0 */
                        IDTS = SID1 /* \SID1 */
                        IDTP = SID2 /* \SID2 */
                        ID22 = SID3 /* \SID3 */
                        UMSS = SID4 /* \SID4 */
                        UMSP = SID5 /* \SID5 */
                    }
                    Else
                    {
                        SID0 = ID20 /* \_SB_.PCI0.IDE0.ID20 */
                        SID1 = IDTS /* \_SB_.PCI0.IDE0.IDTS */
                        SID2 = IDTP /* \_SB_.PCI0.IDE0.IDTP */
                        SID3 = ID22 /* \_SB_.PCI0.IDE0.ID22 */
                        SID4 = UMSS /* \_SB_.PCI0.IDE0.UMSS */
                        SID5 = UMSP /* \_SB_.PCI0.IDE0.UMSP */
                    }

                    SX = 0x00
                    CreateDWordField (Arg0, 0x00, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    If ((Arg3 == 0x00))
                    {
                        Local0 = SID2 /* \SID2 */
                        Local1 = SID5 /* \SID5 */
                    }
                    Else
                    {
                        Local0 = SID1 /* \SID1 */
                        Local1 = SID4 /* \SID4 */
                    }

                    If ((PIO0 != 0xFFFFFFFF))
                    {
                        Local0 &= 0xFF
                        Local2 = (T2D (PIO0) << 0x08)
                        Local0 |= Local2
                    }

                    If ((PIO1 != 0xFFFFFFFF))
                    {
                        Local0 &= 0xFF00
                        Local0 |= T2D (PIO1)
                    }

                    If ((FLAG & 0x01))
                    {
                        Local1 &= 0xFF
                        Local2 = (T2U (DMA0) << 0x08)
                        Local2 |= 0xC000
                        Local1 |= Local2
                    }
                    ElseIf ((DMA0 != 0xFFFFFFFF))
                    {
                        Local0 &= 0xFF
                        Local2 = (T2D (DMA0) << 0x08)
                        Local0 |= Local2
                    }

                    If ((FLAG & 0x04))
                    {
                        Local1 &= 0xFF00
                        Local2 = (0xC0 | T2U (DMA1))
                        Local1 |= Local2
                    }
                    ElseIf ((DMA1 != 0xFFFFFFFF))
                    {
                        Local0 &= 0xFF00
                        Local0 |= T2D (DMA1)
                    }

                    If ((Arg3 == 0x00))
                    {
                        IDTP = Local0
                        UMSP = Local1
                    }
                    Else
                    {
                        IDTS = Local0
                        UMSS = Local1
                    }
                }

                Method (GTF, 2, NotSerialized)
                {
                    Local0 = Buffer (0x07)
                        {
                             0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                        }
                    CreateByteField (Local0, 0x01, MODE)
                    CreateByteField (Local0, 0x05, DRIV)
                    DRIV = Arg1
                    If ((Arg0 == 0x00))
                    {
                        Local1 = IDEP /* \_SB_.PCI0.IDE0.IDEP */
                    }
                    Else
                    {
                        Local1 = IDES /* \_SB_.PCI0.IDE0.IDES */
                    }

                    CreateDWordField (Local1, 0x00, PIO0)
                    CreateDWordField (Local1, 0x04, DMA0)
                    CreateDWordField (Local1, 0x08, PIO1)
                    CreateDWordField (Local1, 0x0C, DMA1)
                    CreateDWordField (Local1, 0x10, FLGX)
                    If ((Arg1 == 0xA0))
                    {
                        Local2 = PIO0 /* \_SB_.PCI0.IDE0.GTF_.PIO0 */
                        Local3 = DMA0 /* \_SB_.PCI0.IDE0.GTF_.DMA0 */
                        FLGX &= 0x01
                    }
                    Else
                    {
                        Local2 = PIO1 /* \_SB_.PCI0.IDE0.GTF_.PIO1 */
                        Local3 = DMA1 /* \_SB_.PCI0.IDE0.GTF_.DMA1 */
                        FLGX &= 0x04
                    }

                    Local1 = FLGX /* \_SB_.PCI0.IDE0.GTF_.FLGX */
                    If ((Local2 > 0x0186))
                    {
                        Local2 = 0x00
                    }
                    ElseIf ((Local2 > 0xF0))
                    {
                        Local2 = 0x01
                    }
                    ElseIf ((Local2 > 0xB4))
                    {
                        Local2 = 0x02
                    }
                    ElseIf ((Local2 > 0x78))
                    {
                        Local2 = 0x03
                    }
                    Else
                    {
                        Local2 = 0x04
                    }

                    MODE = (0x08 | Local2)
                    Local2 = Local0
                    If (FLGX)
                    {
                        If ((Local3 > 0x5A))
                        {
                            Local3 = 0x00
                        }
                        ElseIf ((Local3 > 0x3C))
                        {
                            Local3 = 0x01
                        }
                        ElseIf ((Local3 > 0x2D))
                        {
                            Local3 = 0x02
                        }
                        ElseIf ((Local3 > 0x1E))
                        {
                            Local3 = 0x03
                        }
                        ElseIf ((Local3 > 0x14))
                        {
                            Local3 = 0x04
                        }
                        ElseIf ((Local3 > 0x0F))
                        {
                            Local3 = 0x05
                        }
                        Else
                        {
                            Local3 = 0x06
                        }

                        MODE = (0x40 | Local3)
                    }
                    ElseIf ((Local3 == 0xFFFFFFFF))
                    {
                        Return (Local0)
                    }
                    Else
                    {
                        If ((Local3 > 0x96))
                        {
                            Local3 = 0x00
                        }
                        ElseIf ((Local3 > 0x78))
                        {
                            Local3 = 0x01
                        }
                        Else
                        {
                            Local3 = 0x02
                        }

                        MODE = (0x20 | Local3)
                    }

                    Concatenate (Local0, Local2, Local1)
                    Return (Local1)
                }

                Device (PRI0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (0x00))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        STM (Arg0, Arg1, Arg2, 0x00)
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF (0x00, 0xA0)
                            Return (Local0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF (0x00, 0xB0)
                            Return (Local0)
                        }
                    }
                }

                Device (SEC0)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Return (GTM (0x01))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        STM (Arg0, Arg1, Arg2, 0x01)
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF (0x01, 0xA0)
                            Return (Local0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Local0 = GTF (0x01, 0xB0)
                            Return (Local0)
                        }
                    }
                }

                Method (DRMP, 0, NotSerialized)
                {
                    Return (\_SB.PCI0.NVRB.R_P0)
                }
            }

            Device (IGPU)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                OperationRegion (GPUR, PCI_Config, 0xA0, 0x08)
                Scope (\)
                {
                    Field (\_SB.PCI0.IGPU.GPUR, ByteAcc, NoLock, Preserve)
                    {
                        IGUB,   32, 
                        IGUL,   32
                    }
                }
            }

            Device (XVRA)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                OperationRegion (PCVA, PCI_Config, 0x00, 0xFF)
                Scope (\)
                {
                    Field (\_SB.PCI0.XVRA.PCVA, ByteAcc, NoLock, Preserve)
                    {
                        PEVA,   16, 
                        Offset (0x9C), 
                            ,   3, 
                        XPEA,   1, 
                        Offset (0xA0), 
                        RQDA,   16, 
                        PESA,   1, 
                        PEPA,   1
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x11, 
                    0x05
                })
            }

            Device (XVRB)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (PCVB, PCI_Config, 0x00, 0xFF)
                Scope (\)
                {
                    Field (\_SB.PCI0.XVRB.PCVB, ByteAcc, NoLock, Preserve)
                    {
                        PEVB,   16, 
                        Offset (0x9C), 
                            ,   3, 
                        XPEB,   1, 
                        Offset (0xA0), 
                        RQDB,   16, 
                        PESB,   1, 
                        PEPB,   1
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x11, 
                    0x05
                })
            }

            Device (XVRC)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (PCVC, PCI_Config, 0x00, 0xFF)
                Scope (\)
                {
                    Field (\_SB.PCI0.XVRC.PCVC, ByteAcc, NoLock, Preserve)
                    {
                        PEVC,   16, 
                        Offset (0x9C), 
                            ,   3, 
                        XPEC,   1, 
                        Offset (0xA0), 
                        RQDC,   16, 
                        PESC,   1, 
                        PEPC,   1
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x11, 
                    0x05
                })
            }

            Device (SMB0)
            {
                Name (_ADR, 0x000A0001)  // _ADR: Address
                OperationRegion (SMCF, PCI_Config, 0x48, 0x10)
                Field (SMCF, DWordAcc, NoLock, Preserve)
                {
                    SMPM,   4, 
                    SMT1,   28, 
                    SMT2,   32
                }

                OperationRegion (SMCA, PCI_Config, 0x20, 0x08)
                Field (SMCA, DWordAcc, NoLock, Preserve)
                {
                    SB1,    32, 
                    SB2,    32
                }

                OperationRegion (PDEV, PCI_Config, 0xE8, 0x04)
                Scope (\)
                {
                    Field (\_SB.PCI0.SMB0.PDEV, AnyAcc, NoLock, Preserve)
                    {
                            ,   12, 
                        ACIE,   1
                    }
                }

                Method (SMBB, 0, NotSerialized)
                {
                    If (PCIA)
                    {
                        Local0 = (SB1 & 0xFFFE)
                    }
                    Else
                    {
                        Local0 = 0x4C00
                    }

                    Return (Local0)
                }
            }

            Device (VT86)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
                OperationRegion (PIO0, PCI_Config, 0x04, 0x20)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.PIO0, ByteAcc, NoLock, Preserve)
                    {
                        SMEN,   8, 
                        Offset (0x0C), 
                        Offset (0x0D), 
                        SMIO,   8
                    }
                }

                Scope (\)
                {
                    OperationRegion (\SCPP, SystemIO, 0x442E, 0x01)
                    Field (\SCPP, ByteAcc, NoLock, Preserve)
                    {
                        SMIP,   8
                    }
                }

                Method (\_SB.PCI0._INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (STRC (\_OS, "Microsoft Windows"))
                    {
                        SMIP = 0x56
                    }
                    ElseIf (STRC (\_OS, "Microsoft Windows NT"))
                    {
                        If (CondRefOf (\_OSI, Local0))
                        {
                            If (\_OSI ("Windows 2001"))
                            {
                                SMIP = 0x59
                                OSFL = 0x00
                                OSFX = 0x03
                            }

                            If (\_OSI ("Windows 2006"))
                            {
                                VSTA = 0x01
                            }
                        }
                        Else
                        {
                            SMIP = 0x58
                            OSFX = 0x00
                            OSFL = 0x00
                        }
                    }
                    Else
                    {
                        SMIP = 0x57
                        OSFX = 0x02
                        OSFL = 0x02
                    }

                    Name (TEMP, 0x00)
                    TEMP = UA1D /* \UA1D */
                    TEMP &= 0x0F
                    UARA = (0x01 << TEMP) /* \_SB_.PCI0._INI.TEMP */
                    TEMP = UA1D /* \UA1D */
                    TEMP &= 0xF0
                    TEMP >>= 0x04
                    UARB = (0x01 << TEMP) /* \_SB_.PCI0._INI.TEMP */
                }

                Scope (\)
                {
                    Method (OSTP, 0, NotSerialized)
                    {
                        If ((OSFX == 0x01))
                        {
                            SMIP = 0x56
                        }

                        If ((OSFX == 0x02))
                        {
                            SMIP = 0x57
                        }

                        If ((OSFX == 0x00))
                        {
                            SMIP = 0x58
                        }

                        If ((OSFX == 0x03))
                        {
                            SMIP = 0x59
                        }
                    }
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x01,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x0091,             // Range Minimum
                            0x0091,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0290,             // Range Minimum
                            0x0290,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMA1)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0094,             // Range Minimum
                            0x0094,             // Range Maximum
                            0x01,               // Alignment
                            0x0C,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (ATT5, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Name (ATT6, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX == 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT6) /* \_SB_.PCI0.VT86.TMR_.ATT6 */
                            }
                            Else
                            {
                                Return (ATT5) /* \_SB_.PCI0.VT86.TMR_.ATT5 */
                            }
                        }
                        Else
                        {
                            Return (ATT5) /* \_SB_.PCI0.VT86.TMR_.ATT5 */
                        }
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (ATT3, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadWrite,
                            0xFEFFF000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (ATT4, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSFX == 0x03))
                        {
                            If (HPTF)
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX == 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT3) /* \_SB_.PCI0.VT86.HPET.ATT3 */
                            }
                            Else
                            {
                                Return (ATT4) /* \_SB_.PCI0.VT86.HPET.ATT4 */
                            }
                        }
                        Else
                        {
                            Return (ATT4) /* \_SB_.PCI0.VT86.HPET.ATT4 */
                        }
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (ATT0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (ATT1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSFX == 0x03))
                        {
                            If (HPTF)
                            {
                                Return (ATT1) /* \_SB_.PCI0.VT86.RTC_.ATT1 */
                            }
                            Else
                            {
                                Return (ATT0) /* \_SB_.PCI0.VT86.RTC_.ATT0 */
                            }
                        }
                        Else
                        {
                            Return (ATT0) /* \_SB_.PCI0.VT86.RTC_.ATT0 */
                        }
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Scope (\)
                {
                    OperationRegion (WNFG, SystemIO, 0x2E, 0x01)
                    Field (WNFG, ByteAcc, NoLock, Preserve)
                    {
                        INSX,   8
                    }

                    OperationRegion (WIN1, SystemIO, 0x2E, 0x02)
                    Field (WIN1, ByteAcc, NoLock, Preserve)
                    {
                        INDP,   8, 
                        DATP,   8
                    }

                    IndexField (INDP, DATP, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        CFG,    8, 
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x20), 
                        IDHI,   8, 
                        IDLO,   8, 
                        POWC,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IO2H,   8, 
                        IO2L,   8, 
                        Offset (0x70), 
                        INTR,   8, 
                        Offset (0x72), 
                        INT1,   8, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xF0), 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8
                    }

                    Method (ENFG, 0, NotSerialized)
                    {
                        INDP = 0x87
                        INDP = 0x01
                        INDP = 0x55
                        INDP = 0x55
                        POWC |= 0x80
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        CFG = 0x02
                    }

                    Method (GSRG, 1, NotSerialized)
                    {
                        INDP = Arg0
                        Return (DATP) /* \DATP */
                    }

                    Method (SSRG, 2, NotSerialized)
                    {
                        INDP = Arg0
                        DATP = Arg1
                    }
                }

                Device (FDC0)
                {
                    Name (_HID, EisaId ("PNP0700"))  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = Zero
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x00
                        ACTR = Zero
                        SLDM (DMCH, 0x04)
                        EXFG ()
                        DISD (0x03)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                _Y02)
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {2}
                        })
                        CreateByteField (BUF0, \_SB.PCI0.VT86.FDC0._CRS._Y02._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF0, 0x03, IOHI)
                        CreateByteField (BUF0, \_SB.PCI0.VT86.FDC0._CRS._Y02._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF0, 0x05, IORH)
                        ENFG ()
                        EXFG ()
                        Return (BUF0) /* \_SB_.PCI0.VT86.FDC0._CRS.BUF0 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F0,             // Range Minimum
                                0x03F0,             // Range Maximum
                                0x01,               // Alignment
                                0x06,               // Length
                                )
                            IO (Decode16,
                                0x03F7,             // Range Minimum
                                0x03F7,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {6}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {2}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateWordField (Arg0, 0x19, IRQW)
                        CreateByteField (Arg0, 0x1C, DMAV)
                        ENFG ()
                        LDN = Zero
                        ACTR = One
                        SLDM (DMCH, DMCH)
                        CKIO (IOAD, 0x03)
                        EXFG ()
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = 0x01
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }

                        EXFG ()
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x01
                        ACTR = Zero
                        EXFG ()
                        DISD (0x00)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF1, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                _Y03)
                            IRQNoFlags (_Y04)
                                {}
                        })
                        CreateByteField (BUF1, \_SB.PCI0.VT86.UAR1._CRS._Y03._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF1, 0x03, IOHI)
                        CreateByteField (BUF1, \_SB.PCI0.VT86.UAR1._CRS._Y03._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF1, 0x05, IORH)
                        CreateWordField (BUF1, \_SB.PCI0.VT86.UAR1._CRS._Y04._INT, IRQW)  // _INT: Interrupts
                        ENFG ()
                        LDN = 0x01
                        IOLO = IOAL /* \IOAL */
                        IORL = IOAL /* \IOAL */
                        IOHI = IOAH /* \IOAH */
                        IORH = IOAH /* \IOAH */
                        Local0 = One
                        IRQW = (Local0 << INTR) /* \INTR */
                        EXFG ()
                        Return (BUF1) /* \_SB_.PCI0.VT86.UAR1._CRS.BUF1 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateWordField (Arg0, 0x09, IRQW)
                        ENFG ()
                        LDN = 0x01
                        ACTR = One
                        IOAL = IOLO /* \_SB_.PCI0.VT86.UAR1._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.VT86.UAR1._SRS.IOHI */
                        FindSetRightBit (IRQW, Local0)
                        INTR = (Local0 - 0x01)
                        EXFG ()
                        CKIO (IOAD, 0x00)
                    }
                }

                Device (UAR2)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        ENFG ()
                        LDN = 0x02
                        Local0 = (OPT1 & 0x70)
                        If ((Local0 == 0x40))
                        {
                            Return (0x05878526)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }

                        EXFG ()
                    }

                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = 0x02
                        Local0 = (OPT1 & 0x70)
                        If ((Local0 != 0x10))
                        {
                            If (ACTR)
                            {
                                EXFG ()
                                Return (0x0F)
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                EXFG ()
                                Return (0x0D)
                            }
                            Else
                            {
                                EXFG ()
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x02
                        ACTR = Zero
                        EXFG ()
                        DISD (0x01)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF2, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                _Y05)
                            IRQNoFlags (_Y06)
                                {4}
                        })
                        CreateByteField (BUF2, \_SB.PCI0.VT86.UAR2._CRS._Y05._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF2, 0x03, IOHI)
                        CreateByteField (BUF2, \_SB.PCI0.VT86.UAR2._CRS._Y05._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF2, 0x05, IORH)
                        CreateWordField (BUF2, \_SB.PCI0.VT86.UAR2._CRS._Y06._INT, IRQW)  // _INT: Interrupts
                        ENFG ()
                        LDN = 0x02
                        IOLO = IOAL /* \IOAL */
                        IORL = IOAL /* \IOAL */
                        IOHI = IOAH /* \IOAH */
                        IORH = IOAH /* \IOAH */
                        Local0 = One
                        IRQW = (Local0 << INTR) /* \INTR */
                        EXFG ()
                        Return (BUF2) /* \_SB_.PCI0.VT86.UAR2._CRS.BUF2 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateWordField (Arg0, 0x09, IRQW)
                        ENFG ()
                        LDN = 0x02
                        ACTR = One
                        IOAL = IOLO /* \_SB_.PCI0.VT86.UAR2._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.VT86.UAR2._SRS.IOHI */
                        FindSetRightBit (IRQW, Local0)
                        INTR = (Local0 - 0x01)
                        EXFG ()
                        CKIO (IOAD, 0x01)
                    }
                }

                Method (\_SB.PCI0.VT86.UAR2._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x03, 
                        0x05
                    })
                }

                Device (LPT1)
                {
                    Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = 0x03
                        Local0 = (OPT1 & 0x02)
                        If ((Local0 != 0x02))
                        {
                            If (ACTR)
                            {
                                EXFG ()
                                Return (0x0F)
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                EXFG ()
                                Return (0x0D)
                            }
                            Else
                            {
                                EXFG ()
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x03
                        ACTR = Zero
                        EXFG ()
                        DISD (0x02)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF5, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                _Y07)
                            IRQNoFlags (_Y08)
                                {}
                        })
                        CreateByteField (BUF5, \_SB.PCI0.VT86.LPT1._CRS._Y07._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF5, 0x03, IOHI)
                        CreateByteField (BUF5, \_SB.PCI0.VT86.LPT1._CRS._Y07._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF5, 0x05, IORH)
                        CreateByteField (BUF5, \_SB.PCI0.VT86.LPT1._CRS._Y07._LEN, IOLE)  // _LEN: Length
                        CreateWordField (BUF5, \_SB.PCI0.VT86.LPT1._CRS._Y08._INT, IRQW)  // _INT: Interrupts
                        ENFG ()
                        LDN = 0x03
                        IOLO = IOAL /* \IOAL */
                        IORL = IOLO /* \_SB_.PCI0.VT86.LPT1._CRS.IOLO */
                        IOHI = IOAH /* \IOAH */
                        IORH = IOHI /* \_SB_.PCI0.VT86.LPT1._CRS.IOHI */
                        If ((IOLO == 0xBC))
                        {
                            IOLE = 0x04
                        }
                        Else
                        {
                            IOLE = 0x08
                        }

                        Local0 = One
                        Local5 = INTR /* \INTR */
                        IRQW = (Local0 << Local5)
                        EXFG ()
                        Return (BUF5) /* \_SB_.PCI0.VT86.LPT1._CRS.BUF5 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateByteField (Arg0, 0x04, IORL)
                        CreateByteField (Arg0, 0x05, IORH)
                        CreateWordField (Arg0, 0x09, IRQW)
                        ENFG ()
                        LDN = 0x03
                        ACTR = One
                        IOAL = IOLO /* \_SB_.PCI0.VT86.LPT1._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.VT86.LPT1._SRS.IOHI */
                        FindSetLeftBit (IRQW, Local0)
                        Local0 -= 0x01
                        INTR = Local0
                        EXFG ()
                        CKIO (IOAD, 0x02)
                    }
                }

                Device (ECP1)
                {
                    Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = 0x03
                        Local0 = (OPT1 & 0x02)
                        If ((Local0 == 0x02))
                        {
                            If (ACTR)
                            {
                                EXFG ()
                                Return (0x0F)
                            }
                            ElseIf ((IOAH || IOAL))
                            {
                                EXFG ()
                                Return (0x0D)
                            }
                            Else
                            {
                                EXFG ()
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x03
                        ACTR = Zero
                        SLDM (DMCH, 0x04)
                        EXFG ()
                        DISD (0x02)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF6, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                _Y09)
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                _Y0A)
                            IRQNoFlags (_Y0B)
                                {}
                            DMA (Compatibility, NotBusMaster, Transfer8, _Y0C)
                                {}
                        })
                        CreateByteField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y09._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF6, 0x03, IOHI)
                        CreateByteField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y09._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF6, 0x05, IORH)
                        CreateByteField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y09._LEN, IOLE)  // _LEN: Length
                        CreateByteField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y0A._MIN, IOEL)  // _MIN: Minimum Base Address
                        CreateByteField (BUF6, 0x0B, IOEH)
                        CreateByteField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y0A._MAX, IOML)  // _MAX: Maximum Base Address
                        CreateByteField (BUF6, 0x0D, IOMH)
                        CreateWordField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y0B._INT, IRQW)  // _INT: Interrupts
                        CreateByteField (BUF6, \_SB.PCI0.VT86.ECP1._CRS._Y0C._DMA, DMAC)  // _DMA: Direct Memory Access
                        ENFG ()
                        LDN = 0x03
                        Local2 = IOAL /* \IOAL */
                        IOLO = Local2
                        Local3 = IOAH /* \IOAH */
                        IOHI = Local3
                        Local3 |= 0x04
                        IOEH = Local3
                        IOMH = Local3
                        IORL = IOLO /* \_SB_.PCI0.VT86.ECP1._CRS.IOLO */
                        IOEL = IOLO /* \_SB_.PCI0.VT86.ECP1._CRS.IOLO */
                        IOML = IOLO /* \_SB_.PCI0.VT86.ECP1._CRS.IOLO */
                        IORH = IOHI /* \_SB_.PCI0.VT86.ECP1._CRS.IOHI */
                        If ((IOLO == 0xBC))
                        {
                            IOLE = 0x04
                        }
                        Else
                        {
                            IOLE = 0x08
                        }

                        Local0 = One
                        Local5 = INTR /* \INTR */
                        IRQW = (Local0 << Local5)
                        Local0 = One
                        Local5 = DMCH /* \DMCH */
                        DMAC = (Local0 << Local5)
                        EXFG ()
                        Return (BUF6) /* \_SB_.PCI0.VT86.ECP1._CRS.BUF6 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0378,             // Range Minimum
                                0x0378,             // Range Maximum
                                0x00,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0778,             // Range Minimum
                                0x0778,             // Range Maximum
                                0x00,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0278,             // Range Minimum
                                0x0278,             // Range Maximum
                                0x00,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0678,             // Range Minimum
                                0x0678,             // Range Maximum
                                0x00,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,3}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03BC,             // Range Minimum
                                0x03BC,             // Range Maximum
                                0x00,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x07BC,             // Range Minimum
                                0x07BC,             // Range Maximum
                                0x00,               // Alignment
                                0x04,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {0,1,3}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateWordField (Arg0, 0x11, IRQW)
                        CreateByteField (Arg0, 0x14, DMAC)
                        ENFG ()
                        LDN = 0x03
                        ACTR = One
                        IOAL = IOLO /* \_SB_.PCI0.VT86.ECP1._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.VT86.ECP1._SRS.IOHI */
                        FindSetLeftBit (IRQW, Local0)
                        Local0 -= 0x01
                        INTR = Local0
                        FindSetLeftBit (DMAC, Local1)
                        Local0 = DMCH /* \DMCH */
                        DMCH = (Local1 - 0x01)
                        SLDM (Local0, DMCH)
                        EXFG ()
                        CKIO (IOAD, 0x02)
                    }
                }

                OperationRegion (KBCT, SystemIO, 0x60, 0x05)
                Field (KBCT, ByteAcc, NoLock, Preserve)
                {
                    P060,   8, 
                    Offset (0x04), 
                    P064,   8
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PS2F == 0x00))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF1, ResourceTemplate ()
                        {
                            IRQNoFlags ()
                                {12}
                        })
                        Name (BUF2, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {12}
                        })
                        If ((KBDI == 0x01))
                        {
                            If ((OSFL == 0x02))
                            {
                                Return (BUF1) /* \_SB_.PCI0.VT86.PS2M._CRS.BUF1 */
                            }

                            If ((OSFL == 0x01))
                            {
                                Return (BUF1) /* \_SB_.PCI0.VT86.PS2M._CRS.BUF1 */
                            }
                            Else
                            {
                                Return (BUF2) /* \_SB_.PCI0.VT86.PS2M._CRS.BUF2 */
                            }
                        }
                        Else
                        {
                            Return (BUF1) /* \_SB_.PCI0.VT86.PS2M._CRS.BUF1 */
                        }
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((KBDI == 0x01))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                }

                Device (PSMR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((KBDI == 0x00))
                        {
                            Return (0x00)
                        }

                        If ((PS2F == 0x00))
                        {
                            If ((OSFL == 0x02))
                            {
                                Return (0x0F)
                            }

                            If ((OSFL == 0x01))
                            {
                                Return (0x0F)
                            }

                            Return (0x00)
                        }

                        Return (0x00)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Method (PS2W, 0, NotSerialized)
                {
                    ENFG ()
                    Local0 = GSRG (0x07)
                    SSRG (0x07, 0x04)
                    Local1 = GSRG (0xF1)
                    If ((Local1 & 0x10))
                    {
                        Notify (\_SB.PCI0.VT86.PS2M, 0x02) // Device Wake
                    }

                    If ((Local1 & 0x08))
                    {
                        Notify (\_SB.PCI0.VT86.PS2K, 0x02) // Device Wake
                    }

                    SSRG (0xF1, 0xFF)
                    SSRG (0x07, Local0)
                    EXFG ()
                }

                Method (\_SB.PCI0.VT86.PS2M._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        WAKF |= 0x02
                    }
                    Else
                    {
                        WAKF &= ~0x02
                    }
                }

                Method (\_SB.PCI0.VT86.PS2K._PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        WAKF |= 0x01
                    }
                    Else
                    {
                        WAKF &= ~0x01
                    }
                }

                Device (MIDI)
                {
                    Name (_HID, EisaId ("PNPB006"))  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = 0x08
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }

                        EXFG ()
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x08
                        ACTR = Zero
                        EXFG ()
                        DISD (0x05)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF1, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                _Y0D)
                            IRQNoFlags (_Y0E)
                                {}
                        })
                        CreateByteField (BUF1, \_SB.PCI0.VT86.MIDI._CRS._Y0D._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF1, 0x03, IOHI)
                        CreateByteField (BUF1, \_SB.PCI0.VT86.MIDI._CRS._Y0D._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF1, 0x05, IORH)
                        CreateWordField (BUF1, \_SB.PCI0.VT86.MIDI._CRS._Y0E._INT, IRQW)  // _INT: Interrupts
                        ENFG ()
                        LDN = 0x08
                        IOLO = IOAL /* \IOAL */
                        IORL = IOAL /* \IOAL */
                        IOHI = IOAH /* \IOAH */
                        IORH = IOAH /* \IOAH */
                        Local0 = One
                        IRQW = (Local0 << INTR) /* \INTR */
                        EXFG ()
                        Return (BUF1) /* \_SB_.PCI0.VT86.MIDI._CRS.BUF1 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0330,             // Range Minimum
                                0x0330,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0300,             // Range Minimum
                                0x0300,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        CreateWordField (Arg0, 0x09, IRQW)
                        ENFG ()
                        LDN = 0x08
                        ACTR = One
                        IOAL = IOLO /* \_SB_.PCI0.VT86.MIDI._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.VT86.MIDI._SRS.IOHI */
                        FindSetRightBit (IRQW, Local0)
                        INTR = (Local0 - 0x01)
                        EXFG ()
                        CKIO (IOAD, 0x05)
                    }
                }

                Device (GAME)
                {
                    Name (_HID, EisaId ("PNPB02F"))  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ENFG ()
                        LDN = 0x09
                        If (ACTR)
                        {
                            EXFG ()
                            Return (0x0F)
                        }
                        ElseIf ((IOAH || IOAL))
                        {
                            EXFG ()
                            Return (0x0D)
                        }
                        Else
                        {
                            EXFG ()
                            Return (0x00)
                        }

                        EXFG ()
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG ()
                        LDN = 0x09
                        ACTR = Zero
                        EXFG ()
                        DISD (0x04)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BUF1, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                _Y0F)
                        })
                        CreateByteField (BUF1, \_SB.PCI0.VT86.GAME._CRS._Y0F._MIN, IOLO)  // _MIN: Minimum Base Address
                        CreateByteField (BUF1, 0x03, IOHI)
                        CreateByteField (BUF1, \_SB.PCI0.VT86.GAME._CRS._Y0F._MAX, IORL)  // _MAX: Maximum Base Address
                        CreateByteField (BUF1, 0x05, IORH)
                        ENFG ()
                        LDN = 0x09
                        IOLO = IOAL /* \IOAL */
                        IORL = IOAL /* \IOAL */
                        IOHI = IOAH /* \IOAH */
                        IORH = IOAH /* \IOAH */
                        EXFG ()
                        Return (BUF1) /* \_SB_.PCI0.VT86.GAME._CRS.BUF1 */
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0201,             // Range Minimum
                                0x0201,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x0209,             // Range Minimum
                                0x0209,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                        }
                        EndDependentFn ()
                    })
                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateByteField (Arg0, 0x02, IOLO)
                        CreateByteField (Arg0, 0x03, IOHI)
                        CreateWordField (Arg0, 0x02, IOAD)
                        ENFG ()
                        LDN = 0x09
                        ACTR = One
                        IOAL = IOLO /* \_SB_.PCI0.VT86.GAME._SRS.IOLO */
                        IOAH = IOHI /* \_SB_.PCI0.VT86.GAME._SRS.IOHI */
                        EXFG ()
                        CKIO (IOAD, 0x04)
                    }
                }

                Method (\_SB.PCI0.VT86.UAR1._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x03, 
                        0x05
                    })
                }

                Method (\_SB.PCI0.VT86.PS2K._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x10, 
                        0x04
                    })
                }

                Method (\_SB.PCI0.VT86.PS2M._PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (Package (0x02)
                    {
                        0x10, 
                        0x04
                    })
                }

                OperationRegion (PIO1, PCI_Config, 0x74, 0x01)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.PIO1, ByteAcc, NoLock, Preserve)
                    {
                            ,   2, 
                        HPTF,   1, 
                        Offset (0x01)
                    }
                }

                OperationRegion (PIRQ, PCI_Config, 0x7C, 0x0C)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.PIRQ, AnyAcc, NoLock, Preserve)
                    {
                        INTA,   4, 
                        INTB,   4, 
                        INTC,   4, 
                        INTD,   4, 
                        PCEA,   4, 
                        PCEB,   4, 
                        PCEC,   4, 
                        PCED,   4, 
                        SCII,   4, 
                        TCOI,   4, 
                        INTF,   4, 
                        INTQ,   4, 
                        INTU,   4, 
                        INTS,   4, 
                        IS0P,   4, 
                        ITID,   4, 
                        INTG,   4, 
                        INTH,   4, 
                        INTJ,   4, 
                        INTK,   4, 
                        INTL,   4, 
                        INTM,   4, 
                        INTN,   4
                    }
                }

                OperationRegion (LPIO, PCI_Config, 0xA0, 0x18)
                Scope (\)
                {
                    Field (\_SB.PCI0.VT86.LPIO, ByteAcc, NoLock, Preserve)
                    {
                        UAIO,   8, 
                        SNDD,   4, 
                        MIDD,   4, 
                        MSSD,   4, 
                        FDCD,   2, 
                        Offset (0x03), 
                        PRIO,   3, 
                            ,   1, 
                        GEN1,   1, 
                        GEN2,   1, 
                        GEN3,   1, 
                        GEN4,   1, 
                        GAM1,   8, 
                        GAM2,   8
                    }

                    OperationRegion (RTC2, SystemIO, 0x72, 0x02)
                    Field (RTC2, ByteAcc, NoLock, Preserve)
                    {
                        CM2I,   8, 
                        CM2D,   8
                    }

                    IndexField (CM2I, CM2D, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0xCC), 
                        UA1D,   8
                    }

                    Name (UARA, 0x00)
                    Name (UARB, 0x00)
                    Method (DISD, 1, NotSerialized)
                    {
                        If ((Arg0 == 0x00))
                        {
                            Local0 = UARA /* \UARA */
                            Local0 ^= 0xFF
                            UAIO &= Local0
                        }

                        If ((Arg0 == 0x01))
                        {
                            Local0 = UARB /* \UARB */
                            Local0 ^= 0xFF
                            UAIO &= Local0
                        }

                        If ((Arg0 == 0x02))
                        {
                            PRIO = 0x00
                        }

                        If ((Arg0 == 0x03))
                        {
                            FDCD = 0x00
                        }

                        If ((Arg0 == 0x04))
                        {
                            GAM1 = 0x00
                            GAM2 = 0x00
                        }

                        If ((Arg0 == 0x05))
                        {
                            MIDD = 0x00
                        }
                    }

                    Method (CKIO, 2, NotSerialized)
                    {
                        If ((Arg1 == 0x00))
                        {
                            Local0 = (UARA | UARB) /* \UARB */
                            UAIO &= Local0
                            Local0 = UARA /* \UARA */
                            Local0 ^= 0xFF
                            UAIO &= Local0
                            If ((Arg0 == 0x03F8))
                            {
                                Local0 = 0x01
                            }

                            If ((Arg0 == 0x02F8))
                            {
                                Local0 = 0x02
                            }

                            If ((Arg0 == 0x02E8))
                            {
                                Local0 = 0x20
                            }

                            If ((Arg0 == 0x03E8))
                            {
                                Local0 = 0x80
                            }

                            UAIO |= Local0
                            UARA = Local0
                        }

                        If ((Arg1 == 0x01))
                        {
                            Local0 = (UARA | UARB) /* \UARB */
                            UAIO &= Local0
                            Local0 = UARB /* \UARB */
                            Local0 ^= 0xFF
                            UAIO &= Local0
                            If ((Arg0 == 0x03F8))
                            {
                                Local0 = 0x01
                            }

                            If ((Arg0 == 0x02F8))
                            {
                                Local0 = 0x02
                            }

                            If ((Arg0 == 0x02E8))
                            {
                                Local0 = 0x20
                            }

                            If ((Arg0 == 0x03E8))
                            {
                                Local0 = 0x80
                            }

                            UAIO |= Local0
                            UARB = Local0
                        }

                        If ((Arg1 == 0x02))
                        {
                            If ((Arg0 == 0x0378))
                            {
                                PRIO = 0x00
                                PRIO |= 0x01
                            }

                            If ((Arg0 == 0x0278))
                            {
                                PRIO = 0x00
                                PRIO |= 0x02
                            }

                            If ((Arg0 == 0x03BC))
                            {
                                PRIO = 0x00
                                PRIO |= 0x04
                            }
                        }

                        If ((Arg1 == 0x03))
                        {
                            FDCD |= 0x01
                        }

                        If ((Arg1 == 0x04))
                        {
                            GAM1 = 0x00
                            GAM2 = 0x00
                            If ((Arg0 == 0x0201))
                            {
                                GAM1 |= 0x02
                            }

                            If ((Arg0 == 0x0209))
                            {
                                GAM2 |= 0x02
                            }
                        }

                        If ((Arg1 == 0x05))
                        {
                            MIDD = 0x00
                            If ((Arg0 == 0x0300))
                            {
                                MIDD |= 0x01
                            }

                            If ((Arg0 == 0x0330))
                            {
                                MIDD |= 0x08
                            }
                        }
                    }

                    Method (SLDM, 2, NotSerialized)
                    {
                    }

                    Method (CLSU, 1, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, UARO)
                        If ((UARO == 0x03F8))
                        {
                            UAIO &= 0xFE
                        }

                        If ((UARO == 0x02F8))
                        {
                            UAIO &= 0xFD
                        }

                        If ((UARO == 0x02E8))
                        {
                            UAIO &= 0xBF
                        }

                        If ((UARO == 0x03E8))
                        {
                            UAIO &= 0x7F
                        }
                    }
                }
            }

            Device (USB0)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    If ((OSFL == 0x02))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (0x03)
                    }
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
            }

            Device (USB2)
            {
                Name (_ADR, 0x000B0001)  // _ADR: Address
                OperationRegion (P020, PCI_Config, 0x49, 0x01)
                Field (P020, AnyAcc, NoLock, Preserve)
                {
                    U0WK,   1
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U0WK = 0x01
                    }
                    Else
                    {
                        U0WK = 0x00
                    }
                }

                Method (_S1D, 0, NotSerialized)  // _S1D: S1 Device State
                {
                    Return (0x01)
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x01)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x04
                })
            }

            Device (AZAD)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x15, 
                    0x05
                })
            }

            Device (MMAC)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0B, 
                    0x05
                })
            }

            Device (MACI)
            {
                Name (_ADR, 0x00100002)  // _ADR: Address
            }

            Device (MMCI)
            {
                Name (_ADR, 0x00100003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Device (NVRB)
            {
                Name (_HID, "NVRAIDBUS")  // _HID: Hardware ID
                OperationRegion (NVRD, SystemMemory, 0x000FFF38, 0x02)
                Field (NVRD, ByteAcc, NoLock, Preserve)
                {
                    R_ST,   1, 
                        ,   3, 
                    R_P0,   4, 
                    R_S0,   4, 
                    R_S1,   4
                }

                Name (FNVR, 0xFF)
                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    FNVR = 0x00
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((R_ST == 0x01))
                    {
                        If ((FNVR == 0xFF))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x04D2,             // Range Minimum
                        0x04D2,             // Range Maximum
                        0x01,               // Alignment
                        0x01,               // Length
                        )
                })
                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    FNVR = 0xFF
                }
            }

            OperationRegion (SM00, SystemIO, \_SB.PCI0.SMB0.SMBB (), 0x06)
            Field (SM00, ByteAcc, NoLock, Preserve)
            {
                CTLR,   8, 
                HSTS,   8, 
                ADDR,   8, 
                CMDR,   8, 
                DAT0,   8, 
                DAT1,   8
            }

            Method (SWFS, 0, NotSerialized)
            {
                Local0 = (HSTS & 0x80)
                While ((Local0 == Zero))
                {
                    Stall (0x01)
                    Local0 = (HSTS & 0x80)
                }
            }

            Method (SRBY, 2, NotSerialized)
            {
                ADDR = Arg0
                CMDR = Arg1
                CTLR = 0x04
                SWFS ()
            }

            Method (WBYT, 3, NotSerialized)
            {
                ADDR = Arg0
                CMDR = Arg1
                DAT0 = Arg2
                HSTS = 0xFF
                CTLR = 0x06
                SWFS ()
            }

            Method (WWRD, 4, NotSerialized)
            {
                ADDR = Arg0
                CMDR = Arg1
                DAT0 = Arg2
                DAT1 = Arg3
                CTLR = 0x08
                SWFS ()
            }

            Method (RBYT, 2, NotSerialized)
            {
                ADDR = Arg0
                CMDR = Arg1
                CTLR = 0x07
                SWFS ()
                Return (DAT0) /* \_SB_.PCI0.DAT0 */
            }

            Method (RWRD, 2, NotSerialized)
            {
                ADDR = Arg0
                CMDR = Arg1
                CTLR = 0x09
                SWFS ()
                Local0 = DAT0 /* \_SB_.PCI0.DAT0 */
                Local1 = (DAT1 << 0x08)
                Local2 = (Local0 | Local1)
                Return (Local2)
            }

            Device (ASOC)
            {
                Name (_HID, "ATK0110")  // _HID: Hardware ID
                Name (_UID, 0x01010110)  // _UID: Unique ID
                Name (MBIF, Package (0x08)
                {
                    0x01, 
                    "M2NPV-VM", 
                    0x01010101, 
                    0x01010101, 
                    0xC0010002, 
                    0x01, 
                    0x00, 
                    0x00
                })
                Name (VBUF, Package (0x05)
                {
                    0x04, 
                    VCRE, 
                    V333, 
                    V500, 
                    V120
                })
                Name (VCRE, Package (0x05)
                {
                    0x06020000, 
                    "Vcore Voltage", 
                    0x0352, 
                    0x0640, 
                    0x01
                })
                Name (V333, Package (0x05)
                {
                    0x06020001, 
                    " +3.3 Voltage", 
                    0x0BB8, 
                    0x0E10, 
                    0x01
                })
                Name (V500, Package (0x05)
                {
                    0x06020002, 
                    " +5.0 Voltage", 
                    0x1194, 
                    0x157C, 
                    0x01
                })
                Name (V120, Package (0x05)
                {
                    0x06020003, 
                    "+12.0 Voltage", 
                    0x2BC0, 
                    0x3390, 
                    0x01
                })
                Name (TBUF, Package (0x03)
                {
                    0x02, 
                    CPUT, 
                    MBTP
                })
                Name (CPUT, Package (0x05)
                {
                    0x06030000, 
                    "CPU Temperature", 
                    0x0384, 
                    0x04E2, 
                    0x00010001
                })
                Name (MBTP, Package (0x05)
                {
                    0x06030001, 
                    "MB Temperature", 
                    0x01C2, 
                    0x0384, 
                    0x00010001
                })
                Name (FBUF, Package (0x06)
                {
                    0x03, 
                    CPUF, 
                    CHAF, 
                    PWRF, 
                    CHPF, 
                    CH2F
                })
                Name (CPUF, Package (0x05)
                {
                    0x06040000, 
                    "CPU FAN Speed", 
                    0x00, 
                    0x0708, 
                    0x00010001
                })
                Name (CHAF, Package (0x05)
                {
                    0x06040001, 
                    "CHASSIS FAN Speed", 
                    0x00, 
                    0x0708, 
                    0x01
                })
                Name (PWRF, Package (0x05)
                {
                    0x06040002, 
                    "POWER FAN Speed", 
                    0x00, 
                    0x0708, 
                    0x00
                })
                Name (CHPF, Package (0x05)
                {
                    0x06040005, 
                    "CHIPSET FAN Speed", 
                    0x00, 
                    0x0708, 
                    0x00
                })
                Name (CH2F, Package (0x05)
                {
                    0x06040006, 
                    "CHASSIS2 FAN Speed", 
                    0x00, 
                    0x0708, 
                    0x00
                })
                Name (QFAN, Package (0x05)
                {
                    0x04060003, 
                    "CPU Q-Fan Control", 
                    0x00, 
                    0x01, 
                    0x01
                })
                Name (QFRO, Package (0x05)
                {
                    0x04050004, 
                    "CPU Q-Fan Ratio", 
                    0x3C, 
                    0x5A, 
                    0x00
                })
                Name (QFTP, Package (0x05)
                {
                    0x04030005, 
                    "CPU Target Temperature", 
                    0x33, 
                    0x51, 
                    0x00010001
                })
                Name (QCFN, Package (0x05)
                {
                    0x04060006, 
                    "Chassis Q-Fan Control", 
                    0x00, 
                    0x01, 
                    0x00
                })
                Name (QFCR, Package (0x05)
                {
                    0x04050007, 
                    "Chassis Q-Fan Ratio", 
                    0x38, 
                    0x64, 
                    0x00
                })
                OperationRegion (HWRE, SystemIO, 0x0295, 0x02)
                Field (HWRE, ByteAcc, NoLock, Preserve)
                {
                    HIDX,   8, 
                    HDAT,   8
                }

                IndexField (HIDX, HDAT, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0B), 
                    FD11,   3, 
                    FD12,   3, 
                    FD13,   1, 
                    Offset (0x0C), 
                    Offset (0x0D), 
                    FAN1,   8, 
                    FAN2,   8, 
                    FAN3,   8, 
                    Offset (0x18), 
                    FEN1,   8, 
                    FEN2,   8, 
                    FEN3,   8, 
                    Offset (0x20), 
                    VCOR,   8, 
                    V33V,   8, 
                    Offset (0x23), 
                    V50V,   8, 
                    V12V,   8, 
                    Offset (0x29), 
                    TSR1,   8, 
                    MBTE,   8
                }

                Method (ASIF, 0, NotSerialized)
                {
                    Return (MBIF) /* \_SB_.PCI0.ASOC.MBIF */
                }

                Method (VSIF, 0, NotSerialized)
                {
                    Return (VBUF) /* \_SB_.PCI0.ASOC.VBUF */
                }

                Method (RVLT, 1, NotSerialized)
                {
                    Local0 = DerefOf (VCRE [0x00])
                    If ((Arg0 == Local0))
                    {
                        Local0 = VCOR /* \_SB_.PCI0.ASOC.VCOR */
                        Local1 = 0x00
                        While ((Local0 == 0xFF))
                        {
                            Local0 = VCOR /* \_SB_.PCI0.ASOC.VCOR */
                            If ((Local1 == 0x000186A0))
                            {
                                Break
                            }

                            Local1 += 0x01
                        }

                        Local0 *= 0x10
                        Local1 = (0x0F * 0x0A)
                        Local0 += Local1
                        Return (Local0)
                    }

                    Local0 = DerefOf (V333 [0x00])
                    If ((Arg0 == Local0))
                    {
                        Local0 = V33V /* \_SB_.PCI0.ASOC.V33V */
                        Local1 = 0x00
                        While ((Local0 == 0xFF))
                        {
                            Local0 = V33V /* \_SB_.PCI0.ASOC.V33V */
                            If ((Local1 == 0x000186A0))
                            {
                                Break
                            }

                            Local1 += 0x01
                        }

                        Local0 *= 0x10
                        Return (Local0)
                    }

                    Local0 = DerefOf (V500 [0x00])
                    If ((Arg0 == Local0))
                    {
                        Local0 = V50V /* \_SB_.PCI0.ASOC.V50V */
                        Local1 = 0x00
                        While ((Local0 == 0xFF))
                        {
                            Local0 = V50V /* \_SB_.PCI0.ASOC.V50V */
                            If ((Local1 == 0x000186A0))
                            {
                                Break
                            }

                            Local1 += 0x01
                        }

                        Local0 *= 0x10
                        Local1 = 0x22
                        Local2 = 0x32
                        Local1 += Local2
                        Local0 *= Local1
                        Divide (Local0, Local2, Local3, Local0)
                        Local1 = (0x14 * 0x0A)
                        Local0 += Local1
                        Return (Local0)
                    }

                    Local0 = DerefOf (V120 [0x00])
                    If ((Arg0 == Local0))
                    {
                        Local0 = V12V /* \_SB_.PCI0.ASOC.V12V */
                        Local1 = 0x00
                        While ((Local0 == 0xFF))
                        {
                            Local0 = V12V /* \_SB_.PCI0.ASOC.V12V */
                            If ((Local1 == 0x000186A0))
                            {
                                Break
                            }

                            Local1 += 0x01
                        }

                        Local0 *= 0x10
                        Local1 = 0x1E
                        Local2 = 0x0A
                        Local1 += Local2
                        Local0 *= Local1
                        Divide (Local0, Local2, Local3, Local0)
                        Local1 = (0x28 * 0x0A)
                        Local0 += Local1
                        Return (Local0)
                    }
                }

                Method (SVLT, 1, NotSerialized)
                {
                    Local0 = DerefOf (Arg0 [0x00])
                    Local0 &= 0x0F
                    Local1 = DerefOf (VBUF [0x00])
                    If ((Local0 >= Local1))
                    {
                        Return (0x01)
                    }

                    Local0 += 0x01
                    Local1 = DerefOf (Arg0 [0x01])
                    Local2 = DerefOf (Arg0 [0x02])
                    Local3 = DerefOf (Arg0 [0x03])
                    Local4 = DerefOf (Arg0 [0x04])
                    DerefOf (VBUF [Local0]) [0x01] = Local1
                    DerefOf (VBUF [Local0]) [0x02] = Local2
                    DerefOf (VBUF [Local0]) [0x03] = Local3
                    DerefOf (VBUF [Local0]) [0x04] = Local4
                    Return (0x00)
                }

                Method (TSIF, 0, NotSerialized)
                {
                    Return (TBUF) /* \_SB_.PCI0.ASOC.TBUF */
                }

                Method (RTMP, 1, NotSerialized)
                {
                    Local0 = DerefOf (CPUT [0x00])
                    If ((Arg0 == Local0))
                    {
                        Local0 = TSR1 /* \_SB_.PCI0.ASOC.TSR1 */
                        Local1 = 0x00
                        While ((Local0 == 0x80))
                        {
                            Local0 = TSR1 /* \_SB_.PCI0.ASOC.TSR1 */
                            If ((Local1 == 0x000186A0))
                            {
                                Break
                            }

                            Local1 += 0x01
                        }

                        Local0 *= 0x0A
                        Return (Local0)
                    }

                    Local0 = DerefOf (MBTP [0x00])
                    If ((Arg0 == Local0))
                    {
                        Local0 = MBTE /* \_SB_.PCI0.ASOC.MBTE */
                        Local1 = 0x00
                        While ((Local0 == 0x80))
                        {
                            Local0 = MBTE /* \_SB_.PCI0.ASOC.MBTE */
                            If ((Local1 == 0x000186A0))
                            {
                                Break
                            }

                            Local1 += 0x01
                        }

                        Local0 *= 0x0A
                        Return (Local0)
                    }
                }

                Method (STMP, 1, NotSerialized)
                {
                    Local0 = DerefOf (Arg0 [0x00])
                    Local0 &= 0x0F
                    Local1 = DerefOf (TBUF [0x00])
                    If ((Local0 >= Local1))
                    {
                        Return (0x01)
                    }

                    Local0 += 0x01
                    Local1 = DerefOf (Arg0 [0x01])
                    Local2 = DerefOf (Arg0 [0x02])
                    Local3 = DerefOf (Arg0 [0x03])
                    Local4 = DerefOf (Arg0 [0x04])
                    DerefOf (TBUF [Local0]) [0x01] = Local1
                    DerefOf (TBUF [Local0]) [0x02] = Local2
                    DerefOf (TBUF [Local0]) [0x03] = Local3
                    DerefOf (TBUF [Local0]) [0x04] = Local4
                    Return (0x00)
                }

                Method (FSIF, 0, NotSerialized)
                {
                    Return (FBUF) /* \_SB_.PCI0.ASOC.FBUF */
                }

                Method (RFAN, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = DerefOf (CPUF [0x00])
                    If ((Arg0 == Local1))
                    {
                        Local0 = FANC (FAN1, FEN1)
                    }

                    Local1 = DerefOf (CHAF [0x00])
                    If ((Arg0 == Local1))
                    {
                        Local0 = FANC (FAN2, FEN2)
                    }

                    Return (Local0)
                }

                Method (FANC, 2, NotSerialized)
                {
                    Local0 = Arg0
                    Local1 = Arg1
                    Local1 *= 0x0100
                    Local0 += Local1
                    If (((Local0 < 0xFFFF) && (Local0 > 0x0A)))
                    {
                        Divide (0x000A4CB8, Local0, Local1, Local0)
                    }
                    Else
                    {
                        Local0 = 0x00
                    }

                    Return (Local0)
                }

                Method (SFAN, 1, NotSerialized)
                {
                    Local0 = DerefOf (Arg0 [0x00])
                    Local0 &= 0x0F
                    Local1 = DerefOf (FBUF [0x00])
                    If ((Local0 >= Local1))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Local0 += 0x01
                        Local1 = DerefOf (Arg0 [0x01])
                        Local2 = DerefOf (Arg0 [0x02])
                        Local3 = DerefOf (Arg0 [0x03])
                        Local4 = DerefOf (Arg0 [0x04])
                        DerefOf (FBUF [Local0]) [0x01] = Local1
                        DerefOf (FBUF [Local0]) [0x02] = Local2
                        DerefOf (FBUF [Local0]) [0x03] = Local3
                        DerefOf (FBUF [Local0]) [0x04] = Local4
                        Return (0x01)
                    }
                }

                Method (SFAS, 1, NotSerialized)
                {
                    Local0 = DerefOf (Arg0 [0x00])
                    Local0 &= 0x0F
                    Local1 = DerefOf (FBUF [0x00])
                    If ((Local0 >= Local1))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x01)
                    }
                }

                Method (OCIF, 0, NotSerialized)
                {
                    If ((MMCM == 0x00))
                    {
                        CPUM [0x03] = 0x00
                    }
                    Else
                    {
                        OC02 [0x03] = MMCM /* \_SB_.MMCM */
                        Local0 = MMCM /* \_SB_.MMCM */
                        Local1 = DerefOf (OC02 [0x02])
                        Local0 -= Local1
                        Local0 *= 0x02
                        If ((REVG >= 0x01))
                        {
                            Divide (Local0, 0x0A, Local3, Local0)
                        }
                        Else
                        {
                            Divide (Local0, 0x14, Local3, Local0)
                        }

                        Local0++
                        OC02 [0x04] = Local0
                    }

                    Return (OBUF) /* \_SB_.PCI0.ASOC.OBUF */
                }

                Name (OC1F, 0x00)
                Name (OC2F, 0x00)
                Name (OC3F, 0x00)
                Name (OC4F, 0x00)
                Name (OC5F, 0x00)
                Name (OC6F, 0x00)
                Name (OC7F, 0x00)
                Name (OC8F, 0x00)
                Name (OC9F, 0x00)
                Name (OCAF, 0x00)
                Name (OCBF, 0x00)
                Name (OCCF, 0x00)
                Name (OCDF, 0x00)
                Name (OCEF, 0x00)
                Name (QFNF, 0x00)
                Name (QFPF, 0x00)
                Method (OCOP, 1, NotSerialized)
                {
                    Local1 = DerefOf (OC01 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC1F == 0x00))
                        {
                            Local0 = FSBF /* \_SB_.FSBF */
                            If ((Local0 < 0x64))
                            {
                                Local0 += 0xFF
                            }

                            Local1 = Local0
                            Local0 *= 0x64
                            CPUO [0x01] = Local0
                            Local1 -= 0xC8
                            CPUO [0x02] = Local1
                            SPRE (Arg0, Local1)
                            OC1F = 0x01
                        }

                        Return (CPUO) /* \_SB_.PCI0.ASOC.CPUO */
                    }

                    Local1 = DerefOf (OC02 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC2F == 0x00))
                        {
                            Local0 = MULF /* \_SB_.MULF */
                            CPUM [0x01] = Local0
                            CPUM [0x02] = Local0
                            SPRD (Arg0, MUCM)
                            SPRE (Arg0, Local0)
                            OC2F = 0x01
                        }

                        Return (CPUM) /* \_SB_.PCI0.ASOC.CPUM */
                    }

                    Local1 = DerefOf (OC0F [0x00])
                    If ((Arg0 == Local1))
                    {
                        Local0 = K8HT /* \_SB_.K8HT */
                        Local1 = 0x04
                        If ((Local0 == 0x06))
                        {
                            Local1 = 0x05
                        }

                        If ((Local0 == 0x05))
                        {
                            Local1 = 0x04
                        }

                        If ((Local0 == 0x04))
                        {
                            Local1 = 0x03
                        }

                        If ((Local0 == 0x02))
                        {
                            Local1 = 0x02
                        }

                        If ((Local0 == 0x00))
                        {
                            Local1 = 0x01
                        }

                        HTFQ [0x02] = Local1
                        Return (HTFQ) /* \_SB_.PCI0.ASOC.HTFQ */
                    }

                    Local1 = DerefOf (OC03 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC3F == 0x00))
                        {
                            OC3F = 0x01
                        }

                        Return (MEMO) /* \_SB_.PCI0.ASOC.MEMO */
                    }

                    Local1 = DerefOf (OC04 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC4F == 0x00))
                        {
                            OC4F = 0x01
                        }

                        Return (PCIO) /* \_SB_.PCI0.ASOC.PCIO */
                    }

                    Local1 = DerefOf (OC05 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC5F == 0x00))
                        {
                            OC5F = 0x01
                        }

                        Return (OCPO) /* \_SB_.PCI0.ASOC.OCPO */
                    }

                    Local1 = DerefOf (OC06 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC6F == 0x00))
                        {
                            Local0 = NOS1 /* \_SB_.NOS1 */
                            AOCO [0x02] = Local0
                            SPRE (Arg0, Local0)
                            OC6F = 0x01
                        }

                        Return (AOCO) /* \_SB_.PCI0.ASOC.AOCO */
                    }

                    Local1 = DerefOf (OC07 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC7F == 0x00))
                        {
                            Local0 = NOS2 /* \_SB_.NOS2 */
                            ADCO [0x02] = Local0
                            SPRE (Arg0, Local0)
                            OC7F = 0x01
                        }

                        Return (ADCO) /* \_SB_.PCI0.ASOC.ADCO */
                    }

                    Local1 = DerefOf (OC08 [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OC8F == 0x00))
                        {
                            OC8F = 0x01
                        }

                        Return (FANB) /* \_SB_.PCI0.ASOC.FANB */
                    }

                    Local1 = DerefOf (OC0A [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OCAF == 0x00))
                        {
                            Local0 = DDRV /* \_SB_.DDRV */
                            RAMV [0x02] = Local0
                            SPRD (Arg0, DRVC)
                            SPRE (Arg0, Local0)
                            OCAF = 0x01
                        }

                        Return (RAMV) /* \_SB_.PCI0.ASOC.RAMV */
                    }

                    Local1 = DerefOf (OC0B [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OCBF == 0x00))
                        {
                            OCBF = 0x01
                        }

                        Return (PCIV) /* \_SB_.PCI0.ASOC.PCIV */
                    }

                    Local1 = DerefOf (OC0C [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OCCF == 0x00))
                        {
                            OCCF = 0x01
                        }

                        Return (PRHT) /* \_SB_.PCI0.ASOC.PRHT */
                    }

                    Local1 = DerefOf (OC0D [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((OCDF == 0x00))
                        {
                            AITM [0x02] = AITU /* \_SB_.AITU */
                            SPRE (Arg0, AITU)
                            OCDF = 0x01
                        }

                        Return (AITM) /* \_SB_.PCI0.ASOC.AITM */
                    }

                    Local1 = DerefOf (QFAN [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((QFNF == 0x00))
                        {
                            CQFN [0x02] = QFNE /* \_SB_.QFNE */
                            SPRE (Arg0, QFNE)
                            QFNF = 0x01
                        }

                        Return (CQFN) /* \_SB_.PCI0.ASOC.CQFN */
                    }

                    Local1 = DerefOf (QFTP [0x00])
                    If ((Arg0 == Local1))
                    {
                        If ((QFPF == 0x00))
                        {
                            QFNT [0x02] = QFTE /* \_SB_.QFTE */
                            SPRE (Arg0, QFTE)
                            QFPF = 0x01
                        }

                        Return (QFNT) /* \_SB_.PCI0.ASOC.QFNT */
                    }

                    Local1 = DerefOf (OC0G [0x00])
                    If ((Arg0 == Local1))
                    {
                        Local0 = CNQC /* \_SB_.CNQC */
                        If ((Local0 == 0x01))
                        {
                            CNQF [0x02] = 0x00
                        }
                        Else
                        {
                            CNQF [0x02] = 0x01
                        }

                        Return (CNQF) /* \_SB_.PCI0.ASOC.CNQF */
                    }
                }

                Method (PROC, 3, NotSerialized)
                {
                    If ((Arg2 == 0x00))
                    {
                        Local0 = DerefOf (OC02 [0x00])
                        If ((Arg0 == Local0))
                        {
                            If ((REVG == 0x02))
                            {
                                If ((Arg1 == MULF))
                                {
                                    Return (0x01)
                                }
                                Else
                                {
                                    MULF = Arg1
                                    Return (0x03)
                                }
                            }
                        }

                        Return (0x01)
                    }

                    If ((Arg2 == 0x01))
                    {
                        Local0 = DerefOf (OC0D [0x00])
                        If ((Arg0 == Local0))
                        {
                            If ((Arg1 == 0x00))
                            {
                                AITM [0x02] = 0x00
                            }

                            If ((Arg1 == 0x01))
                            {
                                STDF (0x01)
                                AITM [0x02] = 0x01
                            }

                            If ((Arg1 == 0x02))
                            {
                                STDF (0x02)
                                AITM [0x02] = 0x02
                            }

                            If ((Arg1 == 0x03))
                            {
                                AITM [0x02] = 0x03
                            }

                            If ((Arg1 == 0x04))
                            {
                                AITM [0x02] = 0x04
                            }
                        }

                        Local0 = DerefOf (OC01 [0x00])
                        If ((Arg0 == Local0))
                        {
                            AIP = Arg1
                            CPUO [0x02] = Arg1
                            AIP2 = 0x03
                            SCP = 0xB0
                        }

                        Local0 = DerefOf (OC05 [0x00])
                        If ((Arg0 == Local0))
                        {
                            AIP = Arg1
                            OCPO [0x02] = Arg1
                            If ((Arg1 == 0x00))
                            {
                                Local1 = 0x06
                            }
                            ElseIf ((Arg1 == 0x01))
                            {
                                Local1 = 0x0A
                            }
                            ElseIf ((Arg1 == 0x02))
                            {
                                Local1 = 0x10
                            }
                            ElseIf ((Arg1 == 0x03))
                            {
                                Local1 = 0x14
                            }
                            Else
                            {
                                Local1 = 0x00
                            }

                            CPUO [0x02] = Local1
                            AIP2 = 0x01
                            SCP = 0xB0
                        }

                        Local0 = DerefOf (OC06 [0x00])
                        If ((Arg0 == Local0))
                        {
                            AIP = 0x00
                            AIP2 = 0x03
                            SCP = 0xB0
                            CPUO [0x02] = 0x00
                            AIP = Arg1
                            AOCO [0x02] = Arg1
                            AIP2 = 0x02
                            SCP = 0xB0
                        }

                        Local0 = DerefOf (OC0A [0x00])
                        If ((Arg0 == Local0))
                        {
                            AIP = Arg1
                            RAMV [0x02] = Arg1
                            AIP2 = 0x05
                            SCP = 0xB0
                        }

                        Local0 = DerefOf (OC02 [0x00])
                        If ((Arg0 == Local0))
                        {
                            If ((MMCM != 0x00))
                            {
                                AIP = Arg1
                                CPUM [0x01] = Arg1
                                CPUM [0x02] = Arg1
                                AIP2 = 0x06
                                SCP = 0xB0
                            }
                        }

                        Local0 = DerefOf (QFAN [0x00])
                        If ((Arg0 == Local0))
                        {
                            AIP = Arg1
                            CQFN [0x02] = Arg1
                            AIP2 = 0x07
                            SCP = 0xB0
                        }

                        Local0 = DerefOf (QFTP [0x00])
                        If ((Arg0 == Local0))
                        {
                            AIP = Arg1
                            QFNT [0x02] = Arg1
                            AIP2 = 0x08
                            SCP = 0xB0
                        }

                        SPRE (Arg0, Arg1)
                        Return (0x01)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Method (STDF, 1, NotSerialized)
                {
                    AIP = 0x00
                    AIP2 = 0x03
                    SCP = 0xB0
                    CPUO [0x02] = 0x00
                    If ((MMCM != 0x00))
                    {
                        AIP = MUCM /* \_SB_.MUCM */
                        AIP2 = 0x06
                        SCP = 0xB0
                        CPUM [0x01] = MUCM /* \_SB_.MUCM */
                        CPUM [0x02] = MUCM /* \_SB_.MUCM */
                    }

                    AIP = DRVC /* \_SB_.DRVC */
                    AIP2 = 0x05
                    SCP = 0xB0
                    RAMV [0x02] = DRVC /* \_SB_.DRVC */
                    If ((Arg0 == 0x01))
                    {
                        AIP = 0x01
                        AIP2 = 0x09
                        SCP = 0xB0
                    }
                    Else
                    {
                        AIP = 0x02
                        AIP2 = 0x0A
                        SCP = 0xB0
                    }
                }

                Name (CQFN, Package (0x06)
                {
                    0x04060003, 
                    0x00, 
                    0x00, 
                    0x01, 
                    "Disabled", 
                    "Enabled"
                })
                Name (QFNR, Package (0x09)
                {
                    0x04050004, 
                    0x5A, 
                    0x00, 
                    0x01, 
                    "Auto", 
                    "90%", 
                    "80%", 
                    "70%", 
                    "60%"
                })
                Name (QFNT, Package (0x0F)
                {
                    0x04030005, 
                    0x42, 
                    0x05, 
                    0x01, 
                    "51", 
                    "54", 
                    "57", 
                    "60", 
                    "63", 
                    "66", 
                    "69", 
                    "72", 
                    "75", 
                    "78", 
                    "81"
                })
                Name (OC01, Package (0x06)
                {
                    0x01010000, 
                    "CPU FSB", 
                    0x4E20, 
                    0x9C40, 
                    0xC9, 
                    0x00010003
                })
                Name (OC02, Package (0x06)
                {
                    0x01060001, 
                    "CPU Multiplier", 
                    0x32, 
                    0x14, 
                    0x10, 
                    0x00010007
                })
                Name (OC0F, Package (0x06)
                {
                    0x01060002, 
                    "Hyper Transport Freq", 
                    0x01, 
                    0x05, 
                    0x05, 
                    0x00010003
                })
                Name (OC03, Package (0x06)
                {
                    0x02010002, 
                    "Memory Freq", 
                    0x00, 
                    0x00, 
                    0x04, 
                    0x00010003
                })
                Name (OC04, Package (0x06)
                {
                    0x07010003, 
                    "PCI Express", 
                    0x2710, 
                    0x332C, 
                    0x20, 
                    0x00
                })
                Name (OC05, Package (0x06)
                {
                    0x05050004, 
                    "OC Profile", 
                    0x69, 
                    0x82, 
                    0x05, 
                    0x00010003
                })
                Name (OC06, Package (0x06)
                {
                    0x08050005, 
                    "Turbo N.O.S.", 
                    0x67, 
                    0x6E, 
                    0x04, 
                    0x00
                })
                Name (OC07, Package (0x06)
                {
                    0x08050006, 
                    "Twin Turbo N.O.S.", 
                    0x00, 
                    0x01, 
                    0x02, 
                    0x00
                })
                Name (OC08, Package (0x06)
                {
                    0x04040007, 
                    "FAN-Boost", 
                    0x2EE0, 
                    0x36B0, 
                    0x02, 
                    0x00010001
                })
                Name (OC09, Package (0x06)
                {
                    0x01020008, 
                    "CPU Voltage", 
                    0x0320, 
                    0x060E, 
                    0x1E, 
                    0x00
                })
                Name (OC0A, Package (0x06)
                {
                    0x02020009, 
                    "DRAM Voltage", 
                    0x0708, 
                    0x076C, 
                    0x02, 
                    0x00
                })
                Name (OC0B, Package (0x06)
                {
                    0x0702000A, 
                    "PCIE Voltage", 
                    0x0D05, 
                    0x115C, 
                    0x03, 
                    0x00
                })
                Name (OC0C, Package (0x06)
                {
                    0x0106000B, 
                    "CPU HT", 
                    0x00, 
                    0x01, 
                    0x02, 
                    0x00010002
                })
                Name (OC0G, Package (0x06)
                {
                    0x0106000C, 
                    "CoolnQuietFlag", 
                    0x00, 
                    0x01, 
                    0x02, 
                    0x00010001
                })
                Name (OC0D, Package (0x06)
                {
                    0x0906000C, 
                    "AI Overclock Tuner", 
                    0x00, 
                    0x04, 
                    0x05, 
                    0x00010003
                })
                Name (OBUF, Package (0x0D)
                {
                    OC01, 
                    OC02, 
                    OC03, 
                    OC04, 
                    OC05, 
                    OC06, 
                    OC07, 
                    OC08, 
                    OC09, 
                    OC0A, 
                    OC0B, 
                    OC0C, 
                    OC0D
                })
                Name (CPUO, Package (0x04)
                {
                    0x01010000, 
                    0x4E20, 
                    0x64, 
                    0x01
                })
                Name (CPUM, Package (0x04)
                {
                    0x01060001, 
                    0x0E, 
                    0x00, 
                    0x01
                })
                Name (HTFQ, Package (0x04)
                {
                    0x01060002, 
                    0x04, 
                    0x03, 
                    0x01
                })
                Name (MEMO, Package (0x09)
                {
                    0x02010002, 
                    0xD034, 
                    0x04, 
                    0x01, 
                    "Auto", 
                    "1:3", 
                    "1:4", 
                    "1:2", 
                    "3:8"
                })
                Name (PCIO, Package (0x04)
                {
                    0x07010003, 
                    0x2710, 
                    0x00, 
                    0x01
                })
                Name (OCPO, Package (0x08)
                {
                    0x05050004, 
                    0x64, 
                    0x00, 
                    0x01, 
                    "103%", 
                    "105%", 
                    "108%", 
                    "110%"
                })
                Name (AOCO, Package (0x09)
                {
                    0x08050005, 
                    0x64, 
                    0x00, 
                    0x00, 
                    "Disabled", 
                    "103%", 
                    "105%", 
                    "108%", 
                    "110%"
                })
                Name (ADCO, Package (0x06)
                {
                    0x08050006, 
                    0x00, 
                    0x00, 
                    0x00, 
                    "Disabled", 
                    "Enabled"
                })
                Name (FANB, Package (0x06)
                {
                    0x04040007, 
                    0x00, 
                    0x00, 
                    0x00, 
                    "Disabled", 
                    "Enabled"
                })
                Name (CPUV, Package (0x04)
                {
                    0x01020008, 
                    0x073A, 
                    0x01, 
                    0x01
                })
                Name (RAMV, Package (0x04)
                {
                    0x02020009, 
                    0x0A8C, 
                    0x01, 
                    0x01
                })
                Name (PCIV, Package (0x04)
                {
                    0x0702000A, 
                    0x0640, 
                    0x00, 
                    0x00
                })
                Name (PRHT, Package (0x04)
                {
                    0x0106000B, 
                    0x01, 
                    0x00, 
                    0x00
                })
                Name (CNQF, Package (0x04)
                {
                    0x0106000C, 
                    0x00, 
                    0x00, 
                    0x01
                })
                Name (AITM, Package (0x09)
                {
                    0x0906000C, 
                    0x00, 
                    0x00, 
                    0x01, 
                    "Manual", 
                    "Auto", 
                    "Standard", 
                    "OC Profile", 
                    "AI NOS"
                })
                Name (PREB, Package (0x1C)
                {
                    0x02010002, 
                    0x00, 
                    0x07010003, 
                    0x00, 
                    0x08050005, 
                    0x00, 
                    0x08050006, 
                    0x00, 
                    0x04040007, 
                    0x00, 
                    0x01020008, 
                    0x00, 
                    0x02020009, 
                    0x00, 
                    0x0702000A, 
                    0x00, 
                    0x0106000B, 
                    0x00, 
                    0x0906000C, 
                    0x00, 
                    0x04060003, 
                    0x00, 
                    0x04030005, 
                    0x00, 
                    0x01010000, 
                    0x00, 
                    0x01060001, 
                    0x00
                })
                Name (PRED, Package (0x0A)
                {
                    0x01010000, 
                    0x00, 
                    0x01060001, 
                    0x00, 
                    0x01020008, 
                    0x00, 
                    0x02020009, 
                    0x00, 
                    0x0702000A, 
                    0x00
                })
                Method (SPRD, 2, NotSerialized)
                {
                    Local0 = 0x00
                    Local2 = 0x01
                    While (Local2)
                    {
                        Local1 = (Local0 * 0x02)
                        If ((DerefOf (PRED [Local1]) == Arg0))
                        {
                            Local1 += 0x01
                            PRED [Local1] = Arg1
                            Local2 = 0x00
                        }

                        Local0++
                        If ((Local0 == 0x10))
                        {
                            Local2 = 0x00
                        }
                    }
                }

                Method (GPRE, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Return (PREB) /* \_SB_.PCI0.ASOC.PREB */
                    }
                    Else
                    {
                        Return (PRED) /* \_SB_.PCI0.ASOC.PRED */
                    }
                }

                Method (SPRE, 2, NotSerialized)
                {
                    Local0 = 0x00
                    Local2 = 0x01
                    While (Local2)
                    {
                        Local1 = (Local0 * 0x02)
                        If ((DerefOf (PREB [Local1]) == Arg0))
                        {
                            Local1 += 0x01
                            PREB [Local1] = Arg1
                            Local2 = 0x00
                        }

                        Local0++
                        If ((Local0 == 0x10))
                        {
                            Local2 = 0x00
                        }
                    }
                }

                Method (GCQV, 1, NotSerialized)
                {
                    If ((Arg0 == 0x00))
                    {
                        Local0 = K8VL /* \_SB_.K8VL */
                        Return (Local0)
                    }
                    ElseIf ((Arg0 == 0x01))
                    {
                        Local0 = K8VH /* \_SB_.K8VH */
                        Return (Local0)
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        If ((CNQC == 0x00))
                        {
                            Local0 = 0x01
                        }
                        Else
                        {
                            Local0 = 0x00
                        }

                        Return (Local0)
                    }
                }

                Method (SPLV, 1, Serialized)
                {
                    Return (Arg0)
                }

                Method (GPLV, 0, Serialized)
                {
                    Return (0x00)
                }

                Method (ENGR, 1, NotSerialized)
                {
                }
            }

            Name (BUFA, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, )
                    {5,7,9,10,11,14,15}
            })
            Name (BUFB, ResourceTemplate ()
            {
                IRQ (Level, ActiveLow, Shared, _Y10)
                    {}
            })
            CreateWordField (BUFB, \_SB.PCI0._Y10._INT, IRQV)  // _INT: Interrupts
            Method (CRS, 1, NotSerialized)
            {
                If (Arg0)
                {
                    IRQV = (0x01 << Arg0)
                }
                Else
                {
                    IRQV = Zero
                }

                Return (BUFB) /* \_SB_.PCI0.BUFB */
            }

            Method (SRS, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x01, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                Return (Local0)
            }

            Method (CRSA, 1, Serialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x01))
                {
                    Local0 = 0x17
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x16
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x10
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x11
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x12
                }

                If ((Arg0 == 0x08))
                {
                    Local0 = 0x14
                }

                If ((Arg0 == 0x0C))
                {
                    Local0 = 0x13
                }

                If ((Arg0 == 0x0D))
                {
                    Local0 = 0x15
                }

                Name (IRZ5, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y11)
                    {
                        0x00000007,
                    }
                })
                CreateWordField (IRZ5, \_SB.PCI0.CRSA._Y11._INT, INZ5)  // _INT: Interrupts
                INZ5 = Local0
                Return (IRZ5) /* \_SB_.PCI0.CRSA.IRZ5 */
            }

            Method (SRSA, 1, Serialized)
            {
                CreateWordField (Arg0, 0x05, INZ6)
                Local0 = 0x08
                If ((INZ6 == 0x10))
                {
                    Local0 = 0x03
                }

                If ((INZ6 == 0x11))
                {
                    Local0 = 0x04
                }

                If ((INZ6 == 0x12))
                {
                    Local0 = 0x06
                }

                If ((INZ6 == 0x13))
                {
                    Local0 = 0x0C
                }

                If ((INZ6 == 0x14))
                {
                    Local0 = 0x08
                }

                If ((INZ6 == 0x15))
                {
                    Local0 = 0x0D
                }

                If ((INZ6 == 0x16))
                {
                    Local0 = 0x02
                }

                If ((INZ6 == 0x17))
                {
                    Local0 = 0x01
                }

                Return (Local0)
            }

            Device (LNK1)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x01)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTA)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTA = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTA))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTA = SRS (Arg0)
                }
            }

            Device (LNK2)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTB)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTB = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTB))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTB = SRS (Arg0)
                }
            }

            Device (LNK3)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTC)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTC = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTC))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTC = SRS (Arg0)
                }
            }

            Device (LNK4)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTD)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTD = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTD))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTD = SRS (Arg0)
                }
            }

            Device (LNK5)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (PCEA)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCEA = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (PCEA))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCEA = SRS (Arg0)
                }
            }

            Device (LNK6)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (PCEB)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCEB = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (PCEB))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCEB = SRS (Arg0)
                }
            }

            Device (LNK7)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (PCEC)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCEC = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (PCEC))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCEC = SRS (Arg0)
                }
            }

            Device (LNK8)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (PCED)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCED = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (PCED))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCED = SRS (Arg0)
                }
            }

            Device (LUBA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTG)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTG = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTG))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTG = SRS (Arg0)
                }
            }

            Device (LUBB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTH)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTH = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTH))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTH = SRS (Arg0)
                }
            }

            Device (LMAC)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTJ)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTJ = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTJ))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTJ = SRS (Arg0)
                }
            }

            Device (LACI)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTL)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTL = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTL))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTL = SRS (Arg0)
                }
            }

            Device (LAZA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTK)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTK = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTK))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTK = SRS (Arg0)
                }
            }

            Device (LPMU)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTS)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTS = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTS))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTS = SRS (Arg0)
                }
            }

            Device (LMCI)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTM)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTM = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTM))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTM = SRS (Arg0)
                }
            }

            Device (LSMB)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x10)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTF)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTF = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTF))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTF = SRS (Arg0)
                }
            }

            Device (LUB2)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x11)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTQ)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTQ = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTQ))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTQ = SRS (Arg0)
                }
            }

            Device (LIDE)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x12)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (INTN)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTN = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (INTN))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTN = SRS (Arg0)
                }
            }

            Device (LSID)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x13)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (ITID)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ITID = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (ITID))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ITID = SRS (Arg0)
                }
            }

            Device (LFID)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x14)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IS0P)
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFA) /* \_SB_.PCI0.BUFA */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    IS0P = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS (IS0P))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    IS0P = SRS (Arg0)
                }
            }

            Name (BUF1, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000010,
                }
            })
            Name (BUF2, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000011,
                }
            })
            Name (BUF3, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000012,
                }
            })
            Name (BUF4, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000013,
                }
            })
            Name (BUFF, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000014,
                    0x00000015,
                    0x00000016,
                    0x00000017,
                }
            })
            Name (BUFH, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x0000000B,
                }
            })
            Name (BUFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000017,
                }
            })
            Name (IRZ1, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x00000007,
                }
            })
            Device (APC1)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTA && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF1) /* \_SB_.PCI0.BUF1 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTA = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTA))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTA = SRSA (Arg0)
                }
            }

            Device (APC2)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x16)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTB && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF2) /* \_SB_.PCI0.BUF2 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTB = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTB))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTB = SRSA (Arg0)
                }
            }

            Device (APC3)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x17)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTC && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF3) /* \_SB_.PCI0.BUF3 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTC = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTC))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTC = SRSA (Arg0)
                }
            }

            Device (APC4)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x18)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTD && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF4) /* \_SB_.PCI0.BUF4 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTD = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTD))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTD = SRSA (Arg0)
                }
            }

            Device (APC5)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x19)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PCEA && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF1) /* \_SB_.PCI0.BUF1 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCEA = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (PCEA))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCEA = SRSA (Arg0)
                }
            }

            Device (APC6)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x1A)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PCEB && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF1) /* \_SB_.PCI0.BUF1 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCEB = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (PCEB))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCEB = SRSA (Arg0)
                }
            }

            Device (APC7)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x1B)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PCEC && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF1) /* \_SB_.PCI0.BUF1 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCEC = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (PCEC))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCEC = SRSA (Arg0)
                }
            }

            Device (APC8)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x1C)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((PCED && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUF1) /* \_SB_.PCI0.BUF1 */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    PCED = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (PCED))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    PCED = SRSA (Arg0)
                }
            }

            Device (APCF)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x1D)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTG && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTG = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTG))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTG = SRSA (Arg0)
                }
            }

            Device (APCG)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x1E)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTH && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTH = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTH))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTH = SRSA (Arg0)
                }
            }

            Device (APCH)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x1F)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTJ && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTJ = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTJ))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTJ = SRSA (Arg0)
                }
            }

            Device (APCJ)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x20)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTL && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTL = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTL))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTL = SRSA (Arg0)
                }
            }

            Device (APMU)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x21)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTS && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTS = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTS))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTS = SRSA (Arg0)
                }
            }

            Device (AAZA)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x22)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTK && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTK = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTK))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTK = SRSA (Arg0)
                }
            }

            Device (APCK)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x23)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTM && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTM = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTM))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTM = SRSA (Arg0)
                }
            }

            Device (APCS)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x24)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTF && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTF = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTF))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTF = SRSA (Arg0)
                }
            }

            Device (APCL)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x25)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTQ && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTQ = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTQ))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTQ = SRSA (Arg0)
                }
            }

            Device (APCM)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x26)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTU && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTU = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTU))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTU = SRSA (Arg0)
                }
            }

            Device (APCZ)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x27)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((INTN && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    INTN = 0x00
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (INTN))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    INTN = SRSA (Arg0)
                }
            }

            Device (APSI)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x28)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((ITID && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    ITID = 0x00
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (ITID))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    ITID = SRSA (Arg0)
                }
            }

            Device (APSJ)
            {
                Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                Name (_UID, 0x29)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((IS0P && PICF))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (0x09)
                    }
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    IS0P = 0x00
                }

                Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                {
                    Return (BUFF) /* \_SB_.PCI0.BUFF */
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRSA (IS0P))
                }

                Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                {
                    IS0P = SRSA (Arg0)
                }
            }
        }

        OperationRegion (SXTM, SystemMemory, 0x000FFF34, 0x04)
        Field (SXTM, WordAcc, NoLock, Preserve)
        {
            SMEM,   32
        }

        OperationRegion (ACPM, SystemMemory, 0xBFEF2C00, 0x0400)
        Field (ACPM, ByteAcc, NoLock, Preserve)
        {
            FSBF,   16, 
            MULF,   8, 
            NOS1,   8, 
            NOS2,   8, 
            AITU,   8, 
            NOSM,   8, 
            VCRV,   8, 
            DDRV,   8, 
            QFNE,   8, 
            QFTE,   8, 
            CNQC,   8, 
            K8VH,   16, 
            K8VL,   16, 
            K8HT,   8, 
            REVG,   8, 
            MMCM,   8, 
            MUCM,   8, 
            DRVC,   8, 
            CVCM,   8, 
            MVCM,   16, 
            FIDC,   8, 
            AIBC,   8, 
            AIP,    8, 
            AIP2,   8, 
            WAKF,   8
        }

        Device (MEM)
        {
            Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x000F0000,         // Address Base
                        0x00004000,         // Address Length
                        _Y13)
                    Memory32Fixed (ReadWrite,
                        0x000F4000,         // Address Base
                        0x00004000,         // Address Length
                        _Y14)
                    Memory32Fixed (ReadWrite,
                        0x000F8000,         // Address Base
                        0x00004000,         // Address Length
                        _Y15)
                    Memory32Fixed (ReadWrite,
                        0x000FC000,         // Address Base
                        0x00004000,         // Address Length
                        _Y16)
                    Memory32Fixed (ReadWrite,
                        0xFEFFF000,         // Address Base
                        0x00000100,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y12)
                    Memory32Fixed (ReadWrite,
                        0xFFFF0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x000A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00100000,         // Address Base
                        0x00000000,         // Address Length
                        _Y17)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y18)
                    Memory32Fixed (ReadWrite,
                        0xFEC00000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEE00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFEFFF000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFF80000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFF90000,         // Address Base
                        0x00030000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFFFED000,         // Address Base
                        0x00003000,         // Address Length
                        )
                })
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y12._BAS, ACMM)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y13._BAS, RMA1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y13._LEN, RSS1)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y14._BAS, RMA2)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y14._LEN, RSS2)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y15._BAS, RMA3)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y15._LEN, RSS3)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y16._BAS, RMA4)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y16._LEN, RSS4)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y17._LEN, EXTM)  // _LEN: Length
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y18._BAS, SXT1)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.MEM._CRS._Y18._LEN, SXT2)  // _LEN: Length
                If ((SMEM != Zero))
                {
                    SXT1 = (AMEM + 0x00010000)
                    SXT1 += 0x00100000
                }
                Else
                {
                    SXT1 = Zero
                }

                SXT2 = SMEM /* \_SB_.SMEM */
                EXTM = (AMEM - 0x00100000)
                If ((ROM1 != Zero))
                {
                    RMA2 = RMA1 /* \_SB_.MEM_._CRS.RMA1 */
                    Local0 = (ROM1 << 0x08)
                    RMA1 = Local0
                    Local0 = (RMS1 << 0x08)
                    RSS1 = Local0
                    RSS2 = 0x8000
                }

                If ((ROM2 != Zero))
                {
                    RMA3 = RMA2 /* \_SB_.MEM_._CRS.RMA2 */
                    Local0 = (ROM2 << 0x08)
                    RMA2 = Local0
                    Local0 = (RMS2 << 0x08)
                    RSS2 = Local0
                    RSS3 = 0xC000
                }

                If ((ROM3 != Zero))
                {
                    RMA4 = RMA3 /* \_SB_.MEM_._CRS.RMA3 */
                    Local0 = (ROM3 << 0x08)
                    RMA3 = Local0
                    Local0 = (RMS3 << 0x08)
                    RSS3 = Local0
                    RSS4 = 0x00010000
                }

                ACMM = AMEM /* \AMEM */
                Return (BUF0) /* \_SB_.MEM_._CRS.BUF0 */
            }
        }

        Device (\_SB.PCI0.EXPL)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PCI0.EXPL._CRS.BUF0 */
            }
        }
    }

    OperationRegion (TEMM, SystemMemory, 0x000FF810, 0x0C)
    Field (TEMM, WordAcc, NoLock, Preserve)
    {
        TP1H,   16, 
        TP1L,   16, 
        TP2H,   16, 
        TP2L,   16, 
        TRPC,   16, 
        SENF,   16
    }

    Name (TVAR, Buffer (0x05)
    {
         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
    })
    CreateByteField (TVAR, 0x00, PLCY)
    CreateWordField (TVAR, 0x01, CTOS)
    CreateWordField (TVAR, 0x03, CTHY)
    Name (TBUF, Buffer (0x04)
    {
         0x00, 0x00, 0x00, 0x00                           // ....
    })
    CreateByteField (TBUF, 0x00, DB00)
    CreateByteField (TBUF, 0x01, DB01)
    CreateWordField (TBUF, 0x00, DW00)
    CreateWordField (TBUF, 0x02, DW01)
    CreateDWordField (TBUF, 0x00, DATD)
    OperationRegion (IP, SystemIO, 0x0295, 0x02)
    Field (IP, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DAT0,   8
    }

    Method (SCFG, 1, NotSerialized)
    {
        SBYT (0x40, Arg0)
    }

    Method (STOS, 3, NotSerialized)
    {
        Local0 = (Arg2 % 0x0A)
        If ((Local0 > 0x0111))
        {
            Local0 -= 0x0111
        }
        Else
        {
            Local0 = (0x0111 - Local0)
            Local0 |= 0x80
        }

        SBYT (0x40, Local0)
    }

    Method (STHY, 3, NotSerialized)
    {
        Local0 = (Arg2 % 0x0A)
        If ((Local0 > 0x0111))
        {
            Local0 -= 0x0111
        }
        Else
        {
            Local0 = (0x0111 - Local0)
            Local0 |= 0x80
        }

        SBYT (0x41, Local0)
    }

    Method (RTMP, 0, NotSerialized)
    {
        Local0 = GBYT (0x29)
        FindSetLeftBit (Local0, Local1)
        If ((Local1 == 0x08))
        {
            Local0 &= 0x7F
            Local0 *= 0x0A
            Local0 = (0x0AAC - Local0)
        }
        Else
        {
            Local0 *= 0x0A
            Local0 += 0x0AAC
        }

        If ((SSHU == 0x01))
        {
            Return (0x0C3C)
        }
        Else
        {
            Return (Local0)
        }
    }

    Method (SBYT, 2, NotSerialized)
    {
        INDX = Arg0
        DAT0 = Arg1
    }

    Method (GBYT, 1, NotSerialized)
    {
        INDX = Arg0
        Local0 = DAT0 /* \DAT0 */
        Return (Local0)
    }

    Method (SFAN, 1, NotSerialized)
    {
        Local0 = (SENF & 0x02)
        If ((Local0 == Zero))
        {
            If ((Arg0 == Zero))
            {
                FOFF ()
            }
            Else
            {
                FON ()
            }
        }
    }

    Method (FON, 0, NotSerialized)
    {
        SBYT (0x14, 0x00)
    }

    Method (FOFF, 0, NotSerialized)
    {
        Local0 = (0x00 ^ 0x07)
        SBYT (0x14, Local0)
    }

    Scope (\_TZ)
    {
        Device (FAN)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                CTOS = TP1H /* \TP1H */
                CTHY = TP1L /* \TP1L */
            }
        }

        ThermalZone (THRM)
        {
            Name (_AL0, Package (0x01)  // _ALx: Active List
            {
                FAN
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
            }

            Method (_AC0, 0, NotSerialized)  // _ACx: Active Cooling
            {
                If (Local7 = (PLCY | PLCY) /* \PLCY */)
                {
                    Return (KELA (TP2H))
                }
                Else
                {
                    Return (KELA (TP1H))
                }
            }

            Name (_PSL, Package (0x01)  // _PSL: Passive List
            {
                \_PR.CPU0
            })
            Name (_TSP, 0x3C)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x04)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x03)  // _TC2: Thermal Constant 2
            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                If (Local7 = (PLCY | PLCY) /* \PLCY */)
                {
                    Return (KELA (TP1H))
                }
                Else
                {
                    Return (KELA (TP2H))
                }
            }

            Method (KELA, 1, NotSerialized)
            {
                If ((Arg0 > 0x01F4))
                {
                    Return (Arg0)
                }
                Else
                {
                    Local1 = Arg0
                    Local1 *= 0x0A
                    Local1 += 0x0AAC
                    Return (Local1)
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return (TRPC) /* \TRPC */
            }

            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Local6 = (SENF & 0x01)
                If ((Local6 == 0x01))
                {
                    Return (KELA (RTMP ()))
                }
                Else
                {
                    Return (0x0B86)
                }
            }

            Method (_SCP, 1, NotSerialized)  // _SCP: Set Cooling Policy
            {
                If (Arg0)
                {
                    PLCY = One
                }
                Else
                {
                    PLCY = Zero
                }

                Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
            }

            Method (STMP, 2, NotSerialized)
            {
                DW00 = Arg1
                If (Arg0)
                {
                    STHY (DB00, DB01, DW00)
                }
                Else
                {
                    STOS (DB00, DB01, DW00)
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : C1
[00Ah 0010   6]                       Oem ID : "Nvidia"
[010h 0016   8]                 Oem Table ID : "ASUSACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "AWRD"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]                 FACS Address : BFEF0000
[028h 0040   4]                 DSDT Address : BFEF3280
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 0000442E
[034h 0052   1]            ACPI Enable Value : A1
[035h 0053   1]           ACPI Disable Value : A0
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00004000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00004004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 0000401C
[04Ch 0076   4]       PM Timer Block Address : 00004008
[050h 0080   4]           GPE0 Block Address : 00004020
[054h 0084   4]           GPE1 Block Address : 000044A0
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 10
[05Eh 0094   1]             GPE1 Base Offset : 20
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 7D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000004A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000BFEF0000
[08Ch 0140   8]                 DSDT Address : 00000000BFEF3280
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 08
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000004000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 08
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 08
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000004004

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 08
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 000000000000401C

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 08
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000004008

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 08
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000004020

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 08
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 00000000000044A0


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 C1 4E 76 69 64 69 61  // FACP......Nvidia
    0010: 41 53 55 53 41 43 50 49 31 2E 30 42 41 57 52 44  // ASUSACPI1.0BAWRD
    0020: 00 00 00 00 00 00 EF BF 80 32 EF BF 00 01 09 00  // .........2......
    0030: 2E 44 00 00 A1 A0 00 00 00 40 00 00 00 00 00 00  // .D.......@......
    0040: 04 40 00 00 00 00 00 00 1C 40 00 00 08 40 00 00  // .@.......@...@..
    0050: 20 40 00 00 A0 44 00 00 04 02 01 04 08 10 20 00  //  @...D........ .
    0060: 65 00 E9 03 00 00 00 00 01 03 7D 7E 32 00 00 00  // e.........}~2...
    0070: A5 04 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 00 00 EF BF 00 00 00 00 80 32 EF BF  // .............2..
    0090: 00 00 00 00 01 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    00A0: 01 08 00 00 00 00 00 00 00 00 00 00 01 08 00 00  // ................
    00B0: 04 40 00 00 00 00 00 00 01 08 00 00 00 00 00 00  // .@..............
    00C0: 00 00 00 00 01 08 00 00 1C 40 00 00 00 00 00 00  // .........@......
    00D0: 01 08 00 00 08 40 00 00 00 00 00 00 01 08 00 00  // .....@..........
    00E0: 20 40 00 00 00 00 00 00 01 08 00 00 A0 44 00 00  //  @...........D..
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F3
[00Ah 0010   6]                       Oem ID : "Nvidia"
[010h 0016   8]                 Oem Table ID : "ASUSACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "AWRD"
[020h 0032   4]        Asl Compiler Revision : 00000098

[024h 0036   4]            Hardware Block ID : 10DE8201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FEFFF000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 00FA
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 F3 4E 76 69 64 69 61  // HPET8.....Nvidia
    0010: 41 53 55 53 41 43 50 49 31 2E 30 42 41 57 52 44  // ASUSACPI1.0BAWRD
    0020: 98 00 00 00 01 82 DE 10 00 00 00 00 00 F0 FF FE  // ................
    0030: 00 00 00 00 00 FA 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 14
[00Ah 0010   6]                       Oem ID : "Nvidia"
[010h 0016   8]                 Oem Table ID : "ASUSACPI"
[018h 0024   4]                 Oem Revision : 42302E31
[01Ch 0028   4]              Asl Compiler ID : "AWRD"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 14 4E 76 69 64 69 61  // MCFG<.....Nvidia
    0010: 41 53 55 53 41 43 50 49 31 2E 30 42 41 57 52 44  // ASUSACPI1.0BAWRD
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SSDT
----
DefinitionBlock ("", "SSDT", 1, "PTLTD ", "POWERNOW", 0x00000001)
{
    External (_PR_.C000, DeviceObj)
    External (_PR_.C001, DeviceObj)

    Scope (\_PR.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x0000FDE8, 
                0x00000064, 
                0x00000009, 
                0xE820130F, 
                0x0000030F
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000E93F, 
                0x00000064, 
                0x00000009, 
                0xE820134E, 
                0x0000034E
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000C316, 
                0x00000064, 
                0x00000009, 
                0xE82013CC, 
                0x000003CC
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000A0F4, 
                0x00000064, 
                0x00000009, 
                0xE820144A, 
                0x0000044A
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000557D, 
                0x00000064, 
                0x00000009, 
                0xE8201482, 
                0x00000482
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FD, 
                0x00000002
            }
        })
    }

    Scope (\_PR.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x05)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008FC, 
                0x0000FDE8, 
                0x00000064, 
                0x00000009, 
                0xE820130F, 
                0x0000030F
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000E93F, 
                0x00000064, 
                0x00000009, 
                0xE820134E, 
                0x0000034E
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000C316, 
                0x00000064, 
                0x00000009, 
                0xE82013CC, 
                0x000003CC
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x0000A0F4, 
                0x00000064, 
                0x00000009, 
                0xE820144A, 
                0x0000044A
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000557D, 
                0x00000064, 
                0x00000009, 
                0xE8201482, 
                0x00000482
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FD, 
                0x00000002
            }
        })
    }
}



