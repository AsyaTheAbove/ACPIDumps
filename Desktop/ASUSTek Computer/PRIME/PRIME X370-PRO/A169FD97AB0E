
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190329
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00002DA8  0x01  "AMD   "  "AMD AOD "  0x00000001  "INTL"   0x20120913
 02)  MCFG  0x0000003C  0x01  "ALASKA"  "A M I   "  0x01072009  "MSFT"   0x00010013
 03)  APIC  0x000000DE  0x03  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 04)  CRAT  0x00000F50  0x01  "AMD   "  "AMD CRAT"  0x00000001  "AMD "   0x00000001
 05)  SSDT  0x00008C98  0x02  "AMD   "  "AMD ALIB"  0x00000002  "MSFT"   0x04000000
 06)  VFCT  0x0000E884  0x01  "ALASKA"  "A M I   "  0x00000001  "AMD "   0x31504F47
 07)  CDIT  0x00000029  0x01  "AMD   "  "AMD CDIT"  0x00000001  "AMD "   0x00000001
 08)  UEFI  0x00000042  0x01  "      "  "        "  0x00000000  "    "   0x00000000
 09)  IVRS  0x000000D0  0x02  "AMD   "  "AMD IVRS"  0x00000001  "AMD "   0x00000000
 10)  DSDT  0x0000C63B  0x02  "ALASKA"  "A M I   "  0x01072009  "INTL"   0x20120913
 11)  SSDT  0x00000024  0x01  "AMDFCH"  "FCHZP   "  0x00001000  "INTL"   0x20120913
 12)  SSDT  0x00001BF4  0x01  "AMD   "  "AMD CPU "  0x00000001  "AMD "   0x00000001
 13)  FACP  0x00000114  0x06  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 14)  FPDT  0x00000044  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 15)  SSDT  0x000000BF  0x01  "AMD AM"  "AMD PT  "  0x00001000  "INTL"   0x20120913
 16)  HPET  0x00000038  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00000005
 17)  SSDT  0x00001B4E  0x01  "AMD   "  "AmdTable"  0x00000001  "INTL"   0x20120913
 18)  FIDT  0x0000009C  0x01  "ALASKA"  "A M I   "  0x01072009  "AMI "   0x00010013
 19)  FACS  0x00000040  0x02

Found 19 ACPI tables in /root/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000DE
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 48
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 09
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 0A
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0B
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0C
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0D
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0E
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0F
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 10
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 04 [Local APIC NMI]
[0ADh 0173   1]                       Length : 06
[0AEh 0174   1]                 Processor ID : FF
[0AFh 0175   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B1h 0177   1]         Interrupt Input LINT : 01

[0B2h 0178   1]                Subtable Type : 01 [I/O APIC]
[0B3h 0179   1]                       Length : 0C
[0B4h 0180   1]                  I/O Apic ID : 11
[0B5h 0181   1]                     Reserved : 00
[0B6h 0182   4]                      Address : FEC00000
[0BAh 0186   4]                    Interrupt : 00000000

[0BEh 0190   1]                Subtable Type : 01 [I/O APIC]
[0BFh 0191   1]                       Length : 0C
[0C0h 0192   1]                  I/O Apic ID : 12
[0C1h 0193   1]                     Reserved : 00
[0C2h 0194   4]                      Address : FEC01000
[0C6h 0198   4]                    Interrupt : 00000018

[0CAh 0202   1]                Subtable Type : 02 [Interrupt Source Override]
[0CBh 0203   1]                       Length : 0A
[0CCh 0204   1]                          Bus : 00
[0CDh 0205   1]                       Source : 00
[0CEh 0206   4]                    Interrupt : 00000002
[0D2h 0210   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0D4h 0212   1]                Subtable Type : 02 [Interrupt Source Override]
[0D5h 0213   1]                       Length : 0A
[0D6h 0214   1]                          Bus : 00
[0D7h 0215   1]                       Source : 09
[0D8h 0216   4]                    Interrupt : 00000009
[0DCh 0220   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

Raw Table Data: Length 222 (0xDE)

    0000: 41 50 49 43 DE 00 00 00 03 48 41 4C 41 53 4B 41  // APIC.....HALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 02  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 04  // ................
    0050: 01 00 00 00 00 08 06 05 01 00 00 00 00 08 07 06  // ................
    0060: 01 00 00 00 00 08 08 07 01 00 00 00 00 08 09 08  // ................
    0070: 01 00 00 00 00 08 0A 09 01 00 00 00 00 08 0B 0A  // ................
    0080: 01 00 00 00 00 08 0C 0B 01 00 00 00 00 08 0D 0C  // ................
    0090: 01 00 00 00 00 08 0E 0D 01 00 00 00 00 08 0F 0E  // ................
    00A0: 01 00 00 00 00 08 10 0F 01 00 00 00 04 06 FF 05  // ................
    00B0: 00 01 01 0C 11 00 00 00 C0 FE 00 00 00 00 01 0C  // ................
    00C0: 12 00 00 10 C0 FE 18 00 00 00 02 0A 00 00 02 00  // ................
    00D0: 00 00 00 00 02 0A 00 09 09 00 00 00 0F 00        // ..............


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CB
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CDIT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 CB 41 4D 44 00 00 00  // CDIT).....AMD...
    0010: 41 4D 44 20 43 44 49 54 01 00 00 00 41 4D 44 20  // AMD CDIT....AMD 
    0020: 01 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000F50
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B5
[00Ah 0010   6]                       Oem ID : "AMD"
[010h 0016   8]                 Oem Table ID : "AMD CRAT"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000001


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3920 (0xF50)

    0000: 43 52 41 54 50 0F 00 00 01 B5 41 4D 44 00 00 00  // CRATP.....AMD...
    0010: 41 4D 44 20 43 52 41 54 01 00 00 00 41 4D 44 20  // AMD CRAT....AMD 
    0020: 01 00 00 00 3E 00 00 00 01 00 00 00 00 00 00 00  // ....>...........
    0030: 00 28 00 00 05 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 10 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00  // ................
    0070: 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 10 00  // .(..............
    0090: 00 00 00 00 00 00 F0 DF 00 00 00 00 40 00 00 00  // ............@...
    00A0: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 20  // ............... 
    00C0: 03 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    00D0: 02 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0100: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0110: 02 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0130: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0140: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0150: 02 40 00 00 0F 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0170: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0180: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0190: 02 40 00 00 0F 00 00 00 00 00 00 00 FF 00 00 00  // .@..............
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    01C0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01D0: 02 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0200: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0210: 02 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0230: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0240: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0250: 02 40 00 00 0F 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0270: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0280: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0290: 02 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02D0: 02 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0300: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0310: 02 40 00 00 0F 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0340: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0350: 02 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0370: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0380: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0390: 02 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03B0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    03C0: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03D0: 02 40 00 00 0F 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0400: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0410: 02 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0430: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0440: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0450: 02 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0470: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0480: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0490: 02 40 00 00 0F 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    04C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04D0: 02 40 00 00 0F 00 00 00 08 00 00 00 00 FF 00 00  // .@..............
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00  // .............@..
    0500: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0510: 02 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0530: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0540: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0550: 02 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0570: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0580: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0590: 02 40 00 00 0F 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    05C0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05D0: 02 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05F0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0600: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0610: 02 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0630: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0640: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0650: 02 40 00 00 0F 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0670: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0680: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0690: 02 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06B0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06C0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06D0: 02 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00  // ............@...
    0700: 01 01 40 00 04 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0710: 02 40 00 00 0F 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0730: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0740: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0750: 03 40 00 00 0B 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0770: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0780: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0790: 03 40 00 00 0D 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    07C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    07D0: 03 40 00 00 AB 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0800: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0810: 03 40 00 00 AD 00 00 00 00 00 00 00 03 00 00 00  // .@..............
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0830: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0840: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0850: 03 40 00 00 0B 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0870: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0880: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0890: 03 40 00 00 0D 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    08C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    08D0: 03 40 00 00 AB 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0900: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0910: 03 40 00 00 AD 00 00 00 02 00 00 00 0C 00 00 00  // .@..............
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0930: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0940: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0950: 03 40 00 00 0B 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0970: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0980: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0990: 03 40 00 00 0D 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09B0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    09C0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    09D0: 03 40 00 00 AB 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09F0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0A10: 03 40 00 00 AD 00 00 00 04 00 00 00 30 00 00 00  // .@..........0...
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0A40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0A50: 03 40 00 00 0B 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A90: 03 40 00 00 0D 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0AC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0AD0: 03 40 00 00 AB 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0B10: 03 40 00 00 AD 00 00 00 06 00 00 00 C0 00 00 00  // .@..............
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0B40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0B50: 03 40 00 00 0B 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B90: 03 40 00 00 0D 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0BC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0BD0: 03 40 00 00 AB 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0C10: 03 40 00 00 AD 00 00 00 08 00 00 00 00 03 00 00  // .@..............
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0C40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0C50: 03 40 00 00 0B 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C90: 03 40 00 00 0D 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0CC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0CD0: 03 40 00 00 AB 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0D10: 03 40 00 00 AD 00 00 00 0A 00 00 00 00 0C 00 00  // .@..............
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0D40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0D50: 03 40 00 00 0B 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D90: 03 40 00 00 0D 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0DC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0DD0: 03 40 00 00 AB 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0E10: 03 40 00 00 AD 00 00 00 0C 00 00 00 00 30 00 00  // .@...........0..
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0E40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0E50: 03 40 00 00 0B 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E70: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E80: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E90: 03 40 00 00 0D 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EB0: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0EC0: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0ED0: 03 40 00 00 AB 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EF0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F00: 02 06 00 00 08 06 00 00 00 40 00 00 00 00 00 00  // .........@......
    0F10: 03 40 00 00 AD 00 00 00 0E 00 00 00 00 C0 00 00  // .@..............
    0F20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0F30: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0F40: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 4 external control methods found during
     * disassembly, but only 0 were resolved (4 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (APTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (MPTS, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (MWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Name (IO1B, 0x0300)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0230)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (PEBL, 0x04000000)
    Name (ACPM, One)
    Name (NBTS, 0x5000)
    Name (CPVD, One)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (WDTB, Zero)
    Name (WDTL, Zero)
    Name (GIOB, 0xFED81500)
    Name (IOMB, 0xFED80D00)
    Name (SSMB, 0xFED80200)
    Name (SPMR, 0xFED80300)
    Name (CAFS, 0xBB)
    Name (UTDB, Zero)
    Name (RXST, Zero)
    Name (U3ST, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (SRIO, One)
    Name (CSMI, 0x61)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (DTPT, Zero)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (AMWV, 0x09)
    Name (SMIM, 0x80000009)
    Name (HWMM, 0xFD000000)
    Name (HIDK, "MSFT0001")
    Name (HIDM, "MSFT0003")
    Name (CIDK, 0x0303D041)
    Name (CIDM, 0x030FD041)
    Name (ATIS, 0xB0)
    Name (MBEC, Zero)
    Name (THPN, Zero)
    Name (ALST, Zero)
    Name (NBTP, 0xFEC30000)
    Name (SMIP, 0xB2)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            \_SB.DSPI ()
            \_SB.PCI0.NAPE ()
        }

        PXXX (Arg0)
    }

    Name (PICM, Zero)
    Method (PXXX, 1, NotSerialized)
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            PRWP [One] = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [One])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [One])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [Zero]))
        {
            WAKP [One] = Zero
        }
        Else
        {
            WAKP [One] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    OperationRegion (COMR, SystemIO, 0x03F8, 0x08)
    Field (COMR, ByteAcc, NoLock, Preserve)
    {
        SOUT,   8, 
        Offset (0x05), 
        SSAT,   8
    }

    Method (THRE, 0, NotSerialized)
    {
        Local0 = (SSAT & 0x20)
        While ((Local0 == Zero))
        {
            Local0 = (SSAT & 0x20)
        }
    }

    Method (OUTX, 1, NotSerialized)
    {
        THRE ()
        SOUT = Arg0
    }

    Method (OUTC, 1, NotSerialized)
    {
        If ((Arg0 == 0x0A))
        {
            OUTX (0x0D)
        }

        OUTX (Arg0)
    }

    Method (DBGN, 1, NotSerialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        OUTC (Local0)
    }

    Method (DBGB, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x04)
        DBGN (Local0)
        DBGN (Arg0)
    }

    Method (DBGW, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x08)
        DBGB (Local0)
        DBGB (Arg0)
    }

    Method (DBGD, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x10)
        DBGW (Local0)
        DBGW (Arg0)
    }

    Method (DBGQ, 1, NotSerialized)
    {
        Local0 = (Arg0 >> 0x30)
        DBGW (Local0)
        Local0 = (Arg0 >> 0x20)
        DBGW (Local0)
        Local0 = (Arg0 >> 0x10)
        DBGW (Local0)
        DBGW (Arg0)
    }

    Name (DBGZ, Buffer (0x50){})
    Method (GETC, 2, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, DBGC)
        Return (DBGC) /* \GETC.DBGC */
    }

    Method (MNIO, 1, NotSerialized)
    {
        If ((ObjectType (Arg0) == One))
        {
            If ((Arg0 > 0xFFFFFFFF))
            {
                DBGQ (Arg0)
            }
            ElseIf ((Arg0 > 0xFFFF))
            {
                DBGD (Arg0)
            }
            ElseIf ((Arg0 > 0xFF))
            {
                DBGW (Arg0)
            }
            Else
            {
                DBGB (Arg0)
            }

            Return (Zero)
        }

        If ((ObjectType (Arg0) == 0x02))
        {
            DBGZ = Arg0
            Local1 = Zero
            While (One)
            {
                Local0 = GETC (DBGZ, Local1)
                If ((Local0 == Zero))
                {
                    Return (Zero)
                }

                OUTC (Local0)
                Local1++
            }

            Return (Zero)
        }

        If ((ObjectType (Arg0) == 0x03))
        {
            Local0 = Zero
            While ((Local0 < SizeOf (Arg0)))
            {
                Local1 = GETC (Arg0, Local0)
                If ((Local0 > Zero))
                {
                    OUTC (0x20)
                }

                DBGB (Local1)
                Local0++
            }

            Return (Zero)
        }

        If ((ObjectType (Arg0) == 0x04))
        {
            Local0 = Zero
            While ((Local0 < SizeOf (Arg0)))
            {
                OUTC (0x20)
                OUTC (0x20)
                MNIO (DerefOf (Arg0 [Local0]))
                OUTC (0x0A)
                Local0++
            }

            Return (Zero)
        }

        Return (One)
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0001)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Name (XHOF, One)
    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ACMX,   8, 
        ACMA,   8
    }

    IndexField (ACMX, ACMA, ByteAcc, NoLock, Preserve)
    {
        Offset (0xB9), 
        IMEN,   8
    }

    OperationRegion (PSMI, SystemIO, SMIO, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
    Field (PMRG, ByteAcc, NoLock, Preserve)
    {
        PMRI,   8, 
        PMRD,   8
    }

    IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
    {
            ,   6, 
        HPEN,   1, 
        Offset (0x60), 
        P1EB,   16, 
        Offset (0xF0), 
            ,   3, 
        RSTU,   1
    }

    OperationRegion (GSMM, SystemMemory, 0xFED80000, 0x1000)
    Field (GSMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x288), 
            ,   1, 
        CLPS,   1, 
        Offset (0x296), 
            ,   7, 
        TMSE,   1, 
        Offset (0x2B0), 
            ,   2, 
        SLPS,   2, 
        Offset (0x3BB), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3E4), 
        BLNK,   2
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   6, 
        PEWS,   1, 
        WSTA,   1, 
        Offset (0x03), 
            ,   6, 
        PEWD,   1
    }

    OperationRegion (IOCC, SystemIO, PMBS, 0x80)
    Field (IOCC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
            ,   2, 
        RTCS,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        P80H = Arg0
        If ((Arg0 == 0x03))
        {
            BLNK = One
        }

        If (((Arg0 == 0x04) || (Arg0 == 0x05)))
        {
            BLNK = Zero
        }

        If ((Arg0 == 0x03))
        {
            RSTU = Zero
        }

        CLPS = One
        SLPS = One
        PEWS = PEWS /* \PEWS */
        If ((Arg0 == 0x03))
        {
            SLPS = One
        }

        If ((Arg0 == 0x04))
        {
            SLPS = One
            RSTU = One
        }

        If ((Arg0 == 0x05))
        {
            PWDE = One
        }
    }

    Method (SWAK, 1, NotSerialized)
    {
        BLNK = 0x03
        If ((Arg0 == 0x03))
        {
            RSTU = One
        }

        PEWS = PEWS /* \PEWS */
        PEWD = Zero
        If (PICM)
        {
            \_SB.DSPI ()
        }

        If (TMSE)
        {
            TMSE = Zero
        }

        If ((Arg0 == 0x03))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x04))
        {
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,5,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1B
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1F
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x27
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2B
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2F
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x33
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x35
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x37
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x36
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x37
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x34
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x35
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x32
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x33
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x31
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x2D
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x29
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x25
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x21
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x1D
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x19
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKG, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x26
            }
        })
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x28
            }
        })
        Name (PD00, Package (0x10)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x10)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x29
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PG2E, Package (0x00){})
        Name (AG2E, Package (0x00){})
        Name (PG2F, Package (0x00){})
        Name (AG2F, Package (0x00){})
        Name (PG30, Package (0x00){})
        Name (AG30, Package (0x00){})
        Name (PG31, Package (0x00){})
        Name (AG31, Package (0x00){})
        Name (PG32, Package (0x00){})
        Name (AG32, Package (0x00){})
        Name (PG33, Package (0x00){})
        Name (AG33, Package (0x00){})
        Name (PG35, Package (0x00){})
        Name (AG35, Package (0x00){})
        Name (PG36, Package (0x00){})
        Name (AG36, Package (0x00){})
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x23
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Device (AMDN)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0xC8)  // _UID: Unique ID
                Name (_STA, 0x0F)  // _STA: Status
                Name (NPTR, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y00)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._LEN, PL)  // _LEN: Length
                    CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y00._BAS, PB)  // _BAS: Base Address
                    PB = PEBS /* \PEBS */
                    PL = PEBL /* \PEBL */
                    Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
                APTS (Arg0)
            }

            Method (NWAK, 1, NotSerialized)
            {
                AWAK (Arg0)
            }

            Name (CPRB, One)
            Name (LVGA, 0x01)
            Name (STAV, 0x0F)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xE000)
            Name (MBB, 0xE0000000)
            Name (MBL, 0x20000000)
            Name (MAB, 0x0000000000000000)
            Name (MAL, 0x0000000000000000)
            Name (MAM, 0x0000000000000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y01)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y03, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y02, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDE00000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y08)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y0A, TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y09, TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (STAV) /* \_SB_.PCI0.STAV */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                DBG8 = 0x25
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y03._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LEN3)  // _LEN: Length
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y06._LEN, LEN7)  // _LEN: Length
                    Local0 = (MBB + MBL) /* \_SB_.PCI0.MBL_ */
                    If ((Local0 < NBTP))
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = Zero
                        MAX7 = Zero
                        LEN7 = Zero
                    }
                    Else
                    {
                        MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                        LEN3 = (NBTP - MBB)
                        Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                        MAX3 = (MIN3 + Local0--)
                        MIN7 = 0xFEE00000
                        Local0 = (0xFEE00000 - NBTP)
                        LEN7 = (MBL - Local0)
                        LEN7 = (LEN7 - LEN3)
                        Local0 = LEN7 /* \_SB_.PCI0._CRS.LEN7 */
                        MAX7 = (MIN7 + Local0--)
                    }

                    If (MAL)
                    {
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MIN, MN8)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._MAX, MX8)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS1, \_SB.PCI0._Y07._LEN, LN8)  // _LEN: Length
                        MN8 = MAB /* \_SB_.PCI0.MAB_ */
                        LN8 = MAL /* \_SB_.PCI0.MAL_ */
                        MX8 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    DBG8 = 0x24
                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y09._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y0A._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0C._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = (NBTP - MBB)
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0D._LEN, LEN6)  // _LEN: Length
                    MIN6 = (NBTP + NBTS) /* \NBTS */
                    LEN6 = (MBL - NBTS)
                    LEN6 = (LEN6 - LEN5)
                    Local0 = LEN6 /* \_SB_.PCI0._CRS.LEN6 */
                    MAX6 = (MIN6 + Local0--)
                    If (MAL)
                    {
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MIN, MN9)  // _MIN: Minimum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._MAX, MX9)  // _MAX: Maximum Base Address
                        CreateQWordField (CRS2, \_SB.PCI0._Y0E._LEN, LN9)  // _LEN: Length
                        MN9 = MAB /* \_SB_.PCI0.MAB_ */
                        LN9 = MAL /* \_SB_.PCI0.MAL_ */
                        MX9 = MAM /* \_SB_.PCI0.MAM_ */
                    }

                    DBG8 = 0x23
                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                CreateDWordField (Arg3, Zero, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    If (!PEHP)
                    {
                        CTRL &= 0x1E
                    }

                    If (!SHPC)
                    {
                        CTRL &= 0x1D
                    }

                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (!SRIO)
                    {
                        CTRL &= 0x1A
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (NAPC, PCI_Config, 0xB8, 0x08)
            Field (NAPC, DWordAcc, NoLock, Preserve)
            {
                NAPX,   32, 
                NAPD,   32
            }

            Mutex (NAPM, 0x00)
            Method (NAPE, 0, NotSerialized)
            {
                Acquire (NAPM, 0xFFFF)
                NAPX = 0x14300000
                Local0 = NAPD /* \_SB_.PCI0.NAPD */
                Local0 &= 0xFFFFFFEF
                NAPD = Local0
                Release (NAPM)
            }

            Method (GPTS, 1, NotSerialized)
            {
            }

            Method (GWAK, 1, NotSerialized)
            {
                If (PICM)
                {
                    NAPE ()
                }
            }

            Device (IOMA)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x15)  // _UID: Unique ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEB80000,         // Address Base
                        0x00080000,         // Address Length
                        )
                })
            }

            Device (D003)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (GPP0)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (GPP0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPP1)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }

                Device (D006)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP3)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PD04) /* \_SB_.PD04 */
                }

                Device (D008)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PD05) /* \_SB_.PD05 */
                }

                Device (D00A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP5)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PD06) /* \_SB_.PD06 */
                }

                Device (D00C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PD07) /* \_SB_.PD07 */
                }

                Device (D00E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP7)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }

                Device (D010)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPP8)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }

                Device (X161)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPP9)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }

                Device (X162)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }
                }
            }

            Device (GPPA)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }

                Device (D014)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPB)
            {
                Name (_ADR, 0x00030004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }

                Device (D016)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPC)
            {
                Name (_ADR, 0x00030005)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }

                Device (D018)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPD)
            {
                Name (_ADR, 0x00030006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }

                Device (D01A)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPE)
            {
                Name (_ADR, 0x00030007)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }

                Device (D01C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GPPF)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }

                Device (D01E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00070001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x19, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x19, 0x04))
                    }
                }

                Device (APSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (PSPA, 0xFD100000)
                    Name (LENA, 0x00F00000)
                    Name (PSPB, 0x00000000)
                    Name (LENB, 0x00000000)
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y0F)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y10)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y0F._BAS, ABAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y0F._LEN, ALEN)  // _LEN: Length
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._BAS, BBAS)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GP17.APSP._Y10._LEN, BLEN)  // _LEN: Length
                        ABAS = PSPA /* \_SB_.PCI0.GP17.APSP.PSPA */
                        ALEN = LENA /* \_SB_.PCI0.GP17.APSP.LENA */
                        BBAS = PSPB /* \_SB_.PCI0.GP17.APSP.PSPB */
                        BLEN = LENB /* \_SB_.PCI0.GP17.APSP.LENB */
                        Return (CRS) /* \_SB_.PCI0.GP17.APSP.CRS_ */
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PD12) /* \_SB_.PD12 */
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (SATA)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (D02C)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            Device (D025)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.SBRG.RTC0.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.SBRG.RTC0.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                OperationRegion (SMI0, SystemIO, SMIO, One)
                Field (SMI0, ByteAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Device (S900)
                        {
                            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                            Name (_UID, 0x0700)  // _UID: Unique ID
                            Name (_STA, 0x0F)  // _STA: Status
                            Name (CRS, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0010,             // Range Minimum
                                    0x0010,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0022,             // Range Minimum
                                    0x0022,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x0063,             // Range Minimum
                                    0x0063,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0065,             // Range Minimum
                                    0x0065,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0067,             // Range Minimum
                                    0x0067,             // Range Maximum
                                    0x00,               // Alignment
                                    0x09,               // Length
                                    )
                                IO (Decode16,
                                    0x0072,             // Range Minimum
                                    0x0072,             // Range Maximum
                                    0x00,               // Alignment
                                    0x0E,               // Length
                                    )
                                IO (Decode16,
                                    0x0080,             // Range Minimum
                                    0x0080,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0084,             // Range Minimum
                                    0x0084,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0088,             // Range Minimum
                                    0x0088,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x008C,             // Range Minimum
                                    0x008C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x0090,             // Range Minimum
                                    0x0090,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x00A2,             // Range Minimum
                                    0x00A2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x1E,               // Length
                                    )
                                IO (Decode16,
                                    0x00B1,             // Range Minimum
                                    0x00B1,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x00E0,             // Range Minimum
                                    0x00E0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x04D0,             // Range Minimum
                                    0x04D0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x040B,             // Range Minimum
                                    0x040B,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x04D6,             // Range Minimum
                                    0x04D6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C00,             // Range Minimum
                                    0x0C00,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C14,             // Range Minimum
                                    0x0C14,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C50,             // Range Minimum
                                    0x0C50,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0C52,             // Range Minimum
                                    0x0C52,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6C,             // Range Minimum
                                    0x0C6C,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0C6F,             // Range Minimum
                                    0x0C6F,             // Range Maximum
                                    0x00,               // Alignment
                                    0x01,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD0,             // Range Minimum
                                    0x0CD0,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD2,             // Range Minimum
                                    0x0CD2,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD4,             // Range Minimum
                                    0x0CD4,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD6,             // Range Minimum
                                    0x0CD6,             // Range Maximum
                                    0x00,               // Alignment
                                    0x02,               // Length
                                    )
                                IO (Decode16,
                                    0x0CD8,             // Range Minimum
                                    0x0CD8,             // Range Maximum
                                    0x00,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y11)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y13)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    _Y12)
                                IO (Decode16,
                                    0x0900,             // Range Minimum
                                    0x0900,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0910,             // Range Minimum
                                    0x0910,             // Range Maximum
                                    0x00,               // Alignment
                                    0x10,               // Length
                                    )
                                IO (Decode16,
                                    0x0060,             // Range Minimum
                                    0x0060,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                IO (Decode16,
                                    0x0064,             // Range Minimum
                                    0x0064,             // Range Maximum
                                    0x00,               // Alignment
                                    0x00,               // Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y14)
                                Memory32Fixed (ReadWrite,
                                    0xFEC01000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEDC0000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFEE00000,         // Address Base
                                    0x00001000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0xFED80000,         // Address Base
                                    0x00010000,         // Address Length
                                    )
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y15)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y16)
                                Memory32Fixed (ReadWrite,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    _Y17)
                            })
                            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                            {
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MIN, PBB)  // _MIN: Minimum Base Address
                                CreateWordField (CRS, \_SB.PCI0.S900._Y11._MAX, PBH)  // _MAX: Maximum Base Address
                                CreateByteField (CRS, \_SB.PCI0.S900._Y11._LEN, PML)  // _LEN: Length
                                PBB = PMBS /* \PMBS */
                                PBH = PMBS /* \PMBS */
                                PML = PMLN /* \PMLN */
                                If (SMBB)
                                {
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MIN, SMB1)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y12._MAX, SMH1)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y12._LEN, SML1)  // _LEN: Length
                                    SMB1 = SMBB /* \SMBB */
                                    SMH1 = SMBB /* \SMBB */
                                    SML1 = SMBL /* \SMBL */
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MIN, SMBZ)  // _MIN: Minimum Base Address
                                    CreateWordField (CRS, \_SB.PCI0.S900._Y13._MAX, SMH0)  // _MAX: Maximum Base Address
                                    CreateByteField (CRS, \_SB.PCI0.S900._Y13._LEN, SML0)  // _LEN: Length
                                    SMBZ = SMB0 /* \SMB0 */
                                    SMH0 = SMB0 /* \SMB0 */
                                    SML0 = SMBM /* \SMBM */
                                }

                                If (APCB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._BAS, APB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y14._LEN, APL)  // _LEN: Length
                                    APB = APCB /* \APCB */
                                    APL = APCL /* \APCL */
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._BAS, SPIB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y15._LEN, SPIL)  // _LEN: Length
                                SPIB = 0xFEC10000
                                SPIL = 0x1000
                                If (WDTB)
                                {
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._BAS, WDTB)  // _BAS: Base Address
                                    CreateDWordField (CRS, \_SB.PCI0.S900._Y16._LEN, WDTL)  // _LEN: Length
                                    WDTB = \WDTB
                                    WDTL = \WDTL
                                }

                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._BAS, ROMB)  // _BAS: Base Address
                                CreateDWordField (CRS, \_SB.PCI0.S900._Y17._LEN, ROML)  // _LEN: Length
                                ROMB = 0xFF000000
                                ROML = 0x01000000
                                Return (CRS) /* \_SB_.PCI0.S900.CRS_ */
                            }
                        }
                    }
                }

                Scope (\_SB)
                {
                    Scope (PCI0)
                    {
                        Scope (SBRG)
                        {
                            Method (RRIO, 4, NotSerialized)
                            {
                                Debug = "RRIO"
                            }

                            Method (RDMA, 3, NotSerialized)
                            {
                                Debug = "rDMA"
                            }
                        }
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y19)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y1B)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y18._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y19._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1A._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.SIO1._Y1B._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x11)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = 0x87
                        INDX = One
                        INDX = 0x55
                        If ((SP1O == 0x2E))
                        {
                            INDX = 0x55
                        }
                        Else
                        {
                            INDX = 0xAA
                        }

                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = 0x02
                        DATA = 0x02
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x02)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2C), 
                        CR2C,   8, 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((One << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.SBRG.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (Zero)
                        }

                        Local0 &= One
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((One << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != Zero)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y1E)
                        IRQNoFlags (_Y1C)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1C._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1D._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.SBRG.SIO1._Y1E._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y21)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y22)
                        IRQNoFlags (_Y1F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y20)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y1F._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y20._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y21._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.SBRG.SIO1._Y22._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.SBRG.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAM = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.SBRG.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.SBRG.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.SBRG.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (One << INTR) /* \_SB_.PCI0.SBRG.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = Zero
                        }

                        If (((DMCH > 0x03) || (Arg1 == Zero)))
                        {
                            DMAE = Zero
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (One << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.SBRG.SIO1.CRS2 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (((Arg1 == 0x02) & LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            IOAL = (IO11 & 0xFF)
                            IOAH = (IO11 >> 0x08)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                INTR = (Local0 - One)
                            }
                            Else
                            {
                                INTR = Zero
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                DMCH = (Local0 - One)
                            }
                            Else
                            {
                                DMCH = 0x04
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - One)
                        }
                        Else
                        {
                            INTR = Zero
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - One)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x04)
                            OPT1 = 0xFF
                            If (KBFG)
                            {
                                OPT0 |= 0x08
                            }
                            Else
                            {
                                OPT0 &= 0xF7
                            }

                            If (MSFG)
                            {
                                OPT0 |= 0x10
                            }
                            Else
                            {
                                OPT0 &= 0xEF
                            }

                            Local0 = (0xBF & OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                            OPT2 = Local0
                            EXFG ()
                        }

                        ENFG (0x07)
                        Local0 = (0x10 | CR2C) /* \_SB_.PCI0.SBRG.SIO1.CR2C */
                        CR2C = Local0
                        EXFG ()
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x04)
                        PMFG = OPT1 /* \_SB_.PCI0.SBRG.SIO1.OPT1 */
                        OPT1 = 0xFF
                        OPT0 &= 0xE7
                        Local0 = (0x40 | OPT2) /* \_SB_.PCI0.SBRG.SIO1.OPT2 */
                        OPT2 = Local0
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x0F, 0x04))
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x00140007)  // _ADR: Address
            }

            Device (GPP2)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x08, 0x04))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (MAL)
                    {
                        If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Case (0x03)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x21                                             // !
                                            })
                                        }

                                    }
                                }
                                Case (0x05)
                                {
                                    Return (One)
                                }
                                Default
                                {
                                    Return (Zero)
                                }

                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (PT01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (PT02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Device (PT20)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (X4_0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT21)
                    {
                        Name (_ADR, 0x00010000)  // _ADR: Address
                        Device (X4_1)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT22)
                    {
                        Name (_ADR, 0x00020000)  // _ADR: Address
                        Device (X411)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT23)
                    {
                        Name (_ADR, 0x00030000)  // _ADR: Address
                        Device (X413)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT24)
                    {
                        Name (_ADR, 0x00040000)  // _ADR: Address
                        Device (AS43)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }

                    Device (PT25)
                    {
                        Name (_ADR, 0x00050000)  // _ADR: Address
                    }

                    Device (PT26)
                    {
                        Name (_ADR, 0x00060000)  // _ADR: Address
                        Device (I211)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x18, 0x04))
                            }
                        }
                    }

                    Device (PT27)
                    {
                        Name (_ADR, 0x00070000)  // _ADR: Address
                        Device (X412)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                            {
                                Return (GPRW (0x08, 0x04))
                            }
                        }
                    }
                }

                Device (PTXH)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x08, 0x04))
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        OperationRegion (PDID, PCI_Config, Zero, 0x04)
                        Field (PDID, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x02), 
                            XDID,   16
                        }

                        Name (PT4, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E
                        })
                        Name (PT2, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12
                        })
                        Name (PT1, Package (0x16)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            One, 
                            0x02, 
                            0x03, 
                            0x04, 
                            0x05, 
                            0x06, 
                            0x07, 
                            0x08, 
                            0x09, 
                            0x0A, 
                            0x0B, 
                            0x0C, 
                            0x0D, 
                            0x0E, 
                            0x0F, 
                            0x10, 
                            0x11, 
                            0x12, 
                            0x13
                        })
                        Name (USBV, Package (0x16)
                        {
                            One, 
                            Zero, 
                            One, 
                            One, 
                            One, 
                            Zero, 
                            One, 
                            One, 
                            One, 
                            Zero, 
                            One, 
                            One, 
                            One, 
                            Zero, 
                            One, 
                            One, 
                            Zero, 
                            Zero, 
                            One, 
                            One, 
                            One, 
                            One
                        })
                        Name (USBP, Package (0x16){})
                        Method (UPGP, 0, Serialized)
                        {
                            Local0 = 0x16
                            If (((XDID == 0x43B9) || (XDID == 0x43D0)))
                            {
                                While (Local0)
                                {
                                    Local0--
                                    USBP [Local0] = DerefOf (PT4 [Local0])
                                }
                            }
                            ElseIf (((XDID == 0x43BB) || (XDID == 0x43D5)))
                            {
                                While (Local0)
                                {
                                    Local0--
                                    USBP [Local0] = DerefOf (PT2 [Local0])
                                }
                            }
                            ElseIf ((XDID == 0x43BC))
                            {
                                While (Local0)
                                {
                                    Local0--
                                    USBP [Local0] = DerefOf (PT1 [Local0])
                                }
                            }
                        }

                        Method (GPLD, 2, Serialized)
                        {
                            Name (PCKG, Package (0x01)
                            {
                                Buffer (0x14){}
                            })
                            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                            REV = 0x02
                            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                            VISI = Arg0
                            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                            GPOS = Arg1
                            Return (PCKG) /* \_SB_.PCI0.GPP2.PTXH.RHUB.GPLD.PCKG */
                        }

                        Method (GUPC, 1, Serialized)
                        {
                            Name (PCKG, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            PCKG [Zero] = Arg0
                            Return (PCKG) /* \_SB_.PCI0.GPP2.PTXH.RHUB.GUPC.PCKG */
                        }

                        Method (TUPC, 1, Serialized)
                        {
                            Name (PCKG, Package (0x04)
                            {
                                One, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            PCKG [One] = Arg0
                            Return (PCKG) /* \_SB_.PCI0.GPP2.PTXH.RHUB.TUPC.PCKG */
                        }

                        Device (POT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x02]), DerefOf (USBP [0x02])))
                            }
                        }

                        Device (PO11)
                        {
                            Name (_ADR, 0x0B)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0A]), DerefOf (USBP [0x0A])))
                            }
                        }

                        Device (POT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x03]), DerefOf (USBP [0x03])))
                            }
                        }

                        Device (PO12)
                        {
                            Name (_ADR, 0x0C)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0B]), DerefOf (USBP [0x0B])))
                            }
                        }

                        Device (POT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x04]), DerefOf (USBP [0x04])))
                            }
                        }

                        Device (PO13)
                        {
                            Name (_ADR, 0x0D)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0C]), DerefOf (USBP [0x0C])))
                            }
                        }

                        Device (POT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x05]), DerefOf (USBP [0x05])))
                            }
                        }

                        Device (PO14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0D]), DerefOf (USBP [0x0D])))
                            }
                        }

                        Device (POT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (0x0A))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [Zero]), DerefOf (USBP [Zero])))
                            }
                        }

                        Device (POT9)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (0x0A))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x08]), DerefOf (USBP [0x08])))
                            }
                        }

                        Device (POT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [One]), DerefOf (USBP [One])))
                            }
                        }

                        Device (PO10)
                        {
                            Name (_ADR, 0x0A)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x09]), DerefOf (USBP [0x09])))
                            }
                        }

                        Device (POT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (0x0A))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x06]), DerefOf (USBP [0x06])))
                            }
                        }

                        Device (PO15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (TUPC (0x0A))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0E]), DerefOf (USBP [0x0E])))
                            }
                        }

                        Device (POT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x07]), DerefOf (USBP [0x07])))
                            }
                        }

                        Device (PO16)
                        {
                            Name (_ADR, 0x10)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x0F]), DerefOf (USBP [0x0F])))
                            }
                        }

                        Device (PO17)
                        {
                            Name (_ADR, 0x11)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x10]), DerefOf (USBP [0x10])))
                            }
                        }

                        Device (PO18)
                        {
                            Name (_ADR, 0x12)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x11]), DerefOf (USBP [0x11])))
                            }
                        }

                        Device (PO19)
                        {
                            Name (_ADR, 0x13)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x12]), DerefOf (USBP [0x12])))
                            }
                        }

                        Device (PO20)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x13]), DerefOf (USBP [0x13])))
                            }
                        }

                        Device (PO21)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x14]), DerefOf (USBP [0x14])))
                            }
                        }

                        Device (PO22)
                        {
                            Name (_ADR, 0x16)  // _ADR: Address
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                Return (GUPC (One))
                            }

                            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                            {
                                UPGP ()
                                Return (GPLD (DerefOf (USBV [0x15]), DerefOf (USBP [0x15])))
                            }
                        }
                    }
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP0.GPP0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP3, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP5, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP6, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP7, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP8.X161, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP9.X162, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPA, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPB, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPC, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPD, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPE, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPPF, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT20.X4_0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT21.X4_1, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT22.X411, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT23.X413, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT24.AS43, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PT02.PT27.X412, 0x02) // Device Wake
            Notify (\_SB.PCI0.GPP2.PTXH, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L19, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L18, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.GPP2.PT02.PT26.I211, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.TPM.TPTS (Arg0)
            SPTS (Arg0)
            MPTS (Arg0, \_SB.PCI0.SBRG.SIO1.SIOS (Arg0), \_SB.PCI0.GPTS (Arg0), \_SB.PCI0.NPTS (Arg0))
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.GWAK (Arg0)
        \_SB.PCI0.SBRG.SIO1.SIOW (Arg0)
        MWAK (Arg0)
        DBG8 = (Arg0 << 0x04)
        SWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_PR)
    {
        OperationRegion (SSDT, SystemMemory, 0xFFFF0000, 0xFFFF)
        Name (DCOR, 0x02)
        Name (TBLD, 0x04)
        Name (NPSS, 0x05)
        Name (HNDL, 0x80000000)
        Name (APSS, Package (0x0A)
        {
            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }
        })
        Processor (P000, 0x01, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P000._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P001, 0x02, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P001._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P002, 0x03, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P002._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P003, 0x04, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P003._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P004, 0x05, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P004._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P005, 0x06, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P005._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P006, 0x07, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P006._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P007, 0x08, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P007._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P008, 0x09, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P008._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P009, 0x0A, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P009._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P00A, 0x0B, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P00A._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P00B, 0x0C, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P00B._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P00C, 0x0D, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P00C._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P00D, 0x0E, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P00D._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P00E, 0x0F, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P00E._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P00F, 0x10, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P00F._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x0C), 
            SIRA,   8, 
            SIRB,   8, 
            SIRC,   8, 
            SIRD,   8, 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x17), 
            SDCL,   8, 
            Offset (0x1A), 
            SDIO,   8, 
            Offset (0x30), 
            USB1,   8, 
            Offset (0x34), 
            USB3,   8, 
            Offset (0x41), 
            SATA,   8, 
            Offset (0x62), 
            GIOC,   8, 
            Offset (0x70), 
            I2C0,   8, 
            I2C1,   8, 
            I2C2,   8, 
            I2C3,   8, 
            URT0,   8, 
            URT1,   8, 
            Offset (0x80), 
            AIRA,   8, 
            AIRB,   8, 
            AIRC,   8, 
            AIRD,   8, 
            AIRE,   8, 
            AIRF,   8, 
            AIRG,   8, 
            AIRH,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (DSPI, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
            Local1 = PD64 /* \_SB_.PD64 */
            AIRA = 0x10
            AIRB = 0x11
            AIRC = 0x12
            AIRD = 0x13
            AIRE = 0x14
            AIRF = 0x15
            AIRG = 0x16
            AIRH = 0x17
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((HPEN == One))
            {
                If ((OSVR >= 0x0C))
                {
                    Return (0x0F)
                }

                HPEN = Zero
                Return (One)
            }

            Return (One)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Name (BUF0, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {0}
                IRQNoFlags ()
                    {8}
                Memory32Fixed (ReadOnly,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    )
            })
            Return (BUF0) /* \HPET._CRS.BUF0 */
        }
    }

    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Name (LINX, Zero)
    Name (OSSP, Zero)
    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0){})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0){})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = Zero
                TPOS = Zero
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSTB = 0x41
                    TPOS = 0x41
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = One
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = One
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = One
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = One
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = One
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = One
                    TPOS = One
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = Zero
                    TPOS = Zero
                }
            }
            Else
            {
                OSTB = Zero
                TPOS = Zero
            }
        }

        Return (OSTB) /* \OSTB */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If ((PICM != Zero))
            {
                DSPI ()
                NAPE ()
            }

            OSTP ()
            OSFL ()
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, Zero, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == One))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (One << Arg0)
            Local0 = (Arg0 << One)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == Zero))
                {
                    PG1A = One
                    ADTD = Zero
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != Zero))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR0)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDC9000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC7000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT0E == One))
                    {
                        If (IER0)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR1)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCA000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDC8000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT1E == One))
                    {
                        If (UOL1)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR2)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {3}
                Memory32Fixed (ReadWrite,
                    0xFEDCE000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCC000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT2E == One))
                    {
                        If (UOL2)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (FUR3)
        {
            Name (_HID, "AMDI0020")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDCF000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEDCD000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((UT3E == One))
                    {
                        If (UOL3)
                        {
                            Return (Zero)
                        }

                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (I2CA)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {10}
                Memory32Fixed (ReadWrite,
                    0xFEDC2000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC0E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x05, 0xC8)
            }
        }

        Device (I2CB)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {11}
                Memory32Fixed (ReadWrite,
                    0xFEDC3000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC1E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x06, 0xC8)
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC2E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC3E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }

        Device (I2CE)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {14}
                Memory32Fixed (ReadWrite,
                    0xFEDC6000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC4E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x09, 0xC8)
            }
        }

        Device (I2CF)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {15}
                Memory32Fixed (ReadWrite,
                    0xFEDCB000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If ((IC5E == One))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x0A, 0xC8)
            }
        }

        Method (EPIN, 0, NotSerialized)
        {
            IPDE = Zero
            IMPE = Zero
            IM15 = One
            IM16 = One
            IM20 = One
            IM44 = One
            IM46 = One
            IM68 = One
            IM69 = One
            IM6A = One
            IM6B = One
            IM4A = One
            IM58 = One
            IM4B = One
            IM57 = One
            IM6D = One
            IM1F = One
            SECR ()
        }

        Name (NCRS, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5}
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
        })
        Name (DCRS, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5}
            Memory32Fixed (ReadWrite,
                0xFEDD5000,         // Address Base
                0x00001000,         // Address Length
                )
            GpioInt (Edge, ActiveBoth, SharedAndWake, PullUp, 0x0BB8,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
            GpioIo (Shared, PullUp, 0x0000, 0x0000, IoRestrictionNone,
                "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                )
                {   // Pin list
                    0x0044
                }
        })
        Name (AHID, "AMDI0040")
        Name (ACID, "AMDI0040")
        Name (SHID, 0x400DD041)
        Name (SCID, "PCICC_080501")
        Device (EMM0)
        {
            Method (_HID, 0, Serialized)  // _HID: Hardware ID
            {
                If (EMMD)
                {
                    Return (SHID) /* \_SB_.SHID */
                }
                Else
                {
                    Return (AHID) /* \_SB_.AHID */
                }
            }

            Method (_CID, 0, Serialized)  // _CID: Compatible ID
            {
                If (EMMD)
                {
                    Return (SCID) /* \_SB_.SCID */
                }
                Else
                {
                    Return (ACID) /* \_SB_.ACID */
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (EMD3)
                {
                    Return (DCRS) /* \_SB_.DCRS */
                }
                Else
                {
                    Return (NCRS) /* \_SB_.NCRS */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    If (EMME)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (EMME)
                {
                    EPIN ()
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                If ((EMD3 && EMME))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, Zero)
                    RECR ()
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                If ((EMD3 && EMME))
                {
                    HSAD (0x1C, 0x03)
                }
            }
        }

        Device (UAR1)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM1")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER0)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02E8,             // Range Minimum
                        0x02E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y23)
                    IRQNoFlags (_Y24)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y23._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR1._CRS._Y23._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR1._CRS._Y24._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR0, IRQL)
                Return (BUF0) /* \_SB_.UAR1._CRS.BUF0 */
            }
        }

        Device (UAR2)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM2")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER1)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x02F8,             // Range Minimum
                        0x02F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y25)
                    IRQNoFlags (_Y26)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y25._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR2._CRS._Y25._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR2._CRS._Y26._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR1, IRQL)
                Return (BUF0) /* \_SB_.UAR2._CRS.BUF0 */
            }
        }

        Device (UAR3)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM3")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER2)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03E8,             // Range Minimum
                        0x03E8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y27)
                    IRQNoFlags (_Y28)
                        {3}
                })
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y27._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR3._CRS._Y27._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR3._CRS._Y28._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR2, IRQL)
                Return (BUF0) /* \_SB_.UAR3._CRS.BUF0 */
            }
        }

        Device (UAR4)
        {
            Name (_HID, EisaId ("PNP0500") /* Standard PC COM Serial Port */)  // _HID: Hardware ID
            Name (_DDN, "COM4")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (IER3)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x03F8,             // Range Minimum
                        0x03F8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        _Y29)
                    IRQNoFlags (_Y2A)
                        {4}
                })
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y29._MIN, IOLO)  // _MIN: Minimum Base Address
                CreateByteField (BUF0, 0x03, IOHI)
                CreateByteField (BUF0, \_SB.UAR4._CRS._Y29._MAX, IORL)  // _MAX: Maximum Base Address
                CreateByteField (BUF0, 0x05, IORH)
                CreateWordField (BUF0, \_SB.UAR4._CRS._Y2A._INT, IRQL)  // _INT: Interrupts
                FRUI (WUR3, IRQL)
                Return (BUF0) /* \_SB_.UAR4._CRS.BUF0 */
            }
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y2B)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y2C)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2D)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y2E)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y2B._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2B._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y2C._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y2C._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y2D._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y2D._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y2E._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y2E._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y2E._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }

            Return (CRSI) /* \_SB_.TPM_.CRSI */
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }

            Sleep (0x012C)
        }
    }

    Scope (\)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ASUSWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,  // .^..mN..
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .9.. ..f
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46,  // BC...GgF
                /* 0018 */  0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00,  // .p...9..
                /* 0020 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02,  //  ..fBD..
                /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // r.......
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,  // ....!...
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00   // ..).MO..
            })
            Name (CCAC, Zero)
            Name (ECD2, Zero)
            Name (EID2, Zero)
            Method (WED2, 1, NotSerialized)
            {
                ECD2 = Arg0
            }

            Method (WMBC, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x43455053)
                    {
                        Return (SPEC (Arg2))
                    }
                    Case (0x50564544)
                    {
                        Return (DEVP (Arg2))
                    }
                    Case (0x50534453)
                    {
                        Return (SDSP (Arg2))
                    }
                    Case (0x50534447)
                    {
                        Return (GDSP (Arg2))
                    }
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x44495047)
                    {
                        Return (GPID ())
                    }
                    Case (0x5446424B)
                    {
                        Return (KBFT (Arg2))
                    }
                    Case (0x59454B48)
                    {
                        Return (HKEY ())
                    }
                    Case (0x4C455252)
                    {
                        Return (LERR (Arg2))
                    }
                    Case (0x47424F44)
                    {
                        Return (GBOD (Arg2))
                    }
                    Case (0x53424F44)
                    {
                        Return (SBOD (Arg2))
                    }
                    Case (0x47424F4E)
                    {
                        Return (GBON (Arg2))
                    }
                    Case (0x53415057)
                    {
                        Return (SAPW (Arg2))
                    }
                    Case (0x53555057)
                    {
                        Return (SUPW (Arg2))
                    }
                    Case (0x53555058)
                    {
                        Return (GLBN (Arg2))
                    }
                    Case (0x53555059)
                    {
                        Return (ISLG (Arg2))
                    }
                    Case (0x53555060)
                    {
                        Return (GLBO (Arg2))
                    }
                    Case (0x53555061)
                    {
                        Return (SLBO (Arg2))
                    }
                    Case (0x53424F47)
                    {
                        Return (SBOG (Arg2))
                    }
                    Case (0x4C444654)
                    {
                        Return (LDFT ())
                    }
                    Case (0x53465442)
                    {
                        Return (SFTB (Arg2))
                    }
                    Case (0x53444654)
                    {
                        Return (SDFT (Arg2))
                    }
                    Case (0x5346544D)
                    {
                        Return (SFTM ())
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (Zero)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (Zero)
            }

            Mutex (ASMX, 0x00)
            Method (RIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    Local0 = PT08 /* \AMW0.RIOB.PT08 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOB, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, B_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, One)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        PT08,   8
                    }

                    PT08 = B_DT /* \AMW0.WIOB.B_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    Local0 = PT16 /* \AMW0.RIOW.PT16 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOW, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateWordField (Arg0, 0x02, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, WordAcc, NoLock, Preserve)
                    {
                        PT16,   16
                    }

                    PT16 = W_DT /* \AMW0.WIOW.W_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    Local0 = PT32 /* \AMW0.RIOD.PT32 */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIOD, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateDWordField (Arg0, 0x02, D_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x04)
                    Field (TMIO, DWordAcc, NoLock, Preserve)
                    {
                        PT32,   32
                    }

                    PT32 = D_DT /* \AMW0.WIOD.D_DT */
                    Release (ASMX)
                }

                Return (Ones)
            }

            Method (RMEM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_MM)
                    CreateByteField (Arg0, 0x04, W_SZ)
                    OperationRegion (TMMM, SystemMemory, ToInteger (W_MM), 0x04)
                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM08,   8
                    }

                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM16,   16
                    }

                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM32,   32
                    }

                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = MM08 /* \AMW0.RMEM.MM08 */
                        }
                        Case (0x02)
                        {
                            Local0 = MM16 /* \AMW0.RMEM.MM16 */
                        }
                        Case (0x04)
                        {
                            Local0 = MM32 /* \AMW0.RMEM.MM32 */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WMEM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_MM)
                    CreateByteField (Arg0, 0x04, W_SZ)
                    CreateDWordField (Arg0, 0x08, W_DT)
                    OperationRegion (TMMM, SystemMemory, W_MM, 0x04)
                    Field (TMMM, ByteAcc, NoLock, Preserve)
                    {
                        MM08,   8
                    }

                    Field (TMMM, WordAcc, NoLock, Preserve)
                    {
                        MM16,   16
                    }

                    Field (TMMM, DWordAcc, NoLock, Preserve)
                    {
                        MM32,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            MM08 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Case (0x02)
                        {
                            MM16 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Case (0x04)
                        {
                            MM32 = W_DT /* \AMW0.WMEM.W_DT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    Local0 = TBUS /* \AMW0.RPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \AMW0.RPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \AMW0.RPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \AMW0.RPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            Local0 = BCFG /* \AMW0.RPCI.BCFG */
                        }
                        Case (0x02)
                        {
                            Local0 = WCFG /* \AMW0.RPCI.WCFG */
                        }
                        Case (0x04)
                        {
                            Local0 = XCFG /* \AMW0.RPCI.XCFG */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WPCI, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, TBUS)
                    CreateByteField (Arg0, One, TDEV)
                    CreateByteField (Arg0, 0x02, TFUN)
                    CreateWordField (Arg0, 0x04, TREG)
                    CreateByteField (Arg0, 0x06, W_SZ)
                    CreateDWordField (Arg0, 0x08, TDAT)
                    Local0 = TBUS /* \AMW0.WPCI.TBUS */
                    Local0 <<= 0x05
                    Local0 += TDEV /* \AMW0.WPCI.TDEV */
                    Local0 <<= 0x03
                    Local0 += TFUN /* \AMW0.WPCI.TFUN */
                    Local0 <<= 0x0C
                    Local0 += TREG /* \AMW0.WPCI.TREG */
                    Local0 += PEBS /* \PEBS */
                    OperationRegion (PCFG, SystemMemory, Local0, 0x04)
                    Field (PCFG, ByteAcc, NoLock, Preserve)
                    {
                        BCFG,   8
                    }

                    Field (PCFG, WordAcc, NoLock, Preserve)
                    {
                        WCFG,   16
                    }

                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        XCFG,   32
                    }

                    Local0 = Zero
                    Switch (ToInteger (W_SZ))
                    {
                        Case (One)
                        {
                            BCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Case (0x02)
                        {
                            WCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Case (0x04)
                        {
                            XCFG = TDAT /* \AMW0.WPCI.TDAT */
                        }
                        Default
                        {
                            Local0 = Ones
                        }

                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    Local0 = DATP /* \AMW0.RIDX.DATP */
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WIDX, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateWordField (Arg0, Zero, W_PT)
                    CreateByteField (Arg0, 0x02, W_ID)
                    CreateByteField (Arg0, 0x03, W_DT)
                    OperationRegion (TMIO, SystemIO, W_PT, 0x02)
                    Field (TMIO, ByteAcc, NoLock, Preserve)
                    {
                        IDXP,   8, 
                        DATP,   8
                    }

                    IDXP = ToInteger (W_ID)
                    DATP = W_DT /* \AMW0.WIDX.W_DT */
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (RGBF, Buffer (0x10){})
            CreateDWordField (RGBF, Zero, REAX)
            CreateDWordField (RGBF, 0x04, REBX)
            CreateDWordField (RGBF, 0x08, RECX)
            CreateDWordField (RGBF, 0x0C, REDX)
            Name (MRBF, Buffer (0x08){})
            CreateDWordField (MRBF, Zero, MEDX)
            CreateDWordField (MRBF, 0x04, MEAX)
            Method (RDMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.GMSR (W_ID)
                    MEDX = REDX /* \AMW0.REDX */
                    MEAX = REAX /* \AMW0.REAX */
                    Release (ASMX)
                    Return (MRBF) /* \AMW0.MRBF */
                }

                Return (Ones)
            }

            Method (WRMR, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    CreateDWordField (Arg0, 0x04, W_HI)
                    CreateDWordField (Arg0, 0x08, W_LW)
                    RECX = W_ID /* \AMW0.WRMR.W_ID */
                    REDX = W_HI /* \AMW0.WRMR.W_HI */
                    REAX = W_LW /* \AMW0.WRMR.W_LW */
                    Local0 = \_SB.SMSR (RGBF)
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (RCID, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateDWordField (Arg0, Zero, W_ID)
                    RGBF = \_SB.PRID (W_ID)
                    Release (ASMX)
                    Return (RGBF) /* \AMW0.RGBF */
                }

                Return (Ones)
            }

            Method (RDEC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (WREC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (RSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.RSIO.W_ID */
                        Local0 = \_SB.PCI0.SBRG.SIO1.DATA
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WSIO, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_LN)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    Local0 = Ones
                    If ((Acquire (\_SB.PCI0.SBRG.SIO1.MUT0, 0xFFFF) == Zero))
                    {
                        \_SB.PCI0.SBRG.SIO1.ENFG (W_LN)
                        \_SB.PCI0.SBRG.SIO1.INDX = W_ID /* \AMW0.WSIO.W_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = W_DT /* \AMW0.WSIO.W_DT */
                        \_SB.PCI0.SBRG.SIO1.EXFG ()
                    }

                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            IndexField (\_SB.PCI0.SBRG.SIO1.INDX, \_SB.PCI0.SBRG.SIO1.DATA, ByteAcc, NoLock, Preserve)
            {
                Offset (0x24), 
                    ,   6, 
                HMSL,   2, 
                Offset (0xF3), 
                    ,   2, 
                ECLK,   1
            }

            Method (HMBS, 1, Serialized)
            {
                Switch (HMSL)
                {
                    Case (Zero)
                    {
                        Local0 = 0xFD000000
                    }
                    Case (One)
                    {
                        Local0 = 0xFD100000
                    }
                    Case (0x02)
                    {
                        Local0 = 0xFD200000
                    }
                    Case (0x03)
                    {
                        Local0 = 0xFD300000
                    }

                }

                Local1 = (Arg0 * 0x0100)
                Local2 = (Local0 + Local1)
                Return (Local2)
            }

            Method (RHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = HMBS (W_BK)
                    Local1 = (Local0 + W_ID) /* \AMW0.RHWM.W_ID */
                    OperationRegion (HWMM, SystemMemory, Local1, 0x04)
                    Field (HWMM, ByteAcc, NoLock, Preserve)
                    {
                        BHWM,   8
                    }

                    Local0 = BHWM /* \AMW0.RHWM.BHWM */
                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Local0)
                }

                Return (Ones)
            }

            Method (WHWM, 1, Serialized)
            {
                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    CreateByteField (Arg0, Zero, W_BK)
                    CreateByteField (Arg0, One, W_ID)
                    CreateByteField (Arg0, 0x02, W_DT)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = HMBS (W_BK)
                    Local1 = (Local0 + W_ID) /* \AMW0.WHWM.W_ID */
                    OperationRegion (HWMM, SystemMemory, Local1, 0x04)
                    Field (HWMM, ByteAcc, NoLock, Preserve)
                    {
                        BHWM,   8
                    }

                    BHWM = W_DT /* \AMW0.WHWM.W_DT */
                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (ATOH, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= 0x61) && (Arg0 <= 0x66)))
                {
                    Local0 = (Arg0 - 0x57)
                }

                If (((Arg0 >= 0x41) && (Arg0 <= 0x46)))
                {
                    Local0 = (Arg0 - 0x37)
                }

                If (((Arg0 >= 0x30) && (Arg0 <= 0x39)))
                {
                    Local0 = (Arg0 - 0x30)
                }

                Return (Local0)
            }

            Method (HTOA, 1, Serialized)
            {
                Local0 = Ones
                If (((Arg0 >= Zero) && (Arg0 <= 0x09)))
                {
                    Local0 = (Arg0 + 0x30)
                }

                If (((Arg0 >= 0x0A) && (Arg0 <= 0x0F)))
                {
                    Local0 = (Arg0 - 0x0A)
                    Local0 += 0x41
                }

                Return (Local0)
            }

            Name (STRB, Buffer (0x0100){})
            Name (HEXB, Buffer (0x0100){})
            Method (STOH, 1, Serialized)
            {
                STRB = Arg0
                CreateByteField (Arg0, Zero, DCNT)
                DCNT >>= 0x02
                Local0 = Zero
                While ((Local0 < DCNT))
                {
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    Local3 = ATOH (DerefOf (STRB [Local1]))
                    Local3 <<= 0x04
                    Local3 += ATOH (DerefOf (STRB [Local2]))
                    HEXB [Local0] = Local3
                    Local0++
                }

                Return (HEXB) /* \AMW0.HEXB */
            }

            Method (HTOS, 2, Serialized)
            {
                HEXB = Arg0
                STRB [Zero] = (Arg1 << 0x02)
                STRB [One] = Zero
                Local0 = Zero
                While ((Local0 < Arg1))
                {
                    Local3 = DerefOf (HEXB [Local0])
                    Local4 = (Local3 >> 0x04)
                    Local4 &= 0x0F
                    Local3 &= 0x0F
                    Local1 = ((0x04 * Local0) + 0x02)
                    Local2 = (Local1 + 0x02)
                    STRB [Local1] = HTOA (Local4)
                    Local1++
                    STRB [Local1] = Zero
                    STRB [Local2] = HTOA (Local3)
                    Local2++
                    STRB [Local2] = Zero
                    Local0++
                }

                Return (STRB) /* \AMW0.STRB */
            }

            Name (IDBF, Buffer (0x60){})
            Name (OSBF, Buffer (0x82){})
            Name (ODBF, Buffer (0x20){})
            Name (B_CT, Zero)
            Name (B_BK, Zero)
            Name (B_ID, Zero)
            Name (B_DT, Zero)
            Method (BRIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \AMW0.B_ID */
                        ODBF [Local1] = \_SB.PCI0.SBRG.SIO1.DATA
                        Local1++
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWIO, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x07)
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        \_SB.PCI0.SBRG.SIO1.LDN = B_BK /* \AMW0.B_BK */
                        \_SB.PCI0.SBRG.SIO1.INDX = B_ID /* \AMW0.B_ID */
                        \_SB.PCI0.SBRG.SIO1.DATA = B_DT /* \AMW0.B_DT */
                    }

                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Method (IMRD, 2, Serialized)
            {
                OperationRegion (TMMM, SystemMemory, Arg0, 0x04)
                Field (TMMM, ByteAcc, NoLock, Preserve)
                {
                    MM08,   8
                }

                Field (TMMM, WordAcc, NoLock, Preserve)
                {
                    MM16,   16
                }

                Field (TMMM, DWordAcc, NoLock, Preserve)
                {
                    MM32,   32
                }

                Switch (Arg1)
                {
                    Case (One)
                    {
                        Local0 = MM08 /* \AMW0.IMRD.MM08 */
                    }
                    Case (0x02)
                    {
                        Local0 = MM16 /* \AMW0.IMRD.MM16 */
                    }
                    Case (0x04)
                    {
                        Local0 = MM32 /* \AMW0.IMRD.MM32 */
                    }
                    Default
                    {
                        Local0 = Ones
                    }

                }

                Return (Local0)
            }

            Method (IMWR, 3, Serialized)
            {
                OperationRegion (TMMM, SystemMemory, Arg0, 0x04)
                Field (TMMM, ByteAcc, NoLock, Preserve)
                {
                    MM08,   8
                }

                Field (TMMM, WordAcc, NoLock, Preserve)
                {
                    MM16,   16
                }

                Field (TMMM, DWordAcc, NoLock, Preserve)
                {
                    MM32,   32
                }

                Switch (Arg1)
                {
                    Case (One)
                    {
                        MM08 = Arg2
                    }
                    Case (0x02)
                    {
                        MM16 = Arg2
                    }
                    Case (0x04)
                    {
                        MM32 = Arg2
                    }
                    Default
                    {
                    }

                }
            }

            Method (BRHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = Zero
                    Local1 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        Local2 = HMBS (B_BK)
                        Local3 = (Local2 + B_ID) /* \AMW0.B_ID */
                        ODBF [Local1] = IMRD (Local3, One)
                        Local1++
                    }

                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    OSBF = HTOS (ODBF, Local1)
                    Release (ASMX)
                    Return (OSBF) /* \AMW0.OSBF */
                }

                Return (Ones)
            }

            Method (BWHM, 1, Serialized)
            {
                CreateByteField (Arg0, Zero, WLEN)
                B_CT = (WLEN >> 0x02)
                If ((B_CT > 0x20))
                {
                    Return (Ones)
                }

                If ((Acquire (ASMX, 0xFFFF) == Zero))
                {
                    IDBF = STOH (Arg0)
                    \_SB.PCI0.SBRG.SIO1.ENFG (0x04)
                    ECLK = Zero
                    Local0 = Zero
                    While ((Local0 < B_CT))
                    {
                        B_BK = DerefOf (IDBF [Local0])
                        Local0++
                        B_ID = DerefOf (IDBF [Local0])
                        Local0++
                        B_DT = DerefOf (IDBF [Local0])
                        Local0++
                        Local2 = HMBS (B_BK)
                        Local3 = (Local2 + B_ID) /* \AMW0.B_ID */
                        IMWR (Local3, One, B_DT)
                    }

                    ECLK = One
                    \_SB.PCI0.SBRG.SIO1.EXFG ()
                    Release (ASMX)
                    Return (Zero)
                }

                Return (Ones)
            }

            Name (ECBK, Zero)
            Method (BREC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (BWEC, 1, Serialized)
            {
                Return (Ones)
            }

            Method (WMBD, 3, Serialized)
            {
                Local0 = One
                Switch (Arg1)
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Case (0x52494F42)
                    {
                        Return (RIOB (Arg2))
                    }
                    Case (0x57494F42)
                    {
                        Return (WIOB (Arg2))
                    }
                    Case (0x52494F57)
                    {
                        Return (RIOW (Arg2))
                    }
                    Case (0x57494F57)
                    {
                        Return (WIOW (Arg2))
                    }
                    Case (0x52494F44)
                    {
                        Return (RIOD (Arg2))
                    }
                    Case (0x57494F44)
                    {
                        Return (WIOD (Arg2))
                    }
                    Case (0x524D454D)
                    {
                        Return (RMEM (Arg2))
                    }
                    Case (0x574D454D)
                    {
                        Return (WMEM (Arg2))
                    }
                    Case (0x52504349)
                    {
                        Return (RPCI (Arg2))
                    }
                    Case (0x57504349)
                    {
                        Return (WPCI (Arg2))
                    }
                    Case (0x52494458)
                    {
                        Return (RIDX (Arg2))
                    }
                    Case (0x57494458)
                    {
                        Return (WIDX (Arg2))
                    }
                    Case (0x52444D52)
                    {
                        Return (RDMR (Arg2))
                    }
                    Case (0x57524D52)
                    {
                        Return (WRMR (Arg2))
                    }
                    Case (0x52434944)
                    {
                        Return (RCID (Arg2))
                    }
                    Case (0x52444543)
                    {
                        Return (RDEC (Arg2))
                    }
                    Case (0x57524543)
                    {
                        Return (WREC (Arg2))
                    }
                    Case (0x5253494F)
                    {
                        Return (RSIO (Arg2))
                    }
                    Case (0x5753494F)
                    {
                        Return (WSIO (Arg2))
                    }
                    Case (0x5248574D)
                    {
                        Return (RHWM (Arg2))
                    }
                    Case (0x5748574D)
                    {
                        Return (WHWM (Arg2))
                    }
                    Case (0x4252494F)
                    {
                        Return (BRIO (Arg2))
                    }
                    Case (0x4257494F)
                    {
                        Return (BWIO (Arg2))
                    }
                    Case (0x4252484D)
                    {
                        Return (BRHM (Arg2))
                    }
                    Case (0x4257484D)
                    {
                        Return (BWHM (Arg2))
                    }
                    Case (0x42524543)
                    {
                        Return (BREC (Arg2))
                    }
                    Case (0x42574543)
                    {
                        Return (BWEC (Arg2))
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Local0)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD2))
                {
                    Return (EID2) /* \AMW0.EID2 */
                }

                Return (Zero)
            }

            Method (AMWR, 1, Serialized)
            {
                Local1 = Zero
                If (ECD2)
                {
                    EID2 = Arg0
                    Notify (AMW0, 0xD2) // Hardware-Specific
                    Local1 = One
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Local0 = AMWR (Arg0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x16E9)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xD9, 0x16, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xA5, 0x8E, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x07, 0x10, 0xCA, 0xE7, 0x8D, 0x42, 0x04,  // ......B.
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,  // ...8.`0.
                /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,  //  $.B....
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,  // ...*....
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,  //  ....$8.
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,  // ..I.`^.n
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,  // .....`Z.
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,  // cH*...X.
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,  // ...P....
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,  // ...,.2..
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,  // <..F..eC
                /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,  // .d@.....
                /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xB0, 0xB7,  // ........
                /* 0088 */  0xE2, 0x86, 0x21, 0x6B, 0x03, 0x10, 0x54, 0x61,  // ..!k..Ta
                /* 0090 */  0x02, 0x6C, 0xC1, 0x08, 0xA5, 0x36, 0x18, 0xA1,  // .l...6..
                /* 0098 */  0x34, 0x86, 0xA0, 0x61, 0x18, 0x25, 0xE2, 0x21,  // 4..a.%.!
                /* 00A0 */  0x75, 0x06, 0x2B, 0x94, 0x88, 0x61, 0x42, 0x44,  // u.+..aBD
                /* 00A8 */  0xA8, 0x0C, 0x83, 0x0C, 0x2B, 0x54, 0xB4, 0xB8,  // ....+T..
                /* 00B0 */  0x11, 0xDA, 0x1F, 0x04, 0x89, 0xB6, 0x62, 0x0D,  // ......b.
                /* 00B8 */  0xD5, 0x91, 0x46, 0x83, 0x1A, 0x5E, 0x82, 0xC3,  // ..F..^..
                /* 00C0 */  0xF5, 0x50, 0xCF, 0xB1, 0x73, 0x01, 0xD2, 0x81,  // .P..s...
                /* 00C8 */  0x05, 0x12, 0xFC, 0x2C, 0xEA, 0x1C, 0x27, 0x01,  // ...,..'.
                /* 00D0 */  0x49, 0x60, 0xAC, 0xE3, 0x67, 0x03, 0xC7, 0xBB,  // I`..g...
                /* 00D8 */  0x06, 0xD4, 0x8C, 0x8F, 0x97, 0x09, 0x82, 0x43,  // .......C
                /* 00E0 */  0x0D, 0xD1, 0x03, 0x0D, 0x77, 0x02, 0x87, 0xC8,  // ....w...
                /* 00E8 */  0x00, 0x3D, 0xA7, 0xA3, 0xC1, 0x1C, 0x00, 0xEC,  // .=......
                /* 00F0 */  0x70, 0x32, 0xBA, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2...*..
                /* 00F8 */  0x98, 0x65, 0x11, 0x48, 0xE3, 0x31, 0xF4, 0xE9,  // .e.H.1..
                /* 0100 */  0x9E, 0xCF, 0x09, 0x27, 0xB0, 0xFC, 0x41, 0xA0,  // ...'..A.
                /* 0108 */  0x46, 0x66, 0x68, 0x1B, 0x9C, 0x96, 0x30, 0x43,  // Ffh...0C
                /* 0110 */  0x1E, 0xFE, 0x61, 0x31, 0xB1, 0x10, 0xFA, 0x20,  // ..a1... 
                /* 0118 */  0x78, 0x3C, 0xF0, 0xFE, 0xFF, 0xE3, 0x01, 0x8F,  // x<......
                /* 0120 */  0xE2, 0x33, 0x81, 0x10, 0x5E, 0x09, 0x62, 0x7B,  // .3..^.b{
                /* 0128 */  0x40, 0xCF, 0x09, 0x06, 0xC6, 0x0E, 0xC8, 0x7E,  // @......~
                /* 0130 */  0x05, 0x20, 0x04, 0x2F, 0x73, 0x44, 0x72, 0x8A,  // . ./sDr.
                /* 0138 */  0xA0, 0x31, 0x19, 0xA3, 0x55, 0x08, 0x0D, 0x21,  // .1..U..!
                /* 0140 */  0xB4, 0x21, 0xCE, 0x2E, 0xFE, 0xC1, 0x1B, 0xE6,  // .!......
                /* 0148 */  0xDC, 0x4D, 0x50, 0xE4, 0x08, 0x50, 0x62, 0x46,  // .MP..PbF
                /* 0150 */  0x80, 0x3A, 0x06, 0x44, 0x0F, 0x7D, 0x36, 0xD1,  // .:.D.}6.
                /* 0158 */  0x8F, 0x27, 0xCA, 0x49, 0x1C, 0x90, 0xCF, 0x0C,  // .'.I....
                /* 0160 */  0x46, 0x08, 0x5E, 0xEE, 0x21, 0x81, 0x68, 0x9E,  // F.^.!.h.
                /* 0168 */  0x83, 0x4E, 0x0C, 0xE7, 0x74, 0x08, 0x4C, 0xC7,  // .N..t.L.
                /* 0170 */  0x77, 0xE1, 0x00, 0x48, 0x94, 0xA5, 0xCA, 0xC6,  // w..H....
                /* 0178 */  0x52, 0x3D, 0x08, 0x2A, 0x08, 0x48, 0x73, 0x37,  // R=.*.Hs7
                /* 0180 */  0xC4, 0x49, 0x1B, 0x39, 0x70, 0x8C, 0xEA, 0x87,  // .I.9p...
                /* 0188 */  0x4D, 0x45, 0xC0, 0xE9, 0xB0, 0xE1, 0x71, 0x3B,  // ME....q;
                /* 0190 */  0x3E, 0x89, 0xA2, 0x0F, 0x88, 0xC2, 0x39, 0xEC,  // >.....9.
                /* 0198 */  0x99, 0x83, 0x82, 0x18, 0xD0, 0x49, 0x20, 0xE4,  // .....I .
                /* 01A0 */  0xE4, 0x28, 0x80, 0xD2, 0x32, 0x4E, 0x32, 0xAE,  // .(..2N2.
                /* 01A8 */  0x53, 0x7B, 0x13, 0xF0, 0xB4, 0x1E, 0x0B, 0x0E,  // S{......
                /* 01B0 */  0xE3, 0xB8, 0xCE, 0xDA, 0xA2, 0x6F, 0x0C, 0x74,  // .....o.t
                /* 01B8 */  0x3E, 0xBE, 0x0B, 0x70, 0x0D, 0x10, 0x9A, 0x91,  // >..p....
                /* 01C0 */  0xE1, 0xAD, 0x06, 0x90, 0x82, 0xF1, 0x93, 0xC0,  // ........
                /* 01C8 */  0x23, 0x80, 0x09, 0xAC, 0xEB, 0x40, 0x00, 0xFD,  // #....@..
                /* 01D0 */  0xB2, 0xE1, 0xE1, 0xFB, 0x84, 0xF1, 0x78, 0x91,  // ......x.
                /* 01D8 */  0xA0, 0xBE, 0xFB, 0x00, 0x28, 0x80, 0x7C, 0x00,  // ....(.|.
                /* 01E0 */  0xB0, 0xD2, 0x3B, 0x00, 0x1D, 0x43, 0x88, 0x30,  // ..;..C.0
                /* 01E8 */  0xD1, 0x8C, 0xCE, 0x25, 0xAC, 0x54, 0xFF, 0xFF,  // ...%.T..
                /* 01F0 */  0xD1, 0xF2, 0x83, 0x8A, 0x47, 0x6B, 0x10, 0x8F,  // ....Gk..
                /* 01F8 */  0xD6, 0x81, 0x46, 0x8B, 0x3E, 0x66, 0x58, 0xE1,  // ..F.>fX.
                /* 0200 */  0xA8, 0xE4, 0x73, 0x02, 0x1A, 0x2E, 0x0C, 0x82,  // ..s.....
                /* 0208 */  0xC2, 0x0F, 0x1C, 0xD0, 0x00, 0x4F, 0xEF, 0xCD,  // .....O..
                /* 0210 */  0xC0, 0x33, 0x31, 0x9C, 0xE7, 0xCB, 0xE1, 0x3C,  // .31....<
                /* 0218 */  0x5F, 0x3E, 0x1C, 0x1F, 0x28, 0xE0, 0x0F, 0x18,  // _>..(...
                /* 0220 */  0x4B, 0x50, 0xE0, 0x84, 0x41, 0x0E, 0x8F, 0x11,  // KP..A...
                /* 0228 */  0x3C, 0x58, 0x2A, 0x6B, 0x5C, 0xA8, 0xFB, 0x81,  // <X*k\...
                /* 0230 */  0x4F, 0x34, 0x0C, 0xFB, 0x50, 0x8F, 0xE6, 0x2D,  // O4..P..-
                /* 0238 */  0xE1, 0x0C, 0xDF, 0x26, 0x0E, 0xEA, 0xDD, 0xC3,  // ...&....
                /* 0240 */  0x4E, 0x85, 0x5A, 0x74, 0x08, 0xEB, 0x91, 0x72,  // N.Zt...r
                /* 0248 */  0x58, 0xA3, 0x85, 0x3D, 0xE0, 0xE7, 0x0E, 0xDF,  // X..=....
                /* 0250 */  0x33, 0xF8, 0x95, 0xC6, 0xC7, 0x10, 0xBA, 0x0A,  // 3.......
                /* 0258 */  0x9D, 0x2A, 0xB8, 0x28, 0x08, 0xC5, 0x5B, 0x8B,  // .*.(..[.
                /* 0260 */  0x86, 0x7F, 0x16, 0x1E, 0xD7, 0x2B, 0x86, 0xAF,  // .....+..
                /* 0268 */  0x00, 0x0F, 0x27, 0x3E, 0x03, 0xC4, 0x0F, 0x74,  // ..'>...t
                /* 0270 */  0x04, 0x2F, 0x22, 0x3E, 0xFB, 0xF8, 0xF2, 0xE2,  // ./">....
                /* 0278 */  0x43, 0x06, 0x3B, 0x59, 0xF0, 0x10, 0x14, 0x8A,  // C.;Y....
                /* 0280 */  0x71, 0x38, 0x40, 0x09, 0x87, 0x11, 0x9C, 0x41,  // q8@....A
                /* 0288 */  0x3C, 0x3C, 0x07, 0x39, 0x1C, 0xA0, 0xCF, 0x41,  // <<.9...A
                /* 0290 */  0x1E, 0x08, 0x1B, 0x84, 0x41, 0xCE, 0xE3, 0xE5,  // ....A...
                /* 0298 */  0x87, 0x5D, 0x2C, 0xF0, 0xFF, 0xFF, 0x8B, 0x05,  // .],.....
                /* 02A0 */  0xF0, 0x4A, 0x33, 0x28, 0xB4, 0x9E, 0x41, 0x41,  // .J3(..AA
                /* 02A8 */  0xC0, 0x78, 0x7E, 0xF0, 0x78, 0x3D, 0x5B, 0x4F,  // .x~.x=[O
                /* 02B0 */  0x0B, 0xBC, 0x23, 0xF6, 0xF9, 0x03, 0x38, 0x87,  // ..#...8.
                /* 02B8 */  0x3F, 0xBC, 0xA0, 0xE2, 0x0E, 0x89, 0x82, 0xF8,  // ?.......
                /* 02C0 */  0x6C, 0xE0, 0x28, 0xE3, 0x45, 0xCF, 0xC4, 0x87,  // l.(.E...
                /* 02C8 */  0x21, 0x1F, 0x17, 0x9E, 0x6E, 0x30, 0x87, 0x0F,  // !...n0..
                /* 02D0 */  0x70, 0x8F, 0xC4, 0x87, 0x0F, 0xE0, 0xF1, 0xFF,  // p.......
                /* 02D8 */  0x3F, 0x7C, 0x00, 0x3F, 0x89, 0x16, 0xB5, 0x0A,  // ?|.?....
                /* 02E0 */  0x3D, 0x7C, 0x80, 0x2B, 0xC8, 0x09, 0x09, 0x2D,  // =|.+...-
                /* 02E8 */  0xE7, 0xF0, 0x81, 0x9C, 0x48, 0x98, 0xE8, 0x3E,  // ....H..>
                /* 02F0 */  0x23, 0xBD, 0x78, 0x58, 0xC2, 0xC1, 0x03, 0x15,  // #.xX....
                /* 02F8 */  0x9E, 0x44, 0xF1, 0x4F, 0x05, 0xA8, 0xC0, 0xA7,  // .D.O....
                /* 0300 */  0x02, 0x0A, 0x62, 0x40, 0x1F, 0x2A, 0xE0, 0xCC,  // ..b@.*..
                /* 0308 */  0xE0, 0xD9, 0x0B, 0x33, 0x0F, 0x18, 0x67, 0x24,  // ...3..g$
                /* 0310 */  0xC0, 0xD6, 0xA1, 0x02, 0xBC, 0xFF, 0xFF, 0x43,  // .......C
                /* 0318 */  0x05, 0x70, 0x38, 0x20, 0x01, 0xB2, 0x24, 0x5E,  // .p8 ..$^
                /* 0320 */  0x90, 0x1E, 0x2A, 0xC0, 0x75, 0xE0, 0xF4, 0xA1,  // ..*.u...
                /* 0328 */  0x82, 0x1F, 0x34, 0x2D, 0x0A, 0x48, 0x47, 0x3C,  // ..4-.HG<
                /* 0330 */  0x1F, 0x2A, 0x60, 0x5C, 0x84, 0x0C, 0xFF, 0x5A,  // .*`\...Z
                /* 0338 */  0x77, 0x2C, 0xCF, 0x61, 0xE4, 0x5C, 0x81, 0x8E,  // w,.a.\..
                /* 0340 */  0x7D, 0x30, 0x40, 0x05, 0x1D, 0x3D, 0x05, 0x31,  // }0@..=.1
                /* 0348 */  0xA0, 0x53, 0x1C, 0x0C, 0xD0, 0x3A, 0xCE, 0x15,  // .S...:..
                /* 0350 */  0xA8, 0x63, 0x1C, 0xF0, 0xFB, 0xFF, 0x9F, 0x29,  // .c.....)
                /* 0358 */  0x80, 0x93, 0x88, 0xA3, 0x15, 0x6A, 0xB8, 0x1E,  // .....j..
                /* 0360 */  0xAB, 0x41, 0x3C, 0x56, 0x1F, 0x43, 0x3D, 0x56,  // .A<V.C=V
                /* 0368 */  0xDC, 0x37, 0xC0, 0x47, 0x00, 0xFC, 0xD1, 0x09,  // .7.G....
                /* 0370 */  0x07, 0xF6, 0x5C, 0x01, 0x98, 0xF6, 0x78, 0xAE,  // ..\...x.
                /* 0378 */  0x00, 0x9D, 0xB4, 0xB3, 0x0F, 0x3A, 0xE0, 0x5A,  // .....:.Z
                /* 0380 */  0x75, 0x12, 0xC3, 0x9F, 0xE3, 0x18, 0xC1, 0x50,  // u......P
                /* 0388 */  0x87, 0x37, 0x0A, 0xE1, 0x38, 0x14, 0x0A, 0x73,  // .7..8..s
                /* 0390 */  0x32, 0xA0, 0xFF, 0xFF, 0x23, 0x2C, 0x81, 0xA3,  // 2...#,..
                /* 0398 */  0x20, 0x1E, 0x9A, 0xC3, 0x9C, 0xE1, 0x40, 0x73,  //  .....@s
                /* 03A0 */  0x2C, 0x80, 0x77, 0xAB, 0x60, 0xC7, 0x02, 0xD8,  // ,.w.`...
                /* 03A8 */  0x04, 0x3E, 0x16, 0x80, 0x2F, 0xCE, 0xB0, 0xD0,  // .>../...
                /* 03B0 */  0xA3, 0xF5, 0xFD, 0x0F, 0x77, 0x7F, 0x88, 0xF2,  // ....w...
                /* 03B8 */  0x52, 0xEC, 0x43, 0x0E, 0xDC, 0x71, 0x81, 0xE3,  // R.C..q..
                /* 03C0 */  0xF4, 0x00, 0xB8, 0x3A, 0x88, 0xC9, 0xE9, 0xE9,  // ...:....
                /* 03C8 */  0x01, 0x5C, 0x49, 0x4E, 0x0F, 0xA8, 0x01, 0xFB,  // .\IN....
                /* 03D0 */  0xFF, 0xAF, 0x07, 0x48, 0xE7, 0x04, 0xEC, 0x45,  // ...H...E
                /* 03D8 */  0x9B, 0x41, 0x9C, 0xE8, 0xF3, 0x88, 0x15, 0x1C,  // .A......
                /* 03E0 */  0x71, 0x50, 0xD9, 0x49, 0x94, 0xFC, 0x88, 0x83,  // qP.I....
                /* 03E8 */  0xCA, 0x3A, 0x76, 0x0A, 0x62, 0x40, 0x9F, 0x28,  // .:v.b@.(
                /* 03F0 */  0x01, 0x1F, 0x77, 0x1C, 0x60, 0xB1, 0x51, 0x4F,  // ..w.`.QO
                /* 03F8 */  0x96, 0x47, 0x9E, 0x2C, 0x05, 0xF1, 0x64, 0x7D,  // .G.,..d}
                /* 0400 */  0xA9, 0x00, 0x0E, 0x37, 0x1C, 0x60, 0xFF, 0xFF,  // ...7.`..
                /* 0408 */  0xBF, 0x54, 0x00, 0x25, 0x87, 0x52, 0x2F, 0x15,  // .T.%.R/.
                /* 0410 */  0x20, 0x93, 0x77, 0xC3, 0x41, 0x87, 0x5C, 0xAB,  //  .w.A.\.
                /* 0418 */  0xEE, 0x75, 0xEC, 0xD8, 0xEA, 0x71, 0xFB, 0x26,  // .u...q.&
                /* 0420 */  0x8D, 0x09, 0x76, 0xC3, 0x41, 0x45, 0xA2, 0x50,  // ..v.AE.P
                /* 0428 */  0xA0, 0x73, 0x01, 0x2A, 0x02, 0x1C, 0x05, 0xF1,  // .s.*....
                /* 0430 */  0xD0, 0x7C, 0x2E, 0xB0, 0x92, 0x73, 0x01, 0xDA,  // .|...s..
                /* 0438 */  0xFB, 0x85, 0x82, 0x0C, 0xCE, 0xF7, 0x02, 0xC3,  // ........
                /* 0440 */  0x14, 0x3F, 0x14, 0xDD, 0x7B, 0x7C, 0x2E, 0x00,  // .?..{|..
                /* 0448 */  0xF7, 0x15, 0x07, 0x5C, 0xC6, 0x04, 0x68, 0x83,  // ...\..h.
                /* 0450 */  0x24, 0xF7, 0x70, 0x8F, 0x0B, 0x37, 0x0E, 0x8F,  // $.p..7..
                /* 0458 */  0xEA, 0x98, 0x62, 0x3E, 0xC7, 0x05, 0x79, 0x8E,  // ..b>..y.
                /* 0460 */  0xF3, 0xBC, 0x70, 0xE7, 0x07, 0xE0, 0xF6, 0xFF,  // ..p.....
                /* 0468 */  0x1F, 0x18, 0xAC, 0x0B, 0x17, 0x10, 0x17, 0x6A,  // .......j
                /* 0470 */  0x52, 0xE2, 0xF9, 0x01, 0x5C, 0xB7, 0x6E, 0xDF,  // R...\.n.
                /* 0478 */  0x0B, 0x71, 0x52, 0xEE, 0xAE, 0x28, 0x8C, 0x57,  // .qR..(.W
                /* 0480 */  0x92, 0x18, 0xBE, 0xA7, 0x1A, 0xDB, 0x30, 0x07,  // ......0.
                /* 0488 */  0x70, 0x2A, 0xC6, 0x49, 0x30, 0xF8, 0xD9, 0x81,  // p*.I0...
                /* 0490 */  0x8E, 0xCB, 0x91, 0x49, 0x74, 0xDB, 0xF7, 0x11,  // ...It...
                /* 0498 */  0x82, 0xC7, 0x1C, 0x3D, 0x05, 0x31, 0xA0, 0x33,  // ...=.1.3
                /* 04A0 */  0x9C, 0x54, 0xD0, 0x2A, 0x40, 0x34, 0x05, 0xCC,  // .T.*@4..
                /* 04A8 */  0xCD, 0x15, 0xF0, 0xF7, 0xFF, 0xBF, 0xB9, 0x02,  // ........
                /* 04B0 */  0xAC, 0x70, 0xA9, 0x50, 0xA3, 0xD4, 0x23, 0x05,  // .p.P..#.
                /* 04B8 */  0xB8, 0xEE, 0x80, 0xBE, 0x85, 0xE1, 0x24, 0x01,  // ......$.
                /* 04C0 */  0xE9, 0xCA, 0x7A, 0x1A, 0x0F, 0x00, 0xBE, 0x52,  // ..z....R
                /* 04C8 */  0xC0, 0xB8, 0x78, 0xB2, 0x23, 0x0E, 0xBF, 0x5D,  // ..x.#..]
                /* 04D0 */  0xFB, 0x58, 0x00, 0xCC, 0xFF, 0xFF, 0x57, 0x42,  // .X....WB
                /* 04D8 */  0xB0, 0x1E, 0x0B, 0x80, 0xB7, 0x48, 0x97, 0x16,  // .....H..
                /* 04E0 */  0xCD, 0xDE, 0x8F, 0x41, 0x76, 0x2C, 0x40, 0x8B,  // ...Av,@.
                /* 04E8 */  0x02, 0x92, 0xC7, 0x59, 0x90, 0xA1, 0x3D, 0x96,  // ...Y..=.
                /* 04F0 */  0xBD, 0xEA, 0x79, 0x54, 0xCF, 0x00, 0x11, 0x4E,  // ..yT...N
                /* 04F8 */  0x24, 0x44, 0x02, 0xCB, 0x38, 0x16, 0xA0, 0x28,  // $D..8..(
                /* 0500 */  0x7C, 0x89, 0x87, 0x7B, 0xF3, 0x84, 0x33, 0x07,  // |..{..3.
                /* 0508 */  0xCC, 0x94, 0x5F, 0x5C, 0xF8, 0xB9, 0x00, 0xB0,  // .._\....
                /* 0510 */  0xF3, 0xFF, 0x3F, 0x17, 0x00, 0x13, 0xA5, 0x4A,  // ..?....J
                /* 0518 */  0x2D, 0xCA, 0x3C, 0x17, 0x00, 0x0B, 0x85, 0xB3,  // -.<.....
                /* 0520 */  0x10, 0x42, 0x90, 0x3E, 0x8F, 0x00, 0x3A, 0x01,  // .B.>..:.
                /* 0528 */  0xF8, 0x5C, 0x00, 0xD6, 0x21, 0xF2, 0x73, 0x01,  // .\..!.s.
                /* 0530 */  0x9F, 0x05, 0x9C, 0x73, 0x01, 0xF0, 0xBB, 0x04,  // ...s....
                /* 0538 */  0x3C, 0x33, 0xFA, 0x60, 0xE0, 0x63, 0xDA, 0x53,  // <3.`.c.S
                /* 0540 */  0x21, 0x90, 0xF7, 0xA9, 0xD0, 0xE3, 0xB9, 0x00,  // !.......
                /* 0548 */  0xD6, 0xFF, 0xFF, 0x5C, 0x00, 0xA6, 0x09, 0x3D,  // ...\...=
                /* 0550 */  0x17, 0x00, 0x16, 0xEE, 0xD1, 0xC0, 0xE3, 0x5C,  // .......\
                /* 0558 */  0x00, 0xA8, 0x38, 0x7C, 0x82, 0x2C, 0xCE, 0x69,  // ..8|.,.i
                /* 0560 */  0x0F, 0x2D, 0x0A, 0x48, 0xC7, 0x0F, 0x3C, 0xFC,  // .-.H..<.
                /* 0568 */  0xDB, 0x27, 0xD7, 0x79, 0xA0, 0x25, 0x47, 0x1A,  // .'.y.%G.
                /* 0570 */  0x4B, 0xB8, 0x22, 0xA3, 0xC2, 0x93, 0x28, 0xF6,  // K."...(.
                /* 0578 */  0x20, 0xC8, 0xFF, 0xFF, 0x64, 0xC0, 0x82, 0x9E,  //  ...d...
                /* 0580 */  0x0C, 0x28, 0x88, 0x01, 0x9D, 0xE2, 0x60, 0x89,  // .(....`.
                /* 0588 */  0xD6, 0x71, 0x1E, 0xF2, 0x14, 0x34, 0x88, 0x33,  // .q...4.3
                /* 0590 */  0x3A, 0x2B, 0x1F, 0xF7, 0x80, 0xE3, 0x99, 0x92,  // :+......
                /* 0598 */  0x1D, 0xF7, 0x80, 0xC5, 0x61, 0xCC, 0x63, 0xE5,  // ....a.c.
                /* 05A0 */  0xC3, 0xF5, 0x58, 0x0D, 0xE2, 0xB1, 0x3A, 0xD2,  // ..X...:.
                /* 05A8 */  0xA1, 0x02, 0xFD, 0x0D, 0xF0, 0x15, 0x00, 0xF6,  // ........
                /* 05B0 */  0x91, 0x0F, 0x18, 0x9E, 0x2B, 0x80, 0xE9, 0xFF,  // ....+...
                /* 05B8 */  0xFF, 0x5C, 0x01, 0x5B, 0xE7, 0xF1, 0x05, 0x74,  // .\.[...t
                /* 05C0 */  0x32, 0xCF, 0x15, 0xE8, 0xB0, 0xC7, 0x17, 0xC4,  // 2.......
                /* 05C8 */  0xA8, 0x42, 0x1E, 0x89, 0x81, 0x8F, 0xEC, 0x75,  // .B.....u
                /* 05D0 */  0xCC, 0x08, 0xCF, 0xC4, 0x8F, 0x5E, 0x46, 0x37,  // .....^F7
                /* 05D8 */  0xC1, 0x68, 0x07, 0x18, 0x54, 0x28, 0x0A, 0x9D,  // .h..T(..
                /* 05E0 */  0x93, 0x7D, 0x38, 0xE0, 0x21, 0xE0, 0x28, 0x88,  // .}8.!.(.
                /* 05E8 */  0x47, 0xE7, 0xC3, 0x01, 0x9C, 0x21, 0x3F, 0x0E,  // G....!?.
                /* 05F0 */  0xBC, 0x8E, 0x79, 0x50, 0x6C, 0x22, 0x30, 0xCE,  // ..yPl"0.
                /* 05F8 */  0x30, 0xC0, 0xF7, 0x3C, 0xED, 0x91, 0xE1, 0x86,  // 0..<....
                /* 0600 */  0xEF, 0x03, 0xC4, 0x79, 0x9D, 0xD4, 0x71, 0x01,  // ...y..q.
                /* 0608 */  0x9B, 0x33, 0x04, 0x30, 0xF8, 0xFF, 0x9F, 0x21,  // .3.0...!
                /* 0610 */  0x80, 0xA9, 0x57, 0xA1, 0x06, 0x8F, 0x3A, 0x20,  // ..W...: 
                /* 0618 */  0x13, 0x79, 0x86, 0x40, 0x71, 0x38, 0xEA, 0x19,  // .y.@q8..
                /* 0620 */  0x02, 0x61, 0xF5, 0xA4, 0x4C, 0x46, 0xF9, 0x0C,  // .a..LF..
                /* 0628 */  0x00, 0xE3, 0x08, 0x01, 0x30, 0xE6, 0xFF, 0x7F,  // ....0...
                /* 0630 */  0x84, 0x00, 0x9C, 0x59, 0x3D, 0x42, 0x80, 0x2C,  // ...Y=B.,
                /* 0638 */  0xD4, 0x11, 0x02, 0x35, 0x52, 0x4B, 0x3B, 0x7C,  // ...5RK;|
                /* 0640 */  0x21, 0x86, 0x16, 0xE3, 0x18, 0x1F, 0x01, 0xDE,  // !.......
                /* 0648 */  0x8B, 0x9B, 0x3F, 0x7F, 0x01, 0xE2, 0xFF, 0xFF,  // ..?.....
                /* 0650 */  0xE7, 0x2F, 0x80, 0x59, 0x62, 0x8F, 0x16, 0xA0,  // ./.Yb...
                /* 0658 */  0x0B, 0x73, 0xFE, 0x42, 0x4B, 0x02, 0x12, 0xF0,  // .s.BK...
                /* 0660 */  0x8B, 0xCA, 0x9B, 0x05, 0x9C, 0x03, 0xC6, 0x9B,  // ........
                /* 0668 */  0xB4, 0x07, 0xFF, 0x0C, 0xE0, 0x55, 0xF9, 0x5C,  // .....U.\
                /* 0670 */  0xC1, 0xA3, 0x9F, 0x2B, 0x40, 0xF8, 0xFF, 0x3F,  // ...+@..?
                /* 0678 */  0x57, 0x00, 0xF6, 0x24, 0x9C, 0x2B, 0x50, 0xA1,  // W..$.+P.
                /* 0680 */  0xC7, 0x4A, 0x41, 0x3C, 0x56, 0x07, 0x9A, 0x20,  // .JA<V.. 
                /* 0688 */  0x0A, 0xD2, 0xA7, 0x08, 0x1F, 0x02, 0xF0, 0x47,  // .......G
                /* 0690 */  0x00, 0xDC, 0xB1, 0x02, 0xF8, 0x29, 0x3E, 0x1F,  // .....)>.
                /* 0698 */  0x90, 0x9B, 0x80, 0x0F, 0x03, 0x3E, 0x56, 0x00,  // .....>V.
                /* 06A0 */  0x73, 0xB3, 0xC7, 0x0A, 0xE4, 0xFF, 0xFF, 0x58,  // s......X
                /* 06A8 */  0x01, 0x86, 0x40, 0xC7, 0x0A, 0x94, 0xA8, 0xA1,  // ..@.....
                /* 06B0 */  0xF8, 0x00, 0x04, 0xFD, 0xD8, 0x8C, 0x3B, 0xFE,  // ......;.
                /* 06B8 */  0x00, 0x5C, 0xB9, 0x03, 0xC0, 0x3F, 0x58, 0x00,  // .\...?X.
                /* 06C0 */  0xAB, 0xFF, 0xFF, 0xF1, 0x07, 0x30, 0x22, 0xF8,  // .....0".
                /* 06C8 */  0x60, 0x01, 0xBA, 0xA3, 0x23, 0xEE, 0x60, 0xE1,  // `...#.`.
                /* 06D0 */  0xA3, 0x23, 0xE6, 0x60, 0x01, 0x86, 0x58, 0x87,  // .#.`..X.
                /* 06D8 */  0x47, 0x54, 0x20, 0x0A, 0x1D, 0xF7, 0x7D, 0x3A,  // GT ...}:
                /* 06E0 */  0xE0, 0x01, 0xE0, 0x28, 0x88, 0x87, 0xE7, 0x28,  // ...(...(
                /* 06E8 */  0x07, 0x0B, 0xF4, 0xA8, 0x7D, 0xB0, 0xC0, 0x1E,  // ....}...
                /* 06F0 */  0x1C, 0x81, 0xE1, 0xD1, 0x02, 0x7B, 0x84, 0x00,  // .....{..
                /* 06F8 */  0x0E, 0xFF, 0xFF, 0xA3, 0x23, 0x60, 0xD6, 0xF0,  // ....#`..
                /* 0700 */  0x11, 0x02, 0x74, 0xE1, 0xD6, 0xA9, 0x23, 0x04,  // ..t...#.
                /* 0708 */  0x4E, 0xE2, 0x11, 0x02, 0x71, 0x03, 0x80, 0x81,  // N...q...
                /* 0710 */  0xF4, 0xFC, 0x84, 0x95, 0x73, 0x84, 0x40, 0x09,  // ....s.@.
                /* 0718 */  0xA1, 0x90, 0x8C, 0x23, 0x04, 0x2A, 0x38, 0x18,  // ...#.*8.
                /* 0720 */  0x05, 0xF1, 0x00, 0x1D, 0xEA, 0x74, 0x80, 0x3E,  // .....t.>
                /* 0728 */  0xAB, 0x79, 0x22, 0x60, 0x38, 0x47, 0x00, 0xAF,  // .y"`8G..
                /* 0730 */  0xFF, 0xFF, 0xF1, 0x00, 0x30, 0xE2, 0xF1, 0x34,  // ....0..4
                /* 0738 */  0xFF, 0x78, 0x00, 0xB2, 0xD3, 0x89, 0x8F, 0x07,  // .x......
                /* 0740 */  0x7C, 0xC0, 0x16, 0x05, 0xA4, 0x89, 0x1D, 0xC4,  // |.......
                /* 0748 */  0x0B, 0x47, 0xC4, 0xF3, 0x0D, 0x5A, 0x33, 0x8A,  // .G...Z3.
                /* 0750 */  0x4E, 0x00, 0xE1, 0x43, 0x3F, 0xAF, 0x25, 0xF0,  // N..C?.%.
                /* 0758 */  0xB9, 0xC0, 0x67, 0x03, 0x4E, 0xE1, 0xF8, 0xA7,  // ..g.N...
                /* 0760 */  0x2A, 0x54, 0x60, 0x30, 0x0A, 0xE2, 0xD1, 0x39,  // *T`0...9
                /* 0768 */  0x0C, 0x84, 0x9C, 0x9C, 0x0D, 0x50, 0x52, 0x40,  // .....PR@
                /* 0770 */  0x34, 0xD1, 0x17, 0x67, 0xDF, 0x86, 0x3D, 0xE5,  // 4..g..=.
                /* 0778 */  0xB3, 0xF3, 0x75, 0xC5, 0xE7, 0x22, 0x70, 0x1F,  // ..u.."p.
                /* 0780 */  0x57, 0xC0, 0xE5, 0x4C, 0x80, 0xB2, 0x73, 0x01,  // W..L..s.
                /* 0788 */  0xD0, 0xF9, 0xFF, 0x9F, 0x0B, 0xC0, 0x26, 0x55,  // ......&U
                /* 0790 */  0xA3, 0x44, 0x99, 0xE7, 0x02, 0x70, 0x45, 0x39,  // .D...pE9
                /* 0798 */  0x17, 0xA0, 0x60, 0x2D, 0xE8, 0x14, 0x82, 0xD0,  // ..`-....
                /* 07A0 */  0x78, 0xC0, 0x26, 0xE7, 0x10, 0xCC, 0xE1, 0x8B,  // x.&.....
                /* 07A8 */  0x1D, 0x0B, 0xF8, 0xA9, 0xC0, 0xE1, 0x8F, 0x05,  // ........
                /* 07B0 */  0xA8, 0xB8, 0x60, 0x14, 0xC4, 0x83, 0xF3, 0x99,  // ..`.....
                /* 07B8 */  0xC8, 0x46, 0x8E, 0x05, 0xE8, 0x61, 0x30, 0xAD,  // .F...a0.
                /* 07C0 */  0xC3, 0xD0, 0x98, 0x0E, 0xFE, 0xA1, 0x88, 0xA1,  // ........
                /* 07C8 */  0x3C, 0x7D, 0x80, 0x7D, 0xAC, 0x3E, 0x16, 0x80,  // <}.}.>..
                /* 07D0 */  0x43, 0xDC, 0xA9, 0x00, 0xA8, 0x2B, 0x7C, 0x15,  // C....+|.
                /* 07D8 */  0x3C, 0x7C, 0x80, 0x4C, 0xDC, 0x51, 0x16, 0xF9,  // <|.L.Q..
                /* 07E0 */  0xFF, 0x27, 0x18, 0xF1, 0x54, 0x80, 0xB8, 0x1C,  // .'..T...
                /* 07E8 */  0xE3, 0xAE, 0x1F, 0x58, 0x02, 0x1F, 0xBC, 0x7C,  // ...X...|
                /* 07F0 */  0x30, 0xE0, 0xC7, 0x04, 0x07, 0x39, 0xE9, 0xA0,  // 0....9..
                /* 07F8 */  0xA4, 0xC3, 0x51, 0x10, 0x8F, 0xCE, 0xC7, 0x7B,  // ..Q....{
                /* 0800 */  0x38, 0x87, 0x66, 0xF0, 0x1D, 0x73, 0x80, 0x57,  // 8.f..s.W
                /* 0808 */  0x90, 0x53, 0x0A, 0x5A, 0x06, 0x88, 0x6E, 0x0F,  // .S.Z..n.
                /* 0810 */  0xB8, 0x83, 0x17, 0xF0, 0x3B, 0xA3, 0x00, 0x2A,  // ....;..*
                /* 0818 */  0x8E, 0x0F, 0xFA, 0xFF, 0x1F, 0x1F, 0xC0, 0x14,  // ........
                /* 0820 */  0xEA, 0xE0, 0x85, 0x96, 0x76, 0x46, 0x41, 0xDE,  // ....vFA.
                /* 0828 */  0xE5, 0x82, 0x3C, 0xF5, 0xF8, 0x76, 0x75, 0x5C,  // ..<..vu\
                /* 0830 */  0xA1, 0x5E, 0x53, 0x3C, 0x99, 0xF7, 0x1E, 0x7E,  // .^S<...~
                /* 0838 */  0x1A, 0x02, 0xD8, 0x63, 0xF3, 0xA0, 0x02, 0x3A,  // ...c...:
                /* 0840 */  0xF1, 0xAB, 0xA0, 0x47, 0x6E, 0xCB, 0x85, 0x41,  // ...Gn..A
                /* 0848 */  0x49, 0x18, 0x3B, 0x94, 0xD1, 0xFC, 0xFF, 0x0F,  // I.;.....
                /* 0850 */  0xE6, 0x18, 0x82, 0xB3, 0x33, 0x8B, 0xE1, 0xF8,  // ....3...
                /* 0858 */  0x40, 0x3D, 0xF5, 0x67, 0x84, 0xD3, 0x78, 0x34,  // @=.g..x4
                /* 0860 */  0xF1, 0xAC, 0xDE, 0x13, 0x42, 0x32, 0x69, 0x43,  // ....B2iC
                /* 0868 */  0x44, 0x1D, 0x0B, 0x3C, 0xD6, 0xB7, 0x02, 0x6B,  // D..<...k
                /* 0870 */  0x47, 0xD4, 0x29, 0x14, 0x33, 0x44, 0x86, 0xC6,  // G.).3D..
                /* 0878 */  0x4F, 0x44, 0x0C, 0x9A, 0x9F, 0x45, 0x7C, 0x23,  // OD...E|#
                /* 0880 */  0x79, 0x0D, 0xF0, 0xDC, 0x4C, 0xD0, 0xFD, 0xD0,  // y...L...
                /* 0888 */  0x75, 0x61, 0x8A, 0xF0, 0x04, 0xF0, 0x4E, 0xF0,  // ua....N.
                /* 0890 */  0x06, 0xD1, 0xDB, 0x55, 0x40, 0xB6, 0xCE, 0x40,  // ...U@..@
                /* 0898 */  0x1A, 0x7D, 0xAC, 0x17, 0xCD, 0x28, 0x21, 0x22,  // .}...(!"
                /* 08A0 */  0x04, 0x8D, 0x62, 0xBC, 0x08, 0xA1, 0x42, 0x44,  // ..b...BD
                /* 08A8 */  0x89, 0xDA, 0x1C, 0x88, 0xEE, 0x9B, 0x51, 0x83,  // ......Q.
                /* 08B0 */  0x44, 0x0B, 0x66, 0x04, 0x66, 0x7F, 0x10, 0x44,  // D.f.f..D
                /* 08B8 */  0xFA, 0x33, 0x40, 0xD7, 0x65, 0x1F, 0x3B, 0xF1,  // .3@.e.;.
                /* 08C0 */  0xE7, 0x75, 0x36, 0xC7, 0xC7, 0x0A, 0x5F, 0x4E,  // .u6..._N
                /* 08C8 */  0x3D, 0xC8, 0x73, 0x7B, 0xA2, 0xC1, 0x1D, 0x1E,  // =.s{....
                /* 08D0 */  0x7C, 0x86, 0x80, 0xE3, 0x1A, 0x50, 0x33, 0x3E,  // |....P3>
                /* 08D8 */  0x5E, 0xF6, 0xDD, 0x30, 0x1C, 0x1F, 0xA2, 0x07,  // ^..0....
                /* 08E0 */  0xFA, 0x8A, 0xEE, 0x21, 0x32, 0x40, 0x1F, 0x22,  // ...!2@."
                /* 08E8 */  0xE0, 0x8F, 0xC7, 0x47, 0x1A, 0x9C, 0xFC, 0x83,  // ...G....
                /* 08F0 */  0x3D, 0x1A, 0xDA, 0x23, 0x7D, 0x04, 0x31, 0xE4,  // =..#}.1.
                /* 08F8 */  0xE1, 0x1F, 0x16, 0x13, 0x7B, 0x76, 0xA0, 0xE3,  // ....{v..
                /* 0900 */  0x01, 0xFF, 0x79, 0x1E, 0x1F, 0xE1, 0x24, 0x82,  // ..y...$.
                /* 0908 */  0xF8, 0xFF, 0x8F, 0x07, 0x03, 0x7A, 0x36, 0x3E,  // .....z6>
                /* 0910 */  0x43, 0xF8, 0xE6, 0xC1, 0x8E, 0x16, 0xFC, 0xAC,  // C.......
                /* 0918 */  0xE2, 0xA3, 0x05, 0x3F, 0x2D, 0xF8, 0xA0, 0xC0,  // ...?-...
                /* 0920 */  0x10, 0x4F, 0xE1, 0x19, 0xC0, 0x27, 0x0B, 0x76,  // .O...'.v
                /* 0928 */  0xDC, 0x01, 0xA7, 0xBC, 0x43, 0x08, 0x28, 0x40,  // ....C.(@
                /* 0930 */  0x7C, 0xB2, 0x60, 0xF3, 0xC2, 0x10, 0xF8, 0x38,  // |.`....8
                /* 0938 */  0x1C, 0x1E, 0x73, 0xE8, 0x30, 0x3C, 0x3F, 0x25,  // ..s.0<?%
                /* 0940 */  0x3C, 0x8E, 0x30, 0xEC, 0x37, 0x12, 0x4F, 0xE1,  // <.0.7.O.
                /* 0948 */  0x70, 0x7C, 0xA4, 0xF0, 0x45, 0xCE, 0x72, 0x4F,  // p|..E.rO
                /* 0950 */  0x16, 0xE4, 0x94, 0x85, 0x1D, 0xAA, 0x87, 0xC0,  // ........
                /* 0958 */  0xCF, 0x0B, 0x1E, 0x02, 0x1F, 0x40, 0xAB, 0xB3,  // .....@..
                /* 0960 */  0x23, 0xE7, 0x93, 0x73, 0xC2, 0x8D, 0x97, 0x8F,  // #..s....
                /* 0968 */  0x09, 0x3B, 0x00, 0x9E, 0x72, 0x19, 0xCF, 0x22,  // .;..r.."
                /* 0970 */  0x88, 0x18, 0xCB, 0xF7, 0x71, 0x04, 0x90, 0x33,  // ....q..3
                /* 0978 */  0x89, 0x27, 0x90, 0x08, 0x2F, 0x23, 0xFF, 0xFF,  // .'../#..
                /* 0980 */  0x20, 0x21, 0x8E, 0xE5, 0x35, 0xC4, 0x20, 0x31,  //  !..5. 1
                /* 0988 */  0x8E, 0xE1, 0x64, 0x1E, 0x47, 0x38, 0xCC, 0x33,  // ..d.G8.3
                /* 0990 */  0x89, 0xE1, 0x1E, 0x0E, 0x5E, 0x45, 0x5E, 0x48,  // ....^E^H
                /* 0998 */  0x0C, 0xF3, 0x28, 0xE2, 0xF3, 0x41, 0x0C, 0x63,  // ..(..A.c
                /* 09A0 */  0x86, 0x8A, 0x76, 0x02, 0x3E, 0x8E, 0xB0, 0x48,  // ..v.>..H
                /* 09A8 */  0x0F, 0x06, 0x0D, 0xD5, 0xC7, 0x11, 0x80, 0x1F,  // ........
                /* 09B0 */  0x47, 0x04, 0xDC, 0x69, 0x03, 0xEE, 0x7D, 0x22,  // G..i..}"
                /* 09B8 */  0xC4, 0x93, 0xC6, 0x4B, 0xC2, 0xB3, 0x06, 0x70,  // ...K...p
                /* 09C0 */  0x51, 0xC5, 0x5C, 0x80, 0x21, 0x10, 0xA5, 0x79,  // Q.\.!..y
                /* 09C8 */  0x0C, 0xE8, 0x88, 0xC6, 0x39, 0xFE, 0xFF, 0x09,  // ....9...
                /* 09D0 */  0x6A, 0x02, 0xD2, 0x30, 0x39, 0xE3, 0xB9, 0x3F,  // j..09..?
                /* 09D8 */  0x17, 0x9C, 0x5D, 0xEC, 0x20, 0x61, 0x82, 0x3C,  // ..]. a.<
                /* 09E0 */  0x11, 0xBC, 0x46, 0xF9, 0x14, 0x24, 0x48, 0x9D,  // ..F..$H.
                /* 09E8 */  0x54, 0x3C, 0x6A, 0xA7, 0xA7, 0x90, 0xEE, 0xF3,  // T<j.....
                /* 09F0 */  0x22, 0x4A, 0xE9, 0x39, 0x8D, 0x82, 0xF8, 0x8C,  // "J.9....
                /* 09F8 */  0xE0, 0x10, 0x07, 0x41, 0x28, 0x73, 0x38, 0xA3,  // ...A(s8.
                /* 0A00 */  0x03, 0x79, 0x0F, 0x60, 0xE7, 0xAC, 0xA0, 0x6C,  // .y.`...l
                /* 0A08 */  0x8C, 0x3E, 0x07, 0xF0, 0xD3, 0x91, 0x0F, 0x82,  // .>......
                /* 0A10 */  0x0C, 0xB8, 0x9A, 0xC3, 0x0C, 0x0A, 0xCC, 0xA7,  // ........
                /* 0A18 */  0x33, 0x8C, 0xAE, 0x8B, 0x0C, 0xC8, 0x4E, 0x3A,  // 3.....N:
                /* 0A20 */  0x78, 0x74, 0xDF, 0x14, 0xCE, 0xF3, 0xFD, 0xC0,  // xt......
                /* 0A28 */  0x23, 0x02, 0xEB, 0x4C, 0x3D, 0x22, 0xB0, 0xE9,  // #..L="..
                /* 0A30 */  0x3B, 0xBD, 0x81, 0x1C, 0x9D, 0x87, 0xB8, 0x0B,  // ;.......
                /* 0A38 */  0xA0, 0x64, 0xDF, 0x05, 0x28, 0x88, 0x27, 0xE6,  // .d..(.'.
                /* 0A40 */  0x2B, 0xAF, 0xAF, 0x48, 0x78, 0xFC, 0x17, 0x42,  // +..Hx..B
                /* 0A48 */  0x5F, 0x17, 0x30, 0x57, 0x3F, 0xB8, 0xFF, 0xFF,  // _.0W?...
                /* 0A50 */  0xAB, 0x1F, 0xFC, 0xCB, 0x82, 0xAF, 0x49, 0xE0,  // ......I.
                /* 0A58 */  0xBB, 0x88, 0xC2, 0xB9, 0x0D, 0x3C, 0x3C, 0xB1,  // .....<<.
                /* 0A60 */  0x41, 0x81, 0x1F, 0xCA, 0xD7, 0x43, 0xC0, 0x93,  // A....C..
                /* 0A68 */  0x52, 0xA7, 0x36, 0x15, 0xDE, 0xBD, 0x41, 0x76,  // R.6...Av
                /* 0A70 */  0x2D, 0x41, 0xDD, 0x9A, 0x2C, 0x08, 0x48, 0xDE,  // -A..,.H.
                /* 0A78 */  0xCF, 0x37, 0x04, 0xD3, 0xE7, 0x12, 0x78, 0x77,  // .7....xw
                /* 0A80 */  0x50, 0xAD, 0x4A, 0xF7, 0x12, 0x1E, 0x9C, 0x42,  // P.J....B
                /* 0A88 */  0xD1, 0x0F, 0x0F, 0xA8, 0xB0, 0x87, 0x07, 0x0A,  // ........
                /* 0A90 */  0xE2, 0x8B, 0x91, 0xEF, 0x25, 0xF8, 0xFF, 0xFF,  // ....%...
                /* 0A98 */  0xBD, 0x04, 0x70, 0x9F, 0x61, 0x44, 0x68, 0x15,  // ..p.aDh.
                /* 0AA0 */  0x47, 0x0B, 0xE4, 0x8C, 0xC0, 0x7A, 0x22, 0xF0,  // G....z".
                /* 0AA8 */  0xC9, 0x05, 0x38, 0xDF, 0xFD, 0xE1, 0x9F, 0x5C,  // ..8....\
                /* 0AB0 */  0xE0, 0xFD, 0xFF, 0x4F, 0x2E, 0xC0, 0xE1, 0x54,  // ...O...T
                /* 0AB8 */  0x02, 0xB8, 0xF2, 0x7A, 0x2A, 0x01, 0xDD, 0xDD,  // ...z*...
                /* 0AC0 */  0x0B, 0x4C, 0x57, 0x93, 0x07, 0x6B, 0x83, 0xFB,  // .LW..k..
                /* 0AC8 */  0xEE, 0x05, 0xB8, 0xFA, 0xFF, 0xDF, 0xBD, 0x00,  // ........
                /* 0AD0 */  0xFE, 0xFF, 0xFF, 0xEF, 0x5E, 0x80, 0x0C, 0xAF,  // ....^...
                /* 0AD8 */  0x77, 0x2F, 0xE0, 0x75, 0x2E, 0xC1, 0xDC, 0xBD,  // w/.u....
                /* 0AE0 */  0x00, 0x3E, 0xFC, 0xFF, 0xEF, 0x5E, 0x00, 0xFF,  // .>...^..
                /* 0AE8 */  0xFF, 0xFF, 0x77, 0x2F, 0x10, 0x9C, 0x4A, 0x40,  // ..w/..J@
                /* 0AF0 */  0x96, 0xED, 0x54, 0x82, 0x56, 0x78, 0x8E, 0x86,  // ..T.Vx..
                /* 0AF8 */  0x3A, 0x81, 0x43, 0x79, 0xC2, 0x78, 0x55, 0x4F,  // :.Cy.xUO
                /* 0B00 */  0x60, 0x3D, 0x97, 0x2F, 0x94, 0x12, 0x18, 0x5D,  // `=./...]
                /* 0B08 */  0xBE, 0x00, 0xA6, 0xFD, 0xFF, 0x09, 0x1C, 0xE8,  // ........
                /* 0B10 */  0x2E, 0x80, 0x8A, 0x70, 0x17, 0xA0, 0x20, 0xBE,  // ...p.. .
                /* 0B18 */  0x7C, 0x01, 0x5E, 0x42, 0x41, 0xC8, 0xC8, 0x4D,  // |.^BA..M
                /* 0B20 */  0x82, 0x5E, 0xBE, 0xE0, 0x5C, 0x1C, 0x7C, 0x3F,  // .^..\.|?
                /* 0B28 */  0xF2, 0xA0, 0xC0, 0x35, 0x98, 0xF3, 0x2E, 0xF6,  // ...5....
                /* 0B30 */  0xA4, 0x48, 0xAF, 0x27, 0x70, 0xEF, 0x1C, 0x1E,  // .H.'p...
                /* 0B38 */  0x1B, 0x38, 0xC4, 0x5D, 0xC1, 0x80, 0xBD, 0xCB,  // .8.]....
                /* 0B40 */  0xDB, 0x09, 0x78, 0xFE, 0xFF, 0x63, 0xB6, 0xB6,  // ..x..c..
                /* 0B48 */  0xB5, 0xEB, 0x76, 0x82, 0x4B, 0x78, 0x9C, 0x86,  // ..v.Kx..
                /* 0B50 */  0x7C, 0x3C, 0xC1, 0xE4, 0xB9, 0x9D, 0xA0, 0x92,  // |<......
                /* 0B58 */  0xC0, 0x28, 0x0B, 0x89, 0x8E, 0x10, 0x5C, 0xFD,  // .(....\.
                /* 0B60 */  0x4D, 0x8C, 0x82, 0xD8, 0xC2, 0xED, 0x04, 0xA0,  // M.......
                /* 0B68 */  0xC3, 0x98, 0xE1, 0x8C, 0xE8, 0xBD, 0xC2, 0x90,  // ........
                /* 0B70 */  0x3E, 0x83, 0x01, 0xD3, 0x40, 0x10, 0xFA, 0xFF,  // >...@...
                /* 0B78 */  0x1F, 0x41, 0x70, 0x97, 0x34, 0x6C, 0x82, 0x1B,  // .Ap.4l..
                /* 0B80 */  0x08, 0x9D, 0x11, 0xBC, 0x0B, 0x08, 0xDC, 0x89,  // ........
                /* 0B88 */  0xC1, 0x3A, 0x80, 0x80, 0xEF, 0xAC, 0x06, 0x18,  // .:......
                /* 0B90 */  0x3C, 0x00, 0xF8, 0xAC, 0x06, 0xD8, 0xF9, 0xFF,  // <.......
                /* 0B98 */  0x9F, 0xD5, 0x90, 0xB7, 0x17, 0x90, 0x5D, 0x53,  // ......]S
                /* 0BA0 */  0x7C, 0x7B, 0xE1, 0x03, 0xB6, 0x06, 0x20, 0x1D,  // |{.... .
                /* 0BA8 */  0x1F, 0x4E, 0xFF, 0x38, 0x8E, 0xE2, 0xBC, 0x4E,  // .N.8...N
                /* 0BB0 */  0xE3, 0x05, 0x26, 0x46, 0xCD, 0xA7, 0x0C, 0x32,  // ..&F...2
                /* 0BB8 */  0xE1, 0xDE, 0x00, 0x95, 0xFA, 0x1A, 0x45, 0x47,  // ......EG
                /* 0BC0 */  0xE5, 0xBC, 0x24, 0x4A, 0x7D, 0x2C, 0x40, 0xE5,  // ..$J},@.
                /* 0BC8 */  0x3C, 0x16, 0x50, 0x10, 0x03, 0xFA, 0xE2, 0x61,  // <.P....a
                /* 0BD0 */  0x25, 0x17, 0x0F, 0xF4, 0x20, 0x4E, 0xF6, 0x0D,  // %... N..
                /* 0BD8 */  0xD5, 0x17, 0x0F, 0x30, 0xDF, 0x5D, 0xC0, 0x65,  // ...0.].e
                /* 0BE0 */  0xEC, 0xD6, 0xF3, 0x42, 0x01, 0x44, 0x82, 0x4F,  // ...B.D.O
                /* 0BE8 */  0x15, 0x15, 0x75, 0xAA, 0x14, 0xC4, 0x53, 0x75,  // ..u...Su
                /* 0BF0 */  0x8C, 0x13, 0x89, 0xA7, 0x8A, 0x3E, 0x09, 0x9D,  // .....>..
                /* 0BF8 */  0xDB, 0x1B, 0x09, 0x3F, 0x0F, 0xBC, 0x4F, 0x80,  // ...?..O.
                /* 0C00 */  0x79, 0x28, 0x3E, 0x8C, 0xC0, 0xFF, 0xFF, 0x1F,  // y(>.....
                /* 0C08 */  0xAE, 0x00, 0x07, 0x0A, 0x7D, 0x9A, 0x54, 0x7A,  // ....}.Tz
                /* 0C10 */  0x9D, 0x00, 0x97, 0xA0, 0xEB, 0x04, 0x3A, 0xD6,  // ......:.
                /* 0C18 */  0x52, 0x75, 0x9D, 0x80, 0x37, 0x4C, 0x07, 0xB9,  // Ru..7L..
                /* 0C20 */  0x4E, 0xD0, 0x63, 0x1E, 0x0F, 0x70, 0xD8, 0x43,  // N.c..p.C
                /* 0C28 */  0x49, 0x86, 0xA3, 0x20, 0x1E, 0x9B, 0xEF, 0xE4,  // I.. ....
                /* 0C30 */  0xBE, 0x4E, 0xC0, 0xBD, 0xB3, 0xC0, 0xBB, 0x4E,  // .N.....N
                /* 0C38 */  0xB0, 0x43, 0x01, 0x6C, 0x02, 0xDF, 0x59, 0xC0,  // .C.l..Y.
                /* 0C40 */  0x73, 0xA0, 0x60, 0x07, 0x07, 0x30, 0x0F, 0x0A,  // s.`..0..
                /* 0C48 */  0x1C, 0xC3, 0xF5, 0xFF, 0xFF, 0xE0, 0x00, 0x68,  // .......h
                /* 0C50 */  0xBA, 0xD1, 0x82, 0x4C, 0xFF, 0xC1, 0x01, 0xAD,  // ...L....
                /* 0C58 */  0xE2, 0x5A, 0x03, 0x51, 0xDA, 0x69, 0x88, 0xE4,  // .Z.Q.i..
                /* 0C60 */  0xBE, 0xD6, 0xA0, 0x12, 0x5F, 0x6B, 0x00, 0xD9,  // ...._k..
                /* 0C68 */  0xD1, 0x05, 0xFC, 0xFF, 0xCF, 0xFB, 0xA8, 0xA9,  // ........
                /* 0C70 */  0x52, 0x10, 0x4F, 0xD5, 0x57, 0x0E, 0x58, 0xD7,  // R.O.W.X.
                /* 0C78 */  0x09, 0xCC, 0xB1, 0x0B, 0xDC, 0x43, 0xF1, 0x95,  // .....C..
                /* 0C80 */  0x03, 0x7C, 0xC7, 0x2E, 0x20, 0x7E, 0xAF, 0x01,  // .|.. ~..
                /* 0C88 */  0x9D, 0xA4, 0xFB, 0x04, 0x3A, 0xD8, 0xBD, 0x06,  // ....:...
                /* 0C90 */  0xE2, 0x7D, 0xE2, 0x69, 0xED, 0x89, 0x4E, 0xF7,  // .}.i..N.
                /* 0C98 */  0x1A, 0x54, 0x08, 0x0A, 0x5D, 0x6C, 0x7C, 0x2A,  // .T..]l|*
                /* 0CA0 */  0xE0, 0xA2, 0xE1, 0x28, 0x88, 0xEF, 0x35, 0xC0,  // ...(..5.
                /* 0CA8 */  0xEA, 0xFF, 0x7F, 0xAF, 0x01, 0xFB, 0xC9, 0x01,  // ........
                /* 0CB0 */  0xBC, 0xF7, 0x1A, 0xF0, 0x9C, 0x1C, 0x00, 0x55,  // .......U
                /* 0CB8 */  0x17, 0x1B, 0x90, 0x25, 0x38, 0x39, 0xA0, 0x75,  // ...%89.u
                /* 0CC0 */  0x5C, 0x6C, 0xA0, 0x22, 0x24, 0x98, 0xFC, 0x62,  // \l."$..b
                /* 0CC8 */  0x83, 0xCA, 0x7C, 0xB1, 0x01, 0x32, 0xFF, 0xFF,  // ..|..2..
                /* 0CD0 */  0x8B, 0x0D, 0xE0, 0xE7, 0x7E, 0x0A, 0xBE, 0x8B,  // ....~...
                /* 0CD8 */  0xC0, 0x03, 0x05, 0xEE, 0x66, 0x03, 0x4C, 0xEF,  // ....f.L.
                /* 0CE0 */  0xA7, 0xC0, 0x5F, 0xE2, 0xCD, 0x06, 0x74, 0xA2,  // .._...t.
                /* 0CE8 */  0x2E, 0x14, 0xF4, 0xFF, 0x7F, 0xA1, 0xE0, 0xD1,  // ........
                /* 0CF0 */  0x6E, 0x36, 0x50, 0xAD, 0x01, 0x2A, 0xCC, 0xCD,  // n6P..*..
                /* 0CF8 */  0x06, 0x15, 0x83, 0x42, 0x57, 0x1B, 0x1F, 0x0B,  // ...BW...
                /* 0D00 */  0xB8, 0x6C, 0x38, 0x0A, 0xE2, 0x9B, 0x0D, 0xE0,  // .l8.....
                /* 0D08 */  0xE4, 0xE8, 0x00, 0xEE, 0xAB, 0x0D, 0xF0, 0x39,  // .......9
                /* 0D10 */  0x3A, 0x00, 0x0A, 0xAE, 0x36, 0xC8, 0xFF, 0xFF,  // :...6...
                /* 0D18 */  0xD1, 0x01, 0xBE, 0x8A, 0x55, 0xE8, 0xE8, 0x80,  // ....U...
                /* 0D20 */  0xCB, 0x72, 0x53, 0x86, 0x6A, 0x0E, 0x50, 0xB7,  // .rS.j.P.
                /* 0D28 */  0x66, 0x5F, 0x6D, 0xB8, 0x6E, 0x0A, 0x29, 0x3F,  // f_m.n.)?
                /* 0D30 */  0x3A, 0xA0, 0xB4, 0x1E, 0x1D, 0x28, 0x88, 0xC7,  // :....(..
                /* 0D38 */  0xE6, 0x14, 0xC7, 0x02, 0xB4, 0x8E, 0x63, 0x01,  // ......c.
                /* 0D40 */  0x9D, 0x6B, 0x8C, 0x08, 0xCF, 0x0E, 0xCF, 0x36,  // .k.....6
                /* 0D48 */  0xC0, 0xF1, 0x50, 0xC0, 0x32, 0xDC, 0x44, 0xA1,  // ..P.2.D.
                /* 0D50 */  0x5C, 0x00, 0x22, 0x9E, 0xD1, 0xF9, 0x9B, 0xE0,  // \.".....
                /* 0D58 */  0x44, 0x0F, 0x09, 0x9C, 0x07, 0x51, 0xF0, 0x5D,  // D....Q.]
                /* 0D60 */  0x7E, 0x80, 0xF3, 0xFF, 0xFF, 0xF2, 0x03, 0x6C,  // ~......l
                /* 0D68 */  0x46, 0xE2, 0x2B, 0x07, 0xE0, 0xC9, 0xA6, 0x45,  // F.+....E
                /* 0D70 */  0x9B, 0x97, 0x1F, 0x90, 0x85, 0xBB, 0xFC, 0xA0,  // ........
                /* 0D78 */  0x25, 0x5E, 0x39, 0x20, 0x1E, 0x67, 0x8E, 0xD8,  // %^9 .g..
                /* 0D80 */  0x17, 0x21, 0x5F, 0x7E, 0xB8, 0x1C, 0x18, 0x89,  // .!_~....
                /* 0D88 */  0x81, 0xD0, 0xB1, 0x80, 0xC7, 0xBF, 0x72, 0x50,  // ......rP
                /* 0D90 */  0x10, 0x4B, 0x38, 0x16, 0x40, 0xBD, 0x72, 0x60,  // .K8.@.r`
                /* 0D98 */  0x6E, 0x3F, 0xC0, 0xEB, 0xFF, 0x7F, 0x2C, 0x80,  // n?....,.
                /* 0DA0 */  0x79, 0x9D, 0x86, 0x73, 0xEA, 0xC0, 0x5D, 0xA7,  // y..s..].
                /* 0DA8 */  0x81, 0xEB, 0x05, 0x09, 0xF8, 0x1D, 0x2F, 0x00,  // ....../.
                /* 0DB0 */  0x5D, 0x17, 0x24, 0x90, 0xC5, 0x78, 0x48, 0xE8,  // ].$..xH.
                /* 0DB8 */  0x78, 0x81, 0x13, 0x03, 0xA4, 0xE3, 0x05, 0xE6,  // x.......
                /* 0DC0 */  0xFF, 0x7F, 0xBC, 0xC0, 0x22, 0x3C, 0x55, 0x68,  // ...."<Uh
                /* 0DC8 */  0x45, 0xBA, 0x20, 0xF1, 0xE0, 0x30, 0x8A, 0x7E,  // E. ..0.~
                /* 0DD0 */  0xBC, 0x40, 0x85, 0x3D, 0x65, 0x50, 0x10, 0x1F,  // .@.=eP..
                /* 0DD8 */  0x75, 0x9C, 0xE0, 0xE4, 0x80, 0x1E, 0xA5, 0x15,  // u.......
                /* 0DE0 */  0x8E, 0x41, 0xF3, 0x78, 0xFA, 0x01, 0x2F, 0x81,  // .A.x../.
                /* 0DE8 */  0xAF, 0x0D, 0xE0, 0x9A, 0x10, 0x9C, 0x21, 0x9C,  // ......!.
                /* 0DF0 */  0x6F, 0xED, 0xB7, 0x23, 0x20, 0x1A, 0x61, 0x42,  // o..# .aB
                /* 0DF8 */  0x68, 0x15, 0x20, 0xD2, 0x78, 0x08, 0x20, 0x8E,  // h. .x. .
                /* 0E00 */  0x47, 0x04, 0xE2, 0x43, 0x03, 0x1F, 0x11, 0xB8,  // G..C....
                /* 0E08 */  0x2E, 0x83, 0x38, 0x70, 0x1F, 0x25, 0xCE, 0xB8,  // ..8p.%..
                /* 0E10 */  0xE7, 0x13, 0x18, 0x08, 0xFE, 0xFF, 0x13, 0x82,  // ........
                /* 0E18 */  0x87, 0xE4, 0xC3, 0x2A, 0xD8, 0x4E, 0x60, 0xC0,  // ...*.N`.
                /* 0E20 */  0xEA, 0xDE, 0xE3, 0x13, 0x18, 0x60, 0xDB, 0xC2,  // .....`..
                /* 0E28 */  0x99, 0x06, 0xC8, 0xFE, 0xFF, 0xCF, 0x34, 0x60,  // ......4`
                /* 0E30 */  0x37, 0xE9, 0x50, 0xE8, 0x09, 0x0C, 0x64, 0x32,  // 7.P...d2
                /* 0E38 */  0xCF, 0x34, 0xE8, 0xB0, 0x2B, 0xD1, 0x99, 0x06,  // .4..+...
                /* 0E40 */  0xDE, 0x34, 0x1D, 0xEF, 0x4C, 0x43, 0x21, 0x1C,  // .4..LC!.
                /* 0E48 */  0x0C, 0x46, 0xB1, 0x20, 0x74, 0x2C, 0xE0, 0x41,  // .F. t,.A
                /* 0E50 */  0xE0, 0x28, 0x88, 0x3D, 0x1C, 0xB7, 0xE9, 0x99,  // .(.=....
                /* 0E58 */  0x06, 0xDE, 0xD9, 0x0A, 0xDC, 0x97, 0x1A, 0xF0,  // ........
                /* 0E60 */  0x0D, 0x09, 0xCE, 0xA5, 0x86, 0x9F, 0xBE, 0x80,  // ........
                /* 0E68 */  0xEB, 0x01, 0x0D, 0xCE, 0xB1, 0x06, 0x33, 0x26,  // ......3&
                /* 0E70 */  0xFE, 0xFF, 0x3F, 0x7C, 0x81, 0x79, 0x4C, 0xE0,  // ..?|.yL.
                /* 0E78 */  0x3B, 0xD8, 0xC0, 0x3B, 0x9E, 0x81, 0x1B, 0xCA,  // ;..;....
                /* 0E80 */  0x77, 0x66, 0xF0, 0x1D, 0xF3, 0x80, 0xDB, 0xDD,  // wf......
                /* 0E88 */  0x06, 0x7C, 0xC7, 0x3C, 0xE0, 0x77, 0x86, 0x01,  // .|.<.w..
                /* 0E90 */  0xC3, 0xFF, 0xFF, 0x0C, 0x03, 0xC8, 0xB8, 0x56,  // .......V
                /* 0E98 */  0x03, 0xAD, 0xEB, 0xC2, 0x71, 0xBE, 0x56, 0xC3,  // ....q.V.
                /* 0EA0 */  0x50, 0x7F, 0xAD, 0x46, 0xE9, 0x3D, 0x94, 0x52,  // P..F.=.R
                /* 0EA8 */  0x10, 0x8F, 0xCD, 0x49, 0x0E, 0x17, 0x68, 0x2D,  // ...I..h-
                /* 0EB0 */  0x17, 0x7C, 0x32, 0xA7, 0x63, 0x38, 0x9F, 0x13,  // .|2.c8..
                /* 0EB8 */  0x2A, 0xFE, 0x8C, 0x8F, 0xBA, 0x58, 0x03, 0xC3,  // *....X..
                /* 0EC0 */  0x7B, 0x18, 0xCC, 0x41, 0x61, 0xCE, 0x7A, 0x60,  // {..Aa.z`
                /* 0EC8 */  0xFE, 0xFF, 0xDF, 0xC3, 0x80, 0x73, 0xF0, 0x7B,  // .....s.{
                /* 0ED0 */  0x18, 0x2A, 0xEA, 0x8C, 0x28, 0x88, 0xAF, 0x05,  // .*..(...
                /* 0ED8 */  0xBE, 0x97, 0xC0, 0xB9, 0x73, 0xE0, 0xEE, 0x25,  // ....s..%
                /* 0EE0 */  0xF0, 0xEE, 0xD5, 0xE0, 0x99, 0x2B, 0xB8, 0xAE,  // .....+..
                /* 0EE8 */  0x1C, 0xC0, 0x5B, 0xAC, 0x44, 0x93, 0xD7, 0x6A,  // ..[.D..j
                /* 0EF0 */  0x20, 0x26, 0xED, 0x5A, 0x8D, 0xFE, 0xFF, 0x5F,  //  &.Z..._
                /* 0EF8 */  0xAB, 0xE1, 0xC7, 0xB9, 0x72, 0xA0, 0xC7, 0xE4,  // ....r...
                /* 0F00 */  0x2B, 0x07, 0xAC, 0x8B, 0x35, 0x30, 0xBD, 0x22,  // +...50."
                /* 0F08 */  0xC1, 0x3D, 0x75, 0xE0, 0xEE, 0x62, 0xC0, 0xFF,  // .=u..b..
                /* 0F10 */  0x78, 0x01, 0x8E, 0xBB, 0x18, 0x70, 0x3A, 0x5E,  // x....p:^
                /* 0F18 */  0x80, 0xEB, 0xFF, 0x7F, 0xBC, 0x00, 0x3A, 0x17,  // ......:.
                /* 0F20 */  0x24, 0x90, 0x69, 0xB9, 0x20, 0xA1, 0x13, 0x1D,  // $.i. ...
                /* 0F28 */  0x2F, 0xA0, 0x5A, 0x3B, 0xF1, 0xF8, 0x82, 0x84,  // /.Z;....
                /* 0F30 */  0xBA, 0x23, 0x39, 0xF5, 0x11, 0x06, 0x95, 0xF3,  // .#9.....
                /* 0F38 */  0x74, 0x40, 0x41, 0x0C, 0xE8, 0x1B, 0xA1, 0xAF,  // t@A.....
                /* 0F40 */  0x61, 0xB8, 0x73, 0x03, 0xFE, 0x78, 0x04, 0x0C,  // a.s..x..
                /* 0F48 */  0x0F, 0x61, 0xEC, 0xF2, 0x03, 0x2C, 0x62, 0x9C,  // .a...,b.
                /* 0F50 */  0xAD, 0x50, 0xC2, 0x2F, 0x26, 0x14, 0xC4, 0x13,  // .P./&...
                /* 0F58 */  0xF3, 0x09, 0x0E, 0xCE, 0x75, 0x82, 0x8B, 0x1C,  // ....u...
                /* 0F60 */  0x93, 0x0E, 0xB5, 0xB0, 0xFF, 0xFF, 0xB7, 0x1F,  // ........
                /* 0F68 */  0x30, 0x8C, 0xC5, 0x27, 0x38, 0xF0, 0x8D, 0x0A,  // 0..'8...
                /* 0F70 */  0xEE, 0x70, 0xCF, 0xE6, 0xA8, 0xC0, 0x7F, 0x51,  // .p.....Q
                /* 0F78 */  0xF0, 0x31, 0x0F, 0xF0, 0xA4, 0xD4, 0xA6, 0xC4,  // .1......
                /* 0F80 */  0x3B, 0x12, 0xC8, 0xE2, 0xDD, 0x91, 0xD0, 0x22,  // ;......"
                /* 0F88 */  0x6F, 0x1D, 0x50, 0x8F, 0x3C, 0x96, 0x75, 0x47,  // o.P.<.uG
                /* 0F90 */  0x42, 0x09, 0x82, 0xD1, 0x25, 0xC9, 0x67, 0x07,  // B...%.g.
                /* 0F98 */  0xBE, 0x34, 0x83, 0x19, 0xC4, 0x77, 0x24, 0x07,  // .4...w$.
                /* 0FA0 */  0xB9, 0x75, 0x40, 0xF8, 0xFF, 0xDF, 0x3A, 0xB0,  // .u@...:.
                /* 0FA8 */  0x17, 0x24, 0xE0, 0x79, 0x74, 0x00, 0xC7, 0xF9,  // .$.yt...
                /* 0FB0 */  0x02, 0xFE, 0x0D, 0x09, 0x3C, 0xE7, 0x0B, 0xE0,  // ....<...
                /* 0FB8 */  0x7A, 0x47, 0x02, 0xCF, 0xF9, 0x02, 0x30, 0xF1,  // zG....0.
                /* 0FC0 */  0xFF, 0x3F, 0x5F, 0xC0, 0x57, 0x7A, 0x49, 0x02,  // .?_.WzI.
                /* 0FC8 */  0x99, 0x9E, 0x83, 0x3A, 0x3A, 0xD5, 0x41, 0x1D,  // ...::.A.
                /* 0FD0 */  0xAA, 0x37, 0x40, 0xE5, 0x38, 0xA1, 0xD3, 0x51,  // .7@.8..Q
                /* 0FD8 */  0x39, 0x01, 0x8C, 0x2E, 0x49, 0x80, 0xE9, 0x28,  // 9...I..(
                /* 0FE0 */  0x37, 0x13, 0x94, 0xF8, 0x9B, 0x09, 0x05, 0xF1,  // 7.......
                /* 0FE8 */  0xE5, 0xD8, 0x67, 0x38, 0x4F, 0x15, 0x07, 0xED,  // ..g8O...
                /* 0FF0 */  0x01, 0x3C, 0x02, 0xBC, 0x98, 0xC0, 0xBD, 0x22,  // .<....."
                /* 0FF8 */  0x81, 0xF7, 0xFF, 0x7F, 0x9D, 0x80, 0x3F, 0x26,  // ......?&
                /* 1000 */  0x58, 0x8A, 0xC7, 0x04, 0x04, 0x6E, 0x1C, 0xE0,  // X....n..
                /* 1008 */  0x1C, 0x13, 0xAC, 0x3B, 0xFE, 0x31, 0x81, 0xFF,  // ...;.1..
                /* 1010 */  0x06, 0x0F, 0xAE, 0x31, 0xC1, 0x3E, 0x53, 0x1C,  // ...1.>S.
                /* 1018 */  0x13, 0xF8, 0x6F, 0x46, 0xBE, 0xB7, 0x00, 0xD7,  // ..oF....
                /* 1020 */  0xFF, 0xFF, 0xBD, 0x05, 0xDC, 0x7F, 0xC5, 0x0E,  // ........
                /* 1028 */  0xAF, 0x59, 0x20, 0x3B, 0x68, 0xF8, 0xDE, 0x82,  // .Y ;h...
                /* 1030 */  0x93, 0x70, 0xCD, 0x82, 0x38, 0xCC, 0x47, 0x4C,  // .p..8.GL
                /* 1038 */  0x87, 0xBE, 0xEA, 0xD1, 0x51, 0x39, 0x2E, 0x89,  // ....Q9..
                /* 1040 */  0x42, 0xDF, 0x5B, 0x50, 0x31, 0x0F, 0x19, 0x14,  // B.[P1...
                /* 1048 */  0xC4, 0x80, 0x3E, 0x78, 0x03, 0x2B, 0x02, 0x1F,  // ..>x.+..
                /* 1050 */  0xBC, 0x01, 0xBB, 0xFF, 0xFF, 0xD3, 0x2E, 0xB8,  // ........
                /* 1058 */  0x8F, 0x13, 0xC0, 0xDB, 0xA1, 0xC5, 0x4B, 0x20,  // ......K 
                /* 1060 */  0xD8, 0x2E, 0x7D, 0x3E, 0x4E, 0xE0, 0x42, 0x2D,  // ..}>N.B-
                /* 1068 */  0x55, 0xC7, 0x09, 0x78, 0xE6, 0xEE, 0xA2, 0xF4,  // U..x....
                /* 1070 */  0x12, 0xC8, 0x03, 0x50, 0x48, 0xFE, 0x7D, 0x14,  // ...PH.}.
                /* 1078 */  0x25, 0x18, 0x8E, 0x82, 0x78, 0x6C, 0x3E, 0x51,  // %...xl>Q
                /* 1080 */  0x03, 0xB7, 0xFB, 0x04, 0xF8, 0xCE, 0x0D, 0xE0,  // ........
                /* 1088 */  0xFC, 0xFF, 0x1F, 0xBA, 0x81, 0xD7, 0xB9, 0x01,  // ........
                /* 1090 */  0x98, 0x5F, 0xEE, 0xC0, 0x96, 0xFE, 0xDC, 0x80,  // ._......
                /* 1098 */  0x3E, 0x49, 0xFB, 0x72, 0x07, 0xEF, 0xDC, 0x60,  // >I.r...`
                /* 10A0 */  0xD5, 0x27, 0x6A, 0x94, 0x5E, 0x0A, 0xA9, 0x3E,  // .'j.^..>
                /* 10A8 */  0x37, 0xA0, 0x74, 0x9E, 0x1B, 0x28, 0x88, 0xC7,  // 7.t..(..
                /* 10B0 */  0xE6, 0x04, 0x87, 0x02, 0xF4, 0x28, 0x3D, 0xDF,  // .....(=.
                /* 10B8 */  0x87, 0x80, 0x3A, 0x0F, 0x35, 0x40, 0xF4, 0xD6,  // ..:.5@..
                /* 10C0 */  0x03, 0x86, 0xFF, 0xFF, 0x8C, 0xC0, 0x79, 0x66,  // ......yf
                /* 10C8 */  0x00, 0xDF, 0xAD, 0x07, 0xB0, 0x77, 0x9F, 0xE0,  // .....w..
                /* 10D0 */  0xD7, 0x0D, 0xC0, 0x8F, 0x4F, 0x93, 0x4E, 0x6F,  // ....O.No
                /* 10D8 */  0x3D, 0x20, 0x8B, 0x74, 0xDD, 0x20, 0xFF, 0xFF,  // = .t. ..
                /* 10E0 */  0xEB, 0x06, 0x46, 0xD8, 0x9D, 0x0C, 0xEA, 0xA5,  // ..F.....
                /* 10E8 */  0xCE, 0x52, 0x8E, 0xD2, 0x28, 0x11, 0x87, 0x68,  // .R..(..h
                /* 10F0 */  0x5F, 0x30, 0x51, 0x57, 0x33, 0x0E, 0xE2, 0x0B,  // _0QW3...
                /* 10F8 */  0x9E, 0xCF, 0xA6, 0xBE, 0x6E, 0xC0, 0xBB, 0xF4,  // ....n...
                /* 1100 */  0x00, 0xFF, 0x7B, 0x11, 0xF0, 0xB8, 0x71, 0x80,  // ..{...q.
                /* 1108 */  0xEF, 0x5E, 0x04, 0xDC, 0x4E, 0x16, 0x60, 0xFE,  // .^..N.`.
                /* 1110 */  0xFF, 0x9F, 0x2C, 0x80, 0xF0, 0xBD, 0x08, 0x64,  // ..,....d
                /* 1118 */  0xF1, 0x4F, 0x16, 0xE8, 0x10, 0x27, 0x0B, 0xA8,  // .O...'..
                /* 1120 */  0x07, 0xA3, 0x27, 0x00, 0xDD, 0x8B, 0x50, 0x82,  // ..'...P.
                /* 1128 */  0x29, 0x24, 0xFB, 0x5E, 0x84, 0x12, 0x7A, 0xB2,  // )$.^..z.
                /* 1130 */  0xA0, 0x20, 0x1E, 0x9B, 0x23, 0x1C, 0x0A, 0xD0,  // . ..#...
                /* 1138 */  0x2A, 0x40, 0xA4, 0x70, 0x1E, 0x1A, 0x43, 0xD7,  // *@.p..C.
                /* 1140 */  0x07, 0x23, 0x40, 0xF5, 0xFF, 0xFF, 0x60, 0x04,  // .#@...`.
                /* 1148 */  0x30, 0xCD, 0xA6, 0x57, 0x91, 0x07, 0x23, 0x90,  // 0..W..#.
                /* 1150 */  0x85, 0x3A, 0x6F, 0xA0, 0xA5, 0x9D, 0x37, 0xA0,  // .:o...7.
                /* 1158 */  0x1E, 0x99, 0x2D, 0xE6, 0x60, 0x84, 0x92, 0x01,  // ..-.`...
                /* 1160 */  0xA3, 0x93, 0x91, 0x0F, 0x05, 0x3C, 0xF6, 0x79,  // .....<.y
                /* 1168 */  0x83, 0x82, 0xF8, 0x60, 0xE4, 0x43, 0x01, 0xE6,  // ...`.C..
                /* 1170 */  0xFF, 0x7F, 0x28, 0xC0, 0x9C, 0x37, 0x30, 0x27,  // ..(..70'
                /* 1178 */  0x23, 0x80, 0xEB, 0xFF, 0xFF, 0xA3, 0x05, 0xA4,  // #.......
                /* 1180 */  0x93, 0x11, 0xC8, 0xB2, 0x1C, 0x2D, 0xD0, 0x8A,  // .....-..
                /* 1188 */  0x8E, 0x16, 0x10, 0xA5, 0x09, 0xD0, 0x76, 0xB4,  // ......v.
                /* 1190 */  0xF1, 0xC9, 0x08, 0x95, 0x9E, 0x44, 0xE9, 0x8F,  // .....D..
                /* 1198 */  0x2F, 0xA8, 0xBC, 0xA7, 0x03, 0x0A, 0x62, 0x40,  // /.....b@
                /* 11A0 */  0x87, 0x19, 0x22, 0x0A, 0xD2, 0x03, 0xF1, 0x7C,  // .."....|
                /* 11A8 */  0x4F, 0xE7, 0x18, 0x5E, 0x1C, 0x30, 0xD3, 0xAD,  // O..^.0..
                /* 11B0 */  0x1C, 0x41, 0x93, 0x69, 0x1E, 0x4E, 0x73, 0x79,  // .A.i.Nsy
                /* 11B8 */  0x3B, 0x02, 0xAF, 0xAE, 0x6B, 0x01, 0xF4, 0x53,  // ;...k..S
                /* 11C0 */  0xC0, 0xD1, 0x9E, 0xC9, 0x21, 0xD8, 0xF3, 0xE5,  // ....!...
                /* 11C8 */  0x07, 0x88, 0xC4, 0x9F, 0x2E, 0x2A, 0xF0, 0x74,  // .....*.t
                /* 11D0 */  0x29, 0x88, 0xA7, 0x0B, 0x47, 0xCA, 0x95, 0x02,  // )...G...
                /* 11D8 */  0x35, 0x59, 0xDC, 0xAD, 0xE0, 0x61, 0x1D, 0xEC,  // 5Y...a..
                /* 11E0 */  0xFF, 0xFF, 0x6B, 0xA2, 0x87, 0x0B, 0xA6, 0xEB,  // ..k.....
                /* 11E8 */  0x1B, 0x70, 0x57, 0xAA, 0xF0, 0x56, 0x01, 0xAE,  // .pW..V..
                /* 11F0 */  0x58, 0xEB, 0xD4, 0xAD, 0x02, 0x27, 0xEE, 0xB4,  // X....'..
                /* 11F8 */  0x0E, 0xF1, 0x56, 0xD1, 0x1B, 0xA4, 0x4F, 0xEB,  // ..V...O.
                /* 1200 */  0x28, 0x21, 0x14, 0x92, 0x71, 0x7D, 0x43, 0x5D,  // (!..q}C]
                /* 1208 */  0xB3, 0x0C, 0x66, 0x10, 0x8F, 0xCE, 0xA1, 0xCE,  // ..f.....
                /* 1210 */  0x05, 0x68, 0x49, 0xB7, 0x0A, 0x28, 0x67, 0x03,  // .hI..(g.
                /* 1218 */  0x70, 0xDD, 0x82, 0xC0, 0x73, 0x36, 0x00, 0x4E,  // p...s6.N
                /* 1220 */  0xFF, 0xFF, 0xB3, 0x01, 0xB0, 0xF2, 0x7A, 0x36,  // ......z6
                /* 1228 */  0x00, 0x59, 0x98, 0x0B, 0x0C, 0x5A, 0xD2, 0x55,  // .Y...Z.U
                /* 1230 */  0x0B, 0xAA, 0xB3, 0xFB, 0x2C, 0xBD, 0xC0, 0xF0,  // ....,...
                /* 1238 */  0xF8, 0x24, 0x3A, 0x82, 0xC0, 0x4D, 0x73, 0x36,  // .$:..Ms6
                /* 1240 */  0x40, 0xEB, 0xB9, 0x6A, 0xA1, 0x4E, 0x30, 0x00,  // @..j.N0.
                /* 1248 */  0x07, 0xFE, 0xFF, 0x27, 0x18, 0xC0, 0xB5, 0xCD,  // ...'....
                /* 1250 */  0x07, 0xE1, 0x63, 0x05, 0xC8, 0x82, 0x9D, 0x60,  // ..c....`
                /* 1258 */  0xD0, 0xF2, 0x4E, 0x30, 0x10, 0x8F, 0x15, 0x6F,  // ..N0...o
                /* 1260 */  0x30, 0x09, 0x0A, 0x3A, 0xC1, 0xA0, 0xA4, 0x50,  // 0..:...P
                /* 1268 */  0xE8, 0x08, 0xE3, 0x73, 0x01, 0x8F, 0x0E, 0x46,  // ...s...F
                /* 1270 */  0x41, 0x3C, 0x3A, 0xC7, 0x3A, 0x17, 0xA0, 0x45,  // A<:.:..E
                /* 1278 */  0x1D, 0x2B, 0x20, 0xDD, 0x0D, 0xE0, 0x1C, 0x61,  // .+ ....a
                /* 1280 */  0x80, 0xCD, 0xFF, 0xFF, 0x70, 0x00, 0xD8, 0x39,  // ....p..9
                /* 1288 */  0xC2, 0x00, 0x33, 0x6B, 0x47, 0x18, 0x80, 0x06,  // ..3kG...
                /* 1290 */  0xFF, 0xFF, 0x23, 0x0C, 0xC0, 0x19, 0x87, 0x16,  // ..#.....
                /* 1298 */  0x8F, 0x30, 0xC0, 0xEC, 0xE2, 0xE9, 0x23, 0x0C,  // .0....#.
                /* 12A0 */  0x70, 0xFD, 0xFF, 0x1F, 0x61, 0x00, 0xC7, 0x87,  // p...a...
                /* 12A8 */  0x83, 0x47, 0x18, 0xB0, 0x29, 0xB4, 0xE9, 0x53,  // .G..)..S
                /* 12B0 */  0xA3, 0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69,  // .Q..ej.i
                /* 12B8 */  0x50, 0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0xB9, 0x79,  // P.O....y
                /* 12C0 */  0x0C, 0x28, 0x06, 0x84, 0xC6, 0xE2, 0xD3, 0x8B,  // .(......
                /* 12C8 */  0x41, 0xAC, 0x9B, 0x42, 0x57, 0x67, 0x87, 0x00,  // A..BWg..
                /* 12D0 */  0x11, 0x90, 0x65, 0xFF, 0xC2, 0x05, 0x44, 0x40,  // ..e...D@
                /* 12D8 */  0x04, 0x64, 0x21, 0x9F, 0x14, 0x01, 0x59, 0x15,  // .d!...Y.
                /* 12E0 */  0x88, 0x80, 0x9C, 0x0A, 0x88, 0x46, 0x04, 0xA2,  // .....F..
                /* 12E8 */  0x71, 0x3C, 0x00, 0xB1, 0x70, 0x20, 0x02, 0xB2,  // q<..p ..
                /* 12F0 */  0x3A, 0x13, 0x40, 0x4C, 0x2A, 0x88, 0x80, 0x2C,  // :.@L*..,
                /* 12F8 */  0x4B, 0x05, 0x10, 0x13, 0x09, 0x22, 0x20, 0x67,  // K...." g
                /* 1300 */  0x5C, 0x9F, 0x80, 0x1C, 0x18, 0x44, 0x40, 0x0E,  // \....D@.
                /* 1308 */  0xF9, 0xAD, 0x16, 0x90, 0x23, 0x83, 0x08, 0xC8,  // ....#...
                /* 1310 */  0x82, 0x75, 0x00, 0x31, 0xF9, 0x20, 0x02, 0x72,  // .u.1. .r
                /* 1318 */  0x7C, 0x20, 0x2A, 0xC6, 0x07, 0x10, 0x8B, 0xF2,  // | *.....
                /* 1320 */  0x18, 0x10, 0x90, 0x73, 0x81, 0x08, 0xC8, 0x39,  // ...s...9
                /* 1328 */  0x68, 0x04, 0xE4, 0xFF, 0x7F, 0x2A, 0x0A, 0x01,  // h....*..
                /* 1330 */  0x59, 0x95, 0x13, 0x20, 0xA6, 0x11, 0x44, 0x40,  // Y.. ..D@
                /* 1338 */  0x4E, 0x09, 0x44, 0x33, 0x03, 0x51, 0xC1, 0x56,  // N.D3.Q.V
                /* 1340 */  0x80, 0x98, 0x7A, 0x10, 0x01, 0x59, 0xA9, 0x16,  // ..z..Y..
                /* 1348 */  0x20, 0xA6, 0x1B, 0x44, 0x40, 0x4E, 0xED, 0x05,  //  ..D@N..
                /* 1350 */  0x88, 0x69, 0x78, 0x07, 0x08, 0xC8, 0x19, 0xCC,  // .ix.....
                /* 1358 */  0x00, 0xB1, 0x44, 0x20, 0x02, 0xB2, 0x22, 0x37,  // ..D .."7
                /* 1360 */  0x40, 0x4C, 0x1F, 0x88, 0x80, 0x9C, 0xEF, 0x19,  // @L......
                /* 1368 */  0x21, 0x20, 0xA7, 0x05, 0x11, 0x90, 0xC5, 0x3E,  // ! .....>
                /* 1370 */  0x82, 0x04, 0x64, 0xE5, 0x20, 0x02, 0xB2, 0x5A,  // ..d. ..Z
                /* 1378 */  0x3F, 0x40, 0x4C, 0x3B, 0x88, 0x80, 0xAC, 0xC2,  // ?@L;....
                /* 1380 */  0x10, 0x10, 0xD3, 0x04, 0x22, 0x20, 0x67, 0x02,  // ...." g.
                /* 1388 */  0xA2, 0x09, 0x81, 0xA8, 0x52, 0x47, 0x83, 0xA2,  // ....RG..
                /* 1390 */  0x20, 0x02, 0x72, 0x6E, 0x20, 0xAA, 0xE2, 0x5D,  //  .rn ..]
                /* 1398 */  0xAA, 0x01, 0x13, 0x4B, 0x03, 0xA6, 0x20, 0x02,  // ...K.. .
                /* 13A0 */  0x72, 0x16, 0x4D, 0x40, 0x2C, 0x19, 0x88, 0x80,  // r.M@,...
                /* 13A8 */  0x2C, 0xEC, 0xF9, 0x21, 0x20, 0xAB, 0x04, 0x11,  // ,..! ...
                /* 13B0 */  0x90, 0x75, 0x99, 0x02, 0xA2, 0x20, 0x02, 0x72,  // .u... .r
                /* 13B8 */  0x4C, 0x55, 0x83, 0xA6, 0x20, 0x02, 0x72, 0x4E,  // LU.. .rN
                /* 13C0 */  0x57, 0x40, 0x2C, 0x35, 0x88, 0x80, 0xAC, 0xDC,  // W@,5....
                /* 13C8 */  0x16, 0x10, 0xCB, 0x01, 0x22, 0x20, 0x6B, 0x79,  // ...." ky
                /* 13D0 */  0x21, 0x09, 0xC8, 0xCA, 0x40, 0x04, 0x4C, 0x7C,  // !...@.L|
                /* 13D8 */  0x01, 0x53, 0x10, 0x01, 0x59, 0xB5, 0x31, 0x20,  // .S..Y.1 
                /* 13E0 */  0x96, 0x01, 0x44, 0x40, 0x56, 0xF0, 0xCC, 0x14,  // ..D@V...
                /* 13E8 */  0x90, 0xF5, 0x80, 0x68, 0xA0, 0xE4, 0x11, 0xA7,  // ...h....
                /* 13F0 */  0x81, 0x12, 0x10, 0x01, 0x59, 0xDB, 0xE3, 0x4A,  // ....Y..J
                /* 13F8 */  0x40, 0x56, 0x0A, 0x22, 0x20, 0xE7, 0x7D, 0xBA,  // @V." .}.
                /* 1400 */  0x08, 0xC8, 0xE9, 0x41, 0x04, 0x64, 0x95, 0xE6,  // ...A.d..
                /* 1408 */  0x8E, 0x0E, 0x14, 0x84, 0xAA, 0x54, 0x07, 0xC2,  // .....T..
                /* 1410 */  0x12, 0xCA, 0x03, 0x61, 0xFA, 0xEC, 0x81, 0xB0,  // ...a....
                /* 1418 */  0x24, 0x7F, 0x27, 0x81, 0x3B, 0x16, 0x88, 0x80,  // $.'.;...
                /* 1420 */  0xFC, 0xFF, 0xD7, 0xE2, 0x0F, 0x88, 0x09, 0x03,  // ........
                /* 1428 */  0xD1, 0x41, 0x83, 0xBC, 0x4C, 0x04, 0x64, 0x49,  // .A..L.dI
                /* 1430 */  0x20, 0x02, 0x72, 0x18, 0x20, 0x1A, 0x0D, 0x88,  //  .r. ...
                /* 1438 */  0x0A, 0x7B, 0xC7, 0x1C, 0x36, 0x03, 0x11, 0x90,  // .{..6...
                /* 1440 */  0xA3, 0x01, 0xD1, 0x9C, 0x40, 0x54, 0xDD, 0x1B,  // ....@T..
                /* 1448 */  0xE5, 0x11, 0x83, 0x81, 0xE8, 0x88, 0x41, 0xFE,  // ......A.
                /* 1450 */  0x2E, 0x3A, 0x62, 0x10, 0x10, 0x01, 0x39, 0xE0,  // .:b...9.
                /* 1458 */  0xB3, 0x45, 0xC7, 0x05, 0x02, 0x22, 0x20, 0x4B,  // .E..." K
                /* 1460 */  0xD4, 0x08, 0xC4, 0xF4, 0x82, 0x68, 0xA8, 0xC4,  // .....h..
                /* 1468 */  0xE3, 0x50, 0x29, 0x88, 0x06, 0x49, 0x80, 0x68,  // .P)..I.h
                /* 1470 */  0x62, 0x20, 0xAA, 0xF7, 0x79, 0x12, 0x88, 0x88,  // b ..y...
                /* 1478 */  0x07, 0x11, 0x90, 0x13, 0x03, 0xD1, 0xF8, 0x40,  // .......@
                /* 1480 */  0x54, 0xB4, 0x4A, 0x20, 0x96, 0x00, 0x44, 0x47,  // T.J ..DG
                /* 1488 */  0x08, 0xE2, 0xF2, 0x08, 0x41, 0x41, 0x04, 0xE4,  // ....AA..
                /* 1490 */  0xE4, 0x5F, 0x99, 0x40, 0x44, 0xC6, 0xCF, 0x25,  // ._.@D..%
                /* 1498 */  0x10, 0xD1, 0x0E, 0x22, 0x20, 0x07, 0x01, 0xA2,  // ..." ...
                /* 14A0 */  0xA2, 0x75, 0x02, 0xB1, 0x08, 0x20, 0x02, 0xB2,  // .u... ..
                /* 14A8 */  0x14, 0x9F, 0x03, 0xA7, 0x20, 0x02, 0x72, 0xA8,  // .... .r.
                /* 14B0 */  0x77, 0xCD, 0x63, 0x01, 0x03, 0xD1, 0x40, 0x89,  // w.c...@.
                /* 14B8 */  0xD1, 0xE3, 0x07, 0x05, 0xD1, 0xA0, 0x09, 0x10,  // ........
                /* 14C0 */  0xCD, 0x09, 0x44, 0xB5, 0xBE, 0x6F, 0x02, 0x11,  // ..D..o..
                /* 14C8 */  0xE1, 0x20, 0x02, 0xB2, 0xC6, 0x2F, 0x8E, 0x80,  // . .../..
                /* 14D0 */  0xAC, 0x18, 0x44, 0x40, 0xCE, 0xFA, 0xD0, 0x09,  // ..D@....
                /* 14D8 */  0x44, 0x82, 0x83, 0x08, 0xC8, 0x11, 0xAD, 0x1E,  // D.......
                /* 14E0 */  0x55, 0x28, 0x88, 0x80, 0x2C, 0xF5, 0x95, 0x73,  // U(..,..s
                /* 14E8 */  0x00, 0x0C, 0x44, 0x40, 0x8E, 0x0C, 0x44, 0x1F,  // ..D@..D.
                /* 14F0 */  0x1F, 0x81, 0x98, 0xF0, 0xB7, 0x50, 0x20, 0x92,  // .....P .
                /* 14F8 */  0x02, 0x44, 0x03, 0x27, 0x6A, 0x8F, 0x26, 0x14,  // .D.'j.&.
                /* 1500 */  0x44, 0x83, 0x25, 0x6E, 0x81, 0x98, 0x0E, 0xB9,  // D.%n....
                /* 1508 */  0x40, 0x2C, 0x01, 0x88, 0x80, 0x9C, 0x07, 0x88,  // @,......
                /* 1510 */  0xFE, 0xFF, 0x95, 0xE8, 0x05, 0x62, 0xB2, 0x40,  // .....b.@
                /* 1518 */  0x04, 0x64, 0x09, 0xFF, 0xA1, 0x40, 0x44, 0x10,  // .d...@D.
                /* 1520 */  0x88, 0x0E, 0x0C, 0xE4, 0x2D, 0xA4, 0x03, 0x03,  // ....-...
                /* 1528 */  0x01, 0xD1, 0x60, 0xC9, 0xFB, 0xE9, 0x21, 0x81,  // ..`...!.
                /* 1530 */  0x81, 0xE8, 0x88, 0x42, 0x14, 0x03, 0xB1, 0xB0,  // ...B....
                /* 1538 */  0x20, 0x1A, 0x28, 0x71, 0x0C, 0xC4, 0x04, 0x83,  //  .(q....
                /* 1540 */  0xE8, 0x90, 0x40, 0x5E, 0x41, 0x3A, 0x24, 0x10,  // ..@^A:$.
                /* 1548 */  0x10, 0x1D, 0x39, 0xC8, 0x4F, 0xE8, 0x91, 0x83,  // ..9.O...
                /* 1550 */  0x81, 0x68, 0x70, 0xE4, 0xB9, 0x75, 0x70, 0x0C,  // .hp..up.
                /* 1558 */  0x44, 0xC7, 0x13, 0x02, 0x44, 0x55, 0x7C, 0x9E,  // D...DU|.
                /* 1560 */  0x04, 0x64, 0xF5, 0x3F, 0x40, 0x01, 0x39, 0x0A,  // .d.?@.9.
                /* 1568 */  0x88, 0x8E, 0x39, 0x04, 0x88, 0x6A, 0x79, 0x2A,  // ..9..jy*
                /* 1570 */  0x05, 0x22, 0x01, 0x40, 0x04, 0xE4, 0x34, 0x40,  // .".@..4@
                /* 1578 */  0x54, 0x81, 0x6A, 0x20, 0x26, 0x07, 0x44, 0x40,  // T.j &.D@
                /* 1580 */  0x4E, 0x01, 0x44, 0x23, 0x01, 0x51, 0xF5, 0xBF,  // N.D#.Q..
                /* 1588 */  0xAE, 0x40, 0x24, 0x0B, 0x88, 0x8E, 0x31, 0xE4,  // .@$...1.
                /* 1590 */  0xBF, 0xF4, 0x18, 0xC3, 0x40, 0x74, 0xF0, 0x20,  // ....@t. 
                /* 1598 */  0x40, 0x34, 0x17, 0x10, 0xD5, 0xF3, 0xE5, 0x12,  // @4......
                /* 15A0 */  0x90, 0xD5, 0x81, 0xE8, 0x58, 0x42, 0x80, 0x68,  // ....XB.h
                /* 15A8 */  0x42, 0x20, 0xAA, 0xED, 0x27, 0x75, 0xA0, 0x0C,  // B ..'u..
                /* 15B0 */  0x44, 0x87, 0x0B, 0x02, 0x44, 0x13, 0x03, 0x51,  // D...D..Q
                /* 15B8 */  0xC1, 0xC6, 0x07, 0x4A, 0x41, 0x04, 0xE4, 0xD0,  // ...JA...
                /* 15C0 */  0x40, 0x54, 0xC1, 0xB3, 0x2B, 0x10, 0x89, 0x0A,  // @T..+...
                /* 15C8 */  0xA2, 0x03, 0x03, 0x01, 0xA2, 0xC2, 0x9F, 0x7E,  // .......~
                /* 15D0 */  0x02, 0x72, 0x0C, 0x10, 0x9D, 0xB3, 0xC8, 0xAF,  // .r......
                /* 15D8 */  0xED, 0x20, 0x19, 0x88, 0x80, 0x1C, 0x03, 0x88,  // . ......
                /* 15E0 */  0x86, 0x02, 0xA2, 0x62, 0xDE, 0x6F, 0x8F, 0x32,  // ...b.o.2
                /* 15E8 */  0x0C, 0x44, 0x83, 0x24, 0x6F, 0xB5, 0x83, 0x64,  // .D.$o..d
                /* 15F0 */  0x20, 0x02, 0x72, 0x1E, 0x20, 0x9A, 0x0E, 0x88,  //  .r. ...
                /* 15F8 */  0x2A, 0x53, 0x0F, 0xC4, 0x74, 0x82, 0x08, 0xC8,  // *S..t...
                /* 1600 */  0xFF, 0xFF, 0x8C, 0x40, 0x34, 0x31, 0x10, 0x55,  // ...@41.U
                /* 1608 */  0xEB, 0xFE, 0xF0, 0x41, 0x41, 0x74, 0x4C, 0x22,  // ...AAtL"
                /* 1610 */  0xF2, 0x81, 0x98, 0x04, 0xFB, 0x83, 0xA3, 0x20,  // ....... 
                /* 1618 */  0x1A, 0x1C, 0x01, 0xA2, 0x82, 0xF5, 0x1F, 0xA7,  // ........
                /* 1620 */  0x28, 0x88, 0x80, 0x1C, 0x1B, 0x88, 0x8A, 0xF0,  // (.......
                /* 1628 */  0x0F, 0xC4, 0xC4, 0x83, 0xE8, 0x80, 0x40, 0x80,  // ......@.
                /* 1630 */  0xA8, 0x88, 0x02, 0x40, 0x4C, 0x11, 0x88, 0x80,  // ...@L...
                /* 1638 */  0x1C, 0x1D, 0x88, 0x0A, 0x49, 0x00, 0xC4, 0x22,  // ....I.."
                /* 1640 */  0x34, 0x00, 0x62, 0x81, 0x40, 0x74, 0x04, 0x23,  // 4.b.@t.#
                /* 1648 */  0x11, 0x0E, 0x16, 0x14, 0x44, 0x87, 0x0A, 0x52,  // ....D..R
                /* 1650 */  0xE1, 0x78, 0x44, 0x41, 0x74, 0x30, 0x20, 0x19,  // .xDAt0 .
                /* 1658 */  0x80, 0x98, 0x38, 0x10, 0x0D, 0x98, 0x74, 0x18,  // ..8...t.
                /* 1660 */  0x30, 0x05, 0xD1, 0x51, 0x89, 0x84, 0x00, 0xA6,  // 0..Q....
                /* 1668 */  0x20, 0x3A, 0x52, 0x91, 0x12, 0x47, 0x2A, 0x0A,  //  :R..G*.
                /* 1670 */  0x22, 0x20, 0xE7, 0x02, 0xA2, 0x29, 0x81, 0xA8,  // " ...)..
                /* 1678 */  0xB8, 0x16, 0x87, 0x04, 0x0A, 0xA2, 0x83, 0x06,  // ........
                /* 1680 */  0x01, 0xA2, 0x61, 0x81, 0x68, 0xAA, 0x18, 0x40,  // ..a.h..@
                /* 1688 */  0x2C, 0x23, 0x88, 0x0E, 0x3B, 0x24, 0x07, 0x10,  // ,#..;$..
                /* 1690 */  0xD3, 0x0A, 0xA2, 0x43, 0x00, 0x01, 0xA2, 0x89,  // ...C....
                /* 1698 */  0x81, 0xA8, 0xD2, 0x1E, 0xC7, 0x2A, 0x0A, 0xA2,  // .....*..
                /* 16A0 */  0x83, 0x06, 0x09, 0x32, 0x70, 0x5A, 0xE4, 0x90,  // ...2pZ..
                /* 16A8 */  0x42, 0x41, 0x74, 0x48, 0x21, 0x49, 0x80, 0x58,  // BAtH!I.X
                /* 16B0 */  0x90, 0x26, 0x07, 0x23, 0x0A, 0xA2, 0xC3, 0x01,  // .&.#....
                /* 16B8 */  0xA9, 0x02, 0xC4, 0x64, 0x82, 0x08, 0xC8, 0xA2,  // ...d....
                /* 16C0 */  0xB2, 0x00, 0x31, 0x89, 0x20, 0x02, 0x72, 0xD8,  // ..1. .r.
                /* 16C8 */  0x2E, 0x40, 0x2C, 0x3A, 0x88, 0x0E, 0x1A, 0xA4,  // .@,:....
                /* 16D0 */  0xCC, 0x61, 0x80, 0x82, 0xE8, 0x10, 0x41, 0x9E,  // .a....A.
                /* 16D8 */  0xB7, 0x3A, 0x44, 0x10, 0x10, 0x01, 0x59, 0x50,  // .:D...YP
                /* 16E0 */  0x1C, 0x20, 0x26, 0x0F, 0x44, 0x40, 0xFE, 0xFF,  // . &.D@..
                /* 16E8 */  0x03                                             // .
            })
            Method (SPEC, 1, Serialized)
            {
                Return (AMWV) /* \AMWV */
            }

            Method (DEVP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, PARA)
                If ((PARA == One))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF |= One
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF |= 0x02
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF |= 0x04
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF |= 0x08
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF |= 0x10
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF |= 0x20
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF |= 0x40
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF |= 0x80
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF |= 0x0100
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF |= 0x0200
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF |= 0x0400
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF |= 0x0800
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF |= 0x1000
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF |= 0x2000
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF |= 0x4000
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF |= 0x8000
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF |= 0x00010000
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF |= 0x00020000
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF |= 0x00040000
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF |= 0x00080000
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF |= 0x00100000
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                ElseIf ((PARA == Zero))
                {
                    Switch (DVID)
                    {
                        Case (0x00010011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFE
                        }
                        Case (0x00010013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFD
                        }
                        Case (0x00010023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFFB
                        }
                        Case (0x00060013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFF7
                        }
                        Case (0x00060015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFEF
                        }
                        Case (0x00010015)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFDF
                        }
                        Case (0x00090011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFFBF
                        }
                        Case (0x00070011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFF7F
                        }
                        Case (0x00080013)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFEFF
                        }
                        Case (0x00010019)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFDFF
                        }
                        Case (0x00010017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFFBFF
                        }
                        Case (0x00050011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFF7FF
                        }
                        Case (0x00050012)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFEFFF
                        }
                        Case (0x00060017)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFDFFF
                        }
                        Case (0x00080021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFFBFFF
                        }
                        Case (0x00100011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFF7FFF
                        }
                        Case (0x00050001)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFEFFFF
                        }
                        Case (0x00120000)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFDFFFF
                        }
                        Case (0x00120021)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFFBFFFF
                        }
                        Case (0x00120011)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFF7FFFF
                        }
                        Case (0x00120023)
                        {
                            \_SB.DSAF &= 0xFFFFFFFFFFEFFFFF
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }

                Return (One)
            }

            Method (SDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (GDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, ACTN)
                Return (Zero)
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (DVID)
                {
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, Zero, DVID)
                Switch (DVID)
                {
                    Case (0xA0000000)
                    {
                        Local0 = One
                    }
                    Case (Zero)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Local0 = Zero
                    }

                }

                Local0 &= 0x0007FFFF
                Return (Local0)
            }

            Method (GPID, 0, Serialized)
            {
                Return (Zero)
            }

            Method (KBFT, 1, Serialized)
            {
                Return (Zero)
            }

            Method (HKEY, 0, Serialized)
            {
                Return (Zero)
            }

            Method (CFVS, 1, Serialized)
            {
            }

            Method (CFVG, 0, Serialized)
            {
            }

            Name (RAMA, 0xDA987018)
            Name (WBUF, Buffer (0x50){})
            OperationRegion (\RAMX, SystemMemory, RAMA, 0x0100)
            Field (RAMX, ByteAcc, NoLock, Preserve)
            {
                WFUN,   32, 
                WSTS,   32, 
                WSIZ,   32, 
                Offset (0x10), 
                IDAT,   896, 
                ODAT,   1024
            }

            Mutex (WMTX, 0x00)
            Method (LERR, 1, Serialized)
            {
                Return (WSTS) /* \AMW0.WSTS */
            }

            Method (GBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000001
                    WSTS = Zero
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    WBUF = ODAT /* \AMW0.ODAT */
                    Release (WMTX)
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SBOD, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000002
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (GBON, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000003
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    WBUF = ODAT /* \AMW0.ODAT */
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GLBN, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000006
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    WBUF = ODAT /* \AMW0.ODAT */
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (ISLG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000007
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    WBUF = ODAT /* \AMW0.ODAT */
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (GLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000008
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    WBUF = ODAT /* \AMW0.ODAT */
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SLBO, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000009
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    WBUF = ODAT /* \AMW0.ODAT */
                    Return (WBUF) /* \AMW0.WBUF */
                }

                Return (Ones)
            }

            Method (SAPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000004
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (SUPW, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x80000005
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (SBOG, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000A
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (LDFT, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000B
                    WSTS = Zero
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (SFTB, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000C
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (SDFT, 1, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000D
                    WSTS = Zero
                    ODAT = Zero
                    IDAT = Arg0
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }

            Method (SFTM, 0, Serialized)
            {
                If ((Acquire (WMTX, 0xFFFF) == Zero))
                {
                    WFUN = 0x8000000E
                    WSTS = Zero
                    ODAT = Zero
                    \_SB.ISMI (0xDA)
                    Release (WMTX)
                    Return (WSTS) /* \AMW0.WSTS */
                }

                Return (Ones)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0xDA9D4018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            DSAF,   32, 
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, Zero, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, One)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        OperationRegion (IOB2, SystemIO, SMIP, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMPT,   8, 
            SMIS,   8
        }

        Method (ISMI, 1, Serialized)
        {
            SMPT = Arg0
        }

        Method (GMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000000
                PAR0 = Arg0
                ISMI (0x90)
                RECX = Arg0
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                CreateDWordField (Arg0, Zero, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                PINX = 0x80000001
                PAR0 = AECX /* \_SB_.SMSR.AECX */
                PAR1 = AEAX /* \_SB_.SMSR.AEAX */
                PAR2 = AEDX /* \_SB_.SMSR.AEDX */
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If ((Acquire (MPAR, 0xFFFF) == Zero))
            {
                PINX = 0x80000002
                PAR0 = Arg0
                ISMI (0x90)
                REAX = PAR1 /* \_SB_.PAR1 */
                REDX = PAR2 /* \_SB_.PAR2 */
                Release (MPAR)
                Return (ARBF) /* \_SB_.ARBF */
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000005
            ISMI (0x90)
            Return (PAR0) /* \_SB_.PAR0 */
        }

        Method (GNVS, 1, Serialized)
        {
            PAR0 = Arg0
            PINX = 0x80000003
            ISMI (0x90)
            Return (PAR1) /* \_SB_.PAR1 */
        }

        Method (SNVS, 2, Serialized)
        {
            PAR0 = Arg0
            PAR1 = Arg1
            PINX = 0x80000004
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            PINX = 0x8000000A
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (((Arg0 > 0x03) && (Arg0 < 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Name (XUPC, Package (0x04)
    {
        0xFF, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XUP1, Package (0x04)
    {
        Zero, 
        0xFF, 
        Zero, 
        Zero
    })
    Name (XPLD, Buffer (0x10)
    {
        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0008 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
    })
    Name (NPLD, Zero)
    Name (WPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,  // ........
            /* 0008 */  0x25, 0x09, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
            /* 0010 */  0x2C, 0x01, 0xBE, 0x00                           // ,...
        }
    })
    Name (DPLD, Package (0x01)
    {
        Buffer (0x10)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0xB0, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        }
    })
    Name (BPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00,  // ....d.d.
            /* 0008 */  0x24, 0x41, 0x80, 0x01, 0x00, 0x00, 0x04, 0x00,  // $A......
            /* 0010 */  0x00, 0x03, 0xAB, 0x02                           // ....
        }
    })
    Name (CPLD, Package (0x01)
    {
        Buffer (0x14)
        {
            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,  // ........
            /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
        }
    })
    Scope (_SB.PCI0.GP17.XHC0)
    {
        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Device (PRT1)
            {
                Name (_ADR, One)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT2)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT3)
            {
                Name (_ADR, 0x03)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x1,
                        PLD_Panel              = "FRONT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT5)
            {
                Name (_ADR, 0x05)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT6)
            {
                Name (_ADR, 0x06)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "VERTICALRECTANGLE",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x2,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT7)
            {
                Name (_ADR, 0x07)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "LEFT",
                        PLD_VerticalPosition   = "LOWER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x3,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }

            Device (PRT8)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x1,
                        PLD_Panel              = "FRONT",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "CENTER",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x4,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x1,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0,
                        PLD_VerticalOffset     = 0xFFFF,
                        PLD_HorizontalOffset   = 0xFFFF)

                })
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMS, 0xDA9E6D18)
        OperationRegion (RAMX, SystemMemory, RAMS, 0x0100)
        Field (RAMX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            A1T0,   8, 
            A1T2,   8, 
            A1P0,   8, 
            A1S1,   8, 
            A1T1,   8, 
            A1S2,   8, 
            A2T0,   8, 
            A2T2,   8, 
            A2P0,   8, 
            A2S1,   8, 
            A2T1,   8, 
            A2S2,   8, 
            Offset (0x10), 
            B1T0,   8, 
            B1T2,   8, 
            B1P0,   8, 
            B1S1,   8, 
            B1T1,   8, 
            B1S2,   8, 
            B2T0,   8, 
            B2T2,   8, 
            B2P0,   8, 
            B2S1,   8, 
            B2T1,   8, 
            B2S2,   8, 
            Offset (0x1E), 
            C1T0,   8, 
            C1T2,   8, 
            C1P0,   8, 
            C1S1,   8, 
            C1T1,   8, 
            C1S2,   8, 
            C2T0,   8, 
            C2T2,   8, 
            C2P0,   8, 
            C2S1,   8, 
            C2T1,   8, 
            C2S2,   8, 
            Offset (0x2C), 
            D1T0,   8, 
            D1T2,   8, 
            D1P0,   8, 
            D1S1,   8, 
            D1T1,   8, 
            D1S2,   8, 
            D2T0,   8, 
            D2T2,   8, 
            D2P0,   8, 
            D2S1,   8, 
            D2T1,   8, 
            D2S2,   8
        }
    }

    Scope (_GPE)
    {
        Name (TEST, Zero)
        OperationRegion (DBGP, SystemIO, 0x80, One)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        OperationRegion (ECR3, SystemIO, 0x62, One)
        Field (ECR3, ByteAcc, NoLock, Preserve)
        {
            EC62,   8
        }

        OperationRegion (ECR2, SystemIO, 0x66, One)
        Field (ECR2, ByteAcc, NoLock, Preserve)
        {
            EC66,   8
        }

        OperationRegion (SGP, SystemIO, 0x2E, 0x02)
        Field (SGP, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        OperationRegion (PGP, SystemMemory, NBTP, 0x10)
        Field (PGP, DWordAcc, NoLock, Preserve)
        {
            PTGP,   32, 
            Offset (0x08), 
            PTHL,   32
        }

        OperationRegion (AGP, SystemMemory, 0xFED81684, 0x10)
        Field (AGP, DWordAcc, NoLock, Preserve)
        {
            G097,   32, 
            G098,   32, 
            G099,   32, 
            G100,   32
        }

        OperationRegion (HWM, SystemMemory, HWMM, 0x0300)
        Field (HWM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x03), 
            R003,   8, 
            Offset (0x15), 
            R015,   8, 
            R016,   8, 
            R017,   8, 
            Offset (0x1E), 
            R01E,   8, 
            Offset (0x29), 
            R029,   8, 
            R02A,   8, 
            R02B,   8, 
            R02C,   8, 
            R02D,   8, 
            Offset (0x61), 
            R061,   8, 
            R062,   8, 
            R063,   8, 
            R064,   8, 
            Offset (0x69), 
            R069,   8, 
            R06A,   8, 
            R06B,   8, 
            R06C,   8, 
            Offset (0x71), 
            R071,   8, 
            R072,   8, 
            R073,   8, 
            R074,   8, 
            Offset (0x79), 
            R079,   8, 
            R07A,   8, 
            R07B,   8, 
            R07C,   8, 
            Offset (0x210), 
            R210,   8, 
            R211,   8, 
            R212,   8, 
            R213,   8, 
            Offset (0x215), 
            R215,   8, 
            Offset (0x219), 
            R219,   8, 
            Offset (0x220), 
            R220,   8, 
            R221,   8, 
            R222,   8, 
            R223,   8, 
            Offset (0x225), 
            R225,   8, 
            Offset (0x229), 
            R229,   8, 
            Offset (0x230), 
            R230,   8, 
            R231,   8, 
            R232,   8, 
            R233,   8, 
            Offset (0x235), 
            R235,   8, 
            Offset (0x239), 
            R239,   8, 
            Offset (0x240), 
            R240,   8, 
            R241,   8, 
            R242,   8, 
            R243,   8, 
            Offset (0x245), 
            R245,   8, 
            Offset (0x249), 
            R249,   8
        }

        Name (P1T0, Zero)
        Name (P1T2, Zero)
        Name (P1P0, Zero)
        Name (P1S1, Zero)
        Name (P1T1, Zero)
        Name (P1S2, Zero)
        Name (P2T0, Zero)
        Name (P2T2, Zero)
        Name (P2P0, Zero)
        Name (P2S1, Zero)
        Name (P2T1, Zero)
        Name (P2S2, Zero)
        Name (F0SM, Zero)
        Name (F1SM, Zero)
        Name (F2SM, Zero)
        Name (F3SM, Zero)
        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x1000
            While ((Local0-- && ECIE))
            {
                Sleep (One)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, One)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Local0 = 0x2000
            While (Local0--)
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (One)
            }
        }

        Method (LOMA, 1, NotSerialized)
        {
            Name (ECST, Zero)
            ECST = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = 0x5A
            OBFX ()
            ECST = EC62 /* \_GPE.EC62 */
            If (((ECST == One) || (ECST == 0x02)))
            {
                If ((ECST == 0x02))
                {
                    If ((Arg0 == Zero))
                    {
                        G097 |= 0x00800000
                        G097 &= 0xFFBFFFFF
                    }
                    ElseIf ((Arg0 == One))
                    {
                        G099 |= 0x00800000
                        G099 &= 0xFFBFFFFF
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        G100 |= 0x00800000
                        G100 &= 0xFFBFFFFF
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        G098 |= 0x00800000
                        G098 &= 0xFFBFFFFF
                    }

                    IBFX ()
                    EC66 = 0x91
                    IBFX ()
                    EC62 = 0x5A
                    IBFX ()
                    EC62 = One
                    If ((Arg0 == Zero))
                    {
                        F0SM = R064 /* \_GPE.R064 */
                        R064 &= 0x7F
                        R015 &= 0x7F
                        R063 = 0xFF
                        R211 = Zero
                        R215 = Zero
                        R219 = Zero
                    }
                    ElseIf ((Arg0 == One))
                    {
                        F1SM = R06C /* \_GPE.R06C */
                        R06C &= 0x7F
                        R016 &= 0x7F
                        R069 = 0xFF
                        R221 = Zero
                        R225 = Zero
                        R229 = Zero
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        F2SM = R074 /* \_GPE.R074 */
                        R074 &= 0x7F
                        R017 &= 0x7F
                        R071 = 0xFF
                        R231 = Zero
                        R235 = Zero
                        R239 = Zero
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        F3SM = R07C /* \_GPE.R07C */
                        R07C &= 0x7F
                        R01E &= 0x7F
                        R079 = 0xFF
                        R241 = Zero
                        R245 = Zero
                        R249 = Zero
                    }

                    If ((Arg0 == Zero))
                    {
                        PTGP |= 0x02
                        PTHL &= 0xFFFFFFFD
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTGP |= 0x08
                        PTHL &= 0xFFFFFFF7
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTGP |= 0x10
                        PTHL &= 0xFFFFFFEF
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTGP |= 0x20
                        PTHL &= 0xFFFFFFDF
                    }

                    If ((Arg0 == Zero))
                    {
                        R061 = P2T0 /* \_GPE.P2T0 */
                        R062 = P2T2 /* \_GPE.P2T2 */
                        R063 = P2P0 /* \_GPE.P2P0 */
                        F0SM &= 0x80
                        R064 |= F0SM /* \_GPE.F0SM */
                        Local0 = (R064 & 0x80)
                        Local0 |= P2S1 /* \_GPE.P2S1 */
                        R064 = Local0
                        R210 = P2T1 /* \_GPE.P2T1 */
                        Local0 = (P2S2 | 0x80)
                        R211 = Local0
                        Local0 = (P2S2 & 0x80)
                        If ((Local0 == 0x80))
                        {
                            Local0 = (R213 | 0x80)
                            R213 = Local0
                        }
                        Else
                        {
                            Local0 = (R213 & 0x7F)
                            R213 = Local0
                        }

                        R015 |= 0x80
                    }
                    ElseIf ((Arg0 == One))
                    {
                        R069 = P2T0 /* \_GPE.P2T0 */
                        R06A = P2T2 /* \_GPE.P2T2 */
                        R06B = P2P0 /* \_GPE.P2P0 */
                        F1SM &= 0x80
                        R06C |= F1SM /* \_GPE.F1SM */
                        Local0 = (R06C & 0x80)
                        Local0 |= P2S1 /* \_GPE.P2S1 */
                        R06C = Local0
                        R220 = P2T1 /* \_GPE.P2T1 */
                        Local0 = (P2S2 | 0x80)
                        R221 = Local0
                        Local0 = (P2S2 & 0x80)
                        If ((Local0 == 0x80))
                        {
                            Local0 = (R223 | 0x80)
                            R223 = Local0
                        }
                        Else
                        {
                            Local0 = (R223 & 0x7F)
                            R223 = Local0
                        }

                        R016 |= 0x80
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        R071 = P2T0 /* \_GPE.P2T0 */
                        R072 = P2T2 /* \_GPE.P2T2 */
                        R073 = P2P0 /* \_GPE.P2P0 */
                        F2SM &= 0x80
                        R074 |= F2SM /* \_GPE.F2SM */
                        Local0 = (R074 & 0x80)
                        Local0 |= P2S1 /* \_GPE.P2S1 */
                        R074 = Local0
                        R230 = P2T1 /* \_GPE.P2T1 */
                        Local0 = (P2S2 | 0x80)
                        R231 = Local0
                        Local0 = (P2S2 & 0x80)
                        If ((Local0 == 0x80))
                        {
                            Local0 = (R233 | 0x80)
                            R233 = Local0
                        }
                        Else
                        {
                            Local0 = (R233 & 0x7F)
                            R233 = Local0
                        }

                        R017 |= 0x80
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        R079 = P2T0 /* \_GPE.P2T0 */
                        R07A = P2T2 /* \_GPE.P2T2 */
                        R07B = P2P0 /* \_GPE.P2P0 */
                        F3SM &= 0x80
                        R07C |= F3SM /* \_GPE.F3SM */
                        Local0 = (R07C & 0x80)
                        Local0 |= P2S1 /* \_GPE.P2S1 */
                        R07C = Local0
                        R240 = P2T1 /* \_GPE.P2T1 */
                        Local0 = (P2S2 | 0x80)
                        R241 = Local0
                        Local0 = (P2S2 & 0x80)
                        If ((Local0 == 0x80))
                        {
                            Local0 = (R243 | 0x80)
                            R243 = Local0
                        }
                        Else
                        {
                            Local0 = (R243 & 0x7F)
                            R243 = Local0
                        }

                        R01E |= 0x80
                    }
                }
                ElseIf ((ECST == One))
                {
                    If ((Arg0 == Zero))
                    {
                        PTGP |= 0x02
                        PTHL |= 0x02
                    }
                    ElseIf ((Arg0 == One))
                    {
                        PTGP |= 0x08
                        PTHL |= 0x08
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        PTGP |= 0x10
                        PTHL |= 0x10
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        PTGP |= 0x20
                        PTHL |= 0x20
                    }

                    If ((Arg0 == Zero))
                    {
                        F0SM = R064 /* \_GPE.R064 */
                        R064 &= 0x7F
                        R015 &= 0x7F
                        R063 = Zero
                        R064 = Zero
                        R211 = Zero
                        R215 = Zero
                        R219 = Zero
                    }
                    ElseIf ((Arg0 == One))
                    {
                        F1SM = R06C /* \_GPE.R06C */
                        R06C &= 0x7F
                        R016 &= 0x7F
                        R069 = Zero
                        R06A = Zero
                        R221 = Zero
                        R225 = Zero
                        R229 = Zero
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        F2SM = R074 /* \_GPE.R074 */
                        R074 &= 0x7F
                        R017 &= 0x7F
                        R071 = Zero
                        R072 = Zero
                        R231 = Zero
                        R235 = Zero
                        R239 = Zero
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        F3SM = R07C /* \_GPE.R07C */
                        R07C &= 0x7F
                        R01E &= 0x7F
                        R079 = Zero
                        R07A = Zero
                        R241 = Zero
                        R245 = Zero
                        R249 = Zero
                    }

                    If ((Arg0 == Zero))
                    {
                        G097 &= 0xFF7FFFFF
                    }
                    ElseIf ((Arg0 == One))
                    {
                        G099 &= 0xFF7FFFFF
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        G100 &= 0xFF7FFFFF
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        G098 &= 0xFF7FFFFF
                    }

                    IBFX ()
                    EC66 = 0x91
                    IBFX ()
                    EC62 = 0x5A
                    IBFX ()
                    EC62 = 0x02
                    If ((Arg0 == Zero))
                    {
                        R061 = P1T0 /* \_GPE.P1T0 */
                        R062 = P1T2 /* \_GPE.P1T2 */
                        R063 = P1P0 /* \_GPE.P1P0 */
                        F0SM &= 0x80
                        R064 |= F0SM /* \_GPE.F0SM */
                        Local0 = (R064 & 0x80)
                        Local0 |= P1S1 /* \_GPE.P1S1 */
                        R064 = Local0
                        R210 = P1T1 /* \_GPE.P1T1 */
                        Local0 = (P1S2 | 0x80)
                        R211 = Local0
                        R015 |= 0x80
                    }
                    ElseIf ((Arg0 == One))
                    {
                        R069 = P1T0 /* \_GPE.P1T0 */
                        R06A = P1T2 /* \_GPE.P1T2 */
                        R06B = P1P0 /* \_GPE.P1P0 */
                        F1SM &= 0x80
                        R06C |= F1SM /* \_GPE.F1SM */
                        Local0 = (R06C & 0x80)
                        Local0 |= P1S1 /* \_GPE.P1S1 */
                        R06C = Local0
                        R220 = P1T1 /* \_GPE.P1T1 */
                        Local0 = (P1S2 | 0x80)
                        R221 = Local0
                        R016 |= 0x80
                    }
                    ElseIf ((Arg0 == 0x02))
                    {
                        R071 = P1T0 /* \_GPE.P1T0 */
                        R072 = P1T2 /* \_GPE.P1T2 */
                        R073 = P1P0 /* \_GPE.P1P0 */
                        F2SM &= 0x80
                        R074 |= F2SM /* \_GPE.F2SM */
                        Local0 = (R074 & 0x80)
                        Local0 |= P1S1 /* \_GPE.P1S1 */
                        R074 = Local0
                        R230 = P1T1 /* \_GPE.P1T1 */
                        Local0 = (P2S2 | 0x80)
                        R231 = Local0
                        R017 |= 0x80
                    }
                    ElseIf ((Arg0 == 0x03))
                    {
                        R079 = P1T0 /* \_GPE.P1T0 */
                        R07A = P1T2 /* \_GPE.P1T2 */
                        R07B = P1P0 /* \_GPE.P1P0 */
                        F3SM &= 0x80
                        R07C |= F3SM /* \_GPE.F3SM */
                        Local0 = (R07C & 0x80)
                        Local0 |= P1S1 /* \_GPE.P1S1 */
                        R07C = Local0
                        R240 = P1T1 /* \_GPE.P1T1 */
                        Local0 = (P1S2 | 0x80)
                        R241 = Local0
                        R01E |= 0x80
                    }
                }
            }
        }

        Method (_E0A, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            Mutex (MUT0, 0x00)
            Acquire (MUT0, 0xFFFF)
            Name (TIDX, Zero)
            Name (MNTP, Zero)
            Name (TEM2, Zero)
            Name (ECID, Zero)
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xFF
            IBFX ()
            EC62 = Zero
            IBFX ()
            EC66 = 0x90
            IBFX ()
            EC62 = 0x81
            OBFX ()
            ECID = EC62 /* \_GPE.EC62 */
            TEM2 = (ECID & One)
            If (TEM2)
            {
                P1T0 = \_SB.A1T0
                P1T2 = \_SB.A1T2
                P1P0 = \_SB.A1P0
                P1S1 = \_SB.A1S1
                P1T1 = \_SB.A1T1
                P1S2 = \_SB.A1S2
                P2T0 = \_SB.A2T0
                P2T2 = \_SB.A2T2
                P2P0 = \_SB.A2P0
                P2S1 = \_SB.A2S1
                P2T1 = \_SB.A2T1
                P2S2 = \_SB.A2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = Zero
                LOMA (Zero)
            }

            TEM2 = (ECID & 0x04)
            If (TEM2)
            {
                P1T0 = \_SB.B1T0
                P1T2 = \_SB.B1T2
                P1P0 = \_SB.B1P0
                P1S1 = \_SB.B1S1
                P1T1 = \_SB.B1T1
                P1S2 = \_SB.B1S2
                P2T0 = \_SB.B2T0
                P2T2 = \_SB.B2T2
                P2P0 = \_SB.B2P0
                P2S1 = \_SB.B2S1
                P2T1 = \_SB.B2T1
                P2S2 = \_SB.B2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = One
                LOMA (One)
            }

            TEM2 = (ECID & 0x08)
            If (TEM2)
            {
                P1T0 = \_SB.C1T0
                P1T2 = \_SB.C1T2
                P1P0 = \_SB.C1P0
                P1S1 = \_SB.C1S1
                P1T1 = \_SB.C1T1
                P1S2 = \_SB.C1S2
                P2T0 = \_SB.C2T0
                P2T2 = \_SB.C2T2
                P2P0 = \_SB.C2P0
                P2S1 = \_SB.C2S1
                P2T1 = \_SB.C2T1
                P2S2 = \_SB.C2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = 0x02
                LOMA (0x02)
            }

            TEM2 = (ECID & 0x10)
            If (TEM2)
            {
                P1T0 = \_SB.D1T0
                P1T2 = \_SB.D1T2
                P1P0 = \_SB.D1P0
                P1S1 = \_SB.D1S1
                P1T1 = \_SB.D1T1
                P1S2 = \_SB.D1S2
                P2T0 = \_SB.D2T0
                P2T2 = \_SB.D2T2
                P2P0 = \_SB.D2P0
                P2S1 = \_SB.D2S1
                P2T1 = \_SB.D2T1
                P2S2 = \_SB.D2S2
                IBFX ()
                EC66 = 0x91
                IBFX ()
                EC62 = 0x43
                IBFX ()
                EC62 = 0x03
                LOMA (0x03)
            }

            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0x81
            IBFX ()
            EC62 = Zero
            IBFX ()
            EC66 = 0x91
            IBFX ()
            EC62 = 0xFF
            IBFX ()
            EC62 = Zero
            Release (MUT0)
            Return (Zero)
        }
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "409616721175Genuine NVIDIA Certified SLI Ready Motherboard for ASUS X370 PRO       10FD-Copyright 2016 NVIDIA Corporation All Rights Reserved-706749098419(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x41494C53))
                {
                    Return (SLIC) /* \_SB_.PCI0.SLIC */
                }

                Return (Zero)
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 38
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : DAA7DD80
[028h 0040   4]                 DSDT Address : D3F0B1E0
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 01 [Desktop]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0001
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000BC5A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 1
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : BE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000D3F0B1E0
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 00 [SystemMemory]
[0F5h 0245   1]                    Bit Width : 00
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 00 [SystemMemory]
[101h 0257   1]                    Bit Width : 00
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 38 41 4C 41 53 4B 41  // FACP.....8ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 80 DD A7 DA E0 B1 F0 D3 00 01 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
    0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
    0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 01 00 00  // e...........2...
    0070: A5 C5 0B 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: BE 00 00 00 00 00 00 00 00 00 00 00 E0 B1 F0 D3  // ................
    0090: 00 00 00 00 01 20 00 02 00 08 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 08 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 00 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 08 00 00 00 00 00 00 01 40 00 01  // . ...........@..
    00E0: 20 08 00 00 00 00 00 00 01 00 00 01 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 706F3F22
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 22 3F 6F 70 00 00 00 00  // FACS@..."?op....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D0
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 D0 41 4C 41 53 4B 41  // FIDT......ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 41 34 30 35 34  // ....$FID.x.A4054
    0030: 00 00 00 00 B0 D2 A3 0A CD 9B E9 9A 9A DB 36 CD  // ..............6.
    0040: 08 19 80 3B 30 35 00 31 33 00 34 32 00 30 37 00  // ...;05.13.42.07.
    0050: E2 07 0C 08 01 0D 1A FF FF 41 4C 41 53 4B 41 41  // .........ALASKAA
    0060: 20 4D 20 49 00 00 00 31 00 00 00 FF FF FF FF FF  //  M I...1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 22
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 00000000DB750430

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 00000000DB750450

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 22 41 4C 41 53 4B 41  // FPDTD...."ALASKA
    0010: 41 20 4D 20 49 20 00 00 09 20 07 01 41 4D 49 20  // A M I ... ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 04 75 DB  // ............0.u.
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 04 75 DB  // ............P.u.
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000005

[024h 0036   4]            Hardware Block ID : 10228201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 BD 41 4C 41 53 4B 41  // HPET8.....ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 41 4D 49 20  // A M I.... ..AMI 
    0020: 05 00 00 00 01 82 22 10 00 40 00 00 00 00 D0 FE  // ......"..@......
    0030: 00 00 00 00 00 EE 37 00                          // ......7.


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000000D0
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 8C
[00Ah 0010   6]                       Oem ID : "AMD  "
[010h 0016   8]                 Oem Table ID : "AMD IVRS"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD "
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block]
[031h 0049   1]                        Flags : B0
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002

[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FEB80000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]                     Reserved : 80048F6E

[048h 0072   1]                   Entry Type : 03
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1]                 Data Setting : 00

[04Ch 0076   1]                   Entry Type : 04
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1]                 Data Setting : 00

[050h 0080   1]                   Entry Type : 43
[051h 0081   2]                    Device ID : FF00
[053h 0083   1]                 Data Setting : 00
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A4
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                   Entry Type : 04
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1]                 Data Setting : 00

[05Ch 0092   1]                   Entry Type : 00
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1]                 Data Setting : 00

[060h 0096   1]                   Entry Type : 48
[061h 0097   2]                    Device ID : 0000
[063h 0099   1]                 Data Setting : 00
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                   Entry Type : 48
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1]                 Data Setting : D7
[06Ch 0108   1]                       Handle : 11
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                   Entry Type : 48
[071h 0113   2]                    Device ID : 0000
[073h 0115   1]                 Data Setting : 00
[074h 0116   1]                       Handle : 12
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Unknown Subtable Type]
[079h 0121   1]                        Flags : B0
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002

**** Unknown IVRS subtable type 0x11

Raw Table Data: Length 208 (0xD0)

    0000: 49 56 52 53 D0 00 00 00 02 8C 41 4D 44 20 20 00  // IVRS......AMD  .
    0010: 41 4D 44 20 49 56 52 53 01 00 00 00 41 4D 44 20  // AMD IVRS....AMD 
    0020: 00 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 B8 FE 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6E 8F 04 80 03 08 00 00 04 FE FF 00  // ....n...........
    0050: 43 00 FF 00 00 A4 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 11 A0 00 01  // H.......H.......
    0070: 48 00 00 00 12 01 00 01 11 B0 58 00 02 00 40 00  // H.........X...@.
    0080: 00 00 B8 FE 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DA 4A 29 22 EF 77 0F 00 00 00 00 00 00 00 00 00  // .J)".w..........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A4 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 11 A0 00 01 48 00 00 00 12 01 00 01  // H.......H.......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2C
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 2C 41 4C 41 53 4B 41  // MCFG<....,ALASKA
    0010: 41 20 4D 20 49 00 00 00 09 20 07 01 4D 53 46 54  // A M I.... ..MSFT
    0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD AOD", 0x00000001)
{
    Scope (\)
    {
        Device (AOD)
        {
            Name (DBG, Zero)
            Name (GDBG, Zero)
            Name (CDBG, Zero)
            Name (VDBG, Zero)
            Name (RDBG, Zero)
            OperationRegion (PMRG, SystemIO, 0x0CD6, 0x02)
            Field (PMRG, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
            Field (PSMI, ByteAcc, NoLock, Preserve)
            {
                APMC,   8, 
                APMD,   8
            }

            Method (ASMI, 1, NotSerialized)
            {
                APMC = Arg0
                Sleep (0x0A)
            }

            Name (OBID, Package (0xC1)
            {
                0x40, 
                0x00010001, 
                0x00010002, 
                0x00020001, 
                0x00020002, 
                0x00020003, 
                0x00020004, 
                0x00020005, 
                0x00020006, 
                0x00020007, 
                0x00020008, 
                0x00020009, 
                0x0002000A, 
                0x0002000B, 
                0x0002000C, 
                0x0002000D, 
                0x0002000E, 
                0x0002000F, 
                0x00020010, 
                0x00020011, 
                0x00020012, 
                0x00020013, 
                0x00020014, 
                0x00020015, 
                0x00020016, 
                0x00020017, 
                0x00020018, 
                0x00020019, 
                0x0002001A, 
                0x0002001B, 
                0x0002001C, 
                0x0002001D, 
                0x0002001E, 
                0x0002001F, 
                0x00020020, 
                0x00020021, 
                0x00020022, 
                0x00020023, 
                0x00020024, 
                0x00020025, 
                0x00020026, 
                0x00020027, 
                0x00020028, 
                0x00020029, 
                0x0002002A, 
                0x0002002B, 
                0x0002002C, 
                0x0002002D, 
                0x0002002E, 
                0x0002002F, 
                0x00020030, 
                0x00020031, 
                0x00020032, 
                0x00020033, 
                0x00020034, 
                0x00030001, 
                0x00030002, 
                0x00040001, 
                0x00040002, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                One, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "Get APCB Config", 
                "Get memory voltages", 
                "Set memory clock frequency", 
                "Set Tcl", 
                "Set Trcdrd", 
                "Set Trcdwr", 
                "Set Tras", 
                "Set Trp", 
                "Set ProcODT", 
                "Set Trcpage", 
                "Set Trc", 
                "Set Trfc", 
                "Set Trfc2", 
                "Set Trfc4", 
                "Set Tfaw", 
                "Set TrrdS", 
                "Set TrrdL", 
                "Set Twr", 
                "Set TwtrS", 
                "Set TwtrL", 
                "Set TCke", 
                "Set Tcwl", 
                "Set Trtp", 
                "Set TrdrdSc", 
                "Set TrdrdScL", 
                "Set TrdrdSd", 
                "Set TrdrdDd", 
                "Set TwrwrSc", 
                "Set TwrwrScL", 
                "Set TwrwrSd", 
                "Set TwrwrDd", 
                "Set Trdwr", 
                "Set Twrrd", 
                "Set GearDownEn", 
                "Set Cmd2t", 
                "Set RttNom", 
                "Set RttWR", 
                "Set RttPark", 
                "Set PowerDownEn", 
                "Set SMT EN", 
                "Software Downcore Config", 
                "Set EDC Throttler Control", 
                "Set VDDIO", 
                "Set VTT", 
                "Set AddrCmdSetup", 
                "Set CsOdtSetup", 
                "Set CkeSetup", 
                "Set CadBusClkDrvStren", 
                "Set CadBusAddrCmdDrvStren", 
                "Set CadBusCsOdtCmdDrvStren", 
                "Set CadBusCkeDrvStren", 
                "Set CLDO_VDDP", 
                "Set Interleave Mode", 
                "Set Interleave Size", 
                "Set FCLK OC Mode", 
                "Set SOC VID", 
                "Command Buffer Start", 
                "Command Buffer End", 
                "", 
                "", 
                "", 
                "", 
                "", 
                ""
            })
            Name (OBIT, Package (0xD9)
            {
                0x00020001, 
                0x014D, 
                0x0834, 
                0x21, 
                0x00020002, 
                0x08, 
                0x21, 
                One, 
                0x00020003, 
                0x08, 
                0x1B, 
                One, 
                0x00020004, 
                0x08, 
                0x1B, 
                One, 
                0x00020005, 
                0x15, 
                0x3A, 
                One, 
                0x00020006, 
                0x08, 
                0x1B, 
                One, 
                0x00020007, 
                Zero, 
                0x3F, 
                One, 
                0x00020008, 
                Zero, 
                0x03FF, 
                One, 
                0x00020009, 
                0x1D, 
                0x87, 
                One, 
                0x0002000A, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000B, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000C, 
                0x3C, 
                0x03DE, 
                One, 
                0x0002000D, 
                0x06, 
                0x36, 
                One, 
                0x0002000E, 
                0x04, 
                0x0C, 
                One, 
                0x0002000F, 
                0x04, 
                0x0C, 
                One, 
                0x00020010, 
                0x0A, 
                0x51, 
                One, 
                0x00020011, 
                0x02, 
                0x0E, 
                One, 
                0x00020012, 
                0x02, 
                0x0E, 
                One, 
                0x00020013, 
                One, 
                0x1F, 
                One, 
                0x00020014, 
                0x09, 
                0x16, 
                One, 
                0x00020015, 
                0x05, 
                0x0E, 
                One, 
                0x00020016, 
                One, 
                0x0F, 
                One, 
                0x00020017, 
                One, 
                0x0F, 
                One, 
                0x00020018, 
                One, 
                0x0F, 
                One, 
                0x00020019, 
                One, 
                0x0F, 
                One, 
                0x0002001A, 
                One, 
                0x0F, 
                One, 
                0x0002001B, 
                One, 
                0x3F, 
                One, 
                0x0002001C, 
                One, 
                0x0F, 
                One, 
                0x0002001D, 
                One, 
                0x0F, 
                One, 
                0x0002001E, 
                One, 
                0x1F, 
                One, 
                0x0002001F, 
                One, 
                0x0F, 
                One, 
                0x00020020, 
                Zero, 
                One, 
                One, 
                0x00020021, 
                Zero, 
                One, 
                One, 
                0x00020022, 
                Zero, 
                0x07, 
                One, 
                0x00020023, 
                Zero, 
                0x04, 
                One, 
                0x00020024, 
                Zero, 
                0x07, 
                One, 
                0x00020025, 
                Zero, 
                One, 
                One, 
                0x00020026, 
                Zero, 
                One, 
                One, 
                0x00020027, 
                Zero, 
                Ones, 
                One, 
                0x00020028, 
                Zero, 
                0x0F, 
                One, 
                0x00020029, 
                Zero, 
                0x3F, 
                One, 
                0x0002002A, 
                Zero, 
                0x3F, 
                One, 
                0x0002002B, 
                Zero, 
                0x3F, 
                One, 
                0x0002002C, 
                Zero, 
                0x1F, 
                One, 
                0x0002002D, 
                Zero, 
                0x1F, 
                One, 
                0x0002002E, 
                Zero, 
                0x1F, 
                One, 
                0x0002002F, 
                Zero, 
                0x1F, 
                One, 
                0x00020030, 
                Zero, 
                0x05DC, 
                One, 
                0x00020031, 
                Zero, 
                Ones, 
                One, 
                0x00020032, 
                Zero, 
                0x07, 
                One, 
                0x00020033, 
                Zero, 
                One, 
                One, 
                0x00020034, 
                Zero, 
                0xFF, 
                One, 
                0x00030001, 
                0x0438, 
                0x0528, 
                0x04, 
                0x00030002, 
                0x021C, 
                0x0294, 
                0x04, 
                Zero
            })
            Name (OBD1, Package (0xE7)
            {
                0x00020001, 
                0x20, 
                0x014D, 
                0x0190, 
                0x0215, 
                0x029B, 
                0x0320, 
                0x03A5, 
                0x042B, 
                0x04B0, 
                0x0535, 
                0x0557, 
                0x0578, 
                0x0599, 
                0x05BB, 
                0x05DC, 
                0x05FD, 
                0x061F, 
                0x0640, 
                0x0661, 
                0x0683, 
                0x06A4, 
                0x06C5, 
                0x06E7, 
                0x0708, 
                0x0729, 
                0x074B, 
                0x076C, 
                0x078D, 
                0x07AF, 
                0x07D0, 
                0x07F1, 
                0x0813, 
                0x0834, 
                0x00020002, 
                0x1A, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x00020003, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020004, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020005, 
                0x26, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x1C, 
                0x1D, 
                0x1E, 
                0x1F, 
                0x20, 
                0x21, 
                0x22, 
                0x23, 
                0x24, 
                0x25, 
                0x26, 
                0x27, 
                0x28, 
                0x29, 
                0x2A, 
                0x2B, 
                0x2C, 
                0x2D, 
                0x2E, 
                0x2F, 
                0x30, 
                0x31, 
                0x32, 
                0x33, 
                0x34, 
                0x35, 
                0x36, 
                0x37, 
                0x38, 
                0x39, 
                0x3A, 
                0x00020006, 
                0x14, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0D, 
                0x0E, 
                0x0F, 
                0x10, 
                0x11, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x00020007, 
                0x12, 
                Zero, 
                One, 
                0x02, 
                0x03, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x18, 
                0x19, 
                0x1A, 
                0x1B, 
                0x38, 
                0x39, 
                0x3A, 
                0x3B, 
                0x3E, 
                0x3F, 
                0x00020014, 
                0x08, 
                0x09, 
                0x0A, 
                0x0B, 
                0x0C, 
                0x0E, 
                0x10, 
                0x12, 
                0x14, 
                0x0002002C, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002D, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002E, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                0x0002002F, 
                0x06, 
                Zero, 
                One, 
                0x03, 
                0x07, 
                0x0F, 
                0x1F, 
                Zero
            })
            Name (OBD2, Package (0x63)
            {
                0x00030001, 
                0x3F, 
                0x0434, 
                0x0438, 
                0x043C, 
                0x0440, 
                0x0444, 
                0x0448, 
                0x044C, 
                0x0450, 
                0x0454, 
                0x0458, 
                0x045C, 
                0x0460, 
                0x0464, 
                0x0468, 
                0x046C, 
                0x0470, 
                0x0474, 
                0x0478, 
                0x047C, 
                0x0480, 
                0x0484, 
                0x0488, 
                0x048C, 
                0x0490, 
                0x0494, 
                0x0498, 
                0x049C, 
                0x04A0, 
                0x04A4, 
                0x04A8, 
                0x04AC, 
                0x04B0, 
                0x04B4, 
                0x04B8, 
                0x04BC, 
                0x04C0, 
                0x04C4, 
                0x04C8, 
                0x04CC, 
                0x04D0, 
                0x04D4, 
                0x04D8, 
                0x04DC, 
                0x04E0, 
                0x04E4, 
                0x04E8, 
                0x04EC, 
                0x04F0, 
                0x04F4, 
                0x04F8, 
                0x04FC, 
                0x0500, 
                0x0504, 
                0x0508, 
                0x050C, 
                0x0510, 
                0x0514, 
                0x0518, 
                0x051C, 
                0x0520, 
                0x0524, 
                0x0528, 
                0x052C, 
                0x00030002, 
                0x1F, 
                0x021C, 
                0x0220, 
                0x0224, 
                0x0228, 
                0x022C, 
                0x0230, 
                0x0234, 
                0x0238, 
                0x023C, 
                0x0240, 
                0x0244, 
                0x0248, 
                0x024C, 
                0x0250, 
                0x0254, 
                0x0258, 
                0x025C, 
                0x0260, 
                0x0264, 
                0x0268, 
                0x026C, 
                0x0270, 
                0x0274, 
                0x0278, 
                0x027C, 
                0x0280, 
                0x0284, 
                0x0288, 
                0x028C, 
                0x0290, 
                0x0294, 
                Zero
            })
            Method (BM01, 0, NotSerialized)
            {
            }

            Method (XINI, 0, NotSerialized)
            {
            }

            Method (EM01, 0, NotSerialized)
            {
            }

            Method (BM05, 1, NotSerialized)
            {
            }

            Method (EM05, 1, NotSerialized)
            {
            }

            Method (HM06, 0, NotSerialized)
            {
            }

            Method (HM07, 1, NotSerialized)
            {
            }

            Method (SBSL, 1, NotSerialized)
            {
                IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x2E), 
                    SBSL,   8
                }

                Local0 = (Arg0 | One)
                SBSL = Local0
            }

            Method (SETV, 2, NotSerialized)
            {
            }

            Method (GETV, 1, NotSerialized)
            {
            }

            Method (CPTB, 2, NotSerialized)
            {
                Name (LOID, Zero)
                CreateDWordField (Arg1, Zero, BUF0)
                CreateDWordField (Arg1, 0x04, BUF1)
                CreateDWordField (Arg1, 0x08, BUF2)
                CreateDWordField (Arg1, 0x0C, BUF3)
                Local0 = Zero
                LOID = DerefOf (OBIT [Local0])
                While (LOID)
                {
                    If ((LOID == Arg0))
                    {
                        BUF0 = DerefOf (OBIT [(Local0 + Zero)])
                        BUF1 = DerefOf (OBIT [(Local0 + One)])
                        BUF2 = DerefOf (OBIT [(Local0 + 0x02)])
                        BUF3 = DerefOf (OBIT [(Local0 + 0x03)])
                        Break
                    }

                    Local0 += 0x04
                    LOID = DerefOf (OBIT [Local0])
                }

                If ((LOID == Zero))
                {
                    Return (0xFF)
                }

                Return (Zero)
            }

            Name (GF01, Zero)
            Name (GVBF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     // .....
            })
            CreateDWordField (GVBF, Zero, GVB1)
            CreateByteField (GVBF, 0x04, GVB2)
            Method (AM01, 0, NotSerialized)
            {
                Return (CMDV) /* \AOD_.CMDV */
            }

            Method (AM02, 0, NotSerialized)
            {
                If (!GF01)
                {
                    BM01 ()
                    XINI ()
                    EM01 ()
                    GF01 = One
                }

                Return (Zero)
            }

            Method (AM03, 0, NotSerialized)
            {
                Return (OBID) /* \AOD_.OBID */
            }

            Method (AM04, 1, NotSerialized)
            {
                Name (LODT, Package (0x66)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD1 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD1 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD1 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD1 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD1 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Local0 = Zero
                While (One)
                {
                    If ((DerefOf (OBD2 [Local0]) == Arg0))
                    {
                        Local4 = Zero
                        Break
                    }

                    If ((DerefOf (OBD2 [Local0]) == Zero))
                    {
                        Local4 = 0x04
                        Break
                    }

                    Local0 += DerefOf (OBD2 [(Local0 + One)])
                    Local0 += 0x02
                }

                If ((Local4 == Zero))
                {
                    Local1 = DerefOf (OBD2 [(Local0 + One)])
                    Local1 += 0x02
                    Local2 = Zero
                    While (Local1)
                    {
                        LODT [Local2] = DerefOf (OBD2 [Local0])
                        Local1--
                        Local0++
                        Local2++
                    }

                    Return (LODT) /* \AOD_.AM04.LODT */
                }

                Return (LODT) /* \AOD_.AM04.LODT */
            }

            Method (AM05, 1, NotSerialized)
            {
                CreateDWordField (Arg0, Zero, ACMD)
                CreateField (OBUF, Zero, (SizeOf (OBUF) * 0x08), TEMP)
                TEMP = Zero
                CreateWordField (OBUF, Zero, BSCD)
                CreateDWordField (OBUF, 0x02, BSTS)
                CreateWordField (OBUF, 0x06, BSD1)
                CreateDWordField (OBUF, 0x08, BBSN)
                CreateDWordField (OBUF, 0x0C, BBVS)
                CreateDWordField (OBUF, 0x10, BBCB)
                CreateWordField (OBUF, 0x14, BBMC)
                CreateByteField (OBUF, 0x16, BTCL)
                CreateByteField (OBUF, 0x17, BTRR)
                CreateByteField (OBUF, 0x18, BTRW)
                CreateByteField (OBUF, 0x19, BRAS)
                CreateByteField (OBUF, 0x1A, BTRP)
                CreateWordField (OBUF, 0x1B, BVIO)
                CreateWordField (OBUF, 0x1D, BVTT)
                CreateWordField (OBUF, 0x1F, BVPP)
                CreateWordField (OBUF, 0x21, BODT)
                CreateWordField (OBUF, 0x23, BRPG)
                CreateByteField (OBUF, 0x25, BTRC)
                CreateWordField (OBUF, 0x26, BRFC)
                CreateWordField (OBUF, 0x28, BRF2)
                CreateWordField (OBUF, 0x2A, BRF4)
                CreateByteField (OBUF, 0x2C, BFAW)
                CreateByteField (OBUF, 0x2D, BRRS)
                CreateByteField (OBUF, 0x2E, BRRL)
                CreateByteField (OBUF, 0x2F, BTWR)
                CreateByteField (OBUF, 0x30, BWTS)
                CreateByteField (OBUF, 0x31, BWTL)
                CreateByteField (OBUF, 0x32, BCKE)
                CreateByteField (OBUF, 0x33, BCWL)
                CreateByteField (OBUF, 0x34, BRTP)
                CreateByteField (OBUF, 0x35, BRSC)
                CreateByteField (OBUF, 0x36, BRSL)
                CreateByteField (OBUF, 0x37, BRSD)
                CreateByteField (OBUF, 0x38, BRDD)
                CreateByteField (OBUF, 0x39, BWSC)
                CreateByteField (OBUF, 0x3A, BWSL)
                CreateByteField (OBUF, 0x3B, BWSD)
                CreateByteField (OBUF, 0x3C, BWDD)
                CreateByteField (OBUF, 0x3D, BRWR)
                CreateByteField (OBUF, 0x3E, BWRD)
                CreateByteField (OBUF, 0x3F, BRDN)
                CreateByteField (OBUF, 0x40, BM2T)
                CreateByteField (OBUF, 0x41, RBNM)
                CreateByteField (OBUF, 0x42, RBWR)
                CreateByteField (OBUF, 0x43, RBPK)
                CreateByteField (OBUF, 0x44, BPWD)
                CreateByteField (OBUF, 0x45, BOCD)
                CreateDWordField (OBUF, 0x46, BOCV)
                CreateDWordField (OBUF, 0x4A, BOCF)
                CreateByteField (OBUF, 0x4E, BSMT)
                CreateDWordField (OBUF, 0x4F, BTOF)
                CreateByteField (OBUF, 0x53, BEDC)
                CreateWordField (OBUF, 0x54, BCNT)
                CreateByteField (OBUF, 0x56, BACS)
                CreateByteField (OBUF, 0x57, BCOS)
                CreateByteField (OBUF, 0x58, BCES)
                CreateByteField (OBUF, 0x59, BCBC)
                CreateByteField (OBUF, 0x5A, BCBA)
                CreateByteField (OBUF, 0x5B, BCBO)
                CreateByteField (OBUF, 0x5C, BCBE)
                CreateDWordField (OBUF, 0x5D, BCVP)
                CreateByteField (OBUF, 0x5F, BEDO)
                CreateDWordField (OBUF, 0x60, BNLC)
                CreateDWordField (OBUF, 0x64, BNLM)
                CreateDWordField (OBUF, 0x68, BNLS)
                CreateDWordField (OBUF, 0x6C, BPPL)
                CreateDWordField (OBUF, 0x70, BTDL)
                CreateDWordField (OBUF, 0x74, BEDL)
                CreateByteField (OBUF, 0x78, BFOC)
                CreateByteField (OBUF, 0x79, BSVD)
                If ((ACMD == 0x00010001))
                {
                    R101 (Arg0)
                }
                ElseIf ((ACMD == 0x00010002))
                {
                    R102 (Arg0)
                }
                ElseIf ((ACMD == 0x00020001))
                {
                    R201 (Arg0)
                }
                ElseIf ((ACMD == 0x00020002))
                {
                    R202 (Arg0)
                }
                ElseIf ((ACMD == 0x00020003))
                {
                    R203 (Arg0)
                }
                ElseIf ((ACMD == 0x00020004))
                {
                    R204 (Arg0)
                }
                ElseIf ((ACMD == 0x00020005))
                {
                    R205 (Arg0)
                }
                ElseIf ((ACMD == 0x00020006))
                {
                    R206 (Arg0)
                }
                ElseIf ((ACMD == 0x00020007))
                {
                    R207 (Arg0)
                }
                ElseIf ((ACMD == 0x00020008))
                {
                    R208 (Arg0)
                }
                ElseIf ((ACMD == 0x00020009))
                {
                    R209 (Arg0)
                }
                ElseIf ((ACMD == 0x0002000A))
                {
                    R20A (Arg0)
                }
                ElseIf ((ACMD == 0x0002000B))
                {
                    R20B (Arg0)
                }
                ElseIf ((ACMD == 0x0002000C))
                {
                    R20C (Arg0)
                }
                ElseIf ((ACMD == 0x0002000D))
                {
                    R20D (Arg0)
                }
                ElseIf ((ACMD == 0x0002000E))
                {
                    R20E (Arg0)
                }
                ElseIf ((ACMD == 0x0002000F))
                {
                    R20F (Arg0)
                }
                ElseIf ((ACMD == 0x00020010))
                {
                    R210 (Arg0)
                }
                ElseIf ((ACMD == 0x00020011))
                {
                    R211 (Arg0)
                }
                ElseIf ((ACMD == 0x00020012))
                {
                    R212 (Arg0)
                }
                ElseIf ((ACMD == 0x00020013))
                {
                    R213 (Arg0)
                }
                ElseIf ((ACMD == 0x00020014))
                {
                    R214 (Arg0)
                }
                ElseIf ((ACMD == 0x00020015))
                {
                    R215 (Arg0)
                }
                ElseIf ((ACMD == 0x00020016))
                {
                    R216 (Arg0)
                }
                ElseIf ((ACMD == 0x00020017))
                {
                    R217 (Arg0)
                }
                ElseIf ((ACMD == 0x00020018))
                {
                    R218 (Arg0)
                }
                ElseIf ((ACMD == 0x00020019))
                {
                    R219 (Arg0)
                }
                ElseIf ((ACMD == 0x0002001A))
                {
                    R21A (Arg0)
                }
                ElseIf ((ACMD == 0x0002001B))
                {
                    R21B (Arg0)
                }
                ElseIf ((ACMD == 0x0002001C))
                {
                    R21C (Arg0)
                }
                ElseIf ((ACMD == 0x0002001D))
                {
                    R21D (Arg0)
                }
                ElseIf ((ACMD == 0x0002001E))
                {
                    R21E (Arg0)
                }
                ElseIf ((ACMD == 0x0002001F))
                {
                    R21F (Arg0)
                }
                ElseIf ((ACMD == 0x00020020))
                {
                    R220 (Arg0)
                }
                ElseIf ((ACMD == 0x00020021))
                {
                    R221 (Arg0)
                }
                ElseIf ((ACMD == 0x00020022))
                {
                    R222 (Arg0)
                }
                ElseIf ((ACMD == 0x00020023))
                {
                    R223 (Arg0)
                }
                ElseIf ((ACMD == 0x00020024))
                {
                    R224 (Arg0)
                }
                ElseIf ((ACMD == 0x00020025))
                {
                    R225 (Arg0)
                }
                ElseIf ((ACMD == 0x00020026))
                {
                    R226 (Arg0)
                }
                ElseIf ((ACMD == 0x00020027))
                {
                    R227 (Arg0)
                }
                ElseIf ((ACMD == 0x00020028))
                {
                    R228 (Arg0)
                }
                ElseIf ((ACMD == 0x00020029))
                {
                    R229 (Arg0)
                }
                ElseIf ((ACMD == 0x0002002A))
                {
                    R22A (Arg0)
                }
                ElseIf ((ACMD == 0x0002002B))
                {
                    R22B (Arg0)
                }
                ElseIf ((ACMD == 0x0002002C))
                {
                    R22C (Arg0)
                }
                ElseIf ((ACMD == 0x0002002D))
                {
                    R22D (Arg0)
                }
                ElseIf ((ACMD == 0x0002002E))
                {
                    R22E (Arg0)
                }
                ElseIf ((ACMD == 0x0002002F))
                {
                    R22F (Arg0)
                }
                ElseIf ((ACMD == 0x00020030))
                {
                    R230 (Arg0)
                }
                ElseIf ((ACMD == 0x00020031))
                {
                    R231 (Arg0)
                }
                ElseIf ((ACMD == 0x00020032))
                {
                    R232 (Arg0)
                }
                ElseIf ((ACMD == 0x00020033))
                {
                    R233 (Arg0)
                }
                ElseIf ((ACMD == 0x00020034))
                {
                    R234 (Arg0)
                }
                ElseIf ((ACMD == 0x00030001))
                {
                    R301 (Arg0)
                }
                ElseIf ((ACMD == 0x00030002))
                {
                    R302 (Arg0)
                }
                ElseIf ((ACMD == 0x00030003))
                {
                    R303 (Arg0)
                }
                ElseIf ((ACMD == 0x00040001))
                {
                    R401 (Arg0)
                }
                ElseIf ((ACMD == 0x00040002))
                {
                    R402 (Arg0)
                }
                Else
                {
                }

                BSCD = ASCD /* \AOD_.ASCD */
                BSTS = ASTS /* \AOD_.ASTS */
                BSD1 = RSD1 /* \AOD_.RSD1 */
                BBSN = MBSN /* \AOD_.MBSN */
                BBVS = MBVS /* \AOD_.MBVS */
                BBCB = MBCB /* \AOD_.MBCB */
                BBMC = MBMC /* \AOD_.MBMC */
                BTCL = TTCL /* \AOD_.TTCL */
                BTRR = TRCR /* \AOD_.TRCR */
                BTRW = TRCW /* \AOD_.TRCW */
                BRAS = TRAS /* \AOD_.TRAS */
                BTRP = TTRP /* \AOD_.TTRP */
                BVIO = VDIO /* \AOD_.VDIO */
                BVTT = VMTT /* \AOD_.VMTT */
                BVPP = VMPP /* \AOD_.VMPP */
                BODT = PODT /* \AOD_.PODT */
                BRPG = TRPG /* \AOD_.TRPG */
                BTRC = TTRC /* \AOD_.TTRC */
                BRFC = TRFC /* \AOD_.TRFC */
                BRF2 = TRF2 /* \AOD_.TRF2 */
                BRF4 = TRF4 /* \AOD_.TRF4 */
                BFAW = TFAW /* \AOD_.TFAW */
                BRRS = TRRS /* \AOD_.TRRS */
                BRRL = TRRL /* \AOD_.TRRL */
                BTWR = TTWR /* \AOD_.TTWR */
                BWTS = TWTS /* \AOD_.TWTS */
                BWTL = TWTL /* \AOD_.TWTL */
                BCKE = TCKE /* \AOD_.TCKE */
                BCWL = TCWL /* \AOD_.TCWL */
                BRTP = TRTP /* \AOD_.TRTP */
                BRSC = TRSC /* \AOD_.TRSC */
                BRSL = TRSL /* \AOD_.TRSL */
                BRSD = TRSD /* \AOD_.TRSD */
                BRDD = TRDD /* \AOD_.TRDD */
                BWSC = TWSC /* \AOD_.TWSC */
                BWSL = TWSL /* \AOD_.TWSL */
                BWSD = TWSD /* \AOD_.TWSD */
                BWDD = TWDD /* \AOD_.TWDD */
                BRWR = TRWR /* \AOD_.TRWR */
                BWRD = TWRD /* \AOD_.TWRD */
                BRDN = GRDN /* \AOD_.GRDN */
                BM2T = CM2T /* \AOD_.CM2T */
                RBNM = RTNM /* \AOD_.RTNM */
                RBWR = RTWR /* \AOD_.RTWR */
                RBPK = RTPK /* \AOD_.RTPK */
                BPWD = PWDE /* \AOD_.PWDE */
                BOCD = OCDS /* \AOD_.OCDS */
                BOCV = OCVM /* \AOD_.OCVM */
                BOCF = OCFM /* \AOD_.OCFM */
                BSMT = SMTE /* \AOD_.SMTE */
                BTOF = TOFF /* \AOD_.TOFF */
                BEDC = EDCT /* \AOD_.EDCT */
                BCNT = ACNT /* \AOD_.ACNT */
                BACS = ACSP /* \AOD_.ACSP */
                BCOS = COSP /* \AOD_.COSP */
                BCES = CESP /* \AOD_.CESP */
                BCBC = CBCK /* \AOD_.CBCK */
                BCBA = CBAC /* \AOD_.CBAC */
                BCBO = CBCO /* \AOD_.CBCO */
                BCBE = CBCE /* \AOD_.CBCE */
                BCVP = CDVP /* \AOD_.CDVP */
                BEDO = EDCO /* \AOD_.EDCO */
                BNLC = INLC /* \AOD_.INLC */
                BNLM = INLM /* \AOD_.INLM */
                BNLS = INLS /* \AOD_.INLS */
                BPPL = PPTL /* \AOD_.PPTL */
                BTDL = TDCL /* \AOD_.TDCL */
                BEDL = EDCL /* \AOD_.EDCL */
                BFOC = FCOC /* \AOD_.FCOC */
                BSVD = SVID /* \AOD_.SVID */
                Return (OBUF) /* \AOD_.OBUF */
            }

            Method (AM06, 1, NotSerialized)
            {
                Name (INFO, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CPTB (Arg0, INFO)
                Return (INFO) /* \AOD_.AM06.INFO */
            }

            Name (CMDV, 0x04)
            Name (OBUF, Buffer (0xC8){})
            OperationRegion (AODT, SystemMemory, 0xDAA91698, 0xC8)
            Field (AODT, AnyAcc, NoLock, Preserve)
            {
                ASCD,   16, 
                ASTS,   32, 
                RSD1,   16, 
                MBSN,   32, 
                MBVS,   32, 
                MBCB,   32, 
                MBMC,   16, 
                TTCL,   8, 
                TRCR,   8, 
                TRCW,   8, 
                TRAS,   8, 
                TTRP,   8, 
                VDIO,   16, 
                VMTT,   16, 
                VMPP,   16, 
                PODT,   16, 
                TRPG,   16, 
                TTRC,   8, 
                TRFC,   16, 
                TRF2,   16, 
                TRF4,   16, 
                TFAW,   8, 
                TRRS,   8, 
                TRRL,   8, 
                TTWR,   8, 
                TWTS,   8, 
                TWTL,   8, 
                TCKE,   8, 
                TCWL,   8, 
                TRTP,   8, 
                TRSC,   8, 
                TRSL,   8, 
                TRSD,   8, 
                TRDD,   8, 
                TWSC,   8, 
                TWSL,   8, 
                TWSD,   8, 
                TWDD,   8, 
                TRWR,   8, 
                TWRD,   8, 
                GRDN,   8, 
                CM2T,   8, 
                RTNM,   8, 
                RTWR,   8, 
                RTPK,   8, 
                PWDE,   8, 
                OCDS,   8, 
                OCVM,   32, 
                OCFM,   32, 
                SMTE,   8, 
                TOFF,   32, 
                EDCT,   8, 
                ACNT,   16, 
                ACSP,   8, 
                COSP,   8, 
                CESP,   8, 
                CBCK,   8, 
                CBAC,   8, 
                CBCO,   8, 
                CBCE,   8, 
                CDVP,   16, 
                EDCO,   8, 
                INLC,   32, 
                INLM,   32, 
                INLS,   32, 
                PPTL,   32, 
                TDCL,   32, 
                EDCL,   32, 
                FCOC,   8, 
                SVID,   8, 
                MRSD,   560, 
                RSD2,   64
            }

            Method (R101, 1, NotSerialized)
            {
                MBVS = 0x04
                MBCB = 0x80000000
                ASMI (0x9D)
            }

            Method (R102, 1, NotSerialized)
            {
                MBVS = 0x04
                Local0 = 0x40000000
                MBCB = Local0
                ASMI (0x9E)
            }

            Method (R201, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MCLK)
                MBVS = 0x04
                MBMC = MCLK /* \AOD_.R201.MCLK */
                MBCB = One
                ASMI (0x9D)
            }

            Method (R202, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTCL)
                MBVS = 0x04
                TTCL = MTCL /* \AOD_.R202.MTCL */
                MBCB = 0x02
                ASMI (0x9D)
            }

            Method (R203, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDD)
                MBVS = 0x04
                TRCR = MRDD /* \AOD_.R203.MRDD */
                MBCB = 0x04
                ASMI (0x9D)
            }

            Method (R204, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRDW)
                MBVS = 0x04
                TRCW = MRDW /* \AOD_.R204.MRDW */
                MBCB = 0x08
                ASMI (0x9D)
            }

            Method (R205, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRS)
                MBVS = 0x04
                TRAS = MTRS /* \AOD_.R205.MTRS */
                MBCB = 0x20
                ASMI (0x9D)
            }

            Method (R206, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MTRP)
                MBVS = 0x04
                TTRP = MTRP /* \AOD_.R206.MTRP */
                MBCB = 0x10
                ASMI (0x9D)
            }

            Method (R207, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MPOT)
                MBVS = 0x04
                PODT = MPOT /* \AOD_.R207.MPOT */
                MBCB = 0x3000
                ASMI (0x9D)
            }

            Method (R208, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, MRPG)
                MBVS = 0x04
                TRPG = MRPG /* \AOD_.R208.MRPG */
                MBCB = 0x4000
                ASMI (0x9D)
            }

            Method (R209, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTRC = SVAL /* \AOD_.R209.SVAL */
                MBCB = 0x5000
                ASMI (0x9D)
            }

            Method (R20A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRFC = SVAL /* \AOD_.R20A.SVAL */
                MBCB = 0x6000
                ASMI (0x9D)
            }

            Method (R20B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF2 = SVAL /* \AOD_.R20B.SVAL */
                MBCB = 0x7000
                ASMI (0x9D)
            }

            Method (R20C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRF4 = SVAL /* \AOD_.R20C.SVAL */
                MBCB = 0x8000
                ASMI (0x9D)
            }

            Method (R20D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TFAW = SVAL /* \AOD_.R20D.SVAL */
                MBCB = 0x9000
                ASMI (0x9D)
            }

            Method (R20E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRS = SVAL /* \AOD_.R20E.SVAL */
                MBCB = 0xA000
                ASMI (0x9D)
            }

            Method (R20F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRRL = SVAL /* \AOD_.R20F.SVAL */
                MBCB = 0xB000
                ASMI (0x9D)
            }

            Method (R210, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TTWR = SVAL /* \AOD_.R210.SVAL */
                MBCB = 0xC000
                ASMI (0x9D)
            }

            Method (R211, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTS = SVAL /* \AOD_.R211.SVAL */
                MBCB = 0xD000
                ASMI (0x9D)
            }

            Method (R212, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWTL = SVAL /* \AOD_.R212.SVAL */
                MBCB = 0xE000
                ASMI (0x9D)
            }

            Method (R213, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCKE = SVAL /* \AOD_.R213.SVAL */
                MBCB = 0xF000
                ASMI (0x9D)
            }

            Method (R214, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TCWL = SVAL /* \AOD_.R214.SVAL */
                MBCB = 0x00010000
                ASMI (0x9D)
            }

            Method (R215, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRTP = SVAL /* \AOD_.R215.SVAL */
                MBCB = 0x00020000
                ASMI (0x9D)
            }

            Method (R216, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSC = SVAL /* \AOD_.R216.SVAL */
                MBCB = 0x00030000
                ASMI (0x9D)
            }

            Method (R217, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSL = SVAL /* \AOD_.R217.SVAL */
                MBCB = 0x00040000
                ASMI (0x9D)
            }

            Method (R218, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRSD = SVAL /* \AOD_.R218.SVAL */
                MBCB = 0x00050000
                ASMI (0x9D)
            }

            Method (R219, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRDD = SVAL /* \AOD_.R219.SVAL */
                MBCB = 0x00060000
                ASMI (0x9D)
            }

            Method (R21A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSC = SVAL /* \AOD_.R21A.SVAL */
                MBCB = 0x00070000
                ASMI (0x9D)
            }

            Method (R21B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSL = SVAL /* \AOD_.R21B.SVAL */
                MBCB = 0x00080000
                ASMI (0x9D)
            }

            Method (R21C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWSD = SVAL /* \AOD_.R21C.SVAL */
                MBCB = 0x00090000
                ASMI (0x9D)
            }

            Method (R21D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWDD = SVAL /* \AOD_.R21D.SVAL */
                MBCB = 0x000A0000
                ASMI (0x9D)
            }

            Method (R21E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TRWR = SVAL /* \AOD_.R21E.SVAL */
                MBCB = 0x000B0000
                ASMI (0x9D)
            }

            Method (R21F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                TWRD = SVAL /* \AOD_.R21F.SVAL */
                MBCB = 0x000C0000
                ASMI (0x9D)
            }

            Method (R220, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                GRDN = SVAL /* \AOD_.R220.SVAL */
                MBCB = 0x000D0000
                ASMI (0x9D)
            }

            Method (R221, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CM2T = SVAL /* \AOD_.R221.SVAL */
                MBCB = 0x000E0000
                ASMI (0x9D)
            }

            Method (R222, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTNM = SVAL /* \AOD_.R222.SVAL */
                MBCB = 0x000F0000
                ASMI (0x9D)
            }

            Method (R223, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTWR = SVAL /* \AOD_.R223.SVAL */
                MBCB = 0x00100000
                ASMI (0x9D)
            }

            Method (R224, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                RTPK = SVAL /* \AOD_.R224.SVAL */
                MBCB = 0x00200000
                ASMI (0x9D)
            }

            Method (R225, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                PWDE = SVAL /* \AOD_.R225.SVAL */
                MBCB = 0x00300000
                ASMI (0x9D)
            }

            Method (R226, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SMTE = SVAL /* \AOD_.R226.SVAL */
                MBCB = 0x00400000
                ASMI (0x9D)
            }

            Method (R227, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACNT = SVAL /* \AOD_.R227.SVAL */
                MBCB = 0x00500000
                ASMI (0x9D)
            }

            Method (R228, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                EDCT = SVAL /* \AOD_.R228.SVAL */
                MBCB = 0x00600000
                ASMI (0x9D)
            }

            Method (R229, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                ACSP = SVAL /* \AOD_.R229.SVAL */
                MBCB = 0x00800000
                ASMI (0x9D)
            }

            Method (R22A, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                COSP = SVAL /* \AOD_.R22A.SVAL */
                MBCB = 0x00900000
                ASMI (0x9D)
            }

            Method (R22B, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CESP = SVAL /* \AOD_.R22B.SVAL */
                MBCB = 0x00A00000
                ASMI (0x9D)
            }

            Method (R22C, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCK = SVAL /* \AOD_.R22C.SVAL */
                MBCB = 0x00B00000
                ASMI (0x9D)
            }

            Method (R22D, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBAC = SVAL /* \AOD_.R22D.SVAL */
                MBCB = 0x00C00000
                ASMI (0x9D)
            }

            Method (R22E, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCO = SVAL /* \AOD_.R22E.SVAL */
                MBCB = 0x00D00000
                ASMI (0x9D)
            }

            Method (R22F, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CBCE = SVAL /* \AOD_.R22F.SVAL */
                MBCB = 0x00E00000
                ASMI (0x9D)
            }

            Method (R230, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                CDVP = SVAL /* \AOD_.R230.SVAL */
                MBCB = 0x00700000
                ASMI (0x9D)
            }

            Method (R231, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLM = SVAL /* \AOD_.R231.SVAL */
                MBCB = 0x00100001
                ASMI (0x9D)
            }

            Method (R232, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                INLS = SVAL /* \AOD_.R232.SVAL */
                MBCB = 0x00100002
                ASMI (0x9D)
            }

            Method (R233, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                FCOC = SVAL /* \AOD_.R233.SVAL */
                MBCB = 0x00100003
                ASMI (0x9D)
            }

            Method (R234, 1, NotSerialized)
            {
                CreateByteField (Arg0, 0x04, SVAL)
                MBVS = 0x04
                SVID = SVAL /* \AOD_.R234.SVAL */
                MBCB = 0x00100004
                ASMI (0x9D)
            }

            Method (R301, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVIO)
                MBVS = 0x04
                VDIO = MVIO /* \AOD_.R301.MVIO */
                MBCB = 0x0100
                ASMI (0x9E)
            }

            Method (R302, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVTT)
                MBVS = 0x04
                VMTT = MVTT /* \AOD_.R302.MVTT */
                MBCB = 0x0200
                ASMI (0x9E)
            }

            Method (R303, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                VMPP = MVPP /* \AOD_.R303.MVPP */
                MBCB = 0x2000
                ASMI (0x9E)
            }

            Method (R401, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x01000000
                ASMI (0x9E)
            }

            Method (R402, 1, NotSerialized)
            {
                CreateWordField (Arg0, 0x04, MVPP)
                MBVS = 0x04
                MBCB = 0x02000000
                ASMI (0x9E)
            }

            Method (R505, 1, NotSerialized)
            {
                MBVS = 0x04
            }

            Name (WQBA, Buffer (0x08CB)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xBB, 0x08, 0x00, 0x00, 0x44, 0x2D, 0x00, 0x00,  // ....D-..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x4C, 0x96, 0x00, 0x01, 0x06, 0x18, 0x42,  // (L.....B
                /* 0020 */  0x10, 0x0D, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x50, 0x2B, 0x26,  // x\.A.P+&
                /* 00A8 */  0x04, 0xE5, 0x0F, 0x59, 0x31, 0x60, 0x50, 0x12,  // ...Y1`P.
                /* 00B0 */  0xC6, 0x42, 0x5D, 0x8C, 0x1A, 0x35, 0x52, 0x36,  // .B]..5R6
                /* 00B8 */  0x20, 0x43, 0x94, 0x36, 0x6A, 0xF4, 0x80, 0xCE,  //  C.6j...
                /* 00C0 */  0xEF, 0x48, 0xCE, 0xEE, 0xE8, 0x8E, 0x24, 0x81,  // .H....$.
                /* 00C8 */  0x51, 0x8F, 0xE9, 0x18, 0x0B, 0x9B, 0x91, 0x50,  // Q......P
                /* 00D0 */  0x63, 0x34, 0x07, 0x45, 0xC2, 0x0D, 0x1A, 0x2D,  // c4.E...-
                /* 00D8 */  0x11, 0x56, 0xE3, 0x8A, 0x7D, 0x66, 0x16, 0x3E,  // .V..}f.>
                /* 00E0 */  0x2C, 0x61, 0x1C, 0xC1, 0x81, 0x1D, 0xAC, 0x45,  // ,a.....E
                /* 00E8 */  0xC3, 0x08, 0xAD, 0x20, 0x38, 0x0D, 0xE2, 0x28,  // ... 8..(
                /* 00F0 */  0xA2, 0x84, 0x61, 0x78, 0xC6, 0x0C, 0x74, 0x94,  // ..ax..t.
                /* 00F8 */  0x0C, 0x29, 0x4C, 0xD0, 0x13, 0x08, 0x72, 0xF2,  // .)L...r.
                /* 0100 */  0x0C, 0xCB, 0x10, 0x67, 0xC0, 0xB1, 0x62, 0x84,  // ...g..b.
                /* 0108 */  0x0A, 0x89, 0x19, 0x48, 0xF0, 0xFF, 0xFF, 0x09,  // ...H....
                /* 0110 */  0x74, 0x8D, 0x21, 0xCF, 0x40, 0xE4, 0x1E, 0x70,  // t.!.@..p
                /* 0118 */  0x02, 0x41, 0xA2, 0x47, 0x09, 0x6E, 0x5C, 0xA3,  // .A.G.n\.
                /* 0120 */  0xB2, 0x31, 0x9D, 0x0D, 0x6E, 0x60, 0x26, 0x88,  // .1..n`&.
                /* 0128 */  0x73, 0x78, 0x18, 0x19, 0x10, 0x9A, 0x40, 0xFC,  // sx....@.
                /* 0130 */  0xD8, 0xE1, 0x13, 0xD8, 0xFD, 0x71, 0x40, 0x0A,  // .....q@.
                /* 0138 */  0x11, 0x74, 0x21, 0x38, 0xD3, 0x1A, 0x05, 0x58,  // .t!8...X
                /* 0140 */  0x3B, 0x3B, 0xC8, 0x16, 0x84, 0xCE, 0x02, 0xB1,  // ;;......
                /* 0148 */  0x1A, 0x43, 0x11, 0x44, 0x84, 0xA0, 0x51, 0x8C,  // .C.D..Q.
                /* 0150 */  0x17, 0x21, 0x54, 0x88, 0x28, 0x51, 0xCF, 0x39,  // .!T.(Q.9
                /* 0158 */  0x48, 0x6D, 0x02, 0x94, 0x81, 0x08, 0x2D, 0x98,  // Hm....-.
                /* 0160 */  0x11, 0x98, 0xFD, 0x33, 0x00, 0xB3, 0x70, 0xAC,  // ...3..p.
                /* 0168 */  0x60, 0x12, 0x4E, 0x04, 0x32, 0x32, 0x1A, 0x7A,  // `.N.22.z
                /* 0170 */  0x58, 0xF0, 0x49, 0x80, 0x1D, 0x10, 0x3C, 0x9F,  // X.I...<.
                /* 0178 */  0x53, 0x33, 0x81, 0x03, 0x43, 0x88, 0x57, 0x02,  // S3..C.W.
                /* 0180 */  0x44, 0x1D, 0x2D, 0x28, 0x81, 0xA5, 0x1C, 0x0D,  // D.-(....
                /* 0188 */  0x88, 0xED, 0x81, 0xE9, 0x1E, 0x70, 0x84, 0xE7,  // .....p..
                /* 0190 */  0xEE, 0xCB, 0xC1, 0xA9, 0xF9, 0xA7, 0xE1, 0x69,  // .......i
                /* 0198 */  0x3E, 0x24, 0x60, 0x86, 0xE8, 0xB1, 0x1E, 0x44,  // >$`....D
                /* 01A0 */  0xC0, 0x43, 0x64, 0xA7, 0x04, 0x03, 0xE2, 0xBD,  // .Cd.....
                /* 01A8 */  0x5F, 0x0B, 0xC8, 0x08, 0x5E, 0x12, 0x0C, 0xE8,  // _...^...
                /* 01B0 */  0x49, 0x3C, 0x20, 0x80, 0xE5, 0xA0, 0x71, 0xE0,  // I< ...q.
                /* 01B8 */  0x27, 0x54, 0xF1, 0x1D, 0x80, 0x1E, 0x09, 0xD8,  // 'T......
                /* 01C0 */  0x8C, 0xE2, 0x9B, 0xE0, 0x7F, 0x44, 0xC7, 0x07,  // .....D..
                /* 01C8 */  0xE4, 0x9C, 0xA3, 0x3D, 0x3B, 0xBC, 0x2C, 0x34,  // ...=;.,4
                /* 01D0 */  0x7B, 0xC5, 0x20, 0x04, 0xAF, 0x01, 0xBE, 0x29,  // {. ....)
                /* 01D8 */  0xF8, 0x34, 0x62, 0x51, 0xAB, 0x93, 0x93, 0x55,  // .4bQ...U
                /* 01E0 */  0x79, 0xC4, 0x14, 0xDC, 0x43, 0xE0, 0x32, 0xE0,  // y...C.2.
                /* 01E8 */  0x34, 0x74, 0x8F, 0x17, 0x1C, 0x0A, 0xC6, 0x4B,  // 4t.....K
                /* 01F0 */  0xFF, 0xFF, 0xE3, 0x05, 0xF7, 0xBC, 0x8E, 0x17,  // ........
                /* 01F8 */  0x2C, 0xC7, 0x84, 0x87, 0x8D, 0xAA, 0x20, 0x34,  // ,..... 4
                /* 0200 */  0x88, 0x03, 0x6E, 0x7E, 0x00, 0xE4, 0x6A, 0xE1,  // ..n~..j.
                /* 0208 */  0x11, 0xB3, 0xB9, 0x9C, 0x15, 0x3B, 0xA2, 0xF0,  // .....;..
                /* 0210 */  0xE1, 0xF1, 0x61, 0x78, 0xC4, 0xEF, 0x0D, 0xC5,  // ..ax....
                /* 0218 */  0x82, 0x48, 0x20, 0x84, 0xCE, 0x0C, 0x47, 0x0E,  // .H ...G.
                /* 0220 */  0x16, 0x67, 0x27, 0x08, 0x11, 0x58, 0xDA, 0xD0,  // .g'..X..
                /* 0228 */  0xD1, 0x43, 0xF6, 0xA8, 0x5E, 0x62, 0x8C, 0xF1,  // .C..^b..
                /* 0230 */  0x44, 0x60, 0xD4, 0x53, 0x3A, 0x7A, 0xF0, 0x01,  // D`.S:z..
                /* 0238 */  0x7A, 0xF4, 0x80, 0xCF, 0xFF, 0xFF, 0xE8, 0x71,  // z......q
                /* 0240 */  0x92, 0xC6, 0x2C, 0x11, 0xA3, 0x47, 0x9F, 0x23,  // ..,..G.#
                /* 0248 */  0x3C, 0x9D, 0xB7, 0x1F, 0x7E, 0x14, 0x49, 0xE0,  // <...~.I.
                /* 0250 */  0xF8, 0x47, 0x27, 0x3A, 0x7A, 0x70, 0x9C, 0x7E,  // .G':zp.~
                /* 0258 */  0x3C, 0x7A, 0xF0, 0x8F, 0xD1, 0xA3, 0x07, 0xCF,  // <z......
                /* 0260 */  0x18, 0xCE, 0x0D, 0x77, 0xB5, 0xF1, 0xC8, 0xC1,  // ...w....
                /* 0268 */  0x3E, 0x5E, 0xBC, 0xBC, 0xE3, 0x16, 0x28, 0x7C,  // >^....(|
                /* 0270 */  0xCE, 0x9E, 0x0C, 0xE0, 0x3D, 0x08, 0x77, 0xDE,  // ....=.w.
                /* 0278 */  0x02, 0x2E, 0x23, 0xE0, 0x82, 0x9F, 0x3A, 0x3E,  // ..#...:>
                /* 0280 */  0x57, 0x51, 0x89, 0x30, 0xA8, 0xA3, 0x15, 0xB8,  // WQ.0....
                /* 0288 */  0xFE, 0xFF, 0x47, 0x2B, 0x80, 0x09, 0xF7, 0x87,  // ..G+....
                /* 0290 */  0x57, 0xAB, 0x47, 0x2B, 0xB0, 0x87, 0x7C, 0x49,  // W.G+..|I
                /* 0298 */  0xE8, 0x47, 0xE0, 0xD8, 0x10, 0x72, 0x72, 0xB4,  // .G...rr.
                /* 02A0 */  0x42, 0x9D, 0x8C, 0x70, 0x41, 0x0F, 0x56, 0x40,  // B..pA.V@
                /* 02A8 */  0xF7, 0xA0, 0x81, 0x3B, 0x1E, 0xC0, 0xF9, 0xFF,  // ...;....
                /* 02B0 */  0x1F, 0x0F, 0xF8, 0xC0, 0xF8, 0xE9, 0x05, 0x7C,  // .......|
                /* 02B8 */  0x22, 0x8E, 0x42, 0x3E, 0x95, 0x41, 0x3F, 0x41,  // ".B>.A?A
                /* 02C0 */  0x7A, 0xB4, 0xE0, 0x39, 0x56, 0x01, 0x87, 0x53,  // z..9V..S
                /* 02C8 */  0x19, 0x70, 0x18, 0x32, 0xF8, 0xE4, 0x1D, 0xA6,  // .p.2....
                /* 02D0 */  0xD0, 0x07, 0x12, 0x4F, 0xA1, 0xD6, 0x5B, 0x08,  // ...O..[.
                /* 02D8 */  0x81, 0x3D, 0x20, 0x1F, 0x25, 0x82, 0x9C, 0x48,  // .= .%..H
                /* 02E0 */  0x84, 0x73, 0xF1, 0x71, 0x0A, 0x30, 0xF1, 0xFF,  // .s.q.0..
                /* 02E8 */  0x1F, 0x35, 0xFE, 0x96, 0xC1, 0xAE, 0x53, 0x60,  // .5....S`
                /* 02F0 */  0x38, 0x05, 0xC1, 0x9B, 0x94, 0xC7, 0x0F, 0xBE,  // 8.......
                /* 02F8 */  0x63, 0x0F, 0xEE, 0x14, 0x04, 0xCF, 0xE3, 0x90,  // c.......
                /* 0300 */  0x84, 0x7C, 0x1E, 0x2F, 0x01, 0xB8, 0x8B, 0x10,  // .|./....
                /* 0308 */  0xFE, 0x20, 0x04, 0x7C, 0x64, 0x2D, 0x94, 0x9E,  // . .|d-..
                /* 0310 */  0x82, 0x2C, 0x04, 0x06, 0x75, 0x10, 0x02, 0x5C,  // .,..u..\
                /* 0318 */  0xFE, 0xFF, 0x0F, 0x42, 0xC0, 0xCE, 0xDB, 0x6D,  // ...B...m
                /* 0320 */  0x43, 0xD7, 0x20, 0xDF, 0x06, 0x9E, 0x06, 0x5E,  // C. ....^
                /* 0328 */  0x23, 0xA2, 0x3C, 0x08, 0xF9, 0x26, 0xF4, 0x42,  // #.<..&.B
                /* 0330 */  0x10, 0x21, 0xCA, 0xF1, 0x9E, 0x40, 0x84, 0xA7,  // .!...@..
                /* 0338 */  0x21, 0x4F, 0x38, 0x4C, 0xB8, 0x93, 0x8D, 0xF2,  // !O8L....
                /* 0340 */  0xD2, 0x10, 0xC6, 0xD0, 0xB1, 0x02, 0x45, 0x8E,  // ......E.
                /* 0348 */  0x1F, 0xC2, 0x97, 0x0A, 0x1F, 0x84, 0x58, 0x94,  // ......X.
                /* 0350 */  0xF3, 0x80, 0x7E, 0x04, 0x3E, 0x7F, 0xD8, 0xC8,  // ..~.>...
                /* 0358 */  0x59, 0x04, 0x75, 0x12, 0xF0, 0xA1, 0xC3, 0x83,  // Y.u.....
                /* 0360 */  0x7A, 0x42, 0xC0, 0x84, 0x3E, 0xD9, 0x81, 0xEA,  // zB..>...
                /* 0368 */  0x28, 0x04, 0x9C, 0x0F, 0x20, 0xF0, 0x42, 0x1E,  // (... .B.
                /* 0370 */  0x5A, 0x41, 0x77, 0x24, 0x07, 0xC7, 0xA1, 0x2E,  // ZAw$....
                /* 0378 */  0x72, 0xDC, 0x07, 0x1A, 0xEC, 0xD9, 0x83, 0xFF,  // r.......
                /* 0380 */  0xFF, 0xCF, 0x1E, 0xC0, 0x43, 0xC6, 0xD1, 0x1B,  // ....C...
                /* 0388 */  0x15, 0xFC, 0x4C, 0x07, 0x50, 0xE8, 0xCA, 0xF1,  // ..L.P...
                /* 0390 */  0x4C, 0x07, 0x76, 0xE9, 0xCF, 0x01, 0x7D, 0x0A,  // L.v...}.
                /* 0398 */  0x1C, 0xFC, 0x4C, 0x87, 0x1E, 0x8E, 0x4F, 0x40,  // ..L...O@
                /* 03A0 */  0x18, 0x82, 0xFF, 0xFF, 0x43, 0x1D, 0xE0, 0xF3,  // ....C...
                /* 03A8 */  0x3C, 0x08, 0x07, 0x38, 0xA4, 0xC7, 0x0A, 0xB6,  // <..8....
                /* 03B0 */  0x23, 0x1D, 0x70, 0x18, 0x2B, 0x78, 0x06, 0xC6,  // #.p.+x..
                /* 03B8 */  0xC7, 0x0A, 0x2C, 0x26, 0xF6, 0xEC, 0x71, 0xAC,  // ..,&..q.
                /* 03C0 */  0x60, 0xFA, 0xFF, 0x1F, 0xE4, 0x80, 0xC7, 0x58,  // `......X
                /* 03C8 */  0xC1, 0x34, 0x30, 0x36, 0x56, 0xF0, 0x49, 0x38,  // .406V.I8
                /* 03D0 */  0x4A, 0xA2, 0xC7, 0xE8, 0x6B, 0xCB, 0x01, 0x79,  // J...k..y
                /* 03D8 */  0x1E, 0x11, 0x1E, 0x8C, 0x31, 0x71, 0x87, 0x0B,  // ....1q..
                /* 03E0 */  0xAA, 0x73, 0x35, 0x70, 0x38, 0x34, 0xE3, 0x86,  // .s5p84..
                /* 03E8 */  0x0B, 0x77, 0x6C, 0x70, 0x46, 0x0C, 0xBE, 0x83,  // .wlpF...
                /* 03F0 */  0x93, 0x8F, 0x7E, 0x60, 0xB9, 0x44, 0xB0, 0xB3,  // ..~`.D..
                /* 03F8 */  0x00, 0x9B, 0x0E, 0xFE, 0xF6, 0x87, 0xFD, 0xFF,  // ........
                /* 0400 */  0x1F, 0xAB, 0x81, 0x53, 0x5C, 0x2B, 0x20, 0x2C,  // ...S\+ ,
                /* 0408 */  0xC0, 0xE9, 0x40, 0xA2, 0x5E, 0x04, 0x14, 0xC6,  // ..@.^...
                /* 0410 */  0x87, 0x1A, 0x9F, 0x99, 0xE0, 0x4A, 0x82, 0x43,  // .....J.C
                /* 0418 */  0x0D, 0xD4, 0x67, 0x80, 0x07, 0xCA, 0x93, 0x3B,  // ..g....;
                /* 0420 */  0x91, 0xD7, 0x03, 0x4F, 0xEE, 0xE1, 0x09, 0xC6,  // ...O....
                /* 0428 */  0x31, 0xC1, 0xD3, 0x3A, 0x29, 0x6B, 0x3F, 0x02,  // 1..:)k?.
                /* 0430 */  0x91, 0x6B, 0x16, 0x3B, 0x2B, 0x70, 0x34, 0x7E,  // .k.;+p4~
                /* 0438 */  0x92, 0x02, 0xEB, 0x85, 0xC1, 0xC7, 0x04, 0x70,  // .......p
                /* 0440 */  0xCC, 0xFA, 0x35, 0x0A, 0x83, 0x15, 0x2A, 0x46,  // ..5...*F
                /* 0448 */  0xA3, 0xD7, 0x20, 0x02, 0x7A, 0x7C, 0x7D, 0x0D,  // .. .z|}.
                /* 0450 */  0x43, 0x77, 0x02, 0x43, 0x45, 0x0C, 0xF1, 0x66,  // Cw.CE..f
                /* 0458 */  0x60, 0x97, 0xE7, 0x21, 0xE4, 0xA1, 0x09, 0x5C,  // `..!...\
                /* 0460 */  0xD8, 0x0F, 0x4D, 0x60, 0x0F, 0x75, 0x26, 0xA3,  // ..M`.u&.
                /* 0468 */  0x91, 0x46, 0x83, 0x3A, 0x2A, 0xF8, 0xFF, 0x7F,  // .F.:*...
                /* 0470 */  0x28, 0xF0, 0x81, 0xE0, 0x91, 0xCB, 0xC7, 0x0E,  // (.......
                /* 0478 */  0x83, 0x9C, 0xE8, 0x69, 0x3D, 0x2E, 0x3C, 0x0D,  // ...i=.<.
                /* 0480 */  0x78, 0xDC, 0xEC, 0x9A, 0xE0, 0x0F, 0x82, 0x8F,  // x.......
                /* 0488 */  0x07, 0xF8, 0x03, 0x44, 0xC0, 0x13, 0x7D, 0xF2,  // ...D..}.
                /* 0490 */  0x80, 0x75, 0x02, 0xC1, 0x1F, 0x35, 0xE0, 0x8F,  // .u...5..
                /* 0498 */  0xC7, 0xC7, 0x00, 0x1F, 0x3B, 0xB8, 0xFC, 0x41,  // ....;..A
                /* 04A0 */  0xA0, 0x0E, 0x8A, 0x7C, 0xA4, 0xA7, 0xF5, 0x36,  // ...|...6
                /* 04A8 */  0xE0, 0x43, 0xC2, 0x61, 0xB1, 0x33, 0x87, 0x4F,  // .C.a.3.O
                /* 04B0 */  0x46, 0xE0, 0x18, 0x0F, 0xFC, 0x93, 0xEE, 0x43,  // F......C
                /* 04B8 */  0x86, 0xAF, 0x0C, 0x9E, 0xAF, 0x0F, 0x81, 0x60,  // .......`
                /* 04C0 */  0xB9, 0x75, 0xF8, 0xD0, 0x10, 0xEA, 0xA9, 0xC3,  // .u......
                /* 04C8 */  0x33, 0x78, 0xBF, 0xF0, 0x09, 0x04, 0x98, 0x04,  // 3x......
                /* 04D0 */  0x52, 0x72, 0xF4, 0x60, 0x42, 0xD7, 0x29, 0x1B,  // Rr.`B.).
                /* 04D8 */  0x27, 0x4D, 0x7A, 0x1E, 0xB0, 0xDC, 0x03, 0x82,  // 'Mz.....
                /* 04E0 */  0xAE, 0x11, 0x98, 0x1B, 0x44, 0x10, 0x0F, 0xFF,  // ....D...
                /* 04E8 */  0x8D, 0x82, 0x13, 0x14, 0x08, 0xA8, 0x83, 0x99,  // ........
                /* 04F0 */  0x21, 0x2C, 0x8D, 0x42, 0xC2, 0x20, 0x34, 0x22,  // !,.B. 4"
                /* 04F8 */  0x1F, 0x3D, 0x08, 0x1C, 0x05, 0xF1, 0xE8, 0x1D,  // .=......
                /* 0500 */  0xF3, 0xF8, 0x84, 0xFA, 0xFF, 0x1F, 0x04, 0xF8,  // ........
                /* 0508 */  0x31, 0xC0, 0x93, 0xC0, 0x85, 0x3A, 0xF8, 0xD0,  // 1....:..
                /* 0510 */  0xE3, 0x02, 0x1E, 0xEF, 0x19, 0xD2, 0xE7, 0x00,  // ........
                /* 0518 */  0x36, 0x76, 0xDC, 0xC9, 0x03, 0xEE, 0x38, 0xF0,  // 6v....8.
                /* 0520 */  0xE7, 0x4D, 0xFC, 0x59, 0x8D, 0x9F, 0x7A, 0xC0,  // .M.Y..z.
                /* 0528 */  0x29, 0xF0, 0x70, 0x00, 0x0A, 0x20, 0xDF, 0x07,  // ).p.. ..
                /* 0530 */  0xAC, 0xF4, 0x4C, 0x40, 0xE7, 0x10, 0x22, 0x4C,  // ..L@.."L
                /* 0538 */  0x34, 0xC3, 0x63, 0x02, 0x1F, 0x9F, 0xE8, 0x79,  // 4.c....y
                /* 0540 */  0xD4, 0xE3, 0xE2, 0xA3, 0xF4, 0x19, 0x86, 0x61,  // .......a
                /* 0548 */  0x3F, 0xA2, 0xF8, 0x98, 0x78, 0x80, 0x2F, 0x07,  // ?...x./.
                /* 0550 */  0xCF, 0x7C, 0x18, 0x58, 0x8F, 0x9B, 0xC3, 0x1A,  // .|.X....
                /* 0558 */  0x2D, 0xEC, 0xE1, 0x3E, 0x43, 0xF8, 0xFE, 0xE1,  // -..>C...
                /* 0560 */  0x99, 0xF9, 0xDA, 0xE8, 0x93, 0x07, 0x58, 0x8E,  // ......X.
                /* 0568 */  0x52, 0xF0, 0x87, 0x8A, 0x3B, 0x0B, 0xC0, 0x3D,  // R...;..=
                /* 0570 */  0x30, 0xB1, 0x39, 0x3C, 0x0D, 0xE0, 0x65, 0x1E,  // 0.9<..e.
                /* 0578 */  0x22, 0x50, 0x03, 0xB1, 0xC8, 0x05, 0xEA, 0xB8,  // "P......
                /* 0580 */  0xE2, 0xFF, 0xFF, 0x48, 0x7C, 0xC0, 0xE7, 0x07,  // ...H|...
                /* 0588 */  0x08, 0x7E, 0x7E, 0xB0, 0xAC, 0x03, 0x04, 0x4A,  // .~~....J
                /* 0590 */  0x08, 0x1C, 0x05, 0xF1, 0x01, 0xC2, 0x27, 0x5B,  // ......'[
                /* 0598 */  0x1B, 0x39, 0x40, 0xA0, 0x0F, 0x30, 0x0C, 0xE2,  // .9@..0..
                /* 05A0 */  0xA1, 0xD3, 0x04, 0x3E, 0xCA, 0xF8, 0x00, 0x01,  // ...>....
                /* 05A8 */  0x3C, 0xC6, 0x81, 0x3F, 0x40, 0xC0, 0x3D, 0xFF,  // <..?@.=.
                /* 05B0 */  0x82, 0xEB, 0xFC, 0x00, 0x3C, 0x4E, 0xA2, 0x3E,  // ....<N.>
                /* 05B8 */  0x3F, 0x80, 0xEB, 0x04, 0xE0, 0xF3, 0x03, 0x70,  // ?......p
                /* 05C0 */  0x1D, 0xE0, 0xA3, 0x00, 0xCC, 0xFF, 0xFF, 0x51,  // .......Q
                /* 05C8 */  0x00, 0x77, 0x26, 0x63, 0x73, 0x78, 0xA9, 0x39,  // .w&csx.9
                /* 05D0 */  0xF3, 0x57, 0x26, 0x9F, 0x78, 0x31, 0xA7, 0x5E,  // .W&.x1.^
                /* 05D8 */  0xAE, 0x6B, 0x04, 0x24, 0xE2, 0x19, 0x02, 0x35,  // .k.$...5
                /* 05E0 */  0x08, 0xC7, 0x39, 0x36, 0xE8, 0x38, 0xC1, 0xAE,  // ..96.8..
                /* 05E8 */  0xD2, 0x0F, 0x41, 0x55, 0xA3, 0x08, 0xDE, 0xB7,  // ..AU....
                /* 05F0 */  0x02, 0x16, 0xE1, 0x18, 0x81, 0x12, 0x4F, 0x21,  // ......O!
                /* 05F8 */  0xE9, 0xC7, 0x08, 0x94, 0x58, 0x38, 0x0A, 0xE2,  // ....X8..
                /* 0600 */  0x51, 0xFB, 0x20, 0x61, 0x1B, 0x67, 0x5B, 0xF4,  // Q. a.g[.
                /* 0608 */  0x61, 0x98, 0x1F, 0x05, 0xF8, 0x29, 0x02, 0xFE,  // a....)..
                /* 0610 */  0x29, 0x0C, 0x77, 0xF4, 0x00, 0xC7, 0x45, 0xEC,  // ).w...E.
                /* 0618 */  0xD0, 0xCE, 0xEE, 0x21, 0x21, 0xCA, 0xFB, 0xBB,  // ...!!...
                /* 0620 */  0x6F, 0x7E, 0x06, 0x0C, 0x1B, 0xCD, 0x63, 0xC4,  // o~....c.
                /* 0628 */  0xE1, 0x9C, 0xA3, 0x2F, 0x6A, 0x9E, 0x53, 0xAC,  // .../j.S.
                /* 0630 */  0xC7, 0x37, 0x7E, 0xA4, 0x80, 0x8B, 0xE2, 0x23,  // .7~....#
                /* 0638 */  0x05, 0xDC, 0x99, 0x9C, 0x07, 0x46, 0xDD, 0x58,  // .....F.X
                /* 0640 */  0x04, 0xEF, 0x6B, 0x21, 0xFE, 0x60, 0x01, 0x3C,  // ..k!.`.<
                /* 0648 */  0x8E, 0x4B, 0x3E, 0x58, 0xC0, 0xFB, 0xFF, 0x1F,  // .K>X....
                /* 0650 */  0x2C, 0xE0, 0x40, 0xFA, 0x60, 0x01, 0x5C, 0xCF,  // ,.@.`.\.
                /* 0658 */  0x07, 0x3E, 0x1D, 0x80, 0xF5, 0x42, 0xC6, 0xEF,  // .>...B..
                /* 0660 */  0x07, 0x30, 0x4E, 0x18, 0x30, 0xCE, 0x07, 0x98,  // .0N.0...
                /* 0668 */  0x1B, 0x86, 0x63, 0xAD, 0x54, 0x27, 0x0C, 0x5C,  // ..c.T'.\
                /* 0670 */  0xAC, 0x07, 0x85, 0x06, 0xC2, 0x86, 0xF7, 0xFC,  // ........
                /* 0678 */  0xF3, 0x64, 0xC8, 0x0F, 0x33, 0x2C, 0x0A, 0x9C,  // .d..3,..
                /* 0680 */  0x8E, 0x16, 0x3E, 0x59, 0x38, 0x04, 0x85, 0x0E,  // ..>Y8...
                /* 0688 */  0x62, 0x3E, 0x61, 0x70, 0x31, 0x27, 0x0C, 0x0A,  // b>ap1'..
                /* 0690 */  0x62, 0x40, 0x27, 0x3D, 0x87, 0xA1, 0xCF, 0x68,  // b@'=...h
                /* 0698 */  0x3E, 0x36, 0xB0, 0xDB, 0xBD, 0xEF, 0x17, 0x9E,  // >6......
                /* 06A0 */  0x8B, 0xE7, 0xCC, 0xF1, 0x7C, 0x5E, 0x66, 0xA8,  // ....|^f.
                /* 06A8 */  0x6F, 0x26, 0xE0, 0xB9, 0x52, 0xB0, 0xE3, 0x3C,  // o&..R..<
                /* 06B0 */  0xE6, 0x36, 0xC9, 0x0E, 0x9C, 0xEC, 0x58, 0x60,  // .6....X`
                /* 06B8 */  0x94, 0xE3, 0x7D, 0x2D, 0xB4, 0x9A, 0xBB, 0x02,  // ..}-....
                /* 06C0 */  0x6A, 0x46, 0x18, 0x02, 0x0F, 0xD8, 0x53, 0xE1,  // jF....S.
                /* 06C8 */  0xFF, 0xFF, 0x93, 0x18, 0x18, 0xF4, 0xDD, 0x28,  // .......(
                /* 06D0 */  0x40, 0x8E, 0xCE, 0x85, 0x8E, 0x1E, 0x75, 0x00,  // @.....u.
                /* 06D8 */  0xF0, 0xD1, 0x8E, 0x8F, 0xDE, 0x47, 0x6C, 0x1F,  // .....Gl.
                /* 06E0 */  0x57, 0xE0, 0x1E, 0xEE, 0x7C, 0x86, 0x02, 0xBE,  // W...|...
                /* 06E8 */  0x03, 0xF3, 0x0C, 0x9F, 0x50, 0xC0, 0x75, 0x7F,  // ....P.u.
                /* 06F0 */  0xE0, 0x17, 0x55, 0xCC, 0x44, 0x9E, 0x85, 0x61,  // ..U.D..a
                /* 06F8 */  0x9C, 0x52, 0x80, 0xC7, 0xE8, 0x7D, 0x4A, 0x01,  // .R...}J.
                /* 0700 */  0xD7, 0x01, 0xC0, 0xA7, 0x14, 0x38, 0xFF, 0xFF,  // .....8..
                /* 0708 */  0x53, 0x0A, 0xF0, 0x9A, 0xE3, 0x43, 0x01, 0x58,  // S....C.X
                /* 0710 */  0xCE, 0x28, 0x51, 0x7C, 0xFF, 0xF5, 0x44, 0x6C,  // .(Q|..Dl
                /* 0718 */  0x7C, 0xF8, 0xF4, 0x82, 0xE2, 0xB1, 0x3C, 0x9B,  // |.....<.
                /* 0720 */  0xB3, 0x33, 0xA5, 0xCE, 0x26, 0xE8, 0x68, 0xAF,  // .3..&.h.
                /* 0728 */  0x07, 0x0D, 0xFA, 0x41, 0xC5, 0xB3, 0x0F, 0x7F,  // ...A....
                /* 0730 */  0x7C, 0x11, 0x9E, 0x4F, 0x3D, 0x2E, 0x16, 0xE7,  // |..O=...
                /* 0738 */  0x6C, 0x82, 0x0A, 0x42, 0xA1, 0x63, 0xA7, 0x8F,  // l..B.c..
                /* 0740 */  0x13, 0x5C, 0xD2, 0x71, 0x82, 0x82, 0x18, 0xD0,  // .\.q....
                /* 0748 */  0x79, 0x8F, 0x78, 0x1E, 0x06, 0x3D, 0x4E, 0xF0,  // y.x..=N.
                /* 0750 */  0x53, 0x9F, 0x6F, 0x09, 0xC7, 0xF1, 0x04, 0x92,  // S.o.....
                /* 0758 */  0x60, 0xBE, 0x93, 0x00, 0xBD, 0x9C, 0xC0, 0x3B,  // `......;
                /* 0760 */  0xAF, 0x83, 0x67, 0x14, 0xDE, 0xC9, 0x59, 0x30,  // ..g...Y0
                /* 0768 */  0x84, 0x37, 0x6B, 0x76, 0x9C, 0xC0, 0x5F, 0x0E,  // .7kv.._.
                /* 0770 */  0x9E, 0x15, 0x1E, 0xD4, 0xF9, 0xF5, 0x04, 0xE6,  // ........
                /* 0778 */  0x3D, 0x0F, 0x5C, 0xC7, 0x13, 0xB0, 0xFC, 0xFF,  // =.\.....
                /* 0780 */  0x8F, 0x27, 0xF0, 0x65, 0x1E, 0x00, 0x50, 0xC7,  // .'.e..P.
                /* 0788 */  0x46, 0x1F, 0x1C, 0xF9, 0x01, 0xC0, 0xA1, 0x8F,  // F.......
                /* 0790 */  0x27, 0xE8, 0x99, 0xF8, 0x58, 0xF4, 0x54, 0xE2,  // '...X.T.
                /* 0798 */  0x0B, 0x00, 0x3F, 0xBB, 0xE9, 0x7C, 0x02, 0x8A,  // ..?..|..
                /* 07A0 */  0x73, 0x26, 0x78, 0xC6, 0xC1, 0xAE, 0x00, 0xF8,  // s&x.....
                /* 07A8 */  0x13, 0x0A, 0xEC, 0x23, 0x19, 0xF8, 0x26, 0xE2,  // ...#..&.
                /* 07B0 */  0x53, 0xC5, 0x81, 0x60, 0x4F, 0xB2, 0xC0, 0x1B,  // S..`O...
                /* 07B8 */  0x96, 0x9F, 0x4E, 0x80, 0xDB, 0xFF, 0xFF, 0x24,  // ..N....$
                /* 07C0 */  0x0B, 0xCE, 0xDB, 0x08, 0x76, 0x16, 0xCF, 0x24,  // ....v..$
                /* 07C8 */  0x8C, 0x60, 0xE4, 0xA3, 0x09, 0xEA, 0x88, 0xEC,  // .`......
                /* 07D0 */  0xA0, 0xA7, 0x30, 0xC4, 0x38, 0x1F, 0x2B, 0x8C,  // ..0.8.+.
                /* 07D8 */  0x11, 0xB9, 0xF8, 0x51, 0x6B, 0x32, 0x3E, 0x9B,  // ...Qk2>.
                /* 07E0 */  0xF9, 0xB2, 0xCE, 0x0E, 0x3F, 0xB8, 0x03, 0xB7,  // ....?...
                /* 07E8 */  0x0E, 0x28, 0xA8, 0xE3, 0x98, 0xCF, 0x62, 0x00,  // .(....b.
                /* 07F0 */  0x67, 0xCE, 0xEE, 0x1E, 0x3D, 0x3F, 0xB6, 0x73,  // g...=?.s
                /* 07F8 */  0x10, 0x8F, 0xDE, 0xE1, 0x4F, 0x27, 0xE8, 0xFF,  // ....O'..
                /* 0800 */  0xFF, 0x59, 0x0C, 0x1F, 0xF6, 0x2C, 0x06, 0xB4,  // .Y...,..
                /* 0808 */  0x05, 0x9F, 0xC5, 0x40, 0x79, 0x8B, 0x80, 0x7B,  // ...@y..{
                /* 0810 */  0x06, 0x05, 0x5E, 0x6B, 0xF3, 0x09, 0x05, 0x5C,  // ..^k...\
                /* 0818 */  0x77, 0x06, 0x9F, 0x50, 0x80, 0xEB, 0x11, 0x00,  // w..P....
                /* 0820 */  0x77, 0x06, 0x05, 0xC7, 0xFF, 0xFF, 0x04, 0xC0,  // w.......
                /* 0828 */  0x7C, 0xDD, 0x00, 0x28, 0xC8, 0x23, 0x00, 0xFE,  // |..(.#..
                /* 0830 */  0x0A, 0xEF, 0x83, 0x09, 0x4E, 0xA1, 0x4D, 0x9F,  // ....N.M.
                /* 0838 */  0x1A, 0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C,  // ..Z5(S.L
                /* 0840 */  0x83, 0x5A, 0x7D, 0x2A, 0x35, 0x66, 0x6C, 0x50,  // .Z}*5flP
                /* 0848 */  0x8E, 0xB0, 0x64, 0x8D, 0xD9, 0xA1, 0x9E, 0x0F,  // ..d.....
                /* 0850 */  0x02, 0x71, 0xDC, 0x85, 0x6B, 0xDC, 0xC4, 0x03,  // .q..k...
                /* 0858 */  0x08, 0x13, 0xA2, 0x02, 0x84, 0x89, 0x59, 0x9E,  // ......Y.
                /* 0860 */  0x40, 0x2C, 0x75, 0x79, 0x02, 0x71, 0x14, 0x1F,  // @,uy.q..
                /* 0868 */  0x20, 0x2C, 0x90, 0x12, 0x10, 0x16, 0xE3, 0x8D,  //  ,......
                /* 0870 */  0x22, 0x10, 0x8B, 0x97, 0x02, 0xC2, 0xE4, 0x5B,  // "......[
                /* 0878 */  0x01, 0x61, 0x92, 0x97, 0x28, 0x10, 0x07, 0x06,  // .a..(...
                /* 0880 */  0xA1, 0xD2, 0xFF, 0x22, 0x3A, 0xD0, 0x3B, 0x08,  // ...":.;.
                /* 0888 */  0x88, 0x80, 0x1C, 0xED, 0x19, 0x21, 0x20, 0x07,  // .....! .
                /* 0890 */  0x05, 0x11, 0x90, 0xE5, 0xF9, 0x01, 0x62, 0x62,  // ......bb
                /* 0898 */  0x41, 0x04, 0xE4, 0xB4, 0x86, 0x80, 0x58, 0x74,  // A.....Xt
                /* 08A0 */  0x10, 0x0D, 0x8B, 0x38, 0x02, 0x62, 0x72, 0x40,  // ...8.br@
                /* 08A8 */  0x34, 0x24, 0x62, 0x09, 0x88, 0xE5, 0x02, 0x11,  // 4$b.....
                /* 08B0 */  0x90, 0x23, 0x6A, 0x02, 0x62, 0x81, 0x41, 0x04,  // .#j.b.A.
                /* 08B8 */  0x64, 0x8D, 0xA6, 0x80, 0x98, 0x60, 0x10, 0x01,  // d....`..
                /* 08C0 */  0x59, 0xB6, 0x2A, 0x20, 0x16, 0x02, 0x44, 0x40,  // Y.* ..D@
                /* 08C8 */  0xFE, 0xFF, 0x03                                 // ...
            })
            Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AOD")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x6A, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,  // j.......
                /* 0008 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,  // ....)...
                /* 0010 */  0x41, 0x41, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AA..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x41, 0x01, 0x00   // ..).BA..
            })
            Method (WMAA, 3, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((((Arg1 != One) || (Arg1 != 0x02)) || 
                        (Arg1 != 0x06)))
                    {
                        CreateDWordField (Arg2, Zero, WIID)
                    }

                    If ((Arg1 == One))
                    {
                        Return (AM01 ())
                    }
                    ElseIf ((Arg1 == 0x02))
                    {
                        Return (AM02 ())
                    }
                    ElseIf ((Arg1 == 0x03))
                    {
                        Return (AM03 ())
                    }
                    ElseIf ((Arg1 == 0x04))
                    {
                        Return (AM04 (WIID))
                    }
                    ElseIf ((Arg1 == 0x05))
                    {
                        Return (AM05 (Arg2))
                    }
                    ElseIf ((Arg1 == 0x06))
                    {
                        Return (AM06 (WIID))
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "AMD", "AMD ALIB", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100){})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x07, 0x01,  // ........
            /* 0040 */  0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,  // ........
            /* 0050 */  0x07, 0x80, 0x80, 0x02, 0x00, 0x01, 0x03, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00B0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10,  // ........
            /* 00C8 */  0x1F, 0x00, 0x03, 0x08, 0x00, 0x03, 0x01, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 00D8 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0100 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0128 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0150 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A005)
                CreateWordField (Arg1, 0x02, A006)
                CreateDWordField (Arg1, 0x04, A007)
                Local0 = Buffer (0x0100){}
                CreateWordField (Local0, 0x00, A008)
                A008 = A005 /* \_SB_.ALIB.A005 */
                CreateWordField (Local0, 0x02, A009)
                A009 = A006 /* \_SB_.ALIB.A006 */
                CreateDWordField (Local0, 0x04, A010)
                A010 = A007 /* \_SB_.ALIB.A007 */
                A010 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A010 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A011 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A014 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A015 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A016 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A017 (Arg1)
            }

            Return (0x00)
        }

        Method (A014, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A065 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local1 = A066 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A){}
            CreateWordField (Local7, 0x00, A008)
            CreateByteField (Local7, 0x02, A019)
            CreateByteField (Local7, 0x03, A067)
            A008 = 0x04
            A019 = 0x00
            A067 = Local1
            Return (Local7)
        }

        Method (A065, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A060 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A060 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A060 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A060 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A060 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A060 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A060 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A060 (Arg1))
            }
        }

        Method (A066, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A061 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A061 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A061 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A061 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A061 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A061 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A061 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A061 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A011, 1, NotSerialized)
        {
            If ((AD00 == Arg0))
            {
                Return (0x00)
            }

            AD00 = Arg0
            A003 ()
        }

        Method (A015, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A016, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A018, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100){}
            CreateWordField (Local7, 0x00, A008)
            A008 = 0x03
            CreateByteField (Local7, 0x02, A019)
            A019 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A019 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A019 = 0x01
                Return (Local7)
            }

            A020 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A021 ()
            A019 = 0x02
            Return (Local7)
        }

        Method (A022, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A021 ()
        }

        Method (A023, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A024, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A025, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x10))
                {
                    A026 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A021 ()
            AP0B = Local1
            Local7 = Buffer (0x0100){}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A027, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A020, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                If ((A028 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A029 (Local0)
                        A030 (Local0, Local1)
                    }
                    Else
                    {
                        A030 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A031, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A033, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A034 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A021, 0, NotSerialized)
        {
            A033 ()
            A031 ()
            If ((AP02 != AP01))
            {
                A004 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x10))
            {
                Local1 = A032 (Local0)
                Local2 = A035 (Local0)
                If ((Local1 != Local2))
                {
                    A036 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A036 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A036, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A037 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A037 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A037 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A037 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A037 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A037 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A037 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A037 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A037 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A037 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A037 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A037 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A037 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A037 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A037 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A037 (Arg1))
            }
        }

        Method (A035, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A038 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A038 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A038 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A038 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A038 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A038 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A038 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A038 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A038 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A038 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A038 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A038 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A038 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A038 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A038 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A038 ())
            }
        }

        Method (A032, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A039 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A039 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A039 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A039 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A039 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A039 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A039 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A039 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A039 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A039 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A039 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A039 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A039 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A039 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A039 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A039 ())
            }
        }

        Method (A034, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A040 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A040 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A040 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A040 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A040 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A040 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A040 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A040 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A040 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A040 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A040 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A040 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A040 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A040 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A040 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A040 ())
            }
        }

        Method (A029, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A041 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A041 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A041 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A041 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A041 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A041 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A041 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A041 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A041 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A041 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A041 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A041 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A041 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A041 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A041 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A041 ())
            }
        }

        Method (A030, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A042 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A042 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A042 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A042 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A042 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A042 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A042 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A042 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A042 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A042 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A042 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A042 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A042 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A042 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A042 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A042 (Arg1))
            }
        }

        Method (A028, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A043 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A043 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A043 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A043 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A043 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A043 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A043 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A043 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A043 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A043 (Arg1))
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A043 (Arg1))
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A043 (Arg1))
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A043 (Arg1))
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A043 (Arg1))
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A043 (Arg1))
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A043 (Arg1))
            }
        }

        Method (A026, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A044 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A044 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A044 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A044 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A044 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A044 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A044 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A044 ())
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR1.ABR8.A044 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR1.ABR9.A044 ())
            }

            If ((Arg0 == 0x0A))
            {
                Return (\_SB.AWR1.ABRA.A044 ())
            }

            If ((Arg0 == 0x0B))
            {
                Return (\_SB.AWR1.ABRB.A044 ())
            }

            If ((Arg0 == 0x0C))
            {
                Return (\_SB.AWR1.ABRC.A044 ())
            }

            If ((Arg0 == 0x0D))
            {
                Return (\_SB.AWR1.ABRD.A044 ())
            }

            If ((Arg0 == 0x0E))
            {
                Return (\_SB.AWR1.ABRE.A044 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (\_SB.AWR1.ABRF.A044 ())
            }
        }

        OperationRegion (A093, SystemMemory, AGRB, 0x1000)
        Field (A093, ByteAcc, NoLock, Preserve)
        {
            Offset (0xB8), 
            A094,   32
        }

        BankField (A093, A094, 0x03B10528, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A082,   32
        }

        BankField (A093, A094, 0x03B10564, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A075,   32
        }

        BankField (A093, A094, 0x03B10598, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A076,   32
        }

        BankField (A093, A094, 0x03B1059C, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A077,   32
        }

        BankField (A093, A094, 0x03B105A0, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A078,   32
        }

        BankField (A093, A094, 0x03B105A4, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A079,   32
        }

        BankField (A093, A094, 0x03B105A8, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A080,   32
        }

        BankField (A093, A094, 0x03B105AC, DWordAcc, NoLock, Preserve)
        {
            Offset (0xBC), 
            A081,   32
        }

        Method (A068, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A069)
            CreateDWordField (Arg1, 0x04, A070)
            CreateDWordField (Arg1, 0x08, A071)
            CreateDWordField (Arg1, 0x0C, A072)
            CreateDWordField (Arg1, 0x10, A073)
            CreateDWordField (Arg1, 0x14, A074)
            A075 = 0x00
            While ((A075 != 0x00)){}
            A076 = A069 /* \_SB_.A068.A069 */
            A077 = A070 /* \_SB_.A068.A070 */
            A078 = A071 /* \_SB_.A068.A071 */
            A079 = A072 /* \_SB_.A068.A072 */
            A080 = A073 /* \_SB_.A068.A073 */
            A081 = A074 /* \_SB_.A068.A074 */
            A082 = Arg0
            While ((A075 == 0x00)){}
        }

        Method (A083, 5, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Local7 = Buffer (0x18){}
                CreateDWordField (Local7, 0x00, A084)
                CreateDWordField (Local7, 0x04, A085)
                CreateDWordField (Local7, 0x08, A086)
                CreateDWordField (Local7, 0x0C, A087)
                CreateDWordField (Local7, 0x10, A088)
                CreateDWordField (Local7, 0x14, A089)
                A084 = Arg0
                A085 = Arg1
                A086 = Arg2
                A087 = Arg3
                A068 (0x0F, Local7)
            }
        }

        Method (A090, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
            Else
            {
            }

            Return (Local0)
        }

        Method (A091, 1, NotSerialized)
        {
            If ((Arg0 == 0x00)){}
        }

        Method (A017, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A092)
            Local7 = Buffer (0x18){}
            CreateDWordField (Local7, 0x00, A084)
            CreateDWordField (Local7, 0x04, A085)
            CreateDWordField (Local7, 0x08, A086)
            CreateDWordField (Local7, 0x0C, A087)
            CreateDWordField (Local7, 0x10, A088)
            CreateDWordField (Local7, 0x14, A089)
            Local0 = 0x02
            While ((Local0 < A092))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A084 = 0x00
                A085 = 0x00
                A086 = 0x00
                A087 = 0x00
                A088 = 0x00
                A089 = 0x00
                If ((Local1 == 0x04))
                {
                    A084 = Local2
                    A068 (0x31, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A084 = Local2
                    A068 (0x43, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A084 = Local2
                    A068 (0x44, Local7)
                }

                If ((Local1 == 0x10))
                {
                    A084 = Local2
                    A068 (0x46, Local7)
                }

                If ((Local1 == 0x11))
                {
                    A084 = Local2
                    A068 (0x48, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR0.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR0.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR1.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR1.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR2.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR2.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR3.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR3.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR4.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR4.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR5.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR5.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR6.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR6.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR0.ABR7.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR0.ABR7.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Device (AWR1)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x91)  // _UID: Unique ID
            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR8.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR8.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR8.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR8.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR8.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR8.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABR9.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABR9.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABR9.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABR9.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABR9.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABR9.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRA)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8A)  // _UID: Unique ID
                Name (AB12, 0xE8)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRA.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRA.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRA.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRA.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRA.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRA.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRA.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRA.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRB)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8B)  // _UID: Unique ID
                Name (AB12, 0xFC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRB.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRB.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRB.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRB.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRB.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRB.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRB.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRB.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8C)  // _UID: Unique ID
                Name (AB12, 0x0110)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRC.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRC.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRC.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRC.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRC.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRC.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRC.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRC.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRD)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8D)  // _UID: Unique ID
                Name (AB12, 0x0124)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRD.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRD.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRD.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRD.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRD.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRD.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRD.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRD.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRE)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8E)  // _UID: Unique ID
                Name (AB12, 0x0138)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRE.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRE.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRE.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRE.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRE.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRE.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRE.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRE.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABRF)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x8F)  // _UID: Unique ID
                Name (AB12, 0x014C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A053, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A053, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A050,   8, 
                    A051,   8, 
                    Offset (0x68), 
                    A054,   2, 
                        ,   2, 
                    A055,   1, 
                    A056,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A057,   1, 
                    Offset (0x88), 
                    A058,   4, 
                        ,   1, 
                    A059,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A045, 0, NotSerialized)
                {
                    Local0 = A027 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR1.ABRF.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }
                }

                Method (A040, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A046, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A039, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR1.ABRF.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR1.ABRF.AB0E */
                    }

                    Local0 = A046 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A045 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A038, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR1.ABRF.AB02 */
                }

                Method (A041, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR1.ABRF.AB00 */
                }

                Method (A037, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A047 (Arg0)
                    If ((AB10 != 0x00)){}
                    Else
                    {
                    }

                    A048 (0x00)
                    Name (A049, 0x00)
                    A048 (0x01)
                }

                Method (A042, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A043, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A050) && (Local0 <= A051)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A052, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A044, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A047, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)){}
                    If ((Arg0 >= 0x03)){}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)){}
                    }
                    Else
                    {
                    }
                }

                Method (A064, 2, NotSerialized)
                {
                    If ((A062 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A062 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A062 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A048, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A062 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A062 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A064 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A062 (Local0, (Local1 + 0x10))
                                A063 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A063 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A063, 3, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A062, 2, Serialized)
                {
                    Local0 = (AGRB + (A050 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR1.ABRF.A062.ADRR */
                }

                Method (A060, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A052 (Arg0))
                }

                Method (A061, 1, NotSerialized)
                {
                    Name (A049, 0x00)
                    A049 = A054 /* \_SB_.AWR1.ABRF.A054 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        Local0 = 0x01
                    }
                    Else
                    {
                        A048 (0x00)
                        Local0 = A062 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A063 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A062 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A063 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        A055 = 0x01
                        Local0 = 0x05
                    }

                    A054 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01)){}
                        If ((Local0 == 0x05))
                        {
                            A062 (0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A054 = A049 /* \_SB_.AWR1.ABRF.A061.A049 */
                    If ((A049 != 0x00))
                    {
                        A048 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)){}
        }

        Method (A003, 0, NotSerialized)
        {
        }

        Method (A004, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "AMDFCH", "FCHZP", 0x00001000)
{


SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD CPU", 0x00000001)
{
    External (_PR_.P000, DeviceObj)
    External (_PR_.P001, DeviceObj)
    External (_PR_.P002, DeviceObj)
    External (_PR_.P003, DeviceObj)
    External (_PR_.P004, DeviceObj)
    External (_PR_.P005, DeviceObj)
    External (_PR_.P006, DeviceObj)
    External (_PR_.P007, DeviceObj)
    External (_PR_.P008, DeviceObj)
    External (_PR_.P009, DeviceObj)
    External (_PR_.P00A, DeviceObj)
    External (_PR_.P00B, DeviceObj)
    External (_PR_.P00C, DeviceObj)
    External (_PR_.P00D, DeviceObj)
    External (_PR_.P00E, DeviceObj)
    External (_PR_.P00F, DeviceObj)

    Scope (\_PR.P000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P000.PPCV */
        }
    }

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P001.PPCV */
        }
    }

    Scope (\_PR.P002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P002.PPCV */
        }
    }

    Scope (\_PR.P003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P003.PPCV */
        }
    }

    Scope (\_PR.P004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P004.PPCV */
        }
    }

    Scope (\_PR.P005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P005.PPCV */
        }
    }

    Scope (\_PR.P006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P006.PPCV */
        }
    }

    Scope (\_PR.P007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P007.PPCV */
        }
    }

    Scope (\_PR.P008)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P008.PPCV */
        }
    }

    Scope (\_PR.P009)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P009.PPCV */
        }
    }

    Scope (\_PR.P00A)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00A.PPCV */
        }
    }

    Scope (\_PR.P00B)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00B.PPCV */
        }
    }

    Scope (\_PR.P00C)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00C.PPCV */
        }
    }

    Scope (\_PR.P00D)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00D.PPCV */
        }
    }

    Scope (\_PR.P00E)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00E.PPCV */
        }
    }

    Scope (\_PR.P00F)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000E10, 
                0x000012FC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000C80, 
                0x00000FF0, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000898, 
                0x000007BC, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000002
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_PR_.P00F.PPCV */
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AMD PT", 0x00001000)
{
    Name (PTOS, Zero)
    If (CondRefOf (\_OSI))
    {
        If (\_OSI ("Windows 2015"))
        {
            PTOS = 0x70
        }
    }

    Scope (\_SB)
    {
        Device (PTIO)
        {
            Name (_HID, "AMDIF030")  // _HID: Hardware ID
            Name (_CID, "AMDIF030")  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC30000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.PTIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "AMD", "AmdTable", 0x00000001)
{
    /*
     * iASL Warning: There were 8 external control methods found during
     * disassembly, but only 0 were resolved (8 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIB, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.M263, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.M264, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (M038, IntObj)
    External (M039, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (MOEM, IntObj)

    OperationRegion (CPNV, SystemMemory, 0xDAA80018, 0x000100C1)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   16, 
        M327,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32
    }

    Method (M000, 1, Serialized)
    {
        Local0 = (Arg0 + 0xB0000C00)
        OperationRegion (VARM, SystemIO, 0x80, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        VARR = Local0
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, Zero, 0x20, Arg4)
    }

    Mutex (M253, 0x00)
    Method (M249, 3, Serialized)
    {
        If (((Arg0 == Zero) && (Arg1 == Zero)))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 == Ones))
        {
            Return (Ones)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 4, Serialized)
    {
        If (((Arg0 == Zero) && (Arg1 == Zero)))
        {
            Local0 = Zero
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1)
        }

        If ((Local0 != Ones))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg2, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg3
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, One, Zero)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, One, One)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = One
        While ((Local1 && Local2))
        {
            Sleep (One)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = Zero
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        Local2 = Zero
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), Zero, 
                    One)
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, One)
            }
        }
        ElseIf ((Local0 == One))
        {
            Local1 = M038 /* External reference */
            Local2
        }
        ElseIf ((Local0 == 0x02))
        {
            (Local1 + 0x08) = M038 /* External reference */
            Local2
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local1 = (Arg0 & 0xFF)
        If ((Local0 == Zero))
        {
            If ((M085 >= 0x02))
            {
                M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                    0x02 | Arg1))
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, One, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, One, Zero)
            }
        }
        ElseIf ((Local0 == One))
        {
            M039 (Local1, Arg1)
        }
        ElseIf ((Local0 == 0x02))
        {
            M039 ((Local1 + 0x08), Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M328, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x09))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M328 [Arg0]) * 
                0x04), Zero, One))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), Zero, One))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, One))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), One))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, Zero, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), One, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, One)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, Zero, Zero, 0x20) != Ones))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, One)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, One)
                If (((Local3 == One) && (Local4 == One)))
                {
                    Local0 = One
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While ((Local1 != Zero))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local0 = Zero
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, Zero, 0x08)
        While (((Local1 != Zero) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, Zero, 0x08)
            If (((Local2 == Zero) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), Zero, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + One), Zero, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, Zero, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, Zero, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, Zero, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, Zero, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, Zero, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 == 0x15))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, Zero)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, Zero)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, Zero)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, Zero)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, Zero)
            }

            Sleep (One)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == One))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, Zero, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (One, Zero, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (One)
        }

        If ((Arg0 == Zero))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > Zero) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (One)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, One)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (One)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (Zero, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | One)
        M020 (Zero, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, Zero)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (One)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local3 != Zero))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == One))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)){}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                        If ((Local4 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)){}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = Zero
                    Local2 = One
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == Zero))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, Zero)
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            One) * 0x04), 0x04, Zero)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == One))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                One) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (Zero, M013 ((Local0 + Local1), 0x05, Zero, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, Zero, 0x08), 0x19, Zero, 0x08)
                                        If ((M265 (Local6, Zero, Zero) == One))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, One)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    One) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), Zero, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        One) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, Zero, 0x08)
                            If ((Local4 == Zero))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, Zero, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                If ((M009 (Local5) == Local6))
                                {
                                    Local7 = One
                                }
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != Zero))
        {
            Local0 = M108 /* \M108 */
            Local7 = One
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = One
                While (((Local2 != 0xFF) && (Local2 != Zero)))
                {
                    Local2 = M013 ((Local0 + Local1), Zero, Zero, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), One, Zero, 0x08)
                        If ((Local3 == Zero))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == One))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, Zero, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, Zero, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, Zero, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = Zero
        }

        If (Local7)
        {
            Local7 = One
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = Zero
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05){})
            CreateWordField (M115, Zero, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = Zero
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == Zero))
            {
                If ((Arg3 != One))
                {
                    M120 = Zero
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != One))
                {
                    M120 = One
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
                If (((Local0 != Zero) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, Zero, Zero, Zero)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != Zero) && (Local1 != Local2)))
                    {
                        Local7 = One
                    }
                }
            }
        }
        ElseIf ((Arg2 == Zero))
        {
            M002 (One, Arg1)
        }
        Else
        {
            M002 (Zero, Arg1)
            Local0 = M017 (Zero, Arg0, Arg1, 0x19, Zero, 0x08)
            If (((Local0 != Zero) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, Zero, Zero, Zero)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != Zero) && (Local1 != Local2)))
                {
                    Local7 = One
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 2, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = Zero
                Local2 = Zero
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), Zero, Zero, 0x08)
                    Local3 = M011 ((Local0 + Local1), One, Zero, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, Zero, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Return (Local4)
                    }

                    Local1 += 0x03
                }
            }
        }

        Return (Ones)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = Zero
        If ((M047 == Ones))
        {
            M047 = Zero
            M046 = Zero
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = One
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = One
                }
            }
        }

        If ((M046 == One))
        {
            Local0 = One
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = Zero
        If ((Arg0 != Zero))
        {
            Local0 = M011 (Arg0, Arg1, Zero, 0x08)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM) /* External reference */
            Arg0
            Arg1
            Arg2
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (Arg0)
        {
            Case (Zero)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (Local0)
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x07, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == Zero))
            {
                Return (M017 (Zero, 0x08, One, 0x19, Zero, 0x08))
            }
            Else
            {
                Return (M017 (Zero, 0x08, 0x02, 0x19, Zero, 0x08))
            }
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TPTS (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M263 (Arg0)
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                \_SB.PCI0.GP18.SATA.TWAK (Arg0)
            }
            Else
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != Zero))
        {
            \_SB.M264 (Arg0)
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000042
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 44
[00Ah 0010   6]                       Oem ID : ""
[010h 0016   8]                 Oem Table ID : ""
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : ""
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 44 00 00 00 00 00 00  // UEFIB....D......
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 00 00 00 00 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 50 9E DA 00 00  // ...26......P....
    0040: 00 00                                            // ..


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000E884
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 71
[00Ah 0010   6]                       Oem ID : "ALASKA"
[010h 0016   8]                 Oem Table ID : "A M I "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 59524 (0xE884)

    0000: 56 46 43 54 84 E8 00 00 01 71 41 4C 41 53 4B 41  // VFCT.....qALASKA
    0010: 41 20 4D 20 49 20 00 00 01 00 00 00 41 4D 44 00  // A M I ......AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 67 00 00 00 00  // ...........g....
    0060: 01 00 00 00 00 E8 00 00 55 AA 74 E9 AD 02 00 00  // ........U.t.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 50 02 00 00 00 00 49 42 4D 07 84 92 00 00 00 00  // P.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 A5 02 00 00 00 00 00 00  // 20..............
    00B0: 2C 02 00 00 00 00 00 00 30 34 2F 31 37 2F 31 37  // ,.......04/17/17
    00C0: 20 30 33 3A 32 38 00 00 31 00 00 00 E9 B8 03 00  //  03:28..1.......
    00D0: E9 C7 03 00 00 00 F4 00 00 13 00 00 00 D0 01 00  // ................
    00E0: 42 0A 20 E1 02 80 7E 00 E2 10 44 02 12 00 00 00  // B. ...~...D.....
    00F0: 00 00 00 3C 40 0E 02 07 3C 01 1A 00 04 00 00 00  // ...<@...<.......
    0100: EE A0 FF 06 00 08 30 40 0E 01 00 00 00 00 00 00  // ......0@........
    0110: 14 03 00 00 00 00 00 00 BE 7E 11 00 B9 07 1A D6  // .........~......
    0120: 50 2C 00 00 00 00 00 00 00 00 00 00 14 40 41 43  // P,...........@AC
    0130: 00 00 00 00 10 00 00 00 42 00 00 00 F0 7D E6 07  // ........B....}..
    0140: 20 00 20 00 12 00 0E 00 00 00 00 00 00 00 00 00  //  . .............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 31 31 35 2D  // ............115-
    0160: 44 30 30 39 50 49 32 2D 31 30 31 00 50 4F 4C 41  // D009PI2-101.POLA
    0170: 52 49 53 32 30 00 50 43 49 5F 45 58 50 52 45 53  // RIS20.PCI_EXPRES
    0180: 53 00 47 44 44 52 35 00 0D 0A 36 37 44 46 48 42  // S.GDDR5...67DFHB
    0190: 2E 31 35 2E 35 30 2E 32 2E 31 2E 41 53 31 34 20  // .15.50.2.1.AS14 
    01A0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01B0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01C0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01D0: 20 20 20 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00 28  //       ..... ...(
    01E0: 43 29 20 31 39 38 38 2D 32 30 31 30 2C 20 41 64  // C) 1988-2010, Ad
    01F0: 76 61 6E 63 65 64 20 4D 69 63 72 6F 20 44 65 76  // vanced Micro Dev
    0200: 69 63 65 73 2C 20 49 6E 63 2E 00 41 54 4F 4D 42  // ices, Inc..ATOMB
    0210: 49 4F 53 42 4B 2D 41 4D 44 20 56 45 52 30 31 35  // IOSBK-AMD VER015
    0220: 2E 30 35 30 2E 30 30 32 2E 30 30 31 2E 30 30 30  // .050.002.001.000
    0230: 30 30 30 00 41 53 31 34 2E 42 49 4E 20 20 20 20  // 000.AS14.BIN    
    0240: 00 31 33 39 38 38 37 37 20 00 33 38 31 36 34 33  // .1398877 .381643
    0250: 20 20 00 20 20 20 20 20 20 20 20 00 41 53 55 53  //   .        .ASUS
    0260: 5F 50 4F 4C 41 52 49 53 32 30 5F 44 30 30 39 50  // _POLARIS20_D009P
    0270: 49 32 5F 44 55 41 4C 5F 52 58 35 38 30 5F 4F 38  // I2_DUAL_RX580_O8
    0280: 47 5F 48 59 4E 49 58 5C 63 6F 6E 66 69 67 2E 68  // G_HYNIX\config.h
    0290: 00 00 00 90 24 00 01 01 41 54 4F 4D 00 C0 D1 03  // ....$...ATOM....
    02A0: CC 01 75 02 20 01 F6 03 00 00 00 00 43 10 21 05  // ..u. .......C.!.
    02B0: 50 02 5C 97 02 98 A0 00 50 43 49 52 02 10 DF 67  // P.\.....PCIR...g
    02C0: 00 00 18 00 00 00 00 03 74 00 32 0F 00 00 00 00  // ........t.2.....
    02D0: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 0B FE 91  // AMD ATOMBIOS....
    02E0: F6 00 00 00 00 00 00 00 00 21 8F AB 15 BD F7 15  // .........!......
    02F0: 77 2D B3 6C D6 B7 70 95 7D 01 00 00 00 00 00 00  // w-.l..p.}.......
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 56 1E 0E  // .............V..
    0310: 1F E8 3E 2A 81 4D 50 00 20 1F 5E 1E 06 66 50 66  // ..>*.MP. .^..fPf
    0320: 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 40 02  // QfRfSfUfVfW...@.
    0330: 8C 0E 34 02 B2 20 E8 F6 2D 0B C0 75 14 A2 02 00  // ..4.. ..-..u....
    0340: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0350: CB E8 0C 2F E8 D7 2C 32 D2 89 16 42 02 A1 40 02  // .../..,2...B..@.
    0360: 66 C1 C0 10 A1 34 02 E8 0B 04 E8 1E 04 E8 E6 03  // f....4..........
    0370: E8 54 05 E8 4B 03 E8 D9 29 F7 45 50 00 20 75 13  // .T..K...).EP. u.
    0380: E8 AF 29 0B C0 74 0C E8 49 00 E8 F7 57 E8 DB 03  // ..)..t..I...W...
    0390: E8 3E 58 E8 B9 00 B4 80 E8 C8 2C 8A C7 66 C1 E0  // .>X.......,..f..
    03A0: 10 8A E3 B0 14 66 50 BB 08 00 E8 13 28 A8 01 66  // .....fP.....(..f
    03B0: 58 74 02 B0 20 66 A3 84 92 E8 68 03 E8 D6 03 E8  // Xt.. f....h.....
    03C0: C3 2E 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    03D0: 07 1F CB 2E 8B 1E 34 02 83 3E E3 03 00 75 04 89  // ......4..>...u..
    03E0: 1E E1 03 1E 2E 8E 1E D9 03 9C FA 66 C7 06 08 01  // ...........f....
    03F0: 65 F0 00 F0 C7 06 40 00 F6 03 89 1E 42 00 C7 06  // e.....@.....B...
    0400: B4 01 F6 03 89 1E B6 01 C7 06 7C 00 A2 60 89 1E  // ..........|..`..
    0410: 7E 00 C7 06 0C 01 B5 64 89 1E 0E 01 C7 06 A8 04  // ~......d........
    0420: E2 5A 89 1E AA 04 2E 8E 1E E1 03 8B C3 A3 E4 5A  // .Z.............Z
    0430: A3 F4 5A A3 06 5B 9D 1F C3 50 4D 49 44 F6 03 0A  // ..Z..[...PMID...
    0440: 48 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB  // H...............
    0450: 00 00 E8 6B 27 66 C1 E8 10 A3 56 02 C3 00 E8 FF  // ...k'f....V.....
    0460: 2D E8 48 02 75 1B 2E 3A 26 4E 02 75 05 E8 47 00  // -.H.u..:&N.u..G.
    0470: EB 11 80 FC 4F 75 05 E8 EE 42 EB 07 E8 3B 4A EB  // ....Ou...B...;J.
    0480: 02 B4 01 E8 FF 2D CF E8 D6 2D E8 1F 02 75 05 E8  // .....-...-...u..
    0490: 25 00 EB 02 B4 01 E8 EC 2D CB E8 C3 2D E8 0C 02  // %.......-...-...
    04A0: 75 0F 80 FC 4F 75 05 E8 BE 42 EB 07 E8 0B 4A EB  // u...Ou...B....J.
    04B0: 02 B4 01 E8 CF 2D CB 1E 06 66 50 66 51 66 52 66  // .....-...fPfQfRf
    04C0: 53 66 55 66 56 66 57 0E 1F 3C 04 75 23 BB 0B 00  // SfUfVfW..<.u#...
    04D0: E8 ED 26 8D 36 1D 01 8A 3C 80 EF 30 B3 02 8B EC  // ..&.6...<..0....
    04E0: 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00 E9 9A 01  // .^..F.f....F....
    04F0: 3C 05 75 18 E8 77 02 E8 34 2B 8B EC 89 56 10 89  // <.u..w..4+...V..
    0500: 46 00 66 C1 E8 10 89 46 04 E9 7E 01 3C 06 75 39  // F.f....F..~.<.u9
    0510: E8 69 02 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 9F  // .i.f.....F......
    0520: 26 88 46 18 E8 59 02 66 0B C0 0F 84 54 01 66 89  // &.F..Y.f....T.f.
    0530: 46 0C BB 06 00 E8 88 26 33 C0 66 89 46 00 2E 8B  // F......&3.f.F...
    0540: 16 56 02 89 56 10 E9 41 01 3C 0B 75 24 0A DB 75  // .V..V..A.<.u$..u
    0550: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    0560: 28 01 8A C7 E8 3B 01 E8 D8 0E 0F 84 14 01 E9 19  // (....;..........
    0570: 01 3C 17 75 21 E8 6A 06 74 06 E8 5E 0D E8 A7 18  // .<.u!.j.t..^....
    0580: E8 8B 07 E8 AF 0E 33 C9 66 C1 E8 10 0A E8 8B EC  // ......3.f.......
    0590: 89 4E 14 E9 F4 00 3C 18 75 6A 0A FF 75 18 E8 9B  // .N....<.uj..u...
    05A0: 05 8B EC 89 46 0C 66 C1 E8 10 89 46 14 E8 3C 08  // ....F.f....F..<.
    05B0: 89 4E 10 E9 D4 00 80 FF 0F 74 0E 23 C9 0F 84 C1  // .N.......t.#....
    05C0: 00 E8 C5 05 E8 1B 06 75 2D BB 00 1C E8 51 2C 66  // .......u-....Q,f
    05D0: 0B C0 0F 84 AC 00 E8 35 07 0B C9 0F 84 A3 00 BE  // .......5........
    05E0: 00 1C E8 C6 01 0F 84 99 00 BE 00 1C B0 40 E8 23  // .............@.#
    05F0: 02 E8 48 05 EB 06 E8 3E 06 E8 2D 06 8B EC 89 46  // ..H....>..-....F
    0600: 0C E9 86 00 3C 19 75 05 E8 00 06 EB 7D 3C 82 75  // ....<.u.....}<.u
    0610: 2C 80 FB 01 75 0D 8B EC BE 74 06 89 76 00 8C 4E  // ,...u....t..v..N
    0620: 10 EB 67 80 FB 05 75 15 0A FF 75 0A E8 86 03 8B  // ..g...u...u.....
    0630: EC 89 46 14 EB 54 E8 45 03 74 3F EB 4D 3C 8E 75  // ..F..T.E.t?.M<.u
    0640: 12 80 FF 01 74 08 80 FF 02 75 2F 80 C1 02 E8 CA  // ....t....u/.....
    0650: 03 EB 37 3C 8F 75 23 80 FF 05 75 05 E8 1C 06 EB  // ..7<.u#...u.....
    0660: 29 80 FF 07 75 0A E8 20 06 8B EC 88 5E 0C EB 1A  // )...u.. ....^...
    0670: 80 FF 85 75 05 E8 03 06 EB 10 8B EC C6 46 19 02  // ...u.........F..
    0680: EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66  // .....F....2....f
    0690: 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    06A0: 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 50 32 C0 53  // ..Q.......Y.P2.S
    06B0: BB 15 00 E8 0A 25 5B 3C FF 74 04 24 03 0A C0 58  // .....%[<.t.$...X
    06C0: C3 E8 E7 2B E8 A8 06 F7 C1 02 00 74 0E 06 0E 07  // ...+.......t....
    06D0: 8D 3E 74 06 B8 02 00 E8 C1 05 07 C3 00 00 00 00  // .>t.............
    06E0: 07 00 08 08 08 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 01 C3 00  // ................
    0700: 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61  // PQ...C.3.B...B.a
    0710: 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 98 27 E6 61  // .....a.......'.a
    0720: 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6  // YX...V...>...v..
    0730: 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06 21 00  // ..............!.
    0740: 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26  // .3.2...........&
    0750: 21 00 5E 1F C3 00 E8 76 26 75 03 E8 20 28 E8 B9  // !.^....v&u.. (..
    0760: 26 E8 83 26 E8 DD 25 E8 71 0B C3 B0 01 C3 BB 01  // &..&..%.q.......
    0770: 00 E8 38 24 C3 BB 01 00 E8 3B 24 C3 E8 C5 27 C3  // ..8$.....;$...'.
    0780: 53 BB 04 00 E8 39 24 33 C0 5B C3 E8 8E 27 BB 0A  // S....9$3.[...'..
    0790: 00 E8 22 24 C3 BB 0A 00 E8 11 24 66 8B C8 E8 7B  // .."$......$f...{
    07A0: 27 BB 0A 00 66 2B C1 E8 0C 24 C3 E8 29 00 0B C9  // '...f+...$..)...
    07B0: 74 22 E8 66 06 E8 FB 15 66 51 66 8B C8 BB 07 00  // t".f....fQf.....
    07C0: E8 E9 23 66 25 00 FE 00 00 66 0B C1 E8 E7 23 66  // ..#f%....f....#f
    07D0: 59 0C 01 C3 32 C0 C3 E8 9D 03 0B C9 75 0A 33 D2  // Y...2.......u.3.
    07E0: E8 4F 25 8B C8 E8 A1 03 0B D1 E8 FF 05 23 CA 66  // .O%..........#.f
    07F0: C1 E6 10 33 F6 E8 8A 0A 74 15 E8 97 0B 85 C1 74  // ...3....t......t
    0800: F4 51 E8 A2 11 59 75 ED E8 89 0B 33 C8 EB E6 66  // .Q...Yu....3...f
    0810: C1 EE 10 C3 A8 10 75 5A E8 AA 15 66 C1 E6 10 33  // ......uZ...f...3
    0820: F6 E8 5E 0A 74 24 E8 2E 0A 74 0B E8 AB 0B 24 03  // ..^.t$...t....$.
    0830: 3C 03 75 ED EB 0A E8 A0 0B A8 01 74 E4 E8 15 07  // <.u........t....
    0840: E8 A3 16 B5 00 E8 98 0B EB D7 E8 7C 01 32 C9 33  // ...........|.2.3
    0850: F6 E8 72 0A E8 19 16 E8 F9 25 FE C1 38 C1 72 F1  // ..r......%..8.r.
    0860: 66 C1 EE 10 E8 57 15 A8 20 75 57 A8 40 75 03 E8  // f....W.. uW.@u..
    0870: 36 1C E8 3E 15 0A C0 75 19 32 C9 33 F6 E8 46 0A  // 6..>...u.2.3..F.
    0880: 0B F6 74 05 B5 01 E8 D6 1C E8 C7 25 FE C1 38 C1  // ..t........%..8.
    0890: 72 EB 33 F6 E8 E0 09 74 26 E8 1D 0B E8 8F 22 75  // r.3....t&....."u
    08A0: 14 E8 E5 03 0A DB 74 0D E8 AA 06 E8 38 16 B5 00  // ......t.....8...
    08B0: E8 2D 0B EB DF E8 10 16 B5 01 E8 23 0B EB D5 E8  // .-.........#....
    08C0: 14 01 C3 E8 6C 24 C3 E8 5D 15 33 C9 33 D2 E8 B8  // ....l$..].3.3...
    08D0: 02 66 33 D2 66 33 C0 E8 3E 0B E8 58 00 B1 FF E8  // .f3.f3..>..X....
    08E0: 9C 00 33 F6 E8 9B 09 74 10 E8 CD 0A E8 3B 22 74  // ..3....t.....;"t
    08F0: 03 E8 6F 16 E8 9C 16 EB EB B3 01 E8 6A 02 32 C9  // ..o.........j.2.
    0900: E8 08 03 E8 D2 24 E8 29 24 0B C0 C3 E8 CC 09 E8  // .....$.)$.......
    0910: 15 15 66 33 C0 66 BA 00 F0 00 F0 E8 2D 02 51 B1  // ..f3.f......-.Q.
    0920: 01 E8 D8 02 59 33 F6 E8 58 09 74 05 E8 34 16 EB  // ....Y3..X.t..4..
    0930: F6 E8 84 1B C3 B8 02 00 E8 29 09 74 40 B1 07 E8  // .........).t@...
    0940: 27 20 E8 31 0B A8 04 75 12 E8 A0 26 83 3D 00 75  // ' .1...u...&.=.u
    0950: 0A E8 DE 23 83 E0 FD E8 E1 23 C3 66 BA FF FF FB  // ...#.....#.f....
    0960: FF 66 B8 00 00 04 00 E8 AE 0A E8 D1 0C E8 0F 26  // .f.............&
    0970: 8A C8 BB 04 00 E8 34 22 8A E1 E8 39 22 C3 E8 4B  // ......4"...9"..K
    0980: 22 74 31 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A  // "t18.v.....8.s..
    0990: C8 BB 02 00 E8 15 22 8A E1 E8 1A 22 BB 02 00 E8  // ......"...."....
    09A0: 0A 22 66 C1 E8 18 A8 20 75 08 B1 04 E8 BA 1F 0C  // ."f.... u.......
    09B0: 01 C3 0C 01 C3 51 E8 13 22 74 0C 8A CC BB 02 00  // .....Q.."t......
    09C0: E8 E9 21 8A C4 8A E1 59 C3 33 F6 E8 A9 08 74 05  // ..!....Y.3....t.
    09D0: E8 7F 14 EB F6 C3 33 F6 E8 9C 08 74 05 E8 81 14  // ......3....t....
    09E0: EB F6 C3 E8 49 25 75 1B 80 F9 01 75 17 33 F6 E8  // ....I%u....u.3..
    09F0: 85 08 74 0C 51 E8 D0 14 B5 01 E8 E3 09 59 EB EF  // ..t.Q........Y..
    0A00: E8 D3 FF C3 E8 C2 FF 33 F6 E8 6B 08 74 0C 51 E8  // .......3..k.t.Q.
    0A10: 51 15 B5 00 E8 C9 09 59 EB EF C3 B8 02 00 E8 43  // Q......Y.......C
    0A20: 08 74 03 E8 43 1F C3 E8 0D 1B 8B C8 66 C1 E8 10  // .t..C.......f...
    0A30: 8B D0 C3 8A C3 24 80 E8 8B 13 32 C9 B5 10 E8 AF  // .....$....2.....
    0A40: 1A E8 0F 24 FE C1 38 C1 72 F2 C3 E8 04 13 3B C1  // ...$..8.r.....;.
    0A50: 7C 3A 8B C1 E8 44 13 E8 D5 1C 8B C8 51 E8 74 13  // |:...D......Q.t.
    0A60: E8 38 13 59 E8 C8 1C 3B C8 72 02 8B C1 8D 5C 04  // .8.Y...;.r....\.
    0A70: E8 25 27 32 C9 B5 0F E8 76 1A E8 D6 23 FE C1 38  // .%'2....v...#..8
    0A80: C1 72 F2 8D 5C 04 E8 97 27 0B C0 C3 33 C0 C3 52  // .r..\...'...3..R
    0A90: E8 9C 00 8A C2 8B D1 66 C1 E2 10 8A D0 32 C0 B9  // .......f.....2..
    0AA0: 00 02 E8 69 1C 66 C1 EA 10 8B CA 5A E8 80 00 E8  // ...i.f.....Z....
    0AB0: 6E 27 66 C1 E8 02 0A F6 75 04 66 C1 E8 02 67 26  // n'f.....u.f...g&
    0AC0: 88 07 66 C1 E8 0A 67 26 88 47 01 66 C1 E8 0A 67  // ..f...g&.G.f...g
    0AD0: 26 88 47 02 66 83 C7 04 83 C3 04 E2 D2 C3 51 E8  // &.G.f.........Q.
    0AE0: 4D 00 53 67 26 8A 47 02 66 C1 E0 0A 67 26 8A 47  // M.Sg&.G.f...g&.G
    0AF0: 01 66 C1 E0 0A 67 26 8A 07 66 C1 E0 02 0A F6 75  // .f...g&..f.....u
    0B00: 04 66 C1 E0 02 E8 78 26 66 83 C7 04 83 C3 04 E2  // .f....x&f.......
    0B10: D2 5B 59 8A C2 8B D1 66 C1 E2 10 8A D0 B9 00 03  // .[Y....f........
    0B20: 53 E8 EA 1B 5B E8 2B 23 FE C1 38 C1 72 F2 C3 BB  // S...[.+#..8.r...
    0B30: 00 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00  // ..3.........S...
    0B40: E8 69 20 66 25 FF 0F FF 0F 5B C3 53 66 50 66 51  // .i f%....[.SfPfQ
    0B50: 66 8B C8 BB 03 00 E8 53 20 66 23 C2 66 0B C1 E8  // f......S f#.f...
    0B60: 54 20 66 59 66 58 5B C3 B8 2C 06 F6 C3 01 75 03  // T fYfX[..,....u.
    0B70: B8 0C 06 E8 37 00 C3 BB 05 00 E8 2F 20 25 FF 0F  // ....7....../ %..
    0B80: 8B C8 66 C1 E0 10 8B D0 C3 E8 A6 21 23 C8 81 E2  // ..f........!#...
    0B90: 15 01 23 D1 66 C1 E2 10 8B D1 BB 05 00 E8 0C 20  // ..#.f.......... 
    0BA0: 66 25 00 F0 EA FE 66 0B C2 E8 0A 20 C3 66 50 53  // f%....f.... .fPS
    0BB0: 51 66 52 66 33 D2 33 DB 8A DC 8A E8 8A C8 80 E1  // QfRf3.3.........
    0BC0: 1F 66 BA 01 00 00 00 66 D3 E2 E8 DF 1F 66 0B C2  // .f.....f.....f..
    0BD0: F6 C5 20 75 03 66 33 C2 E8 DB 1F 66 5A 59 5B 66  // .. u.f3....fZY[f
    0BE0: 58 C3 66 50 53 BB 06 00 E8 C1 1F A8 10 75 09 BB  // X.fPS........u..
    0BF0: F0 16 E8 2B 26 3D 5A A5 5B 66 58 C3 B8 04 06 80  // ...+&=Z.[fX.....
    0C00: F1 01 C0 E1 05 0A C1 E8 A3 FF C3 53 66 50 BB F8  // ...........SfP..
    0C10: 16 E8 0C 26 8A C1 E8 67 25 66 58 5B C3 53 BB F8  // ...&...g%fX[.S..
    0C20: 16 E8 FC 25 83 E0 01 5B C3 BB 06 00 E8 7D 1F 66  // ...%...[.....}.f
    0C30: C1 E8 10 25 FF 0F C3 BB 06 00 E8 6F 1F 66 25 FF  // ...%.......o.f%.
    0C40: FF 00 F0 66 C1 E2 10 66 0B C2 E8 69 1F C3 53 66  // ...f...f...i..Sf
    0C50: 50 BB 07 00 E8 55 1F F6 C4 01 66 58 B0 06 74 02  // P....U....fX..t.
    0C60: B0 08 5B C3 53 BB 07 00 E8 41 1F 80 E4 FE 80 FD  // ..[.S....A......
    0C70: 06 74 03 80 CC 01 E8 3D 1F 5B C3 53 B8 06 06 C0  // .t.....=.[.S....
    0C80: E3 05 0A C3 E8 26 FF 5B C3 66 50 BB 06 00 E8 1B  // .....&.[.fP.....
    0C90: 1F 24 40 C0 E8 06 8A D8 66 58 C3 57 66 50 66 33  // .$@.....fX.WfPf3
    0CA0: C0 B9 08 00 FC F3 66 AB 66 58 5F E8 3E 01 0B C0  // ......f.fX_.>...
    0CB0: 75 09 E8 E3 05 74 3C 85 C1 74 F7 E8 A6 05 8D 9C  // u....t<..t......
    0CC0: 6A 01 E8 5B 25 26 89 05 8D 9C 6E 01 E8 51 25 26  // j..[%&....n..Q%&
    0CD0: 89 45 02 8D 9C B5 02 E8 46 25 02 C0 04 04 26 88  // .E......F%....&.
    0CE0: 45 06 26 88 45 07 26 88 45 08 B0 07 26 88 45 04  // E.&.E.&.E...&.E.
    0CF0: 0A C0 C3 32 C0 C3 C3 66 50 53 51 52 56 57 E8 E1  // ...2...fPSQRVW..
    0D00: FE 74 03 E8 D5 05 5F 5E 5A 59 5B 66 58 C3 33 C9  // .t...._^ZY[fX.3.
    0D10: E8 1C 22 75 48 66 BA FF FF 0C FF 66 33 C0 E8 F7  // .."uHf.....f3...
    0D20: 06 33 F6 E8 5C 05 74 18 E8 69 06 A9 C8 0E 74 F3  // .3..\.t..i....t.
    0D30: E8 43 07 A8 04 75 04 A8 18 74 E8 E8 7B 00 EB E3  // .C...u...t..{...
    0D40: E8 2C 00 75 03 E8 A4 00 33 F6 E8 35 05 74 0E E8  // .,.u....3..5.t..
    0D50: 42 06 85 C1 74 F4 51 E8 F9 07 59 EB ED C3 8D 5D  // B...t.Q...Y....]
    0D60: 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 0C 21 C3 66  // (f....\(.I...!.f
    0D70: 50 53 52 56 33 C9 33 D2 8D 36 48 0D E8 B6 06 A8  // PSRV3.3..6H.....
    0D80: 03 74 03 83 CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74  // .t....f........t
    0D90: 15 66 A9 01 00 00 00 74 07 BB 01 00 D3 E3 0B D3  // .f.....t........
    0DA0: 66 D1 E8 46 EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3  // f..F......^Z[fX.
    0DB0: 03 07 01 05 06 09 0A 0B FF 66 50 53 51 E8 D4 05  // .........fPSQ...
    0DC0: 0F BC D8 81 C3 78 0D 8A 0F 66 B8 01 00 00 00 66  // .....x...f.....f
    0DD0: D3 E0 66 BA FF FF FF FF E8 3D 06 59 5B 66 58 C3  // ..f......=.Y[fX.
    0DE0: 01 12 0B 10 09 13 14 11 0C 15 16 17 50 53 52 E8  // ............PSR.
    0DF0: 7D FF 75 13 B9 01 00 E8 38 1F 23 C8 75 19 33 C0  // }.u.....8.#.u.3.
    0E00: E8 95 04 8B C8 EB 10 83 F9 02 74 0B E8 7A FE 80  // ..........t..z..
    0E10: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 83 EC 04 8B  // ..u....Z[X.V....
    0E20: EC 66 33 C0 66 89 46 00 66 BA 00 F0 00 F0 E8 1A  // .f3.f.F.f.......
    0E30: FD 66 C1 E6 10 E8 60 04 0B C0 74 1E 85 C1 74 F5  // .f....`...t...t.
    0E40: 55 E8 56 00 5D 74 04 33 C8 EB EA E8 BB 05 66 3B  // U.V.]t.3......f;
    0E50: 56 00 76 E1 66 89 56 00 EB DB E8 DF FC 74 07 66  // V.v.f.V......t.f
    0E60: 8B 46 00 E8 05 00 83 C4 04 5E C3 33 F6 66 50 E8  // .F.......^.3.fP.
    0E70: 05 04 66 58 8D 9C D8 02 E8 05 23 66 8B D0 E8 BB  // ..fX......#f....
    0E80: FC E8 DD 18 8D 9C 1C 03 E8 95 23 38 D0 74 0A 8A  // ..........#8.t..
    0E90: C2 E8 EC 22 B0 02 E8 5F 05 C3 50 51 E8 C5 03 32  // ..."..._..PQ...2
    0EA0: C0 E8 54 05 E8 3A 03 E8 AB 00 8D 9C 40 03 E8 6F  // ..T..:......@..o
    0EB0: 23 38 E8 74 0A 8A C5 E8 C6 22 B0 02 E8 39 05 E8  // #8.t....."...9..
    0EC0: BD 00 E8 D8 00 75 73 E8 9E 00 8D 9C 4C 01 E8 4F  // .....us.....L..O
    0ED0: 23 8B C8 8B D3 8D 9C 00 03 E8 44 23 3B C1 74 05  // #.........D#;.t.
    0EE0: B0 02 E8 13 05 E8 65 0A 8D 9C 00 03 E8 4F 18 8D  // ......e......O..
    0EF0: 9C D8 02 E8 8A 22 66 C1 CE 10 8B FE 66 C1 CE 10  // ....."f.....f...
    0F00: E8 C9 00 E8 FF 00 E8 94 04 8A E9 8D 9C DC 02 32  // ...............2
    0F10: C9 E8 B0 22 E8 7D 04 66 25 FF 0F 00 00 E8 F9 03  // ...".}.f%.......
    0F20: 80 F9 01 75 04 66 C1 E0 10 59 58 66 BA FF FF FF  // ...u.f...YXf....
    0F30: FF 66 33 D0 E8 14 FC 33 D2 C3 E8 05 00 0C 01 59  // .f3....3.......Y
    0F40: 58 C3 53 66 50 8D 9C D4 02 E8 D4 22 8A C4 E8 2F  // X.SfP......".../
    0F50: 22 66 58 5B C3 53 66 50 8D 9C D4 02 E8 C1 22 8A  // "fX[.SfP......".
    0F60: E0 E8 1C 22 66 58 5B C3 E8 CE 03 E8 91 03 8A DD  // ..."fX[.........
    0F70: E8 6B 19 8D 9C 3C 03 8A E9 32 C9 E8 46 22 C3 83  // .k...<...2..F"..
    0F80: EC 08 8B EC E8 B2 03 E8 75 03 E8 FF 18 8A 6E 00  // ........u.....n.
    0F90: 8D 9C 4C 03 32 C9 E8 2B 22 83 C4 08 C3 33 C9 56  // ..L.2..+"....3.V
    0FA0: E8 23 03 0B F6 5E 74 0C FE C1 E8 A6 1E 38 C1 75  // .#...^t......8.u
    0FB0: EE 0C 01 C3 8D 9C D4 02 E8 65 22 38 C8 74 0A 8A  // .........e"8.t..
    0FC0: C1 E8 BC 21 B0 02 E8 2F 04 32 C0 C3 E8 0A 00 8D  // ...!.../.2......
    0FD0: 9C D0 02 32 C9 E8 EC 21 C3 8D 1D E8 42 22 66 8B  // ...2...!....B"f.
    0FE0: D0 8D 9C 02 03 E8 38 22 51 8B C8 8D 9C 06 03 E8  // ......8"Q.......
    0FF0: 2E 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00  // ."f.....Yf;.u...
    1000: EB 02 B5 02 C3 E8 6D 03 8D 9C 40 03 B1 03 E8 B3  // ......m...@.....
    1010: 21 E8 B2 06 8D 9C 40 03 B1 02 E8 A7 21 E8 DF 02  // !.....@.....!...
    1020: 80 FD 00 75 1D E8 94 00 66 81 FA F0 D2 00 00 75  // ...u....f......u
    1030: 06 66 BA 78 69 00 00 E8 B6 00 E8 EF 00 E8 AB 03  // .f.xi...........
    1040: EB 38 E8 81 03 E8 A3 03 66 52 E8 F7 02 0B D2 74  // .8......fR.....t
    1050: 07 E8 82 18 66 5A EB 22 E8 5E 03 E8 00 1B 66 5A  // ....fZ.".^....fZ
    1060: 51 E8 9B 02 80 FD 02 59 75 10 B5 04 66 81 FA 74  // Q......Yu...f..t
    1070: 40 00 00 76 05 B5 08 66 D1 EA 8D 9C 54 03 66 8B  // @..v...f....T.f.
    1080: C2 E8 FC 20 8D 9C 40 03 E8 95 21 8A E5 E8 F0 20  // ... ..@...!.... 
    1090: E8 1E 01 8D 9C 48 03 32 C9 E8 28 21 E8 9A 02 E8  // .....H.2..(!....
    10A0: 5D 02 E8 34 18 8D 9C 58 03 32 C9 E8 16 21 E8 88  // ]..4...X.2...!..
    10B0: 02 E8 4B 02 8D 9C 60 03 E8 EC 17 C3 53 8D 9C 29  // ..K...`.....S..)
    10C0: 01 E8 5C 21 66 33 D2 0A C0 75 05 BA 48 3F 5B C3  // ..\!f3...u..H?[.
    10D0: 8A D0 66 B8 8C 0A 00 00 66 F7 E2 66 8B F8 E8 58  // ..f.....f..f...X
    10E0: 02 B3 00 E8 3F 17 66 3B D7 76 03 66 8B D7 5B C3  // ....?.f;.v.f..[.
    10F0: B7 01 53 8D 9C 42 03 E8 26 21 8A C8 5B 66 52 E8  // ..S..B..&!..[fR.
    1100: 83 00 E8 C1 02 66 3B D1 66 5A 76 09 D0 E7 E8 07  // .....f;.fZv.....
    1110: 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A 01 E8 00 21  // .8.r....S..*...!
    1120: 24 0F 8A E8 0A ED 75 02 B5 01 5B C3 51 83 EC 08  // $.....u...[.Q...
    1130: 8B EC 66 C7 46 00 48 3F 78 69 66 C7 46 04 F0 D2  // ..f.F.H?xif.F...
    1140: 00 00 E8 FF 01 0B D2 74 03 E8 9B 17 8A FD 53 8D  // .......t......S.
    1150: 9C 42 03 E8 CA 20 8A C8 5B E8 60 FF 66 33 C0 8B  // .B... ..[.`.f3..
    1160: 46 00 66 3B C2 73 19 66 8B D0 E8 18 00 E8 56 02  // F.f;.s.f......V.
    1170: 66 3B D1 72 05 83 C5 02 EB D4 66 33 D2 8B 56 00  // f;.r......f3..V.
    1180: 83 C4 08 59 C3 66 52 52 32 ED 83 C1 02 B8 06 00  // ...Y.fRR2.......
    1190: F7 E1 66 33 C9 8B C8 5A 51 66 33 C0 8B C2 8A CF  // ..f3...ZQf3.....
    11A0: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
    11B0: C3 E8 90 01 0B D2 74 0B E8 16 00 0A ED 75 11 E8  // ......t......u..
    11C0: B8 16 C3 B5 00 E8 F1 01 E8 5F 19 75 03 E8 01 00  // ........._.u....
    11D0: C3 B5 00 8D 9C 31 01 E8 46 20 A8 01 74 02 B5 01  // .....1..F ..t...
    11E0: C3 53 E8 5F 01 66 C1 E2 10 E8 4D 01 8D 9C B8 02  // .S._.f....M.....
    11F0: E8 2D 20 8A E8 E8 5F 16 8A EB 5B C3 57 53 53 E8  // .- ..._...[.WSS.
    1200: DF FF E8 34 01 5B E8 A2 16 74 49 80 FD 00 75 24  // ...4.[...tI...u$
    1210: 53 E8 A8 FE E8 AF 04 8A CD E8 FC FE 8A FD E8 64  // S..............d
    1220: FF 5B E8 FB 1F 66 25 FF FF 00 00 66 3B C8 73 21  // .[...f%....f;.s!
    1230: 32 DB EB 20 80 FD 02 75 18 53 E8 7C 01 E8 FB 18  // 2.. ...u.S.|....
    1240: 5B 74 0E 8D 1D E8 D8 1F 3D 74 40 76 04 32 DB EB  // [t......=t@v.2..
    1250: 03 80 CB 01 5B 5F C3 53 E8 39 01 8B D8 E8 DC F8  // ....[_.S.9......
    1260: 85 C3 5B C3 53 8B F0 E8 C8 1A 23 F0 74 07 8B C6  // ..[.S.....#.t...
    1270: E8 69 19 8B F3 5B C3 E8 08 00 74 05 E8 D8 FF 74  // .i...[....t....t
    1280: F6 C3 33 C0 0B F6 74 03 E8 09 01 33 F6 E8 08 00  // ..3...t....3....
    1290: 74 03 E8 CF FF 0B F6 C3 57 53 E8 E0 1A 0B C0 74  // t.......WS.....t
    12A0: 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74  // ......;.u......t
    12B0: 0E 83 C7 02 E8 7B 1A 85 D8 74 EF 8B C3 EB 02 33  // .....{...t.....3
    12C0: C0 0B C0 5B 5F C3 51 33 F6 8A E9 E8 A9 FF 74 07  // ...[_.Q3......t.
    12D0: E8 46 00 38 E9 75 F4 0B F6 59 C3 33 C0 E8 B8 FF  // .F.8.u...Y.3....
    12E0: 74 13 E8 7F FF 8B DE B9 FB 00 E8 78 1B 83 C6 08  // t..........x....
    12F0: E8 C2 19 EB E8 BB F0 16 B8 5A A5 E8 9A 1E C3 53  // .........Z.....S
    1300: 66 50 8D 9C 40 03 E8 17 1F 8A E8 66 58 5B C3 8D  // fP..@......fX[..
    1310: 9C 64 03 E8 0A 1F 0B C0 C3 53 66 50 8D 9C D4 02  // .d.......SfP....
    1320: E8 FD 1E 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02  // .....fX[.SfP....
    1330: E8 ED 1E 8A C8 66 58 5B C3 53 8D 5C 14 E8 E0 1E  // .....fX[.S.\....
    1340: 8B D0 5B C3 53 66 50 8D 5C 16 E8 D3 1E 8B D0 66  // ..[.SfP.\......f
    1350: 58 5B C3 53 66 50 8D 9C 50 03 E8 C3 1E 66 8B D0  // X[.SfP..P....f..
    1360: 66 58 5B C3 53 66 50 8D 9C 54 03 E8 B2 1E 66 8B  // fX[.SfP..T....f.
    1370: D0 66 58 5B C3 53 66 50 8D 5C 10 E8 A2 1E 8B C8  // .fX[.SfP.\......
    1380: 66 58 5B C3 66 50 53 8D 9C 41 03 E8 92 1E 5B 8A  // fX[.fPS..A....[.
    1390: D8 66 58 C3 53 8D 5C 08 E8 85 1E 5B C3 53 50 8D  // .fX.S.\....[.SP.
    13A0: 9C 4C 03 E8 7A 1E 8A C8 58 5B C3 53 50 8D 9C 4D  // .L..z...X[.SP..M
    13B0: 03 E8 6C 1E 8A C8 58 5B C3 53 50 8D 5C 0C E8 5F  // ..l...X[.SP.\.._
    13C0: 1E 8B D0 58 5B C3 53 66 50 8D 9C 00 03 E8 50 1E  // ...X[.SfP.....P.
    13D0: 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 41 1E C3  // f3...fX[..\..A..
    13E0: 51 8D 5C 04 32 C9 E8 DB 1D 59 C3 8D 9C 50 03 E8  // Q.\.2....Y...P..
    13F0: 2E 1E 8B C2 E8 89 1D C3 53 51 8A E8 E8 DA FF 24  // ........SQ.....$
    1400: FD 0A E8 E8 DA FF 59 5B C3 66 50 8D 9C D8 02 E8  // ......Y[.fP.....
    1410: 0E 1E 66 8B D0 66 58 C3 53 66 50 66 51 66 8B C8  // ..f..fX.SfPfQf..
    1420: BB 00 00 E8 86 17 66 23 C2 66 0B C1 E8 87 17 66  // ......f#.f.....f
    1430: 59 66 58 5B C3 BB 00 00 E8 71 17 66 25 03 03 FF  // YfX[.....q.f%...
    1440: 00 C3 57 0B C0 75 10 33 F6 E8 36 FE 74 26 E8 25  // ..W..u.3..6.t&.%
    1450: 00 A8 04 74 F4 EB 13 8B C8 E8 D6 18 23 C1 74 14  // ...t........#.t.
    1460: E8 01 FE E8 10 00 A8 04 74 0A 5F 8D 5C 28 E8 2D  // ........t._.\(.-
    1470: 05 0B F6 C3 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF  // ...._......tr.9.
    1480: E8 B4 16 74 30 0A ED 74 10 8A CD B5 02 E8 A0 19  // ...t0..t........
    1490: B1 02 8D 9C 48 01 E8 2B 1D E8 34 02 A8 04 74 15  // ....H..+..4...t.
    14A0: 8D 5C 28 E8 56 00 74 0D E8 0E FF E8 80 16 74 3F  // .\(.V.t.......t?
    14B0: 80 FD 02 74 3A 8D 5C 28 E8 38 00 E8 20 0B 33 C9  // ...t:.\(.8.. .3.
    14C0: 50 8D 9C 28 01 E8 58 1D 66 0B C0 74 03 B9 00 08  // P..(..X.f..t....
    14D0: 58 0A C0 75 13 8D 5C 28 E8 3F 00 75 0B 80 CD 02  // X..u..\(.?.u....
    14E0: E8 19 00 74 03 80 CD 04 8D 9C 48 01 E8 D5 1C E8  // ...t......H.....
    14F0: DE 01 C3 51 B9 49 00 E8 6B 19 59 C3 51 E8 1A 00  // ...Q.I..k.Y.Q...
    1500: 75 14 E8 9C 01 3C 01 75 0D B9 20 00 E8 27 00 75  // u....<.u.. ..'.u
    1510: 05 80 C9 01 EB 02 33 C9 59 C3 53 E8 02 1D 66 3D  // ......3.Y.S...f=
    1520: 00 FF FF FF 75 0E 83 C3 04 E8 F4 1C 66 3D FF FF  // ....u.......f=..
    1530: FF 00 75 00 5B C3 50 52 32 D2 E8 E3 1C 02 D0 02  // ..u.[.PR2.......
    1540: D4 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2  // .f..............
    1550: 5A 58 C3 8D 9C 4C 01 E8 1F 01 E8 73 01 B5 13 A8  // ZX...L.....s....
    1560: 08 75 0C E8 53 FE 8A EA 80 FD 13 75 02 B5 03 8D  // .u..S......u....
    1570: 9C B8 02 66 33 C0 8A C5 E8 05 1C E8 16 FE A9 11  // ...f3...........
    1580: 00 74 37 B5 01 E8 22 01 E8 45 01 A8 04 75 17 55  // .t7..."..E...u.U
    1590: BD 00 00 B8 61 40 E8 F0 02 B8 45 40 E8 EA 02 5D  // ....a@....E@...]
    15A0: B5 02 E8 8A 00 C3 E8 2F 01 B5 02 8D 5C 28 E8 DD  // ......./....\(..
    15B0: 00 75 02 B5 01 E8 77 00 EB 67 A9 C8 0E 74 3E E8  // .u....w..g...t>.
    15C0: 0E 01 A8 08 74 08 8D 5C 28 E8 B4 00 74 B5 B5 02  // ....t..\(...t...
    15D0: E8 D7 00 E8 FA 00 A8 04 74 0B 8D 5C 28 E8 F8 00  // ........t..\(...
    15E0: E8 F8 02 EB 0A 8D 9C 68 01 B8 3C 6A E8 60 05 E8  // .......h..<j.`..
    15F0: D4 00 80 FD 00 75 37 B5 02 E8 C0 00 C3 A9 22 00  // .....u7.......".
    1600: 74 2C B5 04 E8 A3 00 8D 9C 68 01 56 E8 DD 19 8B  // t,.......h.V....
    1610: F7 E8 58 03 5E E8 85 19 E8 A1 00 8D 5C 28 E8 AB  // ..X.^.......\(..
    1620: 19 8D 9C 68 01 E8 4F 03 66 8B D1 E8 C0 07 C3 8D  // ...h..O.f.......
    1630: 9C B4 02 B1 02 E8 8C 1B B5 02 E8 7F 00 C3 8D 9C  // ................
    1640: 4C 01 E8 34 00 E8 88 00 A8 04 74 23 8D 5C 28 E8  // L..4......t#.\(.
    1650: 86 00 E8 97 19 8D 9C 68 01 06 0E 07 B9 07 00 E8  // .......h........
    1660: 3D 18 07 E8 60 00 E8 50 FD 8D 5C 28 E8 88 19 8D  // =...`..P..\(....
    1670: 5C 28 E8 37 19 E8 DB FE C3 B9 61 00 E8 E6 17 C3  // \(.7......a.....
    1680: 53 81 C3 05 01 E8 98 1B 24 06 3C 02 5B C3 E8 10  // S.......$.<.[...
    1690: 00 3D 01 04 75 0A 53 83 C3 18 E8 83 1B 5B A8 01  // .=..u.S......[..
    16A0: C3 53 83 C3 12 E8 78 1B 5B C3 8D 9C B4 02 32 C9  // .S....x.[.....2.
    16B0: E8 11 1B C3 8D 9C B4 02 E8 65 1B C3 8D 9C B4 02  // .........e......
    16C0: B1 01 E8 FF 1A C3 8D 9C B4 02 B1 01 E8 0D 1B C3  // ................
    16D0: 8D 9C 48 01 E8 49 1B C3 55 57 51 B9 08 00 BD 00  // ..H..I..UWQ.....
    16E0: 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 32 1B E8 98  // ....+....XN.2...
    16F0: 01 E2 EE 8D 5C 4B E8 27 1B B9 04 00 8B D0 BF FD  // ....\K.'........
    1700: 16 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8 70 1A  // ..U.t.f.......p.
    1710: 8B 45 04 8D 9A F8 01 E8 7E 1A 83 C5 08 83 C7 08  // .E......~.......
    1720: E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 F1 1A 0B  // ...|^...3.......
    1730: C0 74 09 E8 12 01 E8 4C 00 83 C5 1C 83 C7 12 E2  // .t.....L........
    1740: E9 32 ED E8 76 FF 8D 5C 28 E8 55 FF 3D 01 04 75  // .2..v..\(.U.=..u
    1750: 10 83 C3 14 E8 C9 1A 24 70 C0 E8 04 8A E8 E8 5B  // .......$p......[
    1760: FF 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00  // .Y_]. .X.<......
    1770: 03 3C 00 00 08 00 05 00 04 4B 00 00 01 80 02 E0  // .<.......K......
    1780: 01 3C 00 20 00 51 8D 1D E8 95 1A 8D 9A 68 01 E8  // .<. .Q.......h..
    1790: 06 1A 8D 5D 02 E8 88 1A 8D 9A 6A 01 E8 89 00 8D  // ...]......j.....
    17A0: 5D 05 E8 7B 1A 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8  // ]..{...n..|..]..
    17B0: 6E 1A 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A  // n.....f.........
    17C0: F0 C0 EE 04 8A EC C0 E5 06 8A FC C0 E7 04 80 E7  // ................
    17D0: 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0  // ...........?....
    17E0: EC 02 0A F4 8B C3 8D 9A 74 01 E8 AB 19 8D 9A 72  // ........t......r
    17F0: 01 8B C1 E8 A2 19 8D 9A 76 01 33 C0 8A C6 E8 97  // ........v.3.....
    1800: 19 8D 9A 78 01 33 C0 8A C2 E8 8C 19 8D 5D 0C E8  // ...x.3.......]..
    1810: 0E 1A 8D 9A 7A 01 E8 0F 00 8D 5D 0F E8 01 1A 8D  // ....z.....].....
    1820: 9A 7E 01 E8 72 19 59 C3 8B C8 8A D4 66 C1 C8 10  // .~..r.Y.....f...
    1830: 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 59 19 83  // .............Y..
    1840: C3 02 8B C2 E8 51 19 C3 8D 5D 11 E8 D2 19 8A E0  // .....Q...]......
    1850: BA 06 02 C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03  // ......t.........
    1860: 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0  // $.<.u...@<.u....
    1870: E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B  // ...t......t.....
    1880: C2 8D 9A 80 01 E8 10 19 C3 3C 01 74 3D 8B D0 0F  // .........<.t=...
    1890: B6 C6 24 3F 04 3C 8D 9A F8 01 E8 FB 18 0F B6 C2  // ..$?.<..........
    18A0: 83 C0 1F C1 E0 03 8D 9A F4 01 E8 EB 18 0F B6 DE  // ................
    18B0: C1 EB 06 C1 E3 02 2E F7 A7 65 18 2E F7 B7 63 18  // .........e....c.
    18C0: 8D 9A F6 01 E8 D1 18 83 C5 08 C3 01 00 01 00 04  // ................
    18D0: 00 03 00 05 00 04 00 10 00 09 00 57 8D 9C 68 01  // ...........W..h.
    18E0: 8B FB 8B DF E8 90 00 0B C9 74 44 8D 5D 18 E8 2F  // .........tD.]../
    18F0: 19 A8 80 74 0D 8B DF 56 8D 36 C9 18 E8 6D 00 5E  // ...t...V.6...m.^
    1900: EB 28 66 8B D1 E8 E6 04 8D 9C A6 00 E8 11 19 3C  // .(f............<
    1910: 01 75 17 66 81 F9 80 07 38 04 74 09 66 81 F9 00  // .u.f....8.t.f...
    1920: 05 D0 02 75 05 B5 03 E8 80 FD 83 C7 1C EB B3 5F  // ...u..........._
    1930: C3 8C 0A D0 02 8A 00 E0 01 2D 00 10 00 3E 00 09  // .........-...>..
    1940: 00 06 00 00 00 00 00 00 00 06 00 00 00 50 53 51  // .............PSQ
    1950: B9 07 00 53 8B DA E8 C7 18 83 F8 00 5B 74 09 66  // ...S........[t.f
    1960: C1 E3 10 8B DA E8 12 15 59 5B 58 C3 51 53 B9 07  // ........Y[X.QS..
    1970: 00 E8 1F 15 5B 59 C3 66 50 53 83 C3 06 E8 A0 18  // ....[Y.fPS......
    1980: 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 92 18 8B C8  // [..f...S........
    1990: 5B 66 58 C3 8D 9C 48 01 32 C9 E8 27 18 C3 57 B9  // [fX...H.2..'..W.
    19A0: 20 00 E8 FA 14 5F C3 E8 0A FD 3C 01 75 57 8D 9C  //  ...._....<.uW..
    19B0: B6 02 E8 6B 18 A8 02 74 71 66 C1 CE 10 E8 F3 03  // ...k...tqf......
    19C0: 66 C1 CE 10 0A C0 75 0E 8D 9C 4C 01 B8 3C 6A E8  // f.....u...L..<j.
    19D0: 7D 01 0C 01 EB 7A 8D 9C 68 01 B0 00 E8 36 01 75  // }....z..h....6.u
    19E0: 07 B0 00 E8 DF 00 74 68 8D 9C 68 01 B0 01 E8 24  // ......th..h....$
    19F0: 01 75 52 B0 01 E8 B0 00 75 56 B0 00 E8 A9 00 EB  // .uR.....uV......
    1A00: 4F 0B F6 EB 4B 3C 04 74 21 3C 03 74 1D 66 C1 CE  // O...K<.t!<.t.f..
    1A10: 10 E8 9F 03 66 C1 CE 10 0A C0 74 07 B0 01 E8 A4  // ....f.....t.....
    1A20: 00 75 2D B0 00 E8 9D 00 75 26 8D BC 68 01 8D 1D  // .u-.....u&..h...
    1A30: E8 ED 17 0B C0 74 19 8B DF B0 00 E8 D7 00 75 05  // .....t........u.
    1A40: 83 C7 1C EB E9 8B D3 8D 9C 4C 01 E8 FF FE 0B F6  // .........L......
    1A50: C3 57 53 51 E8 44 13 3B 55 02 75 18 66 C1 CA 10  // .WSQ.D.;U.u.f...
    1A60: 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A  // ..f...;].u...t.:
    1A70: 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B  // E.t......3......
    1A80: D2 59 5B 5F C3 51 66 52 E8 10 13 3A 65 1A 75 09  // .Y[_.QfR...:e.u.
    1A90: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF  // ..t.:E.t......3.
    1AA0: EB 00 0B FF 66 5A 59 C3 51 E8 EF 12 56 8D 9C 4C  // ....fZY.Q...V..L
    1AB0: 01 8B F7 E8 B6 FE 5E E8 5B 00 75 07 83 C7 1C E2  // ......^.[.u.....
    1AC0: EB 33 FF 59 C3 8D BC F4 01 8A C8 8D 1D E8 50 17  // .3.Y..........P.
    1AD0: 0B C0 74 40 66 50 E8 DB FB 3C 01 66 58 74 05 3D  // ..t@fP...<.fXt.=
    1AE0: 40 06 73 2B 66 8B D0 8D 5D 04 E8 33 17 E8 61 FF  // @.s+f...]..3..a.
    1AF0: 74 1D 8D 9C 4C 01 56 8B F2 E8 70 FE 5E 53 8D 9C  // t...L.V...p.^S..
    1B00: 62 01 33 C0 E8 91 16 5B 8A C1 E8 08 00 75 05 83  // b.3....[.....u..
    1B10: C7 08 EB B7 C3 66 51 50 53 66 C1 CE 10 8B DE 66  // .....fQPSf.....f
    1B20: C1 CE 10 E8 FA 16 5B 66 8B D0 E8 4A FE 58 3C 01  // ......[f...J.X<.
    1B30: 75 0A 66 3B CA 75 13 E8 C2 F6 75 10 3B CA 72 0A  // u.f;.u....u.;.r.
    1B40: 66 3B CA 72 05 E8 B4 F6 75 02 32 C0 66 59 C3 56  // f;.r....u.2.fY.V
    1B50: 57 E8 31 FF 8B F7 E8 13 FE 5F 5E C3 66 50 53 66  // W.1......_^.fPSf
    1B60: 51 52 57 56 51 8B DE B9 08 00 E8 F8 12 59 8D 5C  // QRWVQ........Y.\
    1B70: 08 8B C1 66 C1 E0 10 8A C2 E8 04 16 F6 C2 03 75  // ...f...........u
    1B80: 24 8B C1 24 7F BF 3F 1C 80 3D FF 0F 84 0F 01 3A  // $..$..?..=.....:
    1B90: 05 75 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00  // .u.f.E.f........
    1BA0: 83 C7 05 EB E3 F6 C2 01 74 25 8B C1 E8 61 01 0F  // ........t%...a..
    1BB0: 84 EB 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08  // ...3.......u..\.
    1BC0: 66 25 FF FF 00 00 66 C1 E0 08 E8 B3 15 EB B2 8A  // f%....f.........
    1BD0: E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A  // ................
    1BE0: EA 80 FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4  // ...pr*..us%..p..
    1BF0: 32 E4 50 E8 21 02 8B D8 58 38 D8 72 05 33 C0 E9  // 2.P.!...X8.r.3..
    1C00: 9C 00 E8 19 02 E8 18 16 0B C0 0F 84 90 00 EB 1B  // ................
    1C10: 32 C0 E8 70 FE 0F 84 85 00 8D 5C 16 8B 05 E8 77  // 2..p......\....w
    1C20: 15 8B 45 06 66 C1 E0 10 8B 45 02 50 E8 00 0B 66  // ..E.f....E.P...f
    1C30: C1 E1 10 8B C8 58 8D 1C E8 45 15 66 50 8D 5C 04  // .....X...E.fP.\.
    1C40: 66 8B C1 E8 3A 15 66 58 66 C1 E8 10 66 81 E1 FF  // f...:.fXf...f...
    1C50: FF 00 00 66 F7 E1 66 50 8D 5C 06 E8 C2 15 8B C8  // ...f..fP.\......
    1C60: 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 28 15  // fXf..f...@.\..(.
    1C70: BF 90 1C 83 F9 01 74 11 BF 98 1C 81 F9 01 01 74  // ......t........t
    1C80: 08 BF A0 1C 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8  // .......u..\.f...
    1C90: EE 14 8D 5C 10 66 8B 45 04 E8 E4 14 0B DB 5E 5F  // ...\.f.E......^_
    1CA0: 5A 66 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90  // ZfY[fX..@....@..
    1CB0: 01 02 80 02 90 01 03 80 02 90 01 04 40 01 90 01  // ............@...
    1CC0: 05 40 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D  // .@...........^..
    1CD0: 40 01 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80  // @...........^...
    1CE0: 02 5E 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02  // .^..............
    1CF0: 90 01 62 80 02 E0 01 FF 05 0A 05 05 05 00 00 00  // ..b.............
    1D00: 05 0B 06 05 05 00 00 00 08 10 08 08 08 00 00 00  // ................
    1D10: 56 E8 77 12 80 E4 01 3B 04 74 09 83 C6 04 E2 F7  // V.w....;.t......
    1D20: 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53 50 E8 5A  // 3....D...^.WSP.Z
    1D30: 12 83 E9 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1  // ..........v.....
    1D40: E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B  // ..............X[
    1D50: 5F C3 66 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8  // _.fSQfR.A..w.f..
    1D60: 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3 E8 66 33  // .f...f.....f..f3
    1D70: D2 66 F7 F3 E8 B8 09 66 5A 59 66 5B C3 53 66 50  // .f.....fZYf[.SfP
    1D80: BB 07 00 E8 26 0E 0A C0 66 58 5B C3 53 66 50 BB  // ....&...fX[.SfP.
    1D90: 07 00 E8 17 0E A8 01 66 58 5B C3 53 66 50 8D 5C  // .......fX[.SfP.\
    1DA0: 06 E8 7C 14 8A C8 66 58 5B C3 51 B9 08 00 E8 C9  // ..|...fX[.Q.....
    1DB0: 10 59 C3 53 8D 5C 08 E8 66 14 24 03 5B C3 8D 5C  // .Y.S.\..f.$.[..\
    1DC0: 09 E8 5C 14 C3 51 53 B1 01 8A E8 8D 5C 08 E8 F3  // ..\..QS.....\...
    1DD0: 13 5B 59 C3 53 8D 1C E8 46 14 5B C3 53 8D 5C 04  // .[Y.S...F.[.S.\.
    1DE0: E8 3D 14 5B C3 53 8D 5C 16 E8 34 14 5B C3 53 66  // .=.[.S.\..4.[.Sf
    1DF0: 52 33 C0 E8 5B FC 66 5A 75 1B E8 34 00 74 16 E8  // R3..[.fZu..4.t..
    1E00: 15 00 40 83 F8 05 73 0D E8 75 13 48 E8 0F 00 66  // ..@...s..u.H...f
    1E10: 8B C2 E8 6B 13 5B C3 BB 00 1E E8 03 14 C3 BB 08  // ...k.[..........
    1E20: 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32 00 E8 35 10  // ...........2..5.
    1E30: C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08 1E E8 DF  // .Q.....t........
    1E40: 13 66 3B C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3  // .f;.t........Y..
    1E50: C3 00 BB 20 DF E8 69 35 E8 BE F4 B5 01 E8 2B 07  // ... ..i5......+.
    1E60: C3 BB 00 DF E8 5A 35 E8 AF F4 B5 00 E8 1C 07 C3  // .....Z5.........
    1E70: 80 F9 00 75 0A E8 E1 0F 8A C8 B5 02 E8 E5 08 0B  // ...u............
    1E80: F6 74 29 E8 93 F4 B5 01 E8 14 07 56 33 F6 B5 00  // .t)........V3...
    1E90: E8 5D 06 5E B5 01 E8 04 F5 E8 C8 08 E8 85 09 E8  // .].^............
    1EA0: 77 F4 8D 9C 00 03 E8 FD 06 E8 46 07 66 C1 CE 10  // w.........F.f...
    1EB0: B5 01 E8 3B 06 E8 06 FF A8 40 75 07 32 C0 B5 01  // ...;.....@u.2...
    1EC0: E8 4B 08 66 C1 CE 10 C3 E8 4E F4 B5 01 E8 96 06  // .K.f.....N......
    1ED0: B5 00 E8 CA 06 E8 2D 07 B1 0F E8 16 0A B1 10 E8  // ......-.........
    1EE0: 11 0A E8 2B 00 C3 E8 7A 00 E8 3D F4 B5 00 E8 75  // ...+...z..=....u
    1EF0: 06 B5 00 E8 A9 06 E8 B2 F4 E8 5D 0F 38 C1 74 0F  // ..........].8.t.
    1F00: 80 F9 08 72 05 80 F9 0B 76 05 B5 03 E8 55 08 C3  // ...r....v....U..
    1F10: 53 66 50 BB 02 00 E8 93 0C 66 A9 00 00 01 00 66  // SfP......f.....f
    1F20: 58 5B 75 3E E8 1D F4 0B D2 74 0C E8 AB F4 3C 01  // X[u>.....t....<.
    1F30: 74 05 B1 0F E8 FA 09 B1 0C E8 75 00 B1 01 E8 28  // t.........u....(
    1F40: 0A E8 BB F3 80 FD 00 75 0D E8 E6 01 B1 0D E8 A2  // .......u........
    1F50: 09 B1 03 E8 5B 00 E8 EB F3 0B D2 74 05 B1 01 E8  // ....[......t....
    1F60: CF 09 C3 E8 DE F3 0B D2 74 05 B1 00 E8 C2 09 B1  // ........t.......
    1F70: 02 E8 3D 00 E8 62 F4 A8 01 74 0D E8 81 F3 80 FD  // ..=..b...t......
    1F80: 00 75 05 B0 02 E8 12 04 B1 00 E8 DC 09 B1 0D E8  // .u..............
    1F90: 1F 00 C3 B1 07 E8 D1 09 E8 A9 F3 0B D2 75 0C E8  // .............u..
    1FA0: 17 F4 E8 85 0B 75 09 E8 6D 0A C3 B1 07 E8 81 09  // .....u..m.......
    1FB0: C3 E8 05 F4 E8 73 0B 75 24 51 E8 AC 09 59 80 F9  // .....s.u$Q...Y..
    1FC0: 0C 75 1A 33 D2 56 83 C6 08 E8 9C 0B 5E 0A C0 75  // .u.3.V......^..u
    1FD0: 0C B9 0A 00 E8 DF 0E 42 83 FA 1E 75 E8 C3 56 83  // .......B...u..V.
    1FE0: C6 08 E8 24 0B 5E E8 5B F3 0B D2 74 03 E8 99 08  // ...$.^.[...t....
    1FF0: 80 FD 01 0F 84 D1 00 80 FD 02 0F 85 F2 00 B1 0C  // ................
    2000: E8 AE FF 56 83 C6 08 E8 5E 0B 5E 0A C0 0F 84 DF  // ...V....^.^.....
    2010: 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C 35 01 E8 FF  // ............5...
    2020: 11 A8 01 74 03 E8 7F 03 E8 19 F3 0B D2 74 05 B1  // ...t.........t..
    2030: 14 E8 FD 08 66 33 C9 E8 3B F3 66 BA 50 01 40 50  // ....f3..;.f.P.@P
    2040: 66 C1 C9 10 8A C1 66 C1 C9 10 E8 15 0A 0F 85 9F  // f.....f.........
    2050: 00 66 BA 50 01 50 4F 52 E8 E9 F2 80 FA 22 5A 74  // .f.P.POR....."Zt
    2060: 0D 8D 9C 2D 01 E8 B8 11 24 06 3C 02 75 02 B6 02  // ...-....$.<.u...
    2070: 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8 E2 09  // .\(f.....f......
    2080: 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1 C9 10  // un..2.f.....f...
    2090: 66 BA 50 01 10 30 33 DB E8 C7 09 75 53 66 C1 C9  // f.P..03....uSf..
    20A0: 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10 75 0F  // ...f.....tE...u.
    20B0: 8D 5C 28 E8 6A 11 66 0B C0 0F 85 7D FF EB 31 3D  // .\(.j.f....}..1=
    20C0: 80 00 0F 82 74 FF EB 25 E8 AA F2 8A E9 B1 A0 BA  // ....t..%........
    20D0: 00 80 BF 32 00 8D 5C 28 E8 5C 09 80 FF 01 74 0D  // ...2..\(.\....t.
    20E0: B1 A2 8D 5C 28 E8 4F 09 80 FF 01 75 03 B0 00 C3  // ...\(.O....u....
    20F0: B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75 21 E8  // ....+.t......u!.
    2100: 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01 E8 51  // ..u.f....C..0..Q
    2110: 09 66 BA 20 00 90 41 8D 9C 34 01 E8 44 09 33 DB  // .f. ..A..4..D.3.
    2120: C3 E8 51 F2 66 BA 00 00 90 47 8D 9C 28 01 E8 31  // ..Q.f....G..(..1
    2130: 09 C3 E8 A4 F2 3C 01 75 0E E8 ED 02 80 FD 01 75  // .....<.u.......u
    2140: 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00 E8 14  // ................
    2150: 0D B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9 19 01  // ....D.t.........
    2160: B1 08 E8 8E 07 E8 66 02 B1 09 E8 86 07 E8 AC 01  // ......f.........
    2170: 8D 9C B8 03 66 33 C0 E8 06 10 E8 47 01 B9 90 01  // ....f3.....G....
    2180: E8 28 0D B0 01 E8 F7 01 B5 02 E8 D5 02 E8 5B 01  // .(............[.
    2190: E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8 E7 00  // ...........3....
    21A0: F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6 C5 04  // ...u............
    21B0: 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7 03 E8  // t...............
    21C0: CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84 A9 00  // .....8.u..3.....
    21D0: E8 54 01 FE C1 E8 AC F1 38 D9 75 C1 8D 9C AC 03  // .T......8.u.....
    21E0: E8 3D 10 3C 03 74 05 E8 DA 00 EB A1 8D 9C B0 03  // .=.<.t..........
    21F0: 66 33 C0 E8 8A 0F 8D 9C 2A 01 E8 23 10 A8 40 74  // f3......*..#..@t
    2200: 0C B1 13 E8 ED 06 B0 03 E8 74 01 EB 0A B1 0A E8  // .........t......
    2210: E1 06 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC 00 E8  // .....h....F.....
    2220: 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58 00 80  // X..8....8.3..X..
    2230: FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23 02 59  // ..u..s.u'Q...#.Y
    2240: F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65 00 8A  // ...u....$..-.e..
    2250: D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00 74 19  // .....].8.u....t.
    2260: FE C1 E8 1F F1 38 D9 75 C3 8D 9C AC 03 E8 B0 0F  // .....8.u........
    2270: 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01 B1 0B  // <.u..M..........
    2280: E8 70 06 E8 A3 01 C3 8D 9C C0 03 E8 0F 00 8A E8  // .p..............
    2290: C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 7F  // .S.......[...Q..
    22A0: 0F C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 6F  // ......$.Y......o
    22B0: 0F A8 01 C3 8D 9C B8 03 E8 21 0F C3 8D 9C B8 03  // .........!......
    22C0: E8 01 0F C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A  // ....3.3....8.v..
    22D0: D5 FE C1 E8 AE F0 38 D9 72 EE 33 C9 8A EA 8D 9C  // ......8.r.3.....
    22E0: 5C 03 E8 DF 0E B1 0B E8 7F 06 C3 E8 87 F0 8D 9C  // \...............
    22F0: B8 03 E8 2B 0F 66 BA 03 01 80 83 E8 64 07 C3 51  // ...+.f......d..Q
    2300: 53 8D 9C B0 03 E8 D4 0E FE C5 E8 B7 0E 80 FD 06  // S...............
    2310: 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33 C0 8D  // r....W.3.[Y.f3..
    2320: 9C B0 03 E8 5A 0E C3 32 ED E8 65 FF 80 E3 0C C0  // ....Z..2..e.....
    2330: EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03  // ....*.........r.
    2340: 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80  // .. .K....8.r....
    2350: FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 15 F0  // ..u.......`.....
    2360: 8D 9C C0 03 66 BA 02 02 90 45 E8 F5 06 C3 E8 04  // ....f....E......
    2370: F0 66 BA 00 01 90 42 8D 9C B4 03 E8 E4 06 C3 E8  // .f....B.........
    2380: F3 EF 66 BA 02 01 80 50 E8 D7 06 C3 E8 D5 EF 8B  // ..f....P........
    2390: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 D8 EF 66 BA 00  // .f3..........f..
    23A0: 06 80 50 E8 BC 06 C3 E8 CB EF 66 BA 11 01 80 50  // ..P.......f....P
    23B0: B0 04 E8 AD 06 C3 E8 BC EF 66 BA 00 06 90 40 8D  // .........f....@.
    23C0: 9C C8 03 E8 9C 06 8D 9C C8 03 E8 53 0E C3 E8 BB  // ...........S....
    23D0: FF E8 B0 EF 8A E3 80 CC 80 50 E8 98 EF 58 66 BA  // .........P...Xf.
    23E0: 00 01 80 61 E8 7B 06 33 C9 E8 23 EF 0B C0 74 02  // ...a.{.3..#...t.
    23F0: B5 10 8D 9C BC 03 E8 CB 0D 8A C5 E8 77 EF 66 BA  // ............w.f.
    2400: 07 01 80 50 E8 5B 06 E8 AF EF E8 21 07 75 19 8D  // ...P.[.....!.u..
    2410: 9C 48 03 E8 0A 0E 0A C0 74 0E E8 58 EF 66 BA 0A  // .H......t..X.f..
    2420: 01 80 50 B0 01 E8 3A 06 C3 E8 42 FF E8 2E FF E8  // ..P...:...B.....
    2430: 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8 47 FE  // ..<.u..q.t.3..G.
    2440: 80 FD 07 75 0D FE C1 E8 3A EF 38 D9 75 EF B5 01  // ...u....:.8.u...
    2450: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 63  // ...............c
    2460: 0D C3 51 8D 9C AC 03 32 C9 E8 58 0D 59 C3 51 8D  // ..Q....2..X.Y.Q.
    2470: 9C AC 03 B1 01 E8 4C 0D 59 C3 8D 9C 32 01 E8 9F  // ......L.Y...2...
    2480: 0D 0A C0 75 15 B9 64 00 8D 9C AC 03 E8 91 0D 3C  // ...u..d........<
    2490: 02 74 03 B9 90 01 E8 12 0A C3 32 E4 B1 04 33 D2  // .t........2...3.
    24A0: F6 E1 8B C8 E8 0F 0A C3 51 8D 5C 14 E8 71 0D 66  // ........Q.\..q.f
    24B0: C1 E0 10 E8 98 01 59 C3 33 C9 E8 96 09 38 C1 73  // ......Y.3....8.s
    24C0: 05 B5 00 E8 A7 00 B5 00 E8 9B 00 FE C1 E8 86 09  // ................
    24D0: 38 C1 72 E6 B1 14 8A E9 E8 7E 09 38 C1 74 05 B5  // 8.r......~.8.t..
    24E0: 03 E8 80 02 FE C1 E8 67 09 04 14 38 C1 76 E7 C3  // .......g...8.v..
    24F0: 83 EC 0C 8B EC 0B F6 74 29 E8 D8 F8 66 C1 C8 10  // .......t)...f...
    2500: 80 FD 10 75 06 8D 5C 18 E8 15 0D 66 89 46 00 8D  // ...u..\....f.F..
    2510: 5C 04 E8 0B 0D 66 89 46 04 8D 5C 08 E8 01 0D 88  // \....f.F..\.....
    2520: 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00  // F..N...f......+.
    2530: E8 7B 08 83 C4 0C C3 33 DB 83 EC 08 8B EC 89 5E  // .{.....3.......^
    2540: 00 8C D0 66 C1 E0 10 8B C4 BB 01 00 E8 5F 08 8B  // ...f........._..
    2550: EC 8B 4E 00 8B 56 02 66 8B 46 04 83 C4 08 C3 BB  // ..N..V.f.F......
    2560: 25 00 E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00  // %......#........
    2570: E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // ..........N...f.
    2580: E0 10 8B C4 E8 27 08 83 C4 04 C3 BB 22 00 E8 E3  // .....'......"...
    2590: FF 80 FD 01 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB  // ....t...........
    25A0: 2C 00 E8 CF FF C3 E8 77 0C 66 A9 00 00 FF FF 74  // ,......w.f.....t
    25B0: 40 83 EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 5F  // @.....UQ......._
    25C0: 0C 66 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04  // .f.F............
    25D0: E8 4D 0C 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14  // .M.f...f.F.Y].N.
    25E0: 8C D0 66 C1 E0 10 8B C4 BB 31 00 E8 C0 07 83 C4  // ..f......1......
    25F0: 18 C3 E8 24 ED 8D 9C D0 02 E8 24 0C 8A E8 BB 21  // ...$......$....!
    2600: 00 E8 70 FF C3 8D 9C 3C 03 E8 14 0C 8A F8 E8 EE  // ..p....<........
    2610: EC 8A DD 53 8D 9C 42 03 E8 05 0C 8A E8 5B E8 F8  // ...S..B......[..
    2620: EC E8 95 ED E8 07 05 75 02 B3 01 83 EC 04 8B EC  // .......u........
    2630: 88 4E 00 88 7E 01 88 5E 02 88 6E 03 8C D0 66 C1  // .N..~..^..n...f.
    2640: E0 10 8B C4 BB 2A 00 E8 64 07 83 C4 04 C3 83 EC  // .....*..d.......
    2650: 10 8B EC 66 8B C8 66 33 C0 66 89 46 04 BB 00 17  // ...f..f3.f.F....
    2660: E8 1D 0B 66 B8 00 80 20 50 66 89 46 0C 66 33 C0  // ...f... Pf.F.f3.
    2670: 66 89 46 08 56 E8 11 07 66 8B 44 04 66 50 66 C1  // f.F.V...f.D.fPf.
    2680: E8 16 88 46 08 66 58 66 C1 E0 0A 66 05 00 17 00  // ...F.fXf...f....
    2690: 00 66 89 46 00 5E 8C D0 66 C1 E0 10 8B C4 BB 35  // .f.F.^..f......5
    26A0: 00 E8 0A 07 8B EC 66 B8 00 80 00 00 66 2B C8 66  // ......f.....f+.f
    26B0: 89 46 04 66 05 00 00 20 40 66 89 46 0C 66 33 C0  // .F.f... @f.F.f3.
    26C0: 66 89 46 08 66 89 46 00 8C D0 66 C1 E0 10 8B C4  // f.F.f.F...f.....
    26D0: BB 35 00 E8 D8 06 8B EC 66 8B 46 0C 66 25 FF FF  // .5......f.F.f%..
    26E0: 1F 00 66 01 46 04 66 3B C8 76 1F 66 2B C8 66 8B  // ..f.F.f;.v.f+.f.
    26F0: 46 04 66 3D 00 FF 01 00 76 06 66 B8 00 FF 01 00  // F.f=....v.f.....
    2700: 66 3B C8 73 AE 66 8B C1 EB A9 83 C4 10 C3 83 EC  // f;.s.f..........
    2710: 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66  // ....N.f.V..^...f
    2720: C1 E0 10 8B C4 BB 2D 00 E8 83 06 83 C4 08 C3 3D  // ......-........=
    2730: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8  // ..v.......?$..Q.
    2740: DE 0A 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 D1 0A 03  // ..f3............
    2750: C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27  // .f%....Y=.'s...'
    2760: C3 32 D2 C3 80 FD 02 75 19 E8 9D EC 66 BB 00 08  // .2.....u....f...
    2770: 00 00 E8 8E 00 66 33 D2 66 BB 01 08 00 00 E8 82  // .....f3.f.......
    2780: 00 C3 80 FD 03 75 10 66 33 C0 8A C1 66 33 D2 66  // .....u.f3...f3.f
    2790: BB FF 00 00 00 EB 36 51 33 D2 E8 62 EB 8A D5 66  // ......6Q3..b...f
    27A0: C1 E2 10 E8 93 EB 8A F2 8A D1 66 8B C2 66 0D 00  // ..........f..f..
    27B0: 00 00 80 E8 CE EB 80 FB 04 76 06 66 0D 00 00 00  // .........v.f....
    27C0: 08 E8 02 EC E8 52 EB 66 33 DB 8A D9 59 83 EC 14  // .....R.f3...Y...
    27D0: 8B EC 66 89 46 04 66 89 5E 08 66 8B C2 66 33 D2  // ..f.F.f.^.f..f3.
    27E0: 66 BB 64 00 00 00 66 F7 E3 66 89 46 00 BB 0C 00  // f.d...f..f.F....
    27F0: 8C D0 66 C1 E0 10 8B C4 E8 B3 05 8B EC B3 01 83  // ..f.............
    2800: C4 14 C3 83 EC 10 8B EC 66 89 56 00 66 89 5E 04  // ........f.V.f.^.
    2810: BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8 90 05 B3 01  // .....f..........
    2820: 83 C4 10 C3 C3 53 51 66 50 B9 A0 8C 80 FB 00 75  // .....SQfP......u
    2830: 1C B9 90 7E E8 0E 05 83 E3 03 80 FB 03 75 0E E8  // ...~.........u..
    2840: E4 05 66 3D 50 C3 00 00 72 03 B9 F0 D2 66 33 D2  // ..f=P...r....f3.
    2850: 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00 00  // ..fXY[.fR..f....
    2860: FF FF 75 13 80 FD 13 74 0E 80 FD 14 74 09 B3 01  // ..u....t....t...
    2870: 80 FD 0E 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74  // ...t...fZ.....#t
    2880: 07 80 FA 22 74 02 B5 00 C3 B5 02 C3 B1 01 80 FD  // ..."t...........
    2890: 00 75 06 C7 46 00 0B 01 C3 50 33 C0 E8 79 01 04  // .u..F....P3..y..
    28A0: 14 89 46 00 58 C3 C3 C3 0C 01 C3 E8 72 09 66 C1  // ..F.X.......r.f.
    28B0: E8 10 0B C0 74 1A 53 83 C3 06 E8 63 09 5B 3D E0  // ....t.S....c.[=.
    28C0: 01 72 0D 53 83 C3 18 E8 56 09 5B A9 10 00 74 03  // .r.S....V.[...t.
    28D0: 32 C0 C3 0C 01 C3 B5 0C C3 32 ED B5 02 C3 57 E8  // 2........2....W.
    28E0: 01 01 8B 4D 06 5F C3 80 FA 22 75 05 C7 46 00 78  // ...M._..."u..F.x
    28F0: 69 C3 C3 E8 04 01 80 FD FF 74 35 83 EC 0C 8B EC  // i........t5.....
    2900: 88 4E 01 88 6E 00 80 F9 0F 75 05 E8 24 00 EB 0F  // .N..n....u..$...
    2910: 80 F9 10 75 0A 8D 9C 48 03 E8 04 09 88 46 02 8C  // ...u...H.....F..
    2920: D0 66 C1 E0 10 8B C4 BB 04 00 E8 81 04 83 C4 0C  // .f..............
    2930: C3 C3 66 53 E8 2D EA 66 8B C2 66 33 D2 66 BB 8C  // ..fS.-.f..f3.f..
    2940: 0A 00 00 66 F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40  // ...f..f[...n...@
    2950: 03 E8 CC 08 88 46 02 88 66 03 66 C1 E8 10 88 46  // .....F..f.f....F
    2960: 08 E8 EF E9 66 89 56 04 C3 80 F9 04 74 03 E8 C8  // ....f.V.....t...
    2970: E9 83 EC 10 8B EC 80 F9 04 75 0A 88 4E 01 32 C0  // .........u..N.2.
    2980: 88 46 00 EB 4C E8 90 00 88 46 00 88 4E 01 E8 28  // .F..L....F..N..(
    2990: EA 88 56 0A 80 F9 01 74 11 80 F9 0B 75 33 8D 9C  // ..V....t....u3..
    29A0: 5C 03 E8 7B 08 88 46 02 EB 27 E8 C8 E9 88 6E 08  // \..{..F..'....n.
    29B0: E8 A0 E9 66 89 56 04 E8 CA E9 88 5E 03 E8 3F E9  // ...f.V.....^..?.
    29C0: 88 6E 02 51 E8 33 00 8A CD B0 01 D2 E0 59 88 46  // .n.Q.3.......Y.F
    29D0: 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 CF 03 83  // ...f......L.....
    29E0: C4 10 C3 E8 AC 03 03 7D 04 83 3D FF 74 0B 3B 15  // .......}..=.t.;.
    29F0: 74 05 83 C7 0A EB F2 0B FF C3 8D 9C 3C 03 E8 1F  // t...........<...
    2A00: 08 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E 77 05 2C  // .2.<.t.<.r.<.w.,
    2A10: 08 8A E8 C3 B5 FF C3 C3 52 32 C0 80 EE 21 80 FA  // ........R2...!..
    2A20: 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80 FA 21 74  // .t..... t.....!t
    2A30: 02 B0 06 02 C6 5A C3 83 EC 08 8B EC 89 7E 00 89  // .....Z.......~..
    2A40: 5E 02 89 56 04 89 4E 06 8C D0 66 C1 E0 10 8B C4  // ^..V..N...f.....
    2A50: BB 36 00 E8 58 03 8B EC 8B 5E 02 8A 7E 01 83 C4  // .6..X....^..~...
    2A60: 08 C3 56 33 F6 66 F7 C2 00 00 80 00 75 0A 50 33  // ..V3.f......u.P3
    2A70: C0 8A C6 8B F0 32 F6 58 53 BB 04 3E E8 01 07 66  // .....2.XS..>...f
    2A80: 8B C2 BB 00 3E E8 F8 06 5B 66 F7 C2 00 00 10 00  // ....>...[f......
    2A90: 75 02 33 DB 8B D3 66 C1 E2 10 BA 00 3E 83 EC 08  // u.3...f.....>...
    2AA0: 8B EC 66 89 56 00 88 4E 04 8A C5 FE C8 88 46 07  // ..f.V..N......F.
    2AB0: C6 46 05 00 C6 46 06 00 8C D0 66 C1 E0 10 8B C4  // .F...F....f.....
    2AC0: BB 4E 00 E8 E8 02 8B EC 8A 5E 05 8A 7E 06 83 C4  // .N.......^..~...
    2AD0: 08 0A DB 74 32 51 B9 90 01 80 FB 20 74 05 80 FB  // ...t2Q..... t...
    2AE0: 80 75 13 B9 0A 00 8B C6 0A C0 74 0A B9 90 01 3C  // .u........t....<
    2AF0: 01 74 03 B9 E8 03 E8 B2 03 59 8B C6 FE C4 8B F0  // .t.......Y......
    2B00: 80 FC 06 76 98 0A DB 5E C3 8D 5C 04 E8 11 07 8B  // ...v...^..\.....
    2B10: D0 B5 02 E8 14 00 74 11 B5 01 80 FA 13 75 0A E8  // ......t......u..
    2B20: 61 00 80 FA 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9  // a....u..........
    2B30: FF 74 03 80 FA 0E C3 80 FA 05 C3 80 FA 02 74 03  // .t............t.
    2B40: 80 FA 04 C3 80 FA 01 74 03 80 FA 02 C3 80 FA 02  // .......t........
    2B50: 75 03 B2 01 C3 80 FA 04 75 03 B2 03 C3 C3 B5 08  // u.......u.......
    2B60: E8 D8 FF 74 02 B5 04 C3 8D 5C 09 E8 B2 06 8A C8  // ...t.....\......
    2B70: 0A C9 75 03 32 C0 C3 B5 02 E8 B4 02 8A C5 24 02  // ..u.2.........$.
    2B80: D0 E8 C3 8D 5C 08 E8 97 06 8A D0 B6 01 83 EC 08  // ....\...........
    2B90: 8B EC 89 56 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00  // ...V...f......O.
    2BA0: E8 0B 02 8B EC 8A 56 04 83 C4 08 C3 53 81 C3 C9  // ......V.....S...
    2BB0: 05 E8 3A 06 5B C3 53 81 C3 C9 05 E8 8B 05 5B C3  // ..:.[.S.......[.
    2BC0: 66 53 81 C3 00 10 E8 25 06 66 5B C3 57 E8 82 01  // fS.....%.f[.W...
    2BD0: 8A 45 2D B4 FF F7 45 50 20 00 5F C3 50 56 0F BC  // .E-...EP ._.PV..
    2BE0: D8 8D 36 83 2B E8 63 03 5E 58 C3 00 20 00 24 00  // ..6.+.c.^X.. .$.
    2BF0: 00 00 28 00 2C 00 30 00 34 00 38 00 00 00 3C 00  // ..(.,.0.4.8...<.
    2C00: 40 00 44 53 56 51 8B F7 B3 00 E8 30 00 0B F6 74  // @.DSVQ.....0...t
    2C10: 16 49 0B C9 75 04 33 FF EB 0D 8B DF 03 7D 02 3B  // .I..u.3......}.;
    2C20: F3 74 04 E2 F5 33 FF 0B FF 59 5E 5B C3 0E 00 00  // .t...3...Y^[....
    2C30: 00 0A 00 06 00 08 00 0C 00 0E 00 10 00 56 8D 36  // .............V.6
    2C40: C5 2B E8 06 03 E8 13 01 03 DE 8B 3F 0B FF 74 0B  // .+.........?..t.
    2C50: 03 FE 33 C9 8A 0D 83 C7 04 0B FF 5E C3 51 56 53  // ..3........^.QVS
    2C60: C1 EB 0C E8 D7 FF 5B 75 04 33 FF EB 0B 3B 1D 74  // ......[u.3...;.t
    2C70: 07 83 C7 08 E2 F7 33 FF 0B FF 5E 59 C3 57 E8 DC  // ......3...^Y.W..
    2C80: FF 75 04 33 DB 5F C3 E8 02 00 5F C3 52 51 8B 5D  // .u.3._...._.RQ.]
    2C90: 04 0B DB 74 1B 56 E8 C2 00 03 DE 5E 33 C9 8A 4F  // ...t.V.....^3..O
    2CA0: 01 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB  // ..?.t.:.t.....3.
    2CB0: 0B DB 59 5A C3 50 8D 1C E8 C5 04 8B D8 E8 72 00  // ..YZ.P........r.
    2CC0: 23 C3 74 6C 33 FF E8 3A FF 0B FF 74 63 39 05 75  // #.tl3..:...tc9.u
    2CD0: F5 66 33 C0 8B 45 08 8B 4D 02 83 F9 0A 74 18 8B  // .f3..E..M....t..
    2CE0: 4D 0A 8B D1 81 E2 00 70 80 FE 20 75 0A 66 C1 C8  // M......p.. u.f..
    2CF0: 10 8B C1 66 C1 C8 10 8D 5C 0C E8 83 04 66 33 C0  // ...f....\....f3.
    2D00: 8B 45 04 8D 5C 04 E8 77 04 33 C9 8B D8 50 B0 01  // .E..\..w.3...P..
    2D10: E8 6A FF 58 74 0F 8A 4F 02 8B D8 B0 02 E8 5D FF  // .j.Xt..O......].
    2D20: 74 03 8A 6F 02 8D 5C 08 66 33 C0 8B C1 E8 50 04  // t..o..\.f3....P.
    2D30: 58 C3 56 E8 25 00 8B 44 04 5E C3 56 E8 1C 00 89  // X.V.%..D.^.V....
    2D40: 44 04 5E C3 C3 8B DA B0 14 E8 31 FF 74 03 8B 5F  // D.^.......1.t.._
    2D50: 02 C3 BF 4C 02 8B 3D 8B 7D 0C C3 BE 4C 02 8B 34  // ...L..=.}...L..4
    2D60: 8B 74 30 C3 1E 0E 1F BF 4C 02 8B 3D 8B 7D 0E 83  // .t0.....L..=.}..
    2D70: C7 04 1F C3 BE 4C 02 8B 34 8B 74 10 C3 BF 4C 02  // .....L..4.t...L.
    2D80: 8B 3D 8B 7D 26 83 C7 04 C3 BE 4C 02 8B 34 8B 74  // .=.}&.....L..4.t
    2D90: 1A C3 BF 4C 02 8B 3D 8B 7D 3A C3 BF 4C 02 8B 3D  // ...L..=.}:..L..=
    2DA0: 8B 7D 0A 83 C7 04 B9 08 00 C3 E8 01 00 CB 83 EC  // .}..............
    2DB0: 06 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02  // ....F.f3..F...F.
    2DC0: 06 52 8A D3 8B C5 E8 7F 16 5A 07 83 C4 06 C3 E8  // .R.......Z......
    2DD0: 80 FF F7 45 50 01 00 C3 E8 77 FF 83 4D 50 01 C3  // ...EP....w..MP..
    2DE0: E8 6F FF 88 45 58 C3 66 53 83 EC 28 8B EC 66 89  // .o..EX.fS..(..f.
    2DF0: 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00  // ^.f.N...f.......
    2E00: 00 E8 AA FF 83 C4 28 66 5B E8 48 01 BB 04 00 E8  // ......(f[.H.....
    2E10: 9A FD 66 C1 E8 10 E8 C7 FF C3 E8 35 FF 66 8B 5D  // ..f........5.f.]
    2E20: 08 66 8B 4D 0C C3 57 E8 28 FF 66 8B 45 28 5F C3  // .f.M..W.(.f.E(_.
    2E30: 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4  // ......N...f.....
    2E40: BB 38 00 E8 68 FF 8B EC 8A 6E 02 83 C4 04 C3 C3  // .8..h....n......
    2E50: B0 06 C3 B0 02 C3 B0 06 C3 B0 08 C3 E8 F3 FE 8B  // ................
    2E60: 45 56 0B C0 C3 53 66 50 66 33 C0 E8 12 03 83 C3  // EV...SfPf3......
    2E70: 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 A2 03 66 C1  // ...fX[.2......f.
    2E80: CB 10 E8 FB 02 66 C1 CB 10 66 81 C3 04 00 04 00  // .....f...f......
    2E90: E2 E9 C3 FC 66 AD E8 E7 02 83 C3 04 E2 F6 C3 FC  // ....f...........
    2EA0: E8 7D 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 19 00  // .}.f.......fP...
    2EB0: E8 10 00 66 58 C3 66 50 B8 D4 30 D1 E1 E8 03 00  // ...fX.fP..0.....
    2EC0: 66 58 C3 52 F7 E1 8B CA E8 63 01 66 53 8B D9 66  // fX.R.....c.fS..f
    2ED0: C1 E3 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2  // .....f.......f..
    2EE0: 04 66 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF  // .f3.f.f.......f.
    2EF0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    2F00: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    2F10: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8  // ;.r.....f[Z..B..
    2F20: CC 02 66 33 D2 66 BB 19 00 00 00 66 F7 F3 C3 66  // ..f3.f.....f...f
    2F30: 50 53 BB 07 00 E8 74 FC 25 00 02 35 00 02 0B C0  // PS....t.%..5....
    2F40: 5B 66 58 C3 BB 0A 15 E8 A4 02 C3 32 FF D1 E3 03  // [fX........2....
    2F50: F3 8B 1C C3 E8 ED FF 66 C1 E0 0A 66 83 E8 20 E8  // .......f...f.. .
    2F60: 27 FE 66 89 44 04 C7 44 08 20 00 C3 56 1E 0E 1F  // '.f.D..D. ..V...
    2F70: E8 16 FE 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 56  // ...f.D.f....^..V
    2F80: E8 F1 FD 8B 4C 22 8A 44 29 5E C3 BE 4C 02 8B 34  // ....L".D)^..L..4
    2F90: 8B 74 1E 83 C6 04 B9 1C 00 C3 33 FF C3 56 E8 D3  // .t........3..V..
    2FA0: FD 8A 6C 28 80 E5 70 C0 ED 04 5E C3 56 E8 C4 FD  // ..l(..p...^.V...
    2FB0: 53 81 C3 09 01 E8 68 02 8A E8 5B 53 81 C3 00 01  // S.....h...[S....
    2FC0: E8 5D 02 5B 8A C5 66 89 44 3C 5E C3 56 E8 A4 FD  // .].[..f.D<^.V...
    2FD0: 66 8B 44 3C 53 81 C3 00 01 E8 A4 01 5B 53 81 C3  // f.D<S.......[S..
    2FE0: 08 01 B1 01 8A E8 E8 DB 01 5B 5E C3 56 E8 84 FD  // .........[^.V...
    2FF0: 8B FE 83 C7 04 5E C3 56 E8 79 FD 8A 44 28 80 FD  // .....^.V.y..D(..
    3000: 00 74 0E 24 8F C0 E5 04 0A C5 80 FD 20 75 02 0C  // .t.$........ u..
    3010: 02 24 FE 81 7C 04 34 21 76 02 0C 01 88 44 28 E8  // .$..|.4!v....D(.
    3020: 08 FB 75 04 80 4C 30 01 5E C3 32 C0 C3 00 66 50  // ..u..L0.^.2...fP
    3030: 8C C8 3D 00 C0 75 10 BA C3 03 EC 8A F0 0A F6 74  // ..=..u.........t
    3040: 06 B2 4C 66 ED EB 17 53 2E 8B 1E 40 02 B2 20 E8  // ..Lf...S...@.. .
    3050: DD 00 A8 01 75 05 B2 14 E8 D4 00 8A F4 5B 32 D2  // ....u........[2.
    3060: 66 58 C3 2E 8B 1E 40 02 C3 0B C9 75 1A 4B 74 16  // fX....@....u.Kt.
    3070: 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3  // C;.w.....+......
    3080: 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77  // ....+..;.r.u.;.w
    3090: 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B  // .+...+.+.....+.+
    30A0: DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72  // .....UV+.......r
    30B0: 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D  // .E;.r.w.;.v....M
    30C0: 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D  // x ....+....r...M
    30D0: 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3  // x.........s.....
    30E0: 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92  // ........3.^]..P.
    30F0: 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58  // ..t......t.....X
    3100: F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10  // .....RfP....f...
    3110: 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52  // ....$....f.fXZ.R
    3120: BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8  // ...f.Z.R...f.Z..
    3130: 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C  // 1............$..
    3140: FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06  // .........RfSfP..
    3150: 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8  // .fXf[Z.f...f....
    3160: CC FE E8 71 01 C3 66 50 66 C1 E3 10 66 C1 EB 10  // ...q..fPf...f...
    3170: E8 F9 FD 66 03 D8 66 81 CB 00 00 00 80 66 58 C3  // ...f..f......fX.
    3180: 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 9F FE E8  // RfS...f[Z.fP....
    3190: D4 FF E8 41 01 66 58 C3 52 51 66 53 66 50 8A CB  // ...A.fX.RQfSfP..
    31A0: 80 E3 FC 80 E1 03 C0 E1 03 E8 82 FE E8 B7 FF E8  // ................
    31B0: 0B 01 66 D3 C8 58 50 66 D3 C0 E8 19 01 66 58 66  // ..f..XPf.....fXf
    31C0: 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8  // [YZ.fPQ....S.f..
    31D0: 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0  // ..f.....YfX.fPQ.
    31E0: E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F  // ...;.f..Y..fX.._
    31F0: 00 C3 E8 39 FE 66 C1 E3 10 66 C1 EB 0E E8 BD 00  // ...9.f...f......
    3200: C3 E8 2A FE 66 C1 E3 02 E8 B2 00 C3 52 66 53 E8  // ..*.f.......RfS.
    3210: 04 00 66 5B 5A C3 E8 15 FE E8 4A FF E8 9E 00 C3  // ..f[Z.....J.....
    3220: 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC  // QfR.............
    3230: E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB  // ......t.f.......
    3240: FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3  // ....f.f.....fZY.
    3250: 52 66 53 E8 9C FF 66 5B 5A C3 52 E8 A3 FF 5A C3  // RfS...f[Z.R...Z.
    3260: 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 BD  // fPURfP...V..V...
    3270: FD 2E A1 95 02 B2 18 EF B2 00 66 ED 66 89 46 0A  // ..........f.f.F.
    3280: 66 58 5A 5D C3 66 50 55 52 8B EC E8 A0 FD B2 00  // fXZ].fPUR.......
    3290: 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04  // f.F.f..V..V.f.F.
    32A0: 66 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8 7D  // f.F.Z]fXfX.fPR.}
    32B0: FD B2 18 66 ED 2E A3 95 02 5A 66 58 C3 66 81 FB  // ...f.....ZfX.f..
    32C0: FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66  // ....w.....f....f
    32D0: EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A  // ...f..f......w..
    32E0: D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3  // ...f...f.f...f..
    32F0: C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B EC 53 51 8B  // ..........U..SQ.
    3300: F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC 59  // .&.\.&.L..(..f.Y
    3310: 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14 00  // [].SQ..&.\$3....
    3320: 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26 8B  // Y[.U..SQ..&.\.&.
    3330: 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E FE  // L...RVW.......N.
    3340: 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20 00  // ....&.|&.E.2.. .
    3350: 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A  // +...............
    3360: 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7 D0  // M.2.............
    3370: F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26 8B  // ..&!D.&!|.....&.
    3380: 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66 C7  // |&.M.2.. .+...f.
    3390: 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2 F8  // F........n..^...
    33A0: 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1 D8  // .M.2....V.......
    33B0: E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06 D1  // ..#F.#V..M.2....
    33C0: E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F 5E  // .....&.D.&.T.._^
    33D0: 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F 26  // Z.U..SQRWP..&..&
    33E0: 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3  // .E.2.. .+.......
    33F0: 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46 F7  // ........M..N..F.
    3400: 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26 09  // ....N.........&.
    3410: 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53 51  // G.&....f._Z...SQ
    3420: 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01 32  // RW......&.w&.L.2
    3430: ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06 D1  // .. .+...........
    3440: EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B C6  // .....&..&.M.2...
    3450: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 1C  // ............&!G.
    3460: 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E C2  // &!W._...SV......
    3470: 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A 44  // &.w&.<.ts.<.uX.D
    3480: 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75 46  // .2.&....uL&;G.uF
    3490: 8A 04 6B F0 03 8A 84 44 95 26 01 47 26 8C D0 8E  // ..k....D.&.G&...
    34A0: C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B F0  // .&.w&.<.t...2.k.
    34B0: 03 8B C3 FF 94 42 95 26 8B 77 26 8A 04 32 E4 EB  // .....B.&.w&..2..
    34C0: D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47 1C  // ..D.&)G&&.G&&.G.
    34D0: 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B F0  // &.w...&.w&..2.k.
    34E0: 03 8A 84 44 95 26 01 47 26 E9 80 FF 33 C0 33 F6  // ...D.&.G&...3.3.
    34F0: 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26 8B  // ..^[.SQRV...w5&.
    3500: 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26 8B  // T.&.W.&.G.....&.
    3510: 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E C1  // G 3.&.G.&.T.....
    3520: 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75 22  // &.G/.....&..4.u"
    3530: 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26 D1  // &.w.&.w.u.&.g.&.
    3540: 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11 E9  // W.&.g.&.W....y..
    3550: E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47 1C  // ..&.G42.....&.G.
    3560: 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B D8  // &.W.........SV..
    3570: 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37 26  // .w5&.D.2....&.7&
    3580: 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04 26  // .4..&.G.&._.&..&
    3590: 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77 35  // .\.^[.SRV.....w5
    35A0: 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02 32  // ..&.T...@s!&.w.2
    35B0: F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26 8B  // ....&.t...&.W.&.
    35C0: 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41 75  // G.&..&.D......Au
    35D0: 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89 57  // .&.G.&.W.&.G.&.W
    35E0: 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57 0A  // ..h..@u.&.G.&.W.
    35F0: 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A 26  // &.G.&.W..Q..Bu.&
    3600: 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26 8A  // .G.&.G".B..Cu.&.
    3610: 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B 57  // G.&.G3.3..Fu.&.W
    3620: 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C 80  // .&.G.&.W.&.G....
    3630: FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80 FA  // .Gu.&.G.&.G$....
    3640: 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3 53  // Hu.&.G.&.G ^Z[.S
    3650: 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47 14  // V...w5&.D.2.&.G.
    3660: 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B 77  // &.G...^[.SV..&.w
    3670: 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7 47  // .&.t...2.&.G.&.G
    3680: 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53 56  // ...&._.&.G.^[.SV
    3690: 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77 14  // ..&.w.&.t..4&.w.
    36A0: 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02 5E  // &.G...&._.&.G..^
    36B0: 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 04  // [.SV..&.w.&.t...
    36C0: 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02 26  // .t.&.G.&.w.&._.&
    36D0: 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF 8B  // .G..^[.SRV...p..
    36E0: F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1  // .&.G.&.W........
    36F0: D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9 4A  // .&.G.&.T....+..J
    3700: FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53 8B  // .S..&._.&.G.[.S.
    3710: D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B D8  // .&._.&.G..[.SV..
    3720: E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14 26  // .k...&.W 3.&.W.&
    3730: 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4 06  // .D.....&.G.2....
    3740: 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47 2E  // =..u.2.3.^[.&.G.
    3750: 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00 75  // 2....=..t.&..4.u
    3760: 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4 26  // ..../.^[.&.G42.&
    3770: 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E 5B  // .G.&.G........^[
    3780: C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26 8B  // .S.....&.G....&.
    3790: 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3 A5  // .&....&..&.W.[..
    37A0: 37 9A 37 B0 37 FF 37 B6 37 CE 37 E8 37 F3 37 F9  // 7.7.7.7.7.7.7.7.
    37B0: 37 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83 7F  // 7SQV.........&..
    37C0: 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02 26  // ..u"&...@s.&.w.&
    37D0: 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07 26  // ._....&.D...&..&
    37E0: 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83 C6  // .W..{.&.w.&.G...
    37F0: C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF A4  // ....uq...wl.....
    3800: 37 37 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B 47  // 77&.G.&.W..T.&.G
    3810: 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26 8A  // .&.W..I.&.G".K&.
    3820: 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2 E2  // O32....3........
    3830: FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00 33  // ....+.&.O32....3
    3840: D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11 05  // ................
    3850: 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24 EB  // &.G.&.W....&.G$.
    3860: 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53 56  // .&.G ..3.3....SV
    3870: 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A D1  // .......&.G.&.W..
    3880: EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B  // .......&.G.&.T..
    3890: C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B D8  // ....^[.3.3..SV..
    38A0: E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54 02  // ...&.w.&.w"...T.
    38B0: 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26 8B  // ^[.S..&.G+....&.
    38C0: 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B 01  // G.&.W.[.S..&.G+.
    38D0: E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2 FD  // .....S..&.G+....
    38E0: EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03 80  // ..S....5&._.....
    38F0: E3 07 32 FF 03 DB FF 97 D2 94 5B C3 53 52 56 8B  // ..2.......[.SRV.
    3900: D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE  // .&.G,2..........
    3910: 94 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4 8B  // .&.G.&.W.&.G-2..
    3920: F0 03 F0 8B C3 FF 94 06 95 26 89 47 04 26 89 57  // .........&.G.&.W
    3930: 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B  // ....SQV..&.O+2..
    3940: F1 8A 8C 36 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...6...&.o.&._..
    3950: F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 16 95  // .&.O+2..........
    3960: 8B B4 18 95 26 21 4F 04 26 21 77 06 26 8A 4F 2A  // ....&!O.&!w.&.O*
    3970: 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1 67 04 26 D1  // 2.....>...&.g.&.
    3980: 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F 14  // W...&.O.&.w.&.O.
    3990: 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C D0  // &.w....SQRVW....
    39A0: 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47  // ..&.G+2......&.G
    39B0: 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16 95 8B 94 18  // *....>.2........
    39C0: 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    39D0: 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 3E  // .&!W.&.G*2.....>
    39E0: 95 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .2...&.o.&._...&
    39F0: 8A 47 2B 8B F0 C1 E6 02 8B 84 16 95 8B 94 18 95  // .G+.............
    3A00: 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    3A10: 8A 8C 3E 95 32 ED E3 0A 26 D1 67 08 26 D1 57 0A  // ..>.2...&.g.&.W.
    3A20: E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    3A30: 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A 4F  // W._^ZY[.SQV..&.O
    3A40: 2B 32 ED 8B F1 8A 8C 36 95 E3 0A 26 D1 6F 06 26  // +2.....6...&.o.&
    3A50: D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02  // ._...&.O+2......
    3A60: 8B 8C 16 95 8B B4 18 95 26 21 4F 04 26 21 77 06  // ........&!O.&!w.
    3A70: 26 8A 4F 2A 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1  // &.O*2.....>...&.
    3A80: 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    3A90: C1 E6 02 8B 8C 16 95 8B B4 18 95 26 21 4F 08 26  // ...........&!O.&
    3AA0: 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0 26  // !w....QRW......&
    3AB0: 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03 F0  // ..+.t.&.G,2.....
    3AC0: 8B C3 FF 94 EE 94 26 89 47 08 26 89 57 0A EB 10  // ......&.G.&.W...
    3AD0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FA 94  // &.G,2...........
    3AE0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 06 95  // &.G-2...........
    3AF0: 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F 2B  // &.G.&.W.....&..+
    3B00: 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // .tJ&.G+2......&.
    3B10: 47 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16 95 8B 94  // G*....>.2.......
    3B20: 18 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    3B30: 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04 26  // G.&!W......&.G.&
    3B40: 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B 57  // .W.&.G.&.W...&.W
    3B50: 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A 47  // .&.G.&.W.&.G.&.G
    3B60: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 5F 5A 59  // ,2..........._ZY
    3B70: C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B F0  // .SQRVW..&.G*2...
    3B80: 8A 8C 3E 95 32 ED E3 0A 26 D1 67 04 26 D1 57 06  // ..>.2...&.g.&.W.
    3B90: E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6  // ......&.G+2.....
    3BA0: 02 26 8A 47 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16  // .&.G*....>.2....
    3BB0: 95 8B 94 18 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ................
    3BC0: D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B 57  // .&.G.&.W.&.G.&.W
    3BD0: 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC 51  // .&!G.&!W..V.U..Q
    3BE0: 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // RP..&.G,2.......
    3BF0: FF 94 EE 94 26 89 47 08 26 89 57 0A 26 8A 47 2B  // ....&.G.&.W.&.G+
    3C00: 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57 06  // .F......&.G.&.W.
    3C10: 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 06 95  // &.O-2...........
    3C20: 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46 FA  // &.G.&.W....D..F.
    3C30: 32 E4 8B F0 8A 8C 36 95 E3 0A 26 D1 6F 16 26 D1  // 2.....6...&.o.&.
    3C40: 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02 8B  // _...&.W+2.......
    3C50: 84 16 95 8B 94 18 95 26 21 47 14 26 21 57 16 26  // .......&!G.&!W.&
    3C60: 8A 47 2A 32 E4 8B F0 8A 8C 3E 95 32 ED E3 0A 26  // .G*2.....>.2...&
    3C70: D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    3C80: 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4 8B  // .&.G.&.W.&.G,2..
    3C90: F0 03 F0 8B C3 FF 94 E2 94 8D 66 FC 5A 59 5D C3  // ..........f.ZY].
    3CA0: 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A 8C  // Q...V.&.O+2.....
    3CB0: 36 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B C3  // 6...&.o.&._.....
    3CC0: E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF  // ...&.O,2........
    3CD0: 94 E2 94 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC 26  // ...Y...."....U.&
    3CE0: 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A 26  // .G.&.w.&.G.&.w.&
    3CF0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 C3  // .G,2............
    3D00: 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47 04  // SV........(.&.G.
    3D10: 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47 2C  // &.w.&1G.&1w.&.G,
    3D20: 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 5E 5B C3 53  // 2...........^[.S
    3D30: 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F 04  // QV..........&.O.
    3D40: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8 46  // ..&.g.&.W......F
    3D50: FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 E2  // .&.O,2..........
    3D60: 94 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3 E8  // .^Y[.SQV........
    3D70: C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08  // ..&.O...&.o.&._.
    3D80: E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B  // ....R...r.......
    3D90: F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11 54  // .&.G.&.W.&.G.&.T
    3DA0: 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03 F0  // ......&.G,2.....
    3DB0: 8B C3 FF 94 E2 94 5A C3 52 8B D8 E8 3E FB 8B C3  // ......Z.R...>...
    3DC0: E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29 47  // .q...&.G.&.W.&)G
    3DD0: 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B C6  // .&.T...QR.......
    3DE0: E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26  // .U.&.D.&.T.&.\.&
    3DF0: 8B 4C 06 E8 F7 F2 26 89 44 0C 26 89 54 0E 5A 59  // .L....&.D.&.T.ZY
    3E00: C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8 5C  // .R........,....\
    3E10: 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18 FC  // .Z.QRW..........
    3E20: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    3E30: E8 36 F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26  // .6.&.D.&.T.....&
    3E40: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    3E50: 17 F2 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B D0  // ..&.\.&.L....R..
    3E60: E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3 51  // .............Z.Q
    3E70: 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1 26  // R..............&
    3E80: 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B 47  // .G.&.W.&;W.u.&;G
    3E90: 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B 47  // .u.&.G0.ZY...&.G
    3EA0: 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04 33  // .&;G.r.u.&;W.s.3
    3EB0: C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52 57  // ......&.G0ZY.QRW
    3EC0: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    3ED0: EE 94 26 89 47 08 26 89 57 0A 8C D0 8E C0 26 8A  // ..&.G.&.W.....&.
    3EE0: 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 36 95 32  // G+2..........6.2
    3EF0: ED 8B 84 16 95 8B 94 18 95 E3 06 D1 E0 D1 D2 E2  // ................
    3F00: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D FC  // .....&!G.&!W..M.
    3F10: 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B 32  // U..QRW.....&.G+2
    3F20: E4 8B F0 C1 E6 02 8B F8 8A 8D 36 95 32 ED 8B 84  // ..........6.2...
    3F30: 16 95 89 46 F4 8B 84 18 95 89 46 F6 E3 08 D1 66  // ...F......F....f
    3F40: F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26  // ..V....~..F..F.&
    3F50: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE 94 26  // .G,2...........&
    3F60: 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47 04  // .G.&.W....G.&.G.
    3F70: 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47  // &.W......V...&#G
    3F80: 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21 7F  // .&#W.&.G.&.W.&!.
    3F90: 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1 26  // ..F.&!G....w5..&
    3FA0: 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08 26  // .<.s.&.O...&.g.&
    3FB0: D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F  // .W.....&.O...&.o
    3FC0: 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26 21  // .&._...&!...F.&!
    3FD0: 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26 09  // G.&.W.&.G.&.W.&.
    3FE0: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3FF0: E2 94 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8 8B  // ...f._...R......
    4000: C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57 06  // ..4.&.G.&.W.&.W.
    4010: 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01 00  // u.&.G.t.........
    4020: 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F 2D  // &.G0Z.SQRV..&.O-
    4030: 32 ED 8B F1 03 F1 FF 94 06 95 26 89 47 04 26 89  // 2.........&.G.&.
    4040: 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 36 95 E3 0A  // W.&.G+2.....6...
    4050: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0  // &.o.&._...&.G+..
    4060: C1 E6 02 8B 84 16 95 8B 94 18 95 26 21 47 04 26  // ...........&!G.&
    4070: 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47 04  // !W....R.....&.G.
    4080: 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51 52  // &.W.&.G.&.W.Z.QR
    4090: 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B 74  // .........&.w.&.t
    40A0: 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02 80  // ..<ZZt[&.w.&.t..
    40B0: 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8 21  // <cu.&.w.&.D....!
    40C0: F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26 89  // .&.G.&.W......&.
    40D0: 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26 8B  // G.&.W.....&.W.&.
    40E0: 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26 8B  // G.&;G.u.&;W.u.&.
    40F0: 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02 5A  // w.&..&.G...&.G.Z
    4100: 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52 57  // Y.&._.&.G..ZY.RW
    4110: 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A 54  // ......&.w.&.t..T
    4120: 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA FF  // ...u.&.G".../...
    4130: 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75 02  // u.&.w.&.?&.4&+u.
    4140: 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A C2  // &.w"..&.........
    4150: 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F 02  // 2.......&.G"&._.
    4160: 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9 26  // &.G.._Z...&.g/.&
    4170: 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26 8B  // .w.&.t..D.&.G4&.
    4180: 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26 8B  // _.&.G.....&.w.&.
    4190: 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26 8A  // t..t.&.w ..S..&.
    41A0: 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26 09  // G,2.$.&.g/....&.
    41B0: 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02 8A  // G..O...&.w.&.t..
    41C0: 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3  // D.2.&.G.&.G.....
    41D0: E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8 26  // .@.&._.&.G.....&
    41E0: 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04  // .w.&.t..D.2.&.G.
    41F0: 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56 8B  // &.G..........SV.
    4200: D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89  // .&.w.&.t..D.2.&.
    4210: 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86 F4  // G.&.G...........
    4220: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // SV..&.w.&.t..D.2
    4230: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0 03  // .&.G.&.G........
    4240: E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B 5F  // .c.SV..&.w...&._
    4250: 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51 52  // .._....&.\.^[.QR
    4260: 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8 A0  // ..&.w.&.D..&....
    4270: 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B F1  // ...&.w(.D.2.....
    4280: 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32 F6  // ...<.tO&.w(.T.2.
    4290: 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B 34  // .....&.G1&.w.&.4
    42A0: 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4 24  // .D....2.$....2.$
    42B0: 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37  // .&.g/....&.G.&.7
    42C0: 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6 47  // &.G.......&..&.G
    42D0: 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47 32  // 2.&.O(ZY.S..&.G2
    42E0: 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05 74  // .[.W......&..,.t
    42F0: 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02 26  // .&.G,&:G0u.&.w.&
    4300: 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26  // .t.&...&.=.t...&
    4310: 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83 47  // ._.&.w._.&._.&.G
    4320: 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80 7F  // .._.SVW......&..
    4330: 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26 8B  // 0.t.&.G0&:G,u &.
    4340: 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01  // w.&.t.&...&.=.t.
    4350: 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26 8B  // ..&._.&.w._^[.&.
    4360: 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C D0  // _.&.G....SVW....
    4370: 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53 51  // ..&..0.t...U..SQ
    4380: 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26 C6  // RW..&.w.&.t...&.
    4390: 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26 8B  // G=.....&..=.s &.
    43A0: 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B F3  // w.&.W=2.&.|.....
    43B0: 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26 8B  // ....&.T5&.G=..&.
    43C0: 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 63 95 26  // ....2........c.&
    43D0: 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88 57  // .U.&..(.U....&.W
    43E0: 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26 88  // -&..(.U.......&.
    43F0: 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57 2A  // W+&..(.U....&.W*
    4400: 8A 94 62 95 26 88 57 2C 8D 66 F8 5F 5A 59 5B 5D  // ..b.&.W,.f._ZY[]
    4410: C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0  // .SV..&.w....tH..
    4420: 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3 53  // ...t........^[.S
    4430: 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8  // V..&.w....tH....
    4440: 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51 56  // .t .......U..SQV
    4450: 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89 46  // W..@...F.......F
    4460: E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46 DE  // .&.E.._....^..F.
    4470: 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8 C4  // .......F.2..F...
    4480: FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00 0F  // ...2....^....?..
    4490: 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7 46  // .e..F..f...F...F
    44A0: D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00 00  // ...f.F......F...
    44B0: C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9 8A  // .F....<......V..
    44C0: C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75 26  // .2....^....?.tu&
    44D0: 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83 C1  // .E......G.2.....
    44E0: 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0 50  // .2.......t...3.P
    44F0: E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0 08  // .......F...tA...
    4500: 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8 26  // &.G...2....^...&
    4510: 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26 8B  // .E....^.&...^.&.
    4520: 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26 89  // ....&.G..^..v.&.
    4530: 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6 46  // w..^..^..F.....F
    4540: EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8 10  // .....F...F.2....
    4550: 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F 8F  // .....f..F.2.....
    4560: 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E E0  // .....^...&._..^.
    4570: 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA 10  // .^.&._..?[uJ.F..
    4580: 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B 1F  // .^.&._..^..^.&..
    4590: 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 03  // .G.2......2.....
    45A0: E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B 47  // ..^..^...t.&...G
    45B0: 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B 5E  // ....2.$........^
    45C0: B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D 46  // .&)....F.......F
    45D0: B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF 97  // ......2.....F...
    45E0: 60 95 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E EA  // `..r..~.......~.
    45F0: 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E E9  // .t..F...2..f._^.
    4600: 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 9B E8  // ...SQ..&.O.2....
    4610: 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 96 E8  // Y[.SQ..&.O.2....
    4620: 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B C3  // Y[.S..&.G.2...[.
    4630: 53 51 8B D8 26 8A 4F 04 32 ED E8 13 D8 59 5B C3  // SQ..&.O.2....Y[.
    4640: 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26  // S..fPfRfQf&.G.f&
    4650: 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47 0C  // .W.f&.O.f..f&.G.
    4660: 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B D8  // f&.W.fYfZfX[.S..
    4670: 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F 04  // fPfRfQf&.G.f&.O.
    4680: 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59 66  // f..f&.G.f&.W.fYf
    4690: 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 52 EB  // ZfX[.SW..&._..R.
    46A0: 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26 8B  // ..f...._[.SW..&.
    46B0: 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA  // G.&.W.....f.....
    46C0: C1 E3 02 E8 50 EB EB D8 53 52 57 8B D8 26 8B 47  // ....P...SRW..&.G
    46D0: 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14  // .&.W..f.....&._.
    46E0: E8 74 EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C 26  // .t._Z[.SR..&.G.&
    46F0: 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F  // .W..f.....&._&._
    4700: 01 E8 53 EA 5A 5B C3 53 52 56 8B F0 26 8B 5C 26  // ..S.Z[.SRV..&.\&
    4710: 8B 5F 01 E8 DC EA 8B D0 66 C1 E8 10 92 26 89 44  // ._......f....&.D
    4720: 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8 26  // .&.T.^Z[.SQRW..&
    4730: 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8  // .G.&.W..f.......
    4740: 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10  // &.G.&.W.....f...
    4750: 8B DA C1 E3 02 8B C1 E8 30 EA 5F 5A 59 5B C3 8B  // ........0._ZY[..
    4760: D0 66 C1 E8 10 92 C3 00 1E 06 66 50 66 51 66 52  // .f........fPfQfR
    4770: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 37  // fSfUfVfW....u..7
    4780: 01 E9 D8 00 3C 01 75 06 E8 67 01 E9 CE 00 3C 02  // ....<.u..g....<.
    4790: 75 06 E8 9B 02 E9 C4 00 3C 03 75 0B E8 CF 03 8B  // u.......<.u.....
    47A0: EC 89 5E 0C E9 B5 00 3C 04 75 0B E8 DE 03 8B EC  // ..^....<.u......
    47B0: 89 5E 0C E9 A6 00 3C 05 75 0B E8 09 05 8B EC 89  // .^....<.u.......
    47C0: 56 10 E9 97 00 3C 06 75 11 E8 86 04 8B EC 89 5E  // V....<.u.......^
    47D0: 0C 89 4E 14 89 56 10 E9 82 00 3C 07 75 10 E8 78  // ..N..V....<.u..x
    47E0: 05 8B EC 88 7E 0D 89 4E 14 89 56 10 EB 6E 3C 08  // ....~..N..V..n<.
    47F0: 75 0A E8 BB 04 8B EC 88 7E 0D EB 60 3C 09 75 05  // u.......~..`<.u.
    4800: E8 B4 05 EB 57 3C 0A 75 10 E8 FC 05 8B EC 89 4E  // ....W<.u.......N
    4810: 14 89 7E 00 8C 46 1C EB 43 3C 0B 75 0B E8 F6 05  // ..~..F..C<.u....
    4820: 8B EC 66 89 4E 14 EB 34 3C 10 75 0A E8 EB 05 8B  // ..f.N..4<.u.....
    4830: EC 89 5E 0C EB 26 3C 11 75 0D E8 1F 06 8B EC 89  // ..^..&<.u.......
    4840: 5E 0C 89 4E 14 EB 15 3C 15 75 0F E8 4A 06 8B EC  // ^..N...<.u..J...
    4850: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    4860: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    4870: 1F C3 50 1E 2E 8E 1E E1 03 8C D8 A3 E4 5A A3 F4  // ..P..........Z..
    4880: 5A A3 06 5B 2E 8E 1E D9 03 A3 AA 04 1F 58 CB 00  // Z..[.........X..
    4890: 30 31 2E 30 30 00 56 45 53 41 00 03 68 02 00 00  // 01.00.VESA..h...
    48A0: 01 00 00 00 00 00 00 00 00 03 32 0F 77 01 00 00  // ..........2.w...
    48B0: 04 01 00 00 28 48 00 00 B9 3F 00 8B DF 83 C7 04  // ....(H...?......
    48C0: FC 66 33 C0 F3 66 AB 8B FB BE 2E 48 B9 22 00 F3  // .f3..f.....H."..
    48D0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    48E0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 3E D4 B0 4F 32  // O .."......>..O2
    48F0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    4900: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    4910: 00 C7 45 06 40 00 C6 45 1B 04 C6 45 18 01 C6 45  // ..E.@..E...E...E
    4920: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    4930: E8 4D BE 66 0B C0 0F 84 EE 00 06 1F 66 89 45 28  // .M.f........f.E(
    4940: 8C C8 66 C1 E0 10 B8 BB 4C 66 89 45 0C 81 F9 FF  // ..f.....Lf.E....
    4950: 81 0F 84 CF 00 80 E5 03 B2 01 53 8E DB BE 80 1C  // ..........S.....
    4960: E8 F9 D1 5B 06 1F 0F 84 BE 00 53 E8 66 D4 66 89  // ...[......S.f.f.
    4970: 45 12 C7 45 16 08 10 8D 5C 0C E8 A3 E8 66 89 45  // E..E....\....f.E
    4980: 1F 66 89 45 36 8D 5C 10 E8 95 E8 66 89 45 23 66  // .f.E6.\....f.E#f
    4990: 89 45 3A 8D 5C 08 E8 87 E8 0A C0 75 04 5B E9 87  // .E:.\......u.[..
    49A0: 00 E8 30 D4 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01  // ..0.f...=X.t.=^.
    49B0: 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E E8 DA  // t.w..E.....E....
    49C0: D3 80 F9 00 74 04 C6 45 1B 06 2E A1 DB 03 89 45  // ....t..E.......E
    49D0: 08 8D 5C 04 E8 49 E8 66 8B C8 66 C1 E9 10 D3 E0  // ..\..I.f..f.....
    49E0: 89 45 10 89 45 32 B0 08 D2 E0 88 45 19 8D 5C 14  // .E..E2.....E..\.
    49F0: E8 2D E8 5B 3D 00 03 77 2F 53 8B D8 B8 00 03 33  // .-.[=..w/S.....3
    4A00: D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88 45 34 8E  // ...[...E..E5.E4.
    4A10: DB 57 53 BE 80 1C E8 BE BD 5B 5F 0B C9 75 05 06  // .WS......[_..u..
    4A20: 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3  // ..%.2......O..^.
    4A30: 81 FB FF 81 74 6A 0A FF 75 04 8B C3 EB 21 F6 C7  // ....tj..u....!..
    4A40: 08 75 63 8B CB B2 01 BE 20 1C E8 0F D1 74 57 E8  // .uc..... ....tW.
    4A50: 61 D3 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8  // a...u.f.........
    4A60: 91 04 EB 3C E8 7B C1 74 05 E8 A0 BE EB 00 E8 9D  // ...<.{.t........
    4A70: C2 BE 20 1C E8 34 BD 74 2D E8 A5 00 E8 2C 00 66  // .. ..4.t-....,.f
    4A80: BB 20 1C 00 1C E8 22 D3 BE 00 1C E8 25 D3 66 C1  // . ....".....%.f.
    4A90: E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8 74 BD  // ....2....t..@.t.
    4AA0: B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33 C0 8E  // .O2....O...V.3..
    4AB0: C0 BE 20 1C E8 1D D3 8B C8 66 C1 E8 10 8B D0 C1  // .. ......f......
    4AC0: E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88 16 84  // ..&..J......&...
    4AD0: 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26 C6 06  // .&..Q..&..P..&..
    4AE0: 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85 04 10  // I.b&..L...&.....
    4AF0: 26 C7 06 0C 01 B5 64 8C C8 26 A3 0E 01 07 5E C3  // &.....d..&....^.
    4B00: 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00 01 02  // .........@......
    4B10: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    4B20: 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01 BE 98  // ................
    4B30: 4A AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9  // J...............
    4B40: 09 00 BA CE 03 32 E4 BE 9C 4A 8A C4 EE AC 42 EE  // .....2...J....B.
    4B50: 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0 03 32  // J..............2
    4B60: E4 BE A5 4A 8A C4 EE AC EE FE C4 E2 F7 C3 BE 00  // ...J............
    4B70: 1C E8 3F D2 66 C1 E8 10 8B D8 E8 0F D2 75 05 E8  // ..?.f........u..
    4B80: FB D1 75 04 B8 4F 00 C3 B8 4F 03 C3 83 E1 0F 0F  // ..u..O...O......
    4B90: 84 BB 00 0A D2 75 0C B8 00 1C E8 1D 03 83 C3 11  // .....u..........
    4BA0: E9 A6 00 80 FA 01 75 33 8B FB BB C9 05 B9 08 00  // ......u3........
    4BB0: FC E8 3A E6 66 AB 43 E2 F8 66 C1 E7 10 66 C1 EF  // ..:.f.C..f...f..
    4BC0: 10 B9 00 01 BA 00 01 0E 1F E8 C3 BE 06 1F B8 01  // ................
    4BD0: 1C B9 07 00 8B DF E8 E1 02 EB 6E 80 FA 02 75 6E  // ..........n...un
    4BE0: 8B F3 06 1F FC BB C9 05 B9 08 00 66 AD E8 59 E5  // ...........f..Y.
    4BF0: 43 E2 F8 06 56 0E 1F BB D0 05 E8 F1 E5 8A D0 80  // C...V...........
    4C00: E2 03 66 C1 E8 10 8B C8 BE 00 1C E8 4E CF BB CE  // ..f.........N...
    4C10: 05 E8 DA E5 8B C8 66 C1 E8 10 8B D0 B0 18 B7 01  // ......f.........
    4C20: E8 94 B8 5B 07 53 81 C3 00 04 B8 02 1C B9 07 00  // ...[.S..........
    4C30: E8 87 02 5E 8B FE 66 C1 E7 10 66 C1 EF 10 B9 00  // ...^..f...f.....
    4C40: 01 BA 00 01 0E 1F E8 95 BE B0 4F 32 E4 C3 32 C0  // ..........O2..2.
    4C50: C3 00 E8 37 D1 74 53 BE 00 1C 80 FB 00 74 18 80  // ...7.tS......t..
    4C60: FB 01 75 05 E8 75 D1 EB 1D 80 FB 02 75 10 8B C1  // ..u..u......u...
    4C70: E8 28 D1 D3 E8 8B C8 E8 D1 BD 74 2E EB 08 80 FB  // .(........t.....
    4C80: 03 75 24 E8 CC D0 E8 12 D1 8B D8 D3 E3 50 33 C0  // .u$..........P3.
    4C90: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    4CA0: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    4CB0: 0A DB 75 07 8A EF E8 AB BF EB 05 E8 90 BF 8A F8  // ..u.............
    4CC0: B0 4F 32 E4 C3 00 E8 C3 D0 74 2C BE 00 1C E8 E2  // .O2......t,.....
    4CD0: D0 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    4CE0: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 00 E5 D1 E8  // ......u.........
    4CF0: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4D00: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4D10: 8B C2 BB 13 00 E8 31 E4 BB 12 00 E8 2B E4 66 58  // ......1.....+.fX
    4D20: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4D30: 66 56 66 57 0E 1F E8 27 E5 E8 8A FF E8 46 E5 8B  // fVfW...'.....F..
    4D40: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4D50: 5A 66 59 66 58 07 1F 9D CB E8 30 D0 74 54 F6 C3  // ZfYfX.....0.tT..
    4D60: 7F 75 38 53 BE 00 1C E8 72 D0 F7 E2 66 C1 E2 10  // .u8S....r...f...
    4D70: 8B D0 66 81 E1 FF FF 00 00 66 03 D1 E8 1C D0 80  // ..f......f......
    4D80: E2 FC 66 D3 E2 66 81 E2 FF FF FF 02 8D 5C 18 66  // ..f..f.......\.f
    4D90: 8B C2 E8 EB E3 5B E8 9A BC EB 0F 80 FB 82 74 C3  // .....[........t.
    4DA0: 80 FB 01 75 0A E8 7F BC 32 FF B0 4F 32 E4 C3 32  // ...u....2..O2..2
    4DB0: C0 C3 B0 4F B4 03 C3 E8 D2 CF 74 47 80 FF 20 74  // ...O......tG.. t
    4DC0: 08 66 C1 E7 10 66 C1 EF 10 81 F9 00 01 77 31 0A  // .f...f.......w1.
    4DD0: DB 74 05 80 FB 80 75 10 32 F6 E8 71 BE 3C 06 74  // .t....u.2..q.<.t
    4DE0: 02 B6 01 E8 F8 BC EB 13 80 FB 01 75 13 32 F6 E8  // ...........u.2..
    4DF0: 5C BE 3C 06 74 02 B6 01 E8 94 BC B0 4F 32 E4 C3  // \.<.t.......O2..
    4E00: 32 C0 C3 B0 4F B4 03 C3 0E 07 BF 7C 92 2E 8B 0E  // 2...O......|....
    4E10: 7A 92 B8 4F 00 C3 32 C0 C3 00 0A DB 75 06 B7 04  // z..O..2.....u...
    4E20: B3 10 EB 2F 80 FB 01 75 1D 53 32 C9 0A FF 74 02  // .../...u.S2...t.
    4E30: B1 01 E8 D6 BD B1 01 0A FF 74 02 B1 00 E8 B7 BE  // .........t......
    4E40: E8 A0 BB 5B EB 0D 80 FB 02 75 0D E8 CF BD 8A F8  // ...[.....u......
    4E50: C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 80 FB 01 75  // ....O2...O.....u
    4E60: 09 33 C0 E8 35 BE 74 2B EB 24 80 FB 07 75 24 0A  // .3..5.t+.$...u$.
    4E70: FF 75 0E B0 82 E8 3F B6 0A C9 74 12 B9 03 03 EB  // .u....?...t.....
    4E80: 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8 29 B6 B0 4F  // .....t......)..O
    4E90: 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A DB 75 05 BB  // 2...O........u..
    4EA0: 02 01 EB 0C 33 C0 53 E8 4D BE E8 95 C5 5B 74 05  // ....3.S.M....[t.
    4EB0: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD  // .O2...O......r..
    4EC0: 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // B...fPfQfRfSfUfV
    4ED0: 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94  // fW..P.......X...
    4EE0: 9C 4E 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // .Nf_f^f]f[fZfYfX
    4EF0: 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF  // .....P.......X..
    4F00: 94 9C 4E C3 D6 4E 20 89 39 89 56 89 CB 4F 59 80  // ..N..N .9.V..OY.
    4F10: 8B 80 FE 80 81 81 0F 83 13 83 1C 86 ED 86 70 87  // ..............p.
    4F20: D7 87 72 89 97 89 40 8C E4 51 87 90 8A 4E 8A 4E  // ..r...@..Q...N.N
    4F30: 8A 4E 8A 4E 8A 4E 8A 4E 57 91 97 75 EB 76 2E 8E  // .N.N.N.NW..u.v..
    4F40: 1E D9 03 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C6  // ....&...P.......
    4F50: 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26  // .;.u.X........0&
    4F60: F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09  // .G..t.... ..uI..
    4F70: EB 06 A8 01 74 41 B5 0B 53 E8 67 42 0A FF 5B 75  // ....tA..S.gB..[u
    4F80: 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87  // ..&........+X...
    4F90: 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7  // ...&.........c..
    4FA0: 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01 A2 5C  // ...............\
    4FB0: 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04  // .....B..&.......
    4FC0: 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE 40 1C E8 8B  // XSP..3......@...
    4FD0: CB E8 0E BC 74 05 E8 33 B9 EB 00 E8 30 BD BE 40  // ....t..3....0..@
    4FE0: 1C E8 C7 B7 58 5B 0F 84 6C FF 2E 8E 1E D9 03 0E  // ....X[..l.......
    4FF0: 07 E8 4B 2A 0E 1F 53 66 BB 40 1C 00 1C E8 AA CD  // ..K*..Sf.@......
    5000: BE 00 1C B0 20 E8 0C B8 5B 2E 8E 1E D9 03 0E 07  // .... ...[.......
    5010: E8 54 2F E8 24 00 E8 23 3E E8 D1 01 E8 8E 01 E8  // .T/.$..#>.......
    5020: A9 3F 0E 1F BE 00 1C B0 10 E8 E8 B7 E8 2F 2F E8  // .?...........//.
    5030: 27 2F C3 8B EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00  // '/....F..../....
    5040: E8 BD 00 E8 52 00 E8 94 0B C3 53 83 C3 0A 8B 16  // ....R.....S.....
    5050: 63 04 B9 19 00 B8 11 30 EF 32 C0 26 8A 27 EF 43  // c......0.2.&.'.C
    5060: FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3 53 BA C4 03  // ....[...2...S...
    5070: 83 C3 05 B9 04 00 B0 01 26 8A 27 3C 01 75 03 80  // ........&.'<.u..
    5080: CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47 09 BA C2 03  // . .C....[&.G....
    5090: EE B2 C4 B8 00 03 EF C3 8B F3 83 C6 23 BA DA 03  // ............#...
    50A0: 26 F6 47 09 01 75 02 B2 BA F6 06 89 04 08 74 1D  // &.G..u........t.
    50B0: 83 C6 10 EC B9 04 00 B4 10 B2 C0 80 FC 11 74 07  // ..............t.
    50C0: 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B  // ...&...F.....S..
    50D0: DE B9 14 00 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07  // ....2........&..
    50E0: EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06 E8 81 2E 0B  // .C.....2........
    50F0: ED 74 09 1F 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3  // .t........F...[.
    5100: 53 83 C3 37 B9 09 00 32 C0 BA CE 03 26 8A 27 EF  // S..7...2....&.'.
    5110: 43 FE C0 E2 F7 5B C3 BB A2 53 0E 07 8B D3 0A E4  // C....[...S......
    5120: 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6  // }......3.....<J.
    5130: 06 89 04 10 75 20 A0 88 04 24 0F 3C 02 7E 24 3C  // ....u ...$.<.~$<
    5140: 08 74 20 3C 06 74 1C 3C 07 74 18 B0 40 F6 E4 03  // .t <.t.<.t..@...
    5150: D8 81 C3 C0 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3  // .......@........
    5160: C0 05 C3 B0 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6  // ....@........u..
    5170: 06 89 04 10 75 05 81 C3 C0 01 C3 81 C3 40 06 C3  // ....u........@..
    5180: BF 24 51 BE 45 51 33 C9 E8 4E 00 C3 04 00 01 05  // .$Q.EQ3..N......
    5190: 40 01 06 80 01 0D 40 03 0E 80 03 0F 40 04 10 80  // @.....@.....@...
    51A0: 04 11 80 06 12 C0 06 13 00 07 62 00 02 53 8A 1E  // ..........b..S..
    51B0: 49 04 80 FB 07 7F 10 32 FF D1 E3 2E 8B 87 61 51  // I......2......aQ
    51C0: A2 65 04 88 26 66 04 5B C3 2C 30 28 30 2D 30 29  // .e..&f.[.,0(0-0)
    51D0: 30 2A 30 2E 30 1E 3F 29 30 2E 38 25 75 07 2E 03  // 0*0.0.?)0.8%u...
    51E0: 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED C3 1E 06 2E  // ].3.....;.u.....
    51F0: 8E 1E D9 03 F6 06 87 04 80 75 49 83 3E 4C 04 00  // .........uI.>L..
    5200: 74 42 A0 49 04 B9 00 20 2E 8B 3E DF 03 26 F6 47  // tB.I... ..>..&.G
    5210: 33 01 75 0E 26 F6 47 09 01 75 1B 2E 8B 3E DD 03  // 3.u.&.G..u...>..
    5220: EB 14 3C 06 7E 0B 2E 8B 3E DB 03 26 8A 67 37 B5  // ..<.~...>..&.g7.
    5230: 40 66 33 C0 EB 06 66 B8 20 07 20 07 8E C7 66 33  // @f3...f. . ...f3
    5240: FF F3 66 AB 80 26 87 04 7F 07 1F C3 2E 8E 1E D9  // ..f..&..........
    5250: 03 80 FB 10 75 03 E9 7A 01 80 FB 20 75 03 E9 9B  // ....u..z... u...
    5260: 01 80 FB 32 75 1F BA CC 03 0A C0 75 09 EC 0C 02  // ...2u......u....
    5270: B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00 EC 24 FD B2  // .............$..
    5280: C2 EE E9 E4 00 80 FB 35 75 28 3C 80 75 08 80 0E  // .......5u(<.u...
    5290: 89 04 40 E9 D3 00 F6 06 89 04 40 0F 84 D0 00 0A  // ..@.......@.....
    52A0: C0 0F 84 CA 00 FE C8 75 06 E8 D8 08 E9 BA 00 E9  // .......u........
    52B0: BD 00 80 FB 30 74 03 E9 96 00 50 E8 25 3F 8A EF  // ....0t....P.%?..
    52C0: BA CC 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01  // ......X..u0.....
    52D0: 75 12 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7  // u...u....$0<0u..
    52E0: 02 E9 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80  // .......$0<0u....
    52F0: 26 89 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80  // &..o......6<.uA.
    5300: 26 89 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04  // &..o.....u......
    5310: 24 30 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11  // $0<0t.....t.....
    5320: A0 10 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7  // ...$0<0u.....t..
    5330: 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29  // ...............)
    5340: 3C 02 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4  // <.u+.&..o.......
    5350: 80 FB 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89  // ..1u...t.<.u....
    5360: 04 08 EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3  // .....&......F...
    5370: 80 FB 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89  // ..3u.<.t.<.u..&.
    5380: 04 FD EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17  // .............4u.
    5390: 3C 00 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80  // <.u..&.....<.u..
    53A0: 0E 87 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C  // .........6u&. .<
    53B0: 01 74 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB  // .t....<.t.......
    53C0: A8 9C FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE  // .........B."....
    53D0: 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7  // .............u..
    53E0: 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B  // ..........%.....
    53F0: EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06  // ..^..N..F.......
    5400: 14 00 84 7A 8C 0E 16 00 9D C3 28 18 08 00 08 09  // ...z......(.....
    5410: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
    5420: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    5430: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5440: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 08 09  // ..........(.....
    5450: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
    5460: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    5470: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5480: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
    5490: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
    54A0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    54B0: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    54C0: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
    54D0: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
    54E0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    54F0: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5500: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09  // ..........(...@.
    5510: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
    5520: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
    5530: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
    5540: 00 00 00 00 00 00 30 0F 00 FF 28 18 08 00 40 09  // ......0...(...@.
    5550: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
    5560: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
    5570: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
    5580: 00 00 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01  // ......0...P...@.
    5590: 01 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00  // ...c_OP.T.......
    55A0: 00 00 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17  // .......(........
    55B0: 17 17 17 17 17 17 17 17 17 17 17 17 17 01 00 01  // ................
    55C0: 00 00 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00  // ..........P.....
    55D0: 03 00 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    55E0: 00 00 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08  // ......](.c......
    55F0: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
    5600: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
    5610: 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5620: 00 00 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02  // .......P........
    5630: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    5640: 00 10 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B  // ......@.........
    5650: 14 28 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11  // .(..-2 $8?......
    5660: 14 18 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18  // ... $(-28?......
    5670: 16 15 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23  // ....%/83.*%')*,#
    5680: 19 10 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39  // ..#%'*,+*))-27;9
    5690: 37 34 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34  // 74234551,'/02344
    56A0: 33 33 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37  // 33258:=<:98899:7
    56B0: 34 31 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17  // 41..............
    56C0: 15 13 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13  // ................
    56D0: 13 13 12 14 16 18 1A 19 18 17 16 17 17 17 18 15  // ................
    56E0: 14 11 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B  // ................
    56F0: 1A 19 19 19 19 19 1A 18 17 16 02 03 04 05 07 06  // ................
    5700: 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09  // ................
    5710: 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F  // ................
    5720: 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D  // ................
    5730: 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E  // ................
    5740: 0D 0C 00 00 00 00 00 00 00 00 28 18 08 00 20 09  // ..........(... .
    5750: 0F 00 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00  // ...c-'(.+.......
    5760: 00 00 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02  // ................
    5770: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
    5780: 00 00 00 00 00 00 00 05 0F FF 50 18 08 00 40 01  // ..........P...@.
    5790: 0F 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00  // ...c_OP.T.......
    57A0: 00 00 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02  // .......(........
    57B0: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
    57C0: 00 00 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B  // ................
    57D0: 25 28 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E  // %(... ..(,..%*..
    57E0: 32 36 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18  // 26..',. 49...$..
    57F0: 2C 30 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24  // ,0..!&...3..+0.$
    5800: 38 3D 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8=..-2 $8?......
    5810: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
    5820: 38 3F 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8?..-2 $8?......
    5830: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
    5840: 38 3F 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01  // 8?..-2 $8?P.....
    5850: 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
    5860: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00  // ......](.c......
    5870: 00 18 18 00 00 00 08 00 00 00 18 00 00 0B 00 05  // ................
    5880: 00 00 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01  // ..........P.....
    5890: 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
    58A0: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02  // ......](.c......
    58B0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
    58C0: 00 00 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09  // ..........(.....
    58D0: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
    58E0: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
    58F0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5900: 00 00 00 00 00 00 10 0E 00 FF 28 18 0E 00 08 09  // ..........(.....
    5910: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
    5920: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
    5930: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5940: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
    5950: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    5960: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
    5970: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5980: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
    5990: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    59A0: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
    59B0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    59C0: 00 00 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08  // ..........(.....
    59D0: 03 00 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E  // ...g-'(.+....O..
    59E0: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    59F0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
    5A00: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
    5A10: 03 00 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...g_OP.U....O..
    5A20: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    5A30: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
    5A40: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
    5A50: 03 00 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...f_OP.U....O..
    5A60: 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08  // .......(........
    5A70: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
    5A80: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
    5A90: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5AA0: 00 00 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F  // .......(......??
    5AB0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F  // ?????????????...
    5AC0: 00 00 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01  // ..........P.....
    5AD0: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5AE0: 00 00 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02  // .......(........
    5AF0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
    5B00: 00 00 00 00 00 00 00 05 0F FF 28 18 08 00 20 01  // ..........(... .
    5B10: 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00  // ...c_OP.T....A..
    5B20: 00 00 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02  // .......(@.......
    5B30: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F  // .............A..
    5B40: 00 00 00 00 00 00 40 05 0F FF A2 53 00 C0 00 00  // ......@....S....
    5B50: 00 00 00 00 00 00 00 00 00 00 02 5B 00 C0 00 00  // ...........[....
    5B60: 00 00 00 00 00 00 00 00 00 00 1A 00 55 92 00 C0  // ............U...
    5B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B80: 00 00 00 00 1E E8 10 00 2E 8E 1E D9 03 E8 B3 36  // ...............6
    5B90: E8 8A 36 E8 68 1A 1F C3 2E 8E 1E D9 03 C7 06 87  // ..6.h...........
    5BA0: 04 60 F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2  // .`...........$..
    5BB0: 89 04 B4 01 E8 65 1E A0 89 04 80 26 10 04 CF 80  // .....e.....&....
    5BC0: 0E 10 04 20 C7 06 63 04 D4 03 B8 03 00 E8 23 F3  // ... ..c.......#.
    5BD0: C3 1E 2E 8E 1E D9 03 0E 07 EB 00 1F C3 F6 06 89  // ................
    5BE0: 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2  // ..t..S..........
    5BF0: C8 80 3E 63 04 B4 75 2F BE 56 5C B9 40 00 33 DB  // ..>c..u/.V\.@.3.
    5C00: 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E  // ................
    5C10: 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3  // ..B...E....E....
    5C20: 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06  // J......&.G+.....
    5C30: 74 31 B9 F8 00 BF E2 55 3C 08 74 11 B9 40 00 BF  // t1.....U<.t..@..
    5C40: 62 57 3C 38 74 07 3C 3F 74 03 BF A2 57 33 DB 9C  // bW<8t.<?t...W3..
    5C50: FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1  // .......B.....J..
    5C60: 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9  // ..I<.t%<8t.<?t*.
    5C70: 08 00 33 DB 51 E8 EC D0 B9 08 00 F7 C3 10 00 74  // ..3.Q..........t
    5C80: 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 D5 D0 B9  // .....g.Y... ....
    5C90: 10 00 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8  // ..3..W....@.3.Q.
    5CA0: 28 00 8A C3 E8 7A 2F FE C3 59 E2 F2 5B C3 00 2A  // (....z/..Y..[..*
    5CB0: 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A  // .*.*.*.?.?.?.?.*
    5CC0: 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83  // .?.*.?.*.?......
    5CD0: E7 0F 2E 8A B5 46 5C 8B FB D1 EF 83 E7 0F 2E 8A  // .....F\.........
    5CE0: AD 46 5C 8B FB 83 E7 0F 2E 8A 8D 46 5C C3 9C 8A  // .F\........F\...
    5CF0: C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A  // ......B.G....G..
    5D00: 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00  // ..G..J..........
    5D10: 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE  // ..~......~|.....
    5D20: 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38  // |.....|8...8|.|8
    5D30: 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10  // ...8....8.8|..l.
    5D40: 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7  // 8...<~<.........
    5D50: FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3  // ....<ff<........
    5D60: E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E  // .....6x..x~..~.~
    5D70: 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66  // .......p.`>>66.f
    5D80: 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0  // ...<f.f<........
    5D90: 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C  // .....>.....<~.~<
    5DA0: 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B  // ..fffff.f...{;..
    5DB0: 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE  // ..<f8ll8.x......
    5DC0: FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18  // ...<~.~<.~.<~...
    5DD0: 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18  // ......~<........
    5DE0: 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE  // ...0p.p0........
    5DF0: 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE  // ...$f.f$....8||.
    5E00: 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00  // ....||8.........
    5E10: 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00  // ...<<.....lll...
    5E20: 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC  // ..ll.l.ll..~.|..
    5E30: 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC  // ......0`..8l8v..
    5E40: 76 00 18 18 30 00 00 00 00 00 18 30 60 60 60 30  // v...0......0```0
    5E50: 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE  // ..`0...0`...|.|.
    5E60: 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 18 18  // .....~..........
    5E70: 30 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 38  // 0..............8
    5E80: 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6  // 8....0`...|.....
    5E90: 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66  // |..x....~.|...0f
    5EA0: FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C  // ..|..<..|...<l..
    5EB0: 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6  // ........|.|.....
    5EC0: 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6  // |.........|..|..
    5ED0: 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C  // |.|..~..|.......
    5EE0: 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60 30 18  // .........0..0`0.
    5EF0: 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30  // ..........`0...0
    5F00: 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0  // `.|.......|.....
    5F10: 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66  // ~.8l.......ff|ff
    5F20: FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C  // ..<f...f<..lfffl
    5F30: F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60  // ...........b`|``
    5F40: F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6  // ..|.....|.......
    5F50: C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8  // ..<.....<.<.....
    5F60: 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62  // p..........````b
    5F70: FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE  // ................
    5F80: C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60  // ..|.....|..ff|``
    5F90: F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC  // ..|.....|.......
    5FA0: C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18  // ..|..|..|.~Z....
    5FB0: 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38  // <.......|.....l8
    5FC0: 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C  // ...........l888l
    5FD0: C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62  // ..fff<..<.....0b
    5FE0: FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06  // ..|`````|..`0...
    5FF0: 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00  // ..|.....|..8l...
    6000: 00 00 00 00 00 00 00 00 00 FF 30 30 18 00 00 00  // ..........00....
    6010: 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66  // ....x.|.~..`|fff
    6020: FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC  // ....|...|...|...
    6030: 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30  // ~...|...|..60.00
    6040: 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66  // x...v..~.|.`|fff
    6050: E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C  // ....8...<.......
    6060: CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18  // .x.`flxl........
    6070: 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66  // ....l........fff
    6080: 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C  // f...|...|....ff|
    6090: 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60  // `...v..|.....f``
    60A0: F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36  // ....|.|.|.00.006
    60B0: 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38  // ........v.....l8
    60C0: 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C  // ........l....l8l
    60D0: C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64  // .......v.|....0d
    60E0: FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18  // .....p..........
    60F0: 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00  // ..p.....p.v.....
    6100: 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18  // ....88ll..<f.f<.
    6110: CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0  // .x......v...|...
    6120: 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC  // |.|.x.|.~...x.|.
    6130: 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC  // ~...x.|.~.88x.|.
    6140: 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0  // ~...|.|.l8|.|...
    6150: 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0  // |...|...|...|...
    6160: 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18  // |.f.8...<.|.8...
    6170: 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6  // <...8...<..8l...
    6180: C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0  // ..88.|..........
    6190: FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8  // ....l.~.n.~.....
    61A0: DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6  // ..|..|..|....|..
    61B0: 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE  // |....|..|.|.....
    61C0: 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18  // v.......v...<...
    61D0: 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6  // <..8l..l8.......
    61E0: 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6  // |...~..~..8l`.f.
    61F0: 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E  // l..f<~.<..>c8.c>
    6200: 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC  // ...>a<.|....x.|.
    6210: 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6  // ~...8...<....|..
    6220: 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66  // |.......v.....ff
    6230: E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63  // ..........>.>`gc
    6240: 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66  // =.>.v..~.|...0`f
    6250: 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C  // <....|``.....|..
    6260: 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C  // .....0|6.>...0l<
    6270: 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36  // ~.....<<...6l.l6
    6280: 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88  // ....l6l...".".".
    6290: 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77  // ".U.U.U.U..w.w.w
    62A0: DD 77 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // .w..............
    62B0: 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36  // ..........6666.6
    62C0: 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18  // 66.....666......
    62D0: 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // ..66...666666666
    62E0: 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00  // 66.....66666....
    62F0: 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00  // ..6666..........
    6300: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00  // ................
    6310: 00 00 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18  // ................
    6320: 18 18 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00  // ................
    6330: 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18  // ................
    6340: 18 18 36 36 36 36 37 36 36 36 36 36 37 30 3F 00  // ..666676666670?.
    6350: 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00  // ....?0766666....
    6360: 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36  // .......666667076
    6370: 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36  // 66........66...6
    6380: 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00  // 66........6666..
    6390: 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36  // ...............6
    63A0: 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00  // 666666?.........
    63B0: 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36  // ..............?6
    63C0: 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18  // 666666.666......
    63D0: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18  // ................
    63E0: 18 18 FF FF FF FF FF FF FF FF 00 00 00 00 FF FF  // ................
    63F0: FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F  // ................
    6400: 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC  // ............f...
    6410: 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60  // f..x........b```
    6420: E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6  // ....lllll...`0`.
    6430: FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C  // ...~....p..ffff|
    6440: C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38  // ...v....8..8l.l8
    6450: FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C  // ..8l...l8.8l..ll
    6460: EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E  // ..>`8f..x...~..~
    6470: 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60  // ...|...|..8`...`
    6480: 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE  // 8.|.............
    6490: 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00  // ....~...~.0...0.
    64A0: 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18  // ~...0...~.......
    64B0: 18 18 18 18 18 18 18 78 30 00 00 00 18 00 7E 00  // .......x0.....~.
    64C0: 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00  // ...v..v...|..|..
    64D0: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 18 00  // ................
    64E0: 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00  // .......8...lll..
    64F0: 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C  // ..p.0.......||||
    6500: 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 24  // ...............$
    6510: 66 FF 66 24 00 00 00 00 00 00 00 10 00 00 00 00  // f.f$............
    6520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7E  // ...............~
    6530: 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C  // ........~......|
    6540: FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00  // ........|.......
    6550: 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00 00 00  // l.....|8........
    6560: 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00  // .8|.|8..........
    6570: 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10  // .88.l.l.8.......
    6580: 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00  // 8||...l.8.......
    6590: 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF  // ...<<<..........
    65A0: FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00  // ................
    65B0: 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF  // ..<fff<.........
    65C0: FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E  // ................
    65D0: 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C  // ..6x....x......<
    65E0: 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E  // fff<.~..........
    65F0: 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E  // ......x.p......>
    6600: 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18  // 6>66v.f.........
    6610: DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00  // .~<ff<~.........
    6620: 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00  // ................
    6630: 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18  // ..>~.~>.........
    6640: 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66  // <~....~<.......f
    6650: 66 66 66 66 66 66 00 66 66 00 00 00 00 00 00 7F  // ffffff.ff.......
    6660: DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C  // ....{..........|
    6670: C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00  // ..`|..|...|.....
    6680: 00 00 00 00 00 FE FE FE FE 00 00 00 00 00 00 18  // ................
    6690: 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18  // <~...~<.~.......
    66A0: 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00 00 18  // <~..............
    66B0: 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00  // ......~<........
    66C0: 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00  // ................
    66D0: 00 00 30 70 FE 70 30 00 00 00 00 00 00 00 00 00  // ..0p.p0.........
    66E0: 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00  // ................
    66F0: 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 00 00  // ..$f.f$.........
    6700: 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00  // .888||..........
    6710: FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00  // ..|||88.........
    6720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    6730: 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36  // <<<<..........66
    6740: 36 36 14 00 00 00 00 00 00 00 00 00 00 00 00 6C  // 66.............l
    6750: 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18  // ll.ll.lll.......
    6760: 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00  // .|..x<..|.......
    6770: 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38  // ..bf..0f.......8
    6780: 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C  // l80v~...v.......
    6790: 0C 18 00 00 00 00 00 00 00 00 00 00 00 00 00 0C  // ................
    67A0: 18 30 30 30 30 30 30 18 0C 00 00 00 00 00 00 30  // .000000........0
    67B0: 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00  // ........0.......
    67C0: 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00  // ..l8.8l.........
    67D0: 00 00 18 18 7E 18 18 00 00 00 00 00 00 00 00 00  // ....~...........
    67E0: 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
    67F0: 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
    6800: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
    6810: 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C  // .....0`........|
    6820: C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
    6830: 78 18 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C  // x.......~......|
    6840: C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C  // .....0`........|
    6850: C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C  // ...<....|.......
    6860: 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE  // .<l.............
    6870: C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C  // ........|......|
    6880: C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE  // ........|.......
    6890: C6 06 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C  // ....00000......|
    68A0: C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C  // ...|....|......|
    68B0: C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00  // ....~...|.......
    68C0: 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00  // ................
    68D0: 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
    68E0: 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00  // ..0`.`0.........
    68F0: 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00  // ................
    6900: 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C  // `0.....0`......|
    6910: C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C  // ...............|
    6920: C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38  // ........~......8
    6930: 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC  // l...............
    6940: 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C  // fff|ffff.......<
    6950: 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8  // f......f<.......
    6960: 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE  // lffffffl........
    6970: 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE  // f`d|d``f........
    6980: 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C  // f`d|d```.......|
    6990: C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
    69A0: C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C  // ...............<
    69B0: 18 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C  // ........<......<
    69C0: 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6  // ........p.......
    69D0: C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0  // ................
    69E0: 60 60 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6  // ``````bf........
    69F0: C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6  // ................
    6A00: C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C  // ...............|
    6A10: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC  // ........|.......
    6A20: 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C  // ffff|```.......|
    6A30: C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC  // ........|.......
    6A40: 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C  // fff|xlff.......|
    6A50: C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E  // ...p....|......~
    6A60: 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6  // Z.......<.......
    6A70: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
    6A80: C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6  // ......l8........
    6A90: C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6  // ................
    6AA0: C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66  // ..l88l.........f
    6AB0: 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE  // ffff<...<.......
    6AC0: C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C  // ....0`.........|
    6AD0: 60 60 60 60 60 60 60 60 7C 00 00 00 00 00 00 00  // ````````|.......
    6AE0: 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C  // ...`0..........|
    6AF0: 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38  // ........|......8
    6B00: 6C C6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // l...............
    6B10: 00 00 00 00 00 00 00 00 00 00 FF 00 00 00 18 18  // ................
    6B20: 18 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B30: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0  // ..x.|...v.......
    6B40: 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00  // ``|fffff........
    6B50: 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
    6B60: 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00  // ..|.....~.......
    6B70: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
    6B80: 36 30 30 FC 30 30 30 30 78 00 00 00 00 00 00 00  // 600.0000x.......
    6B90: 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0  // ..v....v..|.....
    6BA0: 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18  // ``|fffff........
    6BB0: 18 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C  // ..8.....<.......
    6BC0: 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0  // ..........x.....
    6BD0: 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18  // ``fflxlf........
    6BE0: 18 18 18 18 18 18 18 18 1C 00 00 00 00 00 00 00  // ................
    6BF0: 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00  // ..l.............
    6C00: 00 00 DC 66 66 66 66 66 66 00 00 00 00 00 00 00  // ...ffffff.......
    6C10: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00  // ..|.....|.......
    6C20: 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00  // ...ffff|``......
    6C30: 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00  // ..v....|........
    6C40: 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00 00 00  // ...f````........
    6C50: 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30  // ..|..|..|......0
    6C60: 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00 00 00  // 00.00006........
    6C70: 00 00 CC CC CC CC CC CC 76 00 00 00 00 00 00 00  // ........v.......
    6C80: 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00  // ......l8........
    6C90: 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00  // ........l.......
    6CA0: 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00  // ....l8l.........
    6CB0: 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00  // .......v..|.....
    6CC0: 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E  // ......0b........
    6CD0: 18 18 18 70 18 18 18 18 0E 00 00 00 00 00 00 18  // ...p............
    6CE0: 18 18 18 00 18 18 18 18 18 00 00 00 00 00 00 70  // ...............p
    6CF0: 18 18 18 0E 18 18 18 18 70 00 00 00 00 00 00 76  // ........p......v
    6D00: DC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6D10: 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C  // ...88ll........<
    6D20: 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6  // f....f<...8.....
    6D30: 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18  // ........v.......
    6D40: 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78  // 0.|.....|.....0x
    6D50: CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC  // ..x.|...v.......
    6D60: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30  // ..x.|...v.....`0
    6D70: 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C  // ..x.|...v.....8l
    6D80: 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00  // 8.x.|...v.......
    6D90: 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78  // .|....|..l8...0x
    6DA0: CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC  // ..|.....|.......
    6DB0: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
    6DC0: 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66  // ..|.....|......f
    6DD0: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C  // ..8.....<......<
    6DE0: 66 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 00  // f.8.....<.......
    6DF0: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // ..8.....<.......
    6E00: 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38  // 8l...........8l8
    6E10: 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30  // .8l............0
    6E20: 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00  // ..``|```........
    6E30: 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E  // .f......v......~
    6E40: D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78  // ..............0x
    6E50: CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ..|.....|.......
    6E60: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
    6E70: 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78  // ..|.....|.....0x
    6E80: CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30  // ........v.....`0
    6E90: 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00  // ........v.......
    6EA0: 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // <.......<.......
    6EB0: 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00  // |.......|.......
    6EC0: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
    6ED0: 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C  // .|....|.......8l
    6EE0: 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66  // ``.```f.l.....ff
    6EF0: 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E  // ff<.~.<........>
    6F00: 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00  // cc0..cc>........
    6F10: 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18  // ..>c8.c>........
    6F20: 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18  // 0.x.|...v.......
    6F30: 30 00 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18  // 0.8.....<.......
    6F40: 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30  // 0.|.....|......0
    6F50: 60 00 CC CC CC CC CC DC 76 00 00 00 00 00 00 76  // `.......v......v
    6F60: DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC  // ...fffff......v.
    6F70: 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E  // ..............!.
    6F80: 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C  // ..3``gc3......B<
    6F90: 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30  // .;fff>.f<......0
    6FA0: 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00  // 0.000`..|.......
    6FB0: 00 00 00 00 7E 60 60 60 00 00 00 00 00 00 00 00  // ....~```........
    6FC0: 00 00 00 00 7E 06 06 06 00 00 00 00 00 00 60 60  // ....~.........``
    6FD0: 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60  // bfl.0`.6..>...``
    6FE0: 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18  // bfl.6n.6~.......
    6FF0: 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00  // ....<<<<........
    7000: 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00  // ..6l.l6.........
    7010: 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11  // ...l6l........D.
    7020: 44 11 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA  // D.D.D.D.D.D.D.U.
    7030: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD  // U.U.U.U.U.U.U.w.
    7040: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18  // w.w.w.w.w.w.w...
    7050: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7060: 18 18 18 18 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
    7070: 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
    7080: 36 36 36 36 F6 36 36 36 36 36 36 36 36 00 00 00  // 6666.66666666...
    7090: 00 00 00 00 FE 36 36 36 36 36 36 36 36 00 00 00  // .....66666666...
    70A0: 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
    70B0: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
    70C0: 36 36 36 36 36 36 36 36 36 36 36 36 36 00 00 00  // 6666666666666...
    70D0: 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    70E0: 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36 36 36  // 66...........666
    70F0: 36 36 36 36 FE 00 00 00 00 00 00 00 00 18 18 18  // 6666............
    7100: 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
    7110: 00 00 00 00 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
    7120: 18 18 18 18 1F 00 00 00 00 00 00 00 00 18 18 18  // ................
    7130: 18 18 18 18 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    7140: 00 00 00 00 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    7150: 18 18 18 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
    7160: 00 00 00 00 FF 00 00 00 00 00 00 00 00 18 18 18  // ................
    7170: 18 18 18 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    7180: 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36  // .............666
    7190: 36 36 36 36 37 36 36 36 36 36 36 36 36 36 36 36  // 6666766666666666
    71A0: 36 36 37 30 3F 00 00 00 00 00 00 00 00 00 00 00  // 6670?...........
    71B0: 00 00 3F 30 37 36 36 36 36 36 36 36 36 36 36 36  // ..?0766666666666
    71C0: 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00 00 00  // 66..............
    71D0: 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    71E0: 36 36 37 30 37 36 36 36 36 36 36 36 36 00 00 00  // 6670766666666...
    71F0: 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
    7200: 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18 18 18  // 66...66666666...
    7210: 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
    7220: 36 36 36 36 FF 00 00 00 00 00 00 00 00 00 00 00  // 6666............
    7230: 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00 00 00  // ................
    7240: 00 00 00 00 FF 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    7250: 36 36 36 36 3F 00 00 00 00 00 00 00 00 18 18 18  // 6666?...........
    7260: 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00  // ................
    7270: 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
    7280: 00 00 00 00 3F 36 36 36 36 36 36 36 36 36 36 36  // ....?66666666666
    7290: 36 36 36 36 FF 36 36 36 36 36 36 36 36 18 18 18  // 6666.66666666...
    72A0: 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    72B0: 18 18 18 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
    72C0: 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF  // ................
    72D0: FF FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00  // ................
    72E0: 00 00 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0  // ................
    72F0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F  // ................
    7300: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF  // ................
    7310: FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    7320: 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78  // .v......v......x
    7330: CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE  // ................
    7340: 66 62 60 60 60 60 60 60 60 00 00 00 00 00 00 00  // fb```````.......
    7350: 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE  // ...llllll.......
    7360: C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00  // .b0..0b.........
    7370: 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00  // ..~.....p.......
    7380: 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00  // .fffff|`........
    7390: 00 00 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE  // ..v.............
    73A0: 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00  // 88l..l88........
    73B0: 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38  // 8l.....l8......8
    73C0: 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E  // l....lll.......>
    73D0: 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00  // ``<f....x.......
    73E0: 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02  // ..~...~.........
    73F0: 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00  // .|....|`........
    7400: 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C  // .0``|``0.......|
    7410: C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00  // ................
    7420: 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00  // ................
    7430: 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30  // ...~....~......0
    7440: 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C  // .....0..~.......
    7450: 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00  // .0`0....~.......
    7460: 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7470: 18 18 18 18 18 18 18 58 78 30 00 00 00 00 00 00  // .......Xx0......
    7480: 00 18 18 00 7E 00 18 18 00 00 00 00 00 00 00 00  // ....~...........
    7490: 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78  // ...v..v........x
    74A0: CC CC 78 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..x.............
    74B0: 00 00 00 00 18 18 00 00 00 00 00 00 00 00 00 00  // ................
    74C0: 00 00 00 00 00 18 00 00 00 00 00 00 00 00 00 1F  // ................
    74D0: 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8  // .......x8.......
    74E0: 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70  // lllll..........p
    74F0: D8 18 30 60 F8 00 00 00 00 00 00 00 00 00 00 00  // ..0`............
    7500: 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00  // ..~~~~~~........
    7510: 00 00 00 00 00 00 00 00 00 00 00 00 00 1D 00 00  // ................
    7520: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00  // ...$f.f$....../.
    7530: 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30  // .......0`......0
    7540: 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00  // ..~........~....
    7550: 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00  // M...............
    7560: 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00  // .T...........<..
    7570: 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00  // ..V.........f<..
    7580: 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66  // ...W...........f
    7590: 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3  // ....X.....f<<f..
    75A0: C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18  // .....Y......f<..
    75B0: 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C  // .<....\.....`0..
    75C0: 06 03 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB  // .......m.....f..
    75D0: DB DB C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3  // ........v.......
    75E0: C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3  // ..f<.....w......
    75F0: C3 DB DB DB FF 66 00 00 00 00 00 00 B5 64 C3 0B  // .....f.......d..
    7600: DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB  // .t..F.W2..@..._.
    7610: 45 92 26 89 1D 26 8C 4D 02 2E 8E 1E D9 03 57 BE  // E.&..&.M......W.
    7620: 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47  // I..........&..FG
    7630: E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26  // .._.....&.E"...&
    7640: 89 45 23 57 E8 9C 1B 5F 26 88 5D 25 26 88 7D 26  // .E#W..._&.]%&.}&
    7650: 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF  // ..I....t......2.
    7660: D1 E3 2E 8A 87 1D 92 32 E4 0A C0 74 01 40 26 89  // .......2...t.@&.
    7670: 45 27 2E 8A 87 1E 92 26 88 45 29 A1 85 04 8A 16  // E'.....&.E).....
    7680: 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D  // ........=..~...=
    7690: 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01  // ^.~...=..~...=..
    76A0: 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0  // ~.&.U*.&....$...
    76B0: 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A  // ..............$.
    76C0: 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0  // ........0.B.$...
    76D0: 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8  // .....&.E-..&.E1.
    76E0: 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE  // w...2.........;.
    76F0: 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26  // t4&.w.....t....&
    7700: C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08  // .w.....t....&.w.
    7710: 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B  // ....t....&.w....
    7720: F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4  // .t......&.U2....
    7730: 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81  // ................
    7740: E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46  // ...%....&.E+...F
    7750: 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B  // .....t...t6..tV.
    7760: EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0  // ..F.... ....t...
    7770: 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03  // `...t...:...t...
    7780: 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C  // ...?......F..F..
    7790: C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1  // ..... ...t......
    77A0: 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC  // .t.......t......
    77B0: C6 46 1A 1C C3 F6 C1 01 74 06 E8 D9 14 E8 25 01  // .F......t.....%.
    77C0: F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02  // ...t.......t....
    77D0: EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B  // .....B....J....k
    77E0: 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42  // .......2.......B
    77F0: EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3  // ....J........ ..
    7800: 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE  // &....GF...&.%.G.
    7810: C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE  // .........&..G...
    7820: E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7  // .....QW..+.&....
    7830: E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26  // ....&.D.&.TA...&
    7840: 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44  // .D....&.D....&.D
    7850: 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8  // ....&...........
    7860: 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32  // p.&........&.TA2
    7870: E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2  // .....[.&.D..._..
    7880: CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59  // .2.....I.&.D.._Y
    7890: 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51  // ..`......+.&.G.Q
    78A0: 57 2E 8E 1E D9 03 A0 10 04 24 30 AA BE 49 04 B9  // W........$0..I..
    78B0: 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04  // ................
    78C0: F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4  // ..........t.....
    78D0: BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59  // .|............_Y
    78E0: 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B  // ..:....&.?....Q.
    78F0: FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00  // ................
    7900: E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03  // ...G..&.D.......
    7910: EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32  // .&...&.TA......2
    7920: C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04  // ....&.D.....&.D.
    7930: EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0  // ....2..... ...2.
    7940: B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26  // .....&.D..Y....&
    7950: 8B 7F 02 03 FB 06 51 2E 8E 1E D9 03 26 8A 05 80  // ......Q.....&...
    7960: 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8  // &.......G.I.....
    7970: 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8  // ................
    7980: 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8  // ~.......v..t....
    7990: 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8  // n..|....f.......
    79A0: 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04  // ^.Y.......+.&.G.
    79B0: E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03  // ......4.B.&.....
    79C0: EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03  // .&.E.PJJ.&.E....
    79D0: B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE  // ...B2..BB....XJ.
    79E0: 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0  // ....&.w....l....
    79F0: 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42  // 4.&......&.D..VB
    7A00: 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46  // B...2..B...&...F
    7A10: E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC  // ..^..&.D........
    7A20: 24 FE 0A C4 B2 C2 EE C3 E8 6B 12 B2 C0 86 C4 EE  // $........k......
    7A30: EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50  // ............ ..P
    7A40: 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F  // ......&....&..$.
    7A50: 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74  // ..<.~.&.G3.u.<#t
    7A60: 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01  // .<2t.<3t...&.G..
    7A70: 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02  // u....&I.........
    7A80: 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16  // &.G..t....&.....
    7A90: 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00  // c...N.....b.....
    7AA0: BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32  // .P.....3....&..2
    7AB0: E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3  // ..J.&.G....&.G..
    7AC0: 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3  // ..&.G..L.&.G....
    7AD0: 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29  // `.X.R2.3.......)
    7AE0: 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E  // u.2.3.....Z...`.
    7AF0: 8E 1E D9 03 2E 83 0E E3 03 00 75 6E 80 3E 00 05  // ..........un.>..
    7B00: 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3  // .tg.......b.2...
    7B10: 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84  // ....P..>b.P2....
    7B20: 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4  // .2.AQ..J.2......
    7B30: 29 75 3D 51 52 89 95 50 04 B4 08 E8 7C D3 0A C0  // )u=QR..P....|...
    7B40: 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A  // u.. 3.2.....)u.Z
    7B50: FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2  // ..Y....Y...w.2..
    7B60: 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59  // ..X..P....a...ZY
    7B70: 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E  // Y....R*.8.}.2...
    7B80: 06 DB 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA  // ...Z............
    7B90: BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED  // ..........m...2.
    7BA0: 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8  // ..........Ku.2..
    7BB0: 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03  // W..S..b...u...t.
    7BC0: E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4  // .5.[..+.......2.
    7BD0: C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85  // ...2.+...t**..&.
    7BE0: 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A  // ...R... .......Z
    7BF0: 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5  // .............Hu.
    7C00: 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42  // ...............B
    7C10: EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A  // .$....J....B...J
    7C20: 9D C3 1E 2E 8E 1E D9 03 8B 16 63 04 80 C2 06 1F  // ..........c.....
    7C30: C3 1E 2E 8E 1E D9 03 8B 16 63 04 1F C3 50 BA CC  // .........c...P..
    7C40: 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80  // ......u...X.....
    7C50: C2 06 C3 1E 2E 8E 1E D9 03 80 3E 49 04 03 74 13  // ..........>I..t.
    7C60: 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E  // .>I..t..>I..t..>
    7C70: 49 04 00 1F C3 50 2E 8E 06 DD 03 A0 10 04 24 30  // I....P........$0
    7C80: 3C 30 74 05 2E 8E 06 DF 03 58 0B C0 74 03 E8 E1  // <0t......X..t...
    7C90: 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A  // ...N.....+.2...J
    7CA0: 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75  // ...............u
    7CB0: 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8  // ...8.~..........
    7CC0: B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3  // ....:.J.t.......
    7CD0: 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF  // ...@............
    7CE0: F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32  // ..+.......S..*.2
    7CF0: ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03  // .2.+.+..........
    7D00: F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD  // .....u.X. ......
    7D10: FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8  // ..u..S..*.t.....
    7D20: F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8  // ..X...... ......
    7D30: 2E 00 2E 8E 1E DF 03 8A C3 22 DF D3 E3 A8 80 74  // .........".....t
    7D40: 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A  // .0.....4".......
    7D50: FC E8 0C 00 2E 8E 1E DF 03 8A 04 D2 E8 22 C7 C3  // ............."..
    7D60: B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE  // .(.....t........
    7D70: 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7  // ................
    7D80: 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A  // ................
    7D90: D8 2E 8E 06 DF 03 8B C1 E8 86 00 75 02 8A DE 03  // ...........u....
    7DA0: F0 E8 24 00 C3 FC 8A D8 2E 8E 06 DF 03 8A C1 8A  // ..$.............
    7DB0: E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7  // ..m.u...........
    7DC0: F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A  // ..+.......*..,Q.
    7DD0: CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B  // .VW..........+.+
    7DE0: F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3  // .... ... .......
    7DF0: A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA  // ._^....Y........
    7E00: 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00  // W..........+....
    7E10: 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE  //  ........_....u.
    7E20: C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB  // ........+.8.v.2.
    7E30: 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49  // Q......Y2..P..>I
    7E40: 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50  // ..t............P
    7E50: F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50  // .....RS..2.....P
    7E60: 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B  // ....P...L...[..[
    7E70: 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0  // Z.R...J...2.....
    7E80: 5A C3 8B E8 83 E5 0F 2E 8A A6 32 7E 8B E8 C1 ED  // Z.........2~....
    7E90: 04 83 E5 0F 2E 8A 86 32 7E C3 00 03 0C 0F 30 33  // .......2~.....03
    7EA0: 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA  // <?........&.....
    7EB0: 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2  // .....t........u.
    7EC0: 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1  // .V.E...c........
    7ED0: FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02  // ....R.....&J....
    7EE0: 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50  // 2...Z.S..2.....P
    7EF0: 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4  // ......[.R..2.R..
    7F00: F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03  // .&...&J.Z....t..
    7F10: 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6  // .L...u.Z.R...J..
    7F20: E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4  // .2.......N......
    7F30: 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF  // ....Z....&J.....
    7F40: 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03  // .....t...2..&L..
    7F50: F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8  // ................
    7F60: FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3  // .... .......2...
    7F70: C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E  // .>..&.}......S..
    7F80: E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF  // ................
    7F90: B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8  // ..U......<.t....
    7FA0: 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE  // v.<Ut.2.[.......
    7FB0: C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04  // ........[....6..
    7FC0: 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32  // ....t%..*.....R2
    7FD0: F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B  // ........+.Q....+
    7FE0: FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A  // .+.Y..Z.........
    7FF0: C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA  // .........2......
    8000: D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3  // ....+.....+.Nu..
    8010: 2E 8E 1E D9 03 89 0E 60 04 8A C5 24 60 A8 20 74  // .......`...$`. t
    8020: 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00  // ................
    8030: 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87  // .>I..t....t.....
    8040: 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38  // ..t..B..6......8
    8050: CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38  // .~...td.......\8
    8060: D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9  // .tX.....|.......
    8070: EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38  // .I...~D..*...u.8
    8080: CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E  // .t8..8.t2....8.~
    8090: 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF  // ....~.........}.
    80A0: 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9  // ....8.t.........
    80B0: 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE  // *...............
    80C0: C3 2E 8E 1E D9 03 A2 62 04 32 E4 8B F0 F7 26 4C  // .......b.2....&L
    80D0: 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07  // ..N....z.t..>I..
    80E0: 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8  // w............P..
    80F0: 27 FE C3 2E 8E 1E D9 03 8A 26 49 04 E8 7E 9C 74  // '........&I..~.t
    8100: 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07  // ...P.....H.t....
    8110: 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C  // t.w..w.........|
    8120: 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E  // .t...N..........
    8130: 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90  // J.R.&........Z..
    8140: FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52  // ...0......g....R
    8150: 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03  // ..J.....&.......
    8160: F0 5A E8 55 FE C3 2E 8E 1E D9 03 8A 26 49 04 E8  // .Z.U........&I..
    8170: E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04  // ..t....t.w@.....
    8180: E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A  // .S..............
    8190: E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26  // ......+>J....R.&
    81A0: 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E  // ...&J......+.Z..
    81B0: 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03  // J.............|.
    81C0: 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2  // t...............
    81D0: F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7  // .R..J..&....+...
    81E0: 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E D9 03 2E 8E  // +.Z.............
    81F0: 06 DF 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E  // ....].t..>I..|..
    8200: 8E 06 DD 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B  // ....t.....I...&.
    8210: 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB  // ....F...P.......
    8220: 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00  // ..+....>I..u....
    8230: 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46 00 45  // &...F.E&... .F.E
    8240: 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04  // ..P.............
    8250: 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2  // ..V.... .O......
    8260: F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09  // ...+..>..2....u.
    8270: 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6  // &.}..u..........
    8280: C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03  // ..t.GVW.._^t#...
    8290: FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E  // ....t.G..u...t..
    82A0: 8E 1E D9 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0  // .....>|.......2.
    82B0: 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C  // .......F...>I..|
    82C0: 05 75 02 EB 5A C3 2E 8E 06 DB 03 E8 18 FC 8B F0  // .u..Z...........
    82D0: 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE  // ....+...........
    82E0: 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4  // ..>I..r.....`u..
    82F0: 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9  // .....u..........
    8300: 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03  // ...Q..&.....F.E.
    8310: 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E  // 6J...X....2..D..
    8320: 8E 06 DB 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4  // .....P...2.R..2.
    8330: F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85  // .&J..&..Z.......
    8340: 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6  // .+...S.>J.O.....
    8350: 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80  // ....2.&......t..
    8360: CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8  // ..F...f.E..Ku.[.
    8370: 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E  // ..2....3........
    8380: 1E D9 03 2E 8E 06 DF 03 8A 26 49 04 E8 C4 F8 74  // .........&I....t
    8390: 0F 2E 8E 06 DD 03 80 FC 07 74 05 7C 3D E9 0B 02  // .........t.|=...
    83A0: 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0  // ......2.....P...
    83B0: A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74  // .J...2.........t
    83C0: 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED  // ....L.....u.....
    83D0: 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 DF 03  // u.....G...P.....
    83E0: A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B  // .P.......P..&J..
    83F0: E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36  // .X..t.$..6|....6
    8400: 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69  // ....2.........ti
    8410: D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B  // .....U..........
    8420: C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB  // .P.....u'..U.#..
    8430: AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA  // ..N.#.&......N..
    8440: 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3  // u......>.X.r....
    8450: AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26  // ....#.&1...%.#.&
    8460: 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF  // 1.. ..P..u......
    8470: 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3  // >.X.I......P....
    8480: 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50  // .t..&0..&0.. ..P
    8490: FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2  // .........?.X. ..
    84A0: DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F  // .....&......O...
    84B0: F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE  // ......?.X.......
    84C0: C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04  // .8.r.2..........
    84D0: F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2  // ....2...f...Q...
    84E0: 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA  // f...J...du..h...
    84F0: 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52  // Zu..`.....u....R
    8500: F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66  // ..f...f...P.f..f
    8510: C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7  // .....f.......f..
    8520: 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01  // .Z..J....P.P....
    8530: 03 F0 2E 8E 06 DB 03 58 57 51 50 9C FC 8B CD E8  // .......XWQP.....
    8540: 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26  // ;..........s...&
    8550: 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59  // ..fG..u.f.....XY
    8560: 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49  // _.....8.r.Q2...I
    8570: 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33  // .......Y+.....R3
    8580: C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 ED 97  // ...f.....f......
    8590: 74 16 38 E0 74 12 0F B6 D0 E8 63 C7 8A E0 66 C1  // t.8.t.....c...f.
    85A0: C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B  // ....f...Z.....|.
    85B0: 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80  // ......b.........
    85C0: FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF  // ..u.......PS..2.
    85D0: D1 E3 8B 97 50 04 5B 2E 8E 06 DB 03 E8 07 F9 8B  // ....P.[.........
    85E0: F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26  // .....X2.R.6J.V.&
    85F0: 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75  // ...6.....u..|..u
    8600: 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2  // ...F.........um.
    8610: C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57  // .....ZXPRJ..WQQW
    8620: 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76  // ..2......_G..8.v
    8630: 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F  // .2...I..G..Y..Y_
    8640: BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC  // ........[KZQW...
    8650: 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76  // &.%....._G+.B;.v
    8660: 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE  // .3...I..G..Y....
    8670: 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03  // ................
    8680: 18 EF EB BC 2E 8E 1E D9 03 80 3E 63 04 B4 74 0B  // ..........>c..t.
    8690: BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A  // ......u..B......
    86A0: FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66  // .u.......&f...&f
    86B0: 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8  // ..-...f... .....
    86C0: 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20  // ..t..f.$....t.. 
    86D0: A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8  // .f.$......S...~.
    86E0: C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF  // .SP.............
    86F0: E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03  // .`.t......,...t.
    8700: 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10  // &.........t.&.].
    8710: 58 5B C3 8A E0 1E 2E 8E 1E D9 03 80 3E 49 04 33  // X[..........>I.3
    8720: 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C  // ............0...
    8730: FA E8 62 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3  // ..b.............
    8740: EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB  // ...t.G&.........
    8750: B0 20 EE 9D C3 2E 8E 1E D9 03 8A 26 49 04 E8 F2  // . .........&I...
    8760: F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC  // .t....w.t.......
    8770: 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08  // .|.tL...........
    8780: EF 2E 8E 1E DB 03 F6 C3 80 75 1C B2 C4 B8 02 FF  // .........u......
    8790: EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF  // ..%.......%...%.
    87A0: B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A  // ................
    87B0: E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB  // ...%...%........
    87C0: E1 50 2E 8E 06 DB 03 A1 4A 04 C1 E0 03 F7 E2 03  // .P......J.......
    87D0: C1 8B F8 58 26 88 05 C3 2E 8E 1E D9 03 8A 26 49  // ...X&.........&I
    87E0: 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5  // ..o.t....w.t.._.
    87F0: 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35  // ...F.....|.t)..5
    8800: F7 8A CC 2E 8E 1E DB 03 BA CE 03 32 FF B8 04 03  // ...........2....
    8810: EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0  // .....".t......}.
    8820: 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1  // ...~...J........
    8830: 8B F8 2E 8E 1E DB 03 8A 05 8B EC 88 46 1A C3 2E  // ............F...
    8840: 8E 1E D9 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50  // .....>b.....2..P
    8850: 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06  // .......I.<.vJ...
    8860: DF 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6  // .....u3..J......
    8870: E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA  // .........N......
    8880: D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0  // ..A..8.sY....c..
    8890: 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 DD 03 80  // ................
    88A0: F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75  // ..t....u.2...<.u
    88B0: 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92  // .:6..u..........
    88C0: F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07  // .u.........L..<.
    88D0: 75 04 E8 2B 7E C3 3C 08 75 83 0A D2 74 DE FE CA  // u..+~.<.u...t...
    88E0: EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6  // ..2.2.+.:6..t...
    88F0: 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A  // ........c.......
    8900: E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E  // ....+.+.&.e.P.>N
    8910: 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F  // ................
    8920: F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8  // ....X. .........
    8930: 88 C5 FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32  // ....:.J.t....2.2
    8940: D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E  // ...:6..t........
    8950: 8E 06 DF 03 E8 FC F2 74 0E 2E 8E 06 DD 03 80 F9  // .......t........
    8960: 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7  // .t.2............
    8970: 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A  // O..J...3..6....J
    8980: 04 FE CA B0 01 E9 70 F7 2E 8E 1E D9 03 F6 06 87  // ......p.........
    8990: 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00  // ..t..B..v....F..
    89A0: C3 2E 8E 1E D9 03 8A DF 32 FF D1 E3 89 97 50 04  // ........2.....P.
    89B0: D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E  // ..8.b.u....\....
    89C0: 1E D9 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60  // .....2.....P...`
    89D0: 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E D9 03 A0  // ....N..V........
    89E0: 87 04 24 80 0A 06 49 04 8A 26 4A 04 8A 3E 62 04  // ..$...I..&J..>b.
    89F0: 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 2E  // ...F..^..N..V...
    8A00: 8E 1E D9 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01  // ....<...PR......
    8A10: 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04  // ZXt..>c..t...>c.
    8A20: B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6  // .u.<.s.2........
    8A30: CA 89 02 8A 22 8A 34 8A 69 8A B3 89 B3 89 B3 89  // ....".4.i.......
    8A40: 8E 8A A6 8A AA 8A B3 89 B3 89 B3 89 B3 89 B3 89  // ................
    8A50: B3 89 D8 8A B3 89 DC 8A F7 8A B3 89 36 8B B3 89  // ............6...
    8A60: 44 8B 5F 8B 66 8B 72 8B 96 8B 80 3E 49 04 13 74  // D._.f.r....>I..t
    8A70: 15 E8 FC F4 8B C3 86 E0 E8 AD EF 0B ED 74 07 8A  // .............t..
    8A80: C7 32 FF 26 88 01 E8 D0 F4 C3 E8 E3 F4 8A C7 E8  // .2.&............
    8A90: 81 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04  // ....t.&.}....>I.
    8AA0: 13 74 E3 06 E8 C9 F4 1F 0B ED 74 07 8B F2 B9 11  // .t........t.....
    8AB0: 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C  // ........2.......
    8AC0: FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 44 FC EB  // .............D..
    8AD0: B5 80 FB 01 77 B0 E8 80 F4 B2 C0 B0 30 E8 38 F1  // ....w.......0.8.
    8AE0: 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E  // $..&e.....t.....
    8AF0: 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 18 F1  // e. .............
    8B00: 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11  // .... ....N..x...
    8B10: EB E4 8B FA E8 42 F4 B9 10 00 32 E4 B2 C0 8A C4  // .....B....2.....
    8B20: 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE  // ...B.&....J..G..
    8B30: 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 20 F4 EB 5A  // .....B..&... ..Z
    8B40: E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01  // ......Q..&.5&.m.
    8B50: 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A  // &.M.......CY....
    8B60: DB 75 1A E8 F3 F3 B2 C0 B0 30 E8 AB F0 24 7F F6  // .u.......0...$..
    8B70: C7 01 74 02 0C 80 B4 30 E8 AD EE EB 1D FE CB 75  // ..t....0.......u
    8B80: 1C E8 D5 F3 B2 C0 B0 30 E8 8D F0 EE A8 80 75 03  // .......0......u.
    8B90: C0 E7 02 B4 34 8A C7 E8 8E EE E8 BC F3 C3 8A C3  // ....4...........
    8BA0: E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B  // ......N..v....Q.
    8BB0: C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83  // ....&.5&.m.&.M..
    8BC0: C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6  // ..CY............
    8BD0: 03 EC 32 E4 8B EC 89 46 0E C3 E8 7C F3 B2 C0 B0  // ..2....F...|....
    8BE0: 34 E8 34 F0 8A F8 EE B0 30 E8 2C F0 B3 01 A8 80  // 4.4.....0.,.....
    8BF0: 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B  // u.........^...Q.
    8C00: C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE  // ..s..*....R.CY..
    8C10: C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00  // ......t.......9.
    8C20: C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00  // ......t.........
    8C30: C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1  // .P....P.;..P....
    8C40: 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE  // Y..Y...d....2|..
    8C50: C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B  // .......X.R.9.ZS.
    8C60: DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1  // .......B........
    8C70: EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42  // ..[....S......BB
    8C80: EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A  // ................
    8C90: C8 8A F7 9D 5B C3 50 51 E8 BE F2 B9 FF 7F EC A8  // ....[.PQ........
    8CA0: 08 75 02 E2 F9 59 58 C3 2E 8E 1E D9 03 8B F8 24  // .u...YX........$
    8CB0: 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5  // ................
    8CC0: 5A 8C 62 8C 77 8C 15 8D 71 8D 3C 03 74 08 3C 04  // Z.b.w...q.<.t.<.
    8CD0: 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C  // ...............<
    8CE0: 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 28 EF  // .w.PSPR..c....(.
    8CF0: 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12  // ........@t......
    8D00: E8 15 EF 40 A3 85 04 B0 09 E8 0C EF A8 80 74 04  // ...@..........t.
    8D10: D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0  // .........=..s...
    8D20: 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E  // .=..s....=|.s..^
    8D30: 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6  // .=J.s........ZX.
    8D40: 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74  // .....].[X..2...t
    8D50: 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A  // ...<.t...<.t....
    8D60: CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01  // ..........~.....
    8D70: 87 1E 85 04 53 E8 98 F2 5B E8 85 02 C3 0A C0 74  // ....S...[......t
    8D80: 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74  // ...t...t8..t<..t
    8D90: 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE  // @...|...~.......
    8DA0: CA 0A DB 74 07 32 FF 2E 8A 97 55 8D 89 0E 85 04  // ...t.2....U.....
    8DB0: 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18  // ................
    8DC0: 2A E8 09 03 B9 0E 00 EB D6 BD A2 5C B9 08 00 EB  // *..........\....
    8DD0: CA BD B5 64 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85  // ...d.......u....
    8DE0: 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A  // ........w5...w..
    8DF0: FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80  // .u...|..&..... .
    8E00: FF 02 75 0B 8C CD 8E C5 2E 8B 2E 94 75 EB 10 0E  // ..u.........u...
    8E10: 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF C8 8D 8B  // ...2............
    8E20: C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3  // ....N..V..F..F..
    8E30: B5 64 A2 5C A2 60 A2 64 B5 64 B5 74 53 06 8A 26  // .d.\.`.d.d.tS..&
    8E40: 49 04 E8 D2 C2 26 8A 47 02 26 8A 67 33 F6 C4 01  // I....&.G.&.g3...
    8E50: 74 22 BD B5 64 3C 10 7D 0E E8 71 02 8C 06 0E 01  // t"..d<.}..q.....
    8E60: 3C 0E 7D 07 BD A2 5C 8C 0E 0E 01 89 2E 0C 01 E8  // <.}...\.........
    8E70: 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D  // ...-..<.}...<.t.
    8E80: 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47  // ....<.t......&.G
    8E90: 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9  // ..t......2......
    8EA0: 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF  // ..[.............
    8EB0: B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B  // ................
    8EC0: D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00  // ...P$...t"..3...
    8ED0: 01 3C 04 75 07 B7 10 BD B5 64 EB 10 FE C8 75 07  // .<.u.....d....u.
    8EE0: B7 0E E8 E8 01 EB 05 B7 08 BD A2 5C E8 2D 00 58  // ...........\.-.X
    8EF0: A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2  // ..t.............
    8F00: CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58  // .......u.....P.X
    8F10: EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75  // ....2..........u
    8F20: 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD  // .....u.&.~..u...
    8F30: 80 1E 06 1F 2E 8E 06 DB 03 8B FA C1 E7 05 B0 40  // ...............@
    8F40: 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0  // S.....[...t.. ..
    8F50: 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6  // .......(2...2.Q.
    8F60: C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20  // ..t.F...... t.. 
    8F70: 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE  // .+...Y...t.F..u.
    8F80: 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D  // ...&I.P.W.>..&.}
    8F90: 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C  // .....t0.....&..<
    8FA0: FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE  // .t$8.t.G....&...
    8FB0: C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89  // ....&.E....&.}..
    8FC0: 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01  // >......_.X.&.G3.
    8FD0: 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74  // t......&._.....t
    8FE0: 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49 04  // ....&..<.t.G8.I.
    8FF0: 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00  // u.&..2..........
    9000: C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA  // ...c..&.........
    9010: 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A  // ...t....B.$....J
    9020: B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A  // ...B.$..........
    9030: 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE  // ......>...u.....
    9040: 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0  // ........t...H...
    9050: 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6  // ...c...J..&.....
    9060: E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06  // .......L...&I.P.
    9070: 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B  // W.>..&.}.....tJ.
    9080: EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47  // ....&..<.t>8.t.G
    9090: EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26  // ....&.=&.].&.M.&
    90A0: 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84  // .U.&.E.<.t...P..
    90B0: 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26 C4  // ....&.....X...&.
    90C0: 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51  // }...2...._.X.PSQ
    90D0: 52 2E A1 E3 03 0B C0 74 09 2E 8B 2E 94 75 0E 07  // R......t.....u..
    90E0: EB 08 B8 30 11 B7 02 E8 D0 BD 5A 59 5B 58 C3 3C  // ...0......ZY[X.<
    90F0: 04 7C 01 C3 E3 FD 53 2E 8E 1E D9 03 86 FB 32 FF  // .|....S.......2.
    9100: D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0  // ......P..5[..V..
    9110: 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB  // QS&.F.E<...u.2..
    9120: 40 3C 0A 74 32 3C 07 75 05 E8 D4 75 EB 62 3C 08  // @<.t2<.u...u.b<.
    9130: 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74 05  // u...tZ...'....t.
    9140: 26 8A 5E 00 45 B9 01 00 B4 09 E8 6D BD FE C2 3A  // &.^.E......m...:
    9150: 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE  // .J.r.2...:6..s..
    9160: C6 89 15 EB 2B 50 E8 EA EA 75 08 B8 00 08 E8 49  // ....+P...u.....I
    9170: BD EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04  // ....>I..t.2..>b.
    9180: 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15  // S..U.%.][.>b.X..
    9190: 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A  // [Y..Z....u.....:
    91A0: 3E 62 04 75 03 E8 71 ED C3 E9 64 FF 33 C9 8A 36  // >b.u..q...d.3..6
    91B0: 84 04 8A 16 4A 04 FE CA B8 01 06 E8 FC BC C3 2E  // ....J...........
    91C0: 8E 1E D9 03 0A C0 75 0D E8 18 00 8B EC 89 5E 0E  // ......u.......^.
    91D0: C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46  // .F...<.u..A....F
    91E0: 1A 1A C3 A0 8A 04 BF 55 92 2E 3A 05 72 04 BB FF  // .......U..:.r...
    91F0: FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05  // ..2.......]...t.
    9200: 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74  // ..u........$0<0t
    9210: 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 55 92  // ....u.....t...U.
    9220: 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E  // ...2.....;.t....
    9230: 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2  // ;.t......8.~....
    9240: 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07 00  // ...........t....
    9250: BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8 1C  // ......t.........
    9260: ED 74 21 B7 01 E8 C9 E9 80 FA D4 74 17 86 FB C3  // .t!........t....
    9270: BA D4 03 E8 07 ED 74 0C B7 02 E8 B4 E9 80 FA B4  // ......t.........
    9280: 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03  // t...............
    9290: 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01 0F  // ................
    92A0: 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F  // ................
    92B0: 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01 08  // ...........?....
    92C0: 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05 02  // ................
    92D0: 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07 06  // ................
    92E0: 07 00 55 02 34 00 90 00 D2 00 00 00 00 00 00 00  // ..U.4...........
    92F0: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    9300: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    9310: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    9320: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    9330: BB D0 05 E8 00 01 00 00 C1 E8 10 F6 C4 40 75 2B  // .............@u+
    9340: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    9350: 66 8B C2 66 BB 13 00 E8 E8 00 00 00 66 BB 12 00  // f..f........f...
    9360: E8 DF 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .....fX2.fPX_[f^
    9370: 66 5A C3 90 66 B8 4F 03 52 51 53 57 66 56 50 8A  // fZ..f.O.RQSWfVP.
    9380: FB 80 E3 7F 0A DB 75 26 E8 67 FF FF FF C1 E2 10  // ......u&.g......
    9390: 66 8B D1 C1 E2 02 66 BE 00 00 E8 C7 00 00 00 66  // f.....f........f
    93A0: BE 00 02 E8 BE 00 00 00 66 58 32 E4 66 50 58 66  // ........fX2.fPXf
    93B0: 5E 5F 5B 59 5A C3 66 B8 4F 03 66 51 57 56 53 52  // ^_[YZ.f.O.fQWVSR
    93C0: 50 8A FB 80 E3 7F 0A DB 75 39 8A DA 57 5A E8 21  // P.......u9..WZ.!
    93D0: FF FF FF 66 33 F6 66 53 66 BB D0 05 E8 57 00 00  // ...f3.fSf....W..
    93E0: 00 80 E4 01 66 5B 80 E7 FE 0A FC 66 BE 00 00 E8  // ....f[.....f....
    93F0: DE 00 00 00 66 BE 00 02 E8 D5 00 00 00 66 58 32  // ....f........fX2
    9400: E4 66 50 58 5A 5B 5E 5F 66 59 C3 90 53 50 51 F6  // .fPXZ[^_fY..SPQ.
    9410: C7 80 74 20 66 BB 9C 1B E8 1B 00 00 00 A8 01 74  // ..t f..........t
    9420: 13 66 B9 FF FF 66 BB A3 1B E8 0A 00 00 00 A8 01  // .f...f..........
    9430: 75 02 E2 F1 59 58 5B C3 66 52 E8 11 00 00 00 ED  // u...YX[.fR......
    9440: 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90  // fZ..fR......fZ..
    9450: 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF  // f..P3.f..f......
    9460: 66 83 C2 04 58 C3 52 E8 A0 FF FF FF 81 E2 FF FF  // f...X.R.........
    9470: FF 02 66 BB 04 1A E8 BD FF FF FF 25 00 00 00 FD  // ..f........%....
    9480: 03 C2 66 25 00 F0 E8 B9 FF FF FF 66 BB 05 1A E8  // ..f%.......f....
    9490: B0 FF FF FF 66 81 E2 FF 0F 66 BB 01 1A E8 96 FF  // ....f....f......
    94A0: FF FF 24 03 8A C8 66 D3 EA 66 BB 06 1A E8 86 FF  // ..$...f..f......
    94B0: FF FF 66 03 C2 66 BB 0D 1A E8 86 FF FF FF 66 8B  // ..f..f........f.
    94C0: C2 24 FC C1 E0 10 66 BB 5C 1B E8 75 FF FF FF 5A  // .$....f.\..u...Z
    94D0: C3 90 52 66 53 66 51 E8 30 FF FF FF 33 C0 8A C3  // ..RfSfQ.0...3...
    94E0: 66 53 66 BB 79 1A E8 59 FF FF FF 66 5B 66 49 66  // fSf.y..Y...f[fIf
    94F0: 81 E1 FF 00 66 41 32 C0 66 53 66 BB 78 1A E8 41  // ....fA2.fSf.x..A
    9500: FF FF FF 66 5B 26 8A 42 02 C1 E0 0A 26 8A 42 01  // ...f[&.B....&.B.
    9510: C1 E0 0A 26 8A 02 C1 E0 02 F6 C7 01 75 03 C1 E0  // ...&........u...
    9520: 02 66 53 66 BB 7C 1A E8 18 FF FF FF 66 5B 83 C2  // .fSf.|......f[..
    9530: 04 E2 D2 66 59 66 5B 5A C3 00 6D 38 60 38 60 38  // ...fYf[Z..m8`8`8
    9540: 60 38 4B 38 4B 38 4B 38 4B 38 8D 34 04 35 2E 35  // `8K8K8K8K8.4.5.5
    9550: 6F 36 6E 36 6E 36 B4 36 19 37 49 37 06 38 2F 38  // o6n6n6.6.7I7.8/8
    9560: 2F 38 A6 36 99 36 99 36 99 36 99 36 99 36 B4 36  // /8.6.6.6.6.6.6.6
    9570: 19 37 49 37 06 38 34 38 7A 38 2F 38 2F 38 FF FF  // .7I7.848z8/8/8..
    9580: FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00  // ................
    9590: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00  // ................
    95A0: 08 10 00 08 10 18 00 08 10 18 91 32 01 91 32 02  // ...........2..2.
    95B0: 9F 46 03 7F 46 03 B6 33 03 6A 33 03 92 32 04 AB  // .F..F..3.j3..2..
    95C0: 32 04 BB 32 04 91 32 03 00 00 00 00 3E 3A 00 02  // 2..2..2.....>:..
    95D0: 3E 3A 01 02 3E 3A 02 02 3E 3A 03 02 3E 3A 04 02  // >:..>:..>:..>:..
    95E0: 3E 3A 05 02 38 3C 00 02 38 3C 01 02 38 3C 02 02  // >:..8<..8<..8<..
    95F0: 38 3C 03 02 38 3C 04 02 38 3C 05 02 6D 3C 00 02  // 8<..8<..8<..m<..
    9600: 6D 3C 01 02 6D 3C 02 02 6D 3C 03 02 6D 3C 04 02  // m<..m<..m<..m<..
    9610: 6D 3C 05 02 A8 3E 00 02 A8 3E 01 02 A8 3E 02 02  // m<...>...>...>..
    9620: A8 3E 03 02 A8 3E 04 02 A8 3E 05 02 A8 3E 00 02  // .>...>...>...>..
    9630: A8 3E 01 02 A8 3E 02 02 A8 3E 03 02 A8 3E 04 02  // .>...>...>...>..
    9640: A8 3E 05 02 6F 3D 00 02 6F 3D 01 02 6F 3D 02 02  // .>..o=..o=..o=..
    9650: 6F 3D 03 02 6F 3D 04 02 6F 3D 05 02 AB 3D 00 02  // o=..o=..o=...=..
    9660: AB 3D 01 02 AB 3D 02 02 AB 3D 03 02 AB 3D 04 02  // .=...=...=...=..
    9670: AB 3D 05 02 1C 3D 00 02 1C 3D 01 02 1C 3D 02 02  // .=...=...=...=..
    9680: 1C 3D 03 02 1C 3D 04 02 1C 3D 05 02 50 3D 00 02  // .=...=...=..P=..
    9690: 50 3D 01 02 50 3D 02 02 50 3D 03 02 50 3D 04 02  // P=..P=..P=..P=..
    96A0: 50 3D 05 02 00 41 00 00 33 41 01 00 33 41 02 00  // P=...A..3A..3A..
    96B0: 20 41 00 00 0E 40 00 02 07 3E 00 02 07 3E 01 02  //  A...@...>...>..
    96C0: 07 3E 02 02 07 3E 03 02 07 3E 04 02 07 3E 05 02  // .>...>...>...>..
    96D0: 26 40 00 02 7B 42 05 00 7B 42 01 00 7B 42 00 00  // &@..{B..{B..{B..
    96E0: 7B 42 02 00 BC 42 00 00 BC 42 02 00 01 43 00 00  // {B...B...B...C..
    96F0: 91 3F 00 02 91 3F 01 02 91 3F 02 02 91 3F 03 02  // .?...?...?...?..
    9700: 91 3F 04 02 91 3F 05 02 4D 41 00 00 75 41 00 00  // .?...?..MA..uA..
    9710: F6 41 00 00 71 42 00 00 55 3E 00 02 55 3E 01 02  // .A..qB..U>..U>..
    9720: 55 3E 02 02 55 3E 03 02 55 3E 04 02 55 3E 05 02  // U>..U>..U>..U>..
    9730: 70 42 00 01 70 42 00 01 74 3B 00 02 74 3B 01 02  // pB..pB..t;..t;..
    9740: 74 3B 02 02 74 3B 03 02 74 3B 04 02 74 3B 05 02  // t;..t;..t;..t;..
    9750: 95 41 00 00 71 42 00 00 71 42 00 00 71 42 00 00  // .A..qB..qB..qB..
    9760: A6 40 00 00 98 3C 00 02 98 3C 01 02 98 3C 02 02  // .@...<...<...<..
    9770: 98 3C 03 02 98 3C 04 02 98 3C 05 02 C7 3C 00 02  // .<...<...<...<..
    9780: C7 3C 01 02 C7 3C 02 02 C7 3C 03 02 C7 3C 04 02  // .<...<...<...<..
    9790: C7 3C 05 02 FD 3C 00 02 FD 3C 01 02 FD 3C 02 02  // .<...<...<...<..
    97A0: FD 3C 03 02 FD 3C 04 02 FD 3C 05 02 B8 41 00 00  // .<...<...<...A..
    97B0: DB 41 00 00 99 3D 01 02 99 3D 02 02 F5 3D 01 02  // .A...=...=...=..
    97C0: F5 3D 02 02 A6 00 01 01 90 AA 26 AB 7E AB B6 C9  // .=........&.~...
    97D0: FA D3 36 AC 00 00 C0 C9 00 00 4A AD 4A AE F6 AF  // ..6.......J.J...
    97E0: 18 B1 E4 B5 6C B7 74 B7 70 D1 A2 D1 A4 BC B6 BD  // ....l.t.p.......
    97F0: D8 BD 00 00 00 00 00 00 00 00 00 00 00 00 66 BE  // ..............f.
    9800: 00 00 00 00 B2 DD 52 DE 00 00 26 C1 9E C1 12 C2  // ......R...&.....
    9810: 00 00 50 C2 7C C2 00 00 9E C2 B8 C2 38 C3 FE C3  // ..P.|.......8...
    9820: AE C5 F8 C5 D4 E3 8E C6 CC C6 A4 C7 00 00 C2 E0  // ................
    9830: F8 C8 06 E3 DA C9 DC DF 0C CC 6C CC 76 CC 80 CC  // ..........l.v...
    9840: BC CC 6C CE 62 D6 74 CE E4 CF E4 D0 00 00 B2 D1  // ..l.b.t.........
    9850: 00 00 94 E2 00 00 FE B7 52 BC 00 00 00 00 00 00  // ........R.......
    9860: 8C D6 D2 D7 0A DB 56 DD 76 D3 4A 00 01 01 00 00  // ......V.v.J.....
    9870: 00 00 00 00 4C 98 30 99 9C 99 D0 99 00 00 02 AA  // ....L.0.........
    9880: 00 00 1E 9A FA 9A 06 9B 26 9B 9A 9B B2 9B 00 00  // ........&.......
    9890: EA A9 00 00 F4 9E 00 00 00 00 FA 9E 2C A3 58 A0  // ............,.X.
    98A0: 00 00 5E A9 86 A9 AA A3 00 00 00 00 0C A8 18 A9  // ..^.............
    98B0: 00 00 3A AA E4 00 01 02 4E 0C 80 02 C0 00 90 01  // ..:.....N.......
    98C0: 2D 00 20 00 40 00 01 00 03 00 00 00 00 00 00 00  // -. .@...........
    98D0: 02 00 E6 55 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // ...U........-...
    98E0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    98F0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    9900: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    9910: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    9920: 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03  // ......U<0*......
    9930: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    9940: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    9950: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    9960: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    9970: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    9980: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    9990: 00 00 00 00 00 00 EC 3C 6C 00 02 02 01 02 32 0F  // .......<l.....2.
    99A0: 30 75 00 00 30 75 00 00 00 00 00 00 40 7E 05 00  // 0u..0u......@~..
    99B0: 00 00 00 00 00 00 00 00 C0 27 09 00 00 00 00 00  // .........'......
    99C0: 92 F4 00 00 00 00 84 03 9A 0B 70 17 00 00 00 00  // ..........p.....
    99D0: 28 88 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // (...............
    99E0: 40 9C C4 09 10 27 52 03 1F 40 10 27 10 27 10 27  // @....'R..@.'.'.'
    99F0: 00 00 00 00 0E 06 00 00 00 00 00 00 00 00 00 00  // ................
    9A00: 00 00 00 00 34 00 02 01 00 00 00 00 00 2A 00 2A  // ....4........*.*
    9A10: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
    9A20: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
    9A30: 15 3F 3F 3F 15 3F 3F 3F 4E 00 01 03 00 00 00 00  // .???.???N.......
    9A40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A50: 00 00 00 00 06 00 00 00 00 00 20 00 00 00 00 00  // .......... .....
    9A60: 1D 3C 01 00 00 00 00 00 00 48 C8 00 07 5A 5A 07  // .<.......H...ZZ.
    9A70: 7D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // }...............
    9A80: 00 00 00 00 00 00 DC 00 01 01 68 48 6A 48 6B 48  // ..........hHjHkH
    9A90: 69 48 68 48 6A 48 6B 48 69 48 90 00 00 00 00 08  // iHhHjHkHiH......
    9AA0: 08 08 08 00 00 6C 48 6E 48 6F 48 6D 48 6C 48 6E  // .....lHnHoHmHlHn
    9AB0: 48 6F 48 6D 48 91 00 00 00 00 08 08 08 08 00 00  // HoHmH...........
    9AC0: 70 48 72 48 73 48 71 48 70 48 72 48 73 48 71 48  // pHrHsHqHpHrHsHqH
    9AD0: 92 00 00 00 00 08 08 08 08 00 00 74 48 76 48 77  // ...........tHvHw
    9AE0: 48 75 48 74 48 76 48 77 48 75 48 93 00 00 00 00  // HuHtHvHwHuH.....
    9AF0: 08 08 08 08 00 00 78 48 7A 48 7B 48 79 48 78 48  // ......xHzH{HyHxH
    9B00: 7A 48 7B 48 79 48 94 00 00 00 00 08 08 08 08 00  // zH{HyH..........
    9B10: 00 7C 48 7E 48 7F 48 7D 48 7C 48 7E 48 7F 48 7D  // .|H~H.H}H|H~H.H}
    9B20: 48 95 00 00 00 00 08 08 08 08 00 00 98 48 9A 48  // H............H.H
    9B30: 9B 48 99 48 98 48 9A 48 9B 48 99 48 96 00 00 00  // .H.H.H.H.H.H....
    9B40: 00 01 01 01 01 00 00 80 48 82 48 83 48 81 48 80  // ........H.H.H.H.
    9B50: 48 82 48 83 48 81 48 97 00 00 00 00 08 08 08 08  // H.H.H.H.........
    9B60: 00 00 0C 00 01 05 E0 FF 7F 00 20 00 20 00 20 00  // .......... . . .
    9B70: 01 01 8D 48 00 01 8D 48 08 02 8D 48 10 03 8D 48  // ...H...H...H...H
    9B80: 18 04 8D 48 1A 05 8D 48 1C 06 83 01 05 3D 74 00  // ...H...H.....=t.
    9B90: 01 01 10 01 06 12 11 01 16 12 13 01 06 6A 14 01  // .............j..
    9BA0: 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01  // .j...U...U......
    9BB0: 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01  // ..e...f...!...".
    9BC0: 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01  // .j#..U$...E...F.
    9BD0: 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01  // ..u...v......p..
    9BE0: 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01  // .p...q...q...r..
    9BF0: 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01  // .r...s...s...t..
    9C00: 0A 74 18 00 02 03 01 08 04 08 09 01 02 08 00 00  // .t..............
    9C10: 00 00 00 00 00 00 00 00 00 00 41 03 07 01 00 4D  // ..........A....M
    9C20: 00 81 06 00 00 9A 28 00 00 19 00 00 00 00 80 06  // ......(.........
    9C30: 01 40 0D 03 00 E8 6E 03 00 32 00 19 00 4D 00 A1  // .@....n..2...M..
    9C40: 02 98 02 00 00 B5 01 3B 01 77 00 F9 00 DE 01 06  // .......;.w......
    9C50: 03 00 00 D1 02 00 00 20 03 3A 03 4C 11 02 00 53  // ....... .:.L...S
    9C60: 07 00 00 00 00 00 00 01 02 00 00 00 00 00 00 00  // ................
    9C70: 00 08 00 00 00 00 00 00 00 00 00 00 00 07 00 02  // ................
    9C80: 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00  // ................
    9C90: 00 00 10 EE 02 00 00 00 00 00 00 02 FF 00 00 00  // ................
    9CA0: 00 00 00 03 FF 00 00 00 00 00 00 04 FF 00 00 00  // ................
    9CB0: 00 00 00 05 FF 00 00 00 00 00 00 06 FF 00 00 00  // ................
    9CC0: 00 00 00 07 FF 00 00 00 00 00 00 08 FF 00 00 00  // ................
    9CD0: 00 00 00 20 03 00 00 00 00 00 00 52 03 00 00 00  // ... .......R....
    9CE0: 00 00 00 84 03 00 00 00 00 00 00 B6 03 00 00 00  // ................
    9CF0: 00 00 00 E8 03 00 00 00 00 00 00 1A 04 00 00 00  // ................
    9D00: 00 00 00 4C 04 00 00 00 00 00 00 7E 04 00 00 00  // ...L.......~....
    9D10: 00 00 00 00 08 84 03 00 00 00 00 00 00 02 FF 00  // ................
    9D20: 00 00 00 00 00 03 FF 00 00 00 00 00 00 04 FF 00  // ................
    9D30: 00 00 00 00 00 05 FF 00 00 00 00 00 00 06 FF 00  // ................
    9D40: 00 00 00 00 00 07 FF 00 00 00 00 00 00 08 FF 00  // ................
    9D50: 00 00 00 00 00 01 08 00 00 00 30 75 00 00 00 00  // ..........0u....
    9D60: 00 80 00 00 00 00 01 E6 FF 60 EA 00 00 00 00 00  // .........`......
    9D70: 00 00 00 00 00 02 E6 FF 90 5F 01 00 00 00 00 00  // ........._......
    9D80: 00 00 00 00 03 E6 FF E8 C5 01 00 00 00 00 00 00  // ................
    9D90: 00 00 00 04 E6 FF A4 E1 01 00 00 00 00 00 00 00  // ................
    9DA0: 00 00 05 E6 FF 0C F2 01 00 00 00 00 00 00 00 00  // ................
    9DB0: 00 06 E6 FF 3C 03 02 00 00 00 00 00 00 00 00 00  // ....<...........
    9DC0: 07 00 00 40 13 02 00 00 00 00 00 00 00 00 00 00  // ...@............
    9DD0: 03 00 20 03 00 00 E8 03 30 75 00 00 00 00 08 52  // .. .....0u.....R
    9DE0: 03 00 00 E8 03 A0 86 01 00 00 00 0B B6 03 00 00  // ................
    9DF0: E8 03 40 0D 03 00 00 00 00 08 08 00 00 90 E2 00  // ..@.............
    9E00: 00 F8 24 01 00 18 F6 00 00 00 00 00 00 A8 DE 00  // ..$.............
    9E10: 00 09 B4 FF 18 F6 00 00 80 38 01 00 88 0D 01 00  // .........8......
    9E20: 00 00 00 00 00 FA 00 00 0A 9B FF A0 09 01 00 08  // ................
    9E30: 4C 01 00 F8 24 01 00 00 00 00 00 70 11 01 00 0B  // L...$......p....
    9E40: 82 FF 28 1D 01 00 A8 5B 01 00 68 3C 01 00 00 00  // ..(....[..h<....
    9E50: 00 00 E0 28 01 00 0C 69 FF C8 2C 01 00 60 67 01  // ...(...i..,..`g.
    9E60: 00 F0 4F 01 00 00 00 00 00 68 3C 01 00 0D 37 FF  // ..O......h<...7.
    9E70: 80 38 01 00 18 73 01 00 78 63 01 00 00 00 00 00  // .8...s..xc......
    9E80: 08 4C 01 00 0E 05 FF 38 44 01 00 D0 7E 01 00 00  // .L.....8D...~...
    9E90: 77 01 00 00 00 00 00 C0 57 01 00 0F 00 00 F0 4F  // w.......W......O
    9EA0: 01 00 A0 86 01 00 A0 86 01 00 00 00 00 00 78 63  // ..............xc
    9EB0: 01 00 01 17 00 00 02 00 18 00 00 09 03 A0 0F 64  // ...............d
    9EC0: 19 34 21 D0 07 A0 0F 70 17 94 2A 01 64 00 E4 12  // .4!....p..*.d...
    9ED0: 66 08 90 5F 01 00 46 2C 96 00 96 00 64 00 96 00  // f.._..F,....d...
    9EE0: 96 00 96 00 64 00 01 32 37 00 00 04 91 00 00 00  // ....d..27.......
    9EF0: 84 00 91 00 91 00 00 00 00 00 91 00 5A 00 00 00  // ............Z...
    9F00: 00 00 5E 00 02 00 69 00 50 00 50 00 73 00 73 00  // ..^...i.P.P.s.s.
    9F10: 5F 00 00 00 90 60 96 00 90 00 00 06 00 00 00 00  // _....`..........
    9F20: 01 06 00 00 01 02 00 01 01 02 00 02 01 02 00 02  // ................
    9F30: 01 02 00 02 01 02 00 02 01 02 01 03 00 10 00 00  // ................
    9F40: 00 00 00 00 00 10 00 00 00 00 00 00 02 10 00 00  // ................
    9F50: 00 00 00 00 00 01 00 00 00 00 00 00 05 00 01 01  // ................
    9F60: 96 00 5E 01 01 03 88 0E 48 00 00 00 FB 00 00 00  // ..^.....H.......
    9F70: 12 00 00 00 05 01 00 00 08 00 0A 00 13 31 00 11  // .............1..
    9F80: 20 21 80 00 0A 00 13 32 00 11 20 22 00 02 0A 00  //  !.....2.. "....
    9F90: 0C 31 00 11 21 21 00 04 0A 00 0C 32 00 11 21 22  // .1..!!.....2..!"
    9FA0: 00 08 0A 00 04 31 00 11 1E 21 05 00 00 00 13 31  // .....1...!.....1
    9FB0: 74 00 7A 00 00 00 13 32 8F 00 95 00 00 00 0C 31  // t.z....2.......1
    9FC0: AA 00 B0 00 00 00 0C 32 C5 00 CB 00 00 00 04 31  // .......2.......1
    9FD0: E0 00 E6 00 00 00 01 20 21 00 00 00 04 0C 01 00  // ....... !.......
    9FE0: 10 02 00 00 08 00 00 00 01 04 91 00 02 04 01 00  // ................
    9FF0: FF 01 20 22 00 00 00 04 0C 01 00 20 02 00 00 80  // .. "....... ....
    A000: 00 00 00 01 04 93 00 02 04 05 00 FF 01 21 21 00  // .............!!.
    A010: 00 00 04 0C 01 00 30 02 00 00 00 02 00 00 01 04  // ......0.........
    A020: 90 00 02 04 06 00 FF 01 21 22 00 00 00 04 0C 01  // ........!"......
    A030: 00 40 02 00 00 00 04 00 00 01 04 92 00 02 04 04  // .@..............
    A040: 00 FF 01 1E 21 00 00 00 04 0C 01 00 50 02 00 00  // ....!.......P...
    A050: 00 08 00 00 01 04 95 00 02 04 03 00 FF 05 00 00  // ................
    A060: 00 20 21 27 01 2D 01 00 00 20 22 32 01 38 01 00  // . !'.-... "2.8..
    A070: 00 21 21 3D 01 43 01 00 00 21 22 48 01 4E 01 00  // .!!=.C...!"H.N..
    A080: 00 1E 21 53 01 59 01 00 00 01 00 11 01 13 31 14  // ..!S.Y........1.
    A090: 04 0F 00 FF 01 00 11 01 13 32 14 04 0F 00 FF 01  // .........2......
    A0A0: 00 11 01 0C 31 14 04 0F 00 FF 01 00 11 01 0C 32  // ....1..........2
    A0B0: 14 04 0F 00 FF 01 00 11 01 04 31 14 04 0F 00 FF  // ..........1.....
    A0C0: D4 02 02 01 30 DC B4 00 00 80 03 00 2C 1F 00 00  // ....0.......,...
    A0D0: 14 00 00 00 DC 0C 14 00 00 00 D5 0C 33 03 00 00  // ............3...
    A0E0: D4 0C 00 02 0C 00 00 0B 29 00 20 0F D3 0B E0 1F  // ........). .....
    A0F0: 12 00 ED 09 10 A8 08 00 92 09 00 04 0C 00 94 09  // ................
    A100: 00 04 0C 00 93 09 00 04 0C 00 6D 09 1F 10 14 01  // ..........m.....
    A110: 2E 08 00 04 0C 00 30 08 80 0C 0C 00 2F 08 00 04  // ......0...../...
    A120: 0C 00 4F 09 B4 00 01 00 1E 09 00 04 0C 00 F3 09  // ..O.............
    A130: 1B 90 00 00 E9 09 5A 8A FF 00 EA 09 7A AE FF 08  // ......Z.....z...
    A140: EE 09 10 0C 00 00 EF 09 10 0C 00 00 E5 09 FC FD  // ................
    A150: FC FC E6 09 FD F8 FC FC E7 09 FC FC F3 FC E8 09  // ................
    A160: FC FC FC F5 F0 09 08 6F C3 00 F1 09 05 29 C3 00  // .......o.....)..
    A170: DA 09 11 40 04 00 D6 09 03 F8 6F 00 F2 09 10 10  // ...@......o.....
    A180: 87 01 F4 09 45 4F 70 08 F5 09 16 3A 02 03 DB 09  // ....EOp....:....
    A190: 03 03 00 00 E1 09 00 00 00 00 E2 09 04 00 00 00  // ................
    A1A0: 74 09 C9 00 00 00 76 09 00 30 00 00 7F 09 49 9A  // t.....v..0....I.
    A1B0: 24 00 80 09 51 12 25 02 3B 08 1C 3C 00 70 56 08  // $...Q.%.;..<.pV.
    A1C0: 3F 40 00 00 57 08 10 10 00 00 5A 08 97 09 00 00  // ?@..W.....Z.....
    A1D0: E7 0D 99 00 C1 50 E8 0D 99 01 C1 50 E9 0D 89 00  // .....P.....P....
    A1E0: C1 50 EA 0D 19 03 C1 50 51 08 99 00 C1 50 52 08  // .P.....PQ....PR.
    A1F0: 99 00 C1 50 53 08 99 00 C1 50 54 08 99 00 C1 50  // ...PS....PT....P
    A200: 5C 08 91 09 00 00 83 08 91 01 00 00 59 08 91 51  // \...........Y..Q
    A210: 00 00 5B 08 91 29 00 00 5D 08 91 09 00 00 58 08  // ..[..)..].....X.
    A220: 91 09 00 00 64 08 13 00 00 00 84 08 95 09 00 00  // ....d...........
    A230: 3D 08 49 92 24 00 80 08 91 09 00 00 35 08 1E 00  // =.I.$.......5...
    A240: F9 00 41 08 12 68 8F F8 42 08 13 6A 91 F6 77 08  // ..A..h..B..j..w.
    A250: 91 13 00 00 70 08 11 0B 00 00 EB 0D 3D 90 80 40  // ....p.......=..@
    A260: EC 0D 35 50 54 40 ED 0D 3D 50 1C 40 EE 0D 35 B0  // ..5PT@..=P.@..5.
    A270: 6A 40 66 08 45 90 80 40 67 08 55 50 80 40 68 08  // j@f.E..@g.UP.@h.
    A280: 3D 50 4C 40 69 08 3D 70 80 40 6D 08 91 09 01 00  // =PL@i.=p.@m.....
    A290: 71 08 15 24 00 00 88 08 91 11 00 00 78 08 91 12  // q..$........x...
    A2A0: 00 00 6B 08 A1 09 00 00 72 08 91 09 00 00 6C 08  // ..k.....r.....l.
    A2B0: 01 09 00 00 74 08 95 51 00 00 4D 08 11 09 00 00  // ....t..Q..M.....
    A2C0: 4E 08 11 2A 00 00 73 08 13 0F 00 00 75 08 91 09  // N..*..s.....u...
    A2D0: 00 00 7D 08 91 09 00 00 89 08 91 01 00 00 3E 08  // ..}...........>.
    A2E0: 49 92 CC 00 7F 08 91 11 00 00 7E 08 91 21 03 00  // I.........~..!..
    A2F0: 6F 08 91 29 00 00 3C 08 07 00 00 80 81 09 91 0C  // o..)..<.........
    A300: 00 00 82 09 95 09 00 00 85 09 11 01 00 00 83 09  // ................
    A310: 91 09 00 00 84 09 11 8C 00 00 86 09 91 09 00 00  // ................
    A320: 87 09 11 09 00 00 88 09 91 89 00 00 7B 09 91 49  // ............{..I
    A330: 00 00 7C 09 A1 09 00 00 70 05 00 04 0C 00 8E 0C  // ..|.....p.......
    A340: 00 00 00 00 83 08 91 01 00 00 84 08 95 09 00 00  // ................
    A350: 85 08 97 09 00 00 88 08 91 11 00 00 89 08 91 01  // ................
    A360: 00 00 8A 08 93 09 00 00 50 08 91 09 02 00 3F 08  // ........P.....?.
    A370: 28 28 72 72 40 08 50 50 28 28 43 08 80 80 00 00  // ((rr@.PP((C.....
    A380: CD 09 10 00 00 00 C0 09 40 0F 50 00 60 08 E1 09  // ........@.P.`...
    A390: 02 00 00 00 7D 00 01 01 01 02 04 20 00 06 20 00  // ....}...... .. .
    A3A0: 00 03 91 0A 02 92 0A 09 10 00 01 82 04 20 00 06  // ............. ..
    A3B0: 20 00 00 03 91 0A 08 20 00 00 03 92 0A 09 26 00  //  ...... ......&.
    A3C0: 01 03 02 0E 00 06 10 00 00 03 0E 00 02 0F 00 09  // ................
    A3D0: 38 00 01 83 02 0E 00 06 10 00 00 03 0E 00 08 20  // 8.............. 
    A3E0: 00 00 03 0F 00 09 4E 00 01 05 02 82 00 06 10 00  // ......N.........
    A3F0: 00 03 82 00 02 83 00 09 60 00 01 85 02 82 00 06  // ........`.......
    A400: 10 00 00 03 82 00 08 20 00 00 03 83 00 09 76 00  // ....... ......v.
    A410: 00 00 62 04 02 02 4C 00 5B 00 FD 02 B3 03 2B 03  // ..b...L.[.....+.
    A420: 00 00 01 01 08 04 32 10 54 76 38 00 A2 60 FF 00  // ......2.Tv8..`..
    A430: 00 50 03 05 63 0A 04 00 00 00 00 20 00 0B 00 40  // .P..c...... ...@
    A440: 00 61 76 02 02 00 00 00 00 00 43 65 07 00 00 00  // .av.......Ce....
    A450: 00 00 48 35 47 51 38 48 32 34 4D 4A 52 00 03 00  // ..H5GQ8H24MJR...
    A460: 04 00 FF FF 00 FF FF FF 00 00 00 00 00 2A 00 34  // .............*.4
    A470: 00 2F 0A 04 30 0A 00 D5 0A 04 2C 0A 04 28 0A 04  // ./..0.....,..(..
    A480: 29 0A 04 2A 0A 04 2B 0A 04 81 0A 04 8B 0A 04 5F  // )..*..+........_
    A490: 0A 04 DD 09 84 DE 09 84 FF FF 00 40 9C 00 00 55  // ...........@...U
    A4A0: 50 00 00 00 00 00 00 22 DD 1C 00 84 94 12 11 20  // P......"....... 
    A4B0: 55 0B 0A 14 44 B1 02 00 20 41 00 33 04 14 20 9A  // U...D... A.3.. .
    A4C0: 88 00 A0 00 00 71 24 06 05 0C 0D 2B 11 15 0F 80  // .....q$....+....
    A4D0: 38 01 00 77 70 00 00 00 00 00 00 22 DD 1C 00 E7  // 8..wp......"....
    A4E0: AC 35 22 40 55 0D 0D 20 C7 72 05 00 24 81 00 4C  // .5"@U.. .r..$..L
    A4F0: 09 14 20 9A 88 00 A0 00 00 71 24 0C 08 17 1B 57  // .. ......q$....W
    A500: 1A 21 11 90 5F 01 00 77 70 00 00 00 00 00 00 22  // .!.._..wp......"
    A510: DD 1C 00 29 31 46 26 50 55 0E 0E A2 07 23 06 00  // ...)1F&PU....#..
    A520: 26 A2 00 54 0A 14 20 AA 88 00 A0 00 00 71 24 0D  // &..T.. ......q$.
    A530: 0A 1A 1D 62 1C 23 12 A0 86 01 00 77 70 00 00 00  // ...b.#.....wp...
    A540: 00 00 00 22 DD 1C 00 29 B5 46 29 60 55 0E 0F 24  // ..."...).F)`U..$
    A550: 48 D3 06 00 26 A2 00 5C 0B 14 20 AA 88 00 A0 00  // H...&..\.. .....
    A560: 00 71 24 0E 0A 1C 20 6D 1E 25 13 74 B7 01 00 99  // .q$... m.%.t....
    A570: 90 00 00 00 00 00 00 22 33 9D 00 6B BD 57 2F 50  // ......."3..k.W/P
    A580: 55 10 0F 29 C9 B3 07 00 48 C4 00 5D 0D 14 20 4A  // U..)....H..].. J
    A590: 89 00 A0 00 00 71 24 10 0C 20 24 7B 20 2A 13 48  // .....q$.. ${ *.H
    A5A0: E8 01 00 99 90 00 00 00 00 00 00 22 33 9D 00 8C  // ..........."3...
    A5B0: C5 58 34 50 55 11 0F 2D 4A 94 08 00 48 C4 00 5D  // .X4PU..-J...H..]
    A5C0: 0F 14 20 4A 89 00 A0 00 00 71 24 12 0D 23 28 89  // .. J.....q$..#(.
    A5D0: 22 2E 14 1C 19 02 00 99 90 00 00 00 00 00 00 22  // ".............."
    A5E0: 33 9D 00 AD CD 69 3A 70 55 11 11 31 CB 74 09 00  // 3....i:pU..1.t..
    A5F0: 4A E4 00 6D 01 14 20 4A 89 00 A0 02 00 71 24 14  // J..m.. J.....q$.
    A600: 0E 27 2D 97 26 32 15 F0 49 02 00 99 90 00 00 00  // .'-.&2..I.......
    A610: 00 00 00 22 33 9D 00 CE 51 6A 3E 80 55 12 12 B4  // ..."3...Qj>.U...
    A620: 0B 45 0A 00 4A E4 00 75 03 14 20 4A 89 00 A0 02  // .E..J..u.. J....
    A630: 00 71 24 15 0F 2A 30 A4 28 35 16 C4 7A 02 00 99  // .q$..*0.(5..z...
    A640: 90 00 00 00 00 00 00 22 44 9D 00 10 5A 7B 44 80  // ......."D...Z{D.
    A650: 55 13 12 B8 8C 25 0B 00 4C 04 01 75 05 14 20 4A  // U....%..L..u.. J
    A660: 89 00 A0 02 00 71 24 17 11 2E 34 B2 2A 39 16 98  // .....q$...4.*9..
    A670: AB 02 00 99 90 00 00 00 00 00 00 22 55 9D 00 31  // ..........."U..1
    A680: 62 7C 49 90 55 13 13 BC 0D 06 0C 00 4C 04 01 7D  // b|I.U.......L..}
    A690: 07 14 20 4A 89 00 A0 02 00 71 24 19 12 31 38 C0  // .. J.....q$..18.
    A6A0: 2D 3D 17 40 0D 03 00 BB B0 00 00 00 00 00 00 22  // -=.@..........."
    A6B0: 88 9D 00 73 EE 8D 53 A0 55 15 17 43 CF B6 0D 00  // ...s..S.U..C....
    A6C0: 4E 24 01 0E 0A 14 20 4A 89 00 A0 03 00 71 24 1C  // N$.... J.....q$.
    A6D0: 14 38 40 DB 32 44 18 E8 6E 03 00 BB B0 00 00 00  // .8@.2D..n.......
    A6E0: 00 00 00 33 BB 9D 00 D6 FE AF 5E C0 55 17 17 4B  // ...3......^.U..K
    A6F0: D1 77 0F 00 52 64 01 1E 0E 14 20 4A 89 00 A0 03  // .w..Rd.... J....
    A700: 00 71 24 20 17 3F 48 F7 38 4C 1A 00 00 00 00 06  // .q$ .?H.8L......
    A710: 00 08 00 0E 00 44 FF FF 00 FF FF FF 00 1F 00 00  // .....D..........
    A720: 00 FF FF FF 01 1F 00 00 00 FF FF FF 02 1F 00 00  // ................
    A730: 00 FF FF FF 03 1F 00 00 00 00 00 00 00 E1 B4 88  // ................
    A740: D6 9B 00 A5 3F 21 00 FD 02 D1 00 81 F6 D2 00 88  // ....?!..........
    A750: D6 9B 00 66 3F 05 00 F4 9B 41 00 A6 B0 E6 00 4E  // ...f?....A.....N
    A760: 1E 6F 06 D1 00 42 D6 D3 00 AC 3F 05 00 81 56 9F  // .o...B....?...V.
    A770: 00 E6 BB 40 00 16 B1 F4 00 88 D6 9B 00 E5 3D 28  // ...@..........=(
    A780: 00 E1 B1 11 E6 B3 00 F4 3B 05 00 6F 06 CA 00 42  // ........;..o...B
    A790: D6 D3 00 BC AB 21 00 88 76 97 00 E6 BB 08 00 A6  // .....!..v.......
    A7A0: B0 F4 00 4B 1E 4F 07 D1 00 C2 D2 D3 00 88 F6 D2  // ...K.O..........
    A7B0: 00 F4 3B 05 00 66 3F 21 00 A6 90 BD 00 81 76 B3  // ..;..f?!......v.
    A7C0: 00 F4 3B 05 00 4B 00 5C 00 80 0A 04 8C 0A 04 95  // ..;..K.\........
    A7D0: 0A 04 96 0A 04 99 0A 04 82 0A 04 74 0A 04 75 0A  // ...........t..u.
    A7E0: 04 00 00 44 01 00 44 02 00 44 03 00 44 04 00 44  // ...D..D..D..D..D
    A7F0: 05 00 44 09 00 44 0A 00 44 0B 00 44 0C 00 44 0D  // ..D..D..D..D..D.
    A800: 00 44 0F 00 44 4E 0A 04 54 0A 00 97 0A 04 98 0A  // .D..DN..T.......
    A810: 00 FF FF 00 FF FF FF 00 72 76 60 50 18 C1 00 E0  // ........rv`P....
    A820: 66 C0 6E 60 0D E0 8C 30 00 E0 03 70 1B 40 03 61  // f.n`...0...p.@.a
    A830: 00 00 00 00 00 00 1B 00 FF FF 0C 0C 04 00 01 00  // ................
    A840: 20 3C 00 00 00 03 00 83 04 06 00 00 23 00 00 00  //  <..........#...
    A850: 00 00 00 00 98 00 02 00 85 08 00 00 00 00 1E 01  // ................
    A860: 30 00 00 00 00 00 60 B0 30 0C C3 00 5D F7 03 00  // 0.....`.0...]...
    A870: 00 00 00 00 0C 01 03 06 C0 D4 01 00 F8 24 01 00  // .............$..
    A880: 38 00 06 0A 6A 24 09 00 80 1A 06 00 E8 03 00 00  // 8...j$..........
    A890: 0C 01 18 08 20 03 00 00 B0 04 00 00 38 C1 01 00  // .... .......8...
    A8A0: 38 C1 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // 8...............
    A8B0: 34 C4 01 00 43 01 00 00 00 00 00 00 00 00 00 00  // 4...C...........
    A8C0: C0 FF 08 0F 08 31 AC 10 00 00 00 00 00 00 01 00  // .....1..........
    A8D0: 00 00 00 00 00 00 00 00 4B 00 00 00 00 00 00 00  // ........K.......
    A8E0: 2B 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  // +...............
    A8F0: 9B 02 00 00 03 00 00 00 EA 01 00 00 8A 02 00 00  // ................
    A900: 34 03 00 00 7E 04 00 00 EC 04 00 00 50 05 00 00  // 4...~.......P...
    A910: B4 05 00 00 E6 05 00 00 B0 71 0B 00 00 35 0C 00  // .........q...5..
    A920: 60 1F 0D 00 98 E0 0E 00 70 B7 0F 00 E0 C8 10 00  // `.......p.......
    A930: 00 17 11 00 30 8C 11 00 29 01 00 00 A2 04 00 00  // ....0...).......
    A940: BE 01 00 00 1B 00 B8 0B 00 00 6B B6 43 F8 B5 9C  // ..........k.C...
    A950: 05 00 7A 28 FF FF 00 00 00 00 F3 0D 03 00 7F 60  // ..z(...........`
    A960: FE FF 00 00 00 00 23 FF 58 00 00 00 00 00 00 00  // ......#.X.......
    A970: 8A 00 EB FF FF FF C0 12 00 01 00 01 00 01 00 00  // ................
    A980: 46 00 03 01 01 03 12 00 08 96 60 00 00 00 00 00  // F.........`.....
    A990: 32 00 CC 00 FF 00 01 07 0C 00 6E 00 00 00 00 00  // 2.........n.....
    A9A0: 00 00 04 00 24 00 00 04 00 00 02 80 10 00 00 00  // ....$...........
    A9B0: 00 00 20 03 00 00 10 00 52 03 02 00 00 00 84 03  // .. .....R.......
    A9C0: 00 80 00 00 B6 03 28 00 03 01 FF FF FF 00 4B 00  // ......(.......K.
    A9D0: B8 0B 01 00 00 00 FF FF FF 00 32 00 4E 0C 02 00  // ..........2.N...
    A9E0: 00 00 FF FF FF 00 7C 01 45 0C 07 12 00 00 64 00  // ......|.E.....d.
    A9F0: 02 03 14 00 00 00 42 2D 00 00 70 06 02 06 00 00  // ......B-..p.....
    AA00: 00 00 1E 21 52 00 4C 00 03 FF FF 00 1E 22 55 00  // ...!R.L......"U.
    AA10: 4C 00 09 FF FF 00 20 21 58 00 4C 00 0A FF FF 00  // L..... !X.L.....
    AA20: 20 22 5B 00 4C 00 0B FF FF 00 21 21 5E 00 4C 00  //  "[.L.....!!^.L.
    AA30: 0C FF FF 00 21 22 61 00 4C 00 0D FF FF 00 FF FF  // ....!"a.L.......
    AA40: 14 04 FF 15 04 FF 16 04 FF 17 04 FF 18 04 FF 19  // ................
    AA50: 04 FF 18 00 02 01 02 00 08 00 80 00 00 02 00 04  // ................
    AA60: 00 08 40 00 01 00 10 00 FF FF 38 00 02 01 04 4A  // ..@.......8....J
    AA70: 03 00 7C 92 00 00 01 04 1E 00 3C 00 00 00 F8 24  // ..|.......<....$
    AA80: 01 00 01 03 1E 00 3C 00 1E 00 F0 49 02 00 01 02  // ......<....I....
    AA90: 1E 00 3C 00 1E 00 E0 93 04 00 01 01 1E 00 00 00  // ..<.............
    AAA0: 1E 00 55 00 01 01 01 10 02 00 81 02 10 00 11 02  // ..U.............
    AAB0: 00 01 00 21 00 01 00 84 92 04 00 45 00 02 00 50  // ...!.......E...P
    AAC0: 00 14 00 70 00 84 00 60 02 02 00 65 02 01 00 40  // ...p...`...e...@
    AAD0: 02 02 00 42 02 02 00 44 02 02 00 46 02 02 00 75  // ...B...D...F...u
    AAE0: 02 40 00 80 99 02 00 88 99 01 00 FE 9A 08 00 CC  // .@..............
    AAF0: E6 34 01 00 00 00 00 00 95 00 01 02 00 08 02 01  // .4..............
    AB00: 02 00 52 47 52 02 02 65 02 07 52 0D 55 00 02 52  // ..RGR..e..R.U..R
    AB10: 0D 52 23 2C 25 02 01 3D 25 02 06 45 17 00 51 02  // .R#,%..=%..E..Q.
    AB20: 52 3D 52 39 02 0D 02 01 03 52 43 66 04 02 8C 02  // R=R9.....RCf....
    AB30: 2E 00 02 0D 02 01 00 52 43 02 05 02 04 00 52 03  // .......RC.....R.
    AB40: 52 43 02 0D 02 02 03 52 43 02 F9 02 01 52 05 02  // RC.....RC....R..
    AB50: 01 02 00 0E E5 02 08 52 0A 02 05 02 02 00 0E 06  // .......R........
    AB60: 52 43 02 05 02 04 00 20 03 52 43 02 05 02 30 75  // RC..... .RC...0u
    AB70: 00 40 52 0B 02 05 02 04 00 52 03 52 43 02 01 02  // .@R......R.RC...
    AB80: 01 0E E5 02 08 52 0B 0D 65 D0 05 02 5B 00 57 00  // .....R..e...[.W.
    AB90: 01 02 00 00 37 00 00 52 14 02 08 00 0D 1A 32 08  // ....7..R......2.
    ABA0: 00 0B 1A 02 88 00 0E 1A 32 88 00 0C 1A 03 00 46  // ........2......F
    ABB0: 04 1A 09 05 46 FF FF FF 02 56 00 40 03 20 40 01  // ....F....V.@. @.
    ABC0: 1A 09 25 40 03 75 02 46 40 03 18 40 5C 1B 2D 02  // ..%@.u.F@..@\.-.
    ABD0: 46 40 27 00 46 06 1A 2D 08 40 5C 1B 02 0A 01 41  // F@'.F..-.@\....A
    ABE0: 02 8A 01 40 5B 00 B7 00 01 01 04 00 37 00 00 01  // ...@[.......7...
    ABF0: 05 0E 00 02 00 40 01 37 03 00 5C 05 02 00 FC 7F  // .....@.7..\.....
    AC00: FF FF 02 00 00 00 5C 05 10 00 FF FF 9D FF 00 09  // ......\.........
    AC10: 41 00 5C 05 21 00 7F FF FF FF 80 00 00 00 5C 05  // A.\.!.........\.
    AC20: 40 00 BE 3F FF FF 40 40 01 00 37 00 00 01 05 0E  // @..?..@@..7.....
    AC30: 00 70 00 01 10 37 03 00 01 05 70 00 00 40 00 01  // .p...7....p..@..
    AC40: 5C 05 A0 00 0F FF FE DF 10 00 01 60 5C 05 A2 00  // \..........`\...
    AC50: 7F F3 97 FF 86 04 88 5A 5C 05 A4 00 1B F0 FF FF  // .......Z\.......
    AC60: 20 0D 40 04 5C 05 B1 00 FF 2D FF FF 80 50 18 96  //  .@.\....-...P..
    AC70: 37 00 00 54 00 06 00 01 25 C5 14 02 01 05 C2 14  // 7..T....%.......
    AC80: 7F 00 00 00 01 05 E8 15 70 3D 29 0A 01 05 E9 15  // ........p=).....
    AC90: 9C A4 0D 20 01 05 EA 15 20 95 87 00 5B 00 13 01  // ... .... ...[...
    ACA0: 01 01 04 00 37 00 00 03 01 00 00 54 20 24 15 01  // ....7......T $..
    ACB0: 25 00 08 0F 01 25 28 08 0F 5C 25 2B 08 F8 01 55  // %....%(..\%+...U
    ACC0: 00 00 52 34 52 3E 03 24 40 0C 00 15 25 40 04 5C  // ..R4R>.$@...%@.\
    ACD0: 62 01 08 0F 40 01 04 D7 09 24 00 01 04 02 08 00  // b...@....$......
    ACE0: 00 01 04 1C 08 20 00 66 18 2D 0C 42 10 00 56 00  // ..... .f.-.B..V.
    ACF0: 40 03 0C 40 00 00 3E 0D 40 00 00 44 73 00 01 02  // @..@..>.@..Ds...
    AD00: 00 00 40 01 04 01 00 02 00 2D 0D 42 06 00 43 53  // ..@......-.B..CS
    AD10: 00 0D 25 68 15 03 54 00 34 FE 01 05 35 FE 03 0A  // ..%h..T.4...5...
    AD20: 03 0A 01 05 35 FE 04 0A 04 0A 01 00 03 0A 69 15  // ....5.........i.
    AD30: 01 00 04 0A 69 15 5C 25 D5 09 FB 01 0D 05 D5 09  // ....i.\%........
    AD40: 00 08 00 40 54 00 34 FE 01 05 35 FE 03 0A 0C 00  // ...@T.4...5.....
    AD50: 01 05 35 FE 04 0A 0C 00 52 0F 66 1C 2D 0C 42 0A  // ..5.....R.f.-.B.
    AD60: 00 55 00 00 52 12 66 1C 2D 0C 42 0C 00 02 0D 00  // .U..R.f.-.B.....
    AD70: 01 00 52 1F 52 1E 02 05 00 30 75 00 00 52 10 4C  // ..R.R....0u..R.L
    AD80: E5 00 20 44 ED 00 0D 25 80 0A 18 02 25 00 FF 52  // .. D...%....%..R
    AD90: 40 4A 65 80 0A 0F 49 0E 01 52 03 03 20 00 80 0A  // @Je...I..R.. ...
    ADA0: 09 25 00 FC 52 1E 5C 22 80 0A 03 00 52 07 52 48  // .%..R.\"....R.RH
    ADB0: 5B 00 FF 00 02 01 00 04 37 00 00 66 0C 03 0C 41  // [.......7..f...A
    ADC0: 00 00 2D 0A 41 42 2D 0D 42 04 00 3D 24 00 03 00  // ..-.AB-.B..=$...
    ADD0: 44 30 00 2D 0D 42 04 00 3E 0A 42 41 44 FB 00 43  // D0.-.B..>.BAD..C
    ADE0: 19 00 56 00 43 03 A4 41 02 00 03 F2 41 41 03 0C  // ..V.C..A....AA..
    ADF0: 41 00 00 3E 0D 41 00 00 44 FB 00 3E 0D 41 61 48  // A..>.A..D..>.AaH
    AE00: 49 6B 00 3E E5 41 10 46 5F 00 1B 3D 41 01 43 6B  // Ik.>.A.F_..=A.Ck
    AE10: 00 09 E5 41 03 15 3D 41 02 2D E5 41 0C 03 3A 43  // ...A..=A.-.A..:C
    AE20: 41 54 00 00 00 33 0D 41 01 00 01 0A 00 00 41 0D  // AT...3.A......A.
    AE30: 02 01 00 44 2D 0D 41 02 00 01 0A 00 00 41 03 32  // ...D-.A......A.2
    AE40: 43 41 4B E5 00 01 49 D7 00 07 02 01 00 45 2D 0D  // CAK...I......E-.
    AE50: 41 01 00 01 0A 00 00 41 4A 02 01 00 44 44 B9 00  // A......AJ...DD..
    AE60: 03 29 43 00 0E A2 00 44 43 C1 00 03 29 43 00 08  // .)C....DC...)C..
    AE70: A2 00 45 33 0D 41 03 00 01 0A 00 00 41 03 3A 43  // ..E3.A......A.:C
    AE80: 41 07 02 01 00 45 43 FA 00 0D 02 01 00 44 33 0D  // A....EC......D3.
    AE90: 41 01 00 01 0A 00 00 41 3D A5 00 01 44 F5 00 07  // A......A=...D...
    AEA0: 02 01 00 45 43 FA 00 0D 02 01 00 44 5B 55 20 00  // ...EC......D[U .
    AEB0: 5B 00 AC 01 01 02 14 00 37 00 00 4B E5 00 08 44  // [.......7..K...D
    AEC0: 23 00 01 05 82 00 70 03 00 80 3C 05 83 00 00 00  // #.....p...<.....
    AED0: 02 00 46 68 01 03 01 04 00 02 E5 00 01 52 3C 01  // ..Fh.........R<.
    AEE0: 05 82 00 40 01 50 C0 0D 25 83 00 08 66 FF 2D 0D  // ...@.P..%...f.-.
    AEF0: 42 6C 01 01 05 82 00 40 03 50 C0 4A 25 83 00 01  // Bl.....@.P.J%...
    AF00: 44 56 00 2D 0D 42 20 00 03 04 00 08 00 03 04 01  // DV.-.B .........
    AF10: 0C 00 03 04 02 10 00 03 04 03 14 00 01 04 82 00  // ................
    AF20: 04 00 4A 05 83 00 80 00 00 00 44 97 00 2D 05 00  // ..J.......D..-..
    AF30: 10 00 00 00 2D 05 01 10 00 00 00 2D 05 02 10 00  // ....-......-....
    AF40: 00 00 2D 05 03 10 00 00 00 4A 25 83 00 02 44 B8  // ..-......J%...D.
    AF50: 00 01 04 82 00 1C 00 0D 25 83 00 10 01 04 82 00  // ........%.......
    AF60: 04 00 4A 25 83 00 01 44 AA 00 01 04 82 00 18 00  // ..J%...D........
    AF70: 01 21 83 00 02 01 02 82 00 00 01 01 83 00 01 56  // .!.............V
    AF80: 00 40 03 29 40 02 15 25 40 06 01 04 82 00 00 00  // .@.)@..%@.......
    AF90: 5C 8A 83 00 3F 00 40 01 02 82 00 01 01 99 83 00  // \...?.@.........
    AFA0: 04 01 02 82 00 03 01 99 83 00 05 01 04 82 00 1C  // ................
    AFB0: 00 0D A5 83 00 10 01 02 82 00 01 0D E5 83 00 04  // ................
    AFC0: 01 02 82 00 02 01 01 83 00 03 01 02 82 00 01 01  // ................
    AFD0: 09 83 00 05 0D E5 83 00 02 01 04 82 00 1C 00 0D  // ................
    AFE0: 25 83 00 01 01 04 82 00 04 00 4A 25 83 00 02 44  // %.........J%...D
    AFF0: 32 01 01 05 82 00 40 01 50 C0 07 25 83 00 F7 02  // 2.....@.P..%....
    B000: 02 00 04 4C E5 04 08 49 68 01 52 2F 02 01 01 00  // ...L...Ih.R/....
    B010: 02 02 00 04 02 E5 00 02 52 3F 5B 7A 40 00 68 02  // ........R?[z@.h.
    B020: 50 C0 78 02 50 C0 8C 02 50 C0 90 02 50 C0 94 02  // P.x.P...P...P...
    B030: 50 C0 98 02 50 C0 AC 02 50 C0 B0 02 50 C0 E4 02  // P...P...P...P...
    B040: 50 C0 F4 02 50 C0 08 03 50 C0 0C 03 50 C0 10 03  // P...P...P...P...
    B050: 50 C0 14 03 50 C0 28 03 50 C0 2C 03 50 C0 22 01  // P...P.(.P.,.P.".
    B060: 02 01 0C 04 37 00 00 5C 25 2B 08 F8 01 54 20 24  // ....7..\%+...T $
    B070: 15 07 25 EB 09 FE 4B E5 00 40 44 A1 00 01 05 91  // ..%...K..@D.....
    B080: 0A 0D 00 00 00 03 B0 01 92 0A 52 3B 03 01 00 00  // ..........R;....
    B090: 56 38 00 3E 01 00 01 45 62 00 3E 01 00 02 45 53  // V8.>...Eb.>...ES
    B0A0: 00 01 05 91 0A 0D 00 00 00 07 A5 92 0A F7 43 A1  // ..............C.
    B0B0: 00 01 05 91 0A 0D 00 00 00 54 38 92 0A 43 A1 00  // .........T8..C..
    B0C0: 03 00 02 96 0A 03 F8 01 99 0A 01 05 91 0A 00 00  // ................
    B0D0: 00 00 03 08 01 92 0A 01 05 91 0A 0D 00 00 00 5C  // ...............\
    B0E0: 8D 92 0A 00 00 80 00 07 E5 99 0A BF 07 65 96 0A  // .............e..
    B0F0: F0 01 05 91 0A 00 00 00 00 01 0D 92 0A 77 77 02  // .............ww.
    B100: 01 01 00 52 10 02 01 01 00 02 E5 01 01 52 3F 52  // ...R.........R?R
    B110: 30 02 E5 01 02 02 01 02 00 52 3F 07 25 F3 09 FC  // 0........R?.%...
    B120: 55 00 01 4A 25 80 0A 08 49 D1 00 02 25 01 07 52  // U..J%...I...%..R
    B130: 40 4B E5 00 40 44 12 01 01 05 91 0A 0D 00 00 00  // @K..@D..........
    B140: 4C A5 01 80 49 ED 00 54 38 92 0A 01 B2 92 0A 01  // L...I..T8.......
    B150: 52 3B 3E 01 00 01 46 12 01 01 FA 99 0A 01 01 6A  // R;>...F........j
    B160: 96 0A 02 01 05 91 0A 00 00 00 00 01 0A 92 0A 01  // ................
    B170: 0D 25 EB 09 01 07 25 2B 08 F8 0D 25 24 15 03 5B  // .%....%+...%$..[
    B180: CB 04 01 07 08 08 37 00 00 3D 25 01 FF 44 95 04  // ......7..=%..D..
    B190: 3D 25 01 19 46 91 04 3D 25 01 02 47 91 04 3D 25  // =%..F..=%..G..=%
    B1A0: 01 14 45 95 04 3D 05 00 00 00 00 00 44 43 02 4B  // ..E..=......DC.K
    B1B0: E5 01 02 49 61 00 02 A9 02 02 55 28 02 0E E5 01  // ...Ia.....U(....
    B1C0: 80 3D 05 00 40 4B 4C 00 45 61 00 0D A5 C2 9D 40  // .=..@KL.Ea.....@
    B1D0: 03 21 41 01 33 25 41 14 03 22 43 41 0D E2 C1 48  // .!A.3%A.."CA...H
    B1E0: 44 66 FF 2D 0D 42 AB 04 03 39 40 01 09 0D 40 30  // Df.-.B...9@...@0
    B1F0: 00 1B 0D 40 02 2D 0A 42 40 56 00 00 56 00 01 02  // ...@.-.B@V..V...
    B200: 05 03 40 01 00 00 02 65 01 01 20 05 00 0A 00 00  // ..@....e.. .....
    B210: 00 03 02 46 40 3D 05 00 80 8D 5B 00 47 A6 00 0E  // ...F@=....[.G...
    B220: E5 01 08 55 28 01 4B E5 01 08 44 B1 00 1B 05 46  // ...U(.K...D....F
    B230: 01 3E 05 46 A0 2F C5 01 48 C6 00 2C 65 01 01 15  // .>.F./..H..,e...
    B240: 05 46 01 43 B1 00 14 2D 01 05 03 05 01 00 00 01  // .F.C...-........
    B250: 00 4B E5 01 02 49 33 01 4B E5 01 80 49 DF 00 27  // .K...I3.K...I..'
    B260: 04 46 00 00 3E 05 41 00 00 00 00 44 45 01 03 04  // .F..>.A....DE...
    B270: 40 00 00 03 02 00 41 27 02 40 41 03 02 40 00 3E  // @.....A'.@A..@.>
    B280: 05 41 00 00 00 00 49 F3 00 7C 05 00 00 00 01 00  // .A....I..|......
    B290: 7E 04 40 00 00 7C 04 40 00 00 7E 02 40 00 03 02  // ~.@..|.@..~.@...
    B2A0: 01 40 3E 05 01 33 F3 00 00 48 33 01 03 05 01 00  // .@>..3...H3.....
    B2B0: 00 01 00 27 04 46 00 00 7C 02 01 41 7E 04 40 00  // ...'.F..|..A~.@.
    B2C0: 00 03 0A 00 40 27 04 46 00 00 03 8A 00 40 56 18  // ....@'.F.....@V.
    B2D0: 01 43 AF 01 7C 02 40 00 7E 05 40 A0 86 01 00 03  // .C..|.@.~.@.....
    B2E0: 01 41 03 09 05 41 03 00 00 00 6F 02 40 41 7C 05  // .A...A....o.@A|.
    B2F0: 40 45 0C 00 00 7E 05 40 40 4B 4C 00 3E 05 40 00  // @E...~.@@KL.>.@.
    B300: 00 00 00 49 8A 01 03 25 40 01 7C 05 40 40 4B 4C  // ...I...%@.|.@@KL
    B310: 00 7E 05 40 45 0C 00 00 03 01 41 03 09 05 41 03  // .~.@E.....A...A.
    B320: 00 00 00 75 02 40 41 1B 05 40 01 2D 02 00 40 66  // ...u.@A..@.-..@f
    B330: FF 2D 0D 42 9F 04 56 00 40 03 21 40 01 33 25 40  // .-.B..V.@.!@.3%@
    B340: 14 15 25 40 01 2D 0A 42 40 03 0C 48 00 00 4A 65  // ..%@.-.B@..H..Je
    B350: E2 48 10 44 FE 02 03 39 41 01 09 0D 41 30 00 1B  // .H.D...9A...A0..
    B360: 0D 41 04 3C 22 5E 49 41 49 22 02 3C 21 23 49 03  // .A.<"^IAI".<!#I.
    B370: 49 22 02 3C 29 25 49 03 49 22 02 03 20 41 5F 49  // I".<)%I.I".. A_I
    B380: 09 25 41 E0 3E 29 41 01 49 22 02 4B E5 01 40 49  // .%A.>)A.I".K..@I
    B390: F6 02 3C 02 20 49 00 49 22 02 3C 0A 22 49 01 44  // ..<. I.I".<."I.D
    B3A0: 26 02 0E E5 01 01 3A 00 00 4B E5 01 01 44 69 04  // &.....:..K...Di.
    B3B0: 4B E5 01 02 49 43 02 3D 25 02 05 46 43 02 55 28  // K...IC.=%..FC.U(
    B3C0: 02 52 23 56 00 40 03 21 40 01 33 25 40 14 03 0A  // .R#V.@.!@.3%@...
    B3D0: 48 40 07 25 60 01 FE 66 FF 2D 0D 42 9F 04 56 00  // H@.%`..f.-.B..V.
    B3E0: 40 03 21 40 01 33 25 40 14 15 25 40 01 2D 0A 42  // @.!@.3%@..%@.-.B
    B3F0: 40 03 0C 48 00 00 07 65 23 49 FE 54 00 21 49 54  // @..H...e#I.T.!IT
    B400: 00 22 49 07 65 E2 48 EF 4A 65 E2 48 20 49 88 02  // ."I.e.H.Je.H I..
    B410: 07 65 F2 48 EF 4A 65 F2 48 20 49 95 02 3D 05 00  // .e.H.Je.H I..=..
    B420: 00 00 00 00 49 FE 02 4A A5 C1 48 80 44 D2 02 56  // ....I..J..H.D..V
    B430: 00 41 5C 25 E0 48 F8 06 51 02 4A 65 E0 48 01 44  // .A\%.H..Q.Je.H.D
    B440: BA 02 2D A5 41 01 2D 0D 48 10 00 3E A5 41 04 45  // ..-.A.-.H..>.A.E
    B450: B2 02 56 08 48 03 21 41 01 33 25 41 14 03 22 43  // ..V.H.!A.3%A.."C
    B460: 41 07 E2 C1 48 45 4A E5 C1 48 3F 49 91 04 07 A5  // A...HEJ..H?I....
    B470: C2 9D BF 43 91 04 01 02 20 49 00 43 17 04 01 05  // ...C.... I.C....
    B480: DA 48 80 88 01 00 3D A5 01 00 49 1F 03 3D 05 00  // .H....=...I..=..
    B490: E0 3B 66 00 45 1F 03 07 25 DB 48 FE 43 3F 03 0D  // .;f.E...%.H.C?..
    B4A0: 25 DB 48 01 3D A5 01 02 49 3F 03 4B E5 01 08 44  // %.H.=...I?.K...D
    B4B0: 3F 03 01 05 7A 49 80 88 01 00 0D 25 7B 49 01 0D  // ?...zI.....%{I..
    B4C0: 25 5F 49 01 03 39 40 01 09 0D 40 30 00 1B 0D 40  // %_I..9@...@0...@
    B4D0: 04 01 22 5E 49 40 0D 65 5F 49 80 3E 25 40 02 44  // .."^I@.e_I.>%@.D
    B4E0: 66 03 03 65 40 04 5C 6A 5F 49 FB 40 66 FF 56 00  // f..e@.\j_I.@f.V.
    B4F0: 40 2D 0D 42 BB 04 03 21 40 03 09 0D 40 03 00 15  // @-.B...!@...@...
    B500: 0D 40 02 2D 0A 42 40 01 0C 24 49 00 00 01 E4 26  // .@.-.B@..$I....&
    B510: 49 02 00 0D 25 26 49 02 01 21 23 49 03 01 A5 23  // I...%&I..!#I...#
    B520: 49 E8 01 02 20 49 00 54 00 21 49 01 02 22 49 01  // I... I.T.!I.."I.
    B530: 4B E5 01 08 44 BF 03 07 65 5F 49 FE 43 C4 03 0D  // K...D...e_I.C...
    B540: 65 5F 49 01 5C 29 5F 49 1F 01 01 8D 2B 49 20 03  // e_I.\)_I....+I .
    B550: 01 29 25 49 03 07 65 5F 49 7F 5C 65 E2 48 E3 04  // .)%I..e_I.\e.H..
    B560: 4A 65 E2 48 20 49 E0 03 0D 65 E2 48 10 4A 65 E2  // Je.H I...e.H.Je.
    B570: 48 20 44 ED 03 4B E5 01 02 49 17 04 5C 65 F2 48  // H D..K...I..\e.H
    B580: E3 04 4A 65 F2 48 20 49 02 04 0D 65 F2 48 10 4A  // ..Je.H I...e.H.J
    B590: 65 F2 48 20 44 0F 04 3D A5 01 02 44 25 04 3D A5  // e.H D..=...D%.=.
    B5A0: 01 03 49 2C 04 4B E5 01 80 49 3A 04 03 01 00 02  // ..I,.K...I:.....
    B5B0: 02 B1 02 01 52 41 02 02 02 00 0D 65 5F 49 40 4A  // ....RA.....e_I@J
    B5C0: 65 5F 49 20 44 3F 04 07 65 5F 49 BF 56 00 40 03  // e_I D?..e_I.V.@.
    B5D0: 21 40 01 33 25 40 14 03 0A 48 40 0D 25 60 01 01  // !@.3%@...H@.%`..
    B5E0: 51 01 4B E5 01 02 49 91 04 3A 00 00 3D 25 02 05  // Q.K...I..:..=%..
    B5F0: 46 91 04 02 25 03 02 02 E1 03 02 02 61 03 01 02  // F...%.......a...
    B600: B9 03 01 08 A5 03 04 0E B1 03 02 02 01 02 00 52  // ...............R
    B610: 2E 3A 00 00 5B 02 25 01 0B 43 69 04 7A 2C 00 00  // .:..[.%..Ci.z,..
    B620: 00 A0 00 40 51 E0 51 80 52 20 53 40 42 0F 00 40  // ...@Q.Q.R S@B..@
    B630: 42 0F 00 40 42 0F 00 40 42 0F 00 A1 83 64 00 24  // B..@B..@B....d.$
    B640: 83 32 00 A3 76 19 00 A3 76 0C 00 00 87 01 02 01  // .2..v...v.......
    B650: 00 00 37 00 00 3D 65 00 07 44 BC 00 56 00 40 20  // ..7..=e..D..V.@ 
    B660: 25 00 03 03 0A 48 40 3D 65 00 01 44 BB 00 56 08  // %....H@=e..D..V.
    B670: 48 03 21 48 00 01 0D FA 02 02 00 52 14 01 05 8D  // H.!H.......R....
    B680: 1A 00 00 40 00 01 25 BE 1B 02 01 A5 CC 1A C0 01  // ...@..%.........
    B690: 0D 91 1A 45 01 5C 05 DA 1A F0 FF FF FF 02 00 00  // ...E.\..........
    B6A0: 00 07 25 03 1B FB 0D 25 7D 1A 01 01 05 34 1B 01  // ..%....%}....4..
    B6B0: 00 00 00 5C 05 36 1B EE FE 00 00 11 01 FF 7F 01  // ...\.6..........
    B6C0: 25 3A 1B 11 5C 05 32 1B F8 F8 F8 FF 00 00 00 00  // %:..\.2.........
    B6D0: 01 0D 33 1B FF 7F 01 05 B3 1B 07 40 00 00 0D A5  // ..3........@....
    B6E0: B6 1B 01 01 05 31 1B 00 08 00 04 01 0D 86 1B 04  // .....1..........
    B6F0: 00 01 0D E7 1B 01 00 5C 05 00 1B FF FF FD FF 00  // .......\........
    B700: 00 02 00 3A 00 00 5B 5B 5C 05 F6 02 FF 00 FE 9F  // ...:..[[\.......
    B710: 04 FC 00 20 01 05 F9 02 10 27 02 00 01 05 14 03  // ... .....'......
    B720: 00 08 00 20 01 05 0C 03 00 90 00 10 01 25 09 01  // ... .........%..
    B730: 01 01 05 3B 01 64 02 12 00 01 05 30 01 A0 86 11  // ...;.d.....0....
    B740: 00 01 E5 09 17 64 01 05 22 17 00 00 9B 02 01 05  // .....d..".......
    B750: 06 17 21 84 20 00 01 8D E5 17 64 00 01 25 E4 17  // ..!. .....d..%..
    B760: 01 01 05 31 01 3C 00 01 08 5C 65 D4 00 FC 02 01  // ...1.<...\e.....
    B770: 0D FC 00 00 01 01 05 2F 48 00 00 00 00 01 05 04  // ......./H.......
    B780: 48 00 00 00 00 01 05 3A 48 0F 00 00 00 0D E5 CB  // H......:H.......
    B790: 05 10 01 05 F8 16 00 00 00 30 01 25 32 01 00 55  // .........0.%2..U
    B7A0: 00 00 52 4E 02 25 00 07 52 33 02 05 00 00 07 00  // ..RN.%..R3......
    B7B0: 00 52 4D 2C 25 00 01 3D 25 00 06 45 65 01 66 16  // .RM,%..=%..Ee.f.
    B7C0: 03 0C 41 04 00 4C 0D 41 02 00 44 B7 00 0D A5 C9  // ..A..L.A..D.....
    B7D0: 05 04 5B 00 07 00 01 01 00 00 5B 00 8A 00 01 01  // ..[.......[.....
    B7E0: 00 00 37 00 00 01 05 03 2B 54 10 76 32 56 00 41  // ..7.....+T.v2V.A
    B7F0: 03 50 41 9F 03 56 00 40 66 FF 2D 0D 42 4A 00 4C  // .PA..V.@f.-.BJ.L
    B800: 65 41 10 44 46 00 09 65 41 07 03 2A 40 41 15 0D  // eA.DF..eA..*@A..
    B810: 40 03 2D 0A 42 40 01 04 02 08 00 00 01 04 03 2B  // @.-.B@.........+
    B820: 04 00 5B 7A 40 00 23 10 54 76 45 10 76 32 32 10  // ..[z@.#.TvE.v22.
    B830: 54 76 54 10 76 32 03 21 54 76 05 41 76 32 13 20  // TvT.v2.!Tv.Av2. 
    B840: 54 76 15 40 76 32 32 10 45 76 54 10 67 32 32 10  // Tv.@v22.EvT.g22.
    B850: 54 76 54 10 76 32 32 10 65 47 54 10 27 63 32 10  // TvT.v22.eGT.'c2.
    B860: 75 46 54 10 37 62 54 04 01 01 08 00 37 00 00 01  // uFT.7bT.....7...
    B870: 05 82 00 00 00 20 C0 07 A5 83 00 FC 01 05 82 00  // ..... ..........
    B880: 2C 01 50 C0 37 05 00 01 0D 2C 01 06 02 01 05 A4  // ,.P.7....,......
    B890: 01 09 00 40 00 01 05 A0 01 03 00 00 00 01 0D B0  // ...@............
    B8A0: 01 02 04 01 E5 98 01 00 4A 25 00 00 01 49 E6 00  // ........J%...I..
    B8B0: 5C 25 0C 00 80 64 5C 25 10 00 80 64 5C 25 14 00  // \%...d\%...d\%..
    B8C0: 80 64 5C 25 18 00 80 64 5C 25 1C 00 80 64 5C 25  // .d\%...d\%...d\%
    B8D0: 24 00 80 18 5C 25 28 00 80 64 0D 25 2C 00 01 0D  // $...\%(..d.%,...
    B8E0: 25 20 00 01 0D 25 00 00 01 01 05 D8 01 B8 29 E8  // % ...%........).
    B8F0: 00 01 05 DC 01 B8 29 E8 00 01 05 E0 01 B8 29 E8  // ......).......).
    B900: 00 01 05 E4 01 B8 29 E8 00 01 E5 14 02 64 01 05  // ......)......d..
    B910: 74 01 00 00 24 00 37 00 00 01 05 82 00 14 00 00  // t...$.7.........
    B920: C0 0D 65 83 00 01 51 FA 01 05 82 00 00 00 00 C0  // ..e...Q.........
    B930: 0D 25 83 00 01 01 05 82 00 70 01 50 C0 37 05 00  // .%.......p.P.7..
    B940: 54 00 18 01 01 05 A8 01 20 40 00 00 01 E5 60 02  // T....... @....`.
    B950: 64 01 E5 DC 02 64 01 25 44 03 00 37 00 00 07 A5  // d....d.%D..7....
    B960: 97 01 F7 54 00 92 01 01 05 82 00 78 03 20 C0 01  // ...T.......x. ..
    B970: 0D 83 00 19 00 01 05 82 00 00 00 60 C0 5C 05 83  // ...........`.\..
    B980: 00 FD FF FF FF 02 00 00 00 01 05 82 00 10 00 00  // ................
    B990: C0 01 05 83 00 02 00 80 2A 01 05 82 00 70 03 00  // ........*....p..
    B9A0: 80 3C 05 83 00 00 00 02 00 46 28 04 01 05 82 00  // .<.......F(.....
    B9B0: 60 03 20 C0 37 05 00 5C 05 60 03 10 01 18 F0 20  // `. .7..\.`..... 
    B9C0: A4 62 00 5C 05 64 03 FF FF 00 FC 00 00 01 01 5C  // .b.\.d.........\
    B9D0: 05 6C 03 10 01 08 F0 20 A4 62 00 5C 05 70 03 FF  // .l..... .b.\.p..
    B9E0: FF 00 FC 00 00 01 01 5C 05 50 03 87 00 7C 00 19  // .......\.P...|..
    B9F0: 52 9D 7F 5C 05 54 03 07 0C 80 FF 38 20 01 00 5C  // R..\.T.....8 ..\
    BA00: 05 E4 01 BF FF FF DF BF FF 01 20 5C 05 84 00 FF  // .......... \....
    BA10: FD FF FF FF 7D A0 00 37 00 00 01 05 82 00 04 00  // ....}..7........
    BA20: 30 C0 37 05 00 01 05 04 00 02 00 91 06 01 05 0C  // 0.7.............
    BA30: 00 60 6A 00 08 01 05 10 00 01 00 00 00 37 00 00  // .`j..........7..
    BA40: 02 05 00 44 00 03 05 52 45 03 01 00 00 02 05 00  // ...D...RE.......
    BA50: 44 00 18 0C 52 45 01 05 82 00 04 00 30 C0 37 05  // D...RE......0.7.
    BA60: 00 3E 0D 00 0A 00 44 39 02 3D 0D 00 38 02 44 26  // .>....D9.=..8.D&
    BA70: 02 3D 0D 00 45 01 44 26 02 01 05 1C 00 4D 00 00  // .=..E.D&.....M..
    BA80: AA 01 05 20 00 DA A7 8C 31 43 49 02 01 05 1C 00  // ... ....1CI.....
    BA90: 4D 00 C0 AC 01 05 20 00 EC A7 78 31 43 49 02 01  // M..... ...x1CI..
    BAA0: 05 1C 00 4D 00 C0 AC 01 05 20 00 EC A7 78 31 01  // ...M..... ...x1.
    BAB0: 05 24 00 00 21 00 00 01 05 28 00 FF FF FF FF 01  // .$..!....(......
    BAC0: 05 64 00 96 43 81 01 01 05 68 00 87 00 09 00 01  // .d..C....h......
    BAD0: 05 6C 00 35 14 BF 02 01 05 70 00 01 80 00 00 01  // .l.5.....p......
    BAE0: 05 2C 00 00 21 00 00 01 05 30 00 FF FF FF FF 4A  // .,..!....0.....J
    BAF0: E5 80 00 04 44 A9 02 03 00 41 20 00 54 00 20 00  // ....D....A .T. .
    BB00: 50 08 0D 65 24 00 04 0D 25 24 00 01 43 BE 02 03  // P..e$...%$..C...
    BB10: 00 41 20 00 54 00 20 00 50 08 0D 65 2C 00 04 0D  // .A .T. .P..e,...
    BB20: 25 2C 00 01 01 02 20 00 41 37 00 00 02 05 00 44  // %,.... .A7.....D
    BB30: 00 03 05 52 45 03 01 00 00 02 05 00 44 00 18 0C  // ...RE.......D...
    BB40: 52 45 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00  // RE......0.7..>..
    BB50: 0A 00 44 84 03 3D 0D 00 38 02 44 84 03 3D 0D 00  // ..D..=..8.D..=..
    BB60: 45 01 44 84 03 03 F8 00 80 00 09 E5 00 0C 4C E5  // E.D...........L.
    BB70: 00 04 44 29 03 4C E5 00 08 49 84 03 69 E5 00 04  // ..D).L...I..i...
    BB80: 03 0D 00 00 02 02 05 00 14 01 0B 06 43 37 03 69  // ............C7.i
    BB90: E5 00 08 56 08 00 02 05 00 14 01 05 06 52 45 08  // ...V.........RE.
    BBA0: 05 00 3F 00 00 00 01 05 82 00 04 00 30 C0 37 05  // ..?.........0.7.
    BBB0: 00 5C 8A 10 00 0F F0 00 56 00 41 03 21 41 00 09  // .\......V.A.!A..
    BBC0: 25 41 1F 4B 25 00 20 44 7B 03 03 A5 41 20 33 8A  // %A.K%. D{...A 3.
    BBD0: 41 41 56 08 41 15 1D 41 03 31 02 20 00 41 43 84  // AAV.A..A.1. .AC.
    BBE0: 03 15 05 41 13 2B 02 20 00 41 37 00 00 03 05 00  // ...A.+. .A7.....
    BBF0: 24 00 30 C0 03 05 01 44 00 30 C0 01 05 82 00 80  // $.0....D.0......
    BC00: 00 30 C0 03 38 40 83 00 4C 25 40 04 49 04 04 01  // .0..8@..L%@.I...
    BC10: 02 82 00 00 4A 25 83 00 01 49 04 04 0D 65 83 00  // ....J%...I...e..
    BC20: 04 66 FF 2D 0D 42 2C 04 56 00 41 01 02 82 00 01  // .f.-.B,.V.A.....
    BC30: 4A 25 83 00 01 49 C5 03 01 02 82 00 01 01 04 83  // J%...I..........
    BC40: 00 00 00 2D 0D 42 04 00 2D 25 41 04 3E 25 41 28  // ...-.B..-%A.>%A(
    BC50: 45 C5 03 01 02 82 00 01 4A 25 83 00 01 49 ED 03  // E.......J%...I..
    BC60: 01 02 82 00 00 07 65 83 00 FB 2D 05 00 08 00 00  // ......e...-.....
    BC70: 00 2D 05 01 08 00 00 00 1B 05 40 01 3E 05 00 2C  // .-........@.>..,
    BC80: 00 30 C0 44 A2 03 01 05 BD 00 00 80 00 00 5B 7A  // .0.D..........[z
    BC90: 28 00 25 00 00 00 49 20 20 00 4D 60 46 00 6D 40  // (.%...I  .M`F.m@
    BCA0: 20 00 71 80 40 00 75 00 00 00 79 00 00 00 7D 00  //  .q.@.u...y...}.
    BCB0: 68 00 01 40 0F 00 0A 00 00 00 52 00 01 01 00 00  // h..@......R.....
    BCC0: 37 00 00 52 3E 03 0C 41 14 00 01 0A 0A 15 41 33  // 7..R>..A......A3
    BCD0: 0D 41 01 00 1B 0D 41 04 15 05 41 10 2D 05 41 00  // .A....A...A.-.A.
    BCE0: F4 00 F4 01 02 09 08 41 33 8D 41 00 F4 1B 1D 41  // .......A3.A....A
    BCF0: 07 01 1A 06 00 41 01 05 01 0B 00 00 00 F4 01 25  // .....A.........%
    BD00: C9 00 F4 01 05 C4 00 00 00 00 00 5B 11 01 01 01  // ...........[....
    BD10: 00 04 37 00 00 03 F9 46 00 08 E5 00 7F 03 0A 41  // ..7....F.......A
    BD20: 42 2D 0D 41 04 00 03 8C 41 02 00 2D 0C 42 00 00  // B-.A....A..-.B..
    BD30: 2D 0D 42 04 00 56 30 46 03 04 40 00 00 3E 05 40  // -.B..V0F..@..>.@
    BD40: 00 00 00 00 44 49 00 3D FA 00 40 44 50 00 3E A5  // ....DI.=..@DP.>.
    BD50: 46 01 49 5B 00 33 1A 42 41 43 62 00 03 A5 46 01  // F.I[.3.BACb...F.
    BD60: 3D 02 00 40 47 62 00 2D 1A 42 41 43 2C 00 4C E5  // =..@Gb.-.BAC,.L.
    BD70: 46 80 44 6A 00 5B 03 8A 41 42 56 00 40 03 0A 42  // F.Dj.[..ABV.@..B
    BD80: 41 03 8C 40 00 00 3E 8D 40 FF FF 44 10 01 03 24  // A..@..>.@..D...$
    BD90: 42 02 00 03 22 46 42 09 25 42 3F 3E 25 42 05 49  // B..."FB.%B?>%B.I
    BDA0: A6 00 03 1A 40 40 03 0D 42 04 00 2D 1A 42 41 43  // ....@@..B..-.BAC
    BDB0: E1 00 3E 25 42 06 49 CD 00 33 0D 41 03 00 56 08  // ..>%B.I..3.A..V.
    BDC0: 42 2D 0D 40 01 00 3E 1A 40 40 47 9F 00 2D 1A 42  // B-.@..>.@@G..-.B
    BDD0: 41 2D 0D 41 03 00 43 04 01 03 1A 40 40 09 0D 42  // A-.A..C....@@..B
    BDE0: 1F 00 2D 1A 42 41 4C 25 46 80 49 04 01 56 18 40  // ..-.BAL%F.I..V.@
    BDF0: 4C 25 46 40 49 F9 00 01 02 00 00 40 01 04 01 00  // L%F@I......@....
    BE00: 00 00 43 04 01 01 02 91 0A 40 01 04 92 0A 00 00  // ..C......@......
    BE10: 2D 0D 41 03 00 03 8A 41 42 43 71 00 5B 00 21 00  // -.A....ABCq.[.!.
    BE20: 02 01 00 04 37 00 00 01 01 A4 00 01 01 01 94 00  // ....7...........
    BE30: 00 3C 25 95 00 01 49 13 00 02 00 01 A4 00 5B 00  // .<%...I.......[.
    BE40: 8E 00 01 02 00 04 66 FF 56 08 47 2D 0D 42 5C 00  // ......f.V.G-.B\.
    BE50: 03 21 47 00 09 25 47 F0 42 22 47 63 00 43 00 63  // .!G..%G.B"Gc.C.c
    BE60: 80 36 00 63 60 3E 00 63 20 2E 00 5A 5A 5B 2D 0D  // .6.c`>.c ..ZZ[-.
    BE70: 42 26 00 43 43 00 2D 0D 42 0C 00 43 43 00 2D 0D  // B&.CC.-.B..CC.-.
    BE80: 42 18 00 03 21 47 00 09 25 47 07 2D 0A 42 47 2D  // B...!G..%G.-.BG-
    BE90: 0A 42 47 03 0C 48 00 00 5B 7A 32 00 00 00 00 02  // .BG..H..[z2.....
    BEA0: 00 04 00 26 00 28 00 2A 00 00 02 00 2C 00 2D 00  // ...&.(.*....,.-.
    BEB0: 2E 00 2F 00 00 00 00 01 00 02 00 03 00 04 00 05  // ../.............
    BEC0: 00 0A 00 00 A0 00 40 51 E0 51 80 52 20 53 BF 02  // ......@Q.Q.R S..
    BED0: 02 02 1C 04 20 05 01 64 00 00 00 03 02 02 40 66  // .... ..d......@f
    BEE0: 1F 02 04 01 0C 00 52 45 08 05 01 FF 03 00 00 3D  // ......RE.......=
    BEF0: 0D 01 00 00 49 2F 00 02 04 00 28 00 5B 02 04 01  // ....I/....(.[...
    BF00: 1C 00 52 45 08 05 01 FF 00 00 00 20 05 01 A0 86  // ..RE....... ....
    BF10: 01 00 7C 04 40 20 00 7E 05 40 FF 00 00 00 03 02  // ..|.@ .~.@......
    BF20: 01 40 03 04 40 24 00 21 05 40 A0 86 01 00 2D 02  // .@..@$.!.@....-.
    BF30: 01 40 02 E5 00 01 56 00 03 02 0D 03 02 00 56 00  // .@....V.......V.
    BF40: 04 7C 04 02 3C 00 7E 05 40 10 27 00 00 02 02 01  // .|..<.~.@.'.....
    BF50: 40 02 04 02 4C 00 02 A4 03 56 00 02 E4 03 5A 00  // @...L....V....Z.
    BF60: 52 37 03 01 05 01 03 71 03 03 03 04 40 64 00 21  // R7.....q....@d.!
    BF70: 05 40 A0 86 01 00 02 02 01 40 55 18 03 02 04 02  // .@.......@U.....
    BF80: 50 00 02 E4 03 5B 00 52 37 7C 04 02 40 00 7E 05  // P....[.R7|..@.~.
    BF90: 40 10 27 00 00 02 02 02 40 02 E4 03 57 00 52 37  // @.'.....@...W.R7
    BFA0: 02 E5 03 01 02 02 02 01 52 37 03 01 06 01 03 B1  // ........R7......
    BFB0: 03 03 7C 05 06 A0 86 01 00 7E 02 40 05 03 02 03  // ..|......~.@....
    BFC0: 40 03 02 05 40 43 FA 00 3D E5 00 00 44 66 02 3E  // @...@C..=...Df.>
    BFD0: 04 03 04 00 47 21 01 03 02 03 05 3E 04 03 04 00  // ....G!.....>....
    BFE0: 47 21 01 03 04 03 04 00 2D 05 03 71 02 00 00 03  // G!......-..q....
    BFF0: 04 40 7C 00 3E 05 40 00 00 00 00 44 D9 01 33 04  // .@|.>.@....D..3.
    C000: 03 7C 00 7C 02 03 03 7E 05 40 A0 86 01 00 03 02  // .|.|...~.@......
    C010: 46 40 02 04 01 50 00 03 04 40 64 00 21 05 40 A0  // F@...P...@d.!.@.
    C020: 86 01 00 02 02 02 40 02 05 03 02 00 00 00 02 A4  // ......@.........
    C030: 03 5B 00 52 37 7C 04 03 4C 00 7E 05 40 A0 86 01  // .[.R7|..L.~.@...
    C040: 00 02 02 02 40 02 E4 03 5A 00 52 37 02 02 02 01  // ....@...Z.R7....
    C050: 02 E5 03 01 52 37 03 01 04 01 02 04 01 40 00 02  // ....R7.......@..
    C060: A4 03 57 00 7C 04 03 3C 00 7E 05 40 A0 86 01 00  // ..W.|..<.~.@....
    C070: 02 02 02 40 02 E4 03 56 00 52 37 7C 05 04 10 27  // ...@...V.R7|...'
    C080: 00 00 7E 01 40 01 03 02 04 40 03 02 05 02 3E 02  // ..~.@....@....>.
    C090: 05 04 45 CE 01 33 02 05 04 43 E0 01 33 02 04 05  // ..E..3...C..3...
    C0A0: 03 02 05 04 43 E0 01 03 02 04 02 56 00 05 7C 04  // ....C......V..|.
    C0B0: 02 74 00 7E 05 40 10 27 00 00 03 02 04 40 7C 02  // .t.~.@.'.....@|.
    C0C0: 40 40 02 02 01 40 02 02 02 41 7C 04 02 78 00 7E  // @@...@...A|..x.~
    C0D0: 05 40 10 27 00 00 7C 02 40 40 02 25 03 01 52 37  // .@.'..|.@@.%..R7
    C0E0: 7C 02 05 05 52 37 02 25 03 03 52 37 03 04 40 68  // |...R7.%..R7..@h
    C0F0: 00 21 05 40 0A 00 00 00 2C 02 01 40 7C 04 02 6C  // .!.@....,..@|..l
    C100: 00 7E 05 40 10 27 00 00 2C 02 01 40 7C 04 02 70  // .~.@.'..,..@|..p
    C110: 00 7E 05 40 10 27 00 00 2C 02 01 40 26 05 01 64  // .~.@.'..,..@&..d
    C120: 00 00 00 21 05 40 64 00 00 00 2D 02 02 40 55 38  // ...!.@d...-..@U8
    C130: 00 43 68 00 2D 05 05 70 02 00 00 27 05 05 71 02  // .Ch.-..p...'..q.
    C140: 00 00 21 05 40 71 02 00 00 3E 04 40 04 00 47 89  // ..!.@q...>.@..G.
    C150: 02 02 04 00 2C 00 5B 56 00 00 03 31 00 00 33 25  // ....,.[V...1..3%
    C160: 00 01 02 02 00 40 03 04 46 08 00 03 04 40 80 00  // .....@..F....@..
    C170: 15 25 00 02 2D 0A 42 00 21 04 40 84 00 2D 02 46  // .%..-.B.!.@..-.F
    C180: 40 3D 02 00 46 48 BE 02 02 02 00 46 5B 00 78 00  // @=..FH.....F[.x.
    C190: 01 01 00 00 37 00 00 52 14 0D A5 51 1B 01 54 20  // ....7..R...Q..T 
    C1A0: 54 1B 07 25 44 1B FE 54 20 45 1B 42 29 00 63 00  // T..%D..T E.B).c.
    C1B0: 31 00 63 01 39 00 63 02 4D 00 5A 5A 43 70 00 01  // 1.c.9.c.M.ZZCp..
    C1C0: 25 45 1B 02 43 3E 00 01 25 45 1B 01 54 20 42 1B  // %E..C>..%E..T B.
    C1D0: 54 00 43 1B 54 00 47 1B 43 70 00 01 0D 43 1B 01  // T.C.T.G.Cp...C..
    C1E0: 01 01 05 47 1B 01 00 01 00 0D 65 48 1B 01 0D 65  // ...G......eH...e
    C1F0: 4B 1B 01 01 0D 53 1B 10 10 01 25 42 1B 01 54 30  // K....S....%B..T0
    C200: 51 1B 3A 00 00 5B 74 00 01 01 00 00 37 00 00 4A  // Q.:..[t.....7..J
    C210: A5 CB 05 01 44 15 00 02 65 00 01 0E 25 00 80 52  // ....D...e...%..R
    C220: 14 03 00 46 CC 00 08 25 00 0F 52 14 54 30 9D 1B  // ...F...%..R.T0..
    C230: 3C 69 9D 1B 00 44 65 00 01 69 9D 1B 00 3D 65 00  // <i...De..i...=e.
    C240: 00 44 65 00 4A A5 9C 1B 01 44 65 00 4C 25 46 01  // .De.J....De.L%F.
    C250: 44 69 00 4A 25 A3 1B 01 49 4D 00 4A 25 A3 1B 01  // Di.J%...IM.J%...
    C260: 44 55 00 4A 25 A3 1B 01 49 5D 00 3A 00 00 5B 4A  // DU.J%...I].:..[J
    C270: 25 9D 1B 01 44 69 00 43 65 00 3E 00 01 01 00 00  // %...Di.Ce.>.....
    C280: 37 00 00 52 14 3D 65 00 01 44 30 00 0D 65 9C 1B  // 7..R.=e..D0..e..
    C290: 03 07 25 9C 1B FE 4A A5 9C 1B 01 49 1C 00 07 E5  // ..%...J....I....
    C2A0: 00 1B 7F 54 20 A9 1B 43 3A 00 0D E5 00 1B 80 0D  // ...T ..C:.......
    C2B0: 25 9C 1B 01 3A 00 00 5B 2C 00 02 01 00 00 37 00  // %...:..[,.....7.
    C2C0: 00 3C 21 FC 00 00 49 19 00 0D A5 C0 00 01 43 26  // .<!...I.......C&
    C2D0: 00 3C 61 FC 00 00 49 26 00 0D A5 C0 00 02 0D A5  // .<a...I&........
    C2E0: C1 00 01 5B 22 00 01 01 04 04 03 39 00 00 55 38  // ...["......9..U8
    C2F0: 00 20 02 00 00 03 04 41 00 00 56 38 41 27 02 40  // . .....A..V8A'.@
    C300: 41 02 E2 00 40 5B 19 00 01 01 00 08 37 00 00 52  // A...@[......7..R
    C310: 14 01 01 5E 1B 00 01 01 5F 1B 01 3A 00 00 5B 00  // ...^...._..:..[.
    C320: 80 00 02 01 00 00 56 00 40 03 39 40 00 55 38 00  // ......V.@.9@.U8.
    C330: 66 FF 2D 0D 42 50 00 3E 0C 40 02 00 47 27 00 2D  // f.-.BP.>.@..G'.-
    C340: 0D 42 08 00 43 17 00 33 0C 40 04 00 21 0C 40 06  // .B..C..3.@..!.@.
    C350: 00 2D 0C 40 00 00 56 18 40 03 02 46 40 7B 05 00  // .-.@..V.@..F@{..
    C360: 40 42 0F 00 7E 02 40 46 02 02 00 40 5B 7A 30 00  // @B..~.@F...@[z0.
    C370: 64 00 00 00 00 00 00 00 FF FF 07 00 01 00 00 00  // d...............
    C380: C8 00 3F 00 08 00 19 00 40 06 5F 00 40 00 32 00  // ..?.....@._.@.2.
    C390: 80 0C 7E 00 60 00 64 00 00 32 7F 00 7F 00 64 00  // ..~.`.d..2....d.
    C3A0: C6 00 01 03 04 00 37 00 00 56 00 46 56 00 00 03  // ......7..V.FV...
    C3B0: 21 00 00 55 20 00 3D 65 00 03 44 2C 00 3D 65 00  // !..U .=e..D,.=e.
    C3C0: 0D 46 BB 00 02 29 00 00 32 25 00 08 0E 25 00 60  // .F...)..2%...%.`
    C3D0: 52 14 5C 22 00 4A F8 00 02 22 00 00 52 14 03 08  // R.\".J..."..R...
    C3E0: 41 C0 1A 09 0D 41 03 00 66 FF 2D 0D 42 C2 00 2D  // A....A..f.-.B..-
    C3F0: 0A 42 41 03 24 00 00 00 3D E2 00 00 48 A7 00 3E  // .BA.$...=...H..>
    C400: 25 00 04 44 76 00 03 22 46 00 33 25 46 01 15 25  // %..Dv.."F.3%F..%
    C410: 46 04 0F 25 46 01 33 39 00 00 3E 25 00 01 44 93  // F..%F.39..>%..D.
    C420: 00 3E 25 00 02 44 8C 00 03 25 46 21 03 65 00 2F  // .>%..D...%F!.e./
    C430: 43 97 00 03 65 00 13 03 79 46 00 33 65 46 01 15  // C...e...yF.3eF..
    C440: 2D 46 03 0F 65 46 01 52 14 01 02 F2 1B 46 01 52  // -F..eF.R.....F.R
    C450: EE 1B 00 54 00 F9 1B 54 00 ED 1B 3A 00 00 5B 7A  // ...T...T...:..[z
    C460: 04 00 03 02 01 04 AF 01 01 04 00 08 37 00 00 3D  // ............7..=
    C470: 65 02 01 49 44 01 4B A5 02 03 49 5D 00 02 05 00  // e..ID.K...I]....
    C480: 00 03 00 05 02 05 01 00 05 02 00 3C 21 FC 00 02  // ...........<!...
    C490: 49 57 00 01 8D C0 00 00 02 51 02 01 05 C6 00 00  // IW.......Q......
    C4A0: 00 10 00 01 05 C8 00 00 00 50 00 01 0D C3 00 02  // .........P......
    C4B0: 00 54 20 CA 00 01 05 C2 00 00 01 00 00 56 20 40  // .T ..........V @
    C4C0: 43 83 00 0E 25 02 80 52 14 54 00 CC 00 56 08 48  // C...%..R.T...V.H
    C4D0: 08 25 02 07 0D 25 CA 00 01 01 25 C2 00 01 54 00  // .%...%....%...T.
    C4E0: C6 00 54 00 C8 00 56 20 40 3D A5 01 00 49 8F 00  // ..T...V @=...I..
    C4F0: 0D 25 C2 00 10 07 65 D0 05 FE 3D A5 01 01 47 A0  // .%....e...=...G.
    C500: 00 0D 65 D0 05 01 03 A0 40 C9 00 03 00 46 C4 00  // ..e.....@....F..
    C510: 03 02 41 46 2D 00 46 C6 00 2D 00 41 C8 00 52 14  // ..AF-.F..-.A..R.
    C520: 01 32 07 1A 40 01 32 08 1A 40 01 02 04 1A 46 01  // .2..@.2..@....F.
    C530: 02 05 1A 41 54 30 C1 1A 54 00 5C 1B 01 01 5D 1B  // ...AT0..T.\...].
    C540: 00 54 08 09 1A 54 08 0A 1A 54 08 0B 1A 54 08 0C  // .T...T...T...T..
    C550: 1A 01 09 0E 1A 00 01 19 0D 1A 00 5C 19 01 1A FC  // ...........\....
    C560: F8 01 5C A5 01 1A 0F 10 01 09 06 1A 01 01 25 00  // ..\...........%.
    C570: 1A 01 0D 25 B3 1B 04 5C 62 B3 1B FE 40 54 20 35  // ...%...\b...@T 5
    C580: 1A 54 20 3C 1A 54 00 CA 1B 54 00 C8 1B 54 00 CC  // .T <.T...T...T..
    C590: 1B 4B A5 02 03 49 40 01 0E 25 02 80 52 14 01 05  // .K...I@..%..R...
    C5A0: CC 00 01 00 00 00 3A 00 00 5B 52 14 3D 65 02 00  // ......:..[R.=e..
    C5B0: 49 61 01 54 20 00 1A 3A 00 00 3C 21 FC 00 02 49  // Ia.T ..:..<!...I
    C5C0: 60 01 54 08 C1 00 5B 3D 65 02 10 44 6E 01 01 09  // `.T...[=e..Dn...
    C5D0: 06 1A 01 5B 03 00 40 04 1A 09 05 40 00 00 00 FD  // ...[..@....@....
    C5E0: 2D 01 40 00 09 0D 40 00 F0 01 02 04 1A 40 08 0D  // -.@...@......@..
    C5F0: 00 FF 0F 56 00 41 03 31 41 01 74 0A 00 41 2C 09  // ...V.A.1A.t..A,.
    C600: 01 00 08 25 00 FC 14 05 00 10 01 01 5C 1B 00 01  // ...%........\...
    C610: 09 0D 1A 01 5B 00 49 00 01 01 00 00 37 00 00 52  // ....[.I.....7..R
    C620: 14 07 65 B6 1B FE 3D 65 00 01 44 37 00 54 30 6E  // ..e...=e..D7.T0n
    C630: 1A 54 30 11 1A 54 20 B5 1B 54 20 BD 1B 54 30 BD  // .T0..T ..T ..T0.
    C640: 1B 4A 25 B6 1B 01 49 2B 00 3A 00 00 5B 0D 25 BD  // .J%...I+.:..[.%.
    C650: 1B 01 54 00 9E 1B 07 25 C0 1A F4 3A 00 00 5B 00  // ..T....%...:..[.
    C660: 95 00 01 03 00 00 37 00 00 52 14 0D 25 03 1B 04  // ......7..R..%...
    C670: 54 20 78 1A 54 00 80 1A 3D 65 00 01 49 56 00 0D  // T x.T...=e..IV..
    C680: 25 7E 1A 07 01 25 7F 1A 01 51 01 4A 25 7F 1A 02  // %~...%...Q.J%...
    C690: 44 29 00 54 20 7F 1A 54 08 81 1A 54 08 82 1A 54  // D).T ..T...T...T
    C6A0: 08 83 1A 01 0D 84 1A FF FF 01 0D 85 1A FF FF 01  // ................
    C6B0: 0D 86 1A FF FF 5B 01 31 79 1A 00 56 00 41 03 19  // .....[.1y..V.A..
    C6C0: 41 01 3B 02 41 3D 65 00 02 49 78 00 03 00 40 7C  // A.;.A=e..Ix...@|
    C6D0: 1A 04 02 00 40 43 81 00 03 03 40 00 01 02 7C 1A  // ....@C....@...|.
    C6E0: 40 2D 05 46 04 00 00 00 2D 8D 41 01 00 3E 89 41  // @-.F....-.A..>.A
    C6F0: 01 45 65 00 5B 00 3D 00 01 01 00 04 37 00 00 56  // .Ee.[.=.....7..V
    C700: 00 40 03 38 40 9A 0A 21 05 40 E2 04 00 00 02 02  // .@.8@..!.@......
    C710: 00 40 03 00 40 99 0A 1B 05 40 14 09 0D 40 07 00  // .@..@....@...@..
    C720: 21 05 40 09 3D 00 00 27 05 40 64 00 00 00 2C 02  // !.@.=..'.@d...,.
    C730: 00 40 5B 00 D8 00 01 01 0C 00 37 00 00 01 05 82  // .@[.......7.....
    C740: 00 2C 00 50 C0 4A 25 83 00 01 49 3B 00 02 05 00  // .,.P.J%...I;....
    C750: 40 7E 05 00 01 05 82 00 B4 00 50 C0 02 E8 00 83  // @~........P.....
    C760: 00 52 29 26 05 00 10 27 00 00 02 02 00 40 5B 03  // .R)&...'.....@[.
    C770: 05 00 AC 02 50 C0 03 05 01 8C 02 50 C0 03 05 02  // ....P......P....
    C780: 78 02 50 C0 01 05 82 00 40 03 50 C0 4A 25 83 00  // x.P.....@.P.J%..
    C790: 01 44 75 00 03 05 00 28 03 50 C0 03 05 01 08 03  // .Du....(.P......
    C7A0: 50 C0 03 05 02 F4 02 50 C0 01 02 82 00 02 4A 05  // P......P......J.
    C7B0: 83 00 80 00 00 00 44 8C 00 2D 05 01 10 00 00 00  // ......D..-......
    C7C0: 01 02 82 00 01 56 00 40 03 18 40 83 00 21 05 40  // .....V.@..@..!.@
    C7D0: 10 27 00 00 03 02 46 40 56 00 40 03 08 40 83 00  // .'....F@V.@..@..
    C7E0: 21 05 40 10 27 00 00 27 05 40 00 00 01 00 2D 02  // !.@.'..'.@....-.
    C7F0: 46 40 01 02 82 00 00 56 00 40 03 20 40 83 00 09  // F@.....V.@. @...
    C800: 25 40 0F 75 02 46 40 02 02 00 46 5B 53 01 02 03  // %@.u.F@...F[S...
    C810: 00 18 37 00 00 66 FF 2D 0D 42 47 01 55 28 05 2D  // ..7..f.-.BG.U(.-
    C820: 09 42 05 2D 09 42 05 03 0C 48 00 00 03 09 41 03  // .B.-.B...H....A.
    C830: 2D 19 41 03 3E 0D 41 03 00 46 3F 00 5C 05 B3 1B  // -.A.>.A..F?.\...
    C840: FB 0F F0 FF 00 30 00 00 43 4B 00 5C 05 B3 1B FF  // .....0..CK.\....
    C850: 0F F0 FF 04 40 00 00 03 09 41 00 2D 19 41 00 33  // ....@....A.-.A.3
    C860: 0D 41 01 00 01 0A 80 1B 41 54 08 82 1B 01 99 82  // .A......AT......
    C870: 1B 02 03 19 41 00 33 09 41 02 56 18 41 03 B1 41  // ....A.3.A.V.A..A
    C880: 04 33 1A 41 41 01 8A 81 1B 41 03 19 41 00 33 09  // .3.AA....A..A.3.
    C890: 41 02 2D 1A 41 41 2D 09 41 00 4B 25 04 10 44 99  // A.-.AA-.A.K%..D.
    C8A0: 00 2D 09 41 00 01 0A 81 1B 41 03 21 41 04 09 25  // .-.A.....A.!A..%
    C8B0: 41 02 1B 25 41 01 01 22 83 1B 41 54 00 5E 1B 01  // A..%A.."..AT.^..
    C8C0: 31 5E 1B 04 01 B1 5E 1B 04 03 09 41 01 2D 19 41  // 1^....^....A.-.A
    C8D0: 01 33 0D 41 01 00 01 0A 87 1B 41 54 08 8E 1B 01  // .3.A......AT....
    C8E0: 99 8E 1B 03 03 19 41 01 33 09 41 03 56 18 41 03  // ......A.3.A.V.A.
    C8F0: B9 41 04 33 1A 41 41 01 8A 8D 1B 41 03 19 41 01  // .A.3.AA....A..A.
    C900: 33 09 41 03 2D 1A 41 41 2D 09 41 01 4B 25 04 20  // 3.A.-.AA-.A.K%. 
    C910: 44 0B 01 2D 09 41 01 01 0A 8D 1B 41 03 21 41 04  // D..-.A.....A.!A.
    C920: 09 25 41 04 1B 25 41 02 01 22 8F 1B 41 54 00 5F  // .%A..%A.."..AT._
    C930: 1B 01 39 5F 1B 04 01 B9 5F 1B 04 03 21 41 04 09  // ..9_...._...!A..
    C940: 25 41 80 1B 25 41 07 01 22 9E 1B 41 3A 00 00 5B  // %A..%A.."..A:..[
    C950: 7A 0C 00 00 00 00 02 00 04 00 26 00 28 00 2A 00  // z.........&.(.*.
    C960: BE 00 01 01 00 04 37 00 00 03 A1 40 00 3D A5 00  // ......7....@.=..
    C970: 00 49 49 00 66 04 03 24 40 58 00 3E 25 40 FF 49  // .II.f..$@X.>%@.I
    C980: AE 00 55 00 01 02 25 01 28 52 09 02 0D 01 29 01  // ..U...%.(R....).
    C990: 52 09 02 0D 01 2A 02 52 09 02 0D 01 2B 03 52 09  // R....*.R....+.R.
    C9A0: 03 B1 40 01 01 B1 0A 15 01 66 1C 03 64 40 10 00  // ..@......f..d@..
    C9B0: 56 20 40 2D 0D 42 14 00 54 30 CD 05 3E A4 40 0A  // V @-.B..T0..>.@.
    C9C0: 00 49 93 00 3D A5 00 00 44 AE 00 03 24 41 1C 00  // .I..=...D...$A..
    C9D0: 03 71 41 00 09 0D 41 0F 0F 3E 62 41 41 49 93 00  // .qA...A..>bAAI..
    C9E0: 01 A2 CD 05 40 01 64 80 0A 1C 00 3D A4 00 1C 00  // ....@.d....=....
    C9F0: 44 AE 00 2D 0C 42 04 00 2D 25 40 01 3E 62 40 40  // D..-.B..-%@.>b@@
    CA00: 49 5C 00 01 F1 0A 15 00 0D A5 0A 15 80 5B 01 A2  // I\...........[..
    CA10: CD 05 40 01 64 80 0A 1C 00 54 18 0A 15 5B 0A 00  // ..@.d....T...[..
    CA20: 01 01 08 00 37 00 00 5B 1A 00 01 01 00 04 37 00  // ....7..[......7.
    CA30: 00 01 05 E5 09 FC FD FC FC 01 05 E6 09 FD F8 FC  // ................
    CA40: FC 5B 31 02 01 01 00 08 37 00 00 0D 25 F4 16 08  // .[1.....7...%...
    CA50: 07 25 62 18 FE 56 00 41 03 39 41 01 09 25 41 0F  // .%b..V.A.9A..%A.
    CA60: 03 0A 40 42 66 FF 2D 0D 42 11 02 15 25 41 02 2D  // ..@Bf.-.B...%A.-
    CA70: 0A 42 41 03 0C 41 00 00 01 02 00 00 41 07 A5 01  // .BA..A......A...
    CA80: 00 FE 54 08 01 00 01 0C FB 16 02 00 03 0A 42 40  // ..T...........B@
    CA90: 03 05 40 50 C3 00 00 56 00 41 03 21 41 00 27 02  // ..@P...V.A.!A.'.
    CAA0: 40 41 01 8A F7 16 40 01 25 F7 16 02 0D 25 F5 16  // @A....@.%....%..
    CAB0: 02 01 A9 F9 16 01 4B 25 01 01 49 7F 00 54 30 F9  // ......K%..I..T0.
    CAC0: 16 01 0D F9 16 00 31 2B A5 F9 16 01 4B 25 01 02  // ......1+....K%..
    CAD0: 44 96 00 2B A5 F9 16 01 56 00 41 03 71 41 01 0F  // D..+....V.A.qA..
    CAE0: E5 41 80 01 02 FA 16 41 03 69 41 00 2D A5 41 01  // .A.....A.iA.-.A.
    CAF0: 01 02 FA 16 41 4B 25 01 02 44 C6 00 56 28 41 2D  // ....AK%..D..V(A-
    CB00: A5 41 01 01 02 FA 16 41 4B 25 01 01 44 E7 00 03  // .A.....AK%..D...
    CB10: 71 41 00 2D A5 41 01 01 02 FA 16 41 03 79 41 00  // qA.-.A.....A.yA.
    CB20: 2D A5 41 01 01 02 FA 16 41 0D 25 F4 16 01 03 A5  // -.A.....A.%.....
    CB30: 41 01 43 BA 01 03 29 40 01 03 65 40 01 03 99 40  // A.C...)@..e@...@
    CB40: 00 56 00 41 03 71 41 01 0F 65 41 01 0F E5 41 80  // .V.A.qA..eA...A.
    CB50: 01 02 FA 16 41 01 A5 F9 16 04 3D 65 01 04 47 28  // ....A.....=e..G(
    CB60: 01 01 0D F9 16 01 13 43 57 01 01 A2 F9 16 40 01  // .......CW.....@.
    CB70: 0D F9 16 01 31 43 57 01 07 65 F9 16 EF 01 A5 F9  // ....1CW..e......
    CB80: 16 03 3E 25 40 04 46 57 01 01 A2 F9 16 40 31 A5  // ..>%@.FW.....@1.
    CB90: F9 16 01 5C 65 F9 16 FD 20 0D 25 F4 16 01 03 A5  // ...\e... .%.....
    CBA0: 41 00 43 BA 01 03 05 41 01 00 00 80 03 AA 41 40  // A.C....A......A@
    CBB0: 01 02 FA 16 41 3D 65 01 01 49 82 01 02 A8 00 FA  // ....A=e..I......
    CBC0: 16 43 F9 01 56 00 41 03 1A 41 40 3B 02 41 03 28  // .C..V.A..A@;.A.(
    CBD0: 41 FA 16 03 68 41 FA 16 03 A8 41 FA 16 03 E8 41  // A...hA....A....A
    CBE0: FA 16 04 02 00 41 56 28 40 2D 8D 40 04 00 3E 25  // .....AV(@-.@..>%
    CBF0: 40 04 47 F9 01 33 25 40 04 43 36 01 02 65 00 02  // @.G..3%@.C6..e..
    CC00: 03 0D 41 64 00 33 0D 41 01 00 3E 0D 41 00 00 44  // ..Ad.3.A..>.A..D
    CC10: F9 01 51 64 4A 25 F6 16 10 44 C3 01 4A 65 F6 16  // ..QdJ%...D..Je..
    CC20: 06 49 F9 01 02 65 00 01 0D 25 F5 16 02 3E A5 41  // .I...e...%...>.A
    CC30: 00 44 63 01 4B 25 01 01 44 F3 00 0D 25 F5 16 02  // .Dc.K%..D...%...
    CC40: 01 25 F4 16 02 51 01 54 00 F4 16 54 00 FB 16 5B  // .%...Q.T...T...[
    CC50: 7A 20 00 68 48 01 00 6C 48 03 02 70 48 05 04 74  // z .hH..lH..pH..t
    CC60: 48 42 41 78 48 49 48 7C 48 4B 4A 98 48 29 28 80  // HBAxHIH|HKJ.H)(.
    CC70: 48 4D 4C 00 5F 00 02 02 00 04 37 00 00 3D 65 00  // HML._.....7..=e.
    CC80: 01 44 54 00 55 30 00 3D 25 00 06 46 50 00 32 25  // .DT.U0.=%..FP.2%
    CC90: 00 01 20 25 00 08 56 08 48 03 22 48 40 0D A5 99  // .. %..V.H."H@...
    CCA0: 18 01 02 A0 00 98 18 08 A5 00 03 4A 25 98 18 02  // ...........J%...
    CCB0: 44 4A 00 5C 0D 99 18 FF FE 01 00 43 50 00 0D 0D  // DJ.\.......CP...
    CCC0: 99 18 01 01 3A 00 00 5B 0D 65 CF 05 08 0D 25 80  // ....:..[.e....%.
    CCD0: 01 01 5B 00 0A 00 01 02 00 00 5B 7A 00 00 0A 00  // ..[.......[z....
    CCE0: 01 01 00 04 55 00 00 5B 3C 00 01 01 00 00 55 00  // ....U..[<.....U.
    CCF0: 00 55 00 01 01 05 91 0A 03 00 00 00 02 38 00 92  // .U...........8..
    CD00: 0A 02 21 01 00 08 25 00 0F 08 25 01 F0 20 05 00  // ..!...%...%.. ..
    CD10: 20 4E 00 00 02 02 00 40 20 05 01 E2 04 00 00 02  //  N.....@ .......
    CD20: 02 01 40 5B AF 01 01 06 04 18 03 05 46 00 51 25  // ..@[........F.Q%
    CD30: 02 3D E5 00 01 49 F3 00 55 38 00 66 08 03 24 41  // .=...I..U8.f..$A
    CD40: 04 00 2D 0D 42 08 00 55 00 02 3D 04 00 00 00 47  // ..-.B..U..=....G
    CD50: 42 00 2C A5 02 01 2D 0D 42 0C 00 3D A2 02 41 45  // B.,...-.B..=..AE
    CD60: 26 00 55 00 01 5B 02 24 02 05 00 02 64 02 04 00  // &.U..[.$....d...
    CD70: 03 01 46 00 56 00 40 03 21 40 02 6F 02 46 40 7C  // ..F.V.@.!@.o.F@|
    CD80: 05 46 00 40 00 00 7E 05 40 C4 09 00 00 02 02 01  // .F.@..~.@.......
    CD90: 40 02 E5 02 01 7B 05 01 32 00 00 00 7E 05 40 10  // @....{..2...~.@.
    CDA0: 27 00 00 7C 05 40 4E 0C 00 00 7E 05 40 40 4B 4C  // '..|.@N...~.@@KL
    CDB0: 00 02 0A 05 40 21 05 40 40 4B 4C 00 27 05 40 4E  // ....@!.@@KL.'.@N
    CDC0: 0C 00 00 02 01 03 01 32 02 03 40 21 05 46 D0 07  // .......2..@!.F..
    CDD0: 00 00 27 05 40 10 27 00 00 03 02 00 46 33 02 00  // ..'.@.'.....F3..
    CDE0: 40 27 05 00 10 27 00 00 3E 0C 40 06 00 48 D1 00  // @'...'..>.@..H..
    CDF0: 03 0C 40 06 00 55 00 04 02 8A 04 40 03 01 40 01  // ..@..U.....@..@.
    CE00: 33 01 40 04 21 05 40 32 00 00 00 27 05 40 50 C3  // 3.@.!.@2...'.@P.
    CE10: 00 00 02 8A 05 40 5B 55 38 00 03 05 40 00 32 00  // .....@[U8...@.2.
    CE20: 00 3D 05 00 00 00 00 00 44 3C 01 03 02 40 46 2D  // .=......D<...@F-
    CE30: 01 40 00 33 05 40 01 00 00 00 27 01 40 00 3E 05  // .@.3.@....'.@.>.
    CE40: 40 9C 18 00 00 47 2B 01 03 05 40 00 32 00 00 3E  // @....G+...@.2..>
    CE50: 05 40 C8 00 00 00 46 3C 01 03 05 40 C8 00 00 00  // .@....F<...@....
    CE60: 66 FF 2D 0D 42 8F 01 3E 0C 40 02 00 47 53 01 2D  // f.-.B..>.@..GS.-
    CE70: 0D 42 08 00 43 43 01 33 0C 40 00 00 2D 0C 40 06  // .B..CC.3.@..-.@.
    CE80: 00 33 0D 40 01 00 27 0C 40 06 00 2D 0C 40 04 00  // .3.@..'.@..-.@..
    CE90: 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00 2D 0C  // ...@3.@..!.@..-.
    CEA0: 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00 40 5B  // @..'.F@...@...@[
    CEB0: 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80 0C 40  // z ...@.....@...@
    CEC0: 00 32 00 80 0C 38 18 60 00 64 00 00 32 00 32 7F  // .2...8.`.d..2.2.
    CED0: 00 64 00 00 07 00 02 01 00 00 5B 00 70 01 02 01  // .d........[.p...
    CEE0: 08 04 37 00 00 66 1C 2D 0C 42 06 00 3D E5 00 02  // ..7..f.-.B..=...
    CEF0: 44 4B 00 3D E5 00 03 44 F7 00 03 38 00 2F 0A 09  // DK.=...D...8./..
    CF00: 25 00 20 02 01 01 00 02 F0 01 CD 05 52 12 01 08  // %. .........R...
    CF10: AB 0A 81 0A 01 18 83 0A 81 0A 5C E2 2F 0A DF 00  // ..........\./...
    CF20: 5C E2 30 0A DF 00 5B 02 F0 01 CD 05 0E E5 01 80  // \.0...[.........
    CF30: 52 12 02 01 01 00 02 E4 01 2C 00 52 26 01 39 DD  // R........,.R&.9.
    CF40: 09 01 02 EC 01 2C 00 52 26 01 79 DD 09 01 02 F4  // .....,.R&.y.....
    CF50: 01 2C 00 52 26 01 B9 DD 09 01 02 FC 01 2C 00 52  // .,.R&........,.R
    CF60: 26 01 F9 DD 09 01 02 E4 01 30 00 52 26 01 39 DE  // &........0.R&.9.
    CF70: 09 01 02 EC 01 30 00 52 26 01 79 DE 09 01 02 F4  // .....0.R&.y.....
    CF80: 01 30 00 52 26 01 B9 DE 09 01 02 FC 01 30 00 52  // .0.R&........0.R
    CF90: 26 01 F9 DE 09 01 31 05 DE 09 01 01 01 00 02 E5  // &.....1.........
    CFA0: 01 08 52 26 3D E5 01 04 46 D3 00 02 E5 01 04 3D  // ..R&=...F......=
    CFB0: E5 01 08 46 E1 00 32 E5 01 04 43 F0 00 1A 3D 01  // ...F..2...C...=.
    CFC0: 01 3D E5 01 12 45 F0 00 02 E5 01 12 5C 39 02 0A  // .=...E......\9..
    CFD0: E0 01 5B 52 3B 03 05 00 10 00 00 00 03 05 01 2D  // ..[R;..........-
    CFE0: 00 00 00 55 38 00 3D 01 00 01 45 30 01 03 0D 00  // ...U8.=...E0....
    CFF0: 18 00 03 05 01 2E 00 00 00 3D 01 00 02 45 30 01  // .........=...E0.
    D000: 03 0D 00 20 00 03 05 01 2F 00 00 00 02 01 01 00  // ... ..../.......
    D010: 02 F0 01 CD 05 0E E5 01 80 52 12 56 00 41 01 02  // .........R.V.A..
    D020: 91 0A 01 01 04 92 0A 0C 00 01 02 91 0A 00 01 04  // ................
    D030: 92 0A 10 00 2D 05 00 01 00 00 00 2D 25 41 01 2D  // ....-......-%A.-
    D040: 0D 42 04 00 3E 25 41 07 45 4D 01 5B 00 01 01 02  // .B..>%A.EM.[....
    D050: 04 04 37 00 00 3D 25 00 FF 49 EC 00 02 20 00 80  // ..7..=%..I... ..
    D060: 0A 4A 25 80 0A 08 49 26 00 08 25 00 10 07 25 80  // .J%...I&..%...%.
    D070: 0A EF 01 05 32 0A 08 00 00 00 01 05 32 0A 10 00  // ....2.......2...
    D080: 00 00 01 05 82 00 10 00 60 C0 01 05 83 00 00 80  // ........`.......
    D090: 03 00 01 05 82 00 14 00 60 C0 03 00 40 83 00 66  // ........`...@..f
    D0A0: 18 3E 04 40 04 00 49 EB 00 03 00 40 83 00 03 00  // .>.@..I....@....
    D0B0: 00 83 00 03 00 41 83 00 3E 05 40 00 00 00 00 44  // .....A..>.@....D
    D0C0: EB 00 01 00 91 0A 83 00 01 00 92 0A 83 00 33 0D  // ..............3.
    D0D0: 40 01 00 3E 0D 40 00 00 49 76 00 01 05 64 C0 0C  // @..>.@..Iv...d..
    D0E0: 02 00 00 54 00 65 C0 01 05 66 C0 CC 28 00 00 54  // ...T.e...f..(..T
    D0F0: 00 67 C0 15 05 00 02 2D 05 00 00 00 00 7C 01 02  // .g.....-.....|..
    D100: E8 C0 00 51 32 4A E5 A0 21 80 49 B9 00 01 05 32  // ...Q2J..!.I....2
    D110: 0A 08 00 00 00 01 05 32 0A 04 00 00 00 01 05 32  // .......2.......2
    D120: 0A 01 00 00 00 51 32 50 02 4A 25 80 0A 80 44 DD  // .....Q2P.J%...D.
    D130: 00 5C 21 80 0A EF 00 5B 01 65 E7 0A FF 01 21 E7  // .\!....[.e....!.
    D140: 0A 00 02 05 01 04 00 00 00 52 1F 5B 8C 00 01 04  // .........R.[....
    D150: 00 00 03 05 40 7C 01 00 00 3D A5 00 00 44 15 00  // ....@|...=...D..
    D160: 5B 03 00 46 20 49 7C 02 40 46 7E 05 40 A0 86 01  // [..F I|.@F~.@...
    D170: 00 03 00 41 23 49 09 05 41 03 00 00 00 6F 02 40  // ...A#I..A....o.@
    D180: 41 7C 05 40 45 0C 00 00 7E 05 40 40 4B 4C 00 3E  // A|.@E...~.@@KL.>
    D190: 05 40 00 00 00 00 49 51 00 03 25 40 01 01 8A 22  // .@....IQ..%@..."
    D1A0: 49 40 7C 05 40 40 4B 4C 00 7E 05 40 45 0C 00 00  // I@|.@@KL.~.@E...
    D1B0: 03 00 41 23 49 09 05 41 03 00 00 00 75 02 40 41  // ..A#I..A....u.@A
    D1C0: 03 00 46 20 49 33 02 46 40 01 02 21 49 46 51 01  // ..F I3.F@..!IFQ.
    D1D0: 0D 65 23 49 01 51 01 5B 31 00 01 03 04 00 37 00  // .e#I.Q.[1.....7.
    D1E0: 00 55 38 00 26 05 00 E2 04 00 00 01 E2 9A 0A 40  // .U8.&..........@
    D1F0: 21 05 41 64 00 00 00 27 05 40 09 3D 00 00 15 25  // !.Ad...'.@.=...%
    D200: 40 04 5C A2 99 0A 8F 40 5B 00 10 00 01 03 00 08  // @.\....@[.......
    D210: 37 00 00 55 18 00 55 08 01 5B C3 01 01 04 00 04  // 7..U..U..[......
    D220: 37 00 00 3D 65 00 08 49 23 00 02 05 01 38 00 06  // 7..=e..I#....8..
    D230: 0A 52 45 08 0D 01 FF 03 02 89 00 01 5B 3D 65 00  // .RE.........[=e.
    D240: 03 44 70 01 02 01 01 00 02 65 01 07 52 50 3D 05  // .Dp......e..RP=.
    D250: 02 00 00 00 00 44 0B 01 37 00 00 01 05 82 00 7C  // .....D..7......|
    D260: 02 20 C0 01 05 82 00 94 02 20 C0 4A A5 83 00 06  // . ....... .J....
    D270: 49 49 00 01 05 82 00 7C 02 20 C0 0D 65 83 00 04  // II.....|. ..e...
    D280: 01 05 82 00 7C 02 20 C0 03 00 46 83 00 37 00 00  // ....|. ...F..7..
    D290: 01 05 82 00 80 02 20 C0 5E 65 46 FC 01 3D 25 00  // ...... .^eF..=%.
    D2A0: 01 44 96 00 09 65 46 FC 01 05 82 00 84 02 20 C0  // .D...eF....... .
    D2B0: 3C 0C 83 00 04 00 44 C6 00 07 0D 83 00 9F FF 51  // <.....D........Q
    D2C0: 3C 03 0C 41 04 00 4C 25 41 20 49 BE 00 0F 25 41  // <..A..L%A I...%A
    D2D0: 20 01 0A 83 00 41 51 3C 01 0C 83 00 04 00 51 3C  //  ....AQ<......Q<
    D2E0: 56 00 40 03 19 40 00 21 05 40 64 00 00 00 03 05  // V.@..@.!.@d.....
    D2F0: 41 78 5D 02 00 33 02 41 40 27 05 41 71 02 00 00  // Ax]..3.A@'.Aq...
    D300: 03 22 46 40 01 05 82 00 7C 02 20 C0 01 02 83 00  // ."F@....|. .....
    D310: 46 01 05 82 00 94 02 20 C0 4A A5 83 00 02 49 F7  // F...... .J....I.
    D320: 00 37 00 00 5B 02 01 01 00 52 50 3D 05 02 00 00  // .7..[....RP=....
    D330: 00 00 44 6C 01 4B E5 02 40 44 2F 01 01 05 82 00  // ..Dl.K..@D/.....
    D340: F8 01 60 C0 0D 25 83 00 1F 4B 25 02 80 44 3B 01  // ..`..%...K%..D;.
    D350: 0D A5 90 48 01 03 05 41 FF FF FF FF 69 01 41 02  // ...H...A....i.A.
    D360: 01 05 82 00 E4 01 60 C0 09 00 41 83 00 0F 01 41  // ......`...A....A
    D370: 01 01 02 83 00 41 01 05 82 00 F4 01 60 C0 0D 01  // .....A......`...
    D380: 83 00 02 51 32 5B 55 00 00 5B 02 01 01 00 52 50  // ...Q2[U..[....RP
    D390: 3D 05 02 00 00 00 00 44 6C 01 02 E4 00 05 00 02  // =......Dl.......
    D3A0: A4 00 06 00 02 0D 02 01 01 03 24 41 08 00 4C 25  // ..........$A..L%
    D3B0: 41 01 44 9F 01 02 65 02 02 02 25 01 32 02 64 01  // A.D...e...%.2.d.
    D3C0: 0C 00 02 8C 01 0E 00 3D 65 01 FF 44 C2 01 02 99  // .......=e..D....
    D3D0: 02 00 52 36 2D 0D 42 04 00 43 A3 01 5B 00 83 00  // ..R6-.B..C..[...
    D3E0: 01 03 04 00 37 00 00 3D 65 00 09 44 80 00 03 0A  // ....7..=e..D....
    D3F0: 00 42 66 20 03 0C 41 00 00 2D 0A 41 42 2D 0D 42  // .Bf ..A..-.AB-.B
    D400: 04 00 3E 0A 42 41 44 7C 00 3D 0C 00 00 00 44 3B  // ..>.BAD|.=....D;
    D410: 00 2D 0C 42 02 00 43 24 00 02 0A 01 42 3D 65 00  // .-.B..C$....B=e.
    D420: 03 44 7B 00 3D 65 00 07 44 7B 00 03 E4 41 05 00  // .D{.=e..D{...A..
    D430: 02 04 01 08 00 3E E5 41 00 44 7C 00 3D 8C 00 10  // .....>.A.D|.=...
    D440: 00 47 72 00 2D 0D 42 06 00 33 E5 41 01 43 57 00  // .Gr.-.B..3.A.CW.
    D450: 02 04 00 0C 00 03 0A 42 00 5B 55 00 01 5B 52 1B  // .......B.[U..[R.
    D460: 5B 00 67 02 01 05 00 00 37 00 00 03 20 46 CF 05  // [.g.....7... F..
    D470: 0E 25 00 60 52 14 08 25 00 0F 42 29 00 63 0F 58  // .%.`R..%..B).c.X
    D480: 00 63 11 4E 01 63 12 CC 01 63 01 24 02 63 00 4D  // .c.N.c...c.$.c.M
    D490: 02 63 08 18 01 63 09 F9 00 63 0A 00 01 63 13 08  // .c...c...c...c..
    D4A0: 01 63 14 10 01 63 0B 20 01 63 0C 14 02 63 0D 28  // .c...c. .c...c.(
    D4B0: 01 63 10 41 01 5A 5A 43 F5 00 3D A5 00 02 44 E3  // .c.A.ZZC..=...D.
    D4C0: 00 54 00 72 4A 3D A5 00 00 44 71 00 3D A5 00 05  // .T.rJ=...Dq.=...
    D4D0: 49 EB 00 54 08 A1 4A 3D 25 02 00 49 80 00 02 25  // I..T..J=%..I...%
    D4E0: 02 02 32 25 02 01 01 E1 A1 4A 02 4A 25 A4 4A 01  // ..2%.....J.J%.J.
    D4F0: 49 C6 00 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00  // I..{......~.@...
    D500: 00 56 00 46 03 29 46 02 27 02 40 46 07 65 A8 4A  // .V.F.)F.'.@F.e.J
    D510: FE 01 05 A9 4A 00 80 00 00 01 02 AA 4A 40 0D E5  // ....J.......J@..
    D520: AB 4A 10 0D 65 00 4A 04 02 20 00 00 4A 08 25 00  // .J..e.J.. ..J.%.
    D530: 07 0E 25 00 00 52 14 14 3D 00 04 5C B9 9C 1B 8F  // ..%..R..=..\....
    D540: 00 3A 00 00 5B 01 05 72 4A 01 00 00 00 07 E5 00  // .:..[..rJ.......
    D550: 4A 2F 0D 65 00 4A 04 3A 00 00 5B 54 20 B0 4A 43  // J/.e.J.:..[T .JC
    D560: F5 00 01 25 B0 4A 01 43 F5 00 01 25 B0 4A 02 43  // ...%.J.C...%.J.C
    D570: F5 00 01 25 B0 4A 03 43 F5 00 07 25 A0 4A EF 43  // ...%.J.C...%.J.C
    D580: F5 00 0D 25 A0 4A 10 43 F5 00 0D 65 A8 4A 01 51  // ...%.J.C...e.J.Q
    D590: 0A 07 25 A5 4A FE 51 0A 01 0D A4 4A 01 02 51 C8  // ..%.J.Q....J..Q.
    D5A0: 43 F5 00 0D 25 B6 4A 10 01 31 A7 4A 00 43 F5 00  // C...%.J..1.J.C..
    D5B0: 01 0D 03 4A 1F 00 01 69 47 4A 02 4C 25 46 10 49  // ...J...iGJ.L%F.I
    D5C0: 77 01 3D A5 00 03 49 77 01 4A 25 0D 4A 10 49 77  // w.=...Iw.J%.J.Iw
    D5D0: 01 01 A5 47 4A 02 43 7C 01 01 B1 47 4A 00 3D 25  // ...GJ.C|...GJ.=%
    D5E0: 02 00 44 91 01 32 25 02 01 14 25 02 04 5C E1 47  // ..D..2%...%..\.G
    D5F0: 4A 8F 02 3D E5 00 04 47 A0 01 0D 25 47 4A 01 43  // J..=...G...%GJ.C
    D600: A5 01 07 25 47 4A FE 3D A5 00 05 44 B3 01 3D A5  // ...%GJ.=...D..=.
    D610: 00 00 49 C4 01 02 A5 00 00 03 39 40 00 33 25 40  // ..I.......9@.3%@
    D620: 01 01 22 A3 4A 40 02 E0 02 48 4A 43 F5 00 02 E0  // ..".J@...HJC....
    D630: 02 48 4A 4B E5 02 01 44 F5 00 02 B0 00 47 4A 02  // .HJK...D.....GJ.
    D640: E5 00 04 4A 25 47 4A 01 44 ED 01 02 E5 00 08 3D  // ...J%GJ.D......=
    D650: A5 00 02 44 FB 01 3D A5 00 03 49 04 02 54 00 48  // ...D..=...I..T.H
    D660: 4A 50 02 43 F5 00 02 A5 00 00 03 31 43 00 4A 62  // JP.C.......1C.Jb
    D670: 47 4A 44 44 F5 00 54 08 A4 4A 51 C8 0D 25 A5 4A  // GJDD..T..JQ..%.J
    D680: 01 51 32 43 F5 00 0D 25 48 4A 01 3D A5 00 00 44  // .Q2C...%HJ.=...D
    D690: 39 02 01 0D 79 4A 0F 01 43 F5 00 03 39 43 00 03  // 9...yJ..C...9C..
    D6A0: 02 40 44 33 25 40 01 01 0A 79 4A 40 43 F5 00 54  // .@D3%@...yJ@C..T
    D6B0: 00 79 4A 07 25 48 4A FE 07 0D 47 4A FE 80 54 20  // .yJ.%HJ...GJ..T 
    D6C0: A0 4A 54 20 B0 4A 43 F5 00 00 29 00 01 01 00 00  // .JT .JC...).....
    D6D0: 37 00 00 66 1C 2D 0D 42 14 00 03 30 40 CD 05 3E  // 7..f.-.B...0@..>
    D6E0: 25 40 00 44 28 00 33 25 40 01 2D 0C 42 04 00 43  // %@.D(.3%@.-.B..C
    D6F0: 15 00 5B 00 46 01 01 06 00 00 37 00 00 42 29 00  // ..[.F.....7..B).
    D700: 63 07 24 01 63 01 25 00 63 00 C0 00 63 0B 27 01  // c.$.c.%.c...c.'.
    D710: 63 04 2C 01 5A 5A 43 3F 01 02 65 00 11 52 04 4B  // c.,.ZZC?..e..R.K
    D720: E5 02 01 49 20 01 02 65 00 0A 55 08 02 52 4D 3D  // ...I ..e..U..RM=
    D730: E5 00 04 47 50 00 68 25 00 01 02 25 02 01 52 4D  // ...GP.h%...%..RM
    D740: 68 25 00 01 3D A5 00 00 49 82 00 20 05 01 64 00  // h%..=...I.. ..d.
    D750: 00 00 02 05 01 14 1E 00 02 2C 21 01 00 02 01 02  // .........,!.....
    D760: 00 02 02 00 40 52 0C 26 05 00 64 00 00 00 02 02  // ....@R.&..d.....
    D770: 01 40 02 01 00 02 02 65 00 01 55 08 02 52 4D 3D  // .@.....e..U..RM=
    D780: E5 00 04 47 A0 00 68 25 00 01 02 25 02 01 52 4D  // ...G..h%...%..RM
    D790: 68 25 00 01 51 05 02 65 00 01 52 04 51 0A 02 65  // h%..Q..e..R.Q..e
    D7A0: 00 09 52 4D 3D E5 00 04 47 20 01 68 25 00 01 52  // ..RM=...G .h%..R
    D7B0: 4D 43 20 01 02 65 00 12 52 04 4B E5 02 01 44 20  // MC ..e..R.K...D 
    D7C0: 01 02 65 00 08 52 4D 3D E5 00 04 47 E4 00 68 25  // ..e..RM=...G..h%
    D7D0: 00 01 52 4D 68 25 00 01 02 65 00 00 52 04 02 65  // ..RMh%...e..R..e
    D7E0: 00 00 52 4D 3D E5 00 04 47 01 01 68 25 00 01 52  // ..RM=...G..h%..R
    D7F0: 4D 68 25 00 01 3D A5 00 00 49 20 01 02 01 02 00  // Mh%..=...I .....
    D800: 02 05 01 14 00 00 00 2C 21 01 00 55 00 00 52 0C  // .......,!..U..R.
    D810: 02 01 00 02 3A 00 00 5B 43 20 01 52 4D 43 20 01  // ....:..[C .RMC .
    D820: 66 06 02 29 00 00 02 68 00 CB 05 02 8C 00 32 00  // f..)...h......2.
    D830: 52 33 5B 02 29 00 00 52 33 5B 38 03 02 01 00 00  // R3[.)..R3[8.....
    D840: 37 00 00 0E 25 00 20 52 14 08 25 00 0F 42 29 00  // 7...%. R..%..B).
    D850: 63 07 35 00 63 0A 3D 00 63 01 21 01 63 00 7B 01  // c.5.c.=.c.!.c.{.
    D860: 63 09 BB 01 63 08 E9 01 63 0B 01 02 5A 5A 5B 0D  // c...c...c...ZZ[.
    D870: 65 C4 48 08 43 AD 02 03 0A 46 48 66 FF 2D 0D 42  // e.H.C....FHf.-.B
    D880: 1A 03 56 00 40 20 25 00 05 2D 0A 42 40 20 25 00  // ..V.@ %..-.B@ %.
    D890: 02 03 0A 48 40 01 04 06 48 00 00 01 64 05 48 04  // ...H@...H...d.H.
    D8A0: 00 07 E5 05 48 FC 07 A5 05 48 8F 03 0A 48 46 56  // ....H....H...HFV
    D8B0: 00 41 3D E5 00 04 47 96 00 03 05 41 00 80 01 01  // .A=...G....A....
    D8C0: 4B 25 02 01 44 96 00 09 4D 41 7F FF 03 E5 41 02  // K%..D...MA....A.
    D8D0: 5C FA D3 48 FC 41 5C 52 C5 48 7F FE 41 3D A5 00  // \..H.A\R.H..A=..
    D8E0: 00 49 CC 00 07 A5 C1 48 7F 66 FF 2D 0D 42 DE 02  // .I.....H.f.-.B..
    D8F0: 2D 0D 42 06 00 56 00 41 3D A5 02 14 49 49 02 03  // -.B..V.A=...II..
    D900: 25 41 20 43 49 02 0D A5 C1 48 80 66 FF 2D 0D 42  // %A CI....H.f.-.B
    D910: B6 02 03 04 40 00 00 3E 05 40 00 00 00 00 44 AD  // ....@..>.@....D.
    D920: 02 03 21 43 00 03 E2 41 44 4C E4 41 05 00 44 07  // ..!C...ADL.A..D.
    D930: 01 3D A4 00 04 00 49 07 01 3D 04 01 00 00 47 0F  // .=....I..=....G.
    D940: 01 2D 0D 42 0C 00 43 D8 00 03 04 40 06 00 03 24  // .-.B..C....@...$
    D950: 41 0A 00 03 64 41 0B 00 43 52 02 07 65 C4 48 F7  // A...dA..CR..e.H.
    D960: 03 0A 46 48 56 00 41 3D E5 00 04 47 3C 01 07 25  // ..FHV.A=...G<..%
    D970: E2 48 F9 43 42 01 5C 25 E2 48 F9 02 4A 65 E0 48  // .H.CB.\%.H..Je.H
    D980: 01 44 42 01 07 25 E0 48 F8 4A 65 E0 48 01 44 4F  // .DB..%.H.Je.H.DO
    D990: 01 2D E5 41 01 2D 0D 48 10 00 3E E5 41 04 45 2D  // .-.A.-.H..>.A.E-
    D9A0: 01 03 0A 48 46 0D 25 D1 48 02 4A 25 D1 48 04 44  // ...HF.%.H.J%.H.D
    D9B0: 70 01 43 AD 02 07 25 D1 48 FD 4A 25 D1 48 04 49  // p.C...%.H.J%.H.I
    D9C0: 80 01 0D 65 C4 48 08 56 00 41 4A 65 E0 48 01 44  // ...e.H.V.AJe.H.D
    D9D0: 90 01 5C 25 E0 48 F8 04 51 02 4A 65 E0 48 01 44  // ..\%.H..Q.Je.H.D
    D9E0: A0 01 2D A5 41 01 2D 0D 48 10 00 3E A5 41 04 45  // ..-.A.-.H..>.A.E
    D9F0: 90 01 43 AD 02 03 0A 46 48 56 08 48 20 25 00 02  // ..C....FHV.H %..
    DA00: 03 22 48 40 0D 25 05 48 01 0D E5 06 48 10 03 0A  // ."H@.%.H....H...
    DA10: 48 46 0D A5 D3 48 01 51 14 0D 25 D3 48 01 51 14  // HF...H.Q..%.H.Q.
    DA20: 43 AD 02 07 A5 D3 48 FE 56 00 40 20 25 00 02 03  // C.....H.V.@ %...
    DA30: 0A 48 40 07 E5 06 48 EF 43 AD 02 08 A5 00 1B 66  // .H@...H.C......f
    DA40: FF 2D 0D 42 DE 02 03 21 43 00 03 A2 40 44 03 0C  // .-.B...!C...@D..
    DA50: 40 02 00 4C A4 40 00 00 49 29 02 2D 0C 42 04 00  // @..L.@..I).-.B..
    DA60: 43 14 02 2D 0D 42 06 00 3D A4 00 00 00 44 49 02  // C..-.B..=....DI.
    DA70: 03 24 41 00 00 3E 25 41 FF 44 49 02 2D 0A 42 40  // .$A..>%A.DI.-.B@
    DA80: 43 2E 02 03 04 40 01 00 03 65 41 08 01 0A C3 48  // C....@...eA....H
    DA90: 40 01 05 DA 48 88 88 01 00 01 F2 DB 48 40 01 BA  // @...H.......H@..
    DAA0: E2 48 40 01 BA F2 48 40 01 BA 02 49 40 01 BA 12  // .H@...H@...I@...
    DAB0: 49 40 01 25 E1 48 20 01 25 F1 48 20 01 25 01 49  // I@.%.H .%.H .%.I
    DAC0: 20 01 25 11 49 20 01 2A E1 48 41 01 2A F1 48 41  //  .%.I .*.HA.*.HA
    DAD0: 01 2A 01 49 41 01 2A 11 49 41 3D 65 00 0B 44 AD  // .*.IA.*.IA=e..D.
    DAE0: 02 5C A2 C8 48 DF 41 3A 00 00 5B 7A 84 00 0C 00  // .\..H.A:..[z....
    DAF0: FF FF FF 00 02 3F 00 00 00 5F 00 08 40 9C 00 00  // .....?..._..@...
    DB00: 03 3F 00 00 00 5F 00 08 FF FF FF 00 03 3F 00 00  // .?..._.......?..
    DB10: 2A 57 20 10 00 00 00 00 3F 00 05 00 39 00 00 4B  // *W .....?...9..K
    DB20: 00 00 80 01 3A 00 00 80 02 1B 00 00 80 03 00 00  // ....:...........
    DB30: 00 80 08 34 25 00 80 09 1C 25 00 80 0A 00 1B 00  // ...4%....%......
    DB40: 9F 10 14 3F 00 80 11 01 38 00 9F 18 00 4A 00 9F  // ...?....8....J..
    DB50: FF 00 00 FF 03 02 01 00 01 03 02 01 00 01 03 02  // ................
    DB60: 01 00 01 03 02 01 00 01 03 02 01 00 01 03 02 01  // ................
    DB70: 00 01 4C 02 01 02 00 08 37 00 00 3D 0D 00 00 00  // ..L.....7..=....
    DB80: 44 CE 01 56 00 41 03 21 41 01 09 25 41 0F 15 0D  // D..V.A.!A..%A...
    DB90: 41 02 03 0A 40 42 66 FF 2D 0D 42 34 02 2D 0A 42  // A...@Bf.-.B4.-.B
    DBA0: 41 03 0C 48 02 00 0D A5 68 48 01 54 08 68 48 03  // A..H....hH.T.hH.
    DBB0: 0C 48 00 00 03 F9 41 01 15 3D 41 04 5C BA 00 5C  // .H....A..=A.\..\
    DBC0: 8F 41 03 0A 42 40 4A 25 00 5C 01 49 81 00 0D 0D  // .A..B@J%.\.I....
    DBD0: 00 5C 01 01 0D 25 00 5C 10 4A 25 00 5C 20 44 67  // .\...%.\.J%.\ Dg
    DBE0: 00 07 25 00 5C EF 4A 25 00 5C 20 49 74 00 0D 25  // ..%.\.J%.\ It..%
    DBF0: 03 5C 40 56 00 41 03 09 41 00 3B 02 41 03 3B 41  // .\@V.A..A.;.A.;A
    DC00: 00 1B 25 41 04 01 A2 01 5C 41 03 69 41 01 15 2D  // ..%A....\A.iA..-
    DC10: 41 04 01 2A 01 5C 41 56 00 40 0F E5 40 80 03 73  // A..*.\AV.@..@..s
    DC20: 40 00 01 02 06 5C 40 56 00 40 03 6B 40 00 01 02  // @....\@V.@.k@...
    DC30: 06 5C 40 03 63 40 00 01 02 06 5C 40 03 7B 40 00  // .\@.c@....\@.{@.
    DC40: 09 65 40 0F 01 02 06 5C 40 3E 25 41 04 47 10 01  // .e@....\@>%A.G..
    DC50: 33 25 41 04 2D 05 46 04 00 00 00 03 63 40 00 01  // 3%A.-.F.....c@..
    DC60: 02 06 5C 40 03 6B 40 00 01 02 06 5C 40 03 73 40  // ..\@.k@....\@.s@
    DC70: 00 01 02 06 5C 40 03 7B 40 00 01 02 06 5C 40 43  // ....\@.{@....\@C
    DC80: D7 00 0D 25 03 5C 02 0D 25 01 5C 01 03 29 40 01  // ...%.\..%.\..)@.
    DC90: 21 25 40 0A 2D 25 40 32 4A 25 04 5C 01 49 42 01  // !%@.-%@2J%.\.IB.
    DCA0: 51 0A 33 25 40 01 3E 25 40 00 49 26 01 02 65 01  // Q.3%@.>%@.I&..e.
    DCB0: 01 43 CA 01 4A 05 04 5C F0 8F FF 00 44 54 01 02  // .C..J..\....DT..
    DCC0: 65 01 02 43 CA 01 01 05 06 5C 01 00 00 80 03 00  // e..C.....\......
    DCD0: 40 06 5C 02 6A 01 40 02 B8 01 04 5C 08 A5 01 1F  // @.\.j.@....\....
    DCE0: 3D A5 01 00 46 7C 01 02 65 01 03 43 CA 01 32 A5  // =...F|..e..C..2.
    DCF0: 01 01 3D 8D 00 00 00 44 CA 01 3D A5 01 00 44 CA  // ..=....D..=...D.
    DD00: 01 03 31 41 01 03 19 40 00 56 18 40 3B 02 40 03  // ..1A...@.V.@;.@.
    DD10: 28 40 06 5C 03 68 40 06 5C 03 A8 40 06 5C 03 E8  // (@.\.h@.\..@.\..
    DD20: 40 06 5C 04 02 00 40 3E 25 41 04 47 CA 01 33 25  // @.\...@>%A.G..3%
    DD30: 41 04 2D 05 46 04 00 00 00 43 9D 01 3A 00 00 5B  // A.-.F....C..:..[
    DD40: 66 FF 2D 0D 42 34 02 03 0C 48 00 00 01 8D 08 5C  // f.-.B4...H.....\
    DD50: 32 00 01 05 09 5C 00 1C 02 00 01 05 0A 5C 10 11  // 2....\.......\..
    DD60: 3D 12 2D 0D 42 04 00 2C 25 00 01 3D 25 00 06 49  // =.-.B..,%..=%..I
    DD70: D5 01 56 08 48 03 25 41 10 0D 65 97 48 40 07 65  // ..V.H.%A..e.H@.e
    DD80: 97 48 BF 33 25 41 01 3E 25 41 00 49 07 02 0D 25  // .H.3%A.>%A.I...%
    DD90: 3B 48 01 54 30 3B 48 0D 25 3C 48 01 54 30 3C 48  // ;H.T0;H.%<H.T0<H
    DDA0: 51 32 5B 7A 18 00 00 00 00 00 1C 00 04 00 38 00  // Q2[z..........8.
    DDB0: 08 00 54 00 0C 00 70 00 10 00 8C 00 14 00 5C 00  // ..T...p.......\.
    DDC0: 01 02 00 04 02 25 01 04 03 31 41 00 09 0D 41 0F  // .....%...1A...A.
    DDD0: 00 15 0D 41 01 66 FF 2D 0D 42 50 00 2D 0A 42 41  // ...A.f.-.BP.-.BA
    DDE0: 03 0C 48 00 00 07 A5 68 48 FE 01 0D 68 48 11 11  // ..H....hH...hH..
    DDF0: 50 02 4A 0D 6B 48 01 00 49 41 00 02 25 01 13 54  // P.J.kH..IA..%..T
    DE00: 08 68 48 54 00 6A 48 3A 00 00 5B 7A 0C 00 00 00  // .hHT.jH:..[z....
    DE10: 04 00 08 00 0C 00 10 00 14 00 9F 00 01 01 04 00  // ................
    DE20: 37 00 00 52 3E 55 00 00 02 E4 00 16 00 66 1C 2D  // 7..R>U.......f.-
    DE30: 0C 42 04 00 52 12 52 3E 01 0C D8 09 06 00 01 64  // .B..R.R>.......d
    DE40: 80 0A 1C 00 02 05 00 08 00 00 00 02 0C 01 08 00  // ................
    DE50: 52 1F 03 08 41 80 0A 09 0D 41 03 00 66 FF 2D 0D  // R...A....A..f.-.
    DE60: 42 9B 00 2D 0A 42 41 03 24 41 00 00 01 05 82 00  // B..-.BA.$A......
    DE70: 0C 00 20 C0 5C 0A 83 00 00 FC 41 02 05 00 30 75  // .. .\.....A...0u
    DE80: 00 03 52 3F 02 05 00 A0 86 01 03 52 3F 02 05 00  // ..R?.......R?...
    DE90: 48 E8 01 03 52 3F 02 05 00 30 75 00 03 52 3F 02  // H...R?...0u..R?.
    DEA0: 05 00 A0 86 01 03 52 3F 02 05 00 40 0D 03 03 52  // ......R?...@...R
    DEB0: 3F 5B 7A 04 00 18 10 08 04 00 89 01 01 01 08 00  // ?[z.............
    DEC0: 37 00 00 03 88 00 28 08 03 09 00 00 03 2A 41 00  // 7.....(......*A.
    DED0: 03 22 43 41 01 22 28 08 44 5C 62 28 08 F8 41 42  // ."CA."(.D\b(..AB
    DEE0: 22 00 63 01 39 00 63 08 7E 00 63 04 E4 00 5A 5A  // ".c.9.c.~.c...ZZ
    DEF0: 43 83 01 01 24 93 0A 00 00 01 24 94 0A 01 00 01  // C...$.....$.....
    DF00: 04 A3 0A 02 00 01 04 A4 0A 06 00 01 04 A5 0A 0A  // ................
    DF10: 00 01 04 A6 0A 0E 00 01 04 A7 0A 12 00 01 04 A8  // ................
    DF20: 0A 16 00 01 04 A9 0A 1A 00 01 04 AA 0A 1E 00 2D  // ...............-
    DF30: 0D 42 22 00 43 78 01 5B 21 65 00 02 03 22 43 40  // .B".Cx.[!e..."C@
    DF40: 03 0A 41 44 37 02 00 4C 09 41 01 49 9C 00 54 20  // ..AD7..L.A.I..T 
    DF50: 00 00 54 30 00 00 15 0D 41 01 4C 09 41 01 49 AF  // ..T0....A.L.A.I.
    DF60: 00 54 28 00 00 54 38 00 00 37 00 00 52 3E 03 24  // .T(..T8..7..R>.$
    DF70: 40 16 00 21 25 40 04 55 00 00 02 EA 00 00 2C E2  // @..!%@.U......,.
    DF80: 00 40 66 1C 03 0C 40 08 00 3E 0D 40 00 00 44 DE  // .@f...@..>.@..D.
    DF90: 00 2D 0C 42 08 00 52 12 37 00 00 43 78 01 01 05  // .-.B..R.7..Cx...
    DFA0: 91 0A 00 00 00 00 3C 0D 92 0A 00 00 44 78 01 3C  // ......<.....Dx.<
    DFB0: 25 E7 0A 07 49 16 01 01 05 91 0A 0E 00 00 00 03  // %...I...........
    DFC0: 00 01 92 0A 5C 05 92 0A 00 FF 00 FF 0F 00 FF 00  // ....\...........
    DFD0: 01 05 32 0A 05 00 00 00 51 0A 01 05 32 0A 01 00  // ..2.....Q...2...
    DFE0: 00 00 03 00 41 E7 0A 3E 62 41 41 49 28 01 51 0A  // ....A..>bAAI(.Q.
    DFF0: 3E 25 41 00 44 51 01 3E 25 41 07 49 78 01 01 05  // >%A.DQ.>%A.Ix...
    E000: 91 0A 0E 00 00 00 01 02 92 0A 01 01 05 91 0A 03  // ................
    E010: 00 00 00 03 38 41 92 0A 15 25 41 04 3C E2 9A 0A  // ....8A...%A.<...
    E020: 41 45 78 01 4A E5 99 0A 04 44 78 01 5C 25 F3 09  // AEx.J....Dx.\%..
    E030: FE 22 2D 65 00 01 3E 65 00 04 45 12 00 01 1A 28  // ."-e..>e..E....(
    E040: 08 00 5B 00 E5 00 02 02 14 00 3D 25 02 01 44 1C  // ..[.......=%..D.
    E050: 00 3D 25 02 02 44 3E 00 3D 25 02 03 44 63 00 5B  // .=%..D>.=%..Dc.[
    E060: 2C 02 01 41 03 05 00 FF FF FF FF 33 02 00 40 3E  // ,..A.......3..@>
    E070: 01 00 00 48 39 00 2C 05 01 01 00 00 00 2C 02 00  // ...H9.,......,..
    E080: 40 5B 3D B9 02 02 44 5E 00 3D 01 00 01 45 51 00  // @[=...D^.=...EQ.
    E090: 32 01 00 01 5B 32 01 01 00 02 01 00 01 02 B9 02  // 2...[2..........
    E0A0: 02 5B 2C 01 00 01 5B 3D 05 00 00 00 00 00 49 77  // .[,...[=......Iw
    E0B0: 00 3D 05 01 00 00 00 00 44 E0 00 56 00 43 03 0D  // .=......D..V.C..
    E0C0: 40 1F 00 03 01 00 00 3D 05 01 00 00 00 00 44 95  // @......=......D.
    E0D0: 00 03 01 00 01 03 65 40 20 03 22 43 40 4C 02 00  // ......e@ ."C@L..
    E0E0: 44 49 A7 00 33 25 40 01 43 95 00 2D 2A 40 40 1B  // DI..3%@.C..-*@@.
    E0F0: 25 40 01 03 22 43 40 03 02 00 44 03 01 41 01 7D  // %@.."C@...D..A.}
    E100: 02 00 00 27 05 40 02 00 00 00 2D 02 41 00 1B 05  // ...'.@....-.A...
    E110: 41 01 2D 02 41 40 3E 02 00 41 44 E0 00 03 02 00  // A.-.A@>..AD.....
    E120: 41 43 B7 00 02 02 00 00 5B 00 D1 01 02 01 04 04  // AC......[.......
    E130: 37 00 00 42 21 00 63 07 29 00 63 03 66 00 63 02  // 7..B!.c.).c.f.c.
    E140: D5 00 63 04 FA 00 63 0C 85 01 63 0D A8 01 5A 5A  // ..c...c...c...ZZ
    E150: 43 D0 01 01 0D 1D 48 9F 0F 01 05 1E 48 00 00 00  // C.....H.....H...
    E160: 00 01 05 1F 48 7D 00 00 00 66 06 01 4C 1F 48 39  // ....H}...f..L.H9
    E170: 00 03 24 46 42 00 3E 25 46 00 44 58 00 01 25 1F  // ..$FB.>%F.DX..%.
    E180: 48 00 4A 25 1B 48 10 49 D0 01 0D E5 1B 48 02 5B  // H.J%.H.I.....H.[
    E190: 4A A5 CB 05 01 49 D0 01 4A 25 1B 48 01 44 D0 01  // J....I..J%.H.D..
    E1A0: 4A 25 1C 48 10 44 76 00 4A E5 1B 48 02 49 91 00  // J%.H.Dv.J..H.I..
    E1B0: 4A 25 1C 48 08 49 D0 01 43 C5 00 4A E5 1B 48 01  // J%.H.I..C..J..H.
    E1C0: 49 D0 01 4A 25 1B 48 10 44 C5 00 0D A5 1B 48 03  // I..J%.H.D.....H.
    E1D0: 0D 65 1B 48 03 01 0D 1D 48 00 00 5C 25 1B 48 EF  // .e.H....H..\%.H.
    E1E0: 01 4A 25 1C 48 10 44 B7 00 01 0D 1D 48 9F 0F 07  // .J%.H.D.....H...
    E1F0: E5 1B 48 FC 0D E5 1F 48 01 0D 25 1B 48 11 5B 66  // ..H....H..%.H.[f
    E200: 06 03 24 46 42 00 3E 25 46 00 49 D0 01 4A 25 1B  // ..$FB.>%F.I..J%.
    E210: 48 01 44 D0 01 4A 25 1C 48 10 44 EB 00 5C E5 1B  // H.D..J%.H.D..\..
    E220: 48 FE 02 5B 4A 65 D0 05 02 44 07 01 0D 25 23 48  // H..[Je...D...%#H
    E230: 01 3D 8D 00 00 00 44 84 01 03 05 46 80 F0 FA 02  // .=....D....F....
    E240: 56 00 41 03 19 41 00 21 05 41 FF 0F 00 00 27 02  // V.A..A.!.A....'.
    E250: 46 40 3E 05 41 00 00 00 00 44 37 01 2D 0D 40 01  // F@>.A....D7.-.@.
    E260: 00 01 8A 1D 48 40 56 00 41 03 19 41 00 21 02 40  // ....H@V.A..A.!.@
    E270: 41 27 02 46 40 01 A5 22 48 0C 01 0A 22 48 40 15  // A'.F@.."H..."H@.
    E280: 05 40 04 56 00 41 03 29 41 00 2D 0D 41 01 00 21  // .@.V.A.)A.-.A..!
    E290: 02 40 41 1B 05 40 08 01 0A 20 48 40 0D E5 20 48  // .@A..@... H@.. H
    E2A0: C0 07 25 23 48 FE 4A 65 23 48 01 49 7C 01 5B 4A  // ..%#H.Je#H.I|.[J
    E2B0: 25 1B 48 01 44 9D 01 4A 25 1B 48 10 49 D0 01 4A  // %.H.D..J%.H.I..J
    E2C0: 25 1C 48 10 44 95 01 07 E5 1F 48 FE 0D 25 1B 48  // %.H.D.....H..%.H
    E2D0: 11 5B 4A 25 1B 48 01 44 D0 01 4A 25 1B 48 10 44  // .[J%.H.D..J%.H.D
    E2E0: D0 01 4A 25 1C 48 10 44 B8 01 07 A5 1B 48 FC 07  // ..J%.H.D.....H..
    E2F0: 65 1B 48 FC 5C 25 1B 48 EF 01 5B 00 71 00 03 01  // e.H.\%.H..[.q...
    E300: 08 00 37 00 00 56 00 01 3D E5 00 20 48 1B 00 03  // ..7..V..=.. H...
    E310: 39 43 00 03 02 01 44 03 05 00 00 00 10 C0 2D 09  // 9C....D.......-.
    E320: 00 00 01 02 82 00 00 03 00 40 83 00 56 00 41 03  // .........@..V.A.
    E330: 31 41 00 75 02 40 41 03 25 41 20 33 31 41 00 3D  // 1A.u.@A.%A 31A.=
    E340: E2 00 41 47 61 00 2D 0D 00 04 00 01 02 82 00 00  // ..AGa.-.........
    E350: 02 00 00 83 00 6E 02 00 41 0F 01 40 00 02 02 00  // .....n..A..@....
    E360: 40 33 05 01 01 00 00 00 08 02 00 01 5B 00 CE 00  // @3..........[...
    E370: 03 01 00 10 37 00 00 56 00 40 4A 25 00 EC 01 44  // ....7..V.@J%...D
    E380: 30 00 4A 25 05 EC 1E 49 30 00 03 25 40 01 01 05  // 0.J%...I0..%@...
    E390: 05 EC 03 00 00 00 4A 65 05 EC 0F 49 28 00 3D 65  // ......Je...I(.=e
    E3A0: 02 00 49 3C 00 2C 28 02 09 08 3D E5 02 00 49 48  // ..I<.,(...=...IH
    E3B0: 00 2C A8 02 09 08 3D 65 02 02 49 6B 00 01 05 82  // .,....=e..Ik....
    E3C0: 00 10 00 60 C0 01 01 83 00 00 01 05 82 00 14 00  // ...`............
    E3D0: 60 C0 02 05 00 0C 02 00 00 3D E5 02 03 49 81 00  // `........=...I..
    E3E0: 01 01 82 00 01 02 05 01 0C 02 00 00 43 81 00 54  // ............C..T
    E3F0: 00 63 C0 01 01 64 C0 00 01 21 65 C0 02 01 01 66  // .c...d...!e....f
    E400: C0 01 01 31 67 C0 02 01 01 E8 C0 03 3D 65 02 01  // ...1g.......=e..
    E410: 44 AE 00 3D E5 02 01 44 AE 00 51 02 4A E5 A0 21  // D..=...D..Q.J..!
    E420: 80 49 AE 00 3E 25 40 01 49 CD 00 01 05 05 EC 01  // .I..>%@.I.......
    E430: 00 00 00 4A 65 05 EC 0F 49 C5 00 5B F9 02 02 01  // ...Je...I..[....
    E440: 00 00 37 00 00 3D 25 01 01 44 7B 00 3D 25 01 02  // ..7..=%..D{.=%..
    E450: 44 68 01 3D 25 01 00 49 CA 02 3D 05 00 00 00 00  // Dh.=%..I..=.....
    E460: 00 49 39 00 3A 00 00 0D 25 68 18 01 4A 65 68 18  // .I9.:...%h..Jeh.
    E470: 01 44 30 00 5B 54 20 68 18 52 3C 03 00 40 24 01  // .D0.[T h.R<..@$.
    E480: 3E 39 40 00 44 77 00 4A A5 24 01 08 44 4B 00 03  // >9@.Dw.J.$..DK..
    E490: 39 40 00 3E E5 40 00 49 62 00 03 E5 40 20 01 02  // 9@.>.@.Ib...@ ..
    E4A0: 24 01 40 4A A5 24 01 08 44 67 00 4A A5 24 01 10  // $.@J.$..Dg.J.$..
    E4B0: 44 6F 00 55 38 00 5B 3D 65 01 02 44 D7 00 02 05  // Do.U8.[=e..D....
    E4C0: 00 60 EA 00 00 52 3C 3C F9 24 01 00 44 C1 00 07  // .`...R<<.$..D...
    E4D0: 25 15 01 FE 4A A5 24 01 10 44 98 00 03 00 40 24  // %...J.$..D....@$
    E4E0: 01 03 F9 40 00 3E 25 40 00 49 B4 00 03 25 40 68  // ...@.>%@.I...%@h
    E4F0: 01 02 24 01 40 4A A5 24 01 10 44 B9 00 5D 05 00  // ..$.@J.$..D..]..
    E500: 00 00 00 FF 40 7E 05 00 52 29 07 0D 18 01 F8 FE  // ....@~..R)......
    E510: 43 3A 01 02 05 00 00 46 C3 23 07 25 15 01 FE 4A  // C:.....F.#.%...J
    E520: A5 01 17 03 44 3A 01 56 08 40 03 31 40 01 15 0D  // ....D:.V.@.1@...
    E530: 40 0E 0F 0D 40 0F 04 01 0A 18 17 40 5C B1 19 17  // @...@......@\...
    E540: FC 01 51 05 07 A5 01 17 FC 01 25 05 17 40 01 05  // ..Q.......%..@..
    E550: 02 17 00 00 3C 00 01 65 1C 17 01 54 08 04 17 01  // ....<..e...T....
    E560: A5 05 17 E8 0D A5 19 17 10 4A 65 24 17 02 44 2D  // .........Je$..D-
    E570: 01 0D 65 19 17 03 01 01 42 01 00 01 01 46 01 00  // ..e.....B....F..
    E580: 01 01 4A 01 00 01 01 4E 01 00 01 01 52 01 00 01  // ..J....N....R...
    E590: 01 56 01 00 3D 65 01 02 49 67 01 5C 0D 18 01 F8  // .V..=e..Ig.\....
    E5A0: FF 01 01 5B 56 00 41 03 31 41 01 09 25 41 03 15  // ...[V.A.1A..%A..
    E5B0: 25 41 02 66 FF 2D 0D 42 D1 02 2D 0A 42 41 26 05  // %A.f.-.B..-.BA&.
    E5C0: 00 0A 00 00 00 03 04 41 00 00 27 02 41 40 3E 05  // .......A..'.A@>.
    E5D0: 40 00 00 01 00 45 A1 01 03 0D 40 FF FF 66 FF 2D  // @....E....@..f.-
    E5E0: 0D 42 E1 02 56 00 41 03 39 41 01 15 25 41 02 2D  // .B..V.A.9A..%A.-
    E5F0: 0A 42 41 03 0C 48 00 00 01 0A 30 1B 40 3A 00 00  // .BA..H....0.@:..
    E600: 3D 65 01 0B 49 2C 02 20 05 00 64 00 00 00 03 0C  // =e..I,. ..d.....
    E610: 48 02 00 03 00 41 40 01 0F 25 41 10 09 0D 41 DF  // H....A@..%A...A.
    E620: F7 4B A5 01 04 44 F0 01 0F 65 41 08 03 0C 48 00  // .K...D...eA...H.
    E630: 00 4A 05 9C 1B 01 00 00 00 44 15 02 03 0C 48 02  // .J.......D....H.
    E640: 00 3C 02 41 01 40 49 15 02 3C 02 40 01 41 44 CA  // .<.A.@I..<.@.AD.
    E650: 02 03 0C 48 02 00 07 25 40 01 EF 01 02 41 01 40  // ...H...%@....A.@
    E660: 01 0A 40 01 41 43 CA 02 56 00 40 03 8D 40 0C 00  // ..@.AC..V.@..@..
    E670: 3D 65 01 18 44 4F 02 03 8D 40 3E 00 3D 65 01 19  // =e..DO...@>.=e..
    E680: 44 4F 02 03 A9 40 01 33 A5 40 14 03 31 40 01 09  // DO...@.3.@..1@..
    E690: 25 40 03 15 25 40 04 0F 0D 40 01 01 4B A5 01 04  // %@..%@...@..K...
    E6A0: 44 6C 02 0F 0D 40 00 02 56 00 41 03 29 41 01 33  // Dl...@..V.A.)A.3
    E6B0: 25 41 14 03 0C 48 00 00 4A 05 9C 1B 01 00 00 00  // %A...H..J.......
    E6C0: 44 A8 02 03 0C 48 02 00 4A 25 40 01 10 49 A8 02  // D....H..J%@..I..
    E6D0: 3C 22 43 01 41 49 A8 02 03 1A 48 40 3C 0A 00 01  // <"C.AI....H@<...
    E6E0: 40 44 CA 02 03 1A 48 40 07 25 00 01 FE 03 0C 48  // @D....H@.%.....H
    E6F0: 02 00 01 22 43 01 41 07 0D 40 01 EF F7 03 1A 48  // ..."C.A..@.....H
    E700: 40 01 0A 00 01 40 3A 00 00 5B 7A 28 00 00 CA 9A  // @....@:..[z(....
    E710: 3B 80 7C 81 4A 00 2F 68 59 00 94 35 77 00 00 00  // ;.|.J./hY..5w...
    E720: 00 00 02 04 00 00 04 08 00 00 26 0C 00 00 28 10  // ..........&...(.
    E730: 00 00 2A 14 00 FF FF FF FF FF FF FF FF FF FF FF  // ..*.............
    E740: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E750: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E760: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E7F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    E860: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    E870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    E880: 00 00 00 00                                      // ....


